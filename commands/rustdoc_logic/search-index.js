var searchIndex={};
searchIndex["alloc"] = {"doc":"The Rust core allocation and collections library","i":[[0,"alloc","alloc","Memory allocation APIs",null,null],[3,"Excess","alloc::alloc","Represents the combination of a starting address and a…",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[3,"Layout","","Layout of a block of memory.",null,null],[3,"LayoutErr","","The parameters given to `Layout::from_size_align` or some…",null,null],[3,"AllocErr","","The `AllocErr` error indicates an allocation failure that…",null,null],[3,"CannotReallocInPlace","","The `CannotReallocInPlace` error is used when…",null,null],[8,"GlobalAlloc","","A memory allocator that can be registered as the standard…",null,null],[10,"alloc","","Allocate memory as described by the given `layout`.",1,[[["self"],["layout"]]]],[10,"dealloc","","Deallocate the block of memory at the given `ptr` pointer…",1,[[["self"],["layout"]]]],[11,"alloc_zeroed","","Behaves like `alloc`, but also ensures that the contents…",1,[[["self"],["layout"]]]],[11,"realloc","","Shrink or grow a block of memory to the given `new_size`.…",1,[[["usize"],["self"],["layout"]]]],[8,"Alloc","","An implementation of `Alloc` can allocate, reallocate, and…",null,null],[10,"alloc","","Returns a pointer meeting the size and alignment…",2,[[["self"],["layout"]],[["allocerr"],["result",["nonnull","allocerr"]],["nonnull",["u8"]]]]],[10,"dealloc","","Deallocate the memory referenced by `ptr`.",2,[[["layout"],["self"],["nonnull",["u8"]],["u8"]]]],[11,"usable_size","","Returns bounds on the guaranteed usable size of a…",2,[[["self"],["layout"]]]],[11,"realloc","","Returns a pointer suitable for holding data described by a…",2,[[["layout"],["usize"],["self"],["nonnull",["u8"]],["u8"]],[["allocerr"],["result",["nonnull","allocerr"]],["nonnull",["u8"]]]]],[11,"alloc_zeroed","","Behaves like `alloc`, but also ensures that the contents…",2,[[["self"],["layout"]],[["allocerr"],["result",["nonnull","allocerr"]],["nonnull",["u8"]]]]],[11,"alloc_excess","","Behaves like `alloc`, but also returns the whole size of…",2,[[["self"],["layout"]],[["result",["excess","allocerr"]],["allocerr"],["excess"]]]],[11,"realloc_excess","","Behaves like `realloc`, but also returns the whole size of…",2,[[["layout"],["usize"],["self"],["nonnull",["u8"]],["u8"]],[["result",["excess","allocerr"]],["allocerr"],["excess"]]]],[11,"grow_in_place","","Attempts to extend the allocation referenced by `ptr` to…",2,[[["layout"],["usize"],["self"],["nonnull",["u8"]],["u8"]],[["cannotreallocinplace"],["result",["cannotreallocinplace"]]]]],[11,"shrink_in_place","","Attempts to shrink the allocation referenced by `ptr` to…",2,[[["layout"],["usize"],["self"],["nonnull",["u8"]],["u8"]],[["cannotreallocinplace"],["result",["cannotreallocinplace"]]]]],[11,"alloc_one","","Allocates a block suitable for holding an instance of `T`.",2,[[["self"]],[["result",["nonnull","allocerr"]],["nonnull"],["allocerr"]]]],[11,"dealloc_one","","Deallocates a block suitable for holding an instance of `T`.",2,[[["self"],["nonnull"]]]],[11,"alloc_array","","Allocates a block suitable for holding `n` instances of `T`.",2,[[["self"],["usize"]],[["result",["nonnull","allocerr"]],["nonnull"],["allocerr"]]]],[11,"realloc_array","","Reallocates a block previously suitable for holding…",2,[[["nonnull"],["usize"],["self"]],[["result",["nonnull","allocerr"]],["nonnull"],["allocerr"]]]],[11,"dealloc_array","","Deallocates a block suitable for holding `n` instances of…",2,[[["self"],["nonnull"],["usize"]],[["result",["allocerr"]],["allocerr"]]]],[3,"Global","","The global memory allocator.",null,null],[5,"alloc","","Allocate memory with the global allocator.",null,[[["layout"]]]],[5,"dealloc","","Deallocate memory with the global allocator.",null,[[["layout"]]]],[5,"realloc","","Reallocate memory with the global allocator.",null,[[["usize"],["layout"]]]],[5,"alloc_zeroed","","Allocate zero-initialized memory with the global allocator.",null,[[["layout"]]]],[5,"handle_alloc_error","","Abort on memory allocation error or failure.",null,[[["layout"]]]],[0,"boxed","alloc","A pointer type for heap allocation.",null,null],[3,"Box","alloc::boxed","A pointer type for heap allocation.",null,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",3,[[["t"]],["box"]]],[11,"new_uninit","","Constructs a new box with uninitialized contents.",3,[[],[["maybeuninit"],["box",["maybeuninit"]]]]],[11,"new_zeroed","","Constructs a new `Box` with uninitialized contents, with…",3,[[],[["maybeuninit"],["box",["maybeuninit"]]]]],[11,"pin","","Constructs a new `Pin<Box<T>>`. If `T` does not implement…",3,[[["t"]],[["pin",["box"]],["box"]]]],[11,"new_uninit_slice","","Constructs a new boxed slice with uninitialized contents.",3,[[["usize"]],["box"]]],[11,"assume_init","","Converts to `Box<T>`.",3,[[],["box"]]],[11,"assume_init","","Converts to `Box<[T]>`.",3,[[],["box"]]],[11,"from_raw","","Constructs a box from a raw pointer.",3,[[],["self"]]],[11,"into_raw","","Consumes the `Box`, returning a wrapped raw pointer.",3,[[["box"]]]],[11,"into_raw_non_null","","Consumes the `Box`, returning the wrapped pointer as…",3,[[["box"]],["nonnull"]]],[11,"leak","","Consumes and leaks the `Box`, returning a mutable…",3,[[["box"]],["t"]]],[11,"into_pin","","Converts a `Box<T>` into a `Pin<Box<T>>`",3,[[["box"]],[["pin",["box"]],["box"]]]],[11,"downcast","","Attempt to downcast the box to a concrete type.",3,[[],[["result",["box","box"]],["box"],["box",["any"]]]]],[11,"downcast","","Attempt to downcast the box to a concrete type.",3,[[],[["box",["any"]],["result",["box","box"]],["box"]]]],[0,"borrow","alloc","A module for working with borrowed data.",null,null],[8,"Borrow","alloc::borrow","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",4,[[["self"]],["borrowed"]]],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",5,[[["self"]],["borrowed"]]],[4,"Cow","","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",6,null],[13,"Owned","","Owned data.",6,null],[8,"ToOwned","","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","The resulting type after obtaining ownership.",7,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",7,[[["self"]]]],[11,"clone_into","","Uses borrowed data to replace owned data, usually by…",7,[[["self"]]]],[11,"is_borrowed","","Returns true if the data is borrowed, i.e. if `to_mut`…",6,[[["self"]],["bool"]]],[11,"is_owned","","Returns true if the data is owned, i.e. if `to_mut` would…",6,[[["self"]],["bool"]]],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",6,[[["self"]]]],[11,"into_owned","","Extracts the owned data.",6,[[]]],[0,"collections","alloc","Collection types.",null,null],[4,"TryReserveError","alloc::collections","The error type for `try_reserve` methods.",null,null],[13,"CapacityOverflow","","Error due to the computed capacity exceeding the…",8,null],[13,"AllocError","","The memory allocator returned an error",8,null],[12,"layout","alloc::collections::TryReserveError","The layout of allocation request that failed",8,null],[0,"binary_heap","alloc::collections","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","alloc::collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[3,"PeekMut","","Structure wrapping a mutable reference to the greatest…",null,null],[3,"Iter","","An iterator over the elements of a `BinaryHeap`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `BinaryHeap`.",null,null],[3,"IntoIterSorted","","",null,null],[3,"Drain","","A draining iterator over the elements of a `BinaryHeap`.",null,null],[3,"DrainSorted","","A draining iterator over the elements of a `BinaryHeap`.",null,null],[11,"pop","","Removes the peeked value from the heap and returns it.",9,[[["peekmut"]],["t"]]],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",10,[[],["binaryheap"]]],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.…",10,[[["usize"]],["binaryheap"]]],[11,"peek_mut","","Returns a mutable reference to the greatest item in the…",10,[[["self"]],[["option",["peekmut"]],["peekmut"]]]],[11,"pop","","Removes the greatest item from the binary heap and returns…",10,[[["self"]],["option"]]],[11,"push","","Pushes an item onto the binary heap.",10,[[["self"],["t"]]]],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted…",10,[[],["vec"]]],[11,"append","","Moves all the elements of `other` into `self`, leaving…",10,[[["self"]]]],[11,"drain_sorted","","Returns an iterator which retrieves elements in heap…",10,[[["self"]],["drainsorted"]]],[11,"iter","","Returns an iterator visiting all values in the underlying…",10,[[["self"]],["iter"]]],[11,"into_iter_sorted","","Returns an iterator which retrieves elements in heap…",10,[[],["intoitersorted"]]],[11,"peek","","Returns the greatest item in the binary heap, or `None` if…",10,[[["self"]],[["option"],["t"]]]],[11,"capacity","","Returns the number of elements the binary heap can hold…",10,[[["self"]],["usize"]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional`…",10,[[["self"],["usize"]]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",10,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",10,[[["self"]]]],[11,"shrink_to","","Discards capacity with a lower bound.",10,[[["self"],["usize"]]]],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying…",10,[[],["vec"]]],[11,"len","","Returns the length of the binary heap.",10,[[["self"]],["usize"]]],[11,"is_empty","","Checks if the binary heap is empty.",10,[[["self"]],["bool"]]],[11,"drain","","Clears the binary heap, returning an iterator over the…",10,[[["self"]],["drain"]]],[11,"clear","","Drops all items from the binary heap.",10,[[["self"]]]],[0,"linked_list","alloc::collections","A doubly-linked list with owned nodes.",null,null],[3,"LinkedList","alloc::collections::linked_list","A doubly-linked list with owned nodes.",null,null],[3,"Iter","","An iterator over the elements of a `LinkedList`.",null,null],[3,"IterMut","","A mutable iterator over the elements of a `LinkedList`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `LinkedList`.",null,null],[3,"Cursor","","A cursor over a `LinkedList`.",null,null],[3,"CursorMut","","A cursor over a `LinkedList` with editing operations.",null,null],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on…",null,null],[11,"new","","Creates an empty `LinkedList`.",11,[[],["self"]]],[11,"append","","Moves all elements from `other` to the end of the list.",11,[[["self"]]]],[11,"prepend","","Moves all elements from `other` to the begin of the list.",11,[[["self"]]]],[11,"iter","","Provides a forward iterator.",11,[[["self"]],["iter"]]],[11,"iter_mut","","Provides a forward iterator with mutable references.",11,[[["self"]],["itermut"]]],[11,"cursor_front","","Provides a cursor at the front element.",11,[[["self"]],["cursor"]]],[11,"cursor_front_mut","","Provides a cursor with editing operations at the front…",11,[[["self"]],["cursormut"]]],[11,"cursor_back","","Provides a cursor at the back element.",11,[[["self"]],["cursor"]]],[11,"cursor_back_mut","","Provides a cursor with editing operations at the back…",11,[[["self"]],["cursormut"]]],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",11,[[["self"]],["bool"]]],[11,"len","","Returns the length of the `LinkedList`.",11,[[["self"]],["usize"]]],[11,"clear","","Removes all elements from the `LinkedList`.",11,[[["self"]]]],[11,"contains","","Returns `true` if the `LinkedList` contains an element…",11,[[["t"],["self"]],["bool"]]],[11,"front","","Provides a reference to the front element, or `None` if…",11,[[["self"]],[["option"],["t"]]]],[11,"front_mut","","Provides a mutable reference to the front element, or…",11,[[["self"]],[["option"],["t"]]]],[11,"back","","Provides a reference to the back element, or `None` if the…",11,[[["self"]],[["option"],["t"]]]],[11,"back_mut","","Provides a mutable reference to the back element, or…",11,[[["self"]],[["option"],["t"]]]],[11,"push_front","","Adds an element first in the list.",11,[[["self"],["t"]]]],[11,"pop_front","","Removes the first element and returns it, or `None` if the…",11,[[["self"]],["option"]]],[11,"push_back","","Appends an element to the back of a list.",11,[[["self"],["t"]]]],[11,"pop_back","","Removes the last element from a list and returns it, or…",11,[[["self"]],["option"]]],[11,"split_off","","Splits the list into two at the given index. Returns…",11,[[["self"],["usize"]],["linkedlist"]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if…",11,[[["self"],["f"]],["drainfilter"]]],[11,"insert_next","","Inserts the given element just after the element most…",12,[[["self"],["t"]]]],[11,"peek_next","","Provides a reference to the next element, without changing…",12,[[["self"]],[["option"],["t"]]]],[11,"index","","Returns the cursor position index within the `LinkedList`.",13,[[["self"]],[["usize"],["option",["usize"]]]]],[11,"move_next","","Moves the cursor to the next element of the `LinkedList`.",13,[[["self"]]]],[11,"move_prev","","Moves the cursor to the previous element of the…",13,[[["self"]]]],[11,"current","","Returns a reference to the element that the cursor is…",13,[[["self"]],[["t"],["option"]]]],[11,"peek_next","","Returns a reference to the next element.",13,[[["self"]],[["t"],["option"]]]],[11,"peek_prev","","Returns a reference to the previous element.",13,[[["self"]],[["t"],["option"]]]],[11,"index","","Returns the cursor position index within the `LinkedList`.",14,[[["self"]],[["usize"],["option",["usize"]]]]],[11,"move_next","","Moves the cursor to the next element of the `LinkedList`.",14,[[["self"]]]],[11,"move_prev","","Moves the cursor to the previous element of the…",14,[[["self"]]]],[11,"current","","Returns a reference to the element that the cursor is…",14,[[["self"]],[["option"],["t"]]]],[11,"peek_next","","Returns a reference to the next element.",14,[[["self"]],[["option"],["t"]]]],[11,"peek_prev","","Returns a reference to the previous element.",14,[[["self"]],[["option"],["t"]]]],[11,"as_cursor","","Returns a read-only cursor pointing to the current element.",14,[[["self"]],["cursor"]]],[11,"insert_after","","Inserts a new element into the `LinkedList` after the…",14,[[["self"],["t"]]]],[11,"insert_before","","Inserts a new element into the `LinkedList` before the…",14,[[["self"],["t"]]]],[11,"remove_current","","Removes the current element from the `LinkedList`.",14,[[["self"]],["option"]]],[11,"splice_after","","Inserts the elements from the given `LinkedList` after the…",14,[[["linkedlist"],["self"]]]],[11,"splice_before","","Inserts the elements from the given `LinkedList` before…",14,[[["linkedlist"],["self"]]]],[11,"split_after","","Splits the list into two after the current element. This…",14,[[["self"]],["linkedlist"]]],[11,"split_before","","Splits the list into two before the current element. This…",14,[[["self"]],["linkedlist"]]],[0,"vec_deque","alloc::collections","A double-ended queue implemented with a growable ring…",null,null],[3,"VecDeque","alloc::collections::vec_deque","A double-ended queue implemented with a growable ring…",null,null],[3,"Iter","","An iterator over the elements of a `VecDeque`.",null,null],[3,"IterMut","","A mutable iterator over the elements of a `VecDeque`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `VecDeque`.",null,null],[3,"Drain","","A draining iterator over the elements of a `VecDeque`.",null,null],[11,"new","","Creates an empty `VecDeque`.",15,[[],["vecdeque"]]],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least…",15,[[["usize"]],["vecdeque"]]],[11,"get","","Retrieves an element in the `VecDeque` by index.",15,[[["self"],["usize"]],[["option"],["t"]]]],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",15,[[["self"],["usize"]],[["option"],["t"]]]],[11,"swap","","Swaps elements at indices `i` and `j`.",15,[[["self"],["usize"]]]],[11,"capacity","","Returns the number of elements the `VecDeque` can hold…",15,[[["self"]],["usize"]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional`…",15,[[["self"],["usize"]]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",15,[[["self"],["usize"]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly…",15,[[["self"],["usize"]],[["tryreserveerror"],["result",["tryreserveerror"]]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",15,[[["self"],["usize"]],[["tryreserveerror"],["result",["tryreserveerror"]]]]],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",15,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of the `VecDeque` with a lower bound.",15,[[["self"],["usize"]]]],[11,"truncate","","Shortens the `VecDeque`, keeping the first `len` elements…",15,[[["self"],["usize"]]]],[11,"iter","","Returns a front-to-back iterator.",15,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable…",15,[[["self"]],["itermut"]]],[11,"as_slices","","Returns a pair of slices which contain, in order, the…",15,[[["self"]]]],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the…",15,[[["self"]]]],[11,"len","","Returns the number of elements in the `VecDeque`.",15,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the `VecDeque` is empty.",15,[[["self"]],["bool"]]],[11,"drain","","Creates a draining iterator that removes the specified…",15,[[["self"],["r"]],["drain"]]],[11,"clear","","Clears the `VecDeque`, removing all values.",15,[[["self"]]]],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal…",15,[[["t"],["self"]],["bool"]]],[11,"front","","Provides a reference to the front element, or `None` if…",15,[[["self"]],[["option"],["t"]]]],[11,"front_mut","","Provides a mutable reference to the front element, or…",15,[[["self"]],[["option"],["t"]]]],[11,"back","","Provides a reference to the back element, or `None` if the…",15,[[["self"]],[["option"],["t"]]]],[11,"back_mut","","Provides a mutable reference to the back element, or…",15,[[["self"]],[["option"],["t"]]]],[11,"pop_front","","Removes the first element and returns it, or `None` if the…",15,[[["self"]],["option"]]],[11,"pop_back","","Removes the last element from the `VecDeque` and returns…",15,[[["self"]],["option"]]],[11,"push_front","","Prepends an element to the `VecDeque`.",15,[[["self"],["t"]]]],[11,"push_back","","Appends an element to the back of the `VecDeque`.",15,[[["self"],["t"]]]],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and…",15,[[["self"],["usize"]],["option"]]],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and…",15,[[["self"],["usize"]],["option"]]],[11,"insert","","Inserts an element at `index` within the `VecDeque`,…",15,[[["self"],["usize"],["t"]]]],[11,"remove","","Removes and returns the element at `index` from the…",15,[[["self"],["usize"]],["option"]]],[11,"split_off","","Splits the `VecDeque` into two at the given index.",15,[[["self"],["usize"]],["self"]]],[11,"append","","Moves all the elements of `other` into `self`, leaving…",15,[[["self"]]]],[11,"retain","","Retains only the elements specified by the predicate.",15,[[["self"],["f"]]]],[11,"resize_with","","Modifies the `VecDeque` in-place so that `len()` is equal…",15,[[["self"],["usize"]]]],[11,"rotate_left","","Rotates the double-ended queue `mid` places to the left.",15,[[["self"],["usize"]]]],[11,"rotate_right","","Rotates the double-ended queue `k` places to the right.",15,[[["self"],["usize"]]]],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal…",15,[[["self"],["usize"],["t"]]]],[0,"btree_map","alloc::collections","A map based on a B-Tree.",null,null],[3,"BTreeMap","alloc::collections::btree_map","A map based on a B-Tree.",null,null],[3,"Iter","","An iterator over the entries of a `BTreeMap`.",null,null],[3,"IterMut","","A mutable iterator over the entries of a `BTreeMap`.",null,null],[3,"IntoIter","","An owning iterator over the entries of a `BTreeMap`.",null,null],[3,"Keys","","An iterator over the keys of a `BTreeMap`.",null,null],[3,"Values","","An iterator over the values of a `BTreeMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a `BTreeMap`.",null,null],[3,"Range","","An iterator over a sub-range of entries in a `BTreeMap`.",null,null],[3,"RangeMut","","A mutable iterator over a sub-range of entries in a…",null,null],[3,"VacantEntry","","A view into a vacant entry in a `BTreeMap`. It is part of…",null,null],[3,"OccupiedEntry","","A view into an occupied entry in a `BTreeMap`. It is part…",null,null],[4,"Entry","","A view into a single entry in a map, which may either be…",null,null],[13,"Vacant","","A vacant entry.",16,null],[13,"Occupied","","An occupied entry.",16,null],[0,"btree_set","alloc::collections","A set based on a B-Tree.",null,null],[3,"BTreeSet","alloc::collections::btree_set","A set based on a B-Tree.",null,null],[3,"Iter","","An iterator over the items of a `BTreeSet`.",null,null],[3,"IntoIter","","An owning iterator over the items of a `BTreeSet`.",null,null],[3,"Range","","An iterator over a sub-range of items in a `BTreeSet`.",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of…",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric…",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of…",null,null],[3,"Union","","A lazy iterator producing elements in the union of…",null,null],[0,"fmt","alloc","Utilities for formatting and printing `String`s.",null,null],[4,"Alignment","alloc::fmt","Possible alignments returned by `Formatter::align`",null,null],[13,"Left","","Indication that contents should be left-aligned.",17,null],[13,"Right","","Indication that contents should be right-aligned.",17,null],[13,"Center","","Indication that contents should be center-aligned.",17,null],[3,"Error","","The error type which is returned from formatting a message…",null,null],[5,"write","","The `write` function takes an output stream, and an…",null,[[["arguments"],["write"]],[["error"],["result",["error"]]]]],[3,"Arguments","","This structure represents a safely precompiled version of…",null,null],[8,"Binary","","`b` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",18,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[8,"Octal","","`o` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",19,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[8,"Debug","","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",20,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[14,"Debug","","Derive macro generating an impl of the trait `Debug`.",null,null],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",21,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"Formatter","","Configuration for formatting.",null,null],[6,"Result","","The type returned by formatter methods.",null,null],[8,"Write","","A collection of methods that are required to format a…",null,null],[10,"write_str","","Writes a string slice into this writer, returning whether…",22,[[["str"],["self"]],[["error"],["result",["error"]]]]],[11,"write_char","","Writes a [`char`] into this writer, returning whether the…",22,[[["self"],["char"]],[["error"],["result",["error"]]]]],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors…",22,[[["self"],["arguments"]],[["error"],["result",["error"]]]]],[8,"LowerExp","","`e` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",23,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[8,"UpperExp","","`E` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",24,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[8,"LowerHex","","`x` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",25,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[8,"Pointer","","`p` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",26,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[8,"UpperHex","","`X` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",27,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[5,"format","","The `format` function takes an [`Arguments`] struct and…",null,[[["arguments"]],["string"]]],[0,"prelude","alloc","The alloc Prelude",null,null],[0,"v1","alloc::prelude","The first version of the prelude of `alloc` crate.",null,null],[0,"rc","alloc","Single-threaded reference-counting pointers. 'Rc' stands…",null,null],[3,"Rc","alloc::rc","A single-threaded reference-counting pointer. 'Rc' stands…",null,null],[3,"Weak","","`Weak` is a version of [`Rc`] that holds a non-owning…",null,null],[11,"new","","Constructs a new `Rc<T>`.",28,[[["t"]],["rc"]]],[11,"new_uninit","","Constructs a new `Rc` with uninitialized contents.",28,[[],[["maybeuninit"],["rc",["maybeuninit"]]]]],[11,"new_zeroed","","Constructs a new `Rc` with uninitialized contents, with…",28,[[],[["maybeuninit"],["rc",["maybeuninit"]]]]],[11,"pin","","Constructs a new `Pin<Rc<T>>`. If `T` does not implement…",28,[[["t"]],[["rc"],["pin",["rc"]]]]],[11,"try_unwrap","","Returns the inner value, if the `Rc` has exactly one…",28,[[],["result"]]],[11,"new_uninit_slice","","Constructs a new reference-counted slice with…",28,[[["usize"]],["rc"]]],[11,"assume_init","","Converts to `Rc<T>`.",28,[[],["rc"]]],[11,"assume_init","","Converts to `Rc<[T]>`.",28,[[],["rc"]]],[11,"into_raw","","Consumes the `Rc`, returning the wrapped pointer.",28,[[]]],[11,"from_raw","","Constructs an `Rc` from a raw pointer.",28,[[],["self"]]],[11,"into_raw_non_null","","Consumes the `Rc`, returning the wrapped pointer as…",28,[[],["nonnull"]]],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this allocation.",28,[[["self"]],["weak"]]],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this…",28,[[["self"]],["usize"]]],[11,"strong_count","","Gets the number of strong (`Rc`) pointers to this…",28,[[["self"]],["usize"]]],[11,"get_mut","","Returns a mutable reference into the given `Rc`, if there…",28,[[["self"]],[["option"],["t"]]]],[11,"get_mut_unchecked","","Returns a mutable reference into the given `Rc`, without…",28,[[["self"]],["t"]]],[11,"ptr_eq","","Returns `true` if the two `Rc`s point to the same…",28,[[["self"]],["bool"]]],[11,"make_mut","","Makes a mutable reference into the given `Rc`.",28,[[["self"]],["t"]]],[11,"downcast","","Attempt to downcast the `Rc<dyn Any>` to a concrete type.",28,[[],[["result",["rc","rc"]],["rc"],["rc",["any"]]]]],[11,"new","","Constructs a new `Weak<T>`, without allocating any memory.…",29,[[],["weak"]]],[11,"as_raw","","Returns a raw pointer to the object `T` pointed to by this…",29,[[["self"]]]],[11,"into_raw","","Consumes the `Weak<T>` and turns it into a raw pointer.",29,[[]]],[11,"from_raw","","Converts a raw pointer previously created by [`into_raw`]…",29,[[],["self"]]],[11,"upgrade","","Attempts to upgrade the `Weak` pointer to an [`Rc`],…",29,[[["self"]],[["rc"],["option",["rc"]]]]],[11,"strong_count","","Gets the number of strong (`Rc`) pointers pointing to this…",29,[[["self"]],["usize"]]],[11,"weak_count","","Gets the number of `Weak` pointers pointing to this…",29,[[["self"]],["usize"]]],[11,"ptr_eq","","Returns `true` if the two `Weak`s point to the same…",29,[[["self"]],["bool"]]],[0,"slice","alloc","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"SliceIndex","alloc::slice","A helper trait used for indexing operations.",null,null],[16,"Output","","The output type returned by methods.",30,null],[10,"get","","Returns a shared reference to the output at this location,…",30,[[["t"]],["option"]]],[10,"get_mut","","Returns a mutable reference to the output at this…",30,[[["t"]],["option"]]],[10,"get_unchecked","","Returns a shared reference to the output at this location,…",30,[[["t"]]]],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this…",30,[[["t"]]]],[10,"index","","Returns a shared reference to the output at this location,…",30,[[["t"]]]],[10,"index_mut","","Returns a mutable reference to the output at this…",30,[[["t"]]]],[5,"from_mut","","Converts a reference to T into a slice of length 1…",null,[[["t"]]]],[5,"from_ref","","Converts a reference to T into a slice of length 1…",null,[[["t"]]]],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,[[["usize"]]]],[5,"from_raw_parts_mut","","Performs the same functionality as [`from_raw_parts`],…",null,[[["usize"]]]],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks…",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"ChunksExact","","An iterator over a slice in (non-overlapping) chunks…",null,null],[3,"ChunksExactMut","","An iterator over a slice in (non-overlapping) mutable…",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable…",null,null],[3,"Split","","An iterator over subslices separated by elements that…",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are…",null,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"RChunks","","An iterator over a slice in (non-overlapping) chunks…",null,null],[3,"RChunksExact","","An iterator over a slice in (non-overlapping) chunks…",null,null],[3,"RChunksExactMut","","An iterator over a slice in (non-overlapping) mutable…",null,null],[3,"RChunksMut","","An iterator over a slice in (non-overlapping) mutable…",null,null],[3,"RSplit","","An iterator over subslices separated by elements that…",null,null],[3,"RSplitMut","","An iterator over the subslices of the vector which are…",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that…",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that…",null,null],[3,"SplitN","","An iterator over subslices separated by elements that…",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that…",null,null],[8,"Concat","","Helper trait for `[T]::concat`.",null,null],[16,"Output","","The resulting type after concatenation",31,null],[10,"concat","","Implementation of `[T]::concat`",31,[[["self"]]]],[8,"Join","","Helper trait for `[T]::join`",null,null],[16,"Output","","The resulting type after concatenation",32,null],[10,"join","","Implementation of `[T]::join`",32,[[["self"],["separator"]]]],[0,"str","alloc","Unicode string slices.",null,null],[0,"pattern","alloc::str","The string Pattern API.",null,null],[8,"Pattern","alloc::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",33,null],[10,"into_searcher","","Constructs the associated searcher from `self` and the…",33,[[["str"]]]],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",33,[[["str"]],["bool"]]],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the…",33,[[["str"]],["bool"]]],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the…",33,[[["str"]],["bool"]]],[4,"SearchStep","","Result of calling `Searcher::next()` or…",null,null],[13,"Match","","Expresses that a match of the pattern has been found at…",34,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a…",34,null],[13,"Done","","Expresses that every byte of the haystack has been…",34,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlying string to be searched in",35,[[["self"]],["str"]]],[10,"next","","Performs the next search step starting from the front.",35,[[["self"]],["searchstep"]]],[11,"next_match","","Finds the next `Match` result. See `next()`",35,[[["self"]],["option"]]],[11,"next_reject","","Finds the next `Reject` result. See `next()` and…",35,[[["self"]],["option"]]],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",36,[[["self"]],["searchstep"]]],[11,"next_match_back","","Finds the next `Match` result. See `next_back()`",36,[[["self"]],["option"]]],[11,"next_reject_back","","Finds the next `Reject` result. See `next_back()`",36,[[["self"]],["option"]]],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be…",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[3,"EncodeUtf16","alloc::str","An iterator of [`u16`] over the string encoded as UTF-16.",null,null],[3,"SplitAsciiWhitespace","","An iterator over the non-ASCII-whitespace substrings of a…",null,null],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a…",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,[[],[["str"],["utf8error"],["result",["str","utf8error"]]]]],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",null,[[],[["result",["str","utf8error"]],["str"],["utf8error"]]]],[3,"Bytes","","An iterator over the bytes of a string slice.",null,null],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and…",null,null],[3,"Chars","","An iterator over the [`char`]s of a string slice.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without…",null,[[],["str"]]],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without…",null,[[],["str"]]],[3,"ParseBoolError","","An error returned when parsing a `bool` using [`from_str`]…",null,null],[3,"EscapeDebug","","The return type of [`str::escape_debug`].",null,null],[3,"EscapeDefault","","The return type of [`str::escape_default`].",null,null],[3,"EscapeUnicode","","The return type of [`str::escape_unicode`].",null,null],[8,"FromStr","","Parse a value from a string",null,null],[16,"Err","","The associated error which can be returned from parsing.",37,null],[10,"from_str","","Parses a string `s` to return a value of this type.",37,[[["str"]],["result"]]],[3,"Utf8Error","","Errors which can occur when attempting to interpret a…",null,null],[3,"Lines","","An iterator over the lines of a string, as string slices.",null,null],[3,"LinesAny","","Created with the method [`lines_any`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",null,null],[3,"Matches","","Created with the method [`matches`].",null,null],[3,"RMatches","","Created with the method [`rmatches`].",null,null],[3,"RSplit","","Created with the method [`rsplit`].",null,null],[3,"Split","","Created with the method [`split`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn`].",null,null],[3,"SplitN","","Created with the method [`splitn`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator`].",null,null],[5,"from_boxed_utf8_unchecked","","Converts a boxed slice of bytes to a boxed string slice…",null,[[["box"]],[["str"],["box",["str"]]]]],[0,"string","alloc","A UTF-8 encoded, growable string.",null,null],[3,"String","alloc::string","A UTF-8 encoded, growable string.",null,null],[3,"FromUtf8Error","","A possible error value when converting a `String` from a…",null,null],[3,"FromUtf16Error","","A possible error value when converting a `String` from a…",null,null],[3,"Drain","","A draining iterator for `String`.",null,null],[6,"ParseError","","An error when parsing a `String`.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",38,[[["self"]],["string"]]],[11,"new","","Creates a new empty `String`.",39,[[],["string"]]],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",39,[[["usize"]],["string"]]],[11,"from_utf8","","Converts a vector of bytes to a `String`.",39,[[["vec",["u8"]],["u8"]],[["fromutf8error"],["result",["string","fromutf8error"]],["string"]]]],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid…",39,[[],[["str"],["cow",["str"]]]]],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`,…",39,[[],[["fromutf16error"],["result",["string","fromutf16error"]],["string"]]]],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice `v` into a `String`,…",39,[[],["string"]]],[11,"into_raw_parts","","Decomposes a `String` into its raw components.",39,[[]]],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",39,[[["usize"]],["string"]]],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking…",39,[[["vec",["u8"]],["u8"]],["string"]]],[11,"into_bytes","","Converts a `String` into a byte vector.",39,[[],[["u8"],["vec",["u8"]]]]],[11,"as_str","","Extracts a string slice containing the entire `String`.",39,[[["self"]],["str"]]],[11,"as_mut_str","","Converts a `String` into a mutable string slice.",39,[[["self"]],["str"]]],[11,"push_str","","Appends a given string slice onto the end of this `String`.",39,[[["str"],["self"]]]],[11,"capacity","","Returns this `String`'s capacity, in bytes.",39,[[["self"]],["usize"]]],[11,"reserve","","Ensures that this `String`'s capacity is at least…",39,[[["self"],["usize"]]]],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional`…",39,[[["self"],["usize"]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",39,[[["self"],["usize"]],[["tryreserveerror"],["result",["tryreserveerror"]]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly…",39,[[["self"],["usize"]],[["tryreserveerror"],["result",["tryreserveerror"]]]]],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",39,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of this `String` with a lower bound.",39,[[["self"],["usize"]]]],[11,"push","","Appends the given [`char`] to the end of this `String`.",39,[[["self"],["char"]]]],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",39,[[["self"]]]],[11,"truncate","","Shortens this `String` to the specified length.",39,[[["self"],["usize"]]]],[11,"pop","","Removes the last character from the string buffer and…",39,[[["self"]],[["option",["char"]],["char"]]]],[11,"remove","","Removes a [`char`] from this `String` at a byte position…",39,[[["self"],["usize"]],["char"]]],[11,"retain","","Retains only the characters specified by the predicate.",39,[[["self"],["f"]]]],[11,"insert","","Inserts a character into this `String` at a byte position.",39,[[["self"],["usize"],["char"]]]],[11,"insert_str","","Inserts a string slice into this `String` at a byte…",39,[[["str"],["self"],["usize"]]]],[11,"as_mut_vec","","Returns a mutable reference to the contents of this…",39,[[["self"]],["vec"]]],[11,"len","","Returns the length of this `String`, in bytes, not…",39,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if this `String` has a length of zero, and…",39,[[["self"]],["bool"]]],[11,"split_off","","Splits the string into two at the given index.",39,[[["self"],["usize"]],["string"]]],[11,"clear","","Truncates this `String`, removing all contents.",39,[[["self"]]]],[11,"drain","","Creates a draining iterator that removes the specified…",39,[[["self"],["r"]],["drain"]]],[11,"replace_range","","Removes the specified range in the string, and replaces it…",39,[[["str"],["self"],["r"]]]],[11,"into_boxed_str","","Converts this `String` into a [`Box`]`<`[`str`]`>`.",39,[[],[["str"],["box",["str"]]]]],[11,"as_bytes","","Returns a slice of [`u8`]s bytes that were attempted to…",40,[[["self"]]]],[11,"into_bytes","","Returns the bytes that were attempted to convert to a…",40,[[],[["u8"],["vec",["u8"]]]]],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the…",40,[[["self"]],["utf8error"]]],[0,"sync","alloc","Thread-safe reference-counting pointers.",null,null],[3,"Arc","alloc::sync","A thread-safe reference-counting pointer. 'Arc' stands for…",null,null],[3,"Weak","","`Weak` is a version of [`Arc`] that holds a non-owning…",null,null],[11,"new","","Constructs a new `Arc<T>`.",41,[[["t"]],["arc"]]],[11,"new_uninit","","Constructs a new `Arc` with uninitialized contents.",41,[[],[["arc",["maybeuninit"]],["maybeuninit"]]]],[11,"new_zeroed","","Constructs a new `Arc` with uninitialized contents, with…",41,[[],[["arc",["maybeuninit"]],["maybeuninit"]]]],[11,"pin","","Constructs a new `Pin<Arc<T>>`. If `T` does not implement…",41,[[["t"]],[["pin",["arc"]],["arc"]]]],[11,"try_unwrap","","Returns the inner value, if the `Arc` has exactly one…",41,[[],["result"]]],[11,"new_uninit_slice","","Constructs a new reference-counted slice with…",41,[[["usize"]],["arc"]]],[11,"assume_init","","Converts to `Arc<T>`.",41,[[],["arc"]]],[11,"assume_init","","Converts to `Arc<[T]>`.",41,[[],["arc"]]],[11,"into_raw","","Consumes the `Arc`, returning the wrapped pointer.",41,[[]]],[11,"from_raw","","Constructs an `Arc` from a raw pointer.",41,[[],["self"]]],[11,"into_raw_non_null","","Consumes the `Arc`, returning the wrapped pointer as…",41,[[],["nonnull"]]],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this allocation.",41,[[["self"]],["weak"]]],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this…",41,[[["self"]],["usize"]]],[11,"strong_count","","Gets the number of strong (`Arc`) pointers to this…",41,[[["self"]],["usize"]]],[11,"ptr_eq","","Returns `true` if the two `Arc`s point to the same…",41,[[["self"]],["bool"]]],[11,"make_mut","","Makes a mutable reference into the given `Arc`.",41,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference into the given `Arc`, if there…",41,[[["self"]],[["option"],["t"]]]],[11,"get_mut_unchecked","","Returns a mutable reference into the given `Arc`, without…",41,[[["self"]],["t"]]],[11,"downcast","","Attempt to downcast the `Arc<dyn Any + Send + Sync>` to a…",41,[[],[["arc"],["result",["arc"]]]]],[11,"new","","Constructs a new `Weak<T>`, without allocating any memory.…",42,[[],["weak"]]],[11,"as_raw","","Returns a raw pointer to the object `T` pointed to by this…",42,[[["self"]]]],[11,"into_raw","","Consumes the `Weak<T>` and turns it into a raw pointer.",42,[[]]],[11,"from_raw","","Converts a raw pointer previously created by [`into_raw`]…",42,[[],["self"]]],[11,"upgrade","","Attempts to upgrade the `Weak` pointer to an [`Arc`],…",42,[[["self"]],[["option",["arc"]],["arc"]]]],[11,"strong_count","","Gets the number of strong (`Arc`) pointers pointing to…",42,[[["self"]],["usize"]]],[11,"weak_count","","Gets an approximation of the number of `Weak` pointers…",42,[[["self"]],["usize"]]],[11,"ptr_eq","","Returns `true` if the two `Weak`s point to the same…",42,[[["self"]],["bool"]]],[0,"vec","alloc","A contiguous growable array type with heap-allocated…",null,null],[3,"Vec","alloc::vec","A contiguous growable array type, written `Vec<T>` but…",null,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[3,"Drain","","A draining iterator for `Vec<T>`.",null,null],[3,"Splice","","A splicing iterator for `Vec`.",null,null],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on Vec.",null,null],[11,"new","","Constructs a new, empty `Vec<T>`.",43,[[],["vec"]]],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified…",43,[[["usize"]],["vec"]]],[11,"into_raw_parts","","Decomposes a `Vec<T>` into its raw components.",43,[[]]],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of…",43,[[["usize"]],["vec"]]],[11,"capacity","","Returns the number of elements the vector can hold without…",43,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",43,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional`…",43,[[["self"],["usize"]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",43,[[["self"],["usize"]],[["tryreserveerror"],["result",["tryreserveerror"]]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly…",43,[[["self"],["usize"]],[["tryreserveerror"],["result",["tryreserveerror"]]]]],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",43,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of the vector with a lower bound.",43,[[["self"],["usize"]]]],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",43,[[],["box"]]],[11,"truncate","","Shortens the vector, keeping the first `len` elements and…",43,[[["self"],["usize"]]]],[11,"as_slice","","Extracts a slice containing the entire vector.",43,[[["self"]]]],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",43,[[["self"]]]],[11,"as_ptr","","Returns a raw pointer to the vector's buffer.",43,[[["self"]]]],[11,"as_mut_ptr","","Returns an unsafe mutable pointer to the vector's buffer.",43,[[["self"]]]],[11,"set_len","","Forces the length of the vector to `new_len`.",43,[[["self"],["usize"]]]],[11,"swap_remove","","Removes an element from the vector and returns it.",43,[[["self"],["usize"]],["t"]]],[11,"insert","","Inserts an element at position `index` within the vector,…",43,[[["self"],["usize"],["t"]]]],[11,"remove","","Removes and returns the element at position `index` within…",43,[[["self"],["usize"]],["t"]]],[11,"retain","","Retains only the elements specified by the predicate.",43,[[["self"],["f"]]]],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the…",43,[[["self"],["f"]]]],[11,"dedup_by","","Removes all but the first of consecutive elements in the…",43,[[["self"],["f"]]]],[11,"push","","Appends an element to the back of a collection.",43,[[["self"],["t"]]]],[11,"pop","","Removes the last element from a vector and returns it, or…",43,[[["self"]],["option"]]],[11,"append","","Moves all the elements of `other` into `Self`, leaving…",43,[[["self"]]]],[11,"drain","","Creates a draining iterator that removes the specified…",43,[[["self"],["r"]],["drain"]]],[11,"clear","","Clears the vector, removing all values.",43,[[["self"]]]],[11,"len","","Returns the number of elements in the vector, also…",43,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the vector contains no elements.",43,[[["self"]],["bool"]]],[11,"split_off","","Splits the collection into two at the given index.",43,[[["self"],["usize"]],["self"]]],[11,"resize_with","","Resizes the `Vec` in-place so that `len` is equal to…",43,[[["self"],["usize"],["f"]]]],[11,"leak","","Consumes and leaks the `Vec`, returning a mutable…",43,[[["vec"]]]],[11,"resize","","Resizes the `Vec` in-place so that `len` is equal to…",43,[[["self"],["usize"],["t"]]]],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",43,[[["self"]]]],[11,"resize_default","","Resizes the `Vec` in-place so that `len` is equal to…",43,[[["self"],["usize"]]]],[11,"dedup","","Removes consecutive repeated elements in the vector…",43,[[["self"]]]],[11,"remove_item","","Removes the first instance of `item` from the vector if…",43,[[["self"],["v"]],["option"]]],[11,"splice","","Creates a splicing iterator that replaces the specified…",43,[[["self"],["i"],["r"]],["splice"]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if…",43,[[["self"],["f"]],["drainfilter"]]],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",44,[[["self"]]]],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable…",44,[[["self"]]]],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",45,[[["self"]]]],[14,"vec","alloc","Creates a [`Vec`] containing the arguments.",null,null],[14,"format","","Creates a `String` using interpolation of runtime…",null,null],[11,"from","alloc::alloc","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,[[["self"],["t"]]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"into","","",46,[[],["u"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,[[["self"],["t"]]]],[11,"to_string","","",47,[[["self"]],["string"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"into","","",47,[[],["u"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,[[["self"],["t"]]]],[11,"to_string","","",48,[[["self"]],["string"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"into","","",48,[[],["u"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,[[["self"],["t"]]]],[11,"to_string","","",49,[[["self"]],["string"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"into","","",49,[[],["u"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,[[["self"],["t"]]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"into","","",50,[[],["u"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"to_owned","alloc::boxed","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"from","","",3,[[],["t"]]],[11,"into_iter","","",3,[[],["i"]]],[11,"into_searcher","","",3,[[["str"]],["charpredicatesearcher"]]],[11,"is_contained_in","","",3,[[["str"]],["bool"]]],[11,"is_prefix_of","","",3,[[["str"]],["bool"]]],[11,"is_suffix_of","","",3,[[["str"]],["bool"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","alloc::borrow","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","alloc::collections","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into","","",8,[[],["u"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"to_owned","alloc::collections::binary_heap","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into_iter","","",10,[[],["i"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"into","","",10,[[],["u"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"into","","",9,[[],["u"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,[[["self"],["t"]]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into_iter","","",51,[[],["i"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"into","","",51,[[],["u"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,[[["self"],["t"]]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into_iter","","",52,[[],["i"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"into","","",52,[[],["u"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,[[["self"],["t"]]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into_iter","","",53,[[],["i"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"into","","",53,[[],["u"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into_iter","","",54,[[],["i"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"into","","",54,[[],["u"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into_iter","","",55,[[],["i"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"into","","",55,[[],["u"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"to_owned","alloc::collections::btree_map","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,[[["self"],["t"]]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into_iter","","",56,[[],["i"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"into","","",56,[[],["u"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,[[["self"],["t"]]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into_iter","","",57,[[],["i"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"into","","",57,[[],["u"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into_iter","","",58,[[],["i"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"into","","",58,[[],["u"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into_iter","","",59,[[],["i"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"into","","",59,[[],["u"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,[[["self"],["t"]]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into_iter","","",60,[[],["i"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"into","","",60,[[],["u"]]],[11,"try_into","","",60,[[],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"type_id","","",60,[[["self"]],["typeid"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,[[["self"],["t"]]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into_iter","","",61,[[],["i"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"into","","",61,[[],["u"]]],[11,"try_into","","",61,[[],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"type_id","","",61,[[["self"]],["typeid"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into_iter","","",62,[[],["i"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"into","","",62,[[],["u"]]],[11,"try_into","","",62,[[],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"type_id","","",62,[[["self"]],["typeid"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,[[["self"],["t"]]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into_iter","","",63,[[],["i"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"into","","",63,[[],["u"]]],[11,"try_into","","",63,[[],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"type_id","","",63,[[["self"]],["typeid"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into_iter","","",64,[[],["i"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"into","","",64,[[],["u"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"into","","",65,[[],["u"]]],[11,"try_into","","",65,[[],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"type_id","","",65,[[["self"]],["typeid"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"into","","",66,[[],["u"]]],[11,"try_into","","",66,[[],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"type_id","","",66,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"into","","",16,[[],["u"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"to_owned","alloc::collections::btree_set","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,[[["self"],["t"]]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into_iter","","",67,[[],["i"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"into","","",67,[[],["u"]]],[11,"try_into","","",67,[[],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"type_id","","",67,[[["self"]],["typeid"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,[[["self"],["t"]]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into_iter","","",68,[[],["i"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"into","","",68,[[],["u"]]],[11,"try_into","","",68,[[],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"type_id","","",68,[[["self"]],["typeid"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into_iter","","",69,[[],["i"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"into","","",69,[[],["u"]]],[11,"try_into","","",69,[[],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"type_id","","",69,[[["self"]],["typeid"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,[[["self"],["t"]]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into_iter","","",70,[[],["i"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"into","","",70,[[],["u"]]],[11,"try_into","","",70,[[],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"type_id","","",70,[[["self"]],["typeid"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,[[["self"],["t"]]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into_iter","","",71,[[],["i"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"into","","",71,[[],["u"]]],[11,"try_into","","",71,[[],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"type_id","","",71,[[["self"]],["typeid"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,[[["self"],["t"]]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into_iter","","",72,[[],["i"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"into","","",72,[[],["u"]]],[11,"try_into","","",72,[[],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"type_id","","",72,[[["self"]],["typeid"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,[[["self"],["t"]]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into_iter","","",73,[[],["i"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"into","","",73,[[],["u"]]],[11,"try_into","","",73,[[],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"type_id","","",73,[[["self"]],["typeid"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,[[["self"],["t"]]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into_iter","","",74,[[],["i"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"into","","",74,[[],["u"]]],[11,"try_into","","",74,[[],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"type_id","","",74,[[["self"]],["typeid"]]],[11,"to_owned","alloc::collections::linked_list","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into_iter","","",11,[[],["i"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"into","","",11,[[],["u"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,[[["self"],["t"]]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into_iter","","",75,[[],["i"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"into","","",75,[[],["u"]]],[11,"try_into","","",75,[[],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"type_id","","",75,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into_iter","","",12,[[],["i"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"into","","",12,[[],["u"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,[[["self"],["t"]]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into_iter","","",76,[[],["i"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"into","","",76,[[],["u"]]],[11,"try_into","","",76,[[],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"type_id","","",76,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"into","","",13,[[],["u"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"into","","",14,[[],["u"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into_iter","","",77,[[],["i"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"into","","",77,[[],["u"]]],[11,"try_into","","",77,[[],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"type_id","","",77,[[["self"]],["typeid"]]],[11,"to_owned","alloc::collections::vec_deque","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into_iter","","",15,[[],["i"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"into","","",15,[[],["u"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,[[["self"],["t"]]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into_iter","","",78,[[],["i"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"into","","",78,[[],["u"]]],[11,"try_into","","",78,[[],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"type_id","","",78,[[["self"]],["typeid"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into_iter","","",79,[[],["i"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"into","","",79,[[],["u"]]],[11,"try_into","","",79,[[],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"type_id","","",79,[[["self"]],["typeid"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,[[["self"],["t"]]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into_iter","","",80,[[],["i"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"into","","",80,[[],["u"]]],[11,"try_into","","",80,[[],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"type_id","","",80,[[["self"]],["typeid"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into_iter","","",81,[[],["i"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"into","","",81,[[],["u"]]],[11,"try_into","","",81,[[],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"type_id","","",81,[[["self"]],["typeid"]]],[11,"from","alloc::fmt","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"into","","",17,[[],["u"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,[[["self"],["t"]]]],[11,"to_string","","",82,[[["self"]],["string"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"into","","",82,[[],["u"]]],[11,"try_into","","",82,[[],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"type_id","","",82,[[["self"]],["typeid"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,[[["self"],["t"]]]],[11,"to_string","","",83,[[["self"]],["string"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"into","","",83,[[],["u"]]],[11,"try_into","","",83,[[],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"type_id","","",83,[[["self"]],["typeid"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"into","","",84,[[],["u"]]],[11,"try_into","","",84,[[],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"type_id","","",84,[[["self"]],["typeid"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"into","","",85,[[],["u"]]],[11,"try_into","","",85,[[],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"type_id","","",85,[[["self"]],["typeid"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"into","","",86,[[],["u"]]],[11,"try_into","","",86,[[],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"type_id","","",86,[[["self"]],["typeid"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"into","","",87,[[],["u"]]],[11,"try_into","","",87,[[],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"type_id","","",87,[[["self"]],["typeid"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"into","","",88,[[],["u"]]],[11,"try_into","","",88,[[],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"type_id","","",88,[[["self"]],["typeid"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"into","","",89,[[],["u"]]],[11,"try_into","","",89,[[],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"type_id","","",89,[[["self"]],["typeid"]]],[11,"to_owned","alloc::rc","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"to_string","","",28,[[["self"]],["string"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"from","","",28,[[],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"into","","",28,[[],["u"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"into","","",29,[[],["u"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"to_owned","alloc::slice","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,[[["self"],["t"]]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into_iter","","",90,[[],["i"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"into","","",90,[[],["u"]]],[11,"try_into","","",90,[[],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"type_id","","",90,[[["self"]],["typeid"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,[[["self"],["t"]]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into_iter","","",91,[[],["i"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"into","","",91,[[],["u"]]],[11,"try_into","","",91,[[],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"type_id","","",91,[[["self"]],["typeid"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,[[["self"],["t"]]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"into_iter","","",92,[[],["i"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"into","","",92,[[],["u"]]],[11,"try_into","","",92,[[],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"type_id","","",92,[[["self"]],["typeid"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into_iter","","",93,[[],["i"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"into","","",93,[[],["u"]]],[11,"try_into","","",93,[[],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"type_id","","",93,[[["self"]],["typeid"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into_iter","","",94,[[],["i"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"into","","",94,[[],["u"]]],[11,"try_into","","",94,[[],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"type_id","","",94,[[["self"]],["typeid"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,[[["self"],["t"]]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into_iter","","",95,[[],["i"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"into","","",95,[[],["u"]]],[11,"try_into","","",95,[[],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"type_id","","",95,[[["self"]],["typeid"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into_iter","","",96,[[],["i"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"into","","",96,[[],["u"]]],[11,"try_into","","",96,[[],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"type_id","","",96,[[["self"]],["typeid"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,[[["self"],["t"]]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into_iter","","",97,[[],["i"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"into","","",97,[[],["u"]]],[11,"try_into","","",97,[[],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"type_id","","",97,[[["self"]],["typeid"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into_iter","","",98,[[],["i"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"into","","",98,[[],["u"]]],[11,"try_into","","",98,[[],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"type_id","","",98,[[["self"]],["typeid"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,[[["self"],["t"]]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into_iter","","",99,[[],["i"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"into","","",99,[[],["u"]]],[11,"try_into","","",99,[[],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"type_id","","",99,[[["self"]],["typeid"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,[[["self"],["t"]]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"into_iter","","",100,[[],["i"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"into","","",100,[[],["u"]]],[11,"try_into","","",100,[[],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"type_id","","",100,[[["self"]],["typeid"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into_iter","","",101,[[],["i"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"into","","",101,[[],["u"]]],[11,"try_into","","",101,[[],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"type_id","","",101,[[["self"]],["typeid"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"into_iter","","",102,[[],["i"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"into","","",102,[[],["u"]]],[11,"try_into","","",102,[[],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"type_id","","",102,[[["self"]],["typeid"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,[[["self"],["t"]]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"into_iter","","",103,[[],["i"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"into","","",103,[[],["u"]]],[11,"try_into","","",103,[[],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"type_id","","",103,[[["self"]],["typeid"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into_iter","","",104,[[],["i"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"into","","",104,[[],["u"]]],[11,"try_into","","",104,[[],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"type_id","","",104,[[["self"]],["typeid"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into_iter","","",105,[[],["i"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"into","","",105,[[],["u"]]],[11,"try_into","","",105,[[],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"type_id","","",105,[[["self"]],["typeid"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into_iter","","",106,[[],["i"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"into","","",106,[[],["u"]]],[11,"try_into","","",106,[[],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"type_id","","",106,[[["self"]],["typeid"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"into_iter","","",107,[[],["i"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"into","","",107,[[],["u"]]],[11,"try_into","","",107,[[],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"type_id","","",107,[[["self"]],["typeid"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into_iter","","",108,[[],["i"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"into","","",108,[[],["u"]]],[11,"try_into","","",108,[[],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"type_id","","",108,[[["self"]],["typeid"]]],[11,"to_owned","alloc::str::pattern","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"into","","",34,[[],["u"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"to_owned","","",109,[[["self"]],["t"]]],[11,"clone_into","","",109,[[["self"],["t"]]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"into","","",109,[[],["u"]]],[11,"try_into","","",109,[[],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"type_id","","",109,[[["self"]],["typeid"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,[[["self"],["t"]]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"into","","",110,[[],["u"]]],[11,"try_into","","",110,[[],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"type_id","","",110,[[["self"]],["typeid"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,[[["self"],["t"]]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"into","","",111,[[],["u"]]],[11,"try_into","","",111,[[],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"type_id","","",111,[[["self"]],["typeid"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,[[["self"],["t"]]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"into","","",112,[[],["u"]]],[11,"try_into","","",112,[[],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"type_id","","",112,[[["self"]],["typeid"]]],[11,"to_owned","alloc::str","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,[[["self"],["t"]]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into_iter","","",113,[[],["i"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"into","","",113,[[],["u"]]],[11,"try_into","","",113,[[],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"type_id","","",113,[[["self"]],["typeid"]]],[11,"to_owned","","",114,[[["self"]],["t"]]],[11,"clone_into","","",114,[[["self"],["t"]]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"into_iter","","",114,[[],["i"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"into","","",114,[[],["u"]]],[11,"try_into","","",114,[[],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"type_id","","",114,[[["self"]],["typeid"]]],[11,"to_owned","","",115,[[["self"]],["t"]]],[11,"clone_into","","",115,[[["self"],["t"]]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"into_iter","","",115,[[],["i"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"into","","",115,[[],["u"]]],[11,"try_into","","",115,[[],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"type_id","","",115,[[["self"]],["typeid"]]],[11,"to_owned","","",116,[[["self"]],["t"]]],[11,"clone_into","","",116,[[["self"],["t"]]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"into_iter","","",116,[[],["i"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"into","","",116,[[],["u"]]],[11,"try_into","","",116,[[],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"type_id","","",116,[[["self"]],["typeid"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,[[["self"],["t"]]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"into_iter","","",117,[[],["i"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"into","","",117,[[],["u"]]],[11,"try_into","","",117,[[],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"type_id","","",117,[[["self"]],["typeid"]]],[11,"to_owned","","",118,[[["self"]],["t"]]],[11,"clone_into","","",118,[[["self"],["t"]]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"into_iter","","",118,[[],["i"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"into","","",118,[[],["u"]]],[11,"try_into","","",118,[[],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"type_id","","",118,[[["self"]],["typeid"]]],[11,"to_owned","","",119,[[["self"]],["t"]]],[11,"clone_into","","",119,[[["self"],["t"]]]],[11,"to_string","","",119,[[["self"]],["string"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"into","","",119,[[],["u"]]],[11,"try_into","","",119,[[],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"type_id","","",119,[[["self"]],["typeid"]]],[11,"to_owned","","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,[[["self"],["t"]]]],[11,"to_string","","",120,[[["self"]],["string"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"into_iter","","",120,[[],["i"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"into","","",120,[[],["u"]]],[11,"try_into","","",120,[[],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"type_id","","",120,[[["self"]],["typeid"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,[[["self"],["t"]]]],[11,"to_string","","",121,[[["self"]],["string"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"into_iter","","",121,[[],["i"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"into","","",121,[[],["u"]]],[11,"try_into","","",121,[[],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"type_id","","",121,[[["self"]],["typeid"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,[[["self"],["t"]]]],[11,"to_string","","",122,[[["self"]],["string"]]],[11,"from","","",122,[[["t"]],["t"]]],[11,"into_iter","","",122,[[],["i"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"into","","",122,[[],["u"]]],[11,"try_into","","",122,[[],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"type_id","","",122,[[["self"]],["typeid"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,[[["self"],["t"]]]],[11,"to_string","","",123,[[["self"]],["string"]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"into","","",123,[[],["u"]]],[11,"try_into","","",123,[[],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"type_id","","",123,[[["self"]],["typeid"]]],[11,"to_owned","","",124,[[["self"]],["t"]]],[11,"clone_into","","",124,[[["self"],["t"]]]],[11,"from","","",124,[[["t"]],["t"]]],[11,"into_iter","","",124,[[],["i"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"into","","",124,[[],["u"]]],[11,"try_into","","",124,[[],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"type_id","","",124,[[["self"]],["typeid"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,[[["self"],["t"]]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"into_iter","","",125,[[],["i"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"into","","",125,[[],["u"]]],[11,"try_into","","",125,[[],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"type_id","","",125,[[["self"]],["typeid"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,[[["self"],["t"]]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"into_iter","","",126,[[],["i"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"into","","",126,[[],["u"]]],[11,"try_into","","",126,[[],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"type_id","","",126,[[["self"]],["typeid"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,[[["self"],["t"]]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"into_iter","","",127,[[],["i"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"into","","",127,[[],["u"]]],[11,"try_into","","",127,[[],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"type_id","","",127,[[["self"]],["typeid"]]],[11,"to_owned","","",128,[[["self"]],["t"]]],[11,"clone_into","","",128,[[["self"],["t"]]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"into_iter","","",128,[[],["i"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"into","","",128,[[],["u"]]],[11,"try_into","","",128,[[],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"type_id","","",128,[[["self"]],["typeid"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,[[["self"],["t"]]]],[11,"from","","",129,[[["t"]],["t"]]],[11,"into_iter","","",129,[[],["i"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"into","","",129,[[],["u"]]],[11,"try_into","","",129,[[],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"type_id","","",129,[[["self"]],["typeid"]]],[11,"to_owned","","",130,[[["self"]],["t"]]],[11,"clone_into","","",130,[[["self"],["t"]]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"into_iter","","",130,[[],["i"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"into","","",130,[[],["u"]]],[11,"try_into","","",130,[[],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"type_id","","",130,[[["self"]],["typeid"]]],[11,"to_owned","","",131,[[["self"]],["t"]]],[11,"clone_into","","",131,[[["self"],["t"]]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"into_iter","","",131,[[],["i"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"into","","",131,[[],["u"]]],[11,"try_into","","",131,[[],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"type_id","","",131,[[["self"]],["typeid"]]],[11,"to_owned","","",132,[[["self"]],["t"]]],[11,"clone_into","","",132,[[["self"],["t"]]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"into_iter","","",132,[[],["i"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"into","","",132,[[],["u"]]],[11,"try_into","","",132,[[],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"type_id","","",132,[[["self"]],["typeid"]]],[11,"to_owned","","",133,[[["self"]],["t"]]],[11,"clone_into","","",133,[[["self"],["t"]]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"into_iter","","",133,[[],["i"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"into","","",133,[[],["u"]]],[11,"try_into","","",133,[[],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"type_id","","",133,[[["self"]],["typeid"]]],[11,"to_owned","","",134,[[["self"]],["t"]]],[11,"clone_into","","",134,[[["self"],["t"]]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"into_iter","","",134,[[],["i"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"into","","",134,[[],["u"]]],[11,"try_into","","",134,[[],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"type_id","","",134,[[["self"]],["typeid"]]],[11,"to_owned","","",135,[[["self"]],["t"]]],[11,"clone_into","","",135,[[["self"],["t"]]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"into_iter","","",135,[[],["i"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"into","","",135,[[],["u"]]],[11,"try_into","","",135,[[],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"type_id","","",135,[[["self"]],["typeid"]]],[11,"to_owned","alloc::string","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"to_string","","",39,[[["self"]],["string"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"into","","",39,[[],["u"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"to_string","","",40,[[["self"]],["string"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"into","","",40,[[],["u"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"to_string","","",136,[[["self"]],["string"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"into","","",136,[[],["u"]]],[11,"try_into","","",136,[[],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"type_id","","",136,[[["self"]],["typeid"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"into_iter","","",137,[[],["i"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"into","","",137,[[],["u"]]],[11,"try_into","","",137,[[],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"type_id","","",137,[[["self"]],["typeid"]]],[11,"to_owned","alloc::sync","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"to_string","","",41,[[["self"]],["string"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"from","","",41,[[],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"into","","",41,[[],["u"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"into","","",42,[[],["u"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"to_owned","alloc::vec","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,[[["self"],["t"]]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into_iter","","",43,[[],["i"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"into","","",43,[[],["u"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into_iter","","",44,[[],["i"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"into","","",44,[[],["u"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into_iter","","",45,[[],["i"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"into","","",45,[[],["u"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"into_iter","","",138,[[],["i"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"into","","",138,[[],["u"]]],[11,"try_into","","",138,[[],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"type_id","","",138,[[["self"]],["typeid"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"into_iter","","",139,[[],["i"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"into","","",139,[[],["u"]]],[11,"try_into","","",139,[[],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"type_id","","",139,[[["self"]],["typeid"]]],[11,"haystack","alloc::str::pattern","",111,[[["self"]],["str"]]],[11,"next","","",111,[[["self"]],["searchstep"]]],[11,"next_match","","",111,[[["self"]],["option"]]],[11,"next_reject","","",111,[[["self"]],["option"]]],[11,"haystack","","",110,[[["self"]],["str"]]],[11,"next","","",110,[[["self"]],["searchstep"]]],[11,"next_match","","",110,[[["self"]],["option"]]],[11,"next_reject","","",110,[[["self"]],["option"]]],[11,"haystack","","",112,[[["self"]],["str"]]],[11,"next","","",112,[[["self"]],["searchstep"]]],[11,"next_match","","",112,[[["self"]],["option"]]],[11,"haystack","","",109,[[["self"]],["str"]]],[11,"next","","",109,[[["self"]],["searchstep"]]],[11,"next_match","","",109,[[["self"]],["option"]]],[11,"clone","alloc::str","",131,[[["self"]],["split"]]],[11,"clone","","",129,[[["self"]],["rmatches"]]],[11,"clone","","",132,[[["self"]],["rsplitn"]]],[11,"clone","","",135,[[["self"]],["splitterminator"]]],[11,"clone","","",113,[[["self"]],["encodeutf16"]]],[11,"clone","","",125,[[["self"]],["linesany"]]],[11,"clone","","",120,[[["self"]],["escapedebug"]]],[11,"clone","alloc::str::pattern","",111,[[["self"]],["charpredicatesearcher"]]],[11,"clone","alloc::str","",130,[[["self"]],["rsplit"]]],[11,"clone","","",117,[[["self"]],["charindices"]]],[11,"clone","","",134,[[["self"]],["rsplitterminator"]]],[11,"clone","alloc::str::pattern","",34,[[["self"]],["searchstep"]]],[11,"clone","alloc::alloc","",47,[[["self"]],["layouterr"]]],[11,"clone","alloc::slice","",97,[[["self"]],["iter"]]],[11,"clone","alloc::str","",127,[[["self"]],["rmatchindices"]]],[11,"clone","","",123,[[["self"]],["utf8error"]]],[11,"clone","","",122,[[["self"]],["escapeunicode"]]],[11,"clone","alloc::slice","",92,[[["self"]],["chunksexact"]]],[11,"clone","alloc::str","",121,[[["self"]],["escapedefault"]]],[11,"clone","alloc::alloc","",49,[[["self"]],["cannotreallocinplace"]]],[11,"clone","alloc::slice","",100,[[["self"]],["rchunksexact"]]],[11,"clone","alloc::str::pattern","",110,[[["self"]],["charslicesearcher"]]],[11,"clone","alloc::slice","",91,[[["self"]],["windows"]]],[11,"clone","alloc::fmt","",82,[[["self"]],["error"]]],[11,"clone","alloc::str","",116,[[["self"]],["bytes"]]],[11,"clone","","",126,[[["self"]],["matchindices"]]],[11,"clone","alloc::slice","",99,[[["self"]],["rchunks"]]],[11,"clone","alloc::alloc","",48,[[["self"]],["allocerr"]]],[11,"clone","alloc::slice","",95,[[["self"]],["split"]]],[11,"clone","alloc::str::pattern","",109,[[["self"]],["charsearcher"]]],[11,"clone","alloc::str","",118,[[["self"]],["chars"]]],[11,"clone","","",119,[[["self"]],["parseboolerror"]]],[11,"clone","alloc::fmt","",83,[[["self"]],["arguments"]]],[11,"clone","alloc::slice","",90,[[["self"]],["chunks"]]],[11,"clone","alloc::alloc","",46,[[["self"]],["layout"]]],[11,"clone","alloc::slice","",103,[[["self"]],["rsplit"]]],[11,"clone","alloc::str","",124,[[["self"]],["lines"]]],[11,"clone","","",115,[[["self"]],["splitwhitespace"]]],[11,"clone","","",128,[[["self"]],["matches"]]],[11,"clone","alloc::str::pattern","",112,[[["self"]],["strsearcher"]]],[11,"clone","alloc::str","",114,[[["self"]],["splitasciiwhitespace"]]],[11,"clone","","",133,[[["self"]],["splitn"]]],[11,"fmt","alloc::alloc","",47,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::fmt","",82,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::alloc","",49,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::str","",122,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",121,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::alloc","",48,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::str","",119,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::fmt","",83,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::str","",123,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",120,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"len","alloc::slice","",98,[[["self"]],["usize"]]],[11,"is_empty","","",98,[[["self"]],["bool"]]],[11,"is_empty","","",92,[[["self"]],["bool"]]],[11,"len","","",97,[[["self"]],["usize"]]],[11,"is_empty","","",97,[[["self"]],["bool"]]],[11,"is_empty","","",93,[[["self"]],["bool"]]],[11,"is_empty","","",101,[[["self"]],["bool"]]],[11,"is_empty","","",100,[[["self"]],["bool"]]],[11,"len","alloc::str","",116,[[["self"]],["usize"]]],[11,"is_empty","","",116,[[["self"]],["bool"]]],[11,"eq","","",119,[[["self"],["parseboolerror"]],["bool"]]],[11,"ne","","",119,[[["self"],["parseboolerror"]],["bool"]]],[11,"eq","alloc::alloc","",49,[[["self"],["cannotreallocinplace"]],["bool"]]],[11,"eq","alloc::str","",123,[[["utf8error"],["self"]],["bool"]]],[11,"ne","","",123,[[["utf8error"],["self"]],["bool"]]],[11,"eq","alloc::fmt","",82,[[["error"],["self"]],["bool"]]],[11,"eq","alloc::alloc","",47,[[["layouterr"],["self"]],["bool"]]],[11,"ne","","",47,[[["layouterr"],["self"]],["bool"]]],[11,"eq","","",48,[[["allocerr"],["self"]],["bool"]]],[11,"eq","","",46,[[["self"],["layout"]],["bool"]]],[11,"ne","","",46,[[["self"],["layout"]],["bool"]]],[11,"eq","alloc::str::pattern","",34,[[["searchstep"],["self"]],["bool"]]],[11,"ne","","",34,[[["searchstep"],["self"]],["bool"]]],[11,"fmt","alloc::str","",131,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",130,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::fmt","",17,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::str","",135,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",134,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",132,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::slice","",96,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::fmt","",83,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::str::pattern","",34,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::slice","",94,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::str","",133,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",114,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::slice","",92,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::str","",119,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",126,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",128,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::slice","",90,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::alloc","",46,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::slice","",97,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",91,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",108,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::str","",121,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",115,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::str::pattern","",109,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::str","",129,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",116,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::slice","",93,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::str","",127,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",123,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::slice","",104,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",102,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",107,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",99,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::str","",120,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::slice","",95,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",101,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::str","",113,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::slice","",103,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::str","",124,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::slice","",106,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::str::pattern","",110,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::alloc","",47,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::slice","",100,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::alloc","",49,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::slice","",105,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::str","",125,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::slice","",98,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::alloc","",48,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::str","",118,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::fmt","",82,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::alloc","",0,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::str::pattern","",112,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::str","",117,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",122,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","alloc::str::pattern","",111,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"next_back","alloc::slice","",95,[[["self"]],["option"]]],[11,"next_back","alloc::str","",129,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","","",135,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","alloc::slice","",99,[[["self"]],["option"]]],[11,"nth_back","","",99,[[["self"],["usize"]],["option"]]],[11,"next_back","alloc::str","",125,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","","",115,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","","",130,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","","",128,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","","",127,[[["self"]],["option"]]],[11,"next_back","alloc::slice","",90,[[["self"]],["option"]]],[11,"nth_back","","",90,[[["self"],["usize"]],["option"]]],[11,"next_back","","",94,[[["self"]],["option"]]],[11,"nth_back","","",94,[[["self"],["usize"]],["option"]]],[11,"next_back","","",98,[[["self"]],[["option"],["t"]]]],[11,"nth_back","","",98,[[["self"],["usize"]],[["option"],["t"]]]],[11,"next_back","alloc::str","",124,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","","",134,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","","",118,[[["self"]],[["option",["char"]],["char"]]]],[11,"next_back","","",117,[[["self"]],["option"]]],[11,"next_back","alloc::slice","",93,[[["self"]],["option"]]],[11,"nth_back","","",93,[[["self"],["usize"]],["option"]]],[11,"next_back","alloc::str","",126,[[["self"]],["option"]]],[11,"next_back","","",114,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","alloc::slice","",100,[[["self"]],["option"]]],[11,"nth_back","","",100,[[["self"],["usize"]],["option"]]],[11,"next_back","","",92,[[["self"]],["option"]]],[11,"nth_back","","",92,[[["self"],["usize"]],["option"]]],[11,"next_back","","",96,[[["self"]],["option"]]],[11,"next_back","alloc::str","",131,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","alloc::slice","",91,[[["self"]],["option"]]],[11,"nth_back","","",91,[[["self"],["usize"]],["option"]]],[11,"next_back","","",101,[[["self"]],["option"]]],[11,"nth_back","","",101,[[["self"],["usize"]],["option"]]],[11,"next_back","","",97,[[["self"]],[["option"],["t"]]]],[11,"nth_back","","",97,[[["self"],["usize"]],[["option"],["t"]]]],[11,"next_back","","",103,[[["self"]],["option"]]],[11,"next_back","","",102,[[["self"]],["option"]]],[11,"nth_back","","",102,[[["self"],["usize"]],["option"]]],[11,"next_back","","",104,[[["self"]],["option"]]],[11,"next_back","alloc::str","",116,[[["self"]],[["u8"],["option",["u8"]]]]],[11,"nth_back","","",116,[[["self"],["usize"]],["option"]]],[11,"rfind","","",116,[[["self"],["p"]],["option"]]],[11,"cmp","alloc::fmt","",82,[[["error"],["self"]],["ordering"]]],[11,"as_ref","alloc::slice","",97,[[["self"]]]],[11,"hash","alloc::fmt","",82,[[["self"],["__h"]]]],[11,"write_str","","",89,[[["str"],["self"]],[["error"],["result",["error"]]]]],[11,"write_char","","",89,[[["self"],["char"]],[["error"],["result",["error"]]]]],[11,"write_fmt","","",89,[[["self"],["arguments"]],[["error"],["result",["error"]]]]],[11,"next_back","alloc::str::pattern","",110,[[["self"]],["searchstep"]]],[11,"next_match_back","","",110,[[["self"]],["option"]]],[11,"next_reject_back","","",110,[[["self"]],["option"]]],[11,"next_back","","",112,[[["self"]],["searchstep"]]],[11,"next_match_back","","",112,[[["self"]],["option"]]],[11,"next_back","","",111,[[["self"]],["searchstep"]]],[11,"next_match_back","","",111,[[["self"]],["option"]]],[11,"next_reject_back","","",111,[[["self"]],["option"]]],[11,"next_back","","",109,[[["self"]],["searchstep"]]],[11,"next_match_back","","",109,[[["self"]],["option"]]],[11,"default","alloc::fmt","",82,[[],["error"]]],[11,"partial_cmp","","",82,[[["error"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"next","alloc::str","",114,[[["self"]],[["option",["str"]],["str"]]]],[11,"size_hint","","",114,[[["self"]]]],[11,"last","","",114,[[],[["option",["str"]],["str"]]]],[11,"next","","",127,[[["self"]],["option"]]],[11,"next","","",118,[[["self"]],[["option",["char"]],["char"]]]],[11,"count","","",118,[[],["usize"]]],[11,"size_hint","","",118,[[["self"]]]],[11,"last","","",118,[[],[["option",["char"]],["char"]]]],[11,"next","","",120,[[["self"]],[["option",["char"]],["char"]]]],[11,"size_hint","","",120,[[["self"]]]],[11,"try_fold","","",120,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",120,[[["acc"],["fold"]],["acc"]]],[11,"next","","",117,[[["self"]],["option"]]],[11,"count","","",117,[[],["usize"]]],[11,"size_hint","","",117,[[["self"]]]],[11,"last","","",117,[[],["option"]]],[11,"next","alloc::slice","",106,[[["self"]],["option"]]],[11,"size_hint","","",106,[[["self"]]]],[11,"next","alloc::str","",121,[[["self"]],[["option",["char"]],["char"]]]],[11,"size_hint","","",121,[[["self"]]]],[11,"try_fold","","",121,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",121,[[["acc"],["fold"]],["acc"]]],[11,"next","alloc::slice","",99,[[["self"]],["option"]]],[11,"size_hint","","",99,[[["self"]]]],[11,"count","","",99,[[],["usize"]]],[11,"nth","","",99,[[["self"],["usize"]],["option"]]],[11,"last","","",99,[[],["option"]]],[11,"next","","",98,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",98,[[["self"]]]],[11,"count","","",98,[[],["usize"]]],[11,"nth","","",98,[[["self"],["usize"]],[["option"],["t"]]]],[11,"last","","",98,[[],[["option"],["t"]]]],[11,"position","","",98,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"rposition","","",98,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"next","alloc::str","",133,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","","",122,[[["self"]],[["option",["char"]],["char"]]]],[11,"size_hint","","",122,[[["self"]]]],[11,"try_fold","","",122,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",122,[[["acc"],["fold"]],["acc"]]],[11,"next","","",131,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","","",113,[[["self"]],[["u16"],["option",["u16"]]]]],[11,"size_hint","","",113,[[["self"]]]],[11,"next","","",125,[[["self"]],[["option",["str"]],["str"]]]],[11,"size_hint","","",125,[[["self"]]]],[11,"next","alloc::slice","",108,[[["self"]],["option"]]],[11,"size_hint","","",108,[[["self"]]]],[11,"next","alloc::str","",129,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","alloc::slice","",103,[[["self"]],["option"]]],[11,"size_hint","","",103,[[["self"]]]],[11,"next","alloc::str","",115,[[["self"]],[["option",["str"]],["str"]]]],[11,"size_hint","","",115,[[["self"]]]],[11,"last","","",115,[[],[["option",["str"]],["str"]]]],[11,"next","alloc::slice","",90,[[["self"]],["option"]]],[11,"size_hint","","",90,[[["self"]]]],[11,"count","","",90,[[],["usize"]]],[11,"nth","","",90,[[["self"],["usize"]],["option"]]],[11,"last","","",90,[[],["option"]]],[11,"next","","",102,[[["self"]],["option"]]],[11,"size_hint","","",102,[[["self"]]]],[11,"count","","",102,[[],["usize"]]],[11,"nth","","",102,[[["self"],["usize"]],["option"]]],[11,"last","","",102,[[],["option"]]],[11,"next","","",107,[[["self"]],["option"]]],[11,"size_hint","","",107,[[["self"]]]],[11,"next","","",105,[[["self"]],["option"]]],[11,"size_hint","","",105,[[["self"]]]],[11,"next","","",96,[[["self"]],["option"]]],[11,"size_hint","","",96,[[["self"]]]],[11,"next","alloc::str","",132,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","alloc::slice","",93,[[["self"]],["option"]]],[11,"size_hint","","",93,[[["self"]]]],[11,"count","","",93,[[],["usize"]]],[11,"nth","","",93,[[["self"],["usize"]],["option"]]],[11,"last","","",93,[[],["option"]]],[11,"next","alloc::str","",135,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","alloc::slice","",91,[[["self"]],["option"]]],[11,"size_hint","","",91,[[["self"]]]],[11,"count","","",91,[[],["usize"]]],[11,"nth","","",91,[[["self"],["usize"]],["option"]]],[11,"last","","",91,[[],["option"]]],[11,"next","alloc::str","",134,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","","",126,[[["self"]],["option"]]],[11,"next","","",124,[[["self"]],[["option",["str"]],["str"]]]],[11,"size_hint","","",124,[[["self"]]]],[11,"last","","",124,[[],[["option",["str"]],["str"]]]],[11,"next","alloc::slice","",97,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",97,[[["self"]]]],[11,"count","","",97,[[],["usize"]]],[11,"nth","","",97,[[["self"],["usize"]],[["option"],["t"]]]],[11,"last","","",97,[[],[["option"],["t"]]]],[11,"position","","",97,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"rposition","","",97,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"is_sorted_by","","",97,[[["f"]],["bool"]]],[11,"next","","",94,[[["self"]],["option"]]],[11,"size_hint","","",94,[[["self"]]]],[11,"count","","",94,[[],["usize"]]],[11,"nth","","",94,[[["self"],["usize"]],["option"]]],[11,"last","","",94,[[],["option"]]],[11,"next","alloc::str","",128,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","alloc::slice","",104,[[["self"]],["option"]]],[11,"size_hint","","",104,[[["self"]]]],[11,"next","alloc::str","",116,[[["self"]],[["u8"],["option",["u8"]]]]],[11,"size_hint","","",116,[[["self"]]]],[11,"count","","",116,[[],["usize"]]],[11,"last","","",116,[[],["option"]]],[11,"nth","","",116,[[["self"],["usize"]],["option"]]],[11,"all","","",116,[[["self"],["f"]],["bool"]]],[11,"any","","",116,[[["self"],["f"]],["bool"]]],[11,"find","","",116,[[["self"],["p"]],["option"]]],[11,"position","","",116,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"rposition","","",116,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"next","alloc::slice","",101,[[["self"]],["option"]]],[11,"size_hint","","",101,[[["self"]]]],[11,"count","","",101,[[],["usize"]]],[11,"nth","","",101,[[["self"],["usize"]],["option"]]],[11,"last","","",101,[[],["option"]]],[11,"next","","",100,[[["self"]],["option"]]],[11,"size_hint","","",100,[[["self"]]]],[11,"count","","",100,[[],["usize"]]],[11,"nth","","",100,[[["self"],["usize"]],["option"]]],[11,"last","","",100,[[],["option"]]],[11,"next","alloc::str","",130,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","alloc::slice","",95,[[["self"]],["option"]]],[11,"size_hint","","",95,[[["self"]]]],[11,"next","","",92,[[["self"]],["option"]]],[11,"size_hint","","",92,[[["self"]]]],[11,"count","","",92,[[],["usize"]]],[11,"nth","","",92,[[["self"],["usize"]],["option"]]],[11,"last","","",92,[[],["option"]]],[11,"to_string","alloc::borrow","",6,[[["self"]],["string"]]],[11,"to_string","alloc::string","",39,[[["self"]],["string"]]],[11,"deref","alloc::boxed","",3,[[["self"]],["t"]]],[11,"deref","alloc::borrow","",6,[[["self"]],["b"]]],[11,"deref","alloc::collections::binary_heap","",9,[[["self"]],["t"]]],[11,"deref","alloc::rc","",28,[[["self"]],["t"]]],[11,"deref","alloc::string","",39,[[["self"]],["str"]]],[11,"deref","alloc::sync","",41,[[["self"]],["t"]]],[11,"deref","alloc::vec","",43,[[["self"]]]],[11,"deref_mut","alloc::boxed","",3,[[["self"]],["t"]]],[11,"deref_mut","alloc::collections::binary_heap","",9,[[["self"]],["t"]]],[11,"deref_mut","alloc::string","",39,[[["self"]],["str"]]],[11,"deref_mut","alloc::vec","",43,[[["self"]]]],[11,"from","alloc::boxed","Converts a generic type `T` into a `Box<T>`",3,[[["t"]],["self"]]],[11,"from","","Converts a `&[T]` into a `Box<[T]>`",3,[[],["box"]]],[11,"from","","Converts a `&str` into a `Box<str>`",3,[[["str"]],[["str"],["box",["str"]]]]],[11,"from","","Converts a `Box<str>>` into a `Box<[u8]>`",3,[[["str"],["box",["str"]]],["self"]]],[11,"from","alloc::collections::binary_heap","Converts a `Vec<T>` into a `BinaryHeap<T>`.",10,[[["vec"]],["binaryheap"]]],[11,"from","alloc::vec","",43,[[["binaryheap"]],["vec"]]],[11,"from","alloc::collections::vec_deque","Turn a [`Vec<T>`] into a [`VecDeque<T>`].",15,[[["vec"]],["self"]]],[11,"from","alloc::vec","Turn a [`VecDeque<T>`] into a [`Vec<T>`].",43,[[["vecdeque"]],["self"]]],[11,"from","alloc::collections","",8,[[["layouterr"]],["self"]]],[11,"from","alloc::rc","",28,[[["t"]],["self"]]],[11,"from","","",28,[[],["rc"]]],[11,"from","","",28,[[["str"]],[["str"],["rc",["str"]]]]],[11,"from","","",28,[[["string"]],[["str"],["rc",["str"]]]]],[11,"from","","",28,[[["box"]],["rc"]]],[11,"from","","",28,[[["vec"]],["rc"]]],[11,"from","alloc::string","",39,[[["str"]],["string"]]],[11,"from","","",39,[[["string"]],["string"]]],[11,"from","","Converts the given boxed `str` slice to a `String`. It is…",39,[[["str"],["box",["str"]]],["string"]]],[11,"from","alloc::boxed","Converts the given `String` to a boxed `str` slice that is…",3,[[["string"]],[["str"],["box",["str"]]]]],[11,"from","alloc::string","",39,[[["str"],["cow",["str"]]],["string"]]],[11,"from","alloc::borrow","",6,[[["str"]],[["str"],["cow",["str"]]]]],[11,"from","","",6,[[["string"]],[["str"],["cow",["str"]]]]],[11,"from","","",6,[[["string"]],[["str"],["cow",["str"]]]]],[11,"from","alloc::vec","Converts the given `String` to a vector `Vec` that holds…",43,[[["string"]],[["u8"],["vec",["u8"]]]]],[11,"from","alloc::sync","",41,[[["t"]],["self"]]],[11,"from","","",41,[[],["arc"]]],[11,"from","","",41,[[["str"]],[["str"],["arc",["str"]]]]],[11,"from","","",41,[[["string"]],[["str"],["arc",["str"]]]]],[11,"from","","",41,[[["box"]],["arc"]]],[11,"from","","",41,[[["vec"]],["arc"]]],[11,"from","alloc::vec","",43,[[],["vec"]]],[11,"from","","",43,[[],["vec"]]],[11,"from","","",43,[[["cow"]],["vec"]]],[11,"from","","",43,[[["box"]],["vec"]]],[11,"from","alloc::boxed","",3,[[["vec"]],["box"]]],[11,"from","alloc::vec","",43,[[["str"]],[["u8"],["vec",["u8"]]]]],[11,"from","alloc::borrow","",6,[[],["cow"]]],[11,"from","","",6,[[["vec"]],["cow"]]],[11,"from","","",6,[[["vec"]],["cow"]]],[11,"fmt","alloc::alloc","",50,[[["formatter"],["self"]],["result"]]],[11,"fmt","alloc::boxed","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","alloc::borrow","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","alloc::collections::binary_heap","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",54,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",55,[[["formatter"],["self"]],["result"]]],[11,"fmt","alloc::collections::btree_map","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","alloc::collections::btree_set","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",70,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"fmt","alloc::collections::linked_list","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","alloc::collections::vec_deque","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","alloc::collections","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","alloc::rc","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","alloc::string","",40,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",136,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result"]]],[11,"fmt","alloc::sync","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","alloc::vec","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",138,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",139,[[["formatter"],["self"]],["result"]]],[11,"fmt","alloc::boxed","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","alloc::borrow","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","alloc::rc","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","alloc::string","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","alloc::sync","",41,[[["self"],["formatter"]],["result"]]],[11,"eq","alloc::boxed","",3,[[["self"],["box"]],["bool"]]],[11,"ne","","",3,[[["self"],["box"]],["bool"]]],[11,"eq","alloc::borrow","",6,[[["self"],["cow"]],["bool"]]],[11,"eq","alloc::collections::btree_map","",56,[[["self"],["btreemap"]],["bool"]]],[11,"eq","alloc::collections::btree_set","",67,[[["self"],["btreeset"]],["bool"]]],[11,"ne","","",67,[[["self"],["btreeset"]],["bool"]]],[11,"eq","alloc::collections::linked_list","",11,[[["self"]],["bool"]]],[11,"ne","","",11,[[["self"]],["bool"]]],[11,"eq","alloc::collections::vec_deque","",15,[[["self"],["vecdeque"]],["bool"]]],[11,"eq","","",15,[[["self"],["vec"]],["bool"]]],[11,"eq","","",15,[[["self"]],["bool"]]],[11,"eq","","",15,[[["self"]],["bool"]]],[11,"eq","","",15,[[["self"]],["bool"]]],[11,"eq","","",15,[[["self"]],["bool"]]],[11,"eq","","",15,[[["self"]],["bool"]]],[11,"eq","alloc::collections","",8,[[["self"],["tryreserveerror"]],["bool"]]],[11,"ne","","",8,[[["self"],["tryreserveerror"]],["bool"]]],[11,"eq","alloc::rc","Equality for two `Rc`s.",28,[[["self"],["rc"]],["bool"]]],[11,"ne","","Inequality for two `Rc`s.",28,[[["self"],["rc"]],["bool"]]],[11,"eq","alloc::string","",39,[[["self"],["string"]],["bool"]]],[11,"ne","","",39,[[["self"],["string"]],["bool"]]],[11,"eq","","",39,[[["str"],["self"]],["bool"]]],[11,"ne","","",39,[[["str"],["self"]],["bool"]]],[11,"eq","","",39,[[["str"],["self"]],["bool"]]],[11,"ne","","",39,[[["str"],["self"]],["bool"]]],[11,"eq","alloc::borrow","",6,[[["str"],["self"]],["bool"]]],[11,"ne","","",6,[[["str"],["self"]],["bool"]]],[11,"eq","","",6,[[["str"],["self"]],["bool"]]],[11,"ne","","",6,[[["str"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["string"]],["bool"]]],[11,"ne","","",6,[[["self"],["string"]],["bool"]]],[11,"eq","alloc::string","",39,[[["cow"],["self"]],["bool"]]],[11,"ne","","",39,[[["cow"],["self"]],["bool"]]],[11,"eq","alloc::sync","Equality for two `Arc`s.",41,[[["arc"],["self"]],["bool"]]],[11,"ne","","Inequality for two `Arc`s.",41,[[["arc"],["self"]],["bool"]]],[11,"eq","alloc::vec","",43,[[["self"],["vec"]],["bool"]]],[11,"ne","","",43,[[["self"],["vec"]],["bool"]]],[11,"eq","","",43,[[["self"]],["bool"]]],[11,"ne","","",43,[[["self"]],["bool"]]],[11,"eq","","",43,[[["self"]],["bool"]]],[11,"ne","","",43,[[["self"]],["bool"]]],[11,"eq","alloc::borrow","",6,[[["self"]],["bool"]]],[11,"ne","","",6,[[["self"]],["bool"]]],[11,"eq","","",6,[[["self"]],["bool"]]],[11,"ne","","",6,[[["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["vec"]],["bool"]]],[11,"ne","","",6,[[["self"],["vec"]],["bool"]]],[11,"eq","alloc::vec","",43,[[["self"]],["bool"]]],[11,"ne","","",43,[[["self"]],["bool"]]],[11,"eq","","",43,[[["self"]],["bool"]]],[11,"ne","","",43,[[["self"]],["bool"]]],[11,"cmp","alloc::boxed","",3,[[["self"],["box"]],["ordering"]]],[11,"cmp","alloc::borrow","",6,[[["self"]],["ordering"]]],[11,"cmp","alloc::collections::btree_map","",56,[[["self"],["btreemap"]],["ordering"]]],[11,"cmp","alloc::collections::btree_set","",67,[[["self"],["btreeset"]],["ordering"]]],[11,"cmp","alloc::collections::linked_list","",11,[[["self"]],["ordering"]]],[11,"cmp","alloc::collections::vec_deque","",15,[[["self"],["vecdeque"]],["ordering"]]],[11,"cmp","alloc::rc","Comparison for two `Rc`s.",28,[[["self"],["rc"]],["ordering"]]],[11,"cmp","alloc::string","",39,[[["self"],["string"]],["ordering"]]],[11,"cmp","alloc::sync","Comparison for two `Arc`s.",41,[[["arc"],["self"]],["ordering"]]],[11,"cmp","alloc::vec","",43,[[["vec"],["self"]],["ordering"]]],[11,"partial_cmp","alloc::boxed","",3,[[["self"],["box"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",3,[[["self"],["box"]],["bool"]]],[11,"le","","",3,[[["self"],["box"]],["bool"]]],[11,"ge","","",3,[[["self"],["box"]],["bool"]]],[11,"gt","","",3,[[["self"],["box"]],["bool"]]],[11,"partial_cmp","alloc::borrow","",6,[[["self"],["cow"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","alloc::collections::btree_map","",56,[[["self"],["btreemap"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","alloc::collections::btree_set","",67,[[["self"],["btreeset"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",67,[[["self"],["btreeset"]],["bool"]]],[11,"le","","",67,[[["self"],["btreeset"]],["bool"]]],[11,"gt","","",67,[[["self"],["btreeset"]],["bool"]]],[11,"ge","","",67,[[["self"],["btreeset"]],["bool"]]],[11,"partial_cmp","alloc::collections::linked_list","",11,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","alloc::collections::vec_deque","",15,[[["self"],["vecdeque"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","alloc::rc","Partial comparison for two `Rc`s.",28,[[["self"],["rc"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","Less-than comparison for two `Rc`s.",28,[[["self"],["rc"]],["bool"]]],[11,"le","","'Less than or equal to' comparison for two `Rc`s.",28,[[["self"],["rc"]],["bool"]]],[11,"gt","","Greater-than comparison for two `Rc`s.",28,[[["self"],["rc"]],["bool"]]],[11,"ge","","'Greater than or equal to' comparison for two `Rc`s.",28,[[["self"],["rc"]],["bool"]]],[11,"partial_cmp","alloc::string","",39,[[["self"],["string"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",39,[[["self"],["string"]],["bool"]]],[11,"le","","",39,[[["self"],["string"]],["bool"]]],[11,"gt","","",39,[[["self"],["string"]],["bool"]]],[11,"ge","","",39,[[["self"],["string"]],["bool"]]],[11,"partial_cmp","alloc::sync","Partial comparison for two `Arc`s.",41,[[["arc"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","Less-than comparison for two `Arc`s.",41,[[["arc"],["self"]],["bool"]]],[11,"le","","'Less than or equal to' comparison for two `Arc`s.",41,[[["arc"],["self"]],["bool"]]],[11,"gt","","Greater-than comparison for two `Arc`s.",41,[[["arc"],["self"]],["bool"]]],[11,"ge","","'Greater than or equal to' comparison for two `Arc`s.",41,[[["arc"],["self"]],["bool"]]],[11,"partial_cmp","alloc::vec","",43,[[["vec"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"add","alloc::borrow","",6,[[["str"]]]],[11,"add","","",6,[[["str"],["cow",["str"]]]]],[11,"add","alloc::string","",39,[[["str"]],["string"]]],[11,"add_assign","alloc::borrow","",6,[[["self"],["str"]]]],[11,"add_assign","","",6,[[["str"],["self"],["cow",["str"]]]]],[11,"add_assign","alloc::string","",39,[[["str"],["self"]]]],[11,"drop","alloc::boxed","",3,[[["self"]]]],[11,"drop","alloc::collections::binary_heap","",9,[[["self"]]]],[11,"drop","","Removes heap elements in heap order.",55,[[["self"]]]],[11,"drop","alloc::collections::btree_map","",56,[[["self"]]]],[11,"drop","","",59,[[["self"]]]],[11,"drop","alloc::collections::linked_list","",11,[[["self"]]]],[11,"drop","","",77,[[["self"]]]],[11,"drop","alloc::collections::vec_deque","",15,[[["self"]]]],[11,"drop","","",81,[[["self"]]]],[11,"drop","alloc::rc","Drops the `Rc`.",28,[[["self"]]]],[11,"drop","","Drops the `Weak` pointer.",29,[[["self"]]]],[11,"drop","alloc::string","",137,[[["self"]]]],[11,"drop","alloc::sync","Drops the `Arc`.",41,[[["self"]]]],[11,"drop","","Drops the `Weak` pointer.",42,[[["self"]]]],[11,"drop","alloc::vec","",43,[[["self"]]]],[11,"drop","","",44,[[["self"]]]],[11,"drop","","",45,[[["self"]]]],[11,"drop","","",138,[[["self"]]]],[11,"drop","","",139,[[["self"]]]],[11,"call","alloc::boxed","",3,[[["a"],["self"]]]],[11,"call_mut","","",3,[[["a"],["self"]]]],[11,"call_once","","",3,[[["a"]]]],[11,"resume","","",3,[[["self"],["pin"]],["generatorstate"]]],[11,"index","alloc::collections::btree_map","Returns a reference to the value corresponding to the…",56,[[["self"],["q"]],["v"]]],[11,"index","alloc::collections::vec_deque","",15,[[["self"],["usize"]],["a"]]],[11,"index","alloc::string","",39,[[["range",["usize"]],["self"],["usize"]],["str"]]],[11,"index","","",39,[[["rangeto",["usize"]],["self"],["usize"]],["str"]]],[11,"index","","",39,[[["rangefrom",["usize"]],["self"],["usize"]],["str"]]],[11,"index","","",39,[[["self"],["rangefull"]],["str"]]],[11,"index","","",39,[[["rangeinclusive",["usize"]],["self"],["usize"]],["str"]]],[11,"index","","",39,[[["usize"],["self"],["rangetoinclusive",["usize"]]],["str"]]],[11,"index","alloc::vec","",43,[[["i"],["self"]]]],[11,"index_mut","alloc::collections::vec_deque","",15,[[["self"],["usize"]],["a"]]],[11,"index_mut","alloc::string","",39,[[["self"],["range",["usize"]],["usize"]],["str"]]],[11,"index_mut","","",39,[[["rangeto",["usize"]],["self"],["usize"]],["str"]]],[11,"index_mut","","",39,[[["self"],["usize"],["rangefrom",["usize"]]],["str"]]],[11,"index_mut","","",39,[[["self"],["rangefull"]],["str"]]],[11,"index_mut","","",39,[[["rangeinclusive",["usize"]],["self"],["usize"]],["str"]]],[11,"index_mut","","",39,[[["self"],["rangetoinclusive",["usize"]],["usize"]],["str"]]],[11,"index_mut","alloc::vec","",43,[[["self"],["i"]]]],[11,"hash","alloc::boxed","",3,[[["self"],["h"]]]],[11,"hash","alloc::borrow","",6,[[["self"],["h"]]]],[11,"hash","alloc::collections::btree_map","",56,[[["self"],["h"]]]],[11,"hash","alloc::collections::btree_set","",67,[[["self"],["__h"]]]],[11,"hash","alloc::collections::linked_list","",11,[[["self"],["h"]]]],[11,"hash","alloc::collections::vec_deque","",15,[[["self"],["h"]]]],[11,"hash","alloc::rc","",28,[[["self"],["h"]]]],[11,"hash","alloc::string","",39,[[["self"],["h"]]]],[11,"hash","alloc::sync","",41,[[["self"],["h"]]]],[11,"hash","alloc::vec","",43,[[["self"],["h"]]]],[11,"finish","alloc::boxed","",3,[[["self"]],["u64"]]],[11,"write","","",3,[[["self"]]]],[11,"write_u8","","",3,[[["self"],["u8"]]]],[11,"write_u16","","",3,[[["u16"],["self"]]]],[11,"write_u32","","",3,[[["self"],["u32"]]]],[11,"write_u64","","",3,[[["self"],["u64"]]]],[11,"write_u128","","",3,[[["self"],["u128"]]]],[11,"write_usize","","",3,[[["self"],["usize"]]]],[11,"write_i8","","",3,[[["self"],["i8"]]]],[11,"write_i16","","",3,[[["self"],["i16"]]]],[11,"write_i32","","",3,[[["self"],["i32"]]]],[11,"write_i64","","",3,[[["i64"],["self"]]]],[11,"write_i128","","",3,[[["self"],["i128"]]]],[11,"write_isize","","",3,[[["isize"],["self"]]]],[11,"next","","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,[[["self"]]]],[11,"nth","","",3,[[["self"],["usize"]],["option"]]],[11,"last","","",3,[[],["option"]]],[11,"next","alloc::collections::binary_heap","",51,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",51,[[["self"]]]],[11,"last","","",51,[[],[["t"],["option"]]]],[11,"next","","",52,[[["self"]],["option"]]],[11,"size_hint","","",52,[[["self"]]]],[11,"next","","",53,[[["self"]],["option"]]],[11,"size_hint","","",53,[[["self"]]]],[11,"next","","",54,[[["self"]],["option"]]],[11,"size_hint","","",54,[[["self"]]]],[11,"next","","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,[[["self"]]]],[11,"next","alloc::collections::btree_map","",57,[[["self"]],["option"]]],[11,"size_hint","","",57,[[["self"]]]],[11,"last","","",57,[[],["option"]]],[11,"next","","",58,[[["self"]],["option"]]],[11,"size_hint","","",58,[[["self"]]]],[11,"last","","",58,[[],["option"]]],[11,"next","","",59,[[["self"]],["option"]]],[11,"size_hint","","",59,[[["self"]]]],[11,"next","","",60,[[["self"]],[["k"],["option"]]]],[11,"size_hint","","",60,[[["self"]]]],[11,"last","","",60,[[],[["k"],["option"]]]],[11,"next","","",61,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",61,[[["self"]]]],[11,"last","","",61,[[],[["option"],["v"]]]],[11,"next","","",63,[[["self"]],["option"]]],[11,"last","","",63,[[],["option"]]],[11,"next","","",62,[[["self"]],[["v"],["option"]]]],[11,"size_hint","","",62,[[["self"]]]],[11,"last","","",62,[[],[["v"],["option"]]]],[11,"next","","",64,[[["self"]],["option"]]],[11,"last","","",64,[[],["option"]]],[11,"next","alloc::collections::btree_set","",68,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",68,[[["self"]]]],[11,"last","","",68,[[],[["t"],["option"]]]],[11,"next","","",69,[[["self"]],["option"]]],[11,"size_hint","","",69,[[["self"]]]],[11,"next","","",70,[[["self"]],[["t"],["option"]]]],[11,"last","","",70,[[],[["t"],["option"]]]],[11,"next","","",71,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",71,[[["self"]]]],[11,"next","","",72,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",72,[[["self"]]]],[11,"next","","",73,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",73,[[["self"]]]],[11,"next","","",74,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",74,[[["self"]]]],[11,"next","alloc::collections::linked_list","",75,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",75,[[["self"]]]],[11,"last","","",75,[[],[["t"],["option"]]]],[11,"next","","",12,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",12,[[["self"]]]],[11,"last","","",12,[[],[["option"],["t"]]]],[11,"next","","",77,[[["self"]],["option"]]],[11,"size_hint","","",77,[[["self"]]]],[11,"next","","",76,[[["self"]],["option"]]],[11,"size_hint","","",76,[[["self"]]]],[11,"next","alloc::collections::vec_deque","",78,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",78,[[["self"]]]],[11,"fold","","",78,[[["acc"],["f"]],["acc"]]],[11,"try_fold","","",78,[[["self"],["b"],["f"]],["r"]]],[11,"nth","","",78,[[["self"],["usize"]],["option"]]],[11,"last","","",78,[[],[["t"],["option"]]]],[11,"next","","",79,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",79,[[["self"]]]],[11,"fold","","",79,[[["acc"],["f"]],["acc"]]],[11,"nth","","",79,[[["self"],["usize"]],["option"]]],[11,"last","","",79,[[],[["option"],["t"]]]],[11,"next","","",80,[[["self"]],["option"]]],[11,"size_hint","","",80,[[["self"]]]],[11,"next","","",81,[[["self"]],["option"]]],[11,"size_hint","","",81,[[["self"]]]],[11,"next","alloc::string","",137,[[["self"]],[["option",["char"]],["char"]]]],[11,"size_hint","","",137,[[["self"]]]],[11,"last","","",137,[[],[["option",["char"]],["char"]]]],[11,"next","alloc::vec","",44,[[["self"]],["option"]]],[11,"size_hint","","",44,[[["self"]]]],[11,"count","","",44,[[],["usize"]]],[11,"next","","",45,[[["self"]],["option"]]],[11,"size_hint","","",45,[[["self"]]]],[11,"next","","",138,[[["self"]],["option"]]],[11,"size_hint","","",138,[[["self"]]]],[11,"next","","",139,[[["self"]],["option"]]],[11,"size_hint","","",139,[[["self"]]]],[11,"next_back","alloc::boxed","",3,[[["self"]],["option"]]],[11,"nth_back","","",3,[[["self"],["usize"]],["option"]]],[11,"next_back","alloc::collections::binary_heap","",51,[[["self"]],[["t"],["option"]]]],[11,"next_back","","",52,[[["self"]],["option"]]],[11,"next_back","","",54,[[["self"]],["option"]]],[11,"next_back","alloc::collections::btree_map","",57,[[["self"]],["option"]]],[11,"next_back","","",58,[[["self"]],["option"]]],[11,"next_back","","",59,[[["self"]],["option"]]],[11,"next_back","","",60,[[["self"]],[["k"],["option"]]]],[11,"next_back","","",61,[[["self"]],[["option"],["v"]]]],[11,"next_back","","",62,[[["self"]],[["v"],["option"]]]],[11,"next_back","","",63,[[["self"]],["option"]]],[11,"next_back","","",64,[[["self"]],["option"]]],[11,"next_back","alloc::collections::btree_set","",68,[[["self"]],[["t"],["option"]]]],[11,"next_back","","",69,[[["self"]],["option"]]],[11,"next_back","","",70,[[["self"]],[["t"],["option"]]]],[11,"next_back","alloc::collections::linked_list","",75,[[["self"]],[["t"],["option"]]]],[11,"next_back","","",12,[[["self"]],[["option"],["t"]]]],[11,"next_back","","",76,[[["self"]],["option"]]],[11,"next_back","alloc::collections::vec_deque","",78,[[["self"]],[["t"],["option"]]]],[11,"rfold","","",78,[[["acc"],["f"]],["acc"]]],[11,"try_rfold","","",78,[[["self"],["b"],["f"]],["r"]]],[11,"next_back","","",79,[[["self"]],[["option"],["t"]]]],[11,"rfold","","",79,[[["acc"],["f"]],["acc"]]],[11,"next_back","","",80,[[["self"]],["option"]]],[11,"next_back","","",81,[[["self"]],["option"]]],[11,"next_back","alloc::string","",137,[[["self"]],[["option",["char"]],["char"]]]],[11,"next_back","alloc::vec","",44,[[["self"]],["option"]]],[11,"next_back","","",45,[[["self"]],["option"]]],[11,"next_back","","",138,[[["self"]],["option"]]],[11,"extend","alloc::collections::binary_heap","",10,[[["self"],["intoiterator"]]]],[11,"extend","","",10,[[["self"],["intoiterator"]]]],[11,"extend","alloc::collections::btree_map","",56,[[["self"],["intoiterator"]]]],[11,"extend","","",56,[[["self"],["intoiterator"]]]],[11,"extend","alloc::collections::btree_set","",67,[[["self"],["intoiterator"]]]],[11,"extend","","",67,[[["self"],["intoiterator"]]]],[11,"extend","alloc::collections::linked_list","",11,[[["self"],["intoiterator"]]]],[11,"extend","","",11,[[["self"],["intoiterator"]]]],[11,"extend","alloc::collections::vec_deque","",15,[[["self"],["intoiterator"]]]],[11,"extend","","",15,[[["self"],["intoiterator"]]]],[11,"extend","alloc::string","",39,[[["self"],["intoiterator"]]]],[11,"extend","","",39,[[["self"],["intoiterator"]]]],[11,"extend","","",39,[[["intoiterator"],["self"]]]],[11,"extend","","",39,[[["self"],["intoiterator"]]]],[11,"extend","","",39,[[["self"],["intoiterator"]]]],[11,"extend","alloc::vec","",43,[[["self"],["intoiterator"]]]],[11,"extend","","",43,[[["self"],["intoiterator"]]]],[11,"from_iter","alloc::boxed","",3,[[["intoiterator"]],["self"]]],[11,"from_iter","alloc::collections::binary_heap","",10,[[["intoiterator"]],["binaryheap"]]],[11,"from_iter","alloc::collections::btree_map","",56,[[["intoiterator"]],["btreemap"]]],[11,"from_iter","alloc::collections::btree_set","",67,[[["intoiterator"]],["btreeset"]]],[11,"from_iter","alloc::collections::linked_list","",11,[[["intoiterator"]],["self"]]],[11,"from_iter","alloc::collections::vec_deque","",15,[[["intoiterator"]],["vecdeque"]]],[11,"from_iter","alloc::rc","Takes each element in the `Iterator` and collects it into…",28,[[["intoiterator"]],["self"]]],[11,"from_iter","alloc::string","",39,[[["intoiterator"]],["string"]]],[11,"from_iter","","",39,[[["intoiterator"]],["string"]]],[11,"from_iter","","",39,[[["intoiterator"]],["string"]]],[11,"from_iter","","",39,[[["intoiterator"]],["string"]]],[11,"from_iter","","",39,[[["intoiterator"]],["string"]]],[11,"from_iter","alloc::borrow","",6,[[["intoiterator"]],[["str"],["cow",["str"]]]]],[11,"from_iter","","",6,[[["intoiterator"]],[["str"],["cow",["str"]]]]],[11,"from_iter","","",6,[[["intoiterator"]],[["str"],["cow",["str"]]]]],[11,"from_iter","alloc::sync","Takes each element in the `Iterator` and collects it into…",41,[[["intoiterator"]],["self"]]],[11,"from_iter","alloc::vec","",43,[[["intoiterator"]],["vec"]]],[11,"from_iter","alloc::borrow","",6,[[["intoiterator"]],["cow"]]],[11,"into_iter","alloc::collections::binary_heap","Creates a consuming iterator, that is, one that moves each…",10,[[],["intoiter"]]],[11,"into_iter","alloc::collections::btree_map","",56,[[],["intoiter"]]],[11,"into_iter","alloc::collections::btree_set","Gets an iterator for moving out the `BTreeSet`'s contents.",67,[[],["intoiter"]]],[11,"into_iter","alloc::collections::linked_list","Consumes the list into an iterator yielding elements by…",11,[[],["intoiter"]]],[11,"into_iter","alloc::collections::vec_deque","Consumes the `VecDeque` into a front-to-back iterator…",15,[[],["intoiter"]]],[11,"into_iter","alloc::vec","Creates a consuming iterator, that is, one that moves each…",43,[[],["intoiter"]]],[11,"len","alloc::boxed","",3,[[["self"]],["usize"]]],[11,"is_empty","","",3,[[["self"]],["bool"]]],[11,"is_empty","alloc::collections::binary_heap","",51,[[["self"]],["bool"]]],[11,"is_empty","","",52,[[["self"]],["bool"]]],[11,"is_empty","","",54,[[["self"]],["bool"]]],[11,"len","alloc::collections::btree_map","",57,[[["self"]],["usize"]]],[11,"len","","",58,[[["self"]],["usize"]]],[11,"len","","",59,[[["self"]],["usize"]]],[11,"len","","",60,[[["self"]],["usize"]]],[11,"len","","",61,[[["self"]],["usize"]]],[11,"len","","",62,[[["self"]],["usize"]]],[11,"len","alloc::collections::btree_set","",68,[[["self"]],["usize"]]],[11,"len","","",69,[[["self"]],["usize"]]],[11,"is_empty","alloc::collections::vec_deque","",78,[[["self"]],["bool"]]],[11,"is_empty","","",79,[[["self"]],["bool"]]],[11,"is_empty","","",80,[[["self"]],["bool"]]],[11,"is_empty","alloc::vec","",44,[[["self"]],["bool"]]],[11,"is_empty","","",45,[[["self"]],["bool"]]],[11,"try_from","alloc::boxed","",3,[[["box"]],["result"]]],[11,"try_from","alloc::rc","",28,[[["rc"]],["result"]]],[11,"try_from","alloc::sync","",41,[[["arc"]],["result"]]],[11,"from_str","alloc::string","",39,[[["str"]],[["parseerror"],["result",["string","parseerror"]],["string"]]]],[11,"write_str","","",39,[[["str"],["self"]],["result"]]],[11,"write_char","","",39,[[["self"],["char"]],["result"]]],[11,"as_ref","alloc::boxed","",3,[[["self"]],["t"]]],[11,"as_ref","alloc::borrow","",6,[[["self"]],["t"]]],[11,"as_ref","alloc::rc","",28,[[["self"]],["t"]]],[11,"as_ref","alloc::string","",39,[[["self"]],["str"]]],[11,"as_ref","","",39,[[["self"]]]],[11,"as_ref","alloc::sync","",41,[[["self"]],["t"]]],[11,"as_ref","alloc::vec","",43,[[["self"]],["vec"]]],[11,"as_ref","","",43,[[["self"]]]],[11,"as_mut","alloc::boxed","",3,[[["self"]],["t"]]],[11,"as_mut","alloc::vec","",43,[[["self"]],["vec"]]],[11,"as_mut","","",43,[[["self"]]]],[11,"fmt","alloc::boxed","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","alloc::rc","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","alloc::sync","",41,[[["self"],["formatter"]],["result"]]],[11,"clone","alloc::alloc","",50,[[["self"]],["global"]]],[11,"clone","alloc::boxed","Returns a new box with a `clone()` of this box's contents.",3,[[["self"]],["box"]]],[11,"clone_from","","Copies `source`'s contents into `self` without creating a…",3,[[["self"],["box"]]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"clone","alloc::borrow","",6,[[["self"]],["self"]]],[11,"clone_from","","",6,[[["self"],["self"]]]],[11,"clone","alloc::collections::binary_heap","",10,[[["self"]],["self"]]],[11,"clone_from","","",10,[[["self"],["self"]]]],[11,"clone","","",51,[[["self"]],["self"]]],[11,"clone","","",52,[[["self"]],["intoiter"]]],[11,"clone","","",53,[[["self"]],["intoitersorted"]]],[11,"clone","alloc::collections::btree_map","",56,[[["self"]],["btreemap"]]],[11,"clone","","",57,[[["self"]],["self"]]],[11,"clone","","",60,[[["self"]],["self"]]],[11,"clone","","",61,[[["self"]],["self"]]],[11,"clone","","",63,[[["self"]],["self"]]],[11,"clone","alloc::collections::btree_set","",67,[[["self"]],["btreeset"]]],[11,"clone","","",68,[[["self"]],["self"]]],[11,"clone","","",70,[[["self"]],["self"]]],[11,"clone","","",71,[[["self"]],["self"]]],[11,"clone","","",72,[[["self"]],["self"]]],[11,"clone","","",73,[[["self"]],["self"]]],[11,"clone","","",74,[[["self"]],["self"]]],[11,"clone","alloc::collections::linked_list","",75,[[["self"]],["self"]]],[11,"clone","","",76,[[["self"]],["intoiter"]]],[11,"clone","","",11,[[["self"]],["self"]]],[11,"clone_from","","",11,[[["self"],["self"]]]],[11,"clone","alloc::collections::vec_deque","",15,[[["self"]],["vecdeque"]]],[11,"clone_from","","",15,[[["self"],["self"]]]],[11,"clone","","",78,[[["self"]],["self"]]],[11,"clone","","",80,[[["self"]],["intoiter"]]],[11,"clone","alloc::collections","",8,[[["self"]],["tryreserveerror"]]],[11,"clone","alloc::rc","Makes a clone of the `Rc` pointer.",28,[[["self"]],["rc"]]],[11,"clone","","Makes a clone of the `Weak` pointer that points to the…",29,[[["self"]],["weak"]]],[11,"clone","alloc::string","",39,[[["self"]],["self"]]],[11,"clone_from","","",39,[[["self"],["self"]]]],[11,"clone","alloc::sync","Makes a clone of the `Arc` pointer.",41,[[["self"]],["arc"]]],[11,"clone","","Makes a clone of the `Weak` pointer that points to the…",42,[[["self"]],["weak"]]],[11,"clone","alloc::vec","",43,[[["self"]],["vec"]]],[11,"clone_from","","",43,[[["self"],["vec"]]]],[11,"clone","","",44,[[["self"]],["intoiter"]]],[11,"default","alloc::alloc","",50,[[],["global"]]],[11,"default","alloc::boxed","Creates a `Box<T>`, with the `Default` value for T.",3,[[],["box"]]],[11,"default","","",3,[[],["box"]]],[11,"default","","",3,[[],[["str"],["box",["str"]]]]],[11,"default","alloc::borrow","Creates an owned Cow<'a, B> with the default value for the…",6,[[],["self"]]],[11,"default","alloc::collections::binary_heap","Creates an empty `BinaryHeap<T>`.",10,[[],["binaryheap"]]],[11,"default","alloc::collections::btree_map","Creates an empty `BTreeMap<K, V>`.",56,[[],["btreemap"]]],[11,"default","alloc::collections::btree_set","Makes an empty `BTreeSet<T>` with a reasonable choice of B.",67,[[],["btreeset"]]],[11,"default","alloc::collections::linked_list","Creates an empty `LinkedList<T>`.",11,[[],["self"]]],[11,"default","alloc::collections::vec_deque","Creates an empty `VecDeque<T>`.",15,[[],["vecdeque"]]],[11,"default","alloc::rc","Creates a new `Rc<T>`, with the `Default` value for `T`.",28,[[],["rc"]]],[11,"default","","Constructs a new `Weak<T>`, allocating memory for `T`…",29,[[],["weak"]]],[11,"default","alloc::string","Creates an empty `String`.",39,[[],["string"]]],[11,"default","alloc::sync","Constructs a new `Weak<T>`, without allocating memory.…",42,[[],["weak"]]],[11,"default","","Creates a new `Arc<T>`, with the `Default` value for `T`.",41,[[],["arc"]]],[11,"default","alloc::vec","Creates an empty `Vec<T>`.",43,[[],["vec"]]],[11,"borrow","alloc::boxed","",3,[[["self"]],["t"]]],[11,"borrow","alloc::borrow","",6,[[["self"]],["b"]]],[11,"borrow","alloc::rc","",28,[[["self"]],["t"]]],[11,"borrow","alloc::vec","",43,[[["self"]]]],[11,"borrow","alloc::string","",39,[[["self"]],["str"]]],[11,"borrow","alloc::sync","",41,[[["self"]],["t"]]],[11,"borrow_mut","alloc::boxed","",3,[[["self"]],["t"]]],[11,"borrow_mut","alloc::vec","",43,[[["self"]]]],[11,"borrow_mut","alloc::string","",39,[[["self"]],["str"]]],[11,"poll","alloc::boxed","",3,[[["context"],["self"],["pin"]],["poll"]]],[11,"alloc","alloc::alloc","",50,[[["self"],["layout"]],[["nonnull",["u8"]],["allocerr"],["result",["nonnull","allocerr"]]]]],[11,"dealloc","","",50,[[["layout"],["nonnull",["u8"]],["self"],["u8"]]]],[11,"realloc","","",50,[[["usize"],["layout"],["nonnull",["u8"]],["self"],["u8"]],[["nonnull",["u8"]],["allocerr"],["result",["nonnull","allocerr"]]]]],[11,"alloc_zeroed","","",50,[[["self"],["layout"]],[["nonnull",["u8"]],["allocerr"],["result",["nonnull","allocerr"]]]]],[11,"from_size_align","","Constructs a `Layout` from a given `size` and `align`, or…",46,[[["usize"]],[["result",["layout","layouterr"]],["layout"],["layouterr"]]]],[11,"from_size_align_unchecked","","Creates a layout, bypassing all checks.",46,[[["usize"]],["layout"]]],[11,"size","","The minimum size in bytes for a memory block of this layout.",46,[[["self"]],["usize"]]],[11,"align","","The minimum byte alignment for a memory block of this…",46,[[["self"]],["usize"]]],[11,"new","","Constructs a `Layout` suitable for holding a value of type…",46,[[],["layout"]]],[11,"for_value","","Produces layout describing a record that could be used to…",46,[[["t"]],["layout"]]],[11,"align_to","","Creates a layout describing the record that can hold a…",46,[[["self"],["usize"]],[["result",["layout","layouterr"]],["layout"],["layouterr"]]]],[11,"padding_needed_for","","Returns the amount of padding we must insert after `self`…",46,[[["self"],["usize"]],["usize"]]],[11,"pad_to_align","","Creates a layout by rounding the size of this layout up to…",46,[[["self"]],["layout"]]],[11,"repeat","","Creates a layout describing the record for `n` instances…",46,[[["self"],["usize"]],[["result",["layouterr"]],["layouterr"]]]],[11,"extend","","Creates a layout describing the record for `self` followed…",46,[[["self"],["layout"]],[["result",["layouterr"]],["layouterr"]]]],[11,"repeat_packed","","Creates a layout describing the record for `n` instances…",46,[[["self"],["usize"]],[["result",["layout","layouterr"]],["layout"],["layouterr"]]]],[11,"extend_packed","","Creates a layout describing the record for `self` followed…",46,[[["self"],["layout"]],[["result",["layout","layouterr"]],["layout"],["layouterr"]]]],[11,"array","","Creates a layout describing the record for a `[T; n]`.",46,[[["usize"]],[["result",["layout","layouterr"]],["layout"],["layouterr"]]]],[11,"description","","",49,[[["self"]],["str"]]],[11,"new","alloc::collections::btree_map","Makes a new empty BTreeMap with a reasonable choice for B.",56,[[],["btreemap"]]],[11,"clear","","Clears the map, removing all elements.",56,[[["self"]]]],[11,"get","","Returns a reference to the value corresponding to the key.",56,[[["self"],["q"]],[["option"],["v"]]]],[11,"get_key_value","","Returns the key-value pair corresponding to the supplied…",56,[[["self"],["q"]],["option"]]],[11,"first_key_value","","Returns the first key-value pair in the map. The key in…",56,[[["self"]],["option"]]],[11,"first_entry","","Returns the first entry in the map for in-place…",56,[[["self"]],[["option",["occupiedentry"]],["occupiedentry"]]]],[11,"last_key_value","","Returns the last key-value pair in the map. The key in…",56,[[["self"]],["option"]]],[11,"last_entry","","Returns the last entry in the map for in-place…",56,[[["self"]],[["option",["occupiedentry"]],["occupiedentry"]]]],[11,"contains_key","","Returns `true` if the map contains a value for the…",56,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to…",56,[[["self"],["q"]],[["option"],["v"]]]],[11,"insert","","Inserts a key-value pair into the map.",56,[[["self"],["k"],["v"]],["option"]]],[11,"remove","","Removes a key from the map, returning the value at the key…",56,[[["self"],["q"]],["option"]]],[11,"append","","Moves all elements from `other` into `Self`, leaving…",56,[[["self"]]]],[11,"range","","Constructs a double-ended iterator over a sub-range of…",56,[[["self"],["r"]],["range"]]],[11,"range_mut","","Constructs a mutable double-ended iterator over a…",56,[[["self"],["r"]],["rangemut"]]],[11,"entry","","Gets the given key's corresponding entry in the map for…",56,[[["self"],["k"]],["entry"]]],[11,"split_off","","Splits the collection into two at the given key. Returns…",56,[[["self"],["q"]],["self"]]],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",56,[[["self"]],["iter"]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map,…",56,[[["self"]],["itermut"]]],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",56,[[["self"]],["keys"]]],[11,"values","","Gets an iterator over the values of the map, in order by…",56,[[["self"]],["values"]]],[11,"values_mut","","Gets a mutable iterator over the values of the map, in…",56,[[["self"]],["valuesmut"]]],[11,"len","","Returns the number of elements in the map.",56,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the map contains no elements.",56,[[["self"]],["bool"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default…",16,[[["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of…",16,[[["fnonce"]],["v"]]],[11,"key","","Returns a reference to this entry's key.",16,[[["self"]],["k"]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry…",16,[[["f"]],["self"]]],[11,"or_default","","Ensures a value is in the entry by inserting the default…",16,[[],["v"]]],[11,"key","","Gets a reference to the key that would be used when…",65,[[["self"]],["k"]]],[11,"into_key","","Take ownership of the key.",65,[[],["k"]]],[11,"insert","","Sets the value of the entry with the `VacantEntry`'s key,…",65,[[["v"]],["v"]]],[11,"key","","Gets a reference to the key in the entry.",66,[[["self"]],["k"]]],[11,"remove_entry","","Take ownership of the key and value from the map.",66,[[]]],[11,"get","","Gets a reference to the value in the entry.",66,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",66,[[["self"]],["v"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",66,[[],["v"]]],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s…",66,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",66,[[],["v"]]],[11,"new","alloc::collections::btree_set","Makes a new `BTreeSet` with a reasonable choice of B.",67,[[],["btreeset"]]],[11,"range","","Constructs a double-ended iterator over a sub-range of…",67,[[["self"],["r"]],["range"]]],[11,"difference","","Visits the values representing the difference, i.e., the…",67,[[["btreeset"],["self"]],["difference"]]],[11,"symmetric_difference","","Visits the values representing the symmetric difference,…",67,[[["btreeset"],["self"]],["symmetricdifference"]]],[11,"intersection","","Visits the values representing the intersection, i.e., the…",67,[[["btreeset"],["self"]],["intersection"]]],[11,"union","","Visits the values representing the union, i.e., all the…",67,[[["btreeset"],["self"]],["union"]]],[11,"clear","","Clears the set, removing all values.",67,[[["self"]]]],[11,"contains","","Returns `true` if the set contains a value.",67,[[["self"],["q"]],["bool"]]],[11,"get","","Returns a reference to the value in the set, if any, that…",67,[[["self"],["q"]],[["option"],["t"]]]],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with…",67,[[["self"],["btreeset"]],["bool"]]],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e.,…",67,[[["self"],["btreeset"]],["bool"]]],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e.,…",67,[[["self"],["btreeset"]],["bool"]]],[11,"first","","Returns a reference to the first value in the set, if any.…",67,[[["self"]],[["option"],["t"]]]],[11,"last","","Returns a reference to the last value in the set, if any.…",67,[[["self"]],[["option"],["t"]]]],[11,"pop_first","","Removes the first value from the set and returns it, if…",67,[[["self"]],["option"]]],[11,"pop_last","","Removes the last value from the set and returns it, if…",67,[[["self"]],["option"]]],[11,"insert","","Adds a value to the set.",67,[[["self"],["t"]],["bool"]]],[11,"replace","","Adds a value to the set, replacing the existing value, if…",67,[[["self"],["t"]],["option"]]],[11,"remove","","Removes a value from the set. Returns whether the value…",67,[[["self"],["q"]],["bool"]]],[11,"take","","Removes and returns the value in the set, if any, that is…",67,[[["self"],["q"]],["option"]]],[11,"append","","Moves all elements from `other` into `Self`, leaving…",67,[[["self"]]]],[11,"split_off","","Splits the collection into two at the given key. Returns…",67,[[["self"],["q"]],["self"]]],[11,"iter","","Gets an iterator that visits the values in the `BTreeSet`…",67,[[["self"]],["iter"]]],[11,"len","","Returns the number of elements in the set.",67,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no elements.",67,[[["self"]],["bool"]]],[11,"entry","alloc::fmt","Adds a new entry to the list output.",84,[[["self"],["debug"]],["debuglist"]]],[11,"entries","","Adds the contents of an iterator of entries to the list…",84,[[["self"],["i"]],["debuglist"]]],[11,"finish","","Finishes output and returns any error encountered.",84,[[["self"]],[["error"],["result",["error"]]]]],[11,"entry","","Adds a new entry to the map output.",85,[[["self"],["debug"]],["debugmap"]]],[11,"key","","Adds the key part of a new entry to the map output.",85,[[["self"],["debug"]],["debugmap"]]],[11,"value","","Adds the value part of a new entry to the map output.",85,[[["self"],["debug"]],["debugmap"]]],[11,"entries","","Adds the contents of an iterator of entries to the map…",85,[[["self"],["i"]],["debugmap"]]],[11,"finish","","Finishes output and returns any error encountered.",85,[[["self"]],[["error"],["result",["error"]]]]],[11,"entry","","Adds a new entry to the set output.",86,[[["self"],["debug"]],["debugset"]]],[11,"entries","","Adds the contents of an iterator of entries to the set…",86,[[["self"],["i"]],["debugset"]]],[11,"finish","","Finishes output and returns any error encountered.",86,[[["self"]],[["error"],["result",["error"]]]]],[11,"field","","Adds a new field to the generated struct output.",87,[[["str"],["self"],["debug"]],["debugstruct"]]],[11,"finish_non_exhaustive","","Marks the struct as non-exhaustive, indicating to the…",87,[[["self"]],[["error"],["result",["error"]]]]],[11,"finish","","Finishes output and returns any error encountered.",87,[[["self"]],[["error"],["result",["error"]]]]],[11,"field","","Adds a new field to the generated tuple struct output.",88,[[["self"],["debug"]],["debugtuple"]]],[11,"finish","","Finishes output and returns any error encountered.",88,[[["self"]],[["error"],["result",["error"]]]]],[11,"pad_integral","","Performs the correct padding for an integer which has…",89,[[["str"],["self"],["bool"]],[["error"],["result",["error"]]]]],[11,"pad","","This function takes a string slice and emits it to the…",89,[[["str"],["self"]],[["error"],["result",["error"]]]]],[11,"write_str","","Writes some data to the underlying buffer contained within…",89,[[["str"],["self"]],[["error"],["result",["error"]]]]],[11,"write_fmt","","Writes some formatted information into this instance.",89,[[["self"],["arguments"]],[["error"],["result",["error"]]]]],[11,"flags","","Flags for formatting",89,[[["self"]],["u32"]]],[11,"fill","","Character used as 'fill' whenever there is alignment.",89,[[["self"]],["char"]]],[11,"align","","Flag indicating what form of alignment was requested.",89,[[["self"]],[["option",["alignment"]],["alignment"]]]],[11,"width","","Optionally specified integer width that the output should…",89,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"precision","","Optionally specified precision for numeric types.",89,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"sign_plus","","Determines if the `+` flag was specified.",89,[[["self"]],["bool"]]],[11,"sign_minus","","Determines if the `-` flag was specified.",89,[[["self"]],["bool"]]],[11,"alternate","","Determines if the `#` flag was specified.",89,[[["self"]],["bool"]]],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",89,[[["self"]],["bool"]]],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with…",89,[[["self"],["str"]],["debugstruct"]]],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with…",89,[[["self"],["str"]],["debugtuple"]]],[11,"debug_list","","Creates a `DebugList` builder designed to assist with…",89,[[["self"]],["debuglist"]]],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with…",89,[[["self"]],["debugset"]]],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with…",89,[[["self"]],["debugmap"]]],[11,"remainder","alloc::slice","Returns the remainder of the original slice that is not…",92,[[["self"]]]],[11,"into_remainder","","Returns the remainder of the original slice that is not…",93,[[]]],[11,"as_slice","","Views the underlying data as a subslice of the original…",97,[[["self"]]]],[11,"into_slice","","Views the underlying data as a subslice of the original…",98,[[]]],[11,"as_slice","","Views the underlying data as a subslice of the original…",98,[[["self"]]]],[11,"remainder","","Returns the remainder of the original slice that is not…",100,[[["self"]]]],[11,"into_remainder","","Returns the remainder of the original slice that is not…",101,[[]]],[11,"as_str","alloc::str","Views the underlying data as a subslice of the original…",117,[[["self"]],["str"]]],[11,"as_str","","Views the underlying data as a subslice of the original…",118,[[["self"]],["str"]]],[11,"valid_up_to","","Returns the index in the given string up to which valid…",123,[[["self"]],["usize"]]],[11,"error_len","","Provides more information about the failure:",123,[[["self"]],[["option",["usize"]],["usize"]]]]],"p":[[3,"Excess"],[8,"GlobalAlloc"],[8,"Alloc"],[3,"Box"],[8,"Borrow"],[8,"BorrowMut"],[4,"Cow"],[8,"ToOwned"],[4,"TryReserveError"],[3,"PeekMut"],[3,"BinaryHeap"],[3,"LinkedList"],[3,"IterMut"],[3,"Cursor"],[3,"CursorMut"],[3,"VecDeque"],[4,"Entry"],[4,"Alignment"],[8,"Binary"],[8,"Octal"],[8,"Debug"],[8,"Display"],[8,"Write"],[8,"LowerExp"],[8,"UpperExp"],[8,"LowerHex"],[8,"Pointer"],[8,"UpperHex"],[3,"Rc"],[3,"Weak"],[8,"SliceIndex"],[8,"Concat"],[8,"Join"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"FromStr"],[8,"ToString"],[3,"String"],[3,"FromUtf8Error"],[3,"Arc"],[3,"Weak"],[3,"Vec"],[3,"IntoIter"],[3,"Drain"],[3,"Layout"],[3,"LayoutErr"],[3,"AllocErr"],[3,"CannotReallocInPlace"],[3,"Global"],[3,"Iter"],[3,"IntoIter"],[3,"IntoIterSorted"],[3,"Drain"],[3,"DrainSorted"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Range"],[3,"RangeMut"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"Iter"],[3,"IntoIter"],[3,"DrainFilter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"Error"],[3,"Arguments"],[3,"DebugList"],[3,"DebugMap"],[3,"DebugSet"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"Formatter"],[3,"Chunks"],[3,"Windows"],[3,"ChunksExact"],[3,"ChunksExactMut"],[3,"ChunksMut"],[3,"Split"],[3,"SplitMut"],[3,"Iter"],[3,"IterMut"],[3,"RChunks"],[3,"RChunksExact"],[3,"RChunksExactMut"],[3,"RChunksMut"],[3,"RSplit"],[3,"RSplitMut"],[3,"RSplitN"],[3,"RSplitNMut"],[3,"SplitN"],[3,"SplitNMut"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"EncodeUtf16"],[3,"SplitAsciiWhitespace"],[3,"SplitWhitespace"],[3,"Bytes"],[3,"CharIndices"],[3,"Chars"],[3,"ParseBoolError"],[3,"EscapeDebug"],[3,"EscapeDefault"],[3,"EscapeUnicode"],[3,"Utf8Error"],[3,"Lines"],[3,"LinesAny"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"RSplit"],[3,"Split"],[3,"RSplitN"],[3,"SplitN"],[3,"RSplitTerminator"],[3,"SplitTerminator"],[3,"FromUtf16Error"],[3,"Drain"],[3,"Splice"],[3,"DrainFilter"]]};
searchIndex["core"] = {"doc":"The Rust Core Library","i":[[0,"i128","core","The 128-bit signed integer type.",null,null],[17,"MIN","core::i128","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"i16","core","The 16-bit signed integer type.",null,null],[17,"MIN","core::i16","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"i32","core","The 32-bit signed integer type.",null,null],[17,"MIN","core::i32","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"i64","core","The 64-bit signed integer type.",null,null],[17,"MIN","core::i64","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"i8","core","The 8-bit signed integer type.",null,null],[17,"MIN","core::i8","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"isize","core","The pointer-sized signed integer type.",null,null],[17,"MIN","core::isize","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"u128","core","The 128-bit unsigned integer type.",null,null],[17,"MIN","core::u128","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"u16","core","The 16-bit unsigned integer type.",null,null],[17,"MIN","core::u16","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"u32","core","The 32-bit unsigned integer type.",null,null],[17,"MIN","core::u32","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"u64","core","The 64-bit unsigned integer type.",null,null],[17,"MIN","core::u64","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"u8","core","The 8-bit unsigned integer type.",null,null],[17,"MIN","core::u8","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"usize","core","The pointer-sized unsigned integer type.",null,null],[17,"MIN","core::usize","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"f32","core","This module provides constants which are specific to the…",null,null],[0,"consts","core::f32","Basic mathematical constants.",null,null],[17,"PI","core::f32::consts","Archimedes' constant (π)",null,null],[17,"TAU","","The full circle constant (τ)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler's number (e)",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG2_10","","log2(10)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LOG10_2","","log10(2)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[17,"RADIX","core::f32","The radix or base of the internal representation of `f32`.",null,null],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2.",null,null],[17,"DIGITS","","Approximate number of significant digits in base 10.",null,null],[17,"EPSILON","","[Machine epsilon] value for `f32`.",null,null],[17,"MIN","","Smallest finite `f32` value.",null,null],[17,"MIN_POSITIVE","","Smallest positive normal `f32` value.",null,null],[17,"MAX","","Largest finite `f32` value.",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2…",null,null],[17,"MAX_EXP","","Maximum possible power of 2 exponent.",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",null,null],[17,"NAN","","Not a Number (NaN).",null,null],[17,"INFINITY","","Infinity (∞).",null,null],[17,"NEG_INFINITY","","Negative infinity (−∞).",null,null],[0,"f64","core","This module provides constants which are specific to the…",null,null],[0,"consts","core::f64","Basic mathematical constants.",null,null],[17,"PI","core::f64::consts","Archimedes' constant (π)",null,null],[17,"TAU","","The full circle constant (τ)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler's number (e)",null,null],[17,"LOG2_10","","log2(10)",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_2","","log10(2)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[17,"RADIX","core::f64","The radix or base of the internal representation of `f64`.",null,null],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2.",null,null],[17,"DIGITS","","Approximate number of significant digits in base 10.",null,null],[17,"EPSILON","","[Machine epsilon] value for `f64`.",null,null],[17,"MIN","","Smallest finite `f64` value.",null,null],[17,"MIN_POSITIVE","","Smallest positive normal `f64` value.",null,null],[17,"MAX","","Largest finite `f64` value.",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2…",null,null],[17,"MAX_EXP","","Maximum possible power of 2 exponent.",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",null,null],[17,"NAN","","Not a Number (NaN).",null,null],[17,"INFINITY","","Infinity (∞).",null,null],[17,"NEG_INFINITY","","Negative infinity (−∞).",null,null],[0,"num","core","Numeric traits and functions for the built-in numeric types.",null,null],[3,"NonZeroU8","core::num","An integer that is known not to equal zero.",null,null],[3,"NonZeroU16","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU32","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU64","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU128","","An integer that is known not to equal zero.",null,null],[3,"NonZeroUsize","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI8","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI16","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI32","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI64","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI128","","An integer that is known not to equal zero.",null,null],[3,"NonZeroIsize","","An integer that is known not to equal zero.",null,null],[3,"Wrapping","","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",0,null],[3,"TryFromIntError","","The error type returned when a checked integral type…",null,null],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[4,"FpCategory","","A classification of floating point numbers.",null,null],[13,"Nan","","\"Not a Number\", often obtained by dividing by zero.",1,null],[13,"Infinite","","Positive or negative infinity.",1,null],[13,"Zero","","Positive or negative zero.",1,null],[13,"Subnormal","","De-normalized floating point representation (less precise…",1,null],[13,"Normal","","A regular floating point number.",1,null],[4,"IntErrorKind","","Enum to store the various types of errors that can cause…",null,null],[13,"Empty","","Value being parsed is empty.",2,null],[13,"InvalidDigit","","Contains an invalid digit.",2,null],[13,"Overflow","","Integer is too large to store in target integer type.",2,null],[13,"Underflow","","Integer is too small to store in target integer type.",2,null],[13,"Zero","","Value was Zero",2,null],[11,"min_value","","Returns the smallest value that can be represented by this…",0,[[],["self"]]],[11,"max_value","","Returns the largest value that can be represented by this…",0,[[],["self"]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",0,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",0,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",0,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",0,[[["u32"]],["self"]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",0,[[["u32"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the integer.",0,[[],["self"]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",0,[[],["self"]]],[11,"from_be","","Converts an integer from big endian to the target's…",0,[[],["self"]]],[11,"from_le","","Converts an integer from little endian to the target's…",0,[[],["self"]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",0,[[],["self"]]],[11,"to_le","","Converts `self` to little endian from the target's…",0,[[],["self"]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",0,[[["u32"]],["self"]]],[11,"min_value","","Returns the smallest value that can be represented by this…",0,[[],["self"]]],[11,"max_value","","Returns the largest value that can be represented by this…",0,[[],["self"]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",0,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",0,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",0,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",0,[[["u32"]],["self"]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",0,[[["u32"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the integer.",0,[[],["self"]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",0,[[],["self"]]],[11,"from_be","","Converts an integer from big endian to the target's…",0,[[],["self"]]],[11,"from_le","","Converts an integer from little endian to the target's…",0,[[],["self"]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",0,[[],["self"]]],[11,"to_le","","Converts `self` to little endian from the target's…",0,[[],["self"]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",0,[[["u32"]],["self"]]],[11,"min_value","","Returns the smallest value that can be represented by this…",0,[[],["self"]]],[11,"max_value","","Returns the largest value that can be represented by this…",0,[[],["self"]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",0,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",0,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",0,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",0,[[["u32"]],["self"]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",0,[[["u32"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the integer.",0,[[],["self"]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",0,[[],["self"]]],[11,"from_be","","Converts an integer from big endian to the target's…",0,[[],["self"]]],[11,"from_le","","Converts an integer from little endian to the target's…",0,[[],["self"]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",0,[[],["self"]]],[11,"to_le","","Converts `self` to little endian from the target's…",0,[[],["self"]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",0,[[["u32"]],["self"]]],[11,"min_value","","Returns the smallest value that can be represented by this…",0,[[],["self"]]],[11,"max_value","","Returns the largest value that can be represented by this…",0,[[],["self"]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",0,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",0,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",0,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",0,[[["u32"]],["self"]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",0,[[["u32"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the integer.",0,[[],["self"]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",0,[[],["self"]]],[11,"from_be","","Converts an integer from big endian to the target's…",0,[[],["self"]]],[11,"from_le","","Converts an integer from little endian to the target's…",0,[[],["self"]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",0,[[],["self"]]],[11,"to_le","","Converts `self` to little endian from the target's…",0,[[],["self"]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",0,[[["u32"]],["self"]]],[11,"min_value","","Returns the smallest value that can be represented by this…",0,[[],["self"]]],[11,"max_value","","Returns the largest value that can be represented by this…",0,[[],["self"]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",0,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",0,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",0,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",0,[[["u32"]],["self"]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",0,[[["u32"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the integer.",0,[[],["self"]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",0,[[],["self"]]],[11,"from_be","","Converts an integer from big endian to the target's…",0,[[],["self"]]],[11,"from_le","","Converts an integer from little endian to the target's…",0,[[],["self"]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",0,[[],["self"]]],[11,"to_le","","Converts `self` to little endian from the target's…",0,[[],["self"]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",0,[[["u32"]],["self"]]],[11,"min_value","","Returns the smallest value that can be represented by this…",0,[[],["self"]]],[11,"max_value","","Returns the largest value that can be represented by this…",0,[[],["self"]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",0,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",0,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",0,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",0,[[["u32"]],["self"]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",0,[[["u32"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the integer.",0,[[],["self"]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",0,[[],["self"]]],[11,"from_be","","Converts an integer from big endian to the target's…",0,[[],["self"]]],[11,"from_le","","Converts an integer from little endian to the target's…",0,[[],["self"]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",0,[[],["self"]]],[11,"to_le","","Converts `self` to little endian from the target's…",0,[[],["self"]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",0,[[["u32"]],["self"]]],[11,"min_value","","Returns the smallest value that can be represented by this…",0,[[],["self"]]],[11,"max_value","","Returns the largest value that can be represented by this…",0,[[],["self"]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",0,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",0,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",0,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",0,[[["u32"]],["self"]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",0,[[["u32"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the integer.",0,[[],["self"]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",0,[[],["self"]]],[11,"from_be","","Converts an integer from big endian to the target's…",0,[[],["self"]]],[11,"from_le","","Converts an integer from little endian to the target's…",0,[[],["self"]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",0,[[],["self"]]],[11,"to_le","","Converts `self` to little endian from the target's…",0,[[],["self"]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",0,[[["u32"]],["self"]]],[11,"min_value","","Returns the smallest value that can be represented by this…",0,[[],["self"]]],[11,"max_value","","Returns the largest value that can be represented by this…",0,[[],["self"]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",0,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",0,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",0,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",0,[[["u32"]],["self"]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",0,[[["u32"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the integer.",0,[[],["self"]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",0,[[],["self"]]],[11,"from_be","","Converts an integer from big endian to the target's…",0,[[],["self"]]],[11,"from_le","","Converts an integer from little endian to the target's…",0,[[],["self"]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",0,[[],["self"]]],[11,"to_le","","Converts `self` to little endian from the target's…",0,[[],["self"]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",0,[[["u32"]],["self"]]],[11,"min_value","","Returns the smallest value that can be represented by this…",0,[[],["self"]]],[11,"max_value","","Returns the largest value that can be represented by this…",0,[[],["self"]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",0,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",0,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",0,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",0,[[["u32"]],["self"]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",0,[[["u32"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the integer.",0,[[],["self"]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",0,[[],["self"]]],[11,"from_be","","Converts an integer from big endian to the target's…",0,[[],["self"]]],[11,"from_le","","Converts an integer from little endian to the target's…",0,[[],["self"]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",0,[[],["self"]]],[11,"to_le","","Converts `self` to little endian from the target's…",0,[[],["self"]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",0,[[["u32"]],["self"]]],[11,"min_value","","Returns the smallest value that can be represented by this…",0,[[],["self"]]],[11,"max_value","","Returns the largest value that can be represented by this…",0,[[],["self"]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",0,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",0,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",0,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",0,[[["u32"]],["self"]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",0,[[["u32"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the integer.",0,[[],["self"]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",0,[[],["self"]]],[11,"from_be","","Converts an integer from big endian to the target's…",0,[[],["self"]]],[11,"from_le","","Converts an integer from little endian to the target's…",0,[[],["self"]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",0,[[],["self"]]],[11,"to_le","","Converts `self` to little endian from the target's…",0,[[],["self"]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",0,[[["u32"]],["self"]]],[11,"min_value","","Returns the smallest value that can be represented by this…",0,[[],["self"]]],[11,"max_value","","Returns the largest value that can be represented by this…",0,[[],["self"]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",0,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",0,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",0,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",0,[[["u32"]],["self"]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",0,[[["u32"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the integer.",0,[[],["self"]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",0,[[],["self"]]],[11,"from_be","","Converts an integer from big endian to the target's…",0,[[],["self"]]],[11,"from_le","","Converts an integer from little endian to the target's…",0,[[],["self"]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",0,[[],["self"]]],[11,"to_le","","Converts `self` to little endian from the target's…",0,[[],["self"]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",0,[[["u32"]],["self"]]],[11,"min_value","","Returns the smallest value that can be represented by this…",0,[[],["self"]]],[11,"max_value","","Returns the largest value that can be represented by this…",0,[[],["self"]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",0,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",0,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",0,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",0,[[["u32"]],["self"]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",0,[[["u32"]],["self"]]],[11,"swap_bytes","","Reverses the byte order of the integer.",0,[[],["self"]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",0,[[],["self"]]],[11,"from_be","","Converts an integer from big endian to the target's…",0,[[],["self"]]],[11,"from_le","","Converts an integer from little endian to the target's…",0,[[],["self"]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",0,[[],["self"]]],[11,"to_le","","Converts `self` to little endian from the target's…",0,[[],["self"]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",0,[[["u32"]],["self"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",0,[[],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at…",0,[[],[["isize"],["wrapping",["isize"]]]]],[11,"signum","","Returns a number representing sign of `self`.",0,[[],[["isize"],["wrapping",["isize"]]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",0,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",0,[[],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",0,[[],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at…",0,[[],[["wrapping",["i8"]],["i8"]]]],[11,"signum","","Returns a number representing sign of `self`.",0,[[],[["wrapping",["i8"]],["i8"]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",0,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",0,[[],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",0,[[],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at…",0,[[],[["wrapping",["i16"]],["i16"]]]],[11,"signum","","Returns a number representing sign of `self`.",0,[[],[["wrapping",["i16"]],["i16"]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",0,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",0,[[],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",0,[[],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at…",0,[[],[["wrapping",["i32"]],["i32"]]]],[11,"signum","","Returns a number representing sign of `self`.",0,[[],[["wrapping",["i32"]],["i32"]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",0,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",0,[[],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",0,[[],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at…",0,[[],[["i64"],["wrapping",["i64"]]]]],[11,"signum","","Returns a number representing sign of `self`.",0,[[],[["i64"],["wrapping",["i64"]]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",0,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",0,[[],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",0,[[],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at…",0,[[],[["i128"],["wrapping",["i128"]]]]],[11,"signum","","Returns a number representing sign of `self`.",0,[[],[["i128"],["wrapping",["i128"]]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",0,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",0,[[],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",0,[[],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",0,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",0,[[],["self"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",0,[[],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",0,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",0,[[],["self"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",0,[[],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",0,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",0,[[],["self"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",0,[[],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",0,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",0,[[],["self"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",0,[[],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",0,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",0,[[],["self"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",0,[[],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",0,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",0,[[],["self"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",3,[[["u8"]],["self"]]],[11,"new","","Creates a non-zero if the given value is not zero.",3,[[["u8"]],["option"]]],[11,"get","","Returns the value as a primitive type.",3,[[],["u8"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",4,[[["u16"]],["self"]]],[11,"new","","Creates a non-zero if the given value is not zero.",4,[[["u16"]],["option"]]],[11,"get","","Returns the value as a primitive type.",4,[[],["u16"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",5,[[["u32"]],["self"]]],[11,"new","","Creates a non-zero if the given value is not zero.",5,[[["u32"]],["option"]]],[11,"get","","Returns the value as a primitive type.",5,[[],["u32"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",6,[[["u64"]],["self"]]],[11,"new","","Creates a non-zero if the given value is not zero.",6,[[["u64"]],["option"]]],[11,"get","","Returns the value as a primitive type.",6,[[],["u64"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",7,[[["u128"]],["self"]]],[11,"new","","Creates a non-zero if the given value is not zero.",7,[[["u128"]],["option"]]],[11,"get","","Returns the value as a primitive type.",7,[[],["u128"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",8,[[["usize"]],["self"]]],[11,"new","","Creates a non-zero if the given value is not zero.",8,[[["usize"]],["option"]]],[11,"get","","Returns the value as a primitive type.",8,[[],["usize"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",9,[[["i8"]],["self"]]],[11,"new","","Creates a non-zero if the given value is not zero.",9,[[["i8"]],["option"]]],[11,"get","","Returns the value as a primitive type.",9,[[],["i8"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",10,[[["i16"]],["self"]]],[11,"new","","Creates a non-zero if the given value is not zero.",10,[[["i16"]],["option"]]],[11,"get","","Returns the value as a primitive type.",10,[[],["i16"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",11,[[["i32"]],["self"]]],[11,"new","","Creates a non-zero if the given value is not zero.",11,[[["i32"]],["option"]]],[11,"get","","Returns the value as a primitive type.",11,[[],["i32"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",12,[[["i64"]],["self"]]],[11,"new","","Creates a non-zero if the given value is not zero.",12,[[["i64"]],["option"]]],[11,"get","","Returns the value as a primitive type.",12,[[],["i64"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",13,[[["i128"]],["self"]]],[11,"new","","Creates a non-zero if the given value is not zero.",13,[[["i128"]],["option"]]],[11,"get","","Returns the value as a primitive type.",13,[[],["i128"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",14,[[["isize"]],["self"]]],[11,"new","","Creates a non-zero if the given value is not zero.",14,[[["isize"]],["option"]]],[11,"get","","Returns the value as a primitive type.",14,[[],["isize"]]],[11,"kind","","Outputs the detailed cause of parsing an integer failing.",15,[[["self"]],["interrorkind"]]],[0,"prelude","core","The libcore prelude",null,null],[0,"v1","core::prelude","The core prelude",null,null],[0,"hint","core","Hints to compiler that affects how code should be emitted…",null,null],[5,"unreachable_unchecked","core::hint","Informs the compiler that this point in the code is not…",null,[[]]],[5,"spin_loop","","Emits a machine instruction hinting to the processor that…",null,[[]]],[5,"black_box","","An identity function that hints to the compiler to be…",null,[[["t"]],["t"]]],[0,"intrinsics","core","Compiler intrinsics.",null,null],[5,"copy_nonoverlapping","core::intrinsics","Copies `count * size_of::<T>()` bytes from `src` to `dst`.…",null,[[["usize"]]]],[5,"copy","","Copies `count * size_of::<T>()` bytes from `src` to `dst`.…",null,[[["usize"]]]],[5,"write_bytes","","Sets `count * size_of::<T>()` bytes of memory starting at…",null,[[["u8"],["usize"]]]],[5,"atomic_cxchg","","Stores a value if the current value is the same as the…",null,null],[5,"atomic_cxchg_acq","","Stores a value if the current value is the same as the…",null,null],[5,"atomic_cxchg_rel","","Stores a value if the current value is the same as the…",null,null],[5,"atomic_cxchg_acqrel","","Stores a value if the current value is the same as the…",null,null],[5,"atomic_cxchg_relaxed","","Stores a value if the current value is the same as the…",null,null],[5,"atomic_cxchg_failrelaxed","","Stores a value if the current value is the same as the…",null,null],[5,"atomic_cxchg_failacq","","Stores a value if the current value is the same as the…",null,null],[5,"atomic_cxchg_acq_failrelaxed","","Stores a value if the current value is the same as the…",null,null],[5,"atomic_cxchg_acqrel_failrelaxed","","Stores a value if the current value is the same as the…",null,null],[5,"atomic_cxchgweak","","Stores a value if the current value is the same as the…",null,null],[5,"atomic_cxchgweak_acq","","Stores a value if the current value is the same as the…",null,null],[5,"atomic_cxchgweak_rel","","Stores a value if the current value is the same as the…",null,null],[5,"atomic_cxchgweak_acqrel","","Stores a value if the current value is the same as the…",null,null],[5,"atomic_cxchgweak_relaxed","","Stores a value if the current value is the same as the…",null,null],[5,"atomic_cxchgweak_failrelaxed","","Stores a value if the current value is the same as the…",null,null],[5,"atomic_cxchgweak_failacq","","Stores a value if the current value is the same as the…",null,null],[5,"atomic_cxchgweak_acq_failrelaxed","","Stores a value if the current value is the same as the…",null,null],[5,"atomic_cxchgweak_acqrel_failrelaxed","","Stores a value if the current value is the same as the…",null,null],[5,"atomic_load","","Loads the current value of the pointer. The stabilized…",null,null],[5,"atomic_load_acq","","Loads the current value of the pointer. The stabilized…",null,null],[5,"atomic_load_relaxed","","Loads the current value of the pointer. The stabilized…",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","Stores the value at the specified memory location. The…",null,null],[5,"atomic_store_rel","","Stores the value at the specified memory location. The…",null,null],[5,"atomic_store_relaxed","","Stores the value at the specified memory location. The…",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","Stores the value at the specified memory location,…",null,null],[5,"atomic_xchg_acq","","Stores the value at the specified memory location,…",null,null],[5,"atomic_xchg_rel","","Stores the value at the specified memory location,…",null,null],[5,"atomic_xchg_acqrel","","Stores the value at the specified memory location,…",null,null],[5,"atomic_xchg_relaxed","","Stores the value at the specified memory location,…",null,null],[5,"atomic_xadd","","Adds to the current value, returning the previous value.…",null,null],[5,"atomic_xadd_acq","","Adds to the current value, returning the previous value.…",null,null],[5,"atomic_xadd_rel","","Adds to the current value, returning the previous value.…",null,null],[5,"atomic_xadd_acqrel","","Adds to the current value, returning the previous value.…",null,null],[5,"atomic_xadd_relaxed","","Adds to the current value, returning the previous value.…",null,null],[5,"atomic_xsub","","Subtract from the current value, returning the previous…",null,null],[5,"atomic_xsub_acq","","Subtract from the current value, returning the previous…",null,null],[5,"atomic_xsub_rel","","Subtract from the current value, returning the previous…",null,null],[5,"atomic_xsub_acqrel","","Subtract from the current value, returning the previous…",null,null],[5,"atomic_xsub_relaxed","","Subtract from the current value, returning the previous…",null,null],[5,"atomic_and","","Bitwise and with the current value, returning the previous…",null,null],[5,"atomic_and_acq","","Bitwise and with the current value, returning the previous…",null,null],[5,"atomic_and_rel","","Bitwise and with the current value, returning the previous…",null,null],[5,"atomic_and_acqrel","","Bitwise and with the current value, returning the previous…",null,null],[5,"atomic_and_relaxed","","Bitwise and with the current value, returning the previous…",null,null],[5,"atomic_nand","","Bitwise nand with the current value, returning the…",null,null],[5,"atomic_nand_acq","","Bitwise nand with the current value, returning the…",null,null],[5,"atomic_nand_rel","","Bitwise nand with the current value, returning the…",null,null],[5,"atomic_nand_acqrel","","Bitwise nand with the current value, returning the…",null,null],[5,"atomic_nand_relaxed","","Bitwise nand with the current value, returning the…",null,null],[5,"atomic_or","","Bitwise or with the current value, returning the previous…",null,null],[5,"atomic_or_acq","","Bitwise or with the current value, returning the previous…",null,null],[5,"atomic_or_rel","","Bitwise or with the current value, returning the previous…",null,null],[5,"atomic_or_acqrel","","Bitwise or with the current value, returning the previous…",null,null],[5,"atomic_or_relaxed","","Bitwise or with the current value, returning the previous…",null,null],[5,"atomic_xor","","Bitwise xor with the current value, returning the previous…",null,null],[5,"atomic_xor_acq","","Bitwise xor with the current value, returning the previous…",null,null],[5,"atomic_xor_rel","","Bitwise xor with the current value, returning the previous…",null,null],[5,"atomic_xor_acqrel","","Bitwise xor with the current value, returning the previous…",null,null],[5,"atomic_xor_relaxed","","Bitwise xor with the current value, returning the previous…",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"prefetch_read_data","","The `prefetch` intrinsic is a hint to the code generator…",null,null],[5,"prefetch_write_data","","The `prefetch` intrinsic is a hint to the code generator…",null,null],[5,"prefetch_read_instruction","","The `prefetch` intrinsic is a hint to the code generator…",null,null],[5,"prefetch_write_instruction","","The `prefetch` intrinsic is a hint to the code generator…",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"rustc_peek","","Magic intrinsic that derives its meaning from attributes…",null,null],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable,…",null,null],[5,"assume","","Informs the optimizer that a condition is always true. If…",null,null],[5,"likely","","Hints to the compiler that branch condition is likely to…",null,null],[5,"unlikely","","Hints to the compiler that branch condition is likely to…",null,null],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,null],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,null],[5,"pref_align_of","","",null,null],[5,"size_of_val","","The size of the referenced value in bytes.",null,null],[5,"min_align_of_val","","",null,null],[5,"type_name","","Gets a static string slice containing the name of a type.",null,null],[5,"type_id","","Gets an identifier which is globally unique to the…",null,null],[5,"panic_if_uninhabited","","A guard for unsafe functions that cannot ever be executed…",null,null],[5,"caller_location","","Gets a reference to a static `Location` indicating where…",null,null],[5,"init","","Creates a value initialized to zero.",null,null],[5,"uninit","","Creates an uninitialized value.",null,null],[5,"forget","","Moves a value out of scope without running drop glue.",null,null],[5,"transmute","","Reinterprets the bits of a value of one type as another…",null,null],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires…",null,null],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*`…",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*`…",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*`…",null,null],[5,"volatile_load","","Performs a volatile load from the `src` pointer. The…",null,null],[5,"volatile_store","","Performs a volatile store to the `dst` pointer. The…",null,null],[5,"unaligned_volatile_load","","Performs a volatile load from the `src` pointer The…",null,null],[5,"unaligned_volatile_store","","Performs a volatile store to the `dst` pointer. The…",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,null],[5,"sqrtf64","","Returns the square root of an `f64`",null,null],[5,"powif32","","Raises an `f32` to an integer power.",null,null],[5,"powif64","","Raises an `f64` to an integer power.",null,null],[5,"sinf32","","Returns the sine of an `f32`.",null,null],[5,"sinf64","","Returns the sine of an `f64`.",null,null],[5,"cosf32","","Returns the cosine of an `f32`.",null,null],[5,"cosf64","","Returns the cosine of an `f64`.",null,null],[5,"powf32","","Raises an `f32` to an `f32` power.",null,null],[5,"powf64","","Raises an `f64` to an `f64` power.",null,null],[5,"expf32","","Returns the exponential of an `f32`.",null,null],[5,"expf64","","Returns the exponential of an `f64`.",null,null],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,null],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,null],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,null],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,null],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,null],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,null],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,null],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,null],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,null],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,null],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,null],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,null],[5,"minnumf32","","Returns the minimum of two `f32` values.",null,null],[5,"minnumf64","","Returns the minimum of two `f64` values.",null,null],[5,"maxnumf32","","Returns the maximum of two `f32` values.",null,null],[5,"maxnumf64","","Returns the maximum of two `f64` values.",null,null],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,null],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,null],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,null],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,null],[5,"ceilf32","","Returns the smallest integer greater than or equal to an…",null,null],[5,"ceilf64","","Returns the smallest integer greater than or equal to an…",null,null],[5,"truncf32","","Returns the integer part of an `f32`.",null,null],[5,"truncf64","","Returns the integer part of an `f64`.",null,null],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an…",null,null],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an…",null,null],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,null],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,null],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way…",null,null],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way…",null,null],[5,"fadd_fast","","Float addition that allows optimizations based on…",null,null],[5,"fsub_fast","","Float subtraction that allows optimizations based on…",null,null],[5,"fmul_fast","","Float multiplication that allows optimizations based on…",null,null],[5,"fdiv_fast","","Float division that allows optimizations based on…",null,null],[5,"frem_fast","","Float remainder that allows optimizations based on…",null,null],[5,"float_to_int_approx_unchecked","","Convert with LLVM’s fptoui/fptosi, which may return undef…",null,null],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,null],[5,"ctlz","","Returns the number of leading unset bits (zeroes) in an…",null,null],[5,"ctlz_nonzero","","Like `ctlz`, but extra-unsafe as it returns `undef` when…",null,null],[5,"cttz","","Returns the number of trailing unset bits (zeroes) in an…",null,null],[5,"cttz_nonzero","","Like `cttz`, but extra-unsafe as it returns `undef` when…",null,null],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,null],[5,"bitreverse","","Reverses the bits in an integer type `T`.",null,null],[5,"add_with_overflow","","Performs checked integer addition. The stabilized versions…",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction The stabilized…",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication The stabilized…",null,null],[5,"exact_div","","Performs an exact division, resulting in undefined…",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined…",null,null],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting…",null,null],[5,"unchecked_shl","","Performs an unchecked left shift, resulting in undefined…",null,null],[5,"unchecked_shr","","Performs an unchecked right shift, resulting in undefined…",null,null],[5,"unchecked_add","","Returns the result of an unchecked addition, resulting in…",null,null],[5,"unchecked_sub","","Returns the result of an unchecked subtraction, resulting…",null,null],[5,"unchecked_mul","","Returns the result of an unchecked multiplication,…",null,null],[5,"rotate_left","","Performs rotate left. The stabilized versions of this…",null,null],[5,"rotate_right","","Performs rotate right. The stabilized versions of this…",null,null],[5,"wrapping_add","","Returns (a + b) mod 2N, where N is the width of T in bits.…",null,null],[5,"wrapping_sub","","Returns (a - b) mod 2N, where N is the width of T in bits.…",null,null],[5,"wrapping_mul","","Returns (a * b) mod 2N, where N is the width of T in bits.…",null,null],[5,"saturating_add","","Computes `a + b`, while saturating at numeric bounds. The…",null,null],[5,"saturating_sub","","Computes `a - b`, while saturating at numeric bounds. The…",null,null],[5,"discriminant_value","","Returns the value of the discriminant for the variant in…",null,null],[5,"try","","Rust's \"try catch\" construct which invokes the function…",null,null],[5,"nontemporal_store","","Emits a `!nontemporal` store according to LLVM (see their…",null,null],[5,"ptr_offset_from","","See documentation of `<*const T>::offset_from` for details.",null,null],[5,"miri_start_panic","","Internal hook used by Miri to implement unwinding.…",null,null],[0,"mem","core","Basic functions for dealing with memory.",null,null],[3,"ManuallyDrop","core::mem","A wrapper to inhibit compiler from automatically calling…",null,null],[3,"Discriminant","","Opaque type representing the discriminant of an enum.",null,null],[19,"MaybeUninit","","A wrapper type to construct uninitialized instances of `T`.",null,null],[5,"forget","","Takes ownership and \"forgets\" about the value without…",null,[[["t"]]]],[5,"forget_unsized","","Like [`forget`], but also accepts unsized values.",null,[[["sized"]]]],[5,"size_of","","Returns the size of a type in bytes.",null,[[],["usize"]]],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",null,[[["t"]],["usize"]]],[5,"min_align_of","","Returns the [ABI]-required minimum alignment of a type.",null,[[],["usize"]]],[5,"min_align_of_val","","Returns the [ABI]-required minimum alignment of the type…",null,[[["t"]],["usize"]]],[5,"align_of","","Returns the [ABI]-required minimum alignment of a type.",null,[[],["usize"]]],[5,"align_of_val","","Returns the [ABI]-required minimum alignment of the type…",null,[[["t"]],["usize"]]],[5,"needs_drop","","Returns `true` if dropping values of type `T` matters.",null,[[],["bool"]]],[5,"zeroed","","Returns the value of type `T` represented by the all-zero…",null,[[],["t"]]],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by…",null,[[],["t"]]],[5,"swap","","Swaps the values at two mutable locations, without…",null,[[["t"]]]],[5,"take","","Replaces `dest` with the default value of `T`, returning…",null,[[["t"]],["default"]]],[5,"replace","","Moves `src` into the referenced `dest`, returning the…",null,[[["t"],["t"]],["t"]]],[5,"drop","","Disposes of a value.",null,[[["t"]]]],[5,"transmute_copy","","Interprets `src` as having type `&U`, and then reads `src`…",null,[[["t"]],["u"]]],[5,"discriminant","","Returns a value uniquely identifying the enum variant in…",null,[[["t"]],["discriminant"]]],[5,"transmute","","Reinterprets the bits of a value of one type as another…",null,null],[11,"new","","Wrap a value to be manually dropped.",16,[[["t"]],["manuallydrop"]]],[11,"into_inner","","Extracts the value from the `ManuallyDrop` container.",16,[[["manuallydrop"]],["t"]]],[11,"take","","Takes the value from the `ManuallyDrop<T>` container out.",16,[[["manuallydrop"]],["t"]]],[11,"drop","","Manually drops the contained value.",16,[[["manuallydrop"]]]],[11,"new","","Creates a new `MaybeUninit<T>` initialized with the given…",17,[[["t"]],["maybeuninit"]]],[11,"uninit","","Creates a new `MaybeUninit<T>` in an uninitialized state.",17,[[],["maybeuninit"]]],[11,"uninit_array","","Create a new array of `MaybeUninit<T>` items, in an…",17,[[]]],[18,"UNINIT","","A promotable constant, equivalent to `uninit()`.",17,null],[11,"zeroed","","Creates a new `MaybeUninit<T>` in an uninitialized state,…",17,[[],["maybeuninit"]]],[11,"write","","Sets the value of the `MaybeUninit<T>`. This overwrites…",17,[[["self"],["t"]],["t"]]],[11,"as_ptr","","Gets a pointer to the contained value. Reading from this…",17,[[["self"]]]],[11,"as_mut_ptr","","Gets a mutable pointer to the contained value. Reading…",17,[[["self"]]]],[11,"assume_init","","Extracts the value from the `MaybeUninit<T>` container.…",17,[[],["t"]]],[11,"read","","Reads the value from the `MaybeUninit<T>` container. The…",17,[[["self"]],["t"]]],[11,"get_ref","","Gets a shared reference to the contained value.",17,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable (unique) reference to the contained value.",17,[[["self"]],["t"]]],[11,"slice_get_ref","","Assuming all the elements are initialized, get a slice to…",17,[[]]],[11,"slice_get_mut","","Assuming all the elements are initialized, get a mutable…",17,[[]]],[11,"first_ptr","","Gets a pointer to the first element of the array.",17,[[]]],[11,"first_ptr_mut","","Gets a mutable pointer to the first element of the array.",17,[[]]],[0,"ptr","core","Manually manage memory through raw pointers.",null,null],[3,"NonNull","core::ptr","`*mut T` but non-zero and covariant.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,[[]]],[5,"null","","Creates a null raw pointer.",null,[[]]],[5,"null_mut","","Creates a null mutable raw pointer.",null,[[]]],[5,"slice_from_raw_parts","","Forms a raw slice from a pointer and a length.",null,[[["usize"]]]],[5,"slice_from_raw_parts_mut","","Performs the same functionality as…",null,[[["usize"]]]],[5,"swap","","Swaps the values at two mutable locations of the same…",null,[[]]],[5,"swap_nonoverlapping","","Swaps `count * size_of::<T>()` bytes between the two…",null,[[["usize"]]]],[5,"replace","","Moves `src` into the pointed `dst`, returning the previous…",null,[[["t"]],["t"]]],[5,"read","","Reads the value from `src` without moving it. This leaves…",null,[[],["t"]]],[5,"read_unaligned","","Reads the value from `src` without moving it. This leaves…",null,[[],["t"]]],[5,"write","","Overwrites a memory location with the given value without…",null,[[["t"]]]],[5,"write_unaligned","","Overwrites a memory location with the given value without…",null,[[["t"]]]],[5,"read_volatile","","Performs a volatile read of the value from `src` without…",null,[[],["t"]]],[5,"write_volatile","","Performs a volatile write of a memory location with the…",null,[[["t"]]]],[5,"eq","","Compares raw pointers for equality.",null,[[],["bool"]]],[5,"hash","","Hash a raw pointer.",null,[[["s"]]]],[11,"dangling","","Creates a new `NonNull` that is dangling, but well-aligned.",18,[[],["self"]]],[11,"new_unchecked","","Creates a new `NonNull`.",18,[[],["self"]]],[11,"new","","Creates a new `NonNull` if `ptr` is non-null.",18,[[],["option"]]],[11,"as_ptr","","Acquires the underlying `*mut` pointer.",18,[[]]],[11,"as_ref","","Dereferences the content.",18,[[["self"]],["t"]]],[11,"as_mut","","Mutably dereferences the content.",18,[[["self"]],["t"]]],[11,"cast","","Casts to a pointer of another type.",18,[[],["nonnull"]]],[0,"borrow","core","A module for working with borrowed data.",null,null],[8,"Borrow","core::borrow","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",19,[[["self"]],["borrowed"]]],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",20,[[["self"]],["borrowed"]]],[0,"clone","core","The `Clone` trait for types that cannot be 'implicitly…",null,null],[8,"Clone","core::clone","A common trait for the ability to explicitly duplicate an…",null,null],[10,"clone","","Returns a copy of the value.",21,[[["self"]],["self"]]],[11,"clone_from","","Performs copy-assignment from `source`.",21,[[["self"],["self"]]]],[0,"cmp","core","Functionality for ordering and comparison.",null,null],[3,"Reverse","core::cmp","A helper struct for reverse ordering.",null,null],[12,"0","","",22,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two…",null,null],[13,"Less","","An ordering where a compared value is less than another.",23,null],[13,"Equal","","An ordering where a compared value is equal to another.",23,null],[13,"Greater","","An ordering where a compared value is greater than another.",23,null],[5,"min","","Compares and returns the minimum of two values.",null,[[["ord"]],["ord"]]],[5,"min_by","","Returns the minimum of two values with respect to the…",null,[[["t"],["fnonce"]],["t"]]],[5,"min_by_key","","Returns the element that gives the minimum value from the…",null,[[["t"],["fnmut"]],["t"]]],[5,"max","","Compares and returns the maximum of two values.",null,[[["ord"]],["ord"]]],[5,"max_by","","Returns the maximum of two values with respect to the…",null,[[["t"],["fnonce"]],["t"]]],[5,"max_by_key","","Returns the element that gives the maximum value from the…",null,[[["t"],["fnmut"]],["t"]]],[8,"PartialEq","","Trait for equality comparisons which are partial…",null,null],[10,"eq","","This method tests for `self` and `other` values to be…",24,[[["rhs"],["self"]],["bool"]]],[11,"ne","","This method tests for `!=`.",24,[[["rhs"],["self"]],["bool"]]],[8,"Eq","","Trait for equality comparisons which are equivalence…",null,null],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and…",25,[[["self"]],["ordering"]]],[11,"max","","Compares and returns the maximum of two values.",25,[[],["self"]]],[11,"min","","Compares and returns the minimum of two values.",25,[[],["self"]]],[11,"clamp","","Restrict a value to a certain interval.",25,[[],["self"]]],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other`…",26,[[["rhs"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","This method tests less than (for `self` and `other`) and…",26,[[["rhs"],["self"]],["bool"]]],[11,"le","","This method tests less than or equal to (for `self` and…",26,[[["rhs"],["self"]],["bool"]]],[11,"gt","","This method tests greater than (for `self` and `other`)…",26,[[["rhs"],["self"]],["bool"]]],[11,"ge","","This method tests greater than or equal to (for `self` and…",26,[[["rhs"],["self"]],["bool"]]],[11,"reverse","","Reverses the `Ordering`.",23,[[],["ordering"]]],[11,"then","","Chains two orderings.",23,[[["ordering"]],["ordering"]]],[11,"then_with","","Chains the ordering with the given function.",23,[[["fnonce"]],["ordering"]]],[0,"convert","core","Traits for conversions between types.",null,null],[4,"Infallible","core::convert","The error type for errors that can never happen.",null,null],[5,"identity","","The identity function.",null,[[["t"]],["t"]]],[8,"FloatToInt","","Supporting trait for inherent methods of `f32` and `f64`…",null,null],[8,"AsRef","","Used to do a cheap reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",27,[[["self"]],["t"]]],[8,"AsMut","","Used to do a cheap mutable-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",28,[[["self"]],["t"]]],[8,"Into","","A value-to-value conversion that consumes the input value.…",null,null],[10,"into","","Performs the conversion.",29,[[],["t"]]],[8,"From","","Used to do value-to-value conversions while consuming the…",null,null],[10,"from","","Performs the conversion.",30,[[["t"]],["self"]]],[8,"TryInto","","An attempted conversion that consumes `self`, which may or…",null,null],[16,"Error","","The type returned in the event of a conversion error.",31,null],[10,"try_into","","Performs the conversion.",31,[[],["result"]]],[8,"TryFrom","","Simple and safe type conversions that may fail in a…",null,null],[16,"Error","","The type returned in the event of a conversion error.",32,null],[10,"try_from","","Performs the conversion.",32,[[["t"]],["result"]]],[0,"default","core","The `Default` trait for types which may have meaningful…",null,null],[8,"Default","core::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",33,[[],["self"]]],[0,"marker","core","Primitive traits and types representing basic properties…",null,null],[3,"PhantomData","core::marker","Zero-sized type used to mark things that \"act like\" they…",null,null],[3,"PhantomPinned","","A marker type which does not implement `Unpin`.",null,null],[8,"Send","","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile time.",null,null],[8,"Unsize","","Types that can be \"unsized\" to a dynamically-sized type.",null,null],[8,"StructuralPartialEq","","Required trait for constants used in pattern matches.",null,null],[8,"StructuralEq","","Required trait for constants used in pattern matches.",null,null],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",null,null],[8,"Sync","","Types for which it is safe to share references between…",null,null],[8,"Unpin","","Types that can be safely moved after being pinned.",null,null],[0,"ops","core","Overloadable operators.",null,null],[3,"Range","core::ops","A (half-open) range bounded inclusively below and…",null,null],[12,"start","","The lower bound of the range (inclusive).",34,null],[12,"end","","The upper bound of the range (exclusive).",34,null],[3,"RangeFrom","","A range only bounded inclusively below (`start..`).",null,null],[12,"start","","The lower bound of the range (inclusive).",35,null],[3,"RangeFull","","An unbounded range (`..`).",null,null],[3,"RangeTo","","A range only bounded exclusively above (`..end`).",null,null],[12,"end","","The upper bound of the range (exclusive).",36,null],[3,"RangeInclusive","","A range bounded inclusively below and above (`start..=end`).",null,null],[3,"RangeToInclusive","","A range only bounded inclusively above (`..=end`).",null,null],[12,"end","","The upper bound of the range (inclusive)",37,null],[4,"Bound","","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",38,null],[13,"Excluded","","An exclusive bound.",38,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in…",38,null],[4,"GeneratorState","","The result of a generator resumption.",null,null],[13,"Yielded","","The generator suspended with a value.",39,null],[13,"Complete","","The generator completed with a return value.",39,null],[11,"contains","","Returns `true` if `item` is contained in the range.",34,[[["self"],["u"]],["bool"]]],[11,"is_empty","","Returns `true` if the range contains no items.",34,[[["self"]],["bool"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",35,[[["self"],["u"]],["bool"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",36,[[["self"],["u"]],["bool"]]],[11,"new","","Creates a new inclusive range. Equivalent to writing…",40,[[["idx"]],["self"]]],[11,"start","","Returns the lower bound of the range (inclusive).",40,[[["self"]],["idx"]]],[11,"end","","Returns the upper bound of the range (inclusive).",40,[[["self"]],["idx"]]],[11,"into_inner","","Destructures the `RangeInclusive` into (lower bound, upper…",40,[[]]],[11,"contains","","Returns `true` if `item` is contained in the range.",40,[[["self"],["u"]],["bool"]]],[11,"is_empty","","Returns `true` if the range contains no items.",40,[[["self"]],["bool"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",37,[[["self"],["u"]],["bool"]]],[11,"cloned","","Map a `Bound<&T>` to a `Bound<T>` by cloning the contents…",38,[[],["bound"]]],[8,"Add","","The addition operator `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator.",41,null],[10,"add","","Performs the `+` operation.",41,[[["rhs"]]]],[8,"Div","","The division operator `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator.",42,null],[10,"div","","Performs the `/` operation.",42,[[["rhs"]]]],[8,"Mul","","The multiplication operator `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator.",43,null],[10,"mul","","Performs the `*` operation.",43,[[["rhs"]]]],[8,"Neg","","The unary negation operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",44,null],[10,"neg","","Performs the unary `-` operation.",44,[[]]],[8,"Rem","","The remainder operator `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator.",45,null],[10,"rem","","Performs the `%` operation.",45,[[["rhs"]]]],[8,"Sub","","The subtraction operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",46,null],[10,"sub","","Performs the `-` operation.",46,[[["rhs"]]]],[8,"AddAssign","","The addition assignment operator `+=`.",null,null],[10,"add_assign","","Performs the `+=` operation.",47,[[["self"],["rhs"]]]],[8,"DivAssign","","The division assignment operator `/=`.",null,null],[10,"div_assign","","Performs the `/=` operation.",48,[[["self"],["rhs"]]]],[8,"MulAssign","","The multiplication assignment operator `*=`.",null,null],[10,"mul_assign","","Performs the `*=` operation.",49,[[["self"],["rhs"]]]],[8,"RemAssign","","The remainder assignment operator `%=`.",null,null],[10,"rem_assign","","Performs the `%=` operation.",50,[[["self"],["rhs"]]]],[8,"SubAssign","","The subtraction assignment operator `-=`.",null,null],[10,"sub_assign","","Performs the `-=` operation.",51,[[["self"],["rhs"]]]],[8,"BitAnd","","The bitwise AND operator `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator.",52,null],[10,"bitand","","Performs the `&` operation.",52,[[["rhs"]]]],[8,"BitOr","","The bitwise OR operator `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator.",53,null],[10,"bitor","","Performs the `|` operation.",53,[[["rhs"]]]],[8,"BitXor","","The bitwise XOR operator `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator.",54,null],[10,"bitxor","","Performs the `^` operation.",54,[[["rhs"]]]],[8,"Not","","The unary logical negation operator `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator.",55,null],[10,"not","","Performs the unary `!` operation.",55,[[]]],[8,"Shl","","The left shift operator `<<`. Note that because this trait…",null,null],[16,"Output","","The resulting type after applying the `<<` operator.",56,null],[10,"shl","","Performs the `<<` operation.",56,[[["rhs"]]]],[8,"Shr","","The right shift operator `>>`. Note that because this…",null,null],[16,"Output","","The resulting type after applying the `>>` operator.",57,null],[10,"shr","","Performs the `>>` operation.",57,[[["rhs"]]]],[8,"BitAndAssign","","The bitwise AND assignment operator `&=`.",null,null],[10,"bitand_assign","","Performs the `&=` operation.",58,[[["self"],["rhs"]]]],[8,"BitOrAssign","","The bitwise OR assignment operator `|=`.",null,null],[10,"bitor_assign","","Performs the `|=` operation.",59,[[["self"],["rhs"]]]],[8,"BitXorAssign","","The bitwise XOR assignment operator `^=`.",null,null],[10,"bitxor_assign","","Performs the `^=` operation.",60,[[["self"],["rhs"]]]],[8,"ShlAssign","","The left shift assignment operator `<<=`.",null,null],[10,"shl_assign","","Performs the `<<=` operation.",61,[[["self"],["rhs"]]]],[8,"ShrAssign","","The right shift assignment operator `>>=`.",null,null],[10,"shr_assign","","Performs the `>>=` operation.",62,[[["self"],["rhs"]]]],[8,"Deref","","Used for immutable dereferencing operations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing.",63,null],[10,"deref","","Dereferences the value.",63,[[["self"]]]],[8,"DerefMut","","Used for mutable dereferencing operations, like in `*v =…",null,null],[10,"deref_mut","","Mutably dereferences the value.",64,[[["self"]]]],[8,"Drop","","Used to run some code when a value goes out of scope. This…",null,null],[10,"drop","","Executes the destructor for this type.",65,[[["self"]]]],[8,"Fn","","The version of the call operator that takes an immutable…",null,null],[10,"call","","Performs the call operation.",66,[[["args"],["self"]]]],[8,"FnMut","","The version of the call operator that takes a mutable…",null,null],[10,"call_mut","","Performs the call operation.",67,[[["args"],["self"]]]],[8,"FnOnce","","The version of the call operator that takes a by-value…",null,null],[16,"Output","","The returned type after the call operator is used.",68,null],[10,"call_once","","Performs the call operation.",68,[[["args"]]]],[8,"Index","","Used for indexing operations (`container[index]`) in…",null,null],[16,"Output","","The returned type after indexing.",69,null],[10,"index","","Performs the indexing (`container[index]`) operation.",69,[[["idx"],["self"]]]],[8,"IndexMut","","Used for indexing operations (`container[index]`) in…",null,null],[10,"index_mut","","Performs the mutable indexing (`container[index]`)…",70,[[["self"],["idx"]]]],[8,"RangeBounds","","`RangeBounds` is implemented by Rust's built-in range…",null,null],[10,"start_bound","","Start index bound.",71,[[["self"]],[["bound"],["t"]]]],[10,"end_bound","","End index bound.",71,[[["self"]],[["bound"],["t"]]]],[11,"contains","","Returns `true` if `item` is contained in the range.",71,[[["self"],["u"]],["bool"]]],[8,"Try","","A trait for customizing the behavior of the `?` operator.",null,null],[16,"Ok","","The type of this value when viewed as successful.",72,null],[16,"Error","","The type of this value when viewed as failed.",72,null],[10,"into_result","","Applies the \"?\" operator. A return of `Ok(t)` means that…",72,[[],["result"]]],[10,"from_error","","Wrap an error value to construct the composite result. For…",72,[[],["self"]]],[10,"from_ok","","Wrap an OK value to construct the composite result. For…",72,[[],["self"]]],[8,"Generator","","The trait implemented by builtin generator types.",null,null],[16,"Yield","","The type of value this generator yields.",73,null],[16,"Return","","The type of value this generator returns.",73,null],[10,"resume","","Resumes the execution of this generator.",73,[[["pin"],["self"]],["generatorstate"]]],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper…",null,null],[8,"DispatchFromDyn","","This is used for object safety, to check that a method's…",null,null],[0,"any","core","This module implements the `Any` trait, which enables…",null,null],[3,"TypeId","core::any","A `TypeId` represents a globally unique identifier for a…",null,null],[5,"type_name","","Returns the name of a type as a string slice.",null,[[],["str"]]],[5,"type_name_of_val","","Returns the name of the type of the pointed-to value as a…",null,[[["t"]],["str"]]],[8,"Any","","A trait to emulate dynamic typing.",null,null],[10,"type_id","","Gets the `TypeId` of `self`.",74,[[["self"]],["typeid"]]],[11,"is","","Returns `true` if the boxed type is the same as `T`.",74,[[["self"]],["bool"]]],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type…",74,[[["self"]],[["t"],["option"]]]],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is…",74,[[["self"]],[["option"],["t"]]]],[11,"is","","Forwards to the method defined on the type `Any`.",74,[[["self"]],["bool"]]],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",74,[[["self"]],[["t"],["option"]]]],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",74,[[["self"]],[["option"],["t"]]]],[11,"is","","Forwards to the method defined on the type `Any`.",74,[[["self"]],["bool"]]],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",74,[[["self"]],[["t"],["option"]]]],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",74,[[["self"]],[["option"],["t"]]]],[11,"of","","Returns the `TypeId` of the type this generic function has…",75,[[],["typeid"]]],[0,"array","core","Implementations of things like `Eq` for fixed-length…",null,null],[3,"IntoIter","core::array","A by-value [array] iterator.",null,null],[3,"TryFromSliceError","","The error type returned when a conversion from a slice to…",null,null],[11,"new","","Creates a new iterator over the given `array`.",76,[[],["self"]]],[8,"FixedSizeArray","","Utility trait implemented only on arrays of fixed size",null,null],[10,"as_slice","","Converts the array to immutable slice",77,[[["self"]]]],[10,"as_mut_slice","","Converts the array to mutable slice",77,[[["self"]]]],[8,"LengthAtMost32","","Implemented for lengths where trait impls are allowed on…",null,null],[0,"ascii","core","Operations on ASCII strings and characters.",null,null],[3,"EscapeDefault","core::ascii","An iterator over the escaped version of a byte.",null,null],[5,"escape_default","","Returns an iterator that produces an escaped version of a…",null,[[["u8"]],["escapedefault"]]],[0,"cell","core","Shareable mutable containers.",null,null],[3,"Cell","core::cell","A mutable memory location.",null,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow…",null,null],[3,"BorrowError","","An error returned by `RefCell::try_borrow`.",null,null],[3,"BorrowMutError","","An error returned by `RefCell::try_borrow_mut`.",null,null],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box.…",null,null],[3,"RefMut","","A wrapper type for a mutably borrowed value from a…",null,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[11,"new","","Creates a new `Cell` containing the given value.",78,[[["t"]],["cell"]]],[11,"set","","Sets the contained value.",78,[[["self"],["t"]]]],[11,"swap","","Swaps the values of two Cells. Difference with…",78,[[["self"]]]],[11,"replace","","Replaces the contained value, and returns it.",78,[[["self"],["t"]],["t"]]],[11,"into_inner","","Unwraps the value.",78,[[],["t"]]],[11,"get","","Returns a copy of the contained value.",78,[[["self"]],["t"]]],[11,"update","","Updates the contained value using a function and returns…",78,[[["self"],["f"]],["t"]]],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",78,[[["self"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",78,[[["self"]],["t"]]],[11,"from_mut","","Returns a `&Cell<T>` from a `&mut T`",78,[[["t"]],["cell"]]],[11,"take","","Takes the value of the cell, leaving `Default::default()`…",78,[[["self"]],["t"]]],[11,"as_slice_of_cells","","Returns a `&[Cell<T>]` from a `&Cell<[T]>`",78,[[["self"]]]],[11,"new","","Creates a new `RefCell` containing `value`.",79,[[["t"]],["refcell"]]],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",79,[[],["t"]]],[11,"replace","","Replaces the wrapped value with a new one, returning the…",79,[[["self"],["t"]],["t"]]],[11,"replace_with","","Replaces the wrapped value with a new one computed from…",79,[[["fnonce"],["self"]],["t"]]],[11,"swap","","Swaps the wrapped value of `self` with the wrapped value…",79,[[["self"]]]],[11,"borrow","","Immutably borrows the wrapped value.",79,[[["self"]],["ref"]]],[11,"try_borrow","","Immutably borrows the wrapped value, returning an error if…",79,[[["self"]],[["ref"],["result",["ref","borrowerror"]],["borrowerror"]]]],[11,"borrow_mut","","Mutably borrows the wrapped value.",79,[[["self"]],["refmut"]]],[11,"try_borrow_mut","","Mutably borrows the wrapped value, returning an error if…",79,[[["self"]],[["refmut"],["borrowmuterror"],["result",["refmut","borrowmuterror"]]]]],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",79,[[["self"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",79,[[["self"]],["t"]]],[11,"try_borrow_unguarded","","Immutably borrows the wrapped value, returning an error if…",79,[[["self"]],[["result",["borrowerror"]],["t"],["borrowerror"]]]],[11,"clone","","Copies a `Ref`.",80,[[["ref"]],["ref"]]],[11,"map","","Makes a new `Ref` for a component of the borrowed data.",80,[[["ref"],["f"]],[["sized"],["ref"]]]],[11,"map_split","","Splits a `Ref` into multiple `Ref`s for different…",80,[[["ref"],["f"]]]],[11,"map","","Makes a new `RefMut` for a component of the borrowed data,…",81,[[["refmut"],["f"]],[["sized"],["refmut"]]]],[11,"map_split","","Splits a `RefMut` into multiple `RefMut`s for different…",81,[[["refmut"],["f"]]]],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap…",82,[[["t"]],["unsafecell"]]],[11,"into_inner","","Unwraps the value.",82,[[],["t"]]],[11,"get","","Gets a mutable pointer to the wrapped value.",82,[[["self"]]]],[11,"raw_get","","Gets a mutable pointer to the wrapped value. The…",82,[[]]],[0,"char","core","A character type.",null,null],[3,"CharTryFromError","core::char","The error type returned when a conversion from u32 to char…",null,null],[3,"ParseCharError","","An error which can be returned when parsing a char.",null,null],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from…",null,null],[3,"DecodeUtf16Error","","An error that can be returned when decoding UTF-16 code…",null,null],[3,"UnicodeVersion","","Represents a Unicode Version.",null,null],[12,"major","","Major version.",83,null],[12,"minor","","Minor version.",83,null],[12,"micro","","Micro (or Update) version.",83,null],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode…",null,null],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"EscapeDebug","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"ToLowercase","","Returns an iterator that yields the lowercase equivalent…",null,null],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent…",null,null],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,[[["u32"]],["char"]]],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,[[["u32"]],[["char"],["option",["char"]]]]],[5,"from_u32","","Converts a `u32` to a `char`.",null,[[["u32"]],[["char"],["option",["char"]]]]],[5,"decode_utf16","","Creates an iterator over the UTF-16 encoded code points in…",null,[[["intoiterator"]],["decodeutf16"]]],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",84,[[["self"]],["u16"]]],[17,"MAX","","The highest valid code point a `char` can have.",null,null],[17,"REPLACEMENT_CHARACTER","","`U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to…",null,null],[0,"ffi","core","Utilities related to FFI bindings.",null,null],[3,"VaListImpl","core::ffi","x86_64 ABI implementation of a `va_list`.",null,null],[3,"VaList","","A wrapper for a `va_list`",null,null],[4,"c_void","","Equivalent to C's `void` type when used as a [pointer].",null,null],[11,"as_va_list","","Convert a `VaListImpl` into a `VaList` that is…",85,[[["self"]],["valist"]]],[11,"arg","","Advance to the next arg.",85,[[["self"]],["vaargsafe"]]],[11,"with_copy","","Copies the `va_list` at the current location.",85,[[["self"],["f"]],["r"]]],[0,"iter","core","Composable external iteration.",null,null],[3,"Empty","core::iter","An iterator that yields nothing.",null,null],[3,"FromFn","","An iterator where each iteration calls the provided…",null,null],[3,"Once","","An iterator that yields an element exactly once.",null,null],[3,"OnceWith","","An iterator that yields a single element of type `A` by…",null,null],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[3,"RepeatWith","","An iterator that repeats elements of type `A` endlessly by…",null,null],[3,"Successors","","An new iterator where each successive item is computed…",null,null],[3,"Cloned","","An iterator that clones the elements of an underlying…",null,null],[3,"Copied","","An iterator that copies the elements of an underlying…",null,null],[3,"Flatten","","An iterator that flattens one level of nesting in an…",null,null],[3,"StepBy","","An iterator for stepping iterators by a custom amount.",null,null],[3,"Chain","","An iterator that links two iterators together, in a chain.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element…",null,null],[3,"Filter","","An iterator that filters the elements of `iter` with…",null,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements…",null,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[3,"Rev","","A double-ended iterator with the direction inverted.",null,null],[3,"Zip","","An iterator that iterates two other iterators…",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and…",null,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional…",null,null],[3,"Scan","","An iterator to maintain state while iterating another…",null,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate`…",null,null],[3,"Take","","An iterator that only iterates over the first `n`…",null,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate`…",null,null],[3,"Fuse","","An iterator that yields `None` forever after the…",null,null],[3,"Inspect","","An iterator that calls a function with a reference to each…",null,null],[5,"empty","","Creates an iterator that yields nothing.",null,[[],["empty"]]],[5,"from_fn","","Creates a new iterator where each iteration calls the…",null,[[["f"]],["fromfn"]]],[5,"once","","Creates an iterator that yields an element exactly once.",null,[[["t"]],["once"]]],[5,"once_with","","Creates an iterator that lazily generates a value exactly…",null,[[["fnonce"]],[["fnonce"],["oncewith"]]]],[5,"repeat","","Creates a new iterator that endlessly repeats a single…",null,[[["clone"]],[["clone"],["repeat"]]]],[5,"repeat_with","","Creates a new iterator that repeats elements of type `A`…",null,[[["fnmut"]],[["fnmut"],["repeatwith"]]]],[5,"successors","","Creates a new iterator where each successive item is…",null,[[["option"],["f"]],["successors"]]],[11,"peek","","Returns a reference to the next() value without advancing…",86,[[["self"]],["option"]]],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",87,null],[10,"next","","Advances the iterator and returns the next value.",87,[[["self"]],["option"]]],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",87,[[["self"]]]],[11,"count","","Consumes the iterator, counting the number of iterations…",87,[[],["usize"]]],[11,"last","","Consumes the iterator, returning the last element.",87,[[],["option"]]],[11,"nth","","Returns the `n`th element of the iterator.",87,[[["self"],["usize"]],["option"]]],[11,"step_by","","Creates an iterator starting at the same point, but…",87,[[["usize"]],["stepby"]]],[11,"chain","","Takes two iterators and creates a new iterator over both…",87,[[["u"]],["chain"]]],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",87,[[["u"]],["zip"]]],[11,"map","","Takes a closure and creates an iterator which calls that…",87,[[["f"]],["map"]]],[11,"for_each","","Calls a closure on each element of an iterator.",87,[[["f"]]]],[11,"filter","","Creates an iterator which uses a closure to determine if…",87,[[["p"]],["filter"]]],[11,"filter_map","","Creates an iterator that both filters and maps.",87,[[["f"]],["filtermap"]]],[11,"enumerate","","Creates an iterator which gives the current iteration…",87,[[],["enumerate"]]],[11,"peekable","","Creates an iterator which can use `peek` to look at the…",87,[[],["peekable"]]],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a…",87,[[["p"]],["skipwhile"]]],[11,"take_while","","Creates an iterator that yields elements based on a…",87,[[["p"]],["takewhile"]]],[11,"skip","","Creates an iterator that skips the first `n` elements.",87,[[["usize"]],["skip"]]],[11,"take","","Creates an iterator that yields its first `n` elements.",87,[[["usize"]],["take"]]],[11,"scan","","An iterator adaptor similar to [`fold`] that holds…",87,[[["f"],["st"]],["scan"]]],[11,"flat_map","","Creates an iterator that works like map, but flattens…",87,[[["f"]],["flatmap"]]],[11,"flatten","","Creates an iterator that flattens nested structure.",87,[[],["flatten"]]],[11,"fuse","","Creates an iterator which ends after the first [`None`].",87,[[],["fuse"]]],[11,"inspect","","Does something with each element of an iterator, passing…",87,[[["f"]],["inspect"]]],[11,"by_ref","","Borrows an iterator, rather than consuming it.",87,[[["self"]],["self"]]],[11,"collect","","Transforms an iterator into a collection.",87,[[],["fromiterator"]]],[11,"partition","","Consumes an iterator, creating two collections from it.",87,[[["f"]]]],[11,"partition_in_place","","Reorders the elements of this iterator in-place according…",87,[[["p"]],["usize"]]],[11,"is_partitioned","","Checks if the elements of this iterator are partitioned…",87,[[["p"]],["bool"]]],[11,"try_fold","","An iterator method that applies a function as long as it…",87,[[["self"],["b"],["f"]],["r"]]],[11,"try_for_each","","An iterator method that applies a fallible function to…",87,[[["self"],["f"]],["r"]]],[11,"fold","","An iterator method that applies a function, producing a…",87,[[["b"],["f"]],["b"]]],[11,"all","","Tests if every element of the iterator matches a predicate.",87,[[["self"],["f"]],["bool"]]],[11,"any","","Tests if any element of the iterator matches a predicate.",87,[[["self"],["f"]],["bool"]]],[11,"find","","Searches for an element of an iterator that satisfies a…",87,[[["self"],["p"]],["option"]]],[11,"find_map","","Applies function to the elements of iterator and returns…",87,[[["self"],["f"]],["option"]]],[11,"try_find","","Applies function to the elements of iterator and returns…",87,[[["self"],["f"]],[["result",["option"]],["option"]]]],[11,"position","","Searches for an element in an iterator, returning its index.",87,[[["self"],["p"]],[["usize"],["option",["usize"]]]]],[11,"rposition","","Searches for an element in an iterator from the right,…",87,[[["self"],["p"]],[["usize"],["option",["usize"]]]]],[11,"max","","Returns the maximum element of an iterator.",87,[[],["option"]]],[11,"min","","Returns the minimum element of an iterator.",87,[[],["option"]]],[11,"max_by_key","","Returns the element that gives the maximum value from the…",87,[[["f"]],["option"]]],[11,"max_by","","Returns the element that gives the maximum value with…",87,[[["f"]],["option"]]],[11,"min_by_key","","Returns the element that gives the minimum value from the…",87,[[["f"]],["option"]]],[11,"min_by","","Returns the element that gives the minimum value with…",87,[[["f"]],["option"]]],[11,"rev","","Reverses an iterator's direction.",87,[[],["rev"]]],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",87,[[]]],[11,"copied","","Creates an iterator which copies all of its elements.",87,[[],["copied"]]],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",87,[[],["cloned"]]],[11,"cycle","","Repeats an iterator endlessly.",87,[[],["cycle"]]],[11,"sum","","Sums the elements of an iterator.",87,[[],["s"]]],[11,"product","","Iterates over the entire iterator, multiplying all the…",87,[[],["p"]]],[11,"cmp","","Lexicographically compares the elements of this `Iterator`…",87,[[["i"]],["ordering"]]],[11,"cmp_by","","Lexicographically compares the elements of this `Iterator`…",87,[[["i"],["f"]],["ordering"]]],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator`…",87,[[["i"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp_by","","Lexicographically compares the elements of this `Iterator`…",87,[[["i"],["f"]],[["option",["ordering"]],["ordering"]]]],[11,"eq","","Determines if the elements of this `Iterator` are equal to…",87,[[["i"]],["bool"]]],[11,"eq_by","","Determines if the elements of this `Iterator` are equal to…",87,[[["i"],["f"]],["bool"]]],[11,"ne","","Determines if the elements of this `Iterator` are unequal…",87,[[["i"]],["bool"]]],[11,"lt","","Determines if the elements of this `Iterator` are…",87,[[["i"]],["bool"]]],[11,"le","","Determines if the elements of this `Iterator` are…",87,[[["i"]],["bool"]]],[11,"gt","","Determines if the elements of this `Iterator` are…",87,[[["i"]],["bool"]]],[11,"ge","","Determines if the elements of this `Iterator` are…",87,[[["i"]],["bool"]]],[11,"is_sorted","","Checks if the elements of this iterator are sorted.",87,[[],["bool"]]],[11,"is_sorted_by","","Checks if the elements of this iterator are sorted using…",87,[[["f"]],["bool"]]],[11,"is_sorted_by_key","","Checks if the elements of this iterator are sorted using…",87,[[["f"]],["bool"]]],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"steps_between","","Returns the number of steps between two step objects. The…",88,[[["self"]],[["usize"],["option",["usize"]]]]],[10,"replace_one","","Replaces this step with `1`, returning a clone of itself.",88,[[["self"]],["self"]]],[10,"replace_zero","","Replaces this step with `0`, returning a clone of itself.",88,[[["self"]],["self"]]],[10,"add_one","","Adds one to this step, returning the result.",88,[[["self"]],["self"]]],[10,"sub_one","","Subtracts one to this step, returning the result.",88,[[["self"]],["self"]]],[10,"add_usize","","Adds a `usize`, returning `None` on overflow.",88,[[["self"],["usize"]],["option"]]],[11,"sub_usize","","Subtracts a `usize`, returning `None` on underflow.",88,[[["self"],["usize"]],["option"]]],[8,"FusedIterator","","An iterator that always continues to yield `None` when…",null,null],[8,"TrustedLen","","An iterator that reports an accurate length using size_hint.",null,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","Removes and returns an element from the end of the iterator.",89,[[["self"]],["option"]]],[11,"nth_back","","Returns the `n`th element from the end of the iterator.",89,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","This is the reverse version of [`try_fold()`]: it takes…",89,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","An iterator method that reduces the iterator's elements to…",89,[[["b"],["f"]],["b"]]],[11,"rfind","","Searches for an element of an iterator from the back that…",89,[[["self"],["p"]],["option"]]],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",90,[[["self"],["intoiterator"]]]],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",91,[[["intoiterator"]],["self"]]],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",92,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",92,null],[10,"into_iter","","Creates an iterator from a value.",92,[[]]],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",93,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the iterator is empty.",93,[[["self"]],["bool"]]],[8,"Product","","Trait to represent types that can be created by…",null,null],[10,"product","","Method which takes an iterator and generates `Self` from…",94,[[["iterator"]],["self"]]],[8,"Sum","","Trait to represent types that can be created by summing up…",null,null],[10,"sum","","Method which takes an iterator and generates `Self` from…",95,[[["iterator"]],["self"]]],[0,"option","core","Optional values.",null,null],[3,"Iter","core::option","An iterator over a reference to the [`Some`] variant of an…",null,null],[3,"IterMut","","An iterator over a mutable reference to the [`Some`]…",null,null],[3,"IntoIter","","An iterator over the value in [`Some`] variant of an…",null,null],[3,"NoneError","","The error type that results from applying the try operator…",null,null],[4,"Option","","The `Option` type. See the module level documentation for…",null,null],[13,"None","","No value",96,null],[13,"Some","","Some value `T`",96,null],[11,"is_some","","Returns `true` if the option is a [`Some`] value.",96,[[["self"]],["bool"]]],[11,"is_none","","Returns `true` if the option is a [`None`] value.",96,[[["self"]],["bool"]]],[11,"contains","","Returns `true` if the option is a [`Some`] value…",96,[[["self"],["u"]],["bool"]]],[11,"as_ref","","Converts from `&Option<T>` to `Option<&T>`.",96,[[["self"]],[["t"],["option"]]]],[11,"as_mut","","Converts from `&mut Option<T>` to `Option<&mut T>`.",96,[[["self"]],[["option"],["t"]]]],[11,"as_pin_ref","","Converts from [`Pin`]`<&Option<T>>` to…",96,[[["self"],["pin"]],[["option",["pin"]],["pin"]]]],[11,"as_pin_mut","","Converts from [`Pin`]`<&mut Option<T>>` to…",96,[[["pin"],["self"]],[["option",["pin"]],["pin"]]]],[11,"expect","","Unwraps an option, yielding the content of a [`Some`].",96,[[["str"]],["t"]]],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is…",96,[[],["t"]]],[11,"unwrap_or","","Returns the contained value or a default.",96,[[["t"]],["t"]]],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",96,[[["fnonce"]],["t"]]],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function…",96,[[["fnonce"]],["option"]]],[11,"map_or","","Applies a function to the contained value (if any), or…",96,[[["u"],["fnonce"]],["u"]]],[11,"map_or_else","","Applies a function to the contained value (if any), or…",96,[[["fnonce"],["fnonce"]],["u"]]],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`],…",96,[[["e"]],["result"]]],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`],…",96,[[["fnonce"]],["result"]]],[11,"iter","","Returns an iterator over the possibly contained value.",96,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a mutable iterator over the possibly contained…",96,[[["self"]],["itermut"]]],[11,"and","","Returns [`None`] if the option is [`None`], otherwise…",96,[[["option"]],["option"]]],[11,"and_then","","Returns [`None`] if the option is [`None`], otherwise…",96,[[["fnonce"]],["option"]]],[11,"filter","","Returns [`None`] if the option is [`None`], otherwise…",96,[[["fnonce"]],["self"]]],[11,"or","","Returns the option if it contains a value, otherwise…",96,[[["option"]],["option"]]],[11,"or_else","","Returns the option if it contains a value, otherwise calls…",96,[[["fnonce"]],["option"]]],[11,"xor","","Returns [`Some`] if exactly one of `self`, `optb` is…",96,[[["option"]],["option"]]],[11,"get_or_insert","","Inserts `v` into the option if it is [`None`], then…",96,[[["self"],["t"]],["t"]]],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is…",96,[[["self"],["fnonce"]],["t"]]],[11,"take","","Takes the value out of the option, leaving a [`None`] in…",96,[[["self"]],["option"]]],[11,"replace","","Replaces the actual value in the option by the value given…",96,[[["self"],["t"]],["option"]]],[11,"copied","","Maps an `Option<&T>` to an `Option<T>` by copying the…",96,[[],["option"]]],[11,"copied","","Maps an `Option<&mut T>` to an `Option<T>` by copying the…",96,[[],["option"]]],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the…",96,[[],["option"]]],[11,"cloned","","Maps an `Option<&mut T>` to an `Option<T>` by cloning the…",96,[[],["option"]]],[11,"expect_none","","Unwraps an option, expecting [`None`] and returning nothing.",96,[[["str"]]]],[11,"unwrap_none","","Unwraps an option, expecting [`None`] and returning nothing.",96,[[]]],[11,"unwrap_or_default","","Returns the contained value or a default",96,[[],["t"]]],[11,"as_deref","","Converts from `Option<T>` (or `&Option<T>`) to…",96,[[["self"]],["option"]]],[11,"as_deref_mut","","Converts from `Option<T>` (or `&mut Option<T>`) to…",96,[[["self"]],["option"]]],[11,"transpose","","Transposes an `Option` of a [`Result`] into a [`Result`]…",96,[[],[["result",["option"]],["option"]]]],[11,"flatten","","Converts from `Option<Option<T>>` to `Option<T>`",96,[[],["option"]]],[0,"panic","core","Panic support in the standard library.",null,null],[3,"PanicInfo","core::panic","A struct providing information about a panic.",null,null],[3,"Location","","A struct containing information about the location of a…",null,null],[11,"payload","","Returns the payload associated with the panic.",97,[[["self"]],["any"]]],[11,"message","","If the `panic!` macro from the `core` crate (not from…",97,[[["self"]],[["option",["arguments"]],["arguments"]]]],[11,"location","","Returns information about the location from which the…",97,[[["self"]],[["option",["location"]],["location"]]]],[11,"caller","","Returns the source location of the caller of this…",98,[[],["location"]]],[11,"file","","Returns the name of the source file from which the panic…",98,[[["self"]],["str"]]],[11,"line","","Returns the line number from which the panic originated.",98,[[["self"]],["u32"]]],[11,"column","","Returns the column from which the panic originated.",98,[[["self"]],["u32"]]],[0,"panicking","core","Panic support for libcore",null,null],[5,"panic","core::panicking","",null,[[["str"]]]],[5,"panic_fmt","","",null,[[["arguments"],["location"]]]],[0,"pin","core","Types that pin data to its location in memory.",null,null],[3,"Pin","core::pin","A pinned pointer.",null,null],[11,"new","","Construct a new `Pin<P>` around a pointer to some data of…",99,[[["p"]],["pin"]]],[11,"into_inner","","Unwraps this `Pin<P>` returning the underlying pointer.",99,[[["pin"]],["p"]]],[11,"new_unchecked","","Construct a new `Pin<P>` around a reference to some data…",99,[[["p"]],["pin"]]],[11,"as_ref","","Gets a pinned shared reference from this pinned pointer.",99,[[["self"]],["pin"]]],[11,"into_inner_unchecked","","Unwraps this `Pin<P>` returning the underlying pointer.",99,[[["pin"]],["p"]]],[11,"as_mut","","Gets a pinned mutable reference from this pinned pointer.",99,[[["self"]],["pin"]]],[11,"set","","Assigns a new value to the memory behind the pinned…",99,[[["self"]]]],[11,"map_unchecked","","Constructs a new pin by mapping the interior value.",99,[[["f"]],[["u"],["pin"]]]],[11,"get_ref","","Gets a shared reference out of a pin.",99,[[],["t"]]],[11,"into_ref","","Converts this `Pin<&mut T>` into a `Pin<&T>` with the same…",99,[[],[["pin"],["t"]]]],[11,"get_mut","","Gets a mutable reference to the data inside of this `Pin`.",99,[[],["t"]]],[11,"get_unchecked_mut","","Gets a mutable reference to the data inside of this `Pin`.",99,[[],["t"]]],[11,"map_unchecked_mut","","Construct a new pin by mapping the interior value.",99,[[["f"]],[["pin"],["u"]]]],[0,"raw","core","Contains struct definitions for the layout of compiler…",null,null],[3,"TraitObject","core::raw","The representation of a trait object like `&SomeTrait`.",null,null],[12,"data","","",100,null],[12,"vtable","","",100,null],[0,"result","core","Error handling with the `Result` type.",null,null],[3,"Iter","core::result","An iterator over a reference to the [`Ok`] variant of a…",null,null],[3,"IterMut","","An iterator over a mutable reference to the [`Ok`] variant…",null,null],[3,"IntoIter","","An iterator over the value in a [`Ok`] variant of a…",null,null],[4,"Result","","`Result` is a type that represents either success ([`Ok`])…",null,null],[13,"Ok","","Contains the success value",101,null],[13,"Err","","Contains the error value",101,null],[11,"is_ok","","Returns `true` if the result is [`Ok`].",101,[[["self"]],["bool"]]],[11,"is_err","","Returns `true` if the result is [`Err`].",101,[[["self"]],["bool"]]],[11,"contains","","Returns `true` if the result is an [`Ok`] value containing…",101,[[["self"],["u"]],["bool"]]],[11,"contains_err","","Returns `true` if the result is an [`Err`] value…",101,[[["f"],["self"]],["bool"]]],[11,"ok","","Converts from `Result<T, E>` to [`Option<T>`].",101,[[],["option"]]],[11,"err","","Converts from `Result<T, E>` to [`Option<E>`].",101,[[],["option"]]],[11,"as_ref","","Converts from `&Result<T, E>` to `Result<&T, &E>`.",101,[[["self"]],[["result"],["t"],["e"]]]],[11,"as_mut","","Converts from `&mut Result<T, E>` to `Result<&mut T, &mut…",101,[[["self"]],[["e"],["t"],["result"]]]],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a…",101,[[["fnonce"]],["result"]]],[11,"map_or","","Applies a function to the contained value (if any), or…",101,[[["u"],["fnonce"]],["u"]]],[11,"map_or_else","","Maps a `Result<T, E>` to `U` by applying a function to a…",101,[[["fnonce"],["fnonce"]],["u"]]],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a…",101,[[["fnonce"]],["result"]]],[11,"iter","","Returns an iterator over the possibly contained value.",101,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a mutable iterator over the possibly contained…",101,[[["self"]],["itermut"]]],[11,"and","","Returns `res` if the result is [`Ok`], otherwise returns…",101,[[["result"]],["result"]]],[11,"and_then","","Calls `op` if the result is [`Ok`], otherwise returns the…",101,[[["fnonce"]],["result"]]],[11,"or","","Returns `res` if the result is [`Err`], otherwise returns…",101,[[["result"]],["result"]]],[11,"or_else","","Calls `op` if the result is [`Err`], otherwise returns the…",101,[[["fnonce"]],["result"]]],[11,"unwrap_or","","Unwraps a result, yielding the content of an [`Ok`]. Else,…",101,[[["t"]],["t"]]],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an [`Ok`]. If…",101,[[["fnonce"]],["t"]]],[11,"copied","","Maps a `Result<&T, E>` to a `Result<T, E>` by copying the…",101,[[],["result"]]],[11,"copied","","Maps a `Result<&mut T, E>` to a `Result<T, E>` by copying…",101,[[],["result"]]],[11,"cloned","","Maps a `Result<&T, E>` to a `Result<T, E>` by cloning the…",101,[[],["result"]]],[11,"cloned","","Maps a `Result<&mut T, E>` to a `Result<T, E>` by cloning…",101,[[],["result"]]],[11,"unwrap","","Unwraps a result, yielding the content of an [`Ok`].",101,[[],["t"]]],[11,"expect","","Unwraps a result, yielding the content of an [`Ok`].",101,[[["str"]],["t"]]],[11,"unwrap_err","","Unwraps a result, yielding the content of an [`Err`].",101,[[],["e"]]],[11,"expect_err","","Unwraps a result, yielding the content of an [`Err`].",101,[[["str"]],["e"]]],[11,"unwrap_or_default","","Returns the contained value or a default",101,[[],["t"]]],[11,"into_ok","","Unwraps a result that can never be an [`Err`], yielding…",101,[[],["t"]]],[11,"as_deref","","Converts from `Result<T, E>` (or `&Result<T, E>`) to…",101,[[["self"]],[["result"],["e"]]]],[11,"as_deref_err","","Converts from `Result<T, E>` (or `&Result<T, E>`) to…",101,[[["self"]],[["result"],["t"]]]],[11,"as_deref_mut","","Converts from `Result<T, E>` (or `&mut Result<T, E>`) to…",101,[[["self"]],[["result"],["e"]]]],[11,"as_deref_mut_err","","Converts from `Result<T, E>` (or `&mut Result<T, E>`) to…",101,[[["self"]],[["t"],["result"]]]],[11,"transpose","","Transposes a `Result` of an `Option` into an `Option` of a…",101,[[],[["option",["result"]],["result"]]]],[0,"sync","core","Synchronization primitives",null,null],[0,"atomic","core::sync","Atomic types",null,null],[3,"AtomicBool","core::sync::atomic","A boolean type which can be safely shared between threads.",null,null],[3,"AtomicPtr","","A raw pointer type which can be safely shared between…",null,null],[3,"AtomicI8","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicU8","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicI16","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicU16","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicI32","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicU32","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicI64","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicU64","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicIsize","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicUsize","","An integer type which can be safely shared between threads.",null,null],[4,"Ordering","","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations.",102,null],[13,"Release","","When coupled with a store, all previous operations become…",102,null],[13,"Acquire","","When coupled with a load, if the loaded value was written…",102,null],[13,"AcqRel","","Has the effects of both [`Acquire`] and [`Release`]…",102,null],[13,"SeqCst","","Like [`Acquire`]/[`Release`]/[`AcqRel`] (for load, store,…",102,null],[5,"spin_loop_hint","","Signals the processor that it is inside a busy-wait…",null,[[]]],[5,"fence","","An atomic fence.",null,[[["ordering"]]]],[5,"compiler_fence","","A compiler memory fence.",null,[[["ordering"]]]],[17,"ATOMIC_BOOL_INIT","","An [`AtomicBool`] initialized to `false`.",null,null],[17,"ATOMIC_I8_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_U8_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_I16_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_U16_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_I32_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_U32_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_I64_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_U64_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_ISIZE_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_USIZE_INIT","","An atomic integer initialized to `0`.",null,null],[11,"new","","Creates a new `AtomicBool`.",103,[[["bool"]],["atomicbool"]]],[11,"get_mut","","Returns a mutable reference to the underlying [`bool`].",103,[[["self"]],["bool"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",103,[[],["bool"]]],[11,"load","","Loads a value from the bool.",103,[[["ordering"],["self"]],["bool"]]],[11,"store","","Stores a value into the bool.",103,[[["ordering"],["self"],["bool"]]]],[11,"swap","","Stores a value into the bool, returning the previous value.",103,[[["ordering"],["self"],["bool"]],["bool"]]],[11,"compare_and_swap","","Stores a value into the [`bool`] if the current value is…",103,[[["ordering"],["self"],["bool"]],["bool"]]],[11,"compare_exchange","","Stores a value into the [`bool`] if the current value is…",103,[[["ordering"],["self"],["bool"]],[["result",["bool","bool"]],["bool"]]]],[11,"compare_exchange_weak","","Stores a value into the [`bool`] if the current value is…",103,[[["ordering"],["self"],["bool"]],[["result",["bool","bool"]],["bool"]]]],[11,"fetch_and","","Logical \"and\" with a boolean value.",103,[[["ordering"],["self"],["bool"]],["bool"]]],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",103,[[["ordering"],["self"],["bool"]],["bool"]]],[11,"fetch_or","","Logical \"or\" with a boolean value.",103,[[["ordering"],["self"],["bool"]],["bool"]]],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",103,[[["ordering"],["self"],["bool"]],["bool"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying [`bool`].",103,[[["self"]]]],[11,"new","","Creates a new `AtomicPtr`.",104,[[],["atomicptr"]]],[11,"get_mut","","Returns a mutable reference to the underlying pointer.",104,[[["self"]]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",104,[[]]],[11,"load","","Loads a value from the pointer.",104,[[["ordering"],["self"]]]],[11,"store","","Stores a value into the pointer.",104,[[["ordering"],["self"]]]],[11,"swap","","Stores a value into the pointer, returning the previous…",104,[[["ordering"],["self"]]]],[11,"compare_and_swap","","Stores a value into the pointer if the current value is…",104,[[["ordering"],["self"]]]],[11,"compare_exchange","","Stores a value into the pointer if the current value is…",104,[[["ordering"],["self"]],["result"]]],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is…",104,[[["ordering"],["self"]],["result"]]],[11,"new","","Creates a new atomic integer.",105,[[["i8"]],["self"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",105,[[["self"]],["i8"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",105,[[],["i8"]]],[11,"load","","Loads a value from the atomic integer.",105,[[["ordering"],["self"]],["i8"]]],[11,"store","","Stores a value into the atomic integer.",105,[[["ordering"],["i8"],["self"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",105,[[["ordering"],["i8"],["self"]],["i8"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",105,[[["ordering"],["i8"],["self"]],["i8"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",105,[[["ordering"],["i8"],["self"]],[["result",["i8","i8"]],["i8"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",105,[[["ordering"],["i8"],["self"]],[["result",["i8","i8"]],["i8"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",105,[[["ordering"],["i8"],["self"]],["i8"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",105,[[["ordering"],["i8"],["self"]],["i8"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",105,[[["ordering"],["i8"],["self"]],["i8"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",105,[[["ordering"],["i8"],["self"]],["i8"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",105,[[["ordering"],["i8"],["self"]],["i8"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",105,[[["ordering"],["i8"],["self"]],["i8"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",105,[[["ordering"],["self"],["f"]],[["result",["i8","i8"]],["i8"]]]],[11,"fetch_max","","Maximum with the current value.",105,[[["ordering"],["i8"],["self"]],["i8"]]],[11,"fetch_min","","Minimum with the current value.",105,[[["ordering"],["i8"],["self"]],["i8"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",105,[[["self"]]]],[11,"new","","Creates a new atomic integer.",106,[[["u8"]],["self"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",106,[[["self"]],["u8"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",106,[[],["u8"]]],[11,"load","","Loads a value from the atomic integer.",106,[[["ordering"],["self"]],["u8"]]],[11,"store","","Stores a value into the atomic integer.",106,[[["ordering"],["self"],["u8"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",106,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",106,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",106,[[["ordering"],["self"],["u8"]],[["result",["u8","u8"]],["u8"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",106,[[["ordering"],["self"],["u8"]],[["result",["u8","u8"]],["u8"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",106,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",106,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",106,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",106,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",106,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",106,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",106,[[["ordering"],["self"],["f"]],[["result",["u8","u8"]],["u8"]]]],[11,"fetch_max","","Maximum with the current value.",106,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"fetch_min","","Minimum with the current value.",106,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",106,[[["self"]]]],[11,"new","","Creates a new atomic integer.",107,[[["i16"]],["self"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",107,[[["self"]],["i16"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",107,[[],["i16"]]],[11,"load","","Loads a value from the atomic integer.",107,[[["ordering"],["self"]],["i16"]]],[11,"store","","Stores a value into the atomic integer.",107,[[["ordering"],["self"],["i16"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",107,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",107,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",107,[[["ordering"],["self"],["i16"]],[["result",["i16","i16"]],["i16"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",107,[[["ordering"],["self"],["i16"]],[["result",["i16","i16"]],["i16"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",107,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",107,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",107,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",107,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",107,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",107,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",107,[[["ordering"],["self"],["f"]],[["result",["i16","i16"]],["i16"]]]],[11,"fetch_max","","Maximum with the current value.",107,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"fetch_min","","Minimum with the current value.",107,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",107,[[["self"]]]],[11,"new","","Creates a new atomic integer.",108,[[["u16"]],["self"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",108,[[["self"]],["u16"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",108,[[],["u16"]]],[11,"load","","Loads a value from the atomic integer.",108,[[["ordering"],["self"]],["u16"]]],[11,"store","","Stores a value into the atomic integer.",108,[[["u16"],["ordering"],["self"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",108,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",108,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",108,[[["ordering"],["u16"],["self"]],[["u16"],["result",["u16","u16"]]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",108,[[["ordering"],["u16"],["self"]],[["u16"],["result",["u16","u16"]]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",108,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",108,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",108,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",108,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",108,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",108,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",108,[[["ordering"],["self"],["f"]],[["u16"],["result",["u16","u16"]]]]],[11,"fetch_max","","Maximum with the current value.",108,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"fetch_min","","Minimum with the current value.",108,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",108,[[["self"]]]],[11,"new","","Creates a new atomic integer.",109,[[["i32"]],["self"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",109,[[["self"]],["i32"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",109,[[],["i32"]]],[11,"load","","Loads a value from the atomic integer.",109,[[["ordering"],["self"]],["i32"]]],[11,"store","","Stores a value into the atomic integer.",109,[[["ordering"],["self"],["i32"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",109,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",109,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",109,[[["ordering"],["i32"],["self"]],[["result",["i32","i32"]],["i32"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",109,[[["ordering"],["i32"],["self"]],[["result",["i32","i32"]],["i32"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",109,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",109,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",109,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",109,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",109,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",109,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",109,[[["ordering"],["self"],["f"]],[["result",["i32","i32"]],["i32"]]]],[11,"fetch_max","","Maximum with the current value.",109,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"fetch_min","","Minimum with the current value.",109,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",109,[[["self"]]]],[11,"new","","Creates a new atomic integer.",110,[[["u32"]],["self"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",110,[[["self"]],["u32"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",110,[[],["u32"]]],[11,"load","","Loads a value from the atomic integer.",110,[[["ordering"],["self"]],["u32"]]],[11,"store","","Stores a value into the atomic integer.",110,[[["ordering"],["u32"],["self"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",110,[[["ordering"],["u32"],["self"]],["u32"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",110,[[["ordering"],["u32"],["self"]],["u32"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",110,[[["ordering"],["u32"],["self"]],[["result",["u32","u32"]],["u32"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",110,[[["ordering"],["u32"],["self"]],[["result",["u32","u32"]],["u32"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",110,[[["ordering"],["u32"],["self"]],["u32"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",110,[[["ordering"],["u32"],["self"]],["u32"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",110,[[["ordering"],["u32"],["self"]],["u32"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",110,[[["ordering"],["u32"],["self"]],["u32"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",110,[[["ordering"],["u32"],["self"]],["u32"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",110,[[["ordering"],["u32"],["self"]],["u32"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",110,[[["ordering"],["self"],["f"]],[["result",["u32","u32"]],["u32"]]]],[11,"fetch_max","","Maximum with the current value.",110,[[["ordering"],["u32"],["self"]],["u32"]]],[11,"fetch_min","","Minimum with the current value.",110,[[["ordering"],["u32"],["self"]],["u32"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",110,[[["self"]]]],[11,"new","","Creates a new atomic integer.",111,[[["i64"]],["self"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",111,[[["self"]],["i64"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",111,[[],["i64"]]],[11,"load","","Loads a value from the atomic integer.",111,[[["ordering"],["self"]],["i64"]]],[11,"store","","Stores a value into the atomic integer.",111,[[["i64"],["ordering"],["self"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",111,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",111,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",111,[[["i64"],["ordering"],["self"]],[["i64"],["result",["i64","i64"]]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",111,[[["i64"],["ordering"],["self"]],[["i64"],["result",["i64","i64"]]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",111,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",111,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",111,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",111,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",111,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",111,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",111,[[["ordering"],["self"],["f"]],[["i64"],["result",["i64","i64"]]]]],[11,"fetch_max","","Maximum with the current value.",111,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"fetch_min","","Minimum with the current value.",111,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",111,[[["self"]]]],[11,"new","","Creates a new atomic integer.",112,[[["u64"]],["self"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",112,[[["self"]],["u64"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",112,[[],["u64"]]],[11,"load","","Loads a value from the atomic integer.",112,[[["ordering"],["self"]],["u64"]]],[11,"store","","Stores a value into the atomic integer.",112,[[["ordering"],["self"],["u64"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",112,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",112,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",112,[[["ordering"],["self"],["u64"]],[["u64"],["result",["u64","u64"]]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",112,[[["ordering"],["self"],["u64"]],[["u64"],["result",["u64","u64"]]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",112,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",112,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",112,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",112,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",112,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",112,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",112,[[["ordering"],["self"],["f"]],[["u64"],["result",["u64","u64"]]]]],[11,"fetch_max","","Maximum with the current value.",112,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"fetch_min","","Minimum with the current value.",112,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",112,[[["self"]]]],[11,"new","","Creates a new atomic integer.",113,[[["isize"]],["self"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",113,[[["self"]],["isize"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",113,[[],["isize"]]],[11,"load","","Loads a value from the atomic integer.",113,[[["ordering"],["self"]],["isize"]]],[11,"store","","Stores a value into the atomic integer.",113,[[["isize"],["ordering"],["self"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",113,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",113,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",113,[[["ordering"],["isize"],["self"]],[["isize"],["result",["isize","isize"]]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",113,[[["ordering"],["isize"],["self"]],[["isize"],["result",["isize","isize"]]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",113,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",113,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",113,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",113,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",113,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",113,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",113,[[["ordering"],["self"],["f"]],[["isize"],["result",["isize","isize"]]]]],[11,"fetch_max","","Maximum with the current value.",113,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"fetch_min","","Minimum with the current value.",113,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",113,[[["self"]]]],[11,"new","","Creates a new atomic integer.",114,[[["usize"]],["self"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",114,[[["self"]],["usize"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",114,[[],["usize"]]],[11,"load","","Loads a value from the atomic integer.",114,[[["ordering"],["self"]],["usize"]]],[11,"store","","Stores a value into the atomic integer.",114,[[["ordering"],["self"],["usize"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",114,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",114,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",114,[[["ordering"],["usize"],["self"]],[["result",["usize","usize"]],["usize"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",114,[[["ordering"],["usize"],["self"]],[["result",["usize","usize"]],["usize"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",114,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",114,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",114,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",114,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",114,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",114,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",114,[[["ordering"],["self"],["f"]],[["result",["usize","usize"]],["usize"]]]],[11,"fetch_max","","Maximum with the current value.",114,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"fetch_min","","Minimum with the current value.",114,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",114,[[["self"]]]],[0,"fmt","core","Utilities for formatting and printing strings.",null,null],[3,"DebugList","core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"Error","","The error type which is returned from formatting a message…",null,null],[3,"Formatter","","Configuration for formatting.",null,null],[3,"Arguments","","This structure represents a safely precompiled version of…",null,null],[4,"Alignment","","Possible alignments returned by `Formatter::align`",null,null],[13,"Left","","Indication that contents should be left-aligned.",115,null],[13,"Right","","Indication that contents should be right-aligned.",115,null],[13,"Center","","Indication that contents should be center-aligned.",115,null],[5,"write","","The `write` function takes an output stream, and an…",null,[[["write"],["arguments"]],["result"]]],[11,"field","","Adds a new field to the generated struct output.",116,[[["str"],["self"],["debug"]],["self"]]],[11,"finish_non_exhaustive","","Marks the struct as non-exhaustive, indicating to the…",116,[[["self"]],["result"]]],[11,"finish","","Finishes output and returns any error encountered.",116,[[["self"]],["result"]]],[11,"field","","Adds a new field to the generated tuple struct output.",117,[[["self"],["debug"]],["self"]]],[11,"finish","","Finishes output and returns any error encountered.",117,[[["self"]],["result"]]],[11,"entry","","Adds a new entry to the set output.",118,[[["self"],["debug"]],["self"]]],[11,"entries","","Adds the contents of an iterator of entries to the set…",118,[[["self"],["i"]],["self"]]],[11,"finish","","Finishes output and returns any error encountered.",118,[[["self"]],["result"]]],[11,"entry","","Adds a new entry to the list output.",119,[[["self"],["debug"]],["self"]]],[11,"entries","","Adds the contents of an iterator of entries to the list…",119,[[["self"],["i"]],["self"]]],[11,"finish","","Finishes output and returns any error encountered.",119,[[["self"]],["result"]]],[11,"entry","","Adds a new entry to the map output.",120,[[["self"],["debug"]],["self"]]],[11,"key","","Adds the key part of a new entry to the map output.",120,[[["self"],["debug"]],["self"]]],[11,"value","","Adds the value part of a new entry to the map output.",120,[[["self"],["debug"]],["self"]]],[11,"entries","","Adds the contents of an iterator of entries to the map…",120,[[["self"],["i"]],["self"]]],[11,"finish","","Finishes output and returns any error encountered.",120,[[["self"]],["result"]]],[6,"Result","","The type returned by formatter methods.",null,null],[8,"Write","","A collection of methods that are required to format a…",null,null],[10,"write_str","","Writes a string slice into this writer, returning whether…",121,[[["str"],["self"]],["result"]]],[11,"write_char","","Writes a [`char`] into this writer, returning whether the…",121,[[["self"],["char"]],["result"]]],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors…",121,[[["self"],["arguments"]],["result"]]],[8,"Debug","","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",122,[[["self"],["formatter"]],["result"]]],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",123,[[["self"],["formatter"]],["result"]]],[8,"Octal","","`o` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",124,[[["self"],["formatter"]],["result"]]],[8,"Binary","","`b` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",125,[[["self"],["formatter"]],["result"]]],[8,"LowerHex","","`x` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",126,[[["self"],["formatter"]],["result"]]],[8,"UpperHex","","`X` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",127,[[["self"],["formatter"]],["result"]]],[8,"Pointer","","`p` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",128,[[["self"],["formatter"]],["result"]]],[8,"LowerExp","","`e` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",129,[[["self"],["formatter"]],["result"]]],[8,"UpperExp","","`E` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",130,[[["self"],["formatter"]],["result"]]],[11,"pad_integral","","Performs the correct padding for an integer which has…",131,[[["str"],["self"],["bool"]],["result"]]],[11,"pad","","This function takes a string slice and emits it to the…",131,[[["str"],["self"]],["result"]]],[11,"write_str","","Writes some data to the underlying buffer contained within…",131,[[["str"],["self"]],["result"]]],[11,"write_fmt","","Writes some formatted information into this instance.",131,[[["self"],["arguments"]],["result"]]],[11,"flags","","Flags for formatting",131,[[["self"]],["u32"]]],[11,"fill","","Character used as 'fill' whenever there is alignment.",131,[[["self"]],["char"]]],[11,"align","","Flag indicating what form of alignment was requested.",131,[[["self"]],[["alignment"],["option",["alignment"]]]]],[11,"width","","Optionally specified integer width that the output should…",131,[[["self"]],[["usize"],["option",["usize"]]]]],[11,"precision","","Optionally specified precision for numeric types.",131,[[["self"]],[["usize"],["option",["usize"]]]]],[11,"sign_plus","","Determines if the `+` flag was specified.",131,[[["self"]],["bool"]]],[11,"sign_minus","","Determines if the `-` flag was specified.",131,[[["self"]],["bool"]]],[11,"alternate","","Determines if the `#` flag was specified.",131,[[["self"]],["bool"]]],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",131,[[["self"]],["bool"]]],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with…",131,[[["self"],["str"]],["debugstruct"]]],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with…",131,[[["self"],["str"]],["debugtuple"]]],[11,"debug_list","","Creates a `DebugList` builder designed to assist with…",131,[[["self"]],["debuglist"]]],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with…",131,[[["self"]],["debugset"]]],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with…",131,[[["self"]],["debugmap"]]],[14,"Debug","","Derive macro generating an impl of the trait `Debug`.",null,null],[0,"hash","core","Generic hashing support.",null,null],[3,"SipHasher","core::hash","An implementation of SipHash 2-4.",null,null],[3,"BuildHasherDefault","","Used to create a default [`BuildHasher`] instance for…",null,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to…",132,[[],["siphasher"]]],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",132,[[["u64"]],["siphasher"]]],[8,"Hash","","A hashable type.",null,null],[10,"hash","","Feeds this value into the given [`Hasher`].",133,[[["self"],["h"]]]],[11,"hash_slice","","Feeds a slice of this type into the given [`Hasher`].",133,[[["h"]]]],[8,"Hasher","","A trait for hashing an arbitrary stream of bytes.",null,null],[10,"finish","","Returns the hash value for the values written so far.",134,[[["self"]],["u64"]]],[10,"write","","Writes some data into this `Hasher`.",134,[[["self"]]]],[11,"write_u8","","Writes a single `u8` into this hasher.",134,[[["self"],["u8"]]]],[11,"write_u16","","Writes a single `u16` into this hasher.",134,[[["u16"],["self"]]]],[11,"write_u32","","Writes a single `u32` into this hasher.",134,[[["self"],["u32"]]]],[11,"write_u64","","Writes a single `u64` into this hasher.",134,[[["self"],["u64"]]]],[11,"write_u128","","Writes a single `u128` into this hasher.",134,[[["self"],["u128"]]]],[11,"write_usize","","Writes a single `usize` into this hasher.",134,[[["self"],["usize"]]]],[11,"write_i8","","Writes a single `i8` into this hasher.",134,[[["self"],["i8"]]]],[11,"write_i16","","Writes a single `i16` into this hasher.",134,[[["self"],["i16"]]]],[11,"write_i32","","Writes a single `i32` into this hasher.",134,[[["self"],["i32"]]]],[11,"write_i64","","Writes a single `i64` into this hasher.",134,[[["i64"],["self"]]]],[11,"write_i128","","Writes a single `i128` into this hasher.",134,[[["self"],["i128"]]]],[11,"write_isize","","Writes a single `isize` into this hasher.",134,[[["isize"],["self"]]]],[8,"BuildHasher","","A trait for creating instances of [`Hasher`].",null,null],[16,"Hasher","","Type of the hasher that will be created.",135,null],[10,"build_hasher","","Creates a new hasher.",135,[[["self"]]]],[14,"Hash","","Derive macro generating an impl of the trait `Hash`.",null,null],[0,"slice","core","Slice management and manipulation.",null,null],[3,"Iter","core::slice","Immutable slice iterator",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"Split","","An iterator over subslices separated by elements that…",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are…",null,null],[3,"RSplit","","An iterator over subslices separated by elements that…",null,null],[3,"RSplitMut","","An iterator over the subslices of the vector which are…",null,null],[3,"SplitN","","An iterator over subslices separated by elements that…",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that…",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that…",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that…",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks…",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable…",null,null],[3,"ChunksExact","","An iterator over a slice in (non-overlapping) chunks…",null,null],[3,"ChunksExactMut","","An iterator over a slice in (non-overlapping) mutable…",null,null],[3,"RChunks","","An iterator over a slice in (non-overlapping) chunks…",null,null],[3,"RChunksMut","","An iterator over a slice in (non-overlapping) mutable…",null,null],[3,"RChunksExact","","An iterator over a slice in (non-overlapping) chunks…",null,null],[3,"RChunksExactMut","","An iterator over a slice in (non-overlapping) mutable…",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,[[["usize"]]]],[5,"from_raw_parts_mut","","Performs the same functionality as [`from_raw_parts`],…",null,[[["usize"]]]],[5,"from_ref","","Converts a reference to T into a slice of length 1…",null,[[["t"]]]],[5,"from_mut","","Converts a reference to T into a slice of length 1…",null,[[["t"]]]],[0,"memchr","","Pure rust memchr implementation, taken from rust-memchr",null,null],[5,"memchr","core::slice::memchr","Returns the first index matching the byte `x` in `text`.",null,[[["u8"]],[["usize"],["option",["usize"]]]]],[5,"memrchr","","Returns the last index matching the byte `x` in `text`.",null,[[["u8"]],[["usize"],["option",["usize"]]]]],[8,"SliceIndex","core::slice","A helper trait used for indexing operations.",null,null],[16,"Output","","The output type returned by methods.",136,null],[10,"get","","Returns a shared reference to the output at this location,…",136,[[["t"]],["option"]]],[10,"get_mut","","Returns a mutable reference to the output at this…",136,[[["t"]],["option"]]],[10,"get_unchecked","","Returns a shared reference to the output at this location,…",136,[[["t"]]]],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this…",136,[[["t"]]]],[10,"index","","Returns a shared reference to the output at this location,…",136,[[["t"]]]],[10,"index_mut","","Returns a mutable reference to the output at this…",136,[[["t"]]]],[11,"as_slice","","Views the underlying data as a subslice of the original…",137,[[["self"]]]],[11,"into_slice","","Views the underlying data as a subslice of the original…",138,[[]]],[11,"as_slice","","Views the underlying data as a subslice of the original…",138,[[["self"]]]],[11,"remainder","","Returns the remainder of the original slice that is not…",139,[[["self"]]]],[11,"into_remainder","","Returns the remainder of the original slice that is not…",140,[[]]],[11,"remainder","","Returns the remainder of the original slice that is not…",141,[[["self"]]]],[11,"into_remainder","","Returns the remainder of the original slice that is not…",142,[[]]],[0,"str","core","String manipulation.",null,null],[3,"ParseBoolError","core::str","An error returned when parsing a `bool` using [`from_str`]…",null,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a…",null,null],[3,"Chars","","An iterator over the [`char`]s of a string slice.",null,null],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and…",null,null],[3,"Bytes","","An iterator over the bytes of a string slice.",null,null],[3,"Split","","Created with the method [`split`].",null,null],[3,"RSplit","","Created with the method [`rsplit`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",null,null],[3,"SplitN","","Created with the method [`splitn`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",null,null],[3,"Matches","","Created with the method [`matches`].",null,null],[3,"RMatches","","Created with the method [`rmatches`].",null,null],[3,"Lines","","An iterator over the lines of a string, as string slices.",null,null],[3,"LinesAny","","Created with the method [`lines_any`].",null,null],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a…",null,null],[3,"SplitAsciiWhitespace","","An iterator over the non-ASCII-whitespace substrings of a…",null,null],[3,"EncodeUtf16","","An iterator of [`u16`] over the string encoded as UTF-16.",null,null],[3,"EscapeDebug","","The return type of [`str::escape_debug`].",null,null],[3,"EscapeDefault","","The return type of [`str::escape_default`].",null,null],[3,"EscapeUnicode","","The return type of [`str::escape_unicode`].",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,[[],[["result",["str","utf8error"]],["str"],["utf8error"]]]],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",null,[[],[["str"],["result",["str","utf8error"]],["utf8error"]]]],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without…",null,[[],["str"]]],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without…",null,[[],["str"]]],[5,"next_code_point","","Reads the next code point out of a byte iterator (assuming…",null,[[["i"]],[["u32"],["option",["u32"]]]]],[5,"utf8_char_width","","Given a first byte, determines how many bytes are in this…",null,[[["u8"]],["usize"]]],[0,"pattern","","The string Pattern API.",null,null],[3,"CharSearcher","core::str::pattern","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[4,"SearchStep","","Result of calling `Searcher::next()` or…",null,null],[13,"Match","","Expresses that a match of the pattern has been found at…",143,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a…",143,null],[13,"Done","","Expresses that every byte of the haystack has been…",143,null],[8,"Pattern","","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",144,null],[10,"into_searcher","","Constructs the associated searcher from `self` and the…",144,[[["str"]]]],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",144,[[["str"]],["bool"]]],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the…",144,[[["str"]],["bool"]]],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the…",144,[[["str"]],["bool"]]],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlying string to be searched in",145,[[["self"]],["str"]]],[10,"next","","Performs the next search step starting from the front.",145,[[["self"]],["searchstep"]]],[11,"next_match","","Finds the next `Match` result. See `next()`",145,[[["self"]],["option"]]],[11,"next_reject","","Finds the next `Reject` result. See `next()` and…",145,[[["self"]],["option"]]],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",146,[[["self"]],["searchstep"]]],[11,"next_match_back","","Finds the next `Match` result. See `next_back()`",146,[[["self"]],["option"]]],[11,"next_reject_back","","Finds the next `Reject` result. See `next_back()`",146,[[["self"]],["option"]]],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be…",null,null],[0,"lossy","core::str","",null,null],[3,"Utf8Lossy","core::str::lossy","Lossy UTF-8 string.",null,null],[3,"Utf8LossyChunksIter","","Iterator over lossy UTF-8 string",null,null],[3,"Utf8LossyChunk","","",null,null],[12,"valid","","Sequence of valid chars. Can be empty between broken UTF-8…",147,null],[12,"broken","","Single broken char, empty if none. Empty iff iterator item…",147,null],[11,"from_str","","",148,[[["str"]],["utf8lossy"]]],[11,"from_bytes","","",148,[[],["utf8lossy"]]],[11,"chunks","","",148,[[["self"]],["utf8lossychunksiter"]]],[8,"FromStr","core::str","Parse a value from a string",null,null],[16,"Err","","The associated error which can be returned from parsing.",149,null],[10,"from_str","","Parses a string `s` to return a value of this type.",149,[[["str"]],["result"]]],[11,"valid_up_to","","Returns the index in the given string up to which valid…",150,[[["self"]],["usize"]]],[11,"error_len","","Provides more information about the failure:",150,[[["self"]],[["usize"],["option",["usize"]]]]],[11,"as_str","","Views the underlying data as a subslice of the original…",151,[[["self"]],["str"]]],[11,"as_str","","Views the underlying data as a subslice of the original…",152,[[["self"]],["str"]]],[0,"time","core","Temporal quantification.",null,null],[3,"Duration","core::time","A `Duration` type to represent a span of time, typically…",null,null],[18,"SECOND","","The duration of one second.",153,null],[18,"MILLISECOND","","The duration of one millisecond.",153,null],[18,"MICROSECOND","","The duration of one microsecond.",153,null],[18,"NANOSECOND","","The duration of one nanosecond.",153,null],[11,"new","","Creates a new `Duration` from the specified number of…",153,[[["u32"],["u64"]],["duration"]]],[11,"from_secs","","Creates a new `Duration` from the specified number of…",153,[[["u64"]],["duration"]]],[11,"from_millis","","Creates a new `Duration` from the specified number of…",153,[[["u64"]],["duration"]]],[11,"from_micros","","Creates a new `Duration` from the specified number of…",153,[[["u64"]],["duration"]]],[11,"from_nanos","","Creates a new `Duration` from the specified number of…",153,[[["u64"]],["duration"]]],[11,"as_secs","","Returns the number of whole seconds contained by this…",153,[[["self"]],["u64"]]],[11,"subsec_millis","","Returns the fractional part of this `Duration`, in whole…",153,[[["self"]],["u32"]]],[11,"subsec_micros","","Returns the fractional part of this `Duration`, in whole…",153,[[["self"]],["u32"]]],[11,"subsec_nanos","","Returns the fractional part of this `Duration`, in…",153,[[["self"]],["u32"]]],[11,"as_millis","","Returns the total number of whole milliseconds contained…",153,[[["self"]],["u128"]]],[11,"as_micros","","Returns the total number of whole microseconds contained…",153,[[["self"]],["u128"]]],[11,"as_nanos","","Returns the total number of nanoseconds contained by this…",153,[[["self"]],["u128"]]],[11,"checked_add","","Checked `Duration` addition. Computes `self + other`,…",153,[[["duration"]],[["duration"],["option",["duration"]]]]],[11,"checked_sub","","Checked `Duration` subtraction. Computes `self - other`,…",153,[[["duration"]],[["duration"],["option",["duration"]]]]],[11,"checked_mul","","Checked `Duration` multiplication. Computes `self *…",153,[[["u32"]],[["duration"],["option",["duration"]]]]],[11,"checked_div","","Checked `Duration` division. Computes `self / other`,…",153,[[["u32"]],[["duration"],["option",["duration"]]]]],[11,"as_secs_f64","","Returns the number of seconds contained by this `Duration`…",153,[[["self"]],["f64"]]],[11,"as_secs_f32","","Returns the number of seconds contained by this `Duration`…",153,[[["self"]],["f32"]]],[11,"from_secs_f64","","Creates a new `Duration` from the specified number of…",153,[[["f64"]],["duration"]]],[11,"from_secs_f32","","Creates a new `Duration` from the specified number of…",153,[[["f32"]],["duration"]]],[11,"mul_f64","","Multiplies `Duration` by `f64`.",153,[[["f64"]],["duration"]]],[11,"mul_f32","","Multiplies `Duration` by `f32`.",153,[[["f32"]],["duration"]]],[11,"div_f64","","Divide `Duration` by `f64`.",153,[[["f64"]],["duration"]]],[11,"div_f32","","Divide `Duration` by `f32`.",153,[[["f32"]],["duration"]]],[11,"div_duration_f64","","Divide `Duration` by `Duration` and return `f64`.",153,[[["duration"]],["f64"]]],[11,"div_duration_f32","","Divide `Duration` by `Duration` and return `f32`.",153,[[["duration"]],["f32"]]],[0,"unicode","core","",null,null],[5,"Alphabetic","core::unicode","",null,[[["char"]],["bool"]]],[5,"Case_Ignorable","","",null,[[["char"]],["bool"]]],[5,"Cased","","",null,[[["char"]],["bool"]]],[5,"Cc","","",null,[[["char"]],["bool"]]],[5,"Grapheme_Extend","","",null,[[["char"]],["bool"]]],[5,"Lowercase","","",null,[[["char"]],["bool"]]],[5,"N","","",null,[[["char"]],["bool"]]],[5,"Uppercase","","",null,[[["char"]],["bool"]]],[5,"White_Space","","",null,[[["char"]],["bool"]]],[0,"derived_property","","",null,null],[5,"Case_Ignorable","core::unicode::derived_property","",null,[[["char"]],["bool"]]],[5,"Cased","","",null,[[["char"]],["bool"]]],[0,"conversions","core::unicode","",null,null],[5,"to_lower","core::unicode::conversions","",null,[[["char"]]]],[5,"to_upper","","",null,[[["char"]]]],[17,"UNICODE_VERSION","core::unicode","The version of Unicode that the Unicode parts of `char`…",null,null],[0,"future","core","Asynchronous values.",null,null],[8,"Future","core::future","A future represents an asynchronous computation.",null,null],[16,"Output","","The type of value produced on completion.",154,null],[10,"poll","","Attempt to resolve the future to a final value,…",154,[[["pin"],["self"],["context"]],["poll"]]],[0,"task","core","Types and Traits for working with asynchronous tasks.",null,null],[3,"Context","core::task","The `Context` of an asynchronous task.",null,null],[3,"RawWaker","","A `RawWaker` allows the implementor of a task executor to…",null,null],[3,"RawWakerVTable","","A virtual function pointer table (vtable) that specifies…",null,null],[3,"Waker","","A `Waker` is a handle for waking up a task by notifying…",null,null],[4,"Poll","","Indicates whether a value is available or if the current…",null,null],[13,"Ready","","Represents that a value is immediately ready.",155,null],[13,"Pending","","Represents that a value is not ready yet.",155,null],[11,"map","","Changes the ready value of this `Poll` with the closure…",155,[[["f"]],["poll"]]],[11,"is_ready","","Returns `true` if this is `Poll::Ready`",155,[[["self"]],["bool"]]],[11,"is_pending","","Returns `true` if this is `Poll::Pending`",155,[[["self"]],["bool"]]],[11,"map_ok","","Changes the success value of this `Poll` with the closure…",155,[[["f"]],[["poll",["result"]],["result"]]]],[11,"map_err","","Changes the error value of this `Poll` with the closure…",155,[[["f"]],[["poll",["result"]],["result"]]]],[11,"map_ok","","Changes the success value of this `Poll` with the closure…",155,[[["f"]],[["poll",["option"]],["option",["result"]]]]],[11,"map_err","","Changes the error value of this `Poll` with the closure…",155,[[["f"]],[["poll",["option"]],["option",["result"]]]]],[11,"new","","Creates a new `RawWaker` from the provided `data` pointer…",156,[[["rawwakervtable"]],["rawwaker"]]],[11,"new","","Creates a new `RawWakerVTable` from the provided `clone`,…",157,[[],["self"]]],[11,"from_waker","","Create a new `Context` from a `&Waker`.",158,[[["waker"]],["self"]]],[11,"waker","","Returns a reference to the `Waker` for the current task.",158,[[["self"]],["waker"]]],[11,"wake","","Wake up the task associated with this `Waker`.",159,[[]]],[11,"wake_by_ref","","Wake up the task associated with this `Waker` without…",159,[[["self"]]]],[11,"will_wake","","Returns `true` if this `Waker` and another `Waker` have…",159,[[["waker"],["self"]],["bool"]]],[11,"from_raw","","Creates a new `Waker` from [`RawWaker`].",159,[[["rawwaker"]],["waker"]]],[0,"alloc","core","Memory allocation APIs",null,null],[3,"Excess","core::alloc","Represents the combination of a starting address and a…",null,null],[12,"0","","",160,null],[12,"1","","",160,null],[3,"Layout","","Layout of a block of memory.",null,null],[3,"LayoutErr","","The parameters given to `Layout::from_size_align` or some…",null,null],[3,"AllocErr","","The `AllocErr` error indicates an allocation failure that…",null,null],[3,"CannotReallocInPlace","","The `CannotReallocInPlace` error is used when…",null,null],[8,"GlobalAlloc","","A memory allocator that can be registered as the standard…",null,null],[10,"alloc","","Allocate memory as described by the given `layout`.",161,[[["layout"],["self"]]]],[10,"dealloc","","Deallocate the block of memory at the given `ptr` pointer…",161,[[["layout"],["self"]]]],[11,"alloc_zeroed","","Behaves like `alloc`, but also ensures that the contents…",161,[[["layout"],["self"]]]],[11,"realloc","","Shrink or grow a block of memory to the given `new_size`.…",161,[[["usize"],["layout"],["self"]]]],[8,"Alloc","","An implementation of `Alloc` can allocate, reallocate, and…",null,null],[10,"alloc","","Returns a pointer meeting the size and alignment…",162,[[["layout"],["self"]],[["nonnull",["u8"]],["allocerr"],["result",["nonnull","allocerr"]]]]],[10,"dealloc","","Deallocate the memory referenced by `ptr`.",162,[[["nonnull",["u8"]],["self"],["layout"],["u8"]]]],[11,"usable_size","","Returns bounds on the guaranteed usable size of a…",162,[[["self"],["layout"]]]],[11,"realloc","","Returns a pointer suitable for holding data described by a…",162,[[["usize"],["nonnull",["u8"]],["self"],["layout"],["u8"]],[["nonnull",["u8"]],["allocerr"],["result",["nonnull","allocerr"]]]]],[11,"alloc_zeroed","","Behaves like `alloc`, but also ensures that the contents…",162,[[["layout"],["self"]],[["nonnull",["u8"]],["allocerr"],["result",["nonnull","allocerr"]]]]],[11,"alloc_excess","","Behaves like `alloc`, but also returns the whole size of…",162,[[["layout"],["self"]],[["allocerr"],["excess"],["result",["excess","allocerr"]]]]],[11,"realloc_excess","","Behaves like `realloc`, but also returns the whole size of…",162,[[["usize"],["nonnull",["u8"]],["self"],["layout"],["u8"]],[["allocerr"],["excess"],["result",["excess","allocerr"]]]]],[11,"grow_in_place","","Attempts to extend the allocation referenced by `ptr` to…",162,[[["usize"],["nonnull",["u8"]],["self"],["layout"],["u8"]],[["result",["cannotreallocinplace"]],["cannotreallocinplace"]]]],[11,"shrink_in_place","","Attempts to shrink the allocation referenced by `ptr` to…",162,[[["usize"],["nonnull",["u8"]],["self"],["layout"],["u8"]],[["result",["cannotreallocinplace"]],["cannotreallocinplace"]]]],[11,"alloc_one","","Allocates a block suitable for holding an instance of `T`.",162,[[["self"]],[["nonnull"],["allocerr"],["result",["nonnull","allocerr"]]]]],[11,"dealloc_one","","Deallocates a block suitable for holding an instance of `T`.",162,[[["self"],["nonnull"]]]],[11,"alloc_array","","Allocates a block suitable for holding `n` instances of `T`.",162,[[["self"],["usize"]],[["nonnull"],["allocerr"],["result",["nonnull","allocerr"]]]]],[11,"realloc_array","","Reallocates a block previously suitable for holding…",162,[[["usize"],["nonnull"],["self"]],[["nonnull"],["allocerr"],["result",["nonnull","allocerr"]]]]],[11,"dealloc_array","","Deallocates a block suitable for holding `n` instances of…",162,[[["self"],["usize"],["nonnull"]],[["allocerr"],["result",["allocerr"]]]]],[11,"from_size_align","","Constructs a `Layout` from a given `size` and `align`, or…",163,[[["usize"]],[["result",["layouterr"]],["layouterr"]]]],[11,"from_size_align_unchecked","","Creates a layout, bypassing all checks.",163,[[["usize"]],["self"]]],[11,"size","","The minimum size in bytes for a memory block of this layout.",163,[[["self"]],["usize"]]],[11,"align","","The minimum byte alignment for a memory block of this…",163,[[["self"]],["usize"]]],[11,"new","","Constructs a `Layout` suitable for holding a value of type…",163,[[],["self"]]],[11,"for_value","","Produces layout describing a record that could be used to…",163,[[["t"]],["self"]]],[11,"align_to","","Creates a layout describing the record that can hold a…",163,[[["self"],["usize"]],[["result",["layouterr"]],["layouterr"]]]],[11,"padding_needed_for","","Returns the amount of padding we must insert after `self`…",163,[[["self"],["usize"]],["usize"]]],[11,"pad_to_align","","Creates a layout by rounding the size of this layout up to…",163,[[["self"]],["layout"]]],[11,"repeat","","Creates a layout describing the record for `n` instances…",163,[[["self"],["usize"]],[["result",["layouterr"]],["layouterr"]]]],[11,"extend","","Creates a layout describing the record for `self` followed…",163,[[["self"]],[["result",["layouterr"]],["layouterr"]]]],[11,"repeat_packed","","Creates a layout describing the record for `n` instances…",163,[[["self"],["usize"]],[["result",["layouterr"]],["layouterr"]]]],[11,"extend_packed","","Creates a layout describing the record for `self` followed…",163,[[["self"]],[["result",["layouterr"]],["layouterr"]]]],[11,"array","","Creates a layout describing the record for a `[T; n]`.",163,[[["usize"]],[["result",["layouterr"]],["layouterr"]]]],[11,"description","","",164,[[["self"]],["str"]]],[0,"arch","core","SIMD and vendor intrinsics module.",null,null],[0,"x86","core::arch","Platform-specific intrinsics for the `x86` platform.",null,null],[3,"__m64","core::arch::x86","64-bit wide integer vector type, x86-specific",null,null],[3,"__m128i","","128-bit wide integer vector type, x86-specific",null,null],[3,"__m128","","128-bit wide set of four `f32` types, x86-specific",null,null],[3,"__m128d","","128-bit wide set of two `f64` types, x86-specific",null,null],[3,"__m256i","","256-bit wide integer vector type, x86-specific",null,null],[3,"__m256","","256-bit wide set of eight `f32` types, x86-specific",null,null],[3,"__m256d","","256-bit wide set of four `f64` types, x86-specific",null,null],[3,"__m512i","","512-bit wide integer vector type, x86-specific",null,null],[3,"__m512","","512-bit wide set of sixteen `f32` types, x86-specific",null,null],[3,"__m512d","","512-bit wide set of eight `f64` types, x86-specific",null,null],[3,"CpuidResult","","Result of the `cpuid` instruction.",null,null],[12,"eax","","EAX register.",165,null],[12,"ebx","","EBX register.",165,null],[12,"ecx","","ECX register.",165,null],[12,"edx","","EDX register.",165,null],[5,"_fxsave","","Saves the `x87` FPU, `MMX` technology, `XMM`, and `MXCSR`…",null,[[]]],[5,"_fxrstor","","Restores the `XMM`, `MMX`, `MXCSR`, and `x87` FPU…",null,[[]]],[5,"_bswap","","Returns an integer with the reversed byte order of x",null,[[["i32"]],["i32"]]],[5,"_rdtsc","","Reads the current value of the processor’s time-stamp…",null,[[],["u64"]]],[5,"__rdtscp","","Reads the current value of the processor’s time-stamp…",null,[[],["u64"]]],[5,"__cpuid_count","","Returns the result of the `cpuid` instruction for a given…",null,[[["u32"]],["cpuidresult"]]],[5,"__cpuid","","See `__cpuid_count`.",null,[[["u32"]],["cpuidresult"]]],[5,"has_cpuid","","Does the host support the `cpuid` instruction?",null,[[],["bool"]]],[5,"__get_cpuid_max","","Returns the highest-supported `leaf` (`EAX`) and sub-leaf…",null,[[["u32"]]]],[5,"_xsave","","Performs a full or partial save of the enabled processor…",null,[[["u64"]]]],[5,"_xrstor","","Performs a full or partial restore of the enabled…",null,[[["u64"]]]],[5,"_xsetbv","","Copies 64-bits from `val` to the extended control register…",null,[[["u32"],["u64"]]]],[5,"_xgetbv","","Reads the contents of the extended control register `XCR`…",null,[[["u32"]],["u64"]]],[5,"_xsaveopt","","Performs a full or partial save of the enabled processor…",null,[[["u64"]]]],[5,"_xsavec","","Performs a full or partial save of the enabled processor…",null,[[["u64"]]]],[5,"_xsaves","","Performs a full or partial save of the enabled processor…",null,[[["u64"]]]],[5,"_xrstors","","Performs a full or partial restore of the enabled…",null,[[["u64"]]]],[5,"_mm_add_ss","","Adds the first component of `a` and `b`, the other…",null,[[["__m128"]],["__m128"]]],[5,"_mm_add_ps","","Adds __m128 vectors.",null,[[["__m128"]],["__m128"]]],[5,"_mm_sub_ss","","Subtracts the first component of `b` from `a`, the other…",null,[[["__m128"]],["__m128"]]],[5,"_mm_sub_ps","","Subtracts __m128 vectors.",null,[[["__m128"]],["__m128"]]],[5,"_mm_mul_ss","","Multiplies the first component of `a` and `b`, the other…",null,[[["__m128"]],["__m128"]]],[5,"_mm_mul_ps","","Multiplies __m128 vectors.",null,[[["__m128"]],["__m128"]]],[5,"_mm_div_ss","","Divides the first component of `b` by `a`, the other…",null,[[["__m128"]],["__m128"]]],[5,"_mm_div_ps","","Divides __m128 vectors.",null,[[["__m128"]],["__m128"]]],[5,"_mm_sqrt_ss","","Returns the square root of the first single-precision…",null,[[["__m128"]],["__m128"]]],[5,"_mm_sqrt_ps","","Returns the square root of packed single-precision…",null,[[["__m128"]],["__m128"]]],[5,"_mm_rcp_ss","","Returns the approximate reciprocal of the first…",null,[[["__m128"]],["__m128"]]],[5,"_mm_rcp_ps","","Returns the approximate reciprocal of packed…",null,[[["__m128"]],["__m128"]]],[5,"_mm_rsqrt_ss","","Returns the approximate reciprocal square root of the fist…",null,[[["__m128"]],["__m128"]]],[5,"_mm_rsqrt_ps","","Returns the approximate reciprocal square root of packed…",null,[[["__m128"]],["__m128"]]],[5,"_mm_min_ss","","Compares the first single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_min_ps","","Compares packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm_max_ss","","Compares the first single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_max_ps","","Compares packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm_and_ps","","Bitwise AND of packed single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_andnot_ps","","Bitwise AND-NOT of packed single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_or_ps","","Bitwise OR of packed single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_xor_ps","","Bitwise exclusive OR of packed single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpeq_ss","","Compares the lowest `f32` of both inputs for equality. The…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmplt_ss","","Compares the lowest `f32` of both inputs for less than.…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmple_ss","","Compares the lowest `f32` of both inputs for less than or…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpgt_ss","","Compares the lowest `f32` of both inputs for greater than.…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpge_ss","","Compares the lowest `f32` of both inputs for greater than…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpneq_ss","","Compares the lowest `f32` of both inputs for inequality.…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpnlt_ss","","Compares the lowest `f32` of both inputs for…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpnle_ss","","Compares the lowest `f32` of both inputs for…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpngt_ss","","Compares the lowest `f32` of both inputs for…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpnge_ss","","Compares the lowest `f32` of both inputs for…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpord_ss","","Checks if the lowest `f32` of both inputs are ordered. The…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpunord_ss","","Checks if the lowest `f32` of both inputs are unordered.…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpeq_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmplt_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmple_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpgt_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpge_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpneq_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpnlt_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpnle_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpngt_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpnge_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpord_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpunord_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_comieq_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_comilt_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_comile_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_comigt_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_comige_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_comineq_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_ucomieq_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_ucomilt_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_ucomile_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_ucomigt_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_ucomige_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_ucomineq_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_cvtss_si32","","Converts the lowest 32 bit float in the input vector to a…",null,[[["__m128"]],["i32"]]],[5,"_mm_cvt_ss2si","","Alias for `_mm_cvtss_si32`.",null,[[["__m128"]],["i32"]]],[5,"_mm_cvttss_si32","","Converts the lowest 32 bit float in the input vector to a…",null,[[["__m128"]],["i32"]]],[5,"_mm_cvtt_ss2si","","Alias for `_mm_cvttss_si32`.",null,[[["__m128"]],["i32"]]],[5,"_mm_cvtss_f32","","Extracts the lowest 32 bit float from the input vector.",null,[[["__m128"]],["f32"]]],[5,"_mm_cvtsi32_ss","","Converts a 32 bit integer to a 32 bit float. The result…",null,[[["i32"],["__m128"]],["__m128"]]],[5,"_mm_cvt_si2ss","","Alias for `_mm_cvtsi32_ss`.",null,[[["i32"],["__m128"]],["__m128"]]],[5,"_mm_set_ss","","Construct a `__m128` with the lowest element set to `a`…",null,[[["f32"]],["__m128"]]],[5,"_mm_set1_ps","","Construct a `__m128` with all element set to `a`.",null,[[["f32"]],["__m128"]]],[5,"_mm_set_ps1","","Alias for `_mm_set1_ps`",null,[[["f32"]],["__m128"]]],[5,"_mm_set_ps","","Construct a `__m128` from four floating point values…",null,[[["f32"]],["__m128"]]],[5,"_mm_setr_ps","","Construct a `__m128` from four floating point values…",null,[[["f32"]],["__m128"]]],[5,"_mm_setzero_ps","","Construct a `__m128` with all elements initialized to zero.",null,[[],["__m128"]]],[5,"_MM_SHUFFLE","","A utility function for creating masks to use with Intel…",null,[[["u32"]],["i32"]]],[5,"_mm_shuffle_ps","","Shuffles packed single-precision (32-bit) floating-point…",null,[[["i32"],["__m128"]],["__m128"]]],[5,"_mm_unpackhi_ps","","Unpacks and interleave single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_unpacklo_ps","","Unpacks and interleave single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_movehl_ps","","Combine higher half of `a` and `b`. The highwe half of `b`…",null,[[["__m128"]],["__m128"]]],[5,"_mm_movelh_ps","","Combine lower half of `a` and `b`. The lower half of `b`…",null,[[["__m128"]],["__m128"]]],[5,"_mm_movemask_ps","","Returns a mask of the most significant bit of each element…",null,[[["__m128"]],["i32"]]],[5,"_mm_loadh_pi","","Sets the upper two single-precision floating-point values…",null,[[["__m128"]],["__m128"]]],[5,"_mm_loadl_pi","","Loads two floats from `p` into the lower half of a…",null,[[["__m128"]],["__m128"]]],[5,"_mm_load_ss","","Construct a `__m128` with the lowest element read from `p`…",null,[[],["__m128"]]],[5,"_mm_load1_ps","","Construct a `__m128` by duplicating the value read from…",null,[[],["__m128"]]],[5,"_mm_load_ps1","","Alias for `_mm_load1_ps`",null,[[],["__m128"]]],[5,"_mm_load_ps","","Loads four `f32` values from aligned memory into a…",null,[[],["__m128"]]],[5,"_mm_loadu_ps","","Loads four `f32` values from memory into a `__m128`. There…",null,[[],["__m128"]]],[5,"_mm_loadr_ps","","Loads four `f32` values from aligned memory into a…",null,[[],["__m128"]]],[5,"_mm_storeh_pi","","Stores the upper half of `a` (64 bits) into memory.",null,[[["__m128"]]]],[5,"_mm_storel_pi","","Stores the lower half of `a` (64 bits) into memory.",null,[[["__m128"]]]],[5,"_mm_store_ss","","Stores the lowest 32 bit float of `a` into memory.",null,[[["__m128"]]]],[5,"_mm_store1_ps","","Stores the lowest 32 bit float of `a` repeated four times…",null,[[["__m128"]]]],[5,"_mm_store_ps1","","Alias for `_mm_store1_ps`",null,[[["__m128"]]]],[5,"_mm_store_ps","","Stores four 32-bit floats into aligned memory.",null,[[["__m128"]]]],[5,"_mm_storeu_ps","","Stores four 32-bit floats into memory. There are no…",null,[[["__m128"]]]],[5,"_mm_storer_ps","","Stores four 32-bit floats into aligned memory in reverse…",null,[[["__m128"]]]],[5,"_mm_move_ss","","Returns a `__m128` with the first component from `b` and…",null,[[["__m128"]],["__m128"]]],[5,"_mm_sfence","","Performs a serializing operation on all store-to-memory…",null,[[]]],[5,"_mm_getcsr","","Gets the unsigned 32-bit value of the MXCSR control and…",null,[[],["u32"]]],[5,"_mm_setcsr","","Sets the MXCSR register with the 32-bit unsigned integer…",null,[[["u32"]]]],[5,"_MM_GET_EXCEPTION_MASK","","See `_mm_setcsr`",null,[[],["u32"]]],[5,"_MM_GET_EXCEPTION_STATE","","See `_mm_setcsr`",null,[[],["u32"]]],[5,"_MM_GET_FLUSH_ZERO_MODE","","See `_mm_setcsr`",null,[[],["u32"]]],[5,"_MM_GET_ROUNDING_MODE","","See `_mm_setcsr`",null,[[],["u32"]]],[5,"_MM_SET_EXCEPTION_MASK","","See `_mm_setcsr`",null,[[["u32"]]]],[5,"_MM_SET_EXCEPTION_STATE","","See `_mm_setcsr`",null,[[["u32"]]]],[5,"_MM_SET_FLUSH_ZERO_MODE","","See `_mm_setcsr`",null,[[["u32"]]]],[5,"_MM_SET_ROUNDING_MODE","","See `_mm_setcsr`",null,[[["u32"]]]],[5,"_mm_prefetch","","Fetch the cache line that contains address `p` using the…",null,[[["i32"]]]],[5,"_mm_undefined_ps","","Returns vector of type __m128 with undefined elements.",null,[[],["__m128"]]],[5,"_MM_TRANSPOSE4_PS","","Transpose the 4x4 matrix formed by 4 rows of __m128 in…",null,[[["__m128"]]]],[5,"_mm_stream_ps","","Stores `a` into the memory at `mem_addr` using a…",null,[[["__m128"]]]],[5,"_mm_stream_pi","","Stores 64-bits of integer data from a into memory using a…",null,[[["__m64"]]]],[5,"_mm_max_pi16","","Compares the packed 16-bit signed integers of `a` and `b`…",null,[[["__m64"]],["__m64"]]],[5,"_m_pmaxsw","","Compares the packed 16-bit signed integers of `a` and `b`…",null,[[["__m64"]],["__m64"]]],[5,"_mm_max_pu8","","Compares the packed 8-bit signed integers of `a` and `b`…",null,[[["__m64"]],["__m64"]]],[5,"_m_pmaxub","","Compares the packed 8-bit signed integers of `a` and `b`…",null,[[["__m64"]],["__m64"]]],[5,"_mm_min_pi16","","Compares the packed 16-bit signed integers of `a` and `b`…",null,[[["__m64"]],["__m64"]]],[5,"_m_pminsw","","Compares the packed 16-bit signed integers of `a` and `b`…",null,[[["__m64"]],["__m64"]]],[5,"_mm_min_pu8","","Compares the packed 8-bit signed integers of `a` and `b`…",null,[[["__m64"]],["__m64"]]],[5,"_m_pminub","","Compares the packed 8-bit signed integers of `a` and `b`…",null,[[["__m64"]],["__m64"]]],[5,"_mm_mulhi_pu16","","Multiplies packed 16-bit unsigned integer values and…",null,[[["__m64"]],["__m64"]]],[5,"_mm_mullo_pi16","","Multiplies packed 16-bit integer values and writes the…",null,[[["__m64"]],["__m64"]]],[5,"_m_pmulhuw","","Multiplies packed 16-bit unsigned integer values and…",null,[[["__m64"]],["__m64"]]],[5,"_mm_avg_pu8","","Computes the rounded averages of the packed unsigned 8-bit…",null,[[["__m64"]],["__m64"]]],[5,"_m_pavgb","","Computes the rounded averages of the packed unsigned 8-bit…",null,[[["__m64"]],["__m64"]]],[5,"_mm_avg_pu16","","Computes the rounded averages of the packed unsigned…",null,[[["__m64"]],["__m64"]]],[5,"_m_pavgw","","Computes the rounded averages of the packed unsigned…",null,[[["__m64"]],["__m64"]]],[5,"_mm_sad_pu8","","Subtracts the corresponding 8-bit unsigned integer values…",null,[[["__m64"]],["__m64"]]],[5,"_m_psadbw","","Subtracts the corresponding 8-bit unsigned integer values…",null,[[["__m64"]],["__m64"]]],[5,"_mm_cvtpi32_ps","","Converts two elements of a 64-bit vector of `[2 x i32]`…",null,[[["__m64"],["__m128"]],["__m128"]]],[5,"_mm_cvt_pi2ps","","Converts two elements of a 64-bit vector of `[2 x i32]`…",null,[[["__m64"],["__m128"]],["__m128"]]],[5,"_mm_cvtpi8_ps","","Converts the lower 4 8-bit values of `a` into a 128-bit…",null,[[["__m64"]],["__m128"]]],[5,"_mm_cvtpu8_ps","","Converts the lower 4 8-bit values of `a` into a 128-bit…",null,[[["__m64"]],["__m128"]]],[5,"_mm_cvtpi16_ps","","Converts a 64-bit vector of `i16`s into a 128-bit vector…",null,[[["__m64"]],["__m128"]]],[5,"_mm_cvtpu16_ps","","Converts a 64-bit vector of `i16`s into a 128-bit vector…",null,[[["__m64"]],["__m128"]]],[5,"_mm_cvtpi32x2_ps","","Converts the two 32-bit signed integer values from each…",null,[[["__m64"]],["__m128"]]],[5,"_mm_maskmove_si64","","Conditionally copies the values from each 8-bit element in…",null,[[["__m64"]]]],[5,"_m_maskmovq","","Conditionally copies the values from each 8-bit element in…",null,[[["__m64"]]]],[5,"_mm_extract_pi16","","Extracts 16-bit element from a 64-bit vector of `[4 x…",null,[[["__m64"],["i32"]],["i32"]]],[5,"_m_pextrw","","Extracts 16-bit element from a 64-bit vector of `[4 x…",null,[[["__m64"],["i32"]],["i32"]]],[5,"_mm_insert_pi16","","Copies data from the 64-bit vector of `[4 x i16]` to the…",null,[[["__m64"],["i32"]],["__m64"]]],[5,"_m_pinsrw","","Copies data from the 64-bit vector of `[4 x i16]` to the…",null,[[["__m64"],["i32"]],["__m64"]]],[5,"_mm_movemask_pi8","","Takes the most significant bit from each 8-bit element in…",null,[[["__m64"]],["i32"]]],[5,"_m_pmovmskb","","Takes the most significant bit from each 8-bit element in…",null,[[["__m64"]],["i32"]]],[5,"_mm_shuffle_pi16","","Shuffles the 4 16-bit integers from a 64-bit integer…",null,[[["__m64"],["i32"]],["__m64"]]],[5,"_m_pshufw","","Shuffles the 4 16-bit integers from a 64-bit integer…",null,[[["__m64"],["i32"]],["__m64"]]],[5,"_mm_cvttps_pi32","","Converts the two lower packed single-precision (32-bit)…",null,[[["__m128"]],["__m64"]]],[5,"_mm_cvtt_ps2pi","","Converts the two lower packed single-precision (32-bit)…",null,[[["__m128"]],["__m64"]]],[5,"_mm_cvtps_pi32","","Converts the two lower packed single-precision (32-bit)…",null,[[["__m128"]],["__m64"]]],[5,"_mm_cvt_ps2pi","","Converts the two lower packed single-precision (32-bit)…",null,[[["__m128"]],["__m64"]]],[5,"_mm_cvtps_pi16","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m64"]]],[5,"_mm_cvtps_pi8","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m64"]]],[5,"_mm_pause","","Provides a hint to the processor that the code sequence is…",null,[[]]],[5,"_mm_clflush","","Invalidates and flushes the cache line that contains `p`…",null,[[]]],[5,"_mm_lfence","","Performs a serializing operation on all load-from-memory…",null,[[]]],[5,"_mm_mfence","","Performs a serializing operation on all load-from-memory…",null,[[]]],[5,"_mm_add_epi8","","Adds packed 8-bit integers in `a` and `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_add_epi16","","Adds packed 16-bit integers in `a` and `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_add_epi32","","Adds packed 32-bit integers in `a` and `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_add_epi64","","Adds packed 64-bit integers in `a` and `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_adds_epi8","","Adds packed 8-bit integers in `a` and `b` using saturation.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_adds_epi16","","Adds packed 16-bit integers in `a` and `b` using saturation.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_adds_epu8","","Adds packed unsigned 8-bit integers in `a` and `b` using…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_adds_epu16","","Adds packed unsigned 16-bit integers in `a` and `b` using…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_avg_epu8","","Averages packed unsigned 8-bit integers in `a` and `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_avg_epu16","","Averages packed unsigned 16-bit integers in `a` and `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_madd_epi16","","Multiplies and then horizontally add signed 16 bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_max_epi16","","Compares packed 16-bit integers in `a` and `b`, and…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_max_epu8","","Compares packed unsigned 8-bit integers in `a` and `b`,…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_min_epi16","","Compares packed 16-bit integers in `a` and `b`, and…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_min_epu8","","Compares packed unsigned 8-bit integers in `a` and `b`,…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_mulhi_epi16","","Multiplies the packed 16-bit integers in `a` and `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_mulhi_epu16","","Multiplies the packed unsigned 16-bit integers in `a` and…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_mullo_epi16","","Multiplies the packed 16-bit integers in `a` and `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_mul_epu32","","Multiplies the low unsigned 32-bit integers from each…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sad_epu8","","Sum the absolute differences of packed unsigned 8-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sub_epi8","","Subtracts packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sub_epi16","","Subtracts packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sub_epi32","","Subtract packed 32-bit integers in `b` from packed 32-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sub_epi64","","Subtract packed 64-bit integers in `b` from packed 64-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_subs_epi8","","Subtract packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_subs_epi16","","Subtract packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_subs_epu8","","Subtract packed unsigned 8-bit integers in `b` from packed…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_subs_epu16","","Subtract packed unsigned 16-bit integers in `b` from…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_slli_si128","","Shifts `a` left by `imm8` bytes while shifting in zeros.",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_bslli_si128","","Shifts `a` left by `imm8` bytes while shifting in zeros.",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_bsrli_si128","","Shifts `a` right by `imm8` bytes while shifting in zeros.",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_slli_epi16","","Shifts packed 16-bit integers in `a` left by `imm8` while…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_sll_epi16","","Shifts packed 16-bit integers in `a` left by `count` while…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_slli_epi32","","Shifts packed 32-bit integers in `a` left by `imm8` while…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_sll_epi32","","Shifts packed 32-bit integers in `a` left by `count` while…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_slli_epi64","","Shifts packed 64-bit integers in `a` left by `imm8` while…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_sll_epi64","","Shifts packed 64-bit integers in `a` left by `count` while…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_srai_epi16","","Shifts packed 16-bit integers in `a` right by `imm8` while…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_sra_epi16","","Shifts packed 16-bit integers in `a` right by `count`…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_srai_epi32","","Shifts packed 32-bit integers in `a` right by `imm8` while…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_sra_epi32","","Shifts packed 32-bit integers in `a` right by `count`…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_srli_si128","","Shifts `a` right by `imm8` bytes while shifting in zeros.",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_srli_epi16","","Shifts packed 16-bit integers in `a` right by `imm8` while…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_srl_epi16","","Shifts packed 16-bit integers in `a` right by `count`…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_srli_epi32","","Shifts packed 32-bit integers in `a` right by `imm8` while…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_srl_epi32","","Shifts packed 32-bit integers in `a` right by `count`…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_srli_epi64","","Shifts packed 64-bit integers in `a` right by `imm8` while…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_srl_epi64","","Shifts packed 64-bit integers in `a` right by `count`…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_and_si128","","Computes the bitwise AND of 128 bits (representing integer…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_andnot_si128","","Computes the bitwise NOT of 128 bits (representing integer…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_or_si128","","Computes the bitwise OR of 128 bits (representing integer…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_xor_si128","","Computes the bitwise XOR of 128 bits (representing integer…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmpeq_epi8","","Compares packed 8-bit integers in `a` and `b` for equality.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmpeq_epi16","","Compares packed 16-bit integers in `a` and `b` for equality.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmpeq_epi32","","Compares packed 32-bit integers in `a` and `b` for equality.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmpgt_epi8","","Compares packed 8-bit integers in `a` and `b` for…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmpgt_epi16","","Compares packed 16-bit integers in `a` and `b` for…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmpgt_epi32","","Compares packed 32-bit integers in `a` and `b` for…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmplt_epi8","","Compares packed 8-bit integers in `a` and `b` for less-than.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmplt_epi16","","Compares packed 16-bit integers in `a` and `b` for…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmplt_epi32","","Compares packed 32-bit integers in `a` and `b` for…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepi32_pd","","Converts the lower two packed 32-bit integers in `a` to…",null,[[["__m128i"]],["__m128d"]]],[5,"_mm_cvtsi32_sd","","Returns `a` with its lower element replaced by `b` after…",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_cvtepi32_ps","","Converts packed 32-bit integers in `a` to packed…",null,[[["__m128i"]],["__m128"]]],[5,"_mm_cvtps_epi32","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128i"]]],[5,"_mm_cvtsi32_si128","","Returns a vector whose lowest element is `a` and all…",null,[[["i32"]],["__m128i"]]],[5,"_mm_cvtsi128_si32","","Returns the lowest element of `a`.",null,[[["__m128i"]],["i32"]]],[5,"_mm_set_epi64x","","Sets packed 64-bit integers with the supplied values, from…",null,[[["i64"]],["__m128i"]]],[5,"_mm_set_epi32","","Sets packed 32-bit integers with the supplied values.",null,[[["i32"]],["__m128i"]]],[5,"_mm_set_epi16","","Sets packed 16-bit integers with the supplied values.",null,[[["i16"]],["__m128i"]]],[5,"_mm_set_epi8","","Sets packed 8-bit integers with the supplied values.",null,[[["i8"]],["__m128i"]]],[5,"_mm_set1_epi64x","","Broadcasts 64-bit integer `a` to all elements.",null,[[["i64"]],["__m128i"]]],[5,"_mm_set1_epi32","","Broadcasts 32-bit integer `a` to all elements.",null,[[["i32"]],["__m128i"]]],[5,"_mm_set1_epi16","","Broadcasts 16-bit integer `a` to all elements.",null,[[["i16"]],["__m128i"]]],[5,"_mm_set1_epi8","","Broadcasts 8-bit integer `a` to all elements.",null,[[["i8"]],["__m128i"]]],[5,"_mm_setr_epi32","","Sets packed 32-bit integers with the supplied values in…",null,[[["i32"]],["__m128i"]]],[5,"_mm_setr_epi16","","Sets packed 16-bit integers with the supplied values in…",null,[[["i16"]],["__m128i"]]],[5,"_mm_setr_epi8","","Sets packed 8-bit integers with the supplied values in…",null,[[["i8"]],["__m128i"]]],[5,"_mm_setzero_si128","","Returns a vector with all elements set to zero.",null,[[],["__m128i"]]],[5,"_mm_loadl_epi64","","Loads 64-bit integer from memory into first element of…",null,[[],["__m128i"]]],[5,"_mm_load_si128","","Loads 128-bits of integer data from memory into a new…",null,[[],["__m128i"]]],[5,"_mm_loadu_si128","","Loads 128-bits of integer data from memory into a new…",null,[[],["__m128i"]]],[5,"_mm_maskmoveu_si128","","Conditionally store 8-bit integer elements from `a` into…",null,[[["__m128i"]]]],[5,"_mm_store_si128","","Stores 128-bits of integer data from `a` into memory.",null,[[["__m128i"]]]],[5,"_mm_storeu_si128","","Stores 128-bits of integer data from `a` into memory.",null,[[["__m128i"]]]],[5,"_mm_storel_epi64","","Stores the lower 64-bit integer `a` to a memory location.",null,[[["__m128i"]]]],[5,"_mm_stream_si128","","Stores a 128-bit integer vector to a 128-bit aligned…",null,[[["__m128i"]]]],[5,"_mm_stream_si32","","Stores a 32-bit integer value in the specified memory…",null,[[["i32"]]]],[5,"_mm_move_epi64","","Returns a vector where the low element is extracted from…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_packs_epi16","","Converts packed 16-bit integers from `a` and `b` to packed…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_packs_epi32","","Converts packed 32-bit integers from `a` and `b` to packed…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_packus_epi16","","Converts packed 16-bit integers from `a` and `b` to packed…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_extract_epi16","","Returns the `imm8` element of `a`.",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_insert_epi16","","Returns a new vector where the `imm8` element of `a` is…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_movemask_epi8","","Returns a mask of the most significant bit of each element…",null,[[["__m128i"]],["i32"]]],[5,"_mm_shuffle_epi32","","Shuffles 32-bit integers in `a` using the control in `imm8`.",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_shufflehi_epi16","","Shuffles 16-bit integers in the high 64 bits of `a` using…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_shufflelo_epi16","","Shuffles 16-bit integers in the low 64 bits of `a` using…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_unpackhi_epi8","","Unpacks and interleave 8-bit integers from the high half…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_unpackhi_epi16","","Unpacks and interleave 16-bit integers from the high half…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_unpackhi_epi32","","Unpacks and interleave 32-bit integers from the high half…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_unpackhi_epi64","","Unpacks and interleave 64-bit integers from the high half…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_unpacklo_epi8","","Unpacks and interleave 8-bit integers from the low half of…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_unpacklo_epi16","","Unpacks and interleave 16-bit integers from the low half…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_unpacklo_epi32","","Unpacks and interleave 32-bit integers from the low half…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_unpacklo_epi64","","Unpacks and interleave 64-bit integers from the low half…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_add_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_add_pd","","Adds packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_div_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_div_pd","","Divide packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_max_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_max_pd","","Returns a new vector with the maximum values from…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_min_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_min_pd","","Returns a new vector with the minimum values from…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_mul_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_mul_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_sqrt_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_sqrt_pd","","Returns a new vector with the square root of each of the…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_sub_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_sub_pd","","Subtract packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_and_pd","","Computes the bitwise AND of packed double-precision…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_andnot_pd","","Computes the bitwise NOT of `a` and then AND with `b`.",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_or_pd","","Computes the bitwise OR of `a` and `b`.",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_xor_pd","","Computes the bitwise OR of `a` and `b`.",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpeq_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmplt_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmple_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpgt_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpge_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpord_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpunord_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpneq_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpnlt_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpnle_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpngt_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpnge_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpeq_pd","","Compares corresponding elements in `a` and `b` for equality.",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmplt_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmple_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpgt_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpge_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpord_pd","","Compares corresponding elements in `a` and `b` to see if…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpunord_pd","","Compares corresponding elements in `a` and `b` to see if…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpneq_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpnlt_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpnle_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpngt_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpnge_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_comieq_sd","","Compares the lower element of `a` and `b` for equality.",null,[[["__m128d"]],["i32"]]],[5,"_mm_comilt_sd","","Compares the lower element of `a` and `b` for less-than.",null,[[["__m128d"]],["i32"]]],[5,"_mm_comile_sd","","Compares the lower element of `a` and `b` for…",null,[[["__m128d"]],["i32"]]],[5,"_mm_comigt_sd","","Compares the lower element of `a` and `b` for greater-than.",null,[[["__m128d"]],["i32"]]],[5,"_mm_comige_sd","","Compares the lower element of `a` and `b` for…",null,[[["__m128d"]],["i32"]]],[5,"_mm_comineq_sd","","Compares the lower element of `a` and `b` for not-equal.",null,[[["__m128d"]],["i32"]]],[5,"_mm_ucomieq_sd","","Compares the lower element of `a` and `b` for equality.",null,[[["__m128d"]],["i32"]]],[5,"_mm_ucomilt_sd","","Compares the lower element of `a` and `b` for less-than.",null,[[["__m128d"]],["i32"]]],[5,"_mm_ucomile_sd","","Compares the lower element of `a` and `b` for…",null,[[["__m128d"]],["i32"]]],[5,"_mm_ucomigt_sd","","Compares the lower element of `a` and `b` for greater-than.",null,[[["__m128d"]],["i32"]]],[5,"_mm_ucomige_sd","","Compares the lower element of `a` and `b` for…",null,[[["__m128d"]],["i32"]]],[5,"_mm_ucomineq_sd","","Compares the lower element of `a` and `b` for not-equal.",null,[[["__m128d"]],["i32"]]],[5,"_mm_cvtpd_ps","","Converts packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128"]]],[5,"_mm_cvtps_pd","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128d"]]],[5,"_mm_cvtpd_epi32","","Converts packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128i"]]],[5,"_mm_cvtsd_si32","","Converts the lower double-precision (64-bit)…",null,[[["__m128d"]],["i32"]]],[5,"_mm_cvtsd_ss","","Converts the lower double-precision (64-bit)…",null,[[["__m128d"],["__m128"]],["__m128"]]],[5,"_mm_cvtsd_f64","","Returns the lower double-precision (64-bit) floating-point…",null,[[["__m128d"]],["f64"]]],[5,"_mm_cvtss_sd","","Converts the lower single-precision (32-bit)…",null,[[["__m128d"],["__m128"]],["__m128d"]]],[5,"_mm_cvttpd_epi32","","Converts packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128i"]]],[5,"_mm_cvttsd_si32","","Converts the lower double-precision (64-bit)…",null,[[["__m128d"]],["i32"]]],[5,"_mm_cvttps_epi32","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128i"]]],[5,"_mm_set_sd","","Copies double-precision (64-bit) floating-point element…",null,[[["f64"]],["__m128d"]]],[5,"_mm_set1_pd","","Broadcasts double-precision (64-bit) floating-point value…",null,[[["f64"]],["__m128d"]]],[5,"_mm_set_pd1","","Broadcasts double-precision (64-bit) floating-point value…",null,[[["f64"]],["__m128d"]]],[5,"_mm_set_pd","","Sets packed double-precision (64-bit) floating-point…",null,[[["f64"]],["__m128d"]]],[5,"_mm_setr_pd","","Sets packed double-precision (64-bit) floating-point…",null,[[["f64"]],["__m128d"]]],[5,"_mm_setzero_pd","","Returns packed double-precision (64-bit) floating-point…",null,[[],["__m128d"]]],[5,"_mm_movemask_pd","","Returns a mask of the most significant bit of each element…",null,[[["__m128d"]],["i32"]]],[5,"_mm_load_pd","","Loads 128-bits (composed of 2 packed double-precision…",null,[[],["__m128d"]]],[5,"_mm_load_sd","","Loads a 64-bit double-precision value to the low element…",null,[[],["__m128d"]]],[5,"_mm_loadh_pd","","Loads a double-precision value into the high-order bits of…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_loadl_pd","","Loads a double-precision value into the low-order bits of…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_stream_pd","","Stores a 128-bit floating point vector of `[2 x double]`…",null,[[["__m128d"]]]],[5,"_mm_store_sd","","Stores the lower 64 bits of a 128-bit vector of `[2 x…",null,[[["__m128d"]]]],[5,"_mm_store_pd","","Stores 128-bits (composed of 2 packed double-precision…",null,[[["__m128d"]]]],[5,"_mm_storeu_pd","","Stores 128-bits (composed of 2 packed double-precision…",null,[[["__m128d"]]]],[5,"_mm_store1_pd","","Stores the lower double-precision (64-bit) floating-point…",null,[[["__m128d"]]]],[5,"_mm_store_pd1","","Stores the lower double-precision (64-bit) floating-point…",null,[[["__m128d"]]]],[5,"_mm_storer_pd","","Stores 2 double-precision (64-bit) floating-point elements…",null,[[["__m128d"]]]],[5,"_mm_storeh_pd","","Stores the upper 64 bits of a 128-bit vector of `[2 x…",null,[[["__m128d"]]]],[5,"_mm_storel_pd","","Stores the lower 64 bits of a 128-bit vector of `[2 x…",null,[[["__m128d"]]]],[5,"_mm_load1_pd","","Loads a double-precision (64-bit) floating-point element…",null,[[],["__m128d"]]],[5,"_mm_load_pd1","","Loads a double-precision (64-bit) floating-point element…",null,[[],["__m128d"]]],[5,"_mm_loadr_pd","","Loads 2 double-precision (64-bit) floating-point elements…",null,[[],["__m128d"]]],[5,"_mm_loadu_pd","","Loads 128-bits (composed of 2 packed double-precision…",null,[[],["__m128d"]]],[5,"_mm_shuffle_pd","","Constructs a 128-bit floating-point vector of `[2 x…",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_move_sd","","Constructs a 128-bit floating-point vector of `[2 x…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_castpd_ps","","Casts a 128-bit floating-point vector of `[2 x double]`…",null,[[["__m128d"]],["__m128"]]],[5,"_mm_castpd_si128","","Casts a 128-bit floating-point vector of `[2 x double]`…",null,[[["__m128d"]],["__m128i"]]],[5,"_mm_castps_pd","","Casts a 128-bit floating-point vector of `[4 x float]`…",null,[[["__m128"]],["__m128d"]]],[5,"_mm_castps_si128","","Casts a 128-bit floating-point vector of `[4 x float]`…",null,[[["__m128"]],["__m128i"]]],[5,"_mm_castsi128_pd","","Casts a 128-bit integer vector into a 128-bit…",null,[[["__m128i"]],["__m128d"]]],[5,"_mm_castsi128_ps","","Casts a 128-bit integer vector into a 128-bit…",null,[[["__m128i"]],["__m128"]]],[5,"_mm_undefined_pd","","Returns vector of type __m128d with undefined elements.",null,[[],["__m128d"]]],[5,"_mm_undefined_si128","","Returns vector of type __m128i with undefined elements.",null,[[],["__m128i"]]],[5,"_mm_unpackhi_pd","","The resulting `__m128d` element is composed by the…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_unpacklo_pd","","The resulting `__m128d` element is composed by the…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_add_si64","","Adds two signed or unsigned 64-bit integer values,…",null,[[["__m64"]],["__m64"]]],[5,"_mm_mul_su32","","Multiplies 32-bit unsigned integer values contained in the…",null,[[["__m64"]],["__m64"]]],[5,"_mm_sub_si64","","Subtracts signed or unsigned 64-bit integer values and…",null,[[["__m64"]],["__m64"]]],[5,"_mm_cvtpi32_pd","","Converts the two signed 32-bit integer elements of a…",null,[[["__m64"]],["__m128d"]]],[5,"_mm_set_epi64","","Initializes both 64-bit values in a 128-bit vector of `[2…",null,[[["__m64"]],["__m128i"]]],[5,"_mm_set1_epi64","","Initializes both values in a 128-bit vector of `[2 x i64]`…",null,[[["__m64"]],["__m128i"]]],[5,"_mm_setr_epi64","","Constructs a 128-bit integer vector, initialized in…",null,[[["__m64"]],["__m128i"]]],[5,"_mm_movepi64_pi64","","Returns the lower 64 bits of a 128-bit integer vector as a…",null,[[["__m128i"]],["__m64"]]],[5,"_mm_movpi64_epi64","","Moves the 64-bit operand to a 128-bit integer vector,…",null,[[["__m64"]],["__m128i"]]],[5,"_mm_cvtpd_pi32","","Converts the two double-precision floating-point elements…",null,[[["__m128d"]],["__m64"]]],[5,"_mm_cvttpd_pi32","","Converts the two double-precision floating-point elements…",null,[[["__m128d"]],["__m64"]]],[5,"_mm_addsub_ps","","Alternatively add and subtract packed single-precision…",null,[[["__m128"]],["__m128"]]],[5,"_mm_addsub_pd","","Alternatively add and subtract packed double-precision…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_hadd_pd","","Horizontally adds adjacent pairs of double-precision…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_hadd_ps","","Horizontally adds adjacent pairs of single-precision…",null,[[["__m128"]],["__m128"]]],[5,"_mm_hsub_pd","","Horizontally subtract adjacent pairs of double-precision…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_hsub_ps","","Horizontally adds adjacent pairs of single-precision…",null,[[["__m128"]],["__m128"]]],[5,"_mm_lddqu_si128","","Loads 128-bits of integer data from unaligned memory. This…",null,[[],["__m128i"]]],[5,"_mm_movedup_pd","","Duplicate the low double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_loaddup_pd","","Loads a double-precision (64-bit) floating-point element…",null,[[],["__m128d"]]],[5,"_mm_movehdup_ps","","Duplicate odd-indexed single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_moveldup_ps","","Duplicate even-indexed single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_abs_epi8","","Computes the absolute value of packed 8-bit signed…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_abs_epi16","","Computes the absolute value of each of the packed 16-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_abs_epi32","","Computes the absolute value of each of the packed 32-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_shuffle_epi8","","Shuffles bytes from `a` according to the content of `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_alignr_epi8","","Concatenate 16-byte blocks in `a` and `b` into a 32-byte…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_hadd_epi16","","Horizontally adds the adjacent pairs of values contained…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_hadds_epi16","","Horizontally adds the adjacent pairs of values contained…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_hadd_epi32","","Horizontally adds the adjacent pairs of values contained…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_hsub_epi16","","Horizontally subtract the adjacent pairs of values…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_hsubs_epi16","","Horizontally subtract the adjacent pairs of values…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_hsub_epi32","","Horizontally subtract the adjacent pairs of values…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_maddubs_epi16","","Multiplies corresponding pairs of packed 8-bit unsigned…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_mulhrs_epi16","","Multiplies packed 16-bit signed integer values, truncate…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sign_epi8","","Negates packed 8-bit integers in `a` when the…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sign_epi16","","Negates packed 16-bit integers in `a` when the…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sign_epi32","","Negates packed 32-bit integers in `a` when the…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_abs_pi8","","Computes the absolute value of packed 8-bit integers in…",null,[[["__m64"]],["__m64"]]],[5,"_mm_abs_pi16","","Computes the absolute value of packed 8-bit integers in…",null,[[["__m64"]],["__m64"]]],[5,"_mm_abs_pi32","","Computes the absolute value of packed 32-bit integers in…",null,[[["__m64"]],["__m64"]]],[5,"_mm_shuffle_pi8","","Shuffles packed 8-bit integers in `a` according to shuffle…",null,[[["__m64"]],["__m64"]]],[5,"_mm_alignr_pi8","","Concatenates the two 64-bit integer vector operands, and…",null,[[["__m64"],["i32"]],["__m64"]]],[5,"_mm_hadd_pi16","","Horizontally adds the adjacent pairs of values contained…",null,[[["__m64"]],["__m64"]]],[5,"_mm_hadd_pi32","","Horizontally adds the adjacent pairs of values contained…",null,[[["__m64"]],["__m64"]]],[5,"_mm_hadds_pi16","","Horizontally adds the adjacent pairs of values contained…",null,[[["__m64"]],["__m64"]]],[5,"_mm_hsub_pi16","","Horizontally subtracts the adjacent pairs of values…",null,[[["__m64"]],["__m64"]]],[5,"_mm_hsub_pi32","","Horizontally subtracts the adjacent pairs of values…",null,[[["__m64"]],["__m64"]]],[5,"_mm_hsubs_pi16","","Horizontally subtracts the adjacent pairs of values…",null,[[["__m64"]],["__m64"]]],[5,"_mm_maddubs_pi16","","Multiplies corresponding pairs of packed 8-bit unsigned…",null,[[["__m64"]],["__m64"]]],[5,"_mm_mulhrs_pi16","","Multiplies packed 16-bit signed integer values, truncates…",null,[[["__m64"]],["__m64"]]],[5,"_mm_sign_pi8","","Negates packed 8-bit integers in `a` when the…",null,[[["__m64"]],["__m64"]]],[5,"_mm_sign_pi16","","Negates packed 16-bit integers in `a` when the…",null,[[["__m64"]],["__m64"]]],[5,"_mm_sign_pi32","","Negates packed 32-bit integers in `a` when the…",null,[[["__m64"]],["__m64"]]],[5,"_mm_blendv_epi8","","Blend packed 8-bit integers from `a` and `b` using `mask`",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_blend_epi16","","Blend packed 16-bit integers from `a` and `b` using the…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_blendv_pd","","Blend packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_blendv_ps","","Blend packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm_blend_pd","","Blend packed double-precision (64-bit) floating-point…",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_blend_ps","","Blend packed single-precision (32-bit) floating-point…",null,[[["i32"],["__m128"]],["__m128"]]],[5,"_mm_extract_ps","","Extracts a single-precision (32-bit) floating-point…",null,[[["i32"],["__m128"]],["i32"]]],[5,"_mm_extract_epi8","","Extracts an 8-bit integer from `a`, selected with `imm8`.…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_extract_epi32","","Extracts an 32-bit integer from `a` selected with `imm8`",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_insert_ps","","Select a single value in `a` to store at some position in…",null,[[["i32"],["__m128"]],["__m128"]]],[5,"_mm_insert_epi8","","Returns a copy of `a` with the 8-bit integer from `i`…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_insert_epi32","","Returns a copy of `a` with the 32-bit integer from `i`…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_max_epi8","","Compares packed 8-bit integers in `a` and `b` and returns…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_max_epu16","","Compares packed unsigned 16-bit integers in `a` and `b`,…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_max_epi32","","Compares packed 32-bit integers in `a` and `b`, and…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_max_epu32","","Compares packed unsigned 32-bit integers in `a` and `b`,…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_min_epi8","","Compares packed 8-bit integers in `a` and `b` and returns…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_min_epu16","","Compares packed unsigned 16-bit integers in `a` and `b`,…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_min_epi32","","Compares packed 32-bit integers in `a` and `b`, and…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_min_epu32","","Compares packed unsigned 32-bit integers in `a` and `b`,…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_packus_epi32","","Converts packed 32-bit integers from `a` and `b` to packed…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmpeq_epi64","","Compares packed 64-bit integers in `a` and `b` for equality",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepi8_epi16","","Sign extend packed 8-bit integers in `a` to packed 16-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepi8_epi32","","Sign extend packed 8-bit integers in `a` to packed 32-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepi8_epi64","","Sign extend packed 8-bit integers in the low 8 bytes of…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepi16_epi32","","Sign extend packed 16-bit integers in `a` to packed 32-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepi16_epi64","","Sign extend packed 16-bit integers in `a` to packed 64-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepi32_epi64","","Sign extend packed 32-bit integers in `a` to packed 64-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepu8_epi16","","Zeroes extend packed unsigned 8-bit integers in `a` to…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepu8_epi32","","Zeroes extend packed unsigned 8-bit integers in `a` to…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepu8_epi64","","Zeroes extend packed unsigned 8-bit integers in `a` to…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepu16_epi32","","Zeroes extend packed unsigned 16-bit integers in `a` to…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepu16_epi64","","Zeroes extend packed unsigned 16-bit integers in `a` to…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepu32_epi64","","Zeroes extend packed unsigned 32-bit integers in `a` to…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_dp_pd","","Returns the dot product of two __m128d vectors.",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_dp_ps","","Returns the dot product of two __m128 vectors.",null,[[["i32"],["__m128"]],["__m128"]]],[5,"_mm_floor_pd","","Round the packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_floor_ps","","Round the packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm_floor_sd","","Round the lower double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_floor_ss","","Round the lower single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm_ceil_pd","","Round the packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_ceil_ps","","Round the packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm_ceil_sd","","Round the lower double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_ceil_ss","","Round the lower single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm_round_pd","","Round the packed double-precision (64-bit) floating-point…",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_round_ps","","Round the packed single-precision (32-bit) floating-point…",null,[[["i32"],["__m128"]],["__m128"]]],[5,"_mm_round_sd","","Round the lower double-precision (64-bit) floating-point…",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_round_ss","","Round the lower single-precision (32-bit) floating-point…",null,[[["i32"],["__m128"]],["__m128"]]],[5,"_mm_minpos_epu16","","Finds the minimum unsigned 16-bit element in the 128-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_mul_epi32","","Multiplies the low 32-bit integers from each packed 64-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_mullo_epi32","","Multiplies the packed 32-bit integers in `a` and `b`,…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_mpsadbw_epu8","","Subtracts 8-bit unsigned integer values and computes the…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_testz_si128","","Tests whether the specified bits in a 128-bit integer…",null,[[["__m128i"]],["i32"]]],[5,"_mm_testc_si128","","Tests whether the specified bits in a 128-bit integer…",null,[[["__m128i"]],["i32"]]],[5,"_mm_testnzc_si128","","Tests whether the specified bits in a 128-bit integer…",null,[[["__m128i"]],["i32"]]],[5,"_mm_test_all_zeros","","Tests whether the specified bits in a 128-bit integer…",null,[[["__m128i"]],["i32"]]],[5,"_mm_test_all_ones","","Tests whether the specified bits in `a` 128-bit integer…",null,[[["__m128i"]],["i32"]]],[5,"_mm_test_mix_ones_zeros","","Tests whether the specified bits in a 128-bit integer…",null,[[["__m128i"]],["i32"]]],[5,"_mm_cmpistrm","","Compares packed strings with implicit lengths in `a` and…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_cmpistri","","Compares packed strings with implicit lengths in `a` and…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_cmpistrz","","Compares packed strings with implicit lengths in `a` and…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_cmpistrc","","Compares packed strings with implicit lengths in `a` and…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_cmpistrs","","Compares packed strings with implicit lengths in `a` and…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_cmpistro","","Compares packed strings with implicit lengths in `a` and…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_cmpistra","","Compares packed strings with implicit lengths in `a` and…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_cmpestrm","","Compares packed strings in `a` and `b` with lengths `la`…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_cmpestri","","Compares packed strings `a` and `b` with lengths `la` and…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_cmpestrz","","Compares packed strings in `a` and `b` with lengths `la`…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_cmpestrc","","Compares packed strings in `a` and `b` with lengths `la`…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_cmpestrs","","Compares packed strings in `a` and `b` with lengths `la`…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_cmpestro","","Compares packed strings in `a` and `b` with lengths `la`…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_cmpestra","","Compares packed strings in `a` and `b` with lengths `la`…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_crc32_u8","","Starting with the initial value in `crc`, return the…",null,[[["u32"],["u8"]],["u32"]]],[5,"_mm_crc32_u16","","Starting with the initial value in `crc`, return the…",null,[[["u16"],["u32"]],["u32"]]],[5,"_mm_crc32_u32","","Starting with the initial value in `crc`, return the…",null,[[["u32"]],["u32"]]],[5,"_mm_cmpgt_epi64","","Compares packed 64-bit integers in `a` and `b` for…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_add_pd","","Adds packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_add_ps","","Adds packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_and_pd","","Computes the bitwise AND of a packed double-precision…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_and_ps","","Computes the bitwise AND of packed single-precision…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_or_pd","","Computes the bitwise OR packed double-precision (64-bit)…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_or_ps","","Computes the bitwise OR packed single-precision (32-bit)…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_shuffle_pd","","Shuffles double-precision (64-bit) floating-point elements…",null,[[["__m256d"],["i32"]],["__m256d"]]],[5,"_mm256_shuffle_ps","","Shuffles single-precision (32-bit) floating-point elements…",null,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm256_andnot_pd","","Computes the bitwise NOT of packed double-precision…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_andnot_ps","","Computes the bitwise NOT of packed single-precision…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_max_pd","","Compares packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_max_ps","","Compares packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_min_pd","","Compares packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_min_ps","","Compares packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_mul_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_mul_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_addsub_pd","","Alternatively adds and subtracts packed double-precision…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_addsub_ps","","Alternatively adds and subtracts packed single-precision…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_sub_pd","","Subtracts packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_sub_ps","","Subtracts packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_div_ps","","Computes the division of each of the 8 packed 32-bit…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_div_pd","","Computes the division of each of the 4 packed 64-bit…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_round_pd","","Rounds packed double-precision (64-bit) floating point…",null,[[["__m256d"],["i32"]],["__m256d"]]],[5,"_mm256_ceil_pd","","Rounds packed double-precision (64-bit) floating point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_floor_pd","","Rounds packed double-precision (64-bit) floating point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_round_ps","","Rounds packed single-precision (32-bit) floating point…",null,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm256_ceil_ps","","Rounds packed single-precision (32-bit) floating point…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_floor_ps","","Rounds packed single-precision (32-bit) floating point…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_sqrt_ps","","Returns the square root of packed single-precision…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_sqrt_pd","","Returns the square root of packed double-precision…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_blend_pd","","Blends packed double-precision (64-bit) floating-point…",null,[[["__m256d"],["i32"]],["__m256d"]]],[5,"_mm256_blend_ps","","Blends packed single-precision (32-bit) floating-point…",null,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm256_blendv_pd","","Blends packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_blendv_ps","","Blends packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_dp_ps","","Conditionally multiplies the packed single-precision…",null,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm256_hadd_pd","","Horizontal addition of adjacent pairs in the two packed…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_hadd_ps","","Horizontal addition of adjacent pairs in the two packed…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_hsub_pd","","Horizontal subtraction of adjacent pairs in the two packed…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_hsub_ps","","Horizontal subtraction of adjacent pairs in the two packed…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_xor_pd","","Computes the bitwise XOR of packed double-precision…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_xor_ps","","Computes the bitwise XOR of packed single-precision…",null,[[["__m256"]],["__m256"]]],[5,"_mm_cmp_pd","","Compares packed double-precision (64-bit) floating-point…",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm256_cmp_pd","","Compares packed double-precision (64-bit) floating-point…",null,[[["__m256d"],["i32"]],["__m256d"]]],[5,"_mm_cmp_ps","","Compares packed single-precision (32-bit) floating-point…",null,[[["i32"],["__m128"]],["__m128"]]],[5,"_mm256_cmp_ps","","Compares packed single-precision (32-bit) floating-point…",null,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm_cmp_sd","","Compares the lower double-precision (64-bit)…",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_cmp_ss","","Compares the lower single-precision (32-bit)…",null,[[["i32"],["__m128"]],["__m128"]]],[5,"_mm256_cvtepi32_pd","","Converts packed 32-bit integers in `a` to packed…",null,[[["__m128i"]],["__m256d"]]],[5,"_mm256_cvtepi32_ps","","Converts packed 32-bit integers in `a` to packed…",null,[[["__m256i"]],["__m256"]]],[5,"_mm256_cvtpd_ps","","Converts packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m128"]]],[5,"_mm256_cvtps_epi32","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256i"]]],[5,"_mm256_cvtps_pd","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m256d"]]],[5,"_mm256_cvttpd_epi32","","Converts packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m128i"]]],[5,"_mm256_cvtpd_epi32","","Converts packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m128i"]]],[5,"_mm256_cvttps_epi32","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256i"]]],[5,"_mm256_extractf128_ps","","Extracts 128 bits (composed of 4 packed single-precision…",null,[[["__m256"],["i32"]],["__m128"]]],[5,"_mm256_extractf128_pd","","Extracts 128 bits (composed of 2 packed double-precision…",null,[[["__m256d"],["i32"]],["__m128d"]]],[5,"_mm256_extractf128_si256","","Extracts 128 bits (composed of integer data) from `a`,…",null,[[["__m256i"],["i32"]],["__m128i"]]],[5,"_mm256_zeroall","","Zeroes the contents of all XMM or YMM registers.",null,[[]]],[5,"_mm256_zeroupper","","Zeroes the upper 128 bits of all YMM registers; the lower…",null,[[]]],[5,"_mm256_permutevar_ps","","Shuffles single-precision (32-bit) floating-point elements…",null,[[["__m256"],["__m256i"]],["__m256"]]],[5,"_mm_permutevar_ps","","Shuffles single-precision (32-bit) floating-point elements…",null,[[["__m128i"],["__m128"]],["__m128"]]],[5,"_mm256_permute_ps","","Shuffles single-precision (32-bit) floating-point elements…",null,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm_permute_ps","","Shuffles single-precision (32-bit) floating-point elements…",null,[[["i32"],["__m128"]],["__m128"]]],[5,"_mm256_permutevar_pd","","Shuffles double-precision (64-bit) floating-point elements…",null,[[["__m256d"],["__m256i"]],["__m256d"]]],[5,"_mm_permutevar_pd","","Shuffles double-precision (64-bit) floating-point elements…",null,[[["__m128i"],["__m128d"]],["__m128d"]]],[5,"_mm256_permute_pd","","Shuffles double-precision (64-bit) floating-point elements…",null,[[["__m256d"],["i32"]],["__m256d"]]],[5,"_mm_permute_pd","","Shuffles double-precision (64-bit) floating-point elements…",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm256_permute2f128_ps","","Shuffles 256 bits (composed of 8 packed single-precision…",null,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm256_permute2f128_pd","","Shuffles 256 bits (composed of 4 packed double-precision…",null,[[["__m256d"],["i32"]],["__m256d"]]],[5,"_mm256_permute2f128_si256","","Shuffles 258-bits (composed of integer data) selected by…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_broadcast_ss","","Broadcasts a single-precision (32-bit) floating-point…",null,[[["f32"]],["__m256"]]],[5,"_mm_broadcast_ss","","Broadcasts a single-precision (32-bit) floating-point…",null,[[["f32"]],["__m128"]]],[5,"_mm256_broadcast_sd","","Broadcasts a double-precision (64-bit) floating-point…",null,[[["f64"]],["__m256d"]]],[5,"_mm256_broadcast_ps","","Broadcasts 128 bits from memory (composed of 4 packed…",null,[[["__m128"]],["__m256"]]],[5,"_mm256_broadcast_pd","","Broadcasts 128 bits from memory (composed of 2 packed…",null,[[["__m128d"]],["__m256d"]]],[5,"_mm256_insertf128_ps","","Copies `a` to result, then inserts 128 bits (composed of 4…",null,[[["i32"],["__m256"],["__m128"]],["__m256"]]],[5,"_mm256_insertf128_pd","","Copies `a` to result, then inserts 128 bits (composed of 2…",null,[[["__m256d"],["__m128d"],["i32"]],["__m256d"]]],[5,"_mm256_insertf128_si256","","Copies `a` to result, then inserts 128 bits from `b` into…",null,[[["__m128i"],["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_insert_epi8","","Copies `a` to result, and inserts the 8-bit integer `i`…",null,[[["__m256i"],["i8"],["i32"]],["__m256i"]]],[5,"_mm256_insert_epi16","","Copies `a` to result, and inserts the 16-bit integer `i`…",null,[[["__m256i"],["i16"],["i32"]],["__m256i"]]],[5,"_mm256_insert_epi32","","Copies `a` to result, and inserts the 32-bit integer `i`…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_load_pd","","Loads 256-bits (composed of 4 packed double-precision…",null,[[],["__m256d"]]],[5,"_mm256_store_pd","","Stores 256-bits (composed of 4 packed double-precision…",null,[[["__m256d"]]]],[5,"_mm256_load_ps","","Loads 256-bits (composed of 8 packed single-precision…",null,[[],["__m256"]]],[5,"_mm256_store_ps","","Stores 256-bits (composed of 8 packed single-precision…",null,[[["__m256"]]]],[5,"_mm256_loadu_pd","","Loads 256-bits (composed of 4 packed double-precision…",null,[[],["__m256d"]]],[5,"_mm256_storeu_pd","","Stores 256-bits (composed of 4 packed double-precision…",null,[[["__m256d"]]]],[5,"_mm256_loadu_ps","","Loads 256-bits (composed of 8 packed single-precision…",null,[[],["__m256"]]],[5,"_mm256_storeu_ps","","Stores 256-bits (composed of 8 packed single-precision…",null,[[["__m256"]]]],[5,"_mm256_load_si256","","Loads 256-bits of integer data from memory into result.…",null,[[],["__m256i"]]],[5,"_mm256_store_si256","","Stores 256-bits of integer data from `a` into memory.…",null,[[["__m256i"]]]],[5,"_mm256_loadu_si256","","Loads 256-bits of integer data from memory into result.…",null,[[],["__m256i"]]],[5,"_mm256_storeu_si256","","Stores 256-bits of integer data from `a` into memory.…",null,[[["__m256i"]]]],[5,"_mm256_maskload_pd","","Loads packed double-precision (64-bit) floating-point…",null,[[["__m256i"]],["__m256d"]]],[5,"_mm256_maskstore_pd","","Stores packed double-precision (64-bit) floating-point…",null,[[["__m256d"],["__m256i"]]]],[5,"_mm_maskload_pd","","Loads packed double-precision (64-bit) floating-point…",null,[[["__m128i"]],["__m128d"]]],[5,"_mm_maskstore_pd","","Stores packed double-precision (64-bit) floating-point…",null,[[["__m128i"],["__m128d"]]]],[5,"_mm256_maskload_ps","","Loads packed single-precision (32-bit) floating-point…",null,[[["__m256i"]],["__m256"]]],[5,"_mm256_maskstore_ps","","Stores packed single-precision (32-bit) floating-point…",null,[[["__m256i"],["__m256"]]]],[5,"_mm_maskload_ps","","Loads packed single-precision (32-bit) floating-point…",null,[[["__m128i"]],["__m128"]]],[5,"_mm_maskstore_ps","","Stores packed single-precision (32-bit) floating-point…",null,[[["__m128i"],["__m128"]]]],[5,"_mm256_movehdup_ps","","Duplicate odd-indexed single-precision (32-bit)…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_moveldup_ps","","Duplicate even-indexed single-precision (32-bit)…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_movedup_pd","","Duplicate even-indexed double-precision (64-bit)…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_lddqu_si256","","Loads 256-bits of integer data from unaligned memory into…",null,[[],["__m256i"]]],[5,"_mm256_stream_si256","","Moves integer data from a 256-bit integer vector to a…",null,[[["__m256i"]]]],[5,"_mm256_stream_pd","","Moves double-precision values from a 256-bit vector of `[4…",null,[[["__m256d"]]]],[5,"_mm256_stream_ps","","Moves single-precision floating point values from a…",null,[[["__m256"]]]],[5,"_mm256_rcp_ps","","Computes the approximate reciprocal of packed…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_rsqrt_ps","","Computes the approximate reciprocal square root of packed…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_unpackhi_pd","","Unpacks and interleave double-precision (64-bit)…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_unpackhi_ps","","Unpacks and interleave single-precision (32-bit)…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_unpacklo_pd","","Unpacks and interleave double-precision (64-bit)…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_unpacklo_ps","","Unpacks and interleave single-precision (32-bit)…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_testz_si256","","Computes the bitwise AND of 256 bits (representing integer…",null,[[["__m256i"]],["i32"]]],[5,"_mm256_testc_si256","","Computes the bitwise AND of 256 bits (representing integer…",null,[[["__m256i"]],["i32"]]],[5,"_mm256_testnzc_si256","","Computes the bitwise AND of 256 bits (representing integer…",null,[[["__m256i"]],["i32"]]],[5,"_mm256_testz_pd","","Computes the bitwise AND of 256 bits (representing…",null,[[["__m256d"]],["i32"]]],[5,"_mm256_testc_pd","","Computes the bitwise AND of 256 bits (representing…",null,[[["__m256d"]],["i32"]]],[5,"_mm256_testnzc_pd","","Computes the bitwise AND of 256 bits (representing…",null,[[["__m256d"]],["i32"]]],[5,"_mm_testz_pd","","Computes the bitwise AND of 128 bits (representing…",null,[[["__m128d"]],["i32"]]],[5,"_mm_testc_pd","","Computes the bitwise AND of 128 bits (representing…",null,[[["__m128d"]],["i32"]]],[5,"_mm_testnzc_pd","","Computes the bitwise AND of 128 bits (representing…",null,[[["__m128d"]],["i32"]]],[5,"_mm256_testz_ps","","Computes the bitwise AND of 256 bits (representing…",null,[[["__m256"]],["i32"]]],[5,"_mm256_testc_ps","","Computes the bitwise AND of 256 bits (representing…",null,[[["__m256"]],["i32"]]],[5,"_mm256_testnzc_ps","","Computes the bitwise AND of 256 bits (representing…",null,[[["__m256"]],["i32"]]],[5,"_mm_testz_ps","","Computes the bitwise AND of 128 bits (representing…",null,[[["__m128"]],["i32"]]],[5,"_mm_testc_ps","","Computes the bitwise AND of 128 bits (representing…",null,[[["__m128"]],["i32"]]],[5,"_mm_testnzc_ps","","Computes the bitwise AND of 128 bits (representing…",null,[[["__m128"]],["i32"]]],[5,"_mm256_movemask_pd","","Sets each bit of the returned mask based on the most…",null,[[["__m256d"]],["i32"]]],[5,"_mm256_movemask_ps","","Sets each bit of the returned mask based on the most…",null,[[["__m256"]],["i32"]]],[5,"_mm256_setzero_pd","","Returns vector of type __m256d with all elements set to…",null,[[],["__m256d"]]],[5,"_mm256_setzero_ps","","Returns vector of type __m256 with all elements set to zero.",null,[[],["__m256"]]],[5,"_mm256_setzero_si256","","Returns vector of type __m256i with all elements set to…",null,[[],["__m256i"]]],[5,"_mm256_set_pd","","Sets packed double-precision (64-bit) floating-point…",null,[[["f64"]],["__m256d"]]],[5,"_mm256_set_ps","","Sets packed single-precision (32-bit) floating-point…",null,[[["f32"]],["__m256"]]],[5,"_mm256_set_epi8","","Sets packed 8-bit integers in returned vector with the…",null,[[["i8"]],["__m256i"]]],[5,"_mm256_set_epi16","","Sets packed 16-bit integers in returned vector with the…",null,[[["i16"]],["__m256i"]]],[5,"_mm256_set_epi32","","Sets packed 32-bit integers in returned vector with the…",null,[[["i32"]],["__m256i"]]],[5,"_mm256_set_epi64x","","Sets packed 64-bit integers in returned vector with the…",null,[[["i64"]],["__m256i"]]],[5,"_mm256_setr_pd","","Sets packed double-precision (64-bit) floating-point…",null,[[["f64"]],["__m256d"]]],[5,"_mm256_setr_ps","","Sets packed single-precision (32-bit) floating-point…",null,[[["f32"]],["__m256"]]],[5,"_mm256_setr_epi8","","Sets packed 8-bit integers in returned vector with the…",null,[[["i8"]],["__m256i"]]],[5,"_mm256_setr_epi16","","Sets packed 16-bit integers in returned vector with the…",null,[[["i16"]],["__m256i"]]],[5,"_mm256_setr_epi32","","Sets packed 32-bit integers in returned vector with the…",null,[[["i32"]],["__m256i"]]],[5,"_mm256_setr_epi64x","","Sets packed 64-bit integers in returned vector with the…",null,[[["i64"]],["__m256i"]]],[5,"_mm256_set1_pd","","Broadcasts double-precision (64-bit) floating-point value…",null,[[["f64"]],["__m256d"]]],[5,"_mm256_set1_ps","","Broadcasts single-precision (32-bit) floating-point value…",null,[[["f32"]],["__m256"]]],[5,"_mm256_set1_epi8","","Broadcasts 8-bit integer `a` to all elements of returned…",null,[[["i8"]],["__m256i"]]],[5,"_mm256_set1_epi16","","Broadcasts 16-bit integer `a` to all all elements of…",null,[[["i16"]],["__m256i"]]],[5,"_mm256_set1_epi32","","Broadcasts 32-bit integer `a` to all elements of returned…",null,[[["i32"]],["__m256i"]]],[5,"_mm256_set1_epi64x","","Broadcasts 64-bit integer `a` to all elements of returned…",null,[[["i64"]],["__m256i"]]],[5,"_mm256_castpd_ps","","Cast vector of type __m256d to type __m256.",null,[[["__m256d"]],["__m256"]]],[5,"_mm256_castps_pd","","Cast vector of type __m256 to type __m256d.",null,[[["__m256"]],["__m256d"]]],[5,"_mm256_castps_si256","","Casts vector of type __m256 to type __m256i.",null,[[["__m256"]],["__m256i"]]],[5,"_mm256_castsi256_ps","","Casts vector of type __m256i to type __m256.",null,[[["__m256i"]],["__m256"]]],[5,"_mm256_castpd_si256","","Casts vector of type __m256d to type __m256i.",null,[[["__m256d"]],["__m256i"]]],[5,"_mm256_castsi256_pd","","Casts vector of type __m256i to type __m256d.",null,[[["__m256i"]],["__m256d"]]],[5,"_mm256_castps256_ps128","","Casts vector of type __m256 to type __m128.",null,[[["__m256"]],["__m128"]]],[5,"_mm256_castpd256_pd128","","Casts vector of type __m256d to type __m128d.",null,[[["__m256d"]],["__m128d"]]],[5,"_mm256_castsi256_si128","","Casts vector of type __m256i to type __m128i.",null,[[["__m256i"]],["__m128i"]]],[5,"_mm256_castps128_ps256","","Casts vector of type __m128 to type __m256; the upper 128…",null,[[["__m128"]],["__m256"]]],[5,"_mm256_castpd128_pd256","","Casts vector of type __m128d to type __m256d; the upper…",null,[[["__m128d"]],["__m256d"]]],[5,"_mm256_castsi128_si256","","Casts vector of type __m128i to type __m256i; the upper…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_zextps128_ps256","","Constructs a 256-bit floating-point vector of `[8 x…",null,[[["__m128"]],["__m256"]]],[5,"_mm256_zextsi128_si256","","Constructs a 256-bit integer vector from a 128-bit integer…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_zextpd128_pd256","","Constructs a 256-bit floating-point vector of `[4 x…",null,[[["__m128d"]],["__m256d"]]],[5,"_mm256_undefined_ps","","Returns vector of type `__m256` with undefined elements.",null,[[],["__m256"]]],[5,"_mm256_undefined_pd","","Returns vector of type `__m256d` with undefined elements.",null,[[],["__m256d"]]],[5,"_mm256_undefined_si256","","Returns vector of type __m256i with undefined elements.",null,[[],["__m256i"]]],[5,"_mm256_set_m128","","Sets packed __m256 returned vector with the supplied values.",null,[[["__m128"]],["__m256"]]],[5,"_mm256_set_m128d","","Sets packed __m256d returned vector with the supplied…",null,[[["__m128d"]],["__m256d"]]],[5,"_mm256_set_m128i","","Sets packed __m256i returned vector with the supplied…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_setr_m128","","Sets packed __m256 returned vector with the supplied values.",null,[[["__m128"]],["__m256"]]],[5,"_mm256_setr_m128d","","Sets packed __m256d returned vector with the supplied…",null,[[["__m128d"]],["__m256d"]]],[5,"_mm256_setr_m128i","","Sets packed __m256i returned vector with the supplied…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_loadu2_m128","","Loads two 128-bit values (composed of 4 packed…",null,[[],["__m256"]]],[5,"_mm256_loadu2_m128d","","Loads two 128-bit values (composed of 2 packed…",null,[[],["__m256d"]]],[5,"_mm256_loadu2_m128i","","Loads two 128-bit values (composed of integer data) from…",null,[[],["__m256i"]]],[5,"_mm256_storeu2_m128","","Stores the high and low 128-bit halves (each composed of 4…",null,[[["__m256"]]]],[5,"_mm256_storeu2_m128d","","Stores the high and low 128-bit halves (each composed of 2…",null,[[["__m256d"]]]],[5,"_mm256_storeu2_m128i","","Stores the high and low 128-bit halves (each composed of…",null,[[["__m256i"]]]],[5,"_mm256_cvtss_f32","","Returns the first element of the input vector of `[8 x…",null,[[["__m256"]],["f32"]]],[5,"_mm256_abs_epi32","","Computes the absolute values of packed 32-bit integers in…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_abs_epi16","","Computes the absolute values of packed 16-bit integers in…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_abs_epi8","","Computes the absolute values of packed 8-bit integers in…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_add_epi64","","Adds packed 64-bit integers in `a` and `b`.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_add_epi32","","Adds packed 32-bit integers in `a` and `b`.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_add_epi16","","Adds packed 16-bit integers in `a` and `b`.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_add_epi8","","Adds packed 8-bit integers in `a` and `b`.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_adds_epi8","","Adds packed 8-bit integers in `a` and `b` using saturation.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_adds_epi16","","Adds packed 16-bit integers in `a` and `b` using saturation.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_adds_epu8","","Adds packed unsigned 8-bit integers in `a` and `b` using…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_adds_epu16","","Adds packed unsigned 16-bit integers in `a` and `b` using…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_alignr_epi8","","Concatenates pairs of 16-byte blocks in `a` and `b` into a…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_and_si256","","Computes the bitwise AND of 256 bits (representing integer…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_andnot_si256","","Computes the bitwise NOT of 256 bits (representing integer…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_avg_epu16","","Averages packed unsigned 16-bit integers in `a` and `b`.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_avg_epu8","","Averages packed unsigned 8-bit integers in `a` and `b`.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_blend_epi32","","Blends packed 32-bit integers from `a` and `b` using…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_blend_epi32","","Blends packed 32-bit integers from `a` and `b` using…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_blend_epi16","","Blends packed 16-bit integers from `a` and `b` using…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_blendv_epi8","","Blends packed 8-bit integers from `a` and `b` using `mask`.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_broadcastb_epi8","","Broadcasts the low packed 8-bit integer from `a` to all…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_broadcastb_epi8","","Broadcasts the low packed 8-bit integer from `a` to all…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm_broadcastd_epi32","","Broadcasts the low packed 32-bit integer from `a` to all…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_broadcastd_epi32","","Broadcasts the low packed 32-bit integer from `a` to all…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm_broadcastq_epi64","","Broadcasts the low packed 64-bit integer from `a` to all…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_broadcastq_epi64","","Broadcasts the low packed 64-bit integer from `a` to all…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm_broadcastsd_pd","","Broadcasts the low double-precision (64-bit)…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm256_broadcastsd_pd","","Broadcasts the low double-precision (64-bit)…",null,[[["__m128d"]],["__m256d"]]],[5,"_mm256_broadcastsi128_si256","","Broadcasts 128 bits of integer data from a to all 128-bit…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm_broadcastss_ps","","Broadcasts the low single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm256_broadcastss_ps","","Broadcasts the low single-precision (32-bit)…",null,[[["__m128"]],["__m256"]]],[5,"_mm_broadcastw_epi16","","Broadcasts the low packed 16-bit integer from a to all…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_broadcastw_epi16","","Broadcasts the low packed 16-bit integer from a to all…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cmpeq_epi64","","Compares packed 64-bit integers in `a` and `b` for equality.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_cmpeq_epi32","","Compares packed 32-bit integers in `a` and `b` for equality.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_cmpeq_epi16","","Compares packed 16-bit integers in `a` and `b` for equality.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_cmpeq_epi8","","Compares packed 8-bit integers in `a` and `b` for equality.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_cmpgt_epi64","","Compares packed 64-bit integers in `a` and `b` for…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_cmpgt_epi32","","Compares packed 32-bit integers in `a` and `b` for…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_cmpgt_epi16","","Compares packed 16-bit integers in `a` and `b` for…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_cmpgt_epi8","","Compares packed 8-bit integers in `a` and `b` for…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_cvtepi16_epi32","","Sign-extend 16-bit integers to 32-bit integers.",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepi16_epi64","","Sign-extend 16-bit integers to 64-bit integers.",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepi32_epi64","","Sign-extend 32-bit integers to 64-bit integers.",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepi8_epi16","","Sign-extend 8-bit integers to 16-bit integers.",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepi8_epi32","","Sign-extend 8-bit integers to 32-bit integers.",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepi8_epi64","","Sign-extend 8-bit integers to 64-bit integers.",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepu16_epi32","","Zeroes extend packed unsigned 16-bit integers in `a` to…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepu16_epi64","","Zero-extend the lower four unsigned 16-bit integers in `a`…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepu32_epi64","","Zero-extend unsigned 32-bit integers in `a` to 64-bit…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepu8_epi16","","Zero-extend unsigned 8-bit integers in `a` to 16-bit…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepu8_epi32","","Zero-extend the lower eight unsigned 8-bit integers in `a`…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepu8_epi64","","Zero-extend the lower four unsigned 8-bit integers in `a`…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_extracti128_si256","","Extracts 128 bits (of integer data) from `a` selected with…",null,[[["__m256i"],["i32"]],["__m128i"]]],[5,"_mm256_hadd_epi16","","Horizontally adds adjacent pairs of 16-bit integers in `a`…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_hadd_epi32","","Horizontally adds adjacent pairs of 32-bit integers in `a`…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_hadds_epi16","","Horizontally adds adjacent pairs of 16-bit integers in `a`…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_hsub_epi16","","Horizontally subtract adjacent pairs of 16-bit integers in…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_hsub_epi32","","Horizontally subtract adjacent pairs of 32-bit integers in…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_hsubs_epi16","","Horizontally subtract adjacent pairs of 16-bit integers in…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_i32gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_mask_i32gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_i32gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_mask_i32gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_i32gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m128"]]],[5,"_mm_mask_i32gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["__m128"],["i32"]],["__m128"]]],[5,"_mm256_i32gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m256i"],["i32"]],["__m256"]]],[5,"_mm256_mask_i32gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m256"],["i32"],["__m256i"]],["__m256"]]],[5,"_mm_i32gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_mask_i32gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_i32gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m256i"]]],[5,"_mm256_mask_i32gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"],["__m256i"]],["__m256i"]]],[5,"_mm_i32gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m128d"]]],[5,"_mm_mask_i32gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["__m128d"],["i32"]],["__m128d"]]],[5,"_mm256_i32gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m256d"]]],[5,"_mm256_mask_i32gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m256d"],["__m128i"],["i32"]],["__m256d"]]],[5,"_mm_i64gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_mask_i64gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_i64gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m256i"],["i32"]],["__m128i"]]],[5,"_mm256_mask_i64gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"],["__m256i"]],["__m128i"]]],[5,"_mm_i64gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m128"]]],[5,"_mm_mask_i64gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["__m128"],["i32"]],["__m128"]]],[5,"_mm256_i64gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m256i"],["i32"]],["__m128"]]],[5,"_mm256_mask_i64gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m128"],["i32"],["__m256i"]],["__m128"]]],[5,"_mm_i64gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_mask_i64gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_i64gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_mask_i64gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_i64gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m128d"]]],[5,"_mm_mask_i64gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["__m128d"],["i32"]],["__m128d"]]],[5,"_mm256_i64gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m256i"],["i32"]],["__m256d"]]],[5,"_mm256_mask_i64gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m256d"],["i32"],["__m256i"]],["__m256d"]]],[5,"_mm256_inserti128_si256","","Copies `a` to `dst`, then insert 128 bits (of integer…",null,[[["__m128i"],["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_madd_epi16","","Multiplies packed signed 16-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_maddubs_epi16","","Vertically multiplies each unsigned 8-bit integer from `a`…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_maskload_epi32","","Loads packed 32-bit integers from memory pointed by…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_maskload_epi32","","Loads packed 32-bit integers from memory pointed by…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_maskload_epi64","","Loads packed 64-bit integers from memory pointed by…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_maskload_epi64","","Loads packed 64-bit integers from memory pointed by…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_maskstore_epi32","","Stores packed 32-bit integers from `a` into memory pointed…",null,[[["__m128i"]]]],[5,"_mm256_maskstore_epi32","","Stores packed 32-bit integers from `a` into memory pointed…",null,[[["__m256i"]]]],[5,"_mm_maskstore_epi64","","Stores packed 64-bit integers from `a` into memory pointed…",null,[[["__m128i"]]]],[5,"_mm256_maskstore_epi64","","Stores packed 64-bit integers from `a` into memory pointed…",null,[[["__m256i"]]]],[5,"_mm256_max_epi16","","Compares packed 16-bit integers in `a` and `b`, and…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_max_epi32","","Compares packed 32-bit integers in `a` and `b`, and…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_max_epi8","","Compares packed 8-bit integers in `a` and `b`, and returns…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_max_epu16","","Compares packed unsigned 16-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_max_epu32","","Compares packed unsigned 32-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_max_epu8","","Compares packed unsigned 8-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_min_epi16","","Compares packed 16-bit integers in `a` and `b`, and…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_min_epi32","","Compares packed 32-bit integers in `a` and `b`, and…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_min_epi8","","Compares packed 8-bit integers in `a` and `b`, and returns…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_min_epu16","","Compares packed unsigned 16-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_min_epu32","","Compares packed unsigned 32-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_min_epu8","","Compares packed unsigned 8-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_movemask_epi8","","Creates mask from the most significant bit of each 8-bit…",null,[[["__m256i"]],["i32"]]],[5,"_mm256_mpsadbw_epu8","","Computes the sum of absolute differences (SADs) of…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_mul_epi32","","Multiplies the low 32-bit integers from each packed 64-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_mul_epu32","","Multiplies the low unsigned 32-bit integers from each…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_mulhi_epi16","","Multiplies the packed 16-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_mulhi_epu16","","Multiplies the packed unsigned 16-bit integers in `a` and…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_mullo_epi16","","Multiplies the packed 16-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_mullo_epi32","","Multiplies the packed 32-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_mulhrs_epi16","","Multiplies packed 16-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_or_si256","","Computes the bitwise OR of 256 bits (representing integer…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_packs_epi16","","Converts packed 16-bit integers from `a` and `b` to packed…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_packs_epi32","","Converts packed 32-bit integers from `a` and `b` to packed…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_packus_epi16","","Converts packed 16-bit integers from `a` and `b` to packed…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_packus_epi32","","Converts packed 32-bit integers from `a` and `b` to packed…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_permutevar8x32_epi32","","Permutes packed 32-bit integers from `a` according to the…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_permute4x64_epi64","","Permutes 64-bit integers from `a` using control mask `imm8`.",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_permute2x128_si256","","Shuffles 128-bits of integer data selected by `imm8` from…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_permute4x64_pd","","Shuffles 64-bit floating-point elements in `a` across…",null,[[["__m256d"],["i32"]],["__m256d"]]],[5,"_mm256_permutevar8x32_ps","","Shuffles eight 32-bit foating-point elements in `a` across…",null,[[["__m256"],["__m256i"]],["__m256"]]],[5,"_mm256_sad_epu8","","Computes the absolute differences of packed unsigned 8-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_shuffle_epi8","","Shuffles bytes from `a` according to the content of `b`.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_shuffle_epi32","","Shuffles 32-bit integers in 128-bit lanes of `a` using the…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_shufflehi_epi16","","Shuffles 16-bit integers in the high 64 bits of 128-bit…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_shufflelo_epi16","","Shuffles 16-bit integers in the low 64 bits of 128-bit…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_sign_epi16","","Negates packed 16-bit integers in `a` when the…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sign_epi32","","Negates packed 32-bit integers in `a` when the…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sign_epi8","","Negates packed 8-bit integers in `a` when the…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sll_epi16","","Shifts packed 16-bit integers in `a` left by `count` while…",null,[[["__m128i"],["__m256i"]],["__m256i"]]],[5,"_mm256_sll_epi32","","Shifts packed 32-bit integers in `a` left by `count` while…",null,[[["__m128i"],["__m256i"]],["__m256i"]]],[5,"_mm256_sll_epi64","","Shifts packed 64-bit integers in `a` left by `count` while…",null,[[["__m128i"],["__m256i"]],["__m256i"]]],[5,"_mm256_slli_epi16","","Shifts packed 16-bit integers in `a` left by `imm8` while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_slli_epi32","","Shifts packed 32-bit integers in `a` left by `imm8` while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_slli_epi64","","Shifts packed 64-bit integers in `a` left by `imm8` while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_slli_si256","","Shifts 128-bit lanes in `a` left by `imm8` bytes while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_bslli_epi128","","Shifts 128-bit lanes in `a` left by `imm8` bytes while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_sllv_epi32","","Shifts packed 32-bit integers in `a` left by the amount…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_sllv_epi32","","Shifts packed 32-bit integers in `a` left by the amount…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_sllv_epi64","","Shifts packed 64-bit integers in `a` left by the amount…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_sllv_epi64","","Shifts packed 64-bit integers in `a` left by the amount…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sra_epi16","","Shifts packed 16-bit integers in `a` right by `count`…",null,[[["__m128i"],["__m256i"]],["__m256i"]]],[5,"_mm256_sra_epi32","","Shifts packed 32-bit integers in `a` right by `count`…",null,[[["__m128i"],["__m256i"]],["__m256i"]]],[5,"_mm256_srai_epi16","","Shifts packed 16-bit integers in `a` right by `imm8` while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_srai_epi32","","Shifts packed 32-bit integers in `a` right by `imm8` while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_srav_epi32","","Shifts packed 32-bit integers in `a` right by the amount…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_srav_epi32","","Shifts packed 32-bit integers in `a` right by the amount…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_srli_si256","","Shifts 128-bit lanes in `a` right by `imm8` bytes while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_bsrli_epi128","","Shifts 128-bit lanes in `a` right by `imm8` bytes while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_srl_epi16","","Shifts packed 16-bit integers in `a` right by `count`…",null,[[["__m128i"],["__m256i"]],["__m256i"]]],[5,"_mm256_srl_epi32","","Shifts packed 32-bit integers in `a` right by `count`…",null,[[["__m128i"],["__m256i"]],["__m256i"]]],[5,"_mm256_srl_epi64","","Shifts packed 64-bit integers in `a` right by `count`…",null,[[["__m128i"],["__m256i"]],["__m256i"]]],[5,"_mm256_srli_epi16","","Shifts packed 16-bit integers in `a` right by `imm8` while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_srli_epi32","","Shifts packed 32-bit integers in `a` right by `imm8` while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_srli_epi64","","Shifts packed 64-bit integers in `a` right by `imm8` while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_srlv_epi32","","Shifts packed 32-bit integers in `a` right by the amount…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_srlv_epi32","","Shifts packed 32-bit integers in `a` right by the amount…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_srlv_epi64","","Shifts packed 64-bit integers in `a` right by the amount…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_srlv_epi64","","Shifts packed 64-bit integers in `a` right by the amount…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sub_epi16","","Subtract packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sub_epi32","","Subtract packed 32-bit integers in `b` from packed 16-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sub_epi64","","Subtract packed 64-bit integers in `b` from packed 16-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sub_epi8","","Subtract packed 8-bit integers in `b` from packed 16-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_subs_epi16","","Subtract packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_subs_epi8","","Subtract packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_subs_epu16","","Subtract packed unsigned 16-bit integers in `b` from…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_subs_epu8","","Subtract packed unsigned 8-bit integers in `b` from packed…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_unpackhi_epi8","","Unpacks and interleave 8-bit integers from the high half…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_unpacklo_epi8","","Unpacks and interleave 8-bit integers from the low half of…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_unpackhi_epi16","","Unpacks and interleave 16-bit integers from the high half…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_unpacklo_epi16","","Unpacks and interleave 16-bit integers from the low half…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_unpackhi_epi32","","Unpacks and interleave 32-bit integers from the high half…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_unpacklo_epi32","","Unpacks and interleave 32-bit integers from the low half…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_unpackhi_epi64","","Unpacks and interleave 64-bit integers from the high half…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_unpacklo_epi64","","Unpacks and interleave 64-bit integers from the low half…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_xor_si256","","Computes the bitwise XOR of 256 bits (representing integer…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_extract_epi8","","Extracts an 8-bit integer from `a`, selected with `imm8`.…",null,[[["__m256i"],["i32"]],["i8"]]],[5,"_mm256_extract_epi16","","Extracts a 16-bit integer from `a`, selected with `imm8`.…",null,[[["__m256i"],["i32"]],["i16"]]],[5,"_mm256_extract_epi32","","Extracts a 32-bit integer from `a`, selected with `imm8`.",null,[[["__m256i"],["i32"]],["i32"]]],[5,"_mm256_cvtsd_f64","","Returns the first element of the input vector of `[4 x…",null,[[["__m256d"]],["f64"]]],[5,"_mm256_cvtsi256_si32","","Returns the first element of the input vector of `[8 x…",null,[[["__m256i"]],["i32"]]],[5,"_mm_fmadd_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm256_fmadd_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm_fmadd_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm256_fmadd_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm_fmadd_sd","","Multiplies the lower double-precision (64-bit)…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_fmadd_ss","","Multiplies the lower single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_fmaddsub_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm256_fmaddsub_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm_fmaddsub_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm256_fmaddsub_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm_fmsub_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm256_fmsub_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm_fmsub_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm256_fmsub_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm_fmsub_sd","","Multiplies the lower double-precision (64-bit)…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_fmsub_ss","","Multiplies the lower single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_fmsubadd_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm256_fmsubadd_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm_fmsubadd_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm256_fmsubadd_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm_fnmadd_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm256_fnmadd_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm_fnmadd_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm256_fnmadd_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm_fnmadd_sd","","Multiplies the lower double-precision (64-bit)…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_fnmadd_ss","","Multiplies the lower single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_fnmsub_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm256_fnmsub_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm_fnmsub_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm256_fnmsub_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm_fnmsub_sd","","Multiplies the lower double-precision (64-bit)…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_fnmsub_ss","","Multiplies the lower single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_lzcnt_u32","","Counts the leading most significant zero bits.",null,[[["u32"]],["u32"]]],[5,"_popcnt32","","Counts the bits that are set.",null,[[["i32"]],["i32"]]],[5,"_bextr_u32","","Extracts bits in range [`start`, `start` + `length`) from…",null,[[["u32"]],["u32"]]],[5,"_bextr2_u32","","Extracts bits of `a` specified by `control` into the least…",null,[[["u32"]],["u32"]]],[5,"_andn_u32","","Bitwise logical `AND` of inverted `a` with `b`.",null,[[["u32"]],["u32"]]],[5,"_blsi_u32","","Extracts lowest set isolated bit.",null,[[["u32"]],["u32"]]],[5,"_blsmsk_u32","","Gets mask up to lowest set bit.",null,[[["u32"]],["u32"]]],[5,"_blsr_u32","","Resets the lowest set bit of `x`.",null,[[["u32"]],["u32"]]],[5,"_tzcnt_u32","","Counts the number of trailing least significant zero bits.",null,[[["u32"]],["u32"]]],[5,"_mm_tzcnt_32","","Counts the number of trailing least significant zero bits.",null,[[["u32"]],["i32"]]],[5,"_mulx_u32","","Unsigned multiply without affecting flags.",null,[[["u32"],["u32"]],["u32"]]],[5,"_bzhi_u32","","Zeroes higher bits of `a` >= `index`.",null,[[["u32"]],["u32"]]],[5,"_pdep_u32","","Scatter contiguous low order bits of `a` to the result at…",null,[[["u32"]],["u32"]]],[5,"_pext_u32","","Gathers the bits of `x` specified by the `mask` into the…",null,[[["u32"]],["u32"]]],[5,"_mm_extract_si64","","Extracts the bit range specified by `y` from the lower 64…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_insert_si64","","Inserts the `[length:0]` bits of `y` into `x` at `index`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_stream_sd","","Non-temporal store of `a.0` into `p`.",null,[[["__m128d"]]]],[5,"_mm_stream_ss","","Non-temporal store of `a.0` into `p`.",null,[[["__m128"]]]],[5,"_blcfill_u32","","Clears all bits below the least significant zero bit of `x`.",null,[[["u32"]],["u32"]]],[5,"_blcfill_u64","","Clears all bits below the least significant zero bit of `x`.",null,[[["u64"]],["u64"]]],[5,"_blci_u32","","Sets all bits of `x` to 1 except for the least significant…",null,[[["u32"]],["u32"]]],[5,"_blci_u64","","Sets all bits of `x` to 1 except for the least significant…",null,[[["u64"]],["u64"]]],[5,"_blcic_u32","","Sets the least significant zero bit of `x` and clears all…",null,[[["u32"]],["u32"]]],[5,"_blcic_u64","","Sets the least significant zero bit of `x` and clears all…",null,[[["u64"]],["u64"]]],[5,"_blcmsk_u32","","Sets the least significant zero bit of `x` and clears all…",null,[[["u32"]],["u32"]]],[5,"_blcmsk_u64","","Sets the least significant zero bit of `x` and clears all…",null,[[["u64"]],["u64"]]],[5,"_blcs_u32","","Sets the least significant zero bit of `x`.",null,[[["u32"]],["u32"]]],[5,"_blcs_u64","","Sets the least significant zero bit of `x`.",null,[[["u64"]],["u64"]]],[5,"_blsfill_u32","","Sets all bits of `x` below the least significant one.",null,[[["u32"]],["u32"]]],[5,"_blsfill_u64","","Sets all bits of `x` below the least significant one.",null,[[["u64"]],["u64"]]],[5,"_blsic_u32","","Clears least significant bit and sets all other bits.",null,[[["u32"]],["u32"]]],[5,"_blsic_u64","","Clears least significant bit and sets all other bits.",null,[[["u64"]],["u64"]]],[5,"_t1mskc_u32","","Clears all bits below the least significant zero of `x`…",null,[[["u32"]],["u32"]]],[5,"_t1mskc_u64","","Clears all bits below the least significant zero of `x`…",null,[[["u64"]],["u64"]]],[5,"_tzmsk_u32","","Sets all bits below the least significant one of `x` and…",null,[[["u32"]],["u32"]]],[5,"_tzmsk_u64","","Sets all bits below the least significant one of `x` and…",null,[[["u64"]],["u64"]]],[5,"_mm_setzero_si64","","Constructs a 64-bit integer vector initialized to zero.",null,[[],["__m64"]]],[5,"_mm_add_pi8","","Adds packed 8-bit integers in `a` and `b`.",null,[[["__m64"]],["__m64"]]],[5,"_m_paddb","","Adds packed 8-bit integers in `a` and `b`.",null,[[["__m64"]],["__m64"]]],[5,"_mm_add_pi16","","Adds packed 16-bit integers in `a` and `b`.",null,[[["__m64"]],["__m64"]]],[5,"_m_paddw","","Adds packed 16-bit integers in `a` and `b`.",null,[[["__m64"]],["__m64"]]],[5,"_mm_add_pi32","","Adds packed 32-bit integers in `a` and `b`.",null,[[["__m64"]],["__m64"]]],[5,"_m_paddd","","Adds packed 32-bit integers in `a` and `b`.",null,[[["__m64"]],["__m64"]]],[5,"_mm_adds_pi8","","Adds packed 8-bit integers in `a` and `b` using saturation.",null,[[["__m64"]],["__m64"]]],[5,"_m_paddsb","","Adds packed 8-bit integers in `a` and `b` using saturation.",null,[[["__m64"]],["__m64"]]],[5,"_mm_adds_pi16","","Adds packed 16-bit integers in `a` and `b` using saturation.",null,[[["__m64"]],["__m64"]]],[5,"_m_paddsw","","Adds packed 16-bit integers in `a` and `b` using saturation.",null,[[["__m64"]],["__m64"]]],[5,"_mm_adds_pu8","","Adds packed unsigned 8-bit integers in `a` and `b` using…",null,[[["__m64"]],["__m64"]]],[5,"_m_paddusb","","Adds packed unsigned 8-bit integers in `a` and `b` using…",null,[[["__m64"]],["__m64"]]],[5,"_mm_adds_pu16","","Adds packed unsigned 16-bit integers in `a` and `b` using…",null,[[["__m64"]],["__m64"]]],[5,"_m_paddusw","","Adds packed unsigned 16-bit integers in `a` and `b` using…",null,[[["__m64"]],["__m64"]]],[5,"_mm_sub_pi8","","Subtract packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m64"]],["__m64"]]],[5,"_m_psubb","","Subtract packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m64"]],["__m64"]]],[5,"_mm_sub_pi16","","Subtract packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m64"]],["__m64"]]],[5,"_m_psubw","","Subtract packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m64"]],["__m64"]]],[5,"_mm_sub_pi32","","Subtract packed 32-bit integers in `b` from packed 32-bit…",null,[[["__m64"]],["__m64"]]],[5,"_m_psubd","","Subtract packed 32-bit integers in `b` from packed 32-bit…",null,[[["__m64"]],["__m64"]]],[5,"_mm_subs_pi8","","Subtract packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m64"]],["__m64"]]],[5,"_m_psubsb","","Subtract packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m64"]],["__m64"]]],[5,"_mm_subs_pi16","","Subtract packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m64"]],["__m64"]]],[5,"_m_psubsw","","Subtract packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m64"]],["__m64"]]],[5,"_mm_subs_pu8","","Subtract packed unsigned 8-bit integers in `b` from packed…",null,[[["__m64"]],["__m64"]]],[5,"_m_psubusb","","Subtract packed unsigned 8-bit integers in `b` from packed…",null,[[["__m64"]],["__m64"]]],[5,"_mm_subs_pu16","","Subtract packed unsigned 16-bit integers in `b` from…",null,[[["__m64"]],["__m64"]]],[5,"_m_psubusw","","Subtract packed unsigned 16-bit integers in `b` from…",null,[[["__m64"]],["__m64"]]],[5,"_mm_packs_pi16","","Converts packed 16-bit integers from `a` and `b` to packed…",null,[[["__m64"]],["__m64"]]],[5,"_mm_packs_pi32","","Converts packed 32-bit integers from `a` and `b` to packed…",null,[[["__m64"]],["__m64"]]],[5,"_mm_cmpgt_pi8","","Compares whether each element of `a` is greater than the…",null,[[["__m64"]],["__m64"]]],[5,"_mm_cmpgt_pi16","","Compares whether each element of `a` is greater than the…",null,[[["__m64"]],["__m64"]]],[5,"_mm_cmpgt_pi32","","Compares whether each element of `a` is greater than the…",null,[[["__m64"]],["__m64"]]],[5,"_mm_unpackhi_pi16","","Unpacks the upper two elements from two `i16x4` vectors…",null,[[["__m64"]],["__m64"]]],[5,"_mm_unpackhi_pi8","","Unpacks the upper four elements from two `i8x8` vectors…",null,[[["__m64"]],["__m64"]]],[5,"_mm_unpacklo_pi8","","Unpacks the lower four elements from two `i8x8` vectors…",null,[[["__m64"]],["__m64"]]],[5,"_mm_unpacklo_pi16","","Unpacks the lower two elements from two `i16x4` vectors…",null,[[["__m64"]],["__m64"]]],[5,"_mm_unpackhi_pi32","","Unpacks the upper element from two `i32x2` vectors and…",null,[[["__m64"]],["__m64"]]],[5,"_mm_unpacklo_pi32","","Unpacks the lower element from two `i32x2` vectors and…",null,[[["__m64"]],["__m64"]]],[5,"_mm_set_pi16","","Sets packed 16-bit integers in dst with the supplied values.",null,[[["i16"]],["__m64"]]],[5,"_mm_set_pi32","","Sets packed 32-bit integers in dst with the supplied values.",null,[[["i32"]],["__m64"]]],[5,"_mm_set_pi8","","Sets packed 8-bit integers in dst with the supplied values.",null,[[["i8"]],["__m64"]]],[5,"_mm_set1_pi16","","Broadcasts 16-bit integer a to all all elements of dst.",null,[[["i16"]],["__m64"]]],[5,"_mm_set1_pi32","","Broadcasts 32-bit integer a to all all elements of dst.",null,[[["i32"]],["__m64"]]],[5,"_mm_set1_pi8","","Broadcasts 8-bit integer a to all all elements of dst.",null,[[["i8"]],["__m64"]]],[5,"_mm_setr_pi16","","Sets packed 16-bit integers in dst with the supplied…",null,[[["i16"]],["__m64"]]],[5,"_mm_setr_pi32","","Sets packed 32-bit integers in dst with the supplied…",null,[[["i32"]],["__m64"]]],[5,"_mm_setr_pi8","","Sets packed 8-bit integers in dst with the supplied values…",null,[[["i8"]],["__m64"]]],[5,"_mm_empty","","Empty the MMX state, which marks the x87 FPU registers as…",null,[[]]],[5,"_m_empty","","Empty the MMX state, which marks the x87 FPU registers as…",null,[[]]],[5,"_mm_cvtsi32_si64","","Copies 32-bit integer `a` to the lower elements of the…",null,[[["i32"]],["__m64"]]],[5,"_mm_cvtsi64_si32","","Return the lower 32-bit integer in `a`.",null,[[["__m64"]],["i32"]]],[5,"_mm_clmulepi64_si128","","Performs a carry-less multiplication of two 64-bit…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_aesdec_si128","","Performs one round of an AES decryption flow on data…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_aesdeclast_si128","","Performs the last round of an AES decryption flow on data…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_aesenc_si128","","Performs one round of an AES encryption flow on data…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_aesenclast_si128","","Performs the last round of an AES encryption flow on data…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_aesimc_si128","","Performs the `InvMixColumns` transformation on `a`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_aeskeygenassist_si128","","Assist in expanding the AES cipher key.",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_rdrand16_step","","Read a hardware generated 16-bit random value and store…",null,[[["u16"]],["i32"]]],[5,"_rdrand32_step","","Read a hardware generated 32-bit random value and store…",null,[[["u32"]],["i32"]]],[5,"_rdseed16_step","","Read a 16-bit NIST SP800-90B and SP800-90C compliant…",null,[[["u16"]],["i32"]]],[5,"_rdseed32_step","","Read a 32-bit NIST SP800-90B and SP800-90C compliant…",null,[[["u32"]],["i32"]]],[5,"_mm_sha1msg1_epu32","","Performs an intermediate calculation for the next four…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sha1msg2_epu32","","Performs the final calculation for the next four SHA1…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sha1nexte_epu32","","Calculate SHA1 state variable E after four rounds of…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sha1rnds4_epu32","","Performs four rounds of SHA1 operation using an initial…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_sha256msg1_epu32","","Performs an intermediate calculation for the next four…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sha256msg2_epu32","","Performs the final calculation for the next four SHA256…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sha256rnds2_epu32","","Performs 2 rounds of SHA256 operation using an initial…",null,[[["__m128i"]],["__m128i"]]],[5,"_addcarry_u32","","Adds unsigned 32-bit integers `a` and `b` with unsigned…",null,[[["u32"],["u32"],["u8"]],["u8"]]],[5,"_addcarryx_u32","","Adds unsigned 32-bit integers `a` and `b` with unsigned…",null,[[["u32"],["u32"],["u8"]],["u8"]]],[5,"_subborrow_u32","","Adds unsigned 32-bit integers `a` and `b` with unsigned…",null,[[["u32"],["u32"],["u8"]],["u8"]]],[5,"ud2","","Generates the trap instruction `UD2`",null,[[]]],[5,"_mm512_abs_epi32","","Computes the absolute values of packed 32-bit integers in…",null,[[["__m512i"]],["__m512i"]]],[5,"_mm512_mask_abs_epi32","","Computes the absolute value of packed 32-bit integers in…",null,[[["__m512i"],["__mmask16"]],["__m512i"]]],[5,"_mm512_maskz_abs_epi32","","Computes the absolute value of packed 32-bit integers in…",null,[[["__m512i"],["__mmask16"]],["__m512i"]]],[5,"_mm512_setzero_si512","","Returns vector of type `__m512i` with all elements set to…",null,[[],["__m512i"]]],[5,"_mm512_setr_epi32","","Sets packed 32-bit integers in `dst` with the supplied…",null,[[["i32"]],["__m512i"]]],[5,"_mm512_set1_epi64","","Broadcast 64-bit integer `a` to all elements of `dst`.",null,[[["i64"]],["__m512i"]]],[5,"_mm512_madd52hi_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit…",null,[[["__m512i"]],["__m512i"]]],[5,"_mm512_madd52lo_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit…",null,[[["__m512i"]],["__m512i"]]],[5,"_mm256_madd52hi_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_madd52lo_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_madd52hi_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_madd52lo_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_bittest","","Returns the bit in position `b` of the memory addressed by…",null,[[["i32"]],["u8"]]],[5,"_bittestandset","","Returns the bit in position `b` of the memory addressed by…",null,[[["i32"]],["u8"]]],[5,"_bittestandreset","","Returns the bit in position `b` of the memory addressed by…",null,[[["i32"]],["u8"]]],[5,"_bittestandcomplement","","Returns the bit in position `b` of the memory addressed by…",null,[[["i32"]],["u8"]]],[5,"_xbegin","","Specifies the start of a restricted transactional memory…",null,[[],["u32"]]],[5,"_xend","","Specifies the end of a restricted transactional memory…",null,[[]]],[5,"_xabort","","Forces a restricted transactional memory (RTM) region to…",null,[[["u32"]]]],[5,"_xtest","","Queries whether the processor is executing in a…",null,[[],["u8"]]],[5,"_xabort_code","","Retrieves the parameter passed to [`_xabort`] when…",null,[[["u32"]],["u32"]]],[5,"_mm_cvtph_ps","","Converts the 4 x 16-bit half-precision float values in the…",null,[[["__m128i"]],["__m128"]]],[5,"_mm256_cvtph_ps","","Converts the 8 x 16-bit half-precision float values in the…",null,[[["__m128i"]],["__m256"]]],[5,"_mm_cvtps_ph","","Converts the 4 x 32-bit float values in the 128-bit vector…",null,[[["i32"],["__m128"]],["__m128i"]]],[5,"_mm256_cvtps_ph","","Converts the 8 x 32-bit float values in the 256-bit vector…",null,[[["__m256"],["i32"]],["__m128i"]]],[6,"__mmask16","","The `__mmask16` type used in AVX-512 intrinsics, a 16-bit…",null,null],[17,"_XCR_XFEATURE_ENABLED_MASK","","`XFEATURE_ENABLED_MASK` for `XCR`",null,null],[17,"_MM_EXCEPT_INVALID","","See `_mm_setcsr`",null,null],[17,"_MM_EXCEPT_DENORM","","See `_mm_setcsr`",null,null],[17,"_MM_EXCEPT_DIV_ZERO","","See `_mm_setcsr`",null,null],[17,"_MM_EXCEPT_OVERFLOW","","See `_mm_setcsr`",null,null],[17,"_MM_EXCEPT_UNDERFLOW","","See `_mm_setcsr`",null,null],[17,"_MM_EXCEPT_INEXACT","","See `_mm_setcsr`",null,null],[17,"_MM_EXCEPT_MASK","","See `_MM_GET_EXCEPTION_STATE`",null,null],[17,"_MM_MASK_INVALID","","See `_mm_setcsr`",null,null],[17,"_MM_MASK_DENORM","","See `_mm_setcsr`",null,null],[17,"_MM_MASK_DIV_ZERO","","See `_mm_setcsr`",null,null],[17,"_MM_MASK_OVERFLOW","","See `_mm_setcsr`",null,null],[17,"_MM_MASK_UNDERFLOW","","See `_mm_setcsr`",null,null],[17,"_MM_MASK_INEXACT","","See `_mm_setcsr`",null,null],[17,"_MM_MASK_MASK","","See `_MM_GET_EXCEPTION_MASK`",null,null],[17,"_MM_ROUND_NEAREST","","See `_mm_setcsr`",null,null],[17,"_MM_ROUND_DOWN","","See `_mm_setcsr`",null,null],[17,"_MM_ROUND_UP","","See `_mm_setcsr`",null,null],[17,"_MM_ROUND_TOWARD_ZERO","","See `_mm_setcsr`",null,null],[17,"_MM_ROUND_MASK","","See `_MM_GET_ROUNDING_MODE`",null,null],[17,"_MM_FLUSH_ZERO_MASK","","See `_MM_GET_FLUSH_ZERO_MODE`",null,null],[17,"_MM_FLUSH_ZERO_ON","","See `_mm_setcsr`",null,null],[17,"_MM_FLUSH_ZERO_OFF","","See `_mm_setcsr`",null,null],[17,"_MM_HINT_T0","","See `_mm_prefetch`.",null,null],[17,"_MM_HINT_T1","","See `_mm_prefetch`.",null,null],[17,"_MM_HINT_T2","","See `_mm_prefetch`.",null,null],[17,"_MM_HINT_NTA","","See `_mm_prefetch`.",null,null],[17,"_MM_FROUND_TO_NEAREST_INT","","round to nearest",null,null],[17,"_MM_FROUND_TO_NEG_INF","","round down",null,null],[17,"_MM_FROUND_TO_POS_INF","","round up",null,null],[17,"_MM_FROUND_TO_ZERO","","truncate",null,null],[17,"_MM_FROUND_CUR_DIRECTION","","use MXCSR.RC; see `vendor::_MM_SET_ROUNDING_MODE`",null,null],[17,"_MM_FROUND_RAISE_EXC","","do not suppress exceptions",null,null],[17,"_MM_FROUND_NO_EXC","","suppress exceptions",null,null],[17,"_MM_FROUND_NINT","","round to nearest and do not suppress exceptions",null,null],[17,"_MM_FROUND_FLOOR","","round down and do not suppress exceptions",null,null],[17,"_MM_FROUND_CEIL","","round up and do not suppress exceptions",null,null],[17,"_MM_FROUND_TRUNC","","truncate and do not suppress exceptions",null,null],[17,"_MM_FROUND_RINT","","use MXCSR.RC and do not suppress exceptions; see…",null,null],[17,"_MM_FROUND_NEARBYINT","","use MXCSR.RC and suppress exceptions; see…",null,null],[17,"_SIDD_UBYTE_OPS","","String contains unsigned 8-bit characters (Default)",null,null],[17,"_SIDD_UWORD_OPS","","String contains unsigned 16-bit characters",null,null],[17,"_SIDD_SBYTE_OPS","","String contains signed 8-bit characters",null,null],[17,"_SIDD_SWORD_OPS","","String contains unsigned 16-bit characters",null,null],[17,"_SIDD_CMP_EQUAL_ANY","","For each character in `a`, find if it is in `b` (Default)",null,null],[17,"_SIDD_CMP_RANGES","","For each character in `a`, determine if `b[0] <= c <= b[1]…",null,null],[17,"_SIDD_CMP_EQUAL_EACH","","The strings defined by `a` and `b` are equal",null,null],[17,"_SIDD_CMP_EQUAL_ORDERED","","Search for the defined substring in the target",null,null],[17,"_SIDD_POSITIVE_POLARITY","","Do not negate results (Default)",null,null],[17,"_SIDD_NEGATIVE_POLARITY","","Negates results",null,null],[17,"_SIDD_MASKED_POSITIVE_POLARITY","","Do not negate results before the end of the string",null,null],[17,"_SIDD_MASKED_NEGATIVE_POLARITY","","Negates results only before the end of the string",null,null],[17,"_SIDD_LEAST_SIGNIFICANT","","Index only: return the least significant bit (Default)",null,null],[17,"_SIDD_MOST_SIGNIFICANT","","Index only: return the most significant bit",null,null],[17,"_SIDD_BIT_MASK","","Mask only: return the bit mask",null,null],[17,"_SIDD_UNIT_MASK","","Mask only: return the byte mask",null,null],[17,"_CMP_EQ_OQ","","Equal (ordered, non-signaling)",null,null],[17,"_CMP_LT_OS","","Less-than (ordered, signaling)",null,null],[17,"_CMP_LE_OS","","Less-than-or-equal (ordered, signaling)",null,null],[17,"_CMP_UNORD_Q","","Unordered (non-signaling)",null,null],[17,"_CMP_NEQ_UQ","","Not-equal (unordered, non-signaling)",null,null],[17,"_CMP_NLT_US","","Not-less-than (unordered, signaling)",null,null],[17,"_CMP_NLE_US","","Not-less-than-or-equal (unordered, signaling)",null,null],[17,"_CMP_ORD_Q","","Ordered (non-signaling)",null,null],[17,"_CMP_EQ_UQ","","Equal (unordered, non-signaling)",null,null],[17,"_CMP_NGE_US","","Not-greater-than-or-equal (unordered, signaling)",null,null],[17,"_CMP_NGT_US","","Not-greater-than (unordered, signaling)",null,null],[17,"_CMP_FALSE_OQ","","False (ordered, non-signaling)",null,null],[17,"_CMP_NEQ_OQ","","Not-equal (ordered, non-signaling)",null,null],[17,"_CMP_GE_OS","","Greater-than-or-equal (ordered, signaling)",null,null],[17,"_CMP_GT_OS","","Greater-than (ordered, signaling)",null,null],[17,"_CMP_TRUE_UQ","","True (unordered, non-signaling)",null,null],[17,"_CMP_EQ_OS","","Equal (ordered, signaling)",null,null],[17,"_CMP_LT_OQ","","Less-than (ordered, non-signaling)",null,null],[17,"_CMP_LE_OQ","","Less-than-or-equal (ordered, non-signaling)",null,null],[17,"_CMP_UNORD_S","","Unordered (signaling)",null,null],[17,"_CMP_NEQ_US","","Not-equal (unordered, signaling)",null,null],[17,"_CMP_NLT_UQ","","Not-less-than (unordered, non-signaling)",null,null],[17,"_CMP_NLE_UQ","","Not-less-than-or-equal (unordered, non-signaling)",null,null],[17,"_CMP_ORD_S","","Ordered (signaling)",null,null],[17,"_CMP_EQ_US","","Equal (unordered, signaling)",null,null],[17,"_CMP_NGE_UQ","","Not-greater-than-or-equal (unordered, non-signaling)",null,null],[17,"_CMP_NGT_UQ","","Not-greater-than (unordered, non-signaling)",null,null],[17,"_CMP_FALSE_OS","","False (ordered, signaling)",null,null],[17,"_CMP_NEQ_OS","","Not-equal (ordered, signaling)",null,null],[17,"_CMP_GE_OQ","","Greater-than-or-equal (ordered, non-signaling)",null,null],[17,"_CMP_GT_OQ","","Greater-than (ordered, non-signaling)",null,null],[17,"_CMP_TRUE_US","","True (unordered, signaling)",null,null],[17,"_XBEGIN_STARTED","","Transaction successfully started.",null,null],[17,"_XABORT_EXPLICIT","","Transaction explicitly aborted with xabort. The parameter…",null,null],[17,"_XABORT_RETRY","","Transaction retry is possible.",null,null],[17,"_XABORT_CONFLICT","","Transaction abort due to a memory conflict with another…",null,null],[17,"_XABORT_CAPACITY","","Transaction abort due to the transaction using too much…",null,null],[17,"_XABORT_DEBUG","","Transaction abort due to a debug trap.",null,null],[17,"_XABORT_NESTED","","Transaction abort in a inner nested transaction.",null,null],[0,"x86_64","core::arch","Platform-specific intrinsics for the `x86_64` platform.",null,null],[3,"__m64","core::arch::x86_64","64-bit wide integer vector type, x86-specific",null,null],[3,"__m128i","","128-bit wide integer vector type, x86-specific",null,null],[3,"__m128","","128-bit wide set of four `f32` types, x86-specific",null,null],[3,"__m128d","","128-bit wide set of two `f64` types, x86-specific",null,null],[3,"__m256i","","256-bit wide integer vector type, x86-specific",null,null],[3,"__m256","","256-bit wide set of eight `f32` types, x86-specific",null,null],[3,"__m256d","","256-bit wide set of four `f64` types, x86-specific",null,null],[3,"__m512i","","512-bit wide integer vector type, x86-specific",null,null],[3,"__m512","","512-bit wide set of sixteen `f32` types, x86-specific",null,null],[3,"__m512d","","512-bit wide set of eight `f64` types, x86-specific",null,null],[3,"CpuidResult","","Result of the `cpuid` instruction.",null,null],[12,"eax","","EAX register.",165,null],[12,"ebx","","EBX register.",165,null],[12,"ecx","","ECX register.",165,null],[12,"edx","","EDX register.",165,null],[5,"_fxsave","","Saves the `x87` FPU, `MMX` technology, `XMM`, and `MXCSR`…",null,[[]]],[5,"_fxrstor","","Restores the `XMM`, `MMX`, `MXCSR`, and `x87` FPU…",null,[[]]],[5,"_bswap","","Returns an integer with the reversed byte order of x",null,[[["i32"]],["i32"]]],[5,"_rdtsc","","Reads the current value of the processor’s time-stamp…",null,[[],["u64"]]],[5,"__rdtscp","","Reads the current value of the processor’s time-stamp…",null,[[],["u64"]]],[5,"__cpuid_count","","Returns the result of the `cpuid` instruction for a given…",null,[[["u32"]],["cpuidresult"]]],[5,"__cpuid","","See `__cpuid_count`.",null,[[["u32"]],["cpuidresult"]]],[5,"has_cpuid","","Does the host support the `cpuid` instruction?",null,[[],["bool"]]],[5,"__get_cpuid_max","","Returns the highest-supported `leaf` (`EAX`) and sub-leaf…",null,[[["u32"]]]],[5,"_xsave","","Performs a full or partial save of the enabled processor…",null,[[["u64"]]]],[5,"_xrstor","","Performs a full or partial restore of the enabled…",null,[[["u64"]]]],[5,"_xsetbv","","Copies 64-bits from `val` to the extended control register…",null,[[["u32"],["u64"]]]],[5,"_xgetbv","","Reads the contents of the extended control register `XCR`…",null,[[["u32"]],["u64"]]],[5,"_xsaveopt","","Performs a full or partial save of the enabled processor…",null,[[["u64"]]]],[5,"_xsavec","","Performs a full or partial save of the enabled processor…",null,[[["u64"]]]],[5,"_xsaves","","Performs a full or partial save of the enabled processor…",null,[[["u64"]]]],[5,"_xrstors","","Performs a full or partial restore of the enabled…",null,[[["u64"]]]],[5,"_mm_add_ss","","Adds the first component of `a` and `b`, the other…",null,[[["__m128"]],["__m128"]]],[5,"_mm_add_ps","","Adds __m128 vectors.",null,[[["__m128"]],["__m128"]]],[5,"_mm_sub_ss","","Subtracts the first component of `b` from `a`, the other…",null,[[["__m128"]],["__m128"]]],[5,"_mm_sub_ps","","Subtracts __m128 vectors.",null,[[["__m128"]],["__m128"]]],[5,"_mm_mul_ss","","Multiplies the first component of `a` and `b`, the other…",null,[[["__m128"]],["__m128"]]],[5,"_mm_mul_ps","","Multiplies __m128 vectors.",null,[[["__m128"]],["__m128"]]],[5,"_mm_div_ss","","Divides the first component of `b` by `a`, the other…",null,[[["__m128"]],["__m128"]]],[5,"_mm_div_ps","","Divides __m128 vectors.",null,[[["__m128"]],["__m128"]]],[5,"_mm_sqrt_ss","","Returns the square root of the first single-precision…",null,[[["__m128"]],["__m128"]]],[5,"_mm_sqrt_ps","","Returns the square root of packed single-precision…",null,[[["__m128"]],["__m128"]]],[5,"_mm_rcp_ss","","Returns the approximate reciprocal of the first…",null,[[["__m128"]],["__m128"]]],[5,"_mm_rcp_ps","","Returns the approximate reciprocal of packed…",null,[[["__m128"]],["__m128"]]],[5,"_mm_rsqrt_ss","","Returns the approximate reciprocal square root of the fist…",null,[[["__m128"]],["__m128"]]],[5,"_mm_rsqrt_ps","","Returns the approximate reciprocal square root of packed…",null,[[["__m128"]],["__m128"]]],[5,"_mm_min_ss","","Compares the first single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_min_ps","","Compares packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm_max_ss","","Compares the first single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_max_ps","","Compares packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm_and_ps","","Bitwise AND of packed single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_andnot_ps","","Bitwise AND-NOT of packed single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_or_ps","","Bitwise OR of packed single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_xor_ps","","Bitwise exclusive OR of packed single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpeq_ss","","Compares the lowest `f32` of both inputs for equality. The…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmplt_ss","","Compares the lowest `f32` of both inputs for less than.…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmple_ss","","Compares the lowest `f32` of both inputs for less than or…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpgt_ss","","Compares the lowest `f32` of both inputs for greater than.…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpge_ss","","Compares the lowest `f32` of both inputs for greater than…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpneq_ss","","Compares the lowest `f32` of both inputs for inequality.…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpnlt_ss","","Compares the lowest `f32` of both inputs for…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpnle_ss","","Compares the lowest `f32` of both inputs for…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpngt_ss","","Compares the lowest `f32` of both inputs for…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpnge_ss","","Compares the lowest `f32` of both inputs for…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpord_ss","","Checks if the lowest `f32` of both inputs are ordered. The…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpunord_ss","","Checks if the lowest `f32` of both inputs are unordered.…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpeq_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmplt_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmple_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpgt_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpge_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpneq_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpnlt_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpnle_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpngt_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpnge_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpord_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpunord_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_comieq_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_comilt_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_comile_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_comigt_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_comige_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_comineq_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_ucomieq_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_ucomilt_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_ucomile_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_ucomigt_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_ucomige_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_ucomineq_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_cvtss_si32","","Converts the lowest 32 bit float in the input vector to a…",null,[[["__m128"]],["i32"]]],[5,"_mm_cvt_ss2si","","Alias for `_mm_cvtss_si32`.",null,[[["__m128"]],["i32"]]],[5,"_mm_cvttss_si32","","Converts the lowest 32 bit float in the input vector to a…",null,[[["__m128"]],["i32"]]],[5,"_mm_cvtt_ss2si","","Alias for `_mm_cvttss_si32`.",null,[[["__m128"]],["i32"]]],[5,"_mm_cvtss_f32","","Extracts the lowest 32 bit float from the input vector.",null,[[["__m128"]],["f32"]]],[5,"_mm_cvtsi32_ss","","Converts a 32 bit integer to a 32 bit float. The result…",null,[[["i32"],["__m128"]],["__m128"]]],[5,"_mm_cvt_si2ss","","Alias for `_mm_cvtsi32_ss`.",null,[[["i32"],["__m128"]],["__m128"]]],[5,"_mm_set_ss","","Construct a `__m128` with the lowest element set to `a`…",null,[[["f32"]],["__m128"]]],[5,"_mm_set1_ps","","Construct a `__m128` with all element set to `a`.",null,[[["f32"]],["__m128"]]],[5,"_mm_set_ps1","","Alias for `_mm_set1_ps`",null,[[["f32"]],["__m128"]]],[5,"_mm_set_ps","","Construct a `__m128` from four floating point values…",null,[[["f32"]],["__m128"]]],[5,"_mm_setr_ps","","Construct a `__m128` from four floating point values…",null,[[["f32"]],["__m128"]]],[5,"_mm_setzero_ps","","Construct a `__m128` with all elements initialized to zero.",null,[[],["__m128"]]],[5,"_MM_SHUFFLE","","A utility function for creating masks to use with Intel…",null,[[["u32"]],["i32"]]],[5,"_mm_shuffle_ps","","Shuffles packed single-precision (32-bit) floating-point…",null,[[["i32"],["__m128"]],["__m128"]]],[5,"_mm_unpackhi_ps","","Unpacks and interleave single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_unpacklo_ps","","Unpacks and interleave single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_movehl_ps","","Combine higher half of `a` and `b`. The highwe half of `b`…",null,[[["__m128"]],["__m128"]]],[5,"_mm_movelh_ps","","Combine lower half of `a` and `b`. The lower half of `b`…",null,[[["__m128"]],["__m128"]]],[5,"_mm_movemask_ps","","Returns a mask of the most significant bit of each element…",null,[[["__m128"]],["i32"]]],[5,"_mm_loadh_pi","","Sets the upper two single-precision floating-point values…",null,[[["__m128"]],["__m128"]]],[5,"_mm_loadl_pi","","Loads two floats from `p` into the lower half of a…",null,[[["__m128"]],["__m128"]]],[5,"_mm_load_ss","","Construct a `__m128` with the lowest element read from `p`…",null,[[],["__m128"]]],[5,"_mm_load1_ps","","Construct a `__m128` by duplicating the value read from…",null,[[],["__m128"]]],[5,"_mm_load_ps1","","Alias for `_mm_load1_ps`",null,[[],["__m128"]]],[5,"_mm_load_ps","","Loads four `f32` values from aligned memory into a…",null,[[],["__m128"]]],[5,"_mm_loadu_ps","","Loads four `f32` values from memory into a `__m128`. There…",null,[[],["__m128"]]],[5,"_mm_loadr_ps","","Loads four `f32` values from aligned memory into a…",null,[[],["__m128"]]],[5,"_mm_storeh_pi","","Stores the upper half of `a` (64 bits) into memory.",null,[[["__m128"]]]],[5,"_mm_storel_pi","","Stores the lower half of `a` (64 bits) into memory.",null,[[["__m128"]]]],[5,"_mm_store_ss","","Stores the lowest 32 bit float of `a` into memory.",null,[[["__m128"]]]],[5,"_mm_store1_ps","","Stores the lowest 32 bit float of `a` repeated four times…",null,[[["__m128"]]]],[5,"_mm_store_ps1","","Alias for `_mm_store1_ps`",null,[[["__m128"]]]],[5,"_mm_store_ps","","Stores four 32-bit floats into aligned memory.",null,[[["__m128"]]]],[5,"_mm_storeu_ps","","Stores four 32-bit floats into memory. There are no…",null,[[["__m128"]]]],[5,"_mm_storer_ps","","Stores four 32-bit floats into aligned memory in reverse…",null,[[["__m128"]]]],[5,"_mm_move_ss","","Returns a `__m128` with the first component from `b` and…",null,[[["__m128"]],["__m128"]]],[5,"_mm_sfence","","Performs a serializing operation on all store-to-memory…",null,[[]]],[5,"_mm_getcsr","","Gets the unsigned 32-bit value of the MXCSR control and…",null,[[],["u32"]]],[5,"_mm_setcsr","","Sets the MXCSR register with the 32-bit unsigned integer…",null,[[["u32"]]]],[5,"_MM_GET_EXCEPTION_MASK","","See `_mm_setcsr`",null,[[],["u32"]]],[5,"_MM_GET_EXCEPTION_STATE","","See `_mm_setcsr`",null,[[],["u32"]]],[5,"_MM_GET_FLUSH_ZERO_MODE","","See `_mm_setcsr`",null,[[],["u32"]]],[5,"_MM_GET_ROUNDING_MODE","","See `_mm_setcsr`",null,[[],["u32"]]],[5,"_MM_SET_EXCEPTION_MASK","","See `_mm_setcsr`",null,[[["u32"]]]],[5,"_MM_SET_EXCEPTION_STATE","","See `_mm_setcsr`",null,[[["u32"]]]],[5,"_MM_SET_FLUSH_ZERO_MODE","","See `_mm_setcsr`",null,[[["u32"]]]],[5,"_MM_SET_ROUNDING_MODE","","See `_mm_setcsr`",null,[[["u32"]]]],[5,"_mm_prefetch","","Fetch the cache line that contains address `p` using the…",null,[[["i32"]]]],[5,"_mm_undefined_ps","","Returns vector of type __m128 with undefined elements.",null,[[],["__m128"]]],[5,"_MM_TRANSPOSE4_PS","","Transpose the 4x4 matrix formed by 4 rows of __m128 in…",null,[[["__m128"]]]],[5,"_mm_stream_ps","","Stores `a` into the memory at `mem_addr` using a…",null,[[["__m128"]]]],[5,"_mm_stream_pi","","Stores 64-bits of integer data from a into memory using a…",null,[[["__m64"]]]],[5,"_mm_max_pi16","","Compares the packed 16-bit signed integers of `a` and `b`…",null,[[["__m64"]],["__m64"]]],[5,"_m_pmaxsw","","Compares the packed 16-bit signed integers of `a` and `b`…",null,[[["__m64"]],["__m64"]]],[5,"_mm_max_pu8","","Compares the packed 8-bit signed integers of `a` and `b`…",null,[[["__m64"]],["__m64"]]],[5,"_m_pmaxub","","Compares the packed 8-bit signed integers of `a` and `b`…",null,[[["__m64"]],["__m64"]]],[5,"_mm_min_pi16","","Compares the packed 16-bit signed integers of `a` and `b`…",null,[[["__m64"]],["__m64"]]],[5,"_m_pminsw","","Compares the packed 16-bit signed integers of `a` and `b`…",null,[[["__m64"]],["__m64"]]],[5,"_mm_min_pu8","","Compares the packed 8-bit signed integers of `a` and `b`…",null,[[["__m64"]],["__m64"]]],[5,"_m_pminub","","Compares the packed 8-bit signed integers of `a` and `b`…",null,[[["__m64"]],["__m64"]]],[5,"_mm_mulhi_pu16","","Multiplies packed 16-bit unsigned integer values and…",null,[[["__m64"]],["__m64"]]],[5,"_mm_mullo_pi16","","Multiplies packed 16-bit integer values and writes the…",null,[[["__m64"]],["__m64"]]],[5,"_m_pmulhuw","","Multiplies packed 16-bit unsigned integer values and…",null,[[["__m64"]],["__m64"]]],[5,"_mm_avg_pu8","","Computes the rounded averages of the packed unsigned 8-bit…",null,[[["__m64"]],["__m64"]]],[5,"_m_pavgb","","Computes the rounded averages of the packed unsigned 8-bit…",null,[[["__m64"]],["__m64"]]],[5,"_mm_avg_pu16","","Computes the rounded averages of the packed unsigned…",null,[[["__m64"]],["__m64"]]],[5,"_m_pavgw","","Computes the rounded averages of the packed unsigned…",null,[[["__m64"]],["__m64"]]],[5,"_mm_sad_pu8","","Subtracts the corresponding 8-bit unsigned integer values…",null,[[["__m64"]],["__m64"]]],[5,"_m_psadbw","","Subtracts the corresponding 8-bit unsigned integer values…",null,[[["__m64"]],["__m64"]]],[5,"_mm_cvtpi32_ps","","Converts two elements of a 64-bit vector of `[2 x i32]`…",null,[[["__m64"],["__m128"]],["__m128"]]],[5,"_mm_cvt_pi2ps","","Converts two elements of a 64-bit vector of `[2 x i32]`…",null,[[["__m64"],["__m128"]],["__m128"]]],[5,"_mm_cvtpi8_ps","","Converts the lower 4 8-bit values of `a` into a 128-bit…",null,[[["__m64"]],["__m128"]]],[5,"_mm_cvtpu8_ps","","Converts the lower 4 8-bit values of `a` into a 128-bit…",null,[[["__m64"]],["__m128"]]],[5,"_mm_cvtpi16_ps","","Converts a 64-bit vector of `i16`s into a 128-bit vector…",null,[[["__m64"]],["__m128"]]],[5,"_mm_cvtpu16_ps","","Converts a 64-bit vector of `i16`s into a 128-bit vector…",null,[[["__m64"]],["__m128"]]],[5,"_mm_cvtpi32x2_ps","","Converts the two 32-bit signed integer values from each…",null,[[["__m64"]],["__m128"]]],[5,"_mm_maskmove_si64","","Conditionally copies the values from each 8-bit element in…",null,[[["__m64"]]]],[5,"_m_maskmovq","","Conditionally copies the values from each 8-bit element in…",null,[[["__m64"]]]],[5,"_mm_extract_pi16","","Extracts 16-bit element from a 64-bit vector of `[4 x…",null,[[["__m64"],["i32"]],["i32"]]],[5,"_m_pextrw","","Extracts 16-bit element from a 64-bit vector of `[4 x…",null,[[["__m64"],["i32"]],["i32"]]],[5,"_mm_insert_pi16","","Copies data from the 64-bit vector of `[4 x i16]` to the…",null,[[["__m64"],["i32"]],["__m64"]]],[5,"_m_pinsrw","","Copies data from the 64-bit vector of `[4 x i16]` to the…",null,[[["__m64"],["i32"]],["__m64"]]],[5,"_mm_movemask_pi8","","Takes the most significant bit from each 8-bit element in…",null,[[["__m64"]],["i32"]]],[5,"_m_pmovmskb","","Takes the most significant bit from each 8-bit element in…",null,[[["__m64"]],["i32"]]],[5,"_mm_shuffle_pi16","","Shuffles the 4 16-bit integers from a 64-bit integer…",null,[[["__m64"],["i32"]],["__m64"]]],[5,"_m_pshufw","","Shuffles the 4 16-bit integers from a 64-bit integer…",null,[[["__m64"],["i32"]],["__m64"]]],[5,"_mm_cvttps_pi32","","Converts the two lower packed single-precision (32-bit)…",null,[[["__m128"]],["__m64"]]],[5,"_mm_cvtt_ps2pi","","Converts the two lower packed single-precision (32-bit)…",null,[[["__m128"]],["__m64"]]],[5,"_mm_cvtps_pi32","","Converts the two lower packed single-precision (32-bit)…",null,[[["__m128"]],["__m64"]]],[5,"_mm_cvt_ps2pi","","Converts the two lower packed single-precision (32-bit)…",null,[[["__m128"]],["__m64"]]],[5,"_mm_cvtps_pi16","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m64"]]],[5,"_mm_cvtps_pi8","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m64"]]],[5,"_mm_pause","","Provides a hint to the processor that the code sequence is…",null,[[]]],[5,"_mm_clflush","","Invalidates and flushes the cache line that contains `p`…",null,[[]]],[5,"_mm_lfence","","Performs a serializing operation on all load-from-memory…",null,[[]]],[5,"_mm_mfence","","Performs a serializing operation on all load-from-memory…",null,[[]]],[5,"_mm_add_epi8","","Adds packed 8-bit integers in `a` and `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_add_epi16","","Adds packed 16-bit integers in `a` and `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_add_epi32","","Adds packed 32-bit integers in `a` and `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_add_epi64","","Adds packed 64-bit integers in `a` and `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_adds_epi8","","Adds packed 8-bit integers in `a` and `b` using saturation.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_adds_epi16","","Adds packed 16-bit integers in `a` and `b` using saturation.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_adds_epu8","","Adds packed unsigned 8-bit integers in `a` and `b` using…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_adds_epu16","","Adds packed unsigned 16-bit integers in `a` and `b` using…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_avg_epu8","","Averages packed unsigned 8-bit integers in `a` and `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_avg_epu16","","Averages packed unsigned 16-bit integers in `a` and `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_madd_epi16","","Multiplies and then horizontally add signed 16 bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_max_epi16","","Compares packed 16-bit integers in `a` and `b`, and…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_max_epu8","","Compares packed unsigned 8-bit integers in `a` and `b`,…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_min_epi16","","Compares packed 16-bit integers in `a` and `b`, and…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_min_epu8","","Compares packed unsigned 8-bit integers in `a` and `b`,…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_mulhi_epi16","","Multiplies the packed 16-bit integers in `a` and `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_mulhi_epu16","","Multiplies the packed unsigned 16-bit integers in `a` and…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_mullo_epi16","","Multiplies the packed 16-bit integers in `a` and `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_mul_epu32","","Multiplies the low unsigned 32-bit integers from each…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sad_epu8","","Sum the absolute differences of packed unsigned 8-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sub_epi8","","Subtracts packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sub_epi16","","Subtracts packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sub_epi32","","Subtract packed 32-bit integers in `b` from packed 32-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sub_epi64","","Subtract packed 64-bit integers in `b` from packed 64-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_subs_epi8","","Subtract packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_subs_epi16","","Subtract packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_subs_epu8","","Subtract packed unsigned 8-bit integers in `b` from packed…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_subs_epu16","","Subtract packed unsigned 16-bit integers in `b` from…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_slli_si128","","Shifts `a` left by `imm8` bytes while shifting in zeros.",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_bslli_si128","","Shifts `a` left by `imm8` bytes while shifting in zeros.",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_bsrli_si128","","Shifts `a` right by `imm8` bytes while shifting in zeros.",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_slli_epi16","","Shifts packed 16-bit integers in `a` left by `imm8` while…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_sll_epi16","","Shifts packed 16-bit integers in `a` left by `count` while…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_slli_epi32","","Shifts packed 32-bit integers in `a` left by `imm8` while…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_sll_epi32","","Shifts packed 32-bit integers in `a` left by `count` while…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_slli_epi64","","Shifts packed 64-bit integers in `a` left by `imm8` while…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_sll_epi64","","Shifts packed 64-bit integers in `a` left by `count` while…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_srai_epi16","","Shifts packed 16-bit integers in `a` right by `imm8` while…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_sra_epi16","","Shifts packed 16-bit integers in `a` right by `count`…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_srai_epi32","","Shifts packed 32-bit integers in `a` right by `imm8` while…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_sra_epi32","","Shifts packed 32-bit integers in `a` right by `count`…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_srli_si128","","Shifts `a` right by `imm8` bytes while shifting in zeros.",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_srli_epi16","","Shifts packed 16-bit integers in `a` right by `imm8` while…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_srl_epi16","","Shifts packed 16-bit integers in `a` right by `count`…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_srli_epi32","","Shifts packed 32-bit integers in `a` right by `imm8` while…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_srl_epi32","","Shifts packed 32-bit integers in `a` right by `count`…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_srli_epi64","","Shifts packed 64-bit integers in `a` right by `imm8` while…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_srl_epi64","","Shifts packed 64-bit integers in `a` right by `count`…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_and_si128","","Computes the bitwise AND of 128 bits (representing integer…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_andnot_si128","","Computes the bitwise NOT of 128 bits (representing integer…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_or_si128","","Computes the bitwise OR of 128 bits (representing integer…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_xor_si128","","Computes the bitwise XOR of 128 bits (representing integer…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmpeq_epi8","","Compares packed 8-bit integers in `a` and `b` for equality.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmpeq_epi16","","Compares packed 16-bit integers in `a` and `b` for equality.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmpeq_epi32","","Compares packed 32-bit integers in `a` and `b` for equality.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmpgt_epi8","","Compares packed 8-bit integers in `a` and `b` for…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmpgt_epi16","","Compares packed 16-bit integers in `a` and `b` for…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmpgt_epi32","","Compares packed 32-bit integers in `a` and `b` for…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmplt_epi8","","Compares packed 8-bit integers in `a` and `b` for less-than.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmplt_epi16","","Compares packed 16-bit integers in `a` and `b` for…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmplt_epi32","","Compares packed 32-bit integers in `a` and `b` for…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepi32_pd","","Converts the lower two packed 32-bit integers in `a` to…",null,[[["__m128i"]],["__m128d"]]],[5,"_mm_cvtsi32_sd","","Returns `a` with its lower element replaced by `b` after…",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_cvtepi32_ps","","Converts packed 32-bit integers in `a` to packed…",null,[[["__m128i"]],["__m128"]]],[5,"_mm_cvtps_epi32","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128i"]]],[5,"_mm_cvtsi32_si128","","Returns a vector whose lowest element is `a` and all…",null,[[["i32"]],["__m128i"]]],[5,"_mm_cvtsi128_si32","","Returns the lowest element of `a`.",null,[[["__m128i"]],["i32"]]],[5,"_mm_set_epi64x","","Sets packed 64-bit integers with the supplied values, from…",null,[[["i64"]],["__m128i"]]],[5,"_mm_set_epi32","","Sets packed 32-bit integers with the supplied values.",null,[[["i32"]],["__m128i"]]],[5,"_mm_set_epi16","","Sets packed 16-bit integers with the supplied values.",null,[[["i16"]],["__m128i"]]],[5,"_mm_set_epi8","","Sets packed 8-bit integers with the supplied values.",null,[[["i8"]],["__m128i"]]],[5,"_mm_set1_epi64x","","Broadcasts 64-bit integer `a` to all elements.",null,[[["i64"]],["__m128i"]]],[5,"_mm_set1_epi32","","Broadcasts 32-bit integer `a` to all elements.",null,[[["i32"]],["__m128i"]]],[5,"_mm_set1_epi16","","Broadcasts 16-bit integer `a` to all elements.",null,[[["i16"]],["__m128i"]]],[5,"_mm_set1_epi8","","Broadcasts 8-bit integer `a` to all elements.",null,[[["i8"]],["__m128i"]]],[5,"_mm_setr_epi32","","Sets packed 32-bit integers with the supplied values in…",null,[[["i32"]],["__m128i"]]],[5,"_mm_setr_epi16","","Sets packed 16-bit integers with the supplied values in…",null,[[["i16"]],["__m128i"]]],[5,"_mm_setr_epi8","","Sets packed 8-bit integers with the supplied values in…",null,[[["i8"]],["__m128i"]]],[5,"_mm_setzero_si128","","Returns a vector with all elements set to zero.",null,[[],["__m128i"]]],[5,"_mm_loadl_epi64","","Loads 64-bit integer from memory into first element of…",null,[[],["__m128i"]]],[5,"_mm_load_si128","","Loads 128-bits of integer data from memory into a new…",null,[[],["__m128i"]]],[5,"_mm_loadu_si128","","Loads 128-bits of integer data from memory into a new…",null,[[],["__m128i"]]],[5,"_mm_maskmoveu_si128","","Conditionally store 8-bit integer elements from `a` into…",null,[[["__m128i"]]]],[5,"_mm_store_si128","","Stores 128-bits of integer data from `a` into memory.",null,[[["__m128i"]]]],[5,"_mm_storeu_si128","","Stores 128-bits of integer data from `a` into memory.",null,[[["__m128i"]]]],[5,"_mm_storel_epi64","","Stores the lower 64-bit integer `a` to a memory location.",null,[[["__m128i"]]]],[5,"_mm_stream_si128","","Stores a 128-bit integer vector to a 128-bit aligned…",null,[[["__m128i"]]]],[5,"_mm_stream_si32","","Stores a 32-bit integer value in the specified memory…",null,[[["i32"]]]],[5,"_mm_move_epi64","","Returns a vector where the low element is extracted from…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_packs_epi16","","Converts packed 16-bit integers from `a` and `b` to packed…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_packs_epi32","","Converts packed 32-bit integers from `a` and `b` to packed…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_packus_epi16","","Converts packed 16-bit integers from `a` and `b` to packed…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_extract_epi16","","Returns the `imm8` element of `a`.",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_insert_epi16","","Returns a new vector where the `imm8` element of `a` is…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_movemask_epi8","","Returns a mask of the most significant bit of each element…",null,[[["__m128i"]],["i32"]]],[5,"_mm_shuffle_epi32","","Shuffles 32-bit integers in `a` using the control in `imm8`.",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_shufflehi_epi16","","Shuffles 16-bit integers in the high 64 bits of `a` using…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_shufflelo_epi16","","Shuffles 16-bit integers in the low 64 bits of `a` using…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_unpackhi_epi8","","Unpacks and interleave 8-bit integers from the high half…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_unpackhi_epi16","","Unpacks and interleave 16-bit integers from the high half…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_unpackhi_epi32","","Unpacks and interleave 32-bit integers from the high half…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_unpackhi_epi64","","Unpacks and interleave 64-bit integers from the high half…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_unpacklo_epi8","","Unpacks and interleave 8-bit integers from the low half of…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_unpacklo_epi16","","Unpacks and interleave 16-bit integers from the low half…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_unpacklo_epi32","","Unpacks and interleave 32-bit integers from the low half…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_unpacklo_epi64","","Unpacks and interleave 64-bit integers from the low half…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_add_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_add_pd","","Adds packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_div_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_div_pd","","Divide packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_max_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_max_pd","","Returns a new vector with the maximum values from…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_min_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_min_pd","","Returns a new vector with the minimum values from…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_mul_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_mul_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_sqrt_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_sqrt_pd","","Returns a new vector with the square root of each of the…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_sub_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_sub_pd","","Subtract packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_and_pd","","Computes the bitwise AND of packed double-precision…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_andnot_pd","","Computes the bitwise NOT of `a` and then AND with `b`.",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_or_pd","","Computes the bitwise OR of `a` and `b`.",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_xor_pd","","Computes the bitwise OR of `a` and `b`.",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpeq_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmplt_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmple_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpgt_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpge_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpord_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpunord_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpneq_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpnlt_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpnle_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpngt_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpnge_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpeq_pd","","Compares corresponding elements in `a` and `b` for equality.",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmplt_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmple_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpgt_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpge_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpord_pd","","Compares corresponding elements in `a` and `b` to see if…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpunord_pd","","Compares corresponding elements in `a` and `b` to see if…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpneq_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpnlt_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpnle_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpngt_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpnge_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_comieq_sd","","Compares the lower element of `a` and `b` for equality.",null,[[["__m128d"]],["i32"]]],[5,"_mm_comilt_sd","","Compares the lower element of `a` and `b` for less-than.",null,[[["__m128d"]],["i32"]]],[5,"_mm_comile_sd","","Compares the lower element of `a` and `b` for…",null,[[["__m128d"]],["i32"]]],[5,"_mm_comigt_sd","","Compares the lower element of `a` and `b` for greater-than.",null,[[["__m128d"]],["i32"]]],[5,"_mm_comige_sd","","Compares the lower element of `a` and `b` for…",null,[[["__m128d"]],["i32"]]],[5,"_mm_comineq_sd","","Compares the lower element of `a` and `b` for not-equal.",null,[[["__m128d"]],["i32"]]],[5,"_mm_ucomieq_sd","","Compares the lower element of `a` and `b` for equality.",null,[[["__m128d"]],["i32"]]],[5,"_mm_ucomilt_sd","","Compares the lower element of `a` and `b` for less-than.",null,[[["__m128d"]],["i32"]]],[5,"_mm_ucomile_sd","","Compares the lower element of `a` and `b` for…",null,[[["__m128d"]],["i32"]]],[5,"_mm_ucomigt_sd","","Compares the lower element of `a` and `b` for greater-than.",null,[[["__m128d"]],["i32"]]],[5,"_mm_ucomige_sd","","Compares the lower element of `a` and `b` for…",null,[[["__m128d"]],["i32"]]],[5,"_mm_ucomineq_sd","","Compares the lower element of `a` and `b` for not-equal.",null,[[["__m128d"]],["i32"]]],[5,"_mm_cvtpd_ps","","Converts packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128"]]],[5,"_mm_cvtps_pd","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128d"]]],[5,"_mm_cvtpd_epi32","","Converts packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128i"]]],[5,"_mm_cvtsd_si32","","Converts the lower double-precision (64-bit)…",null,[[["__m128d"]],["i32"]]],[5,"_mm_cvtsd_ss","","Converts the lower double-precision (64-bit)…",null,[[["__m128d"],["__m128"]],["__m128"]]],[5,"_mm_cvtsd_f64","","Returns the lower double-precision (64-bit) floating-point…",null,[[["__m128d"]],["f64"]]],[5,"_mm_cvtss_sd","","Converts the lower single-precision (32-bit)…",null,[[["__m128d"],["__m128"]],["__m128d"]]],[5,"_mm_cvttpd_epi32","","Converts packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128i"]]],[5,"_mm_cvttsd_si32","","Converts the lower double-precision (64-bit)…",null,[[["__m128d"]],["i32"]]],[5,"_mm_cvttps_epi32","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128i"]]],[5,"_mm_set_sd","","Copies double-precision (64-bit) floating-point element…",null,[[["f64"]],["__m128d"]]],[5,"_mm_set1_pd","","Broadcasts double-precision (64-bit) floating-point value…",null,[[["f64"]],["__m128d"]]],[5,"_mm_set_pd1","","Broadcasts double-precision (64-bit) floating-point value…",null,[[["f64"]],["__m128d"]]],[5,"_mm_set_pd","","Sets packed double-precision (64-bit) floating-point…",null,[[["f64"]],["__m128d"]]],[5,"_mm_setr_pd","","Sets packed double-precision (64-bit) floating-point…",null,[[["f64"]],["__m128d"]]],[5,"_mm_setzero_pd","","Returns packed double-precision (64-bit) floating-point…",null,[[],["__m128d"]]],[5,"_mm_movemask_pd","","Returns a mask of the most significant bit of each element…",null,[[["__m128d"]],["i32"]]],[5,"_mm_load_pd","","Loads 128-bits (composed of 2 packed double-precision…",null,[[],["__m128d"]]],[5,"_mm_load_sd","","Loads a 64-bit double-precision value to the low element…",null,[[],["__m128d"]]],[5,"_mm_loadh_pd","","Loads a double-precision value into the high-order bits of…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_loadl_pd","","Loads a double-precision value into the low-order bits of…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_stream_pd","","Stores a 128-bit floating point vector of `[2 x double]`…",null,[[["__m128d"]]]],[5,"_mm_store_sd","","Stores the lower 64 bits of a 128-bit vector of `[2 x…",null,[[["__m128d"]]]],[5,"_mm_store_pd","","Stores 128-bits (composed of 2 packed double-precision…",null,[[["__m128d"]]]],[5,"_mm_storeu_pd","","Stores 128-bits (composed of 2 packed double-precision…",null,[[["__m128d"]]]],[5,"_mm_store1_pd","","Stores the lower double-precision (64-bit) floating-point…",null,[[["__m128d"]]]],[5,"_mm_store_pd1","","Stores the lower double-precision (64-bit) floating-point…",null,[[["__m128d"]]]],[5,"_mm_storer_pd","","Stores 2 double-precision (64-bit) floating-point elements…",null,[[["__m128d"]]]],[5,"_mm_storeh_pd","","Stores the upper 64 bits of a 128-bit vector of `[2 x…",null,[[["__m128d"]]]],[5,"_mm_storel_pd","","Stores the lower 64 bits of a 128-bit vector of `[2 x…",null,[[["__m128d"]]]],[5,"_mm_load1_pd","","Loads a double-precision (64-bit) floating-point element…",null,[[],["__m128d"]]],[5,"_mm_load_pd1","","Loads a double-precision (64-bit) floating-point element…",null,[[],["__m128d"]]],[5,"_mm_loadr_pd","","Loads 2 double-precision (64-bit) floating-point elements…",null,[[],["__m128d"]]],[5,"_mm_loadu_pd","","Loads 128-bits (composed of 2 packed double-precision…",null,[[],["__m128d"]]],[5,"_mm_shuffle_pd","","Constructs a 128-bit floating-point vector of `[2 x…",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_move_sd","","Constructs a 128-bit floating-point vector of `[2 x…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_castpd_ps","","Casts a 128-bit floating-point vector of `[2 x double]`…",null,[[["__m128d"]],["__m128"]]],[5,"_mm_castpd_si128","","Casts a 128-bit floating-point vector of `[2 x double]`…",null,[[["__m128d"]],["__m128i"]]],[5,"_mm_castps_pd","","Casts a 128-bit floating-point vector of `[4 x float]`…",null,[[["__m128"]],["__m128d"]]],[5,"_mm_castps_si128","","Casts a 128-bit floating-point vector of `[4 x float]`…",null,[[["__m128"]],["__m128i"]]],[5,"_mm_castsi128_pd","","Casts a 128-bit integer vector into a 128-bit…",null,[[["__m128i"]],["__m128d"]]],[5,"_mm_castsi128_ps","","Casts a 128-bit integer vector into a 128-bit…",null,[[["__m128i"]],["__m128"]]],[5,"_mm_undefined_pd","","Returns vector of type __m128d with undefined elements.",null,[[],["__m128d"]]],[5,"_mm_undefined_si128","","Returns vector of type __m128i with undefined elements.",null,[[],["__m128i"]]],[5,"_mm_unpackhi_pd","","The resulting `__m128d` element is composed by the…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_unpacklo_pd","","The resulting `__m128d` element is composed by the…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_add_si64","","Adds two signed or unsigned 64-bit integer values,…",null,[[["__m64"]],["__m64"]]],[5,"_mm_mul_su32","","Multiplies 32-bit unsigned integer values contained in the…",null,[[["__m64"]],["__m64"]]],[5,"_mm_sub_si64","","Subtracts signed or unsigned 64-bit integer values and…",null,[[["__m64"]],["__m64"]]],[5,"_mm_cvtpi32_pd","","Converts the two signed 32-bit integer elements of a…",null,[[["__m64"]],["__m128d"]]],[5,"_mm_set_epi64","","Initializes both 64-bit values in a 128-bit vector of `[2…",null,[[["__m64"]],["__m128i"]]],[5,"_mm_set1_epi64","","Initializes both values in a 128-bit vector of `[2 x i64]`…",null,[[["__m64"]],["__m128i"]]],[5,"_mm_setr_epi64","","Constructs a 128-bit integer vector, initialized in…",null,[[["__m64"]],["__m128i"]]],[5,"_mm_movepi64_pi64","","Returns the lower 64 bits of a 128-bit integer vector as a…",null,[[["__m128i"]],["__m64"]]],[5,"_mm_movpi64_epi64","","Moves the 64-bit operand to a 128-bit integer vector,…",null,[[["__m64"]],["__m128i"]]],[5,"_mm_cvtpd_pi32","","Converts the two double-precision floating-point elements…",null,[[["__m128d"]],["__m64"]]],[5,"_mm_cvttpd_pi32","","Converts the two double-precision floating-point elements…",null,[[["__m128d"]],["__m64"]]],[5,"_mm_addsub_ps","","Alternatively add and subtract packed single-precision…",null,[[["__m128"]],["__m128"]]],[5,"_mm_addsub_pd","","Alternatively add and subtract packed double-precision…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_hadd_pd","","Horizontally adds adjacent pairs of double-precision…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_hadd_ps","","Horizontally adds adjacent pairs of single-precision…",null,[[["__m128"]],["__m128"]]],[5,"_mm_hsub_pd","","Horizontally subtract adjacent pairs of double-precision…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_hsub_ps","","Horizontally adds adjacent pairs of single-precision…",null,[[["__m128"]],["__m128"]]],[5,"_mm_lddqu_si128","","Loads 128-bits of integer data from unaligned memory. This…",null,[[],["__m128i"]]],[5,"_mm_movedup_pd","","Duplicate the low double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_loaddup_pd","","Loads a double-precision (64-bit) floating-point element…",null,[[],["__m128d"]]],[5,"_mm_movehdup_ps","","Duplicate odd-indexed single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_moveldup_ps","","Duplicate even-indexed single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_abs_epi8","","Computes the absolute value of packed 8-bit signed…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_abs_epi16","","Computes the absolute value of each of the packed 16-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_abs_epi32","","Computes the absolute value of each of the packed 32-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_shuffle_epi8","","Shuffles bytes from `a` according to the content of `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_alignr_epi8","","Concatenate 16-byte blocks in `a` and `b` into a 32-byte…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_hadd_epi16","","Horizontally adds the adjacent pairs of values contained…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_hadds_epi16","","Horizontally adds the adjacent pairs of values contained…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_hadd_epi32","","Horizontally adds the adjacent pairs of values contained…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_hsub_epi16","","Horizontally subtract the adjacent pairs of values…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_hsubs_epi16","","Horizontally subtract the adjacent pairs of values…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_hsub_epi32","","Horizontally subtract the adjacent pairs of values…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_maddubs_epi16","","Multiplies corresponding pairs of packed 8-bit unsigned…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_mulhrs_epi16","","Multiplies packed 16-bit signed integer values, truncate…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sign_epi8","","Negates packed 8-bit integers in `a` when the…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sign_epi16","","Negates packed 16-bit integers in `a` when the…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sign_epi32","","Negates packed 32-bit integers in `a` when the…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_abs_pi8","","Computes the absolute value of packed 8-bit integers in…",null,[[["__m64"]],["__m64"]]],[5,"_mm_abs_pi16","","Computes the absolute value of packed 8-bit integers in…",null,[[["__m64"]],["__m64"]]],[5,"_mm_abs_pi32","","Computes the absolute value of packed 32-bit integers in…",null,[[["__m64"]],["__m64"]]],[5,"_mm_shuffle_pi8","","Shuffles packed 8-bit integers in `a` according to shuffle…",null,[[["__m64"]],["__m64"]]],[5,"_mm_alignr_pi8","","Concatenates the two 64-bit integer vector operands, and…",null,[[["__m64"],["i32"]],["__m64"]]],[5,"_mm_hadd_pi16","","Horizontally adds the adjacent pairs of values contained…",null,[[["__m64"]],["__m64"]]],[5,"_mm_hadd_pi32","","Horizontally adds the adjacent pairs of values contained…",null,[[["__m64"]],["__m64"]]],[5,"_mm_hadds_pi16","","Horizontally adds the adjacent pairs of values contained…",null,[[["__m64"]],["__m64"]]],[5,"_mm_hsub_pi16","","Horizontally subtracts the adjacent pairs of values…",null,[[["__m64"]],["__m64"]]],[5,"_mm_hsub_pi32","","Horizontally subtracts the adjacent pairs of values…",null,[[["__m64"]],["__m64"]]],[5,"_mm_hsubs_pi16","","Horizontally subtracts the adjacent pairs of values…",null,[[["__m64"]],["__m64"]]],[5,"_mm_maddubs_pi16","","Multiplies corresponding pairs of packed 8-bit unsigned…",null,[[["__m64"]],["__m64"]]],[5,"_mm_mulhrs_pi16","","Multiplies packed 16-bit signed integer values, truncates…",null,[[["__m64"]],["__m64"]]],[5,"_mm_sign_pi8","","Negates packed 8-bit integers in `a` when the…",null,[[["__m64"]],["__m64"]]],[5,"_mm_sign_pi16","","Negates packed 16-bit integers in `a` when the…",null,[[["__m64"]],["__m64"]]],[5,"_mm_sign_pi32","","Negates packed 32-bit integers in `a` when the…",null,[[["__m64"]],["__m64"]]],[5,"_mm_blendv_epi8","","Blend packed 8-bit integers from `a` and `b` using `mask`",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_blend_epi16","","Blend packed 16-bit integers from `a` and `b` using the…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_blendv_pd","","Blend packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_blendv_ps","","Blend packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm_blend_pd","","Blend packed double-precision (64-bit) floating-point…",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_blend_ps","","Blend packed single-precision (32-bit) floating-point…",null,[[["i32"],["__m128"]],["__m128"]]],[5,"_mm_extract_ps","","Extracts a single-precision (32-bit) floating-point…",null,[[["i32"],["__m128"]],["i32"]]],[5,"_mm_extract_epi8","","Extracts an 8-bit integer from `a`, selected with `imm8`.…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_extract_epi32","","Extracts an 32-bit integer from `a` selected with `imm8`",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_insert_ps","","Select a single value in `a` to store at some position in…",null,[[["i32"],["__m128"]],["__m128"]]],[5,"_mm_insert_epi8","","Returns a copy of `a` with the 8-bit integer from `i`…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_insert_epi32","","Returns a copy of `a` with the 32-bit integer from `i`…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_max_epi8","","Compares packed 8-bit integers in `a` and `b` and returns…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_max_epu16","","Compares packed unsigned 16-bit integers in `a` and `b`,…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_max_epi32","","Compares packed 32-bit integers in `a` and `b`, and…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_max_epu32","","Compares packed unsigned 32-bit integers in `a` and `b`,…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_min_epi8","","Compares packed 8-bit integers in `a` and `b` and returns…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_min_epu16","","Compares packed unsigned 16-bit integers in `a` and `b`,…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_min_epi32","","Compares packed 32-bit integers in `a` and `b`, and…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_min_epu32","","Compares packed unsigned 32-bit integers in `a` and `b`,…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_packus_epi32","","Converts packed 32-bit integers from `a` and `b` to packed…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmpeq_epi64","","Compares packed 64-bit integers in `a` and `b` for equality",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepi8_epi16","","Sign extend packed 8-bit integers in `a` to packed 16-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepi8_epi32","","Sign extend packed 8-bit integers in `a` to packed 32-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepi8_epi64","","Sign extend packed 8-bit integers in the low 8 bytes of…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepi16_epi32","","Sign extend packed 16-bit integers in `a` to packed 32-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepi16_epi64","","Sign extend packed 16-bit integers in `a` to packed 64-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepi32_epi64","","Sign extend packed 32-bit integers in `a` to packed 64-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepu8_epi16","","Zeroes extend packed unsigned 8-bit integers in `a` to…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepu8_epi32","","Zeroes extend packed unsigned 8-bit integers in `a` to…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepu8_epi64","","Zeroes extend packed unsigned 8-bit integers in `a` to…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepu16_epi32","","Zeroes extend packed unsigned 16-bit integers in `a` to…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepu16_epi64","","Zeroes extend packed unsigned 16-bit integers in `a` to…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepu32_epi64","","Zeroes extend packed unsigned 32-bit integers in `a` to…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_dp_pd","","Returns the dot product of two __m128d vectors.",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_dp_ps","","Returns the dot product of two __m128 vectors.",null,[[["i32"],["__m128"]],["__m128"]]],[5,"_mm_floor_pd","","Round the packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_floor_ps","","Round the packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm_floor_sd","","Round the lower double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_floor_ss","","Round the lower single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm_ceil_pd","","Round the packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_ceil_ps","","Round the packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm_ceil_sd","","Round the lower double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_ceil_ss","","Round the lower single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm_round_pd","","Round the packed double-precision (64-bit) floating-point…",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_round_ps","","Round the packed single-precision (32-bit) floating-point…",null,[[["i32"],["__m128"]],["__m128"]]],[5,"_mm_round_sd","","Round the lower double-precision (64-bit) floating-point…",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_round_ss","","Round the lower single-precision (32-bit) floating-point…",null,[[["i32"],["__m128"]],["__m128"]]],[5,"_mm_minpos_epu16","","Finds the minimum unsigned 16-bit element in the 128-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_mul_epi32","","Multiplies the low 32-bit integers from each packed 64-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_mullo_epi32","","Multiplies the packed 32-bit integers in `a` and `b`,…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_mpsadbw_epu8","","Subtracts 8-bit unsigned integer values and computes the…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_testz_si128","","Tests whether the specified bits in a 128-bit integer…",null,[[["__m128i"]],["i32"]]],[5,"_mm_testc_si128","","Tests whether the specified bits in a 128-bit integer…",null,[[["__m128i"]],["i32"]]],[5,"_mm_testnzc_si128","","Tests whether the specified bits in a 128-bit integer…",null,[[["__m128i"]],["i32"]]],[5,"_mm_test_all_zeros","","Tests whether the specified bits in a 128-bit integer…",null,[[["__m128i"]],["i32"]]],[5,"_mm_test_all_ones","","Tests whether the specified bits in `a` 128-bit integer…",null,[[["__m128i"]],["i32"]]],[5,"_mm_test_mix_ones_zeros","","Tests whether the specified bits in a 128-bit integer…",null,[[["__m128i"]],["i32"]]],[5,"_mm_cmpistrm","","Compares packed strings with implicit lengths in `a` and…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_cmpistri","","Compares packed strings with implicit lengths in `a` and…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_cmpistrz","","Compares packed strings with implicit lengths in `a` and…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_cmpistrc","","Compares packed strings with implicit lengths in `a` and…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_cmpistrs","","Compares packed strings with implicit lengths in `a` and…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_cmpistro","","Compares packed strings with implicit lengths in `a` and…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_cmpistra","","Compares packed strings with implicit lengths in `a` and…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_cmpestrm","","Compares packed strings in `a` and `b` with lengths `la`…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_cmpestri","","Compares packed strings `a` and `b` with lengths `la` and…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_cmpestrz","","Compares packed strings in `a` and `b` with lengths `la`…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_cmpestrc","","Compares packed strings in `a` and `b` with lengths `la`…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_cmpestrs","","Compares packed strings in `a` and `b` with lengths `la`…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_cmpestro","","Compares packed strings in `a` and `b` with lengths `la`…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_cmpestra","","Compares packed strings in `a` and `b` with lengths `la`…",null,[[["__m128i"],["i32"]],["i32"]]],[5,"_mm_crc32_u8","","Starting with the initial value in `crc`, return the…",null,[[["u32"],["u8"]],["u32"]]],[5,"_mm_crc32_u16","","Starting with the initial value in `crc`, return the…",null,[[["u16"],["u32"]],["u32"]]],[5,"_mm_crc32_u32","","Starting with the initial value in `crc`, return the…",null,[[["u32"]],["u32"]]],[5,"_mm_cmpgt_epi64","","Compares packed 64-bit integers in `a` and `b` for…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_add_pd","","Adds packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_add_ps","","Adds packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_and_pd","","Computes the bitwise AND of a packed double-precision…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_and_ps","","Computes the bitwise AND of packed single-precision…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_or_pd","","Computes the bitwise OR packed double-precision (64-bit)…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_or_ps","","Computes the bitwise OR packed single-precision (32-bit)…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_shuffle_pd","","Shuffles double-precision (64-bit) floating-point elements…",null,[[["__m256d"],["i32"]],["__m256d"]]],[5,"_mm256_shuffle_ps","","Shuffles single-precision (32-bit) floating-point elements…",null,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm256_andnot_pd","","Computes the bitwise NOT of packed double-precision…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_andnot_ps","","Computes the bitwise NOT of packed single-precision…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_max_pd","","Compares packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_max_ps","","Compares packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_min_pd","","Compares packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_min_ps","","Compares packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_mul_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_mul_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_addsub_pd","","Alternatively adds and subtracts packed double-precision…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_addsub_ps","","Alternatively adds and subtracts packed single-precision…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_sub_pd","","Subtracts packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_sub_ps","","Subtracts packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_div_ps","","Computes the division of each of the 8 packed 32-bit…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_div_pd","","Computes the division of each of the 4 packed 64-bit…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_round_pd","","Rounds packed double-precision (64-bit) floating point…",null,[[["__m256d"],["i32"]],["__m256d"]]],[5,"_mm256_ceil_pd","","Rounds packed double-precision (64-bit) floating point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_floor_pd","","Rounds packed double-precision (64-bit) floating point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_round_ps","","Rounds packed single-precision (32-bit) floating point…",null,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm256_ceil_ps","","Rounds packed single-precision (32-bit) floating point…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_floor_ps","","Rounds packed single-precision (32-bit) floating point…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_sqrt_ps","","Returns the square root of packed single-precision…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_sqrt_pd","","Returns the square root of packed double-precision…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_blend_pd","","Blends packed double-precision (64-bit) floating-point…",null,[[["__m256d"],["i32"]],["__m256d"]]],[5,"_mm256_blend_ps","","Blends packed single-precision (32-bit) floating-point…",null,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm256_blendv_pd","","Blends packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_blendv_ps","","Blends packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_dp_ps","","Conditionally multiplies the packed single-precision…",null,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm256_hadd_pd","","Horizontal addition of adjacent pairs in the two packed…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_hadd_ps","","Horizontal addition of adjacent pairs in the two packed…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_hsub_pd","","Horizontal subtraction of adjacent pairs in the two packed…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_hsub_ps","","Horizontal subtraction of adjacent pairs in the two packed…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_xor_pd","","Computes the bitwise XOR of packed double-precision…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_xor_ps","","Computes the bitwise XOR of packed single-precision…",null,[[["__m256"]],["__m256"]]],[5,"_mm_cmp_pd","","Compares packed double-precision (64-bit) floating-point…",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm256_cmp_pd","","Compares packed double-precision (64-bit) floating-point…",null,[[["__m256d"],["i32"]],["__m256d"]]],[5,"_mm_cmp_ps","","Compares packed single-precision (32-bit) floating-point…",null,[[["i32"],["__m128"]],["__m128"]]],[5,"_mm256_cmp_ps","","Compares packed single-precision (32-bit) floating-point…",null,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm_cmp_sd","","Compares the lower double-precision (64-bit)…",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_cmp_ss","","Compares the lower single-precision (32-bit)…",null,[[["i32"],["__m128"]],["__m128"]]],[5,"_mm256_cvtepi32_pd","","Converts packed 32-bit integers in `a` to packed…",null,[[["__m128i"]],["__m256d"]]],[5,"_mm256_cvtepi32_ps","","Converts packed 32-bit integers in `a` to packed…",null,[[["__m256i"]],["__m256"]]],[5,"_mm256_cvtpd_ps","","Converts packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m128"]]],[5,"_mm256_cvtps_epi32","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256i"]]],[5,"_mm256_cvtps_pd","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m256d"]]],[5,"_mm256_cvttpd_epi32","","Converts packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m128i"]]],[5,"_mm256_cvtpd_epi32","","Converts packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m128i"]]],[5,"_mm256_cvttps_epi32","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256i"]]],[5,"_mm256_extractf128_ps","","Extracts 128 bits (composed of 4 packed single-precision…",null,[[["__m256"],["i32"]],["__m128"]]],[5,"_mm256_extractf128_pd","","Extracts 128 bits (composed of 2 packed double-precision…",null,[[["__m256d"],["i32"]],["__m128d"]]],[5,"_mm256_extractf128_si256","","Extracts 128 bits (composed of integer data) from `a`,…",null,[[["__m256i"],["i32"]],["__m128i"]]],[5,"_mm256_zeroall","","Zeroes the contents of all XMM or YMM registers.",null,[[]]],[5,"_mm256_zeroupper","","Zeroes the upper 128 bits of all YMM registers; the lower…",null,[[]]],[5,"_mm256_permutevar_ps","","Shuffles single-precision (32-bit) floating-point elements…",null,[[["__m256"],["__m256i"]],["__m256"]]],[5,"_mm_permutevar_ps","","Shuffles single-precision (32-bit) floating-point elements…",null,[[["__m128i"],["__m128"]],["__m128"]]],[5,"_mm256_permute_ps","","Shuffles single-precision (32-bit) floating-point elements…",null,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm_permute_ps","","Shuffles single-precision (32-bit) floating-point elements…",null,[[["i32"],["__m128"]],["__m128"]]],[5,"_mm256_permutevar_pd","","Shuffles double-precision (64-bit) floating-point elements…",null,[[["__m256d"],["__m256i"]],["__m256d"]]],[5,"_mm_permutevar_pd","","Shuffles double-precision (64-bit) floating-point elements…",null,[[["__m128i"],["__m128d"]],["__m128d"]]],[5,"_mm256_permute_pd","","Shuffles double-precision (64-bit) floating-point elements…",null,[[["__m256d"],["i32"]],["__m256d"]]],[5,"_mm_permute_pd","","Shuffles double-precision (64-bit) floating-point elements…",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm256_permute2f128_ps","","Shuffles 256 bits (composed of 8 packed single-precision…",null,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm256_permute2f128_pd","","Shuffles 256 bits (composed of 4 packed double-precision…",null,[[["__m256d"],["i32"]],["__m256d"]]],[5,"_mm256_permute2f128_si256","","Shuffles 258-bits (composed of integer data) selected by…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_broadcast_ss","","Broadcasts a single-precision (32-bit) floating-point…",null,[[["f32"]],["__m256"]]],[5,"_mm_broadcast_ss","","Broadcasts a single-precision (32-bit) floating-point…",null,[[["f32"]],["__m128"]]],[5,"_mm256_broadcast_sd","","Broadcasts a double-precision (64-bit) floating-point…",null,[[["f64"]],["__m256d"]]],[5,"_mm256_broadcast_ps","","Broadcasts 128 bits from memory (composed of 4 packed…",null,[[["__m128"]],["__m256"]]],[5,"_mm256_broadcast_pd","","Broadcasts 128 bits from memory (composed of 2 packed…",null,[[["__m128d"]],["__m256d"]]],[5,"_mm256_insertf128_ps","","Copies `a` to result, then inserts 128 bits (composed of 4…",null,[[["i32"],["__m256"],["__m128"]],["__m256"]]],[5,"_mm256_insertf128_pd","","Copies `a` to result, then inserts 128 bits (composed of 2…",null,[[["__m256d"],["__m128d"],["i32"]],["__m256d"]]],[5,"_mm256_insertf128_si256","","Copies `a` to result, then inserts 128 bits from `b` into…",null,[[["__m128i"],["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_insert_epi8","","Copies `a` to result, and inserts the 8-bit integer `i`…",null,[[["__m256i"],["i8"],["i32"]],["__m256i"]]],[5,"_mm256_insert_epi16","","Copies `a` to result, and inserts the 16-bit integer `i`…",null,[[["__m256i"],["i16"],["i32"]],["__m256i"]]],[5,"_mm256_insert_epi32","","Copies `a` to result, and inserts the 32-bit integer `i`…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_load_pd","","Loads 256-bits (composed of 4 packed double-precision…",null,[[],["__m256d"]]],[5,"_mm256_store_pd","","Stores 256-bits (composed of 4 packed double-precision…",null,[[["__m256d"]]]],[5,"_mm256_load_ps","","Loads 256-bits (composed of 8 packed single-precision…",null,[[],["__m256"]]],[5,"_mm256_store_ps","","Stores 256-bits (composed of 8 packed single-precision…",null,[[["__m256"]]]],[5,"_mm256_loadu_pd","","Loads 256-bits (composed of 4 packed double-precision…",null,[[],["__m256d"]]],[5,"_mm256_storeu_pd","","Stores 256-bits (composed of 4 packed double-precision…",null,[[["__m256d"]]]],[5,"_mm256_loadu_ps","","Loads 256-bits (composed of 8 packed single-precision…",null,[[],["__m256"]]],[5,"_mm256_storeu_ps","","Stores 256-bits (composed of 8 packed single-precision…",null,[[["__m256"]]]],[5,"_mm256_load_si256","","Loads 256-bits of integer data from memory into result.…",null,[[],["__m256i"]]],[5,"_mm256_store_si256","","Stores 256-bits of integer data from `a` into memory.…",null,[[["__m256i"]]]],[5,"_mm256_loadu_si256","","Loads 256-bits of integer data from memory into result.…",null,[[],["__m256i"]]],[5,"_mm256_storeu_si256","","Stores 256-bits of integer data from `a` into memory.…",null,[[["__m256i"]]]],[5,"_mm256_maskload_pd","","Loads packed double-precision (64-bit) floating-point…",null,[[["__m256i"]],["__m256d"]]],[5,"_mm256_maskstore_pd","","Stores packed double-precision (64-bit) floating-point…",null,[[["__m256d"],["__m256i"]]]],[5,"_mm_maskload_pd","","Loads packed double-precision (64-bit) floating-point…",null,[[["__m128i"]],["__m128d"]]],[5,"_mm_maskstore_pd","","Stores packed double-precision (64-bit) floating-point…",null,[[["__m128i"],["__m128d"]]]],[5,"_mm256_maskload_ps","","Loads packed single-precision (32-bit) floating-point…",null,[[["__m256i"]],["__m256"]]],[5,"_mm256_maskstore_ps","","Stores packed single-precision (32-bit) floating-point…",null,[[["__m256i"],["__m256"]]]],[5,"_mm_maskload_ps","","Loads packed single-precision (32-bit) floating-point…",null,[[["__m128i"]],["__m128"]]],[5,"_mm_maskstore_ps","","Stores packed single-precision (32-bit) floating-point…",null,[[["__m128i"],["__m128"]]]],[5,"_mm256_movehdup_ps","","Duplicate odd-indexed single-precision (32-bit)…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_moveldup_ps","","Duplicate even-indexed single-precision (32-bit)…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_movedup_pd","","Duplicate even-indexed double-precision (64-bit)…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_lddqu_si256","","Loads 256-bits of integer data from unaligned memory into…",null,[[],["__m256i"]]],[5,"_mm256_stream_si256","","Moves integer data from a 256-bit integer vector to a…",null,[[["__m256i"]]]],[5,"_mm256_stream_pd","","Moves double-precision values from a 256-bit vector of `[4…",null,[[["__m256d"]]]],[5,"_mm256_stream_ps","","Moves single-precision floating point values from a…",null,[[["__m256"]]]],[5,"_mm256_rcp_ps","","Computes the approximate reciprocal of packed…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_rsqrt_ps","","Computes the approximate reciprocal square root of packed…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_unpackhi_pd","","Unpacks and interleave double-precision (64-bit)…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_unpackhi_ps","","Unpacks and interleave single-precision (32-bit)…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_unpacklo_pd","","Unpacks and interleave double-precision (64-bit)…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_unpacklo_ps","","Unpacks and interleave single-precision (32-bit)…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_testz_si256","","Computes the bitwise AND of 256 bits (representing integer…",null,[[["__m256i"]],["i32"]]],[5,"_mm256_testc_si256","","Computes the bitwise AND of 256 bits (representing integer…",null,[[["__m256i"]],["i32"]]],[5,"_mm256_testnzc_si256","","Computes the bitwise AND of 256 bits (representing integer…",null,[[["__m256i"]],["i32"]]],[5,"_mm256_testz_pd","","Computes the bitwise AND of 256 bits (representing…",null,[[["__m256d"]],["i32"]]],[5,"_mm256_testc_pd","","Computes the bitwise AND of 256 bits (representing…",null,[[["__m256d"]],["i32"]]],[5,"_mm256_testnzc_pd","","Computes the bitwise AND of 256 bits (representing…",null,[[["__m256d"]],["i32"]]],[5,"_mm_testz_pd","","Computes the bitwise AND of 128 bits (representing…",null,[[["__m128d"]],["i32"]]],[5,"_mm_testc_pd","","Computes the bitwise AND of 128 bits (representing…",null,[[["__m128d"]],["i32"]]],[5,"_mm_testnzc_pd","","Computes the bitwise AND of 128 bits (representing…",null,[[["__m128d"]],["i32"]]],[5,"_mm256_testz_ps","","Computes the bitwise AND of 256 bits (representing…",null,[[["__m256"]],["i32"]]],[5,"_mm256_testc_ps","","Computes the bitwise AND of 256 bits (representing…",null,[[["__m256"]],["i32"]]],[5,"_mm256_testnzc_ps","","Computes the bitwise AND of 256 bits (representing…",null,[[["__m256"]],["i32"]]],[5,"_mm_testz_ps","","Computes the bitwise AND of 128 bits (representing…",null,[[["__m128"]],["i32"]]],[5,"_mm_testc_ps","","Computes the bitwise AND of 128 bits (representing…",null,[[["__m128"]],["i32"]]],[5,"_mm_testnzc_ps","","Computes the bitwise AND of 128 bits (representing…",null,[[["__m128"]],["i32"]]],[5,"_mm256_movemask_pd","","Sets each bit of the returned mask based on the most…",null,[[["__m256d"]],["i32"]]],[5,"_mm256_movemask_ps","","Sets each bit of the returned mask based on the most…",null,[[["__m256"]],["i32"]]],[5,"_mm256_setzero_pd","","Returns vector of type __m256d with all elements set to…",null,[[],["__m256d"]]],[5,"_mm256_setzero_ps","","Returns vector of type __m256 with all elements set to zero.",null,[[],["__m256"]]],[5,"_mm256_setzero_si256","","Returns vector of type __m256i with all elements set to…",null,[[],["__m256i"]]],[5,"_mm256_set_pd","","Sets packed double-precision (64-bit) floating-point…",null,[[["f64"]],["__m256d"]]],[5,"_mm256_set_ps","","Sets packed single-precision (32-bit) floating-point…",null,[[["f32"]],["__m256"]]],[5,"_mm256_set_epi8","","Sets packed 8-bit integers in returned vector with the…",null,[[["i8"]],["__m256i"]]],[5,"_mm256_set_epi16","","Sets packed 16-bit integers in returned vector with the…",null,[[["i16"]],["__m256i"]]],[5,"_mm256_set_epi32","","Sets packed 32-bit integers in returned vector with the…",null,[[["i32"]],["__m256i"]]],[5,"_mm256_set_epi64x","","Sets packed 64-bit integers in returned vector with the…",null,[[["i64"]],["__m256i"]]],[5,"_mm256_setr_pd","","Sets packed double-precision (64-bit) floating-point…",null,[[["f64"]],["__m256d"]]],[5,"_mm256_setr_ps","","Sets packed single-precision (32-bit) floating-point…",null,[[["f32"]],["__m256"]]],[5,"_mm256_setr_epi8","","Sets packed 8-bit integers in returned vector with the…",null,[[["i8"]],["__m256i"]]],[5,"_mm256_setr_epi16","","Sets packed 16-bit integers in returned vector with the…",null,[[["i16"]],["__m256i"]]],[5,"_mm256_setr_epi32","","Sets packed 32-bit integers in returned vector with the…",null,[[["i32"]],["__m256i"]]],[5,"_mm256_setr_epi64x","","Sets packed 64-bit integers in returned vector with the…",null,[[["i64"]],["__m256i"]]],[5,"_mm256_set1_pd","","Broadcasts double-precision (64-bit) floating-point value…",null,[[["f64"]],["__m256d"]]],[5,"_mm256_set1_ps","","Broadcasts single-precision (32-bit) floating-point value…",null,[[["f32"]],["__m256"]]],[5,"_mm256_set1_epi8","","Broadcasts 8-bit integer `a` to all elements of returned…",null,[[["i8"]],["__m256i"]]],[5,"_mm256_set1_epi16","","Broadcasts 16-bit integer `a` to all all elements of…",null,[[["i16"]],["__m256i"]]],[5,"_mm256_set1_epi32","","Broadcasts 32-bit integer `a` to all elements of returned…",null,[[["i32"]],["__m256i"]]],[5,"_mm256_set1_epi64x","","Broadcasts 64-bit integer `a` to all elements of returned…",null,[[["i64"]],["__m256i"]]],[5,"_mm256_castpd_ps","","Cast vector of type __m256d to type __m256.",null,[[["__m256d"]],["__m256"]]],[5,"_mm256_castps_pd","","Cast vector of type __m256 to type __m256d.",null,[[["__m256"]],["__m256d"]]],[5,"_mm256_castps_si256","","Casts vector of type __m256 to type __m256i.",null,[[["__m256"]],["__m256i"]]],[5,"_mm256_castsi256_ps","","Casts vector of type __m256i to type __m256.",null,[[["__m256i"]],["__m256"]]],[5,"_mm256_castpd_si256","","Casts vector of type __m256d to type __m256i.",null,[[["__m256d"]],["__m256i"]]],[5,"_mm256_castsi256_pd","","Casts vector of type __m256i to type __m256d.",null,[[["__m256i"]],["__m256d"]]],[5,"_mm256_castps256_ps128","","Casts vector of type __m256 to type __m128.",null,[[["__m256"]],["__m128"]]],[5,"_mm256_castpd256_pd128","","Casts vector of type __m256d to type __m128d.",null,[[["__m256d"]],["__m128d"]]],[5,"_mm256_castsi256_si128","","Casts vector of type __m256i to type __m128i.",null,[[["__m256i"]],["__m128i"]]],[5,"_mm256_castps128_ps256","","Casts vector of type __m128 to type __m256; the upper 128…",null,[[["__m128"]],["__m256"]]],[5,"_mm256_castpd128_pd256","","Casts vector of type __m128d to type __m256d; the upper…",null,[[["__m128d"]],["__m256d"]]],[5,"_mm256_castsi128_si256","","Casts vector of type __m128i to type __m256i; the upper…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_zextps128_ps256","","Constructs a 256-bit floating-point vector of `[8 x…",null,[[["__m128"]],["__m256"]]],[5,"_mm256_zextsi128_si256","","Constructs a 256-bit integer vector from a 128-bit integer…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_zextpd128_pd256","","Constructs a 256-bit floating-point vector of `[4 x…",null,[[["__m128d"]],["__m256d"]]],[5,"_mm256_undefined_ps","","Returns vector of type `__m256` with undefined elements.",null,[[],["__m256"]]],[5,"_mm256_undefined_pd","","Returns vector of type `__m256d` with undefined elements.",null,[[],["__m256d"]]],[5,"_mm256_undefined_si256","","Returns vector of type __m256i with undefined elements.",null,[[],["__m256i"]]],[5,"_mm256_set_m128","","Sets packed __m256 returned vector with the supplied values.",null,[[["__m128"]],["__m256"]]],[5,"_mm256_set_m128d","","Sets packed __m256d returned vector with the supplied…",null,[[["__m128d"]],["__m256d"]]],[5,"_mm256_set_m128i","","Sets packed __m256i returned vector with the supplied…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_setr_m128","","Sets packed __m256 returned vector with the supplied values.",null,[[["__m128"]],["__m256"]]],[5,"_mm256_setr_m128d","","Sets packed __m256d returned vector with the supplied…",null,[[["__m128d"]],["__m256d"]]],[5,"_mm256_setr_m128i","","Sets packed __m256i returned vector with the supplied…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_loadu2_m128","","Loads two 128-bit values (composed of 4 packed…",null,[[],["__m256"]]],[5,"_mm256_loadu2_m128d","","Loads two 128-bit values (composed of 2 packed…",null,[[],["__m256d"]]],[5,"_mm256_loadu2_m128i","","Loads two 128-bit values (composed of integer data) from…",null,[[],["__m256i"]]],[5,"_mm256_storeu2_m128","","Stores the high and low 128-bit halves (each composed of 4…",null,[[["__m256"]]]],[5,"_mm256_storeu2_m128d","","Stores the high and low 128-bit halves (each composed of 2…",null,[[["__m256d"]]]],[5,"_mm256_storeu2_m128i","","Stores the high and low 128-bit halves (each composed of…",null,[[["__m256i"]]]],[5,"_mm256_cvtss_f32","","Returns the first element of the input vector of `[8 x…",null,[[["__m256"]],["f32"]]],[5,"_mm256_abs_epi32","","Computes the absolute values of packed 32-bit integers in…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_abs_epi16","","Computes the absolute values of packed 16-bit integers in…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_abs_epi8","","Computes the absolute values of packed 8-bit integers in…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_add_epi64","","Adds packed 64-bit integers in `a` and `b`.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_add_epi32","","Adds packed 32-bit integers in `a` and `b`.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_add_epi16","","Adds packed 16-bit integers in `a` and `b`.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_add_epi8","","Adds packed 8-bit integers in `a` and `b`.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_adds_epi8","","Adds packed 8-bit integers in `a` and `b` using saturation.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_adds_epi16","","Adds packed 16-bit integers in `a` and `b` using saturation.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_adds_epu8","","Adds packed unsigned 8-bit integers in `a` and `b` using…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_adds_epu16","","Adds packed unsigned 16-bit integers in `a` and `b` using…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_alignr_epi8","","Concatenates pairs of 16-byte blocks in `a` and `b` into a…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_and_si256","","Computes the bitwise AND of 256 bits (representing integer…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_andnot_si256","","Computes the bitwise NOT of 256 bits (representing integer…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_avg_epu16","","Averages packed unsigned 16-bit integers in `a` and `b`.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_avg_epu8","","Averages packed unsigned 8-bit integers in `a` and `b`.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_blend_epi32","","Blends packed 32-bit integers from `a` and `b` using…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_blend_epi32","","Blends packed 32-bit integers from `a` and `b` using…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_blend_epi16","","Blends packed 16-bit integers from `a` and `b` using…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_blendv_epi8","","Blends packed 8-bit integers from `a` and `b` using `mask`.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_broadcastb_epi8","","Broadcasts the low packed 8-bit integer from `a` to all…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_broadcastb_epi8","","Broadcasts the low packed 8-bit integer from `a` to all…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm_broadcastd_epi32","","Broadcasts the low packed 32-bit integer from `a` to all…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_broadcastd_epi32","","Broadcasts the low packed 32-bit integer from `a` to all…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm_broadcastq_epi64","","Broadcasts the low packed 64-bit integer from `a` to all…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_broadcastq_epi64","","Broadcasts the low packed 64-bit integer from `a` to all…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm_broadcastsd_pd","","Broadcasts the low double-precision (64-bit)…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm256_broadcastsd_pd","","Broadcasts the low double-precision (64-bit)…",null,[[["__m128d"]],["__m256d"]]],[5,"_mm256_broadcastsi128_si256","","Broadcasts 128 bits of integer data from a to all 128-bit…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm_broadcastss_ps","","Broadcasts the low single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm256_broadcastss_ps","","Broadcasts the low single-precision (32-bit)…",null,[[["__m128"]],["__m256"]]],[5,"_mm_broadcastw_epi16","","Broadcasts the low packed 16-bit integer from a to all…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_broadcastw_epi16","","Broadcasts the low packed 16-bit integer from a to all…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cmpeq_epi64","","Compares packed 64-bit integers in `a` and `b` for equality.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_cmpeq_epi32","","Compares packed 32-bit integers in `a` and `b` for equality.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_cmpeq_epi16","","Compares packed 16-bit integers in `a` and `b` for equality.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_cmpeq_epi8","","Compares packed 8-bit integers in `a` and `b` for equality.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_cmpgt_epi64","","Compares packed 64-bit integers in `a` and `b` for…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_cmpgt_epi32","","Compares packed 32-bit integers in `a` and `b` for…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_cmpgt_epi16","","Compares packed 16-bit integers in `a` and `b` for…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_cmpgt_epi8","","Compares packed 8-bit integers in `a` and `b` for…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_cvtepi16_epi32","","Sign-extend 16-bit integers to 32-bit integers.",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepi16_epi64","","Sign-extend 16-bit integers to 64-bit integers.",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepi32_epi64","","Sign-extend 32-bit integers to 64-bit integers.",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepi8_epi16","","Sign-extend 8-bit integers to 16-bit integers.",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepi8_epi32","","Sign-extend 8-bit integers to 32-bit integers.",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepi8_epi64","","Sign-extend 8-bit integers to 64-bit integers.",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepu16_epi32","","Zeroes extend packed unsigned 16-bit integers in `a` to…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepu16_epi64","","Zero-extend the lower four unsigned 16-bit integers in `a`…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepu32_epi64","","Zero-extend unsigned 32-bit integers in `a` to 64-bit…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepu8_epi16","","Zero-extend unsigned 8-bit integers in `a` to 16-bit…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepu8_epi32","","Zero-extend the lower eight unsigned 8-bit integers in `a`…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepu8_epi64","","Zero-extend the lower four unsigned 8-bit integers in `a`…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_extracti128_si256","","Extracts 128 bits (of integer data) from `a` selected with…",null,[[["__m256i"],["i32"]],["__m128i"]]],[5,"_mm256_hadd_epi16","","Horizontally adds adjacent pairs of 16-bit integers in `a`…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_hadd_epi32","","Horizontally adds adjacent pairs of 32-bit integers in `a`…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_hadds_epi16","","Horizontally adds adjacent pairs of 16-bit integers in `a`…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_hsub_epi16","","Horizontally subtract adjacent pairs of 16-bit integers in…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_hsub_epi32","","Horizontally subtract adjacent pairs of 32-bit integers in…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_hsubs_epi16","","Horizontally subtract adjacent pairs of 16-bit integers in…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_i32gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_mask_i32gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_i32gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_mask_i32gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_i32gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m128"]]],[5,"_mm_mask_i32gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["__m128"],["i32"]],["__m128"]]],[5,"_mm256_i32gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m256i"],["i32"]],["__m256"]]],[5,"_mm256_mask_i32gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m256"],["i32"],["__m256i"]],["__m256"]]],[5,"_mm_i32gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_mask_i32gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_i32gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m256i"]]],[5,"_mm256_mask_i32gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"],["__m256i"]],["__m256i"]]],[5,"_mm_i32gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m128d"]]],[5,"_mm_mask_i32gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["__m128d"],["i32"]],["__m128d"]]],[5,"_mm256_i32gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m256d"]]],[5,"_mm256_mask_i32gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m256d"],["__m128i"],["i32"]],["__m256d"]]],[5,"_mm_i64gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_mask_i64gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_i64gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m256i"],["i32"]],["__m128i"]]],[5,"_mm256_mask_i64gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"],["__m256i"]],["__m128i"]]],[5,"_mm_i64gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m128"]]],[5,"_mm_mask_i64gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["__m128"],["i32"]],["__m128"]]],[5,"_mm256_i64gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m256i"],["i32"]],["__m128"]]],[5,"_mm256_mask_i64gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m128"],["i32"],["__m256i"]],["__m128"]]],[5,"_mm_i64gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_mask_i64gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm256_i64gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_mask_i64gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_i64gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"]],["__m128d"]]],[5,"_mm_mask_i64gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["__m128d"],["i32"]],["__m128d"]]],[5,"_mm256_i64gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m256i"],["i32"]],["__m256d"]]],[5,"_mm256_mask_i64gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m256d"],["i32"],["__m256i"]],["__m256d"]]],[5,"_mm256_inserti128_si256","","Copies `a` to `dst`, then insert 128 bits (of integer…",null,[[["__m128i"],["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_madd_epi16","","Multiplies packed signed 16-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_maddubs_epi16","","Vertically multiplies each unsigned 8-bit integer from `a`…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_maskload_epi32","","Loads packed 32-bit integers from memory pointed by…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_maskload_epi32","","Loads packed 32-bit integers from memory pointed by…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_maskload_epi64","","Loads packed 64-bit integers from memory pointed by…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_maskload_epi64","","Loads packed 64-bit integers from memory pointed by…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_maskstore_epi32","","Stores packed 32-bit integers from `a` into memory pointed…",null,[[["__m128i"]]]],[5,"_mm256_maskstore_epi32","","Stores packed 32-bit integers from `a` into memory pointed…",null,[[["__m256i"]]]],[5,"_mm_maskstore_epi64","","Stores packed 64-bit integers from `a` into memory pointed…",null,[[["__m128i"]]]],[5,"_mm256_maskstore_epi64","","Stores packed 64-bit integers from `a` into memory pointed…",null,[[["__m256i"]]]],[5,"_mm256_max_epi16","","Compares packed 16-bit integers in `a` and `b`, and…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_max_epi32","","Compares packed 32-bit integers in `a` and `b`, and…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_max_epi8","","Compares packed 8-bit integers in `a` and `b`, and returns…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_max_epu16","","Compares packed unsigned 16-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_max_epu32","","Compares packed unsigned 32-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_max_epu8","","Compares packed unsigned 8-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_min_epi16","","Compares packed 16-bit integers in `a` and `b`, and…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_min_epi32","","Compares packed 32-bit integers in `a` and `b`, and…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_min_epi8","","Compares packed 8-bit integers in `a` and `b`, and returns…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_min_epu16","","Compares packed unsigned 16-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_min_epu32","","Compares packed unsigned 32-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_min_epu8","","Compares packed unsigned 8-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_movemask_epi8","","Creates mask from the most significant bit of each 8-bit…",null,[[["__m256i"]],["i32"]]],[5,"_mm256_mpsadbw_epu8","","Computes the sum of absolute differences (SADs) of…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_mul_epi32","","Multiplies the low 32-bit integers from each packed 64-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_mul_epu32","","Multiplies the low unsigned 32-bit integers from each…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_mulhi_epi16","","Multiplies the packed 16-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_mulhi_epu16","","Multiplies the packed unsigned 16-bit integers in `a` and…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_mullo_epi16","","Multiplies the packed 16-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_mullo_epi32","","Multiplies the packed 32-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_mulhrs_epi16","","Multiplies packed 16-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_or_si256","","Computes the bitwise OR of 256 bits (representing integer…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_packs_epi16","","Converts packed 16-bit integers from `a` and `b` to packed…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_packs_epi32","","Converts packed 32-bit integers from `a` and `b` to packed…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_packus_epi16","","Converts packed 16-bit integers from `a` and `b` to packed…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_packus_epi32","","Converts packed 32-bit integers from `a` and `b` to packed…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_permutevar8x32_epi32","","Permutes packed 32-bit integers from `a` according to the…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_permute4x64_epi64","","Permutes 64-bit integers from `a` using control mask `imm8`.",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_permute2x128_si256","","Shuffles 128-bits of integer data selected by `imm8` from…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_permute4x64_pd","","Shuffles 64-bit floating-point elements in `a` across…",null,[[["__m256d"],["i32"]],["__m256d"]]],[5,"_mm256_permutevar8x32_ps","","Shuffles eight 32-bit foating-point elements in `a` across…",null,[[["__m256"],["__m256i"]],["__m256"]]],[5,"_mm256_sad_epu8","","Computes the absolute differences of packed unsigned 8-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_shuffle_epi8","","Shuffles bytes from `a` according to the content of `b`.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_shuffle_epi32","","Shuffles 32-bit integers in 128-bit lanes of `a` using the…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_shufflehi_epi16","","Shuffles 16-bit integers in the high 64 bits of 128-bit…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_shufflelo_epi16","","Shuffles 16-bit integers in the low 64 bits of 128-bit…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_sign_epi16","","Negates packed 16-bit integers in `a` when the…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sign_epi32","","Negates packed 32-bit integers in `a` when the…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sign_epi8","","Negates packed 8-bit integers in `a` when the…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sll_epi16","","Shifts packed 16-bit integers in `a` left by `count` while…",null,[[["__m128i"],["__m256i"]],["__m256i"]]],[5,"_mm256_sll_epi32","","Shifts packed 32-bit integers in `a` left by `count` while…",null,[[["__m128i"],["__m256i"]],["__m256i"]]],[5,"_mm256_sll_epi64","","Shifts packed 64-bit integers in `a` left by `count` while…",null,[[["__m128i"],["__m256i"]],["__m256i"]]],[5,"_mm256_slli_epi16","","Shifts packed 16-bit integers in `a` left by `imm8` while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_slli_epi32","","Shifts packed 32-bit integers in `a` left by `imm8` while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_slli_epi64","","Shifts packed 64-bit integers in `a` left by `imm8` while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_slli_si256","","Shifts 128-bit lanes in `a` left by `imm8` bytes while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_bslli_epi128","","Shifts 128-bit lanes in `a` left by `imm8` bytes while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_sllv_epi32","","Shifts packed 32-bit integers in `a` left by the amount…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_sllv_epi32","","Shifts packed 32-bit integers in `a` left by the amount…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_sllv_epi64","","Shifts packed 64-bit integers in `a` left by the amount…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_sllv_epi64","","Shifts packed 64-bit integers in `a` left by the amount…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sra_epi16","","Shifts packed 16-bit integers in `a` right by `count`…",null,[[["__m128i"],["__m256i"]],["__m256i"]]],[5,"_mm256_sra_epi32","","Shifts packed 32-bit integers in `a` right by `count`…",null,[[["__m128i"],["__m256i"]],["__m256i"]]],[5,"_mm256_srai_epi16","","Shifts packed 16-bit integers in `a` right by `imm8` while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_srai_epi32","","Shifts packed 32-bit integers in `a` right by `imm8` while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_srav_epi32","","Shifts packed 32-bit integers in `a` right by the amount…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_srav_epi32","","Shifts packed 32-bit integers in `a` right by the amount…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_srli_si256","","Shifts 128-bit lanes in `a` right by `imm8` bytes while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_bsrli_epi128","","Shifts 128-bit lanes in `a` right by `imm8` bytes while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_srl_epi16","","Shifts packed 16-bit integers in `a` right by `count`…",null,[[["__m128i"],["__m256i"]],["__m256i"]]],[5,"_mm256_srl_epi32","","Shifts packed 32-bit integers in `a` right by `count`…",null,[[["__m128i"],["__m256i"]],["__m256i"]]],[5,"_mm256_srl_epi64","","Shifts packed 64-bit integers in `a` right by `count`…",null,[[["__m128i"],["__m256i"]],["__m256i"]]],[5,"_mm256_srli_epi16","","Shifts packed 16-bit integers in `a` right by `imm8` while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_srli_epi32","","Shifts packed 32-bit integers in `a` right by `imm8` while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_srli_epi64","","Shifts packed 64-bit integers in `a` right by `imm8` while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_srlv_epi32","","Shifts packed 32-bit integers in `a` right by the amount…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_srlv_epi32","","Shifts packed 32-bit integers in `a` right by the amount…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_srlv_epi64","","Shifts packed 64-bit integers in `a` right by the amount…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_srlv_epi64","","Shifts packed 64-bit integers in `a` right by the amount…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sub_epi16","","Subtract packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sub_epi32","","Subtract packed 32-bit integers in `b` from packed 16-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sub_epi64","","Subtract packed 64-bit integers in `b` from packed 16-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sub_epi8","","Subtract packed 8-bit integers in `b` from packed 16-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_subs_epi16","","Subtract packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_subs_epi8","","Subtract packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_subs_epu16","","Subtract packed unsigned 16-bit integers in `b` from…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_subs_epu8","","Subtract packed unsigned 8-bit integers in `b` from packed…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_unpackhi_epi8","","Unpacks and interleave 8-bit integers from the high half…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_unpacklo_epi8","","Unpacks and interleave 8-bit integers from the low half of…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_unpackhi_epi16","","Unpacks and interleave 16-bit integers from the high half…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_unpacklo_epi16","","Unpacks and interleave 16-bit integers from the low half…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_unpackhi_epi32","","Unpacks and interleave 32-bit integers from the high half…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_unpacklo_epi32","","Unpacks and interleave 32-bit integers from the low half…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_unpackhi_epi64","","Unpacks and interleave 64-bit integers from the high half…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_unpacklo_epi64","","Unpacks and interleave 64-bit integers from the low half…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_xor_si256","","Computes the bitwise XOR of 256 bits (representing integer…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_extract_epi8","","Extracts an 8-bit integer from `a`, selected with `imm8`.…",null,[[["__m256i"],["i32"]],["i8"]]],[5,"_mm256_extract_epi16","","Extracts a 16-bit integer from `a`, selected with `imm8`.…",null,[[["__m256i"],["i32"]],["i16"]]],[5,"_mm256_extract_epi32","","Extracts a 32-bit integer from `a`, selected with `imm8`.",null,[[["__m256i"],["i32"]],["i32"]]],[5,"_mm256_cvtsd_f64","","Returns the first element of the input vector of `[4 x…",null,[[["__m256d"]],["f64"]]],[5,"_mm256_cvtsi256_si32","","Returns the first element of the input vector of `[8 x…",null,[[["__m256i"]],["i32"]]],[5,"_mm_fmadd_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm256_fmadd_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm_fmadd_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm256_fmadd_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm_fmadd_sd","","Multiplies the lower double-precision (64-bit)…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_fmadd_ss","","Multiplies the lower single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_fmaddsub_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm256_fmaddsub_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm_fmaddsub_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm256_fmaddsub_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm_fmsub_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm256_fmsub_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm_fmsub_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm256_fmsub_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm_fmsub_sd","","Multiplies the lower double-precision (64-bit)…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_fmsub_ss","","Multiplies the lower single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_fmsubadd_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm256_fmsubadd_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm_fmsubadd_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm256_fmsubadd_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm_fnmadd_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm256_fnmadd_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm_fnmadd_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm256_fnmadd_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm_fnmadd_sd","","Multiplies the lower double-precision (64-bit)…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_fnmadd_ss","","Multiplies the lower single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_fnmsub_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm256_fnmsub_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm_fnmsub_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm256_fnmsub_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm_fnmsub_sd","","Multiplies the lower double-precision (64-bit)…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_fnmsub_ss","","Multiplies the lower single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_lzcnt_u32","","Counts the leading most significant zero bits.",null,[[["u32"]],["u32"]]],[5,"_popcnt32","","Counts the bits that are set.",null,[[["i32"]],["i32"]]],[5,"_bextr_u32","","Extracts bits in range [`start`, `start` + `length`) from…",null,[[["u32"]],["u32"]]],[5,"_bextr2_u32","","Extracts bits of `a` specified by `control` into the least…",null,[[["u32"]],["u32"]]],[5,"_andn_u32","","Bitwise logical `AND` of inverted `a` with `b`.",null,[[["u32"]],["u32"]]],[5,"_blsi_u32","","Extracts lowest set isolated bit.",null,[[["u32"]],["u32"]]],[5,"_blsmsk_u32","","Gets mask up to lowest set bit.",null,[[["u32"]],["u32"]]],[5,"_blsr_u32","","Resets the lowest set bit of `x`.",null,[[["u32"]],["u32"]]],[5,"_tzcnt_u32","","Counts the number of trailing least significant zero bits.",null,[[["u32"]],["u32"]]],[5,"_mm_tzcnt_32","","Counts the number of trailing least significant zero bits.",null,[[["u32"]],["i32"]]],[5,"_mulx_u32","","Unsigned multiply without affecting flags.",null,[[["u32"],["u32"]],["u32"]]],[5,"_bzhi_u32","","Zeroes higher bits of `a` >= `index`.",null,[[["u32"]],["u32"]]],[5,"_pdep_u32","","Scatter contiguous low order bits of `a` to the result at…",null,[[["u32"]],["u32"]]],[5,"_pext_u32","","Gathers the bits of `x` specified by the `mask` into the…",null,[[["u32"]],["u32"]]],[5,"_mm_extract_si64","","Extracts the bit range specified by `y` from the lower 64…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_insert_si64","","Inserts the `[length:0]` bits of `y` into `x` at `index`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_stream_sd","","Non-temporal store of `a.0` into `p`.",null,[[["__m128d"]]]],[5,"_mm_stream_ss","","Non-temporal store of `a.0` into `p`.",null,[[["__m128"]]]],[5,"_blcfill_u32","","Clears all bits below the least significant zero bit of `x`.",null,[[["u32"]],["u32"]]],[5,"_blcfill_u64","","Clears all bits below the least significant zero bit of `x`.",null,[[["u64"]],["u64"]]],[5,"_blci_u32","","Sets all bits of `x` to 1 except for the least significant…",null,[[["u32"]],["u32"]]],[5,"_blci_u64","","Sets all bits of `x` to 1 except for the least significant…",null,[[["u64"]],["u64"]]],[5,"_blcic_u32","","Sets the least significant zero bit of `x` and clears all…",null,[[["u32"]],["u32"]]],[5,"_blcic_u64","","Sets the least significant zero bit of `x` and clears all…",null,[[["u64"]],["u64"]]],[5,"_blcmsk_u32","","Sets the least significant zero bit of `x` and clears all…",null,[[["u32"]],["u32"]]],[5,"_blcmsk_u64","","Sets the least significant zero bit of `x` and clears all…",null,[[["u64"]],["u64"]]],[5,"_blcs_u32","","Sets the least significant zero bit of `x`.",null,[[["u32"]],["u32"]]],[5,"_blcs_u64","","Sets the least significant zero bit of `x`.",null,[[["u64"]],["u64"]]],[5,"_blsfill_u32","","Sets all bits of `x` below the least significant one.",null,[[["u32"]],["u32"]]],[5,"_blsfill_u64","","Sets all bits of `x` below the least significant one.",null,[[["u64"]],["u64"]]],[5,"_blsic_u32","","Clears least significant bit and sets all other bits.",null,[[["u32"]],["u32"]]],[5,"_blsic_u64","","Clears least significant bit and sets all other bits.",null,[[["u64"]],["u64"]]],[5,"_t1mskc_u32","","Clears all bits below the least significant zero of `x`…",null,[[["u32"]],["u32"]]],[5,"_t1mskc_u64","","Clears all bits below the least significant zero of `x`…",null,[[["u64"]],["u64"]]],[5,"_tzmsk_u32","","Sets all bits below the least significant one of `x` and…",null,[[["u32"]],["u32"]]],[5,"_tzmsk_u64","","Sets all bits below the least significant one of `x` and…",null,[[["u64"]],["u64"]]],[5,"_mm_setzero_si64","","Constructs a 64-bit integer vector initialized to zero.",null,[[],["__m64"]]],[5,"_mm_add_pi8","","Adds packed 8-bit integers in `a` and `b`.",null,[[["__m64"]],["__m64"]]],[5,"_m_paddb","","Adds packed 8-bit integers in `a` and `b`.",null,[[["__m64"]],["__m64"]]],[5,"_mm_add_pi16","","Adds packed 16-bit integers in `a` and `b`.",null,[[["__m64"]],["__m64"]]],[5,"_m_paddw","","Adds packed 16-bit integers in `a` and `b`.",null,[[["__m64"]],["__m64"]]],[5,"_mm_add_pi32","","Adds packed 32-bit integers in `a` and `b`.",null,[[["__m64"]],["__m64"]]],[5,"_m_paddd","","Adds packed 32-bit integers in `a` and `b`.",null,[[["__m64"]],["__m64"]]],[5,"_mm_adds_pi8","","Adds packed 8-bit integers in `a` and `b` using saturation.",null,[[["__m64"]],["__m64"]]],[5,"_m_paddsb","","Adds packed 8-bit integers in `a` and `b` using saturation.",null,[[["__m64"]],["__m64"]]],[5,"_mm_adds_pi16","","Adds packed 16-bit integers in `a` and `b` using saturation.",null,[[["__m64"]],["__m64"]]],[5,"_m_paddsw","","Adds packed 16-bit integers in `a` and `b` using saturation.",null,[[["__m64"]],["__m64"]]],[5,"_mm_adds_pu8","","Adds packed unsigned 8-bit integers in `a` and `b` using…",null,[[["__m64"]],["__m64"]]],[5,"_m_paddusb","","Adds packed unsigned 8-bit integers in `a` and `b` using…",null,[[["__m64"]],["__m64"]]],[5,"_mm_adds_pu16","","Adds packed unsigned 16-bit integers in `a` and `b` using…",null,[[["__m64"]],["__m64"]]],[5,"_m_paddusw","","Adds packed unsigned 16-bit integers in `a` and `b` using…",null,[[["__m64"]],["__m64"]]],[5,"_mm_sub_pi8","","Subtract packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m64"]],["__m64"]]],[5,"_m_psubb","","Subtract packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m64"]],["__m64"]]],[5,"_mm_sub_pi16","","Subtract packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m64"]],["__m64"]]],[5,"_m_psubw","","Subtract packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m64"]],["__m64"]]],[5,"_mm_sub_pi32","","Subtract packed 32-bit integers in `b` from packed 32-bit…",null,[[["__m64"]],["__m64"]]],[5,"_m_psubd","","Subtract packed 32-bit integers in `b` from packed 32-bit…",null,[[["__m64"]],["__m64"]]],[5,"_mm_subs_pi8","","Subtract packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m64"]],["__m64"]]],[5,"_m_psubsb","","Subtract packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m64"]],["__m64"]]],[5,"_mm_subs_pi16","","Subtract packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m64"]],["__m64"]]],[5,"_m_psubsw","","Subtract packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m64"]],["__m64"]]],[5,"_mm_subs_pu8","","Subtract packed unsigned 8-bit integers in `b` from packed…",null,[[["__m64"]],["__m64"]]],[5,"_m_psubusb","","Subtract packed unsigned 8-bit integers in `b` from packed…",null,[[["__m64"]],["__m64"]]],[5,"_mm_subs_pu16","","Subtract packed unsigned 16-bit integers in `b` from…",null,[[["__m64"]],["__m64"]]],[5,"_m_psubusw","","Subtract packed unsigned 16-bit integers in `b` from…",null,[[["__m64"]],["__m64"]]],[5,"_mm_packs_pi16","","Converts packed 16-bit integers from `a` and `b` to packed…",null,[[["__m64"]],["__m64"]]],[5,"_mm_packs_pi32","","Converts packed 32-bit integers from `a` and `b` to packed…",null,[[["__m64"]],["__m64"]]],[5,"_mm_cmpgt_pi8","","Compares whether each element of `a` is greater than the…",null,[[["__m64"]],["__m64"]]],[5,"_mm_cmpgt_pi16","","Compares whether each element of `a` is greater than the…",null,[[["__m64"]],["__m64"]]],[5,"_mm_cmpgt_pi32","","Compares whether each element of `a` is greater than the…",null,[[["__m64"]],["__m64"]]],[5,"_mm_unpackhi_pi16","","Unpacks the upper two elements from two `i16x4` vectors…",null,[[["__m64"]],["__m64"]]],[5,"_mm_unpackhi_pi8","","Unpacks the upper four elements from two `i8x8` vectors…",null,[[["__m64"]],["__m64"]]],[5,"_mm_unpacklo_pi8","","Unpacks the lower four elements from two `i8x8` vectors…",null,[[["__m64"]],["__m64"]]],[5,"_mm_unpacklo_pi16","","Unpacks the lower two elements from two `i16x4` vectors…",null,[[["__m64"]],["__m64"]]],[5,"_mm_unpackhi_pi32","","Unpacks the upper element from two `i32x2` vectors and…",null,[[["__m64"]],["__m64"]]],[5,"_mm_unpacklo_pi32","","Unpacks the lower element from two `i32x2` vectors and…",null,[[["__m64"]],["__m64"]]],[5,"_mm_set_pi16","","Sets packed 16-bit integers in dst with the supplied values.",null,[[["i16"]],["__m64"]]],[5,"_mm_set_pi32","","Sets packed 32-bit integers in dst with the supplied values.",null,[[["i32"]],["__m64"]]],[5,"_mm_set_pi8","","Sets packed 8-bit integers in dst with the supplied values.",null,[[["i8"]],["__m64"]]],[5,"_mm_set1_pi16","","Broadcasts 16-bit integer a to all all elements of dst.",null,[[["i16"]],["__m64"]]],[5,"_mm_set1_pi32","","Broadcasts 32-bit integer a to all all elements of dst.",null,[[["i32"]],["__m64"]]],[5,"_mm_set1_pi8","","Broadcasts 8-bit integer a to all all elements of dst.",null,[[["i8"]],["__m64"]]],[5,"_mm_setr_pi16","","Sets packed 16-bit integers in dst with the supplied…",null,[[["i16"]],["__m64"]]],[5,"_mm_setr_pi32","","Sets packed 32-bit integers in dst with the supplied…",null,[[["i32"]],["__m64"]]],[5,"_mm_setr_pi8","","Sets packed 8-bit integers in dst with the supplied values…",null,[[["i8"]],["__m64"]]],[5,"_mm_empty","","Empty the MMX state, which marks the x87 FPU registers as…",null,[[]]],[5,"_m_empty","","Empty the MMX state, which marks the x87 FPU registers as…",null,[[]]],[5,"_mm_cvtsi32_si64","","Copies 32-bit integer `a` to the lower elements of the…",null,[[["i32"]],["__m64"]]],[5,"_mm_cvtsi64_si32","","Return the lower 32-bit integer in `a`.",null,[[["__m64"]],["i32"]]],[5,"_mm_clmulepi64_si128","","Performs a carry-less multiplication of two 64-bit…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_aesdec_si128","","Performs one round of an AES decryption flow on data…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_aesdeclast_si128","","Performs the last round of an AES decryption flow on data…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_aesenc_si128","","Performs one round of an AES encryption flow on data…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_aesenclast_si128","","Performs the last round of an AES encryption flow on data…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_aesimc_si128","","Performs the `InvMixColumns` transformation on `a`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_aeskeygenassist_si128","","Assist in expanding the AES cipher key.",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_rdrand16_step","","Read a hardware generated 16-bit random value and store…",null,[[["u16"]],["i32"]]],[5,"_rdrand32_step","","Read a hardware generated 32-bit random value and store…",null,[[["u32"]],["i32"]]],[5,"_rdseed16_step","","Read a 16-bit NIST SP800-90B and SP800-90C compliant…",null,[[["u16"]],["i32"]]],[5,"_rdseed32_step","","Read a 32-bit NIST SP800-90B and SP800-90C compliant…",null,[[["u32"]],["i32"]]],[5,"_mm_sha1msg1_epu32","","Performs an intermediate calculation for the next four…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sha1msg2_epu32","","Performs the final calculation for the next four SHA1…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sha1nexte_epu32","","Calculate SHA1 state variable E after four rounds of…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sha1rnds4_epu32","","Performs four rounds of SHA1 operation using an initial…",null,[[["__m128i"],["i32"]],["__m128i"]]],[5,"_mm_sha256msg1_epu32","","Performs an intermediate calculation for the next four…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sha256msg2_epu32","","Performs the final calculation for the next four SHA256…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sha256rnds2_epu32","","Performs 2 rounds of SHA256 operation using an initial…",null,[[["__m128i"]],["__m128i"]]],[5,"_addcarry_u32","","Adds unsigned 32-bit integers `a` and `b` with unsigned…",null,[[["u32"],["u32"],["u8"]],["u8"]]],[5,"_addcarryx_u32","","Adds unsigned 32-bit integers `a` and `b` with unsigned…",null,[[["u32"],["u32"],["u8"]],["u8"]]],[5,"_subborrow_u32","","Adds unsigned 32-bit integers `a` and `b` with unsigned…",null,[[["u32"],["u32"],["u8"]],["u8"]]],[5,"ud2","","Generates the trap instruction `UD2`",null,[[]]],[5,"_mm512_abs_epi32","","Computes the absolute values of packed 32-bit integers in…",null,[[["__m512i"]],["__m512i"]]],[5,"_mm512_mask_abs_epi32","","Computes the absolute value of packed 32-bit integers in…",null,[[["__m512i"],["__mmask16"]],["__m512i"]]],[5,"_mm512_maskz_abs_epi32","","Computes the absolute value of packed 32-bit integers in…",null,[[["__m512i"],["__mmask16"]],["__m512i"]]],[5,"_mm512_setzero_si512","","Returns vector of type `__m512i` with all elements set to…",null,[[],["__m512i"]]],[5,"_mm512_setr_epi32","","Sets packed 32-bit integers in `dst` with the supplied…",null,[[["i32"]],["__m512i"]]],[5,"_mm512_set1_epi64","","Broadcast 64-bit integer `a` to all elements of `dst`.",null,[[["i64"]],["__m512i"]]],[5,"_mm512_madd52hi_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit…",null,[[["__m512i"]],["__m512i"]]],[5,"_mm512_madd52lo_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit…",null,[[["__m512i"]],["__m512i"]]],[5,"_mm256_madd52hi_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_madd52lo_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_madd52hi_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_madd52lo_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_bittest","","Returns the bit in position `b` of the memory addressed by…",null,[[["i32"]],["u8"]]],[5,"_bittestandset","","Returns the bit in position `b` of the memory addressed by…",null,[[["i32"]],["u8"]]],[5,"_bittestandreset","","Returns the bit in position `b` of the memory addressed by…",null,[[["i32"]],["u8"]]],[5,"_bittestandcomplement","","Returns the bit in position `b` of the memory addressed by…",null,[[["i32"]],["u8"]]],[5,"_xbegin","","Specifies the start of a restricted transactional memory…",null,[[],["u32"]]],[5,"_xend","","Specifies the end of a restricted transactional memory…",null,[[]]],[5,"_xabort","","Forces a restricted transactional memory (RTM) region to…",null,[[["u32"]]]],[5,"_xtest","","Queries whether the processor is executing in a…",null,[[],["u8"]]],[5,"_xabort_code","","Retrieves the parameter passed to [`_xabort`] when…",null,[[["u32"]],["u32"]]],[5,"_mm_cvtph_ps","","Converts the 4 x 16-bit half-precision float values in the…",null,[[["__m128i"]],["__m128"]]],[5,"_mm256_cvtph_ps","","Converts the 8 x 16-bit half-precision float values in the…",null,[[["__m128i"]],["__m256"]]],[5,"_mm_cvtps_ph","","Converts the 4 x 32-bit float values in the 128-bit vector…",null,[[["i32"],["__m128"]],["__m128i"]]],[5,"_mm256_cvtps_ph","","Converts the 8 x 32-bit float values in the 256-bit vector…",null,[[["__m256"],["i32"]],["__m128i"]]],[5,"_fxsave64","","Saves the `x87` FPU, `MMX` technology, `XMM`, and `MXCSR`…",null,[[]]],[5,"_fxrstor64","","Restores the `XMM`, `MMX`, `MXCSR`, and `x87` FPU…",null,[[]]],[5,"_mm_cvtss_si64","","Converts the lowest 32 bit float in the input vector to a…",null,[[["__m128"]],["i64"]]],[5,"_mm_cvttss_si64","","Converts the lowest 32 bit float in the input vector to a…",null,[[["__m128"]],["i64"]]],[5,"_mm_cvtsi64_ss","","Converts a 64 bit integer to a 32 bit float. The result…",null,[[["i64"],["__m128"]],["__m128"]]],[5,"_mm_cvtsd_si64","","Converts the lower double-precision (64-bit)…",null,[[["__m128d"]],["i64"]]],[5,"_mm_cvtsd_si64x","","Alias for `_mm_cvtsd_si64`",null,[[["__m128d"]],["i64"]]],[5,"_mm_cvttsd_si64","","Converts the lower double-precision (64-bit)…",null,[[["__m128d"]],["i64"]]],[5,"_mm_cvttsd_si64x","","Alias for `_mm_cvttsd_si64`",null,[[["__m128d"]],["i64"]]],[5,"_mm_stream_si64","","Stores a 64-bit integer value in the specified memory…",null,[[["i64"]]]],[5,"_mm_cvtsi64_si128","","Returns a vector whose lowest element is `a` and all…",null,[[["i64"]],["__m128i"]]],[5,"_mm_cvtsi64x_si128","","Returns a vector whose lowest element is `a` and all…",null,[[["i64"]],["__m128i"]]],[5,"_mm_cvtsi128_si64","","Returns the lowest element of `a`.",null,[[["__m128i"]],["i64"]]],[5,"_mm_cvtsi128_si64x","","Returns the lowest element of `a`.",null,[[["__m128i"]],["i64"]]],[5,"_mm_cvtsi64_sd","","Returns `a` with its lower element replaced by `b` after…",null,[[["i64"],["__m128d"]],["__m128d"]]],[5,"_mm_cvtsi64x_sd","","Returns `a` with its lower element replaced by `b` after…",null,[[["i64"],["__m128d"]],["__m128d"]]],[5,"_mm_extract_epi64","","Extracts an 64-bit integer from `a` selected with `imm8`",null,[[["__m128i"],["i32"]],["i64"]]],[5,"_mm_insert_epi64","","Returns a copy of `a` with the 64-bit integer from `i`…",null,[[["__m128i"],["i64"],["i32"]],["__m128i"]]],[5,"_mm_crc32_u64","","Starting with the initial value in `crc`, return the…",null,[[["u64"]],["u64"]]],[5,"_xsave64","","Performs a full or partial save of the enabled processor…",null,[[["u64"]]]],[5,"_xrstor64","","Performs a full or partial restore of the enabled…",null,[[["u64"]]]],[5,"_xsaveopt64","","Performs a full or partial save of the enabled processor…",null,[[["u64"]]]],[5,"_xsavec64","","Performs a full or partial save of the enabled processor…",null,[[["u64"]]]],[5,"_xsaves64","","Performs a full or partial save of the enabled processor…",null,[[["u64"]]]],[5,"_xrstors64","","Performs a full or partial restore of the enabled…",null,[[["u64"]]]],[5,"_lzcnt_u64","","Counts the leading most significant zero bits.",null,[[["u64"]],["u64"]]],[5,"_popcnt64","","Counts the bits that are set.",null,[[["i64"]],["i32"]]],[5,"_mm256_insert_epi64","","Copies `a` to result, and insert the 64-bit integer `i`…",null,[[["i64"],["__m256i"],["i32"]],["__m256i"]]],[5,"_bextr_u64","","Extracts bits in range [`start`, `start` + `length`) from…",null,[[["u32"],["u64"]],["u64"]]],[5,"_bextr2_u64","","Extracts bits of `a` specified by `control` into the least…",null,[[["u64"]],["u64"]]],[5,"_andn_u64","","Bitwise logical `AND` of inverted `a` with `b`.",null,[[["u64"]],["u64"]]],[5,"_blsi_u64","","Extracts lowest set isolated bit.",null,[[["u64"]],["u64"]]],[5,"_blsmsk_u64","","Gets mask up to lowest set bit.",null,[[["u64"]],["u64"]]],[5,"_blsr_u64","","Resets the lowest set bit of `x`.",null,[[["u64"]],["u64"]]],[5,"_tzcnt_u64","","Counts the number of trailing least significant zero bits.",null,[[["u64"]],["u64"]]],[5,"_mm_tzcnt_64","","Counts the number of trailing least significant zero bits.",null,[[["u64"]],["i64"]]],[5,"_mulx_u64","","Unsigned multiply without affecting flags.",null,[[["u64"],["u64"]],["u64"]]],[5,"_bzhi_u64","","Zeroes higher bits of `a` >= `index`.",null,[[["u32"],["u64"]],["u64"]]],[5,"_pdep_u64","","Scatter contiguous low order bits of `a` to the result at…",null,[[["u64"]],["u64"]]],[5,"_pext_u64","","Gathers the bits of `x` specified by the `mask` into the…",null,[[["u64"]],["u64"]]],[5,"_mm256_extract_epi64","","Extracts a 64-bit integer from `a`, selected with `imm8`.",null,[[["__m256i"],["i32"]],["i64"]]],[5,"_bswap64","","Returns an integer with the reversed byte order of x",null,[[["i64"]],["i64"]]],[5,"_rdrand64_step","","Read a hardware generated 64-bit random value and store…",null,[[["u64"]],["i32"]]],[5,"_rdseed64_step","","Read a 64-bit NIST SP800-90B and SP800-90C compliant…",null,[[["u64"]],["i32"]]],[5,"cmpxchg16b","","Compares and exchange 16 bytes (128 bits) of data…",null,[[["ordering"],["u128"]],["u128"]]],[5,"_addcarry_u64","","Adds unsigned 64-bit integers `a` and `b` with unsigned…",null,[[["u64"],["u64"],["u8"]],["u8"]]],[5,"_addcarryx_u64","","Adds unsigned 64-bit integers `a` and `b` with unsigned…",null,[[["u64"],["u64"],["u8"]],["u8"]]],[5,"_subborrow_u64","","Adds unsigned 64-bit integers `a` and `b` with unsigned…",null,[[["u64"],["u64"],["u8"]],["u8"]]],[5,"_bittest64","","Returns the bit in position `b` of the memory addressed by…",null,[[["i64"]],["u8"]]],[5,"_bittestandset64","","Returns the bit in position `b` of the memory addressed by…",null,[[["i64"]],["u8"]]],[5,"_bittestandreset64","","Returns the bit in position `b` of the memory addressed by…",null,[[["i64"]],["u8"]]],[5,"_bittestandcomplement64","","Returns the bit in position `b` of the memory addressed by…",null,[[["i64"]],["u8"]]],[6,"__mmask16","","The `__mmask16` type used in AVX-512 intrinsics, a 16-bit…",null,null],[17,"_XCR_XFEATURE_ENABLED_MASK","","`XFEATURE_ENABLED_MASK` for `XCR`",null,null],[17,"_MM_EXCEPT_INVALID","","See `_mm_setcsr`",null,null],[17,"_MM_EXCEPT_DENORM","","See `_mm_setcsr`",null,null],[17,"_MM_EXCEPT_DIV_ZERO","","See `_mm_setcsr`",null,null],[17,"_MM_EXCEPT_OVERFLOW","","See `_mm_setcsr`",null,null],[17,"_MM_EXCEPT_UNDERFLOW","","See `_mm_setcsr`",null,null],[17,"_MM_EXCEPT_INEXACT","","See `_mm_setcsr`",null,null],[17,"_MM_EXCEPT_MASK","","See `_MM_GET_EXCEPTION_STATE`",null,null],[17,"_MM_MASK_INVALID","","See `_mm_setcsr`",null,null],[17,"_MM_MASK_DENORM","","See `_mm_setcsr`",null,null],[17,"_MM_MASK_DIV_ZERO","","See `_mm_setcsr`",null,null],[17,"_MM_MASK_OVERFLOW","","See `_mm_setcsr`",null,null],[17,"_MM_MASK_UNDERFLOW","","See `_mm_setcsr`",null,null],[17,"_MM_MASK_INEXACT","","See `_mm_setcsr`",null,null],[17,"_MM_MASK_MASK","","See `_MM_GET_EXCEPTION_MASK`",null,null],[17,"_MM_ROUND_NEAREST","","See `_mm_setcsr`",null,null],[17,"_MM_ROUND_DOWN","","See `_mm_setcsr`",null,null],[17,"_MM_ROUND_UP","","See `_mm_setcsr`",null,null],[17,"_MM_ROUND_TOWARD_ZERO","","See `_mm_setcsr`",null,null],[17,"_MM_ROUND_MASK","","See `_MM_GET_ROUNDING_MODE`",null,null],[17,"_MM_FLUSH_ZERO_MASK","","See `_MM_GET_FLUSH_ZERO_MODE`",null,null],[17,"_MM_FLUSH_ZERO_ON","","See `_mm_setcsr`",null,null],[17,"_MM_FLUSH_ZERO_OFF","","See `_mm_setcsr`",null,null],[17,"_MM_HINT_T0","","See `_mm_prefetch`.",null,null],[17,"_MM_HINT_T1","","See `_mm_prefetch`.",null,null],[17,"_MM_HINT_T2","","See `_mm_prefetch`.",null,null],[17,"_MM_HINT_NTA","","See `_mm_prefetch`.",null,null],[17,"_MM_FROUND_TO_NEAREST_INT","","round to nearest",null,null],[17,"_MM_FROUND_TO_NEG_INF","","round down",null,null],[17,"_MM_FROUND_TO_POS_INF","","round up",null,null],[17,"_MM_FROUND_TO_ZERO","","truncate",null,null],[17,"_MM_FROUND_CUR_DIRECTION","","use MXCSR.RC; see `vendor::_MM_SET_ROUNDING_MODE`",null,null],[17,"_MM_FROUND_RAISE_EXC","","do not suppress exceptions",null,null],[17,"_MM_FROUND_NO_EXC","","suppress exceptions",null,null],[17,"_MM_FROUND_NINT","","round to nearest and do not suppress exceptions",null,null],[17,"_MM_FROUND_FLOOR","","round down and do not suppress exceptions",null,null],[17,"_MM_FROUND_CEIL","","round up and do not suppress exceptions",null,null],[17,"_MM_FROUND_TRUNC","","truncate and do not suppress exceptions",null,null],[17,"_MM_FROUND_RINT","","use MXCSR.RC and do not suppress exceptions; see…",null,null],[17,"_MM_FROUND_NEARBYINT","","use MXCSR.RC and suppress exceptions; see…",null,null],[17,"_SIDD_UBYTE_OPS","","String contains unsigned 8-bit characters (Default)",null,null],[17,"_SIDD_UWORD_OPS","","String contains unsigned 16-bit characters",null,null],[17,"_SIDD_SBYTE_OPS","","String contains signed 8-bit characters",null,null],[17,"_SIDD_SWORD_OPS","","String contains unsigned 16-bit characters",null,null],[17,"_SIDD_CMP_EQUAL_ANY","","For each character in `a`, find if it is in `b` (Default)",null,null],[17,"_SIDD_CMP_RANGES","","For each character in `a`, determine if `b[0] <= c <= b[1]…",null,null],[17,"_SIDD_CMP_EQUAL_EACH","","The strings defined by `a` and `b` are equal",null,null],[17,"_SIDD_CMP_EQUAL_ORDERED","","Search for the defined substring in the target",null,null],[17,"_SIDD_POSITIVE_POLARITY","","Do not negate results (Default)",null,null],[17,"_SIDD_NEGATIVE_POLARITY","","Negates results",null,null],[17,"_SIDD_MASKED_POSITIVE_POLARITY","","Do not negate results before the end of the string",null,null],[17,"_SIDD_MASKED_NEGATIVE_POLARITY","","Negates results only before the end of the string",null,null],[17,"_SIDD_LEAST_SIGNIFICANT","","Index only: return the least significant bit (Default)",null,null],[17,"_SIDD_MOST_SIGNIFICANT","","Index only: return the most significant bit",null,null],[17,"_SIDD_BIT_MASK","","Mask only: return the bit mask",null,null],[17,"_SIDD_UNIT_MASK","","Mask only: return the byte mask",null,null],[17,"_CMP_EQ_OQ","","Equal (ordered, non-signaling)",null,null],[17,"_CMP_LT_OS","","Less-than (ordered, signaling)",null,null],[17,"_CMP_LE_OS","","Less-than-or-equal (ordered, signaling)",null,null],[17,"_CMP_UNORD_Q","","Unordered (non-signaling)",null,null],[17,"_CMP_NEQ_UQ","","Not-equal (unordered, non-signaling)",null,null],[17,"_CMP_NLT_US","","Not-less-than (unordered, signaling)",null,null],[17,"_CMP_NLE_US","","Not-less-than-or-equal (unordered, signaling)",null,null],[17,"_CMP_ORD_Q","","Ordered (non-signaling)",null,null],[17,"_CMP_EQ_UQ","","Equal (unordered, non-signaling)",null,null],[17,"_CMP_NGE_US","","Not-greater-than-or-equal (unordered, signaling)",null,null],[17,"_CMP_NGT_US","","Not-greater-than (unordered, signaling)",null,null],[17,"_CMP_FALSE_OQ","","False (ordered, non-signaling)",null,null],[17,"_CMP_NEQ_OQ","","Not-equal (ordered, non-signaling)",null,null],[17,"_CMP_GE_OS","","Greater-than-or-equal (ordered, signaling)",null,null],[17,"_CMP_GT_OS","","Greater-than (ordered, signaling)",null,null],[17,"_CMP_TRUE_UQ","","True (unordered, non-signaling)",null,null],[17,"_CMP_EQ_OS","","Equal (ordered, signaling)",null,null],[17,"_CMP_LT_OQ","","Less-than (ordered, non-signaling)",null,null],[17,"_CMP_LE_OQ","","Less-than-or-equal (ordered, non-signaling)",null,null],[17,"_CMP_UNORD_S","","Unordered (signaling)",null,null],[17,"_CMP_NEQ_US","","Not-equal (unordered, signaling)",null,null],[17,"_CMP_NLT_UQ","","Not-less-than (unordered, non-signaling)",null,null],[17,"_CMP_NLE_UQ","","Not-less-than-or-equal (unordered, non-signaling)",null,null],[17,"_CMP_ORD_S","","Ordered (signaling)",null,null],[17,"_CMP_EQ_US","","Equal (unordered, signaling)",null,null],[17,"_CMP_NGE_UQ","","Not-greater-than-or-equal (unordered, non-signaling)",null,null],[17,"_CMP_NGT_UQ","","Not-greater-than (unordered, non-signaling)",null,null],[17,"_CMP_FALSE_OS","","False (ordered, signaling)",null,null],[17,"_CMP_NEQ_OS","","Not-equal (ordered, signaling)",null,null],[17,"_CMP_GE_OQ","","Greater-than-or-equal (ordered, non-signaling)",null,null],[17,"_CMP_GT_OQ","","Greater-than (ordered, non-signaling)",null,null],[17,"_CMP_TRUE_US","","True (unordered, signaling)",null,null],[17,"_XBEGIN_STARTED","","Transaction successfully started.",null,null],[17,"_XABORT_EXPLICIT","","Transaction explicitly aborted with xabort. The parameter…",null,null],[17,"_XABORT_RETRY","","Transaction retry is possible.",null,null],[17,"_XABORT_CONFLICT","","Transaction abort due to a memory conflict with another…",null,null],[17,"_XABORT_CAPACITY","","Transaction abort due to the transaction using too much…",null,null],[17,"_XABORT_DEBUG","","Transaction abort due to a debug trap.",null,null],[17,"_XABORT_NESTED","","Transaction abort in a inner nested transaction.",null,null],[0,"arm","core::arch","Platform-specific intrinsics for the `arm` platform.",null,null],[3,"int8x8_t","core::arch::arm","ARM-specific 64-bit wide vector of eight packed `i8`.",null,null],[3,"uint8x8_t","","ARM-specific 64-bit wide vector of eight packed `u8`.",null,null],[3,"poly8x8_t","","ARM-specific 64-bit wide polynomial vector of eight packed…",null,null],[3,"int16x4_t","","ARM-specific 64-bit wide vector of four packed `i16`.",null,null],[3,"uint16x4_t","","ARM-specific 64-bit wide vector of four packed `u16`.",null,null],[3,"poly16x4_t","","ARM-specific 64-bit wide vector of four packed `u16`.",null,null],[3,"int32x2_t","","ARM-specific 64-bit wide vector of two packed `i32`.",null,null],[3,"uint32x2_t","","ARM-specific 64-bit wide vector of two packed `u32`.",null,null],[3,"float32x2_t","","ARM-specific 64-bit wide vector of two packed `f32`.",null,null],[3,"int64x1_t","","ARM-specific 64-bit wide vector of one packed `i64`.",null,null],[3,"uint64x1_t","","ARM-specific 64-bit wide vector of one packed `u64`.",null,null],[3,"int8x16_t","","ARM-specific 128-bit wide vector of sixteen packed `i8`.",null,null],[3,"uint8x16_t","","ARM-specific 128-bit wide vector of sixteen packed `u8`.",null,null],[3,"poly8x16_t","","ARM-specific 128-bit wide vector of sixteen packed `u8`.",null,null],[3,"int16x8_t","","ARM-specific 128-bit wide vector of eight packed `i16`.",null,null],[3,"uint16x8_t","","ARM-specific 128-bit wide vector of eight packed `u16`.",null,null],[3,"poly16x8_t","","ARM-specific 128-bit wide vector of eight packed `u16`.",null,null],[3,"int32x4_t","","ARM-specific 128-bit wide vector of four packed `i32`.",null,null],[3,"uint32x4_t","","ARM-specific 128-bit wide vector of four packed `u32`.",null,null],[3,"float32x4_t","","ARM-specific 128-bit wide vector of four packed `f32`.",null,null],[3,"int64x2_t","","ARM-specific 128-bit wide vector of two packed `i64`.",null,null],[3,"uint64x2_t","","ARM-specific 128-bit wide vector of two packed `u64`.",null,null],[3,"int8x8x2_t","","ARM-specific type containing two `int8x8_t` vectors.",null,null],[12,"0","","",166,null],[12,"1","","",166,null],[3,"int8x8x3_t","","ARM-specific type containing three `int8x8_t` vectors.",null,null],[12,"0","","",167,null],[12,"1","","",167,null],[12,"2","","",167,null],[3,"int8x8x4_t","","ARM-specific type containing four `int8x8_t` vectors.",null,null],[12,"0","","",168,null],[12,"1","","",168,null],[12,"2","","",168,null],[12,"3","","",168,null],[3,"uint8x8x2_t","","ARM-specific type containing two `uint8x8_t` vectors.",null,null],[12,"0","","",169,null],[12,"1","","",169,null],[3,"uint8x8x3_t","","ARM-specific type containing three `uint8x8_t` vectors.",null,null],[12,"0","","",170,null],[12,"1","","",170,null],[12,"2","","",170,null],[3,"uint8x8x4_t","","ARM-specific type containing four `uint8x8_t` vectors.",null,null],[12,"0","","",171,null],[12,"1","","",171,null],[12,"2","","",171,null],[12,"3","","",171,null],[3,"poly8x8x2_t","","ARM-specific type containing two `poly8x8_t` vectors.",null,null],[12,"0","","",172,null],[12,"1","","",172,null],[3,"poly8x8x3_t","","ARM-specific type containing three `poly8x8_t` vectors.",null,null],[12,"0","","",173,null],[12,"1","","",173,null],[12,"2","","",173,null],[3,"poly8x8x4_t","","ARM-specific type containing four `poly8x8_t` vectors.",null,null],[12,"0","","",174,null],[12,"1","","",174,null],[12,"2","","",174,null],[12,"3","","",174,null],[3,"SY","","Full system is the required shareability domain, reads and…",null,null],[3,"APSR","","Application Program Status Register",null,null],[5,"__breakpoint","","Inserts a breakpoint instruction.",null,[[["i32"]]]],[5,"_rev_u16","","Reverse the order of the bytes.",null,[[["u16"]],["u16"]]],[5,"_rev_u32","","Reverse the order of the bytes.",null,[[["u32"]],["u32"]]],[5,"vadd_s8","","Vector add.",null,[[["int8x8_t"]],["int8x8_t"]]],[5,"vaddq_s8","","Vector add.",null,[[["int8x16_t"]],["int8x16_t"]]],[5,"vadd_s16","","Vector add.",null,[[["int16x4_t"]],["int16x4_t"]]],[5,"vaddq_s16","","Vector add.",null,[[["int16x8_t"]],["int16x8_t"]]],[5,"vadd_s32","","Vector add.",null,[[["int32x2_t"]],["int32x2_t"]]],[5,"vaddq_s32","","Vector add.",null,[[["int32x4_t"]],["int32x4_t"]]],[5,"vaddq_s64","","Vector add.",null,[[["int64x2_t"]],["int64x2_t"]]],[5,"vadd_u8","","Vector add.",null,[[["uint8x8_t"]],["uint8x8_t"]]],[5,"vaddq_u8","","Vector add.",null,[[["uint8x16_t"]],["uint8x16_t"]]],[5,"vadd_u16","","Vector add.",null,[[["uint16x4_t"]],["uint16x4_t"]]],[5,"vaddq_u16","","Vector add.",null,[[["uint16x8_t"]],["uint16x8_t"]]],[5,"vadd_u32","","Vector add.",null,[[["uint32x2_t"]],["uint32x2_t"]]],[5,"vaddq_u32","","Vector add.",null,[[["uint32x4_t"]],["uint32x4_t"]]],[5,"vaddq_u64","","Vector add.",null,[[["uint64x2_t"]],["uint64x2_t"]]],[5,"vadd_f32","","Vector add.",null,[[["float32x2_t"]],["float32x2_t"]]],[5,"vaddq_f32","","Vector add.",null,[[["float32x4_t"]],["float32x4_t"]]],[5,"vaddl_s8","","Vector long add.",null,[[["int8x8_t"]],["int16x8_t"]]],[5,"vaddl_s16","","Vector long add.",null,[[["int16x4_t"]],["int32x4_t"]]],[5,"vaddl_s32","","Vector long add.",null,[[["int32x2_t"]],["int64x2_t"]]],[5,"vaddl_u8","","Vector long add.",null,[[["uint8x8_t"]],["uint16x8_t"]]],[5,"vaddl_u16","","Vector long add.",null,[[["uint16x4_t"]],["uint32x4_t"]]],[5,"vaddl_u32","","Vector long add.",null,[[["uint32x2_t"]],["uint64x2_t"]]],[5,"vmovn_s16","","Vector narrow integer.",null,[[["int16x8_t"]],["int8x8_t"]]],[5,"vmovn_s32","","Vector narrow integer.",null,[[["int32x4_t"]],["int16x4_t"]]],[5,"vmovn_s64","","Vector narrow integer.",null,[[["int64x2_t"]],["int32x2_t"]]],[5,"vmovn_u16","","Vector narrow integer.",null,[[["uint16x8_t"]],["uint8x8_t"]]],[5,"vmovn_u32","","Vector narrow integer.",null,[[["uint32x4_t"]],["uint16x4_t"]]],[5,"vmovn_u64","","Vector narrow integer.",null,[[["uint64x2_t"]],["uint32x2_t"]]],[5,"vmovl_s8","","Vector long move.",null,[[["int8x8_t"]],["int16x8_t"]]],[5,"vmovl_s16","","Vector long move.",null,[[["int16x4_t"]],["int32x4_t"]]],[5,"vmovl_s32","","Vector long move.",null,[[["int32x2_t"]],["int64x2_t"]]],[5,"vmovl_u8","","Vector long move.",null,[[["uint8x8_t"]],["uint16x8_t"]]],[5,"vmovl_u16","","Vector long move.",null,[[["uint16x4_t"]],["uint32x4_t"]]],[5,"vmovl_u32","","Vector long move.",null,[[["uint32x2_t"]],["uint64x2_t"]]],[5,"vrsqrte_f32","","Reciprocal square-root estimate.",null,[[["float32x2_t"]],["float32x2_t"]]],[5,"vmvn_s8","","Vector bitwise not.",null,[[["int8x8_t"]],["int8x8_t"]]],[5,"vmvnq_s8","","Vector bitwise not.",null,[[["int8x16_t"]],["int8x16_t"]]],[5,"vmvn_s16","","Vector bitwise not.",null,[[["int16x4_t"]],["int16x4_t"]]],[5,"vmvnq_s16","","Vector bitwise not.",null,[[["int16x8_t"]],["int16x8_t"]]],[5,"vmvn_s32","","Vector bitwise not.",null,[[["int32x2_t"]],["int32x2_t"]]],[5,"vmvnq_s32","","Vector bitwise not.",null,[[["int32x4_t"]],["int32x4_t"]]],[5,"vmvn_u8","","Vector bitwise not.",null,[[["uint8x8_t"]],["uint8x8_t"]]],[5,"vmvnq_u8","","Vector bitwise not.",null,[[["uint8x16_t"]],["uint8x16_t"]]],[5,"vmvn_u16","","Vector bitwise not.",null,[[["uint16x4_t"]],["uint16x4_t"]]],[5,"vmvnq_u16","","Vector bitwise not.",null,[[["uint16x8_t"]],["uint16x8_t"]]],[5,"vmvn_u32","","Vector bitwise not.",null,[[["uint32x2_t"]],["uint32x2_t"]]],[5,"vmvnq_u32","","Vector bitwise not.",null,[[["uint32x4_t"]],["uint32x4_t"]]],[5,"vmvn_p8","","Vector bitwise not.",null,[[["poly8x8_t"]],["poly8x8_t"]]],[5,"vmvnq_p8","","Vector bitwise not.",null,[[["poly8x16_t"]],["poly8x16_t"]]],[5,"vpmin_s8","","Folding minimum of adjacent pairs",null,[[["int8x8_t"]],["int8x8_t"]]],[5,"vpmin_s16","","Folding minimum of adjacent pairs",null,[[["int16x4_t"]],["int16x4_t"]]],[5,"vpmin_s32","","Folding minimum of adjacent pairs",null,[[["int32x2_t"]],["int32x2_t"]]],[5,"vpmin_u8","","Folding minimum of adjacent pairs",null,[[["uint8x8_t"]],["uint8x8_t"]]],[5,"vpmin_u16","","Folding minimum of adjacent pairs",null,[[["uint16x4_t"]],["uint16x4_t"]]],[5,"vpmin_u32","","Folding minimum of adjacent pairs",null,[[["uint32x2_t"]],["uint32x2_t"]]],[5,"vpmin_f32","","Folding minimum of adjacent pairs",null,[[["float32x2_t"]],["float32x2_t"]]],[5,"vpmax_s8","","Folding maximum of adjacent pairs",null,[[["int8x8_t"]],["int8x8_t"]]],[5,"vpmax_s16","","Folding maximum of adjacent pairs",null,[[["int16x4_t"]],["int16x4_t"]]],[5,"vpmax_s32","","Folding maximum of adjacent pairs",null,[[["int32x2_t"]],["int32x2_t"]]],[5,"vpmax_u8","","Folding maximum of adjacent pairs",null,[[["uint8x8_t"]],["uint8x8_t"]]],[5,"vpmax_u16","","Folding maximum of adjacent pairs",null,[[["uint16x4_t"]],["uint16x4_t"]]],[5,"vpmax_u32","","Folding maximum of adjacent pairs",null,[[["uint32x2_t"]],["uint32x2_t"]]],[5,"vpmax_f32","","Folding maximum of adjacent pairs",null,[[["float32x2_t"]],["float32x2_t"]]],[5,"__dmb","","Generates a DMB (data memory barrier) instruction or…",null,[[["a"]]]],[5,"__dsb","","Generates a DSB (data synchronization barrier) instruction…",null,[[["a"]]]],[5,"__isb","","Generates an ISB (instruction synchronization barrier)…",null,[[["a"]]]],[5,"__nop","","Generates an unspecified no-op instruction.",null,[[]]],[5,"__rsr","","Reads a 32-bit system register",null,[[["r"]],["u32"]]],[5,"__rsrp","","Reads a system register containing an address",null,[[["r"]]]],[5,"__wsr","","Writes a 32-bit system register",null,[[["u32"],["r"]]]],[5,"__wsrp","","Writes a system register containing an address",null,[[["r"]]]],[0,"aarch64","core::arch","Platform-specific intrinsics for the `aarch64` platform.",null,null],[3,"float64x1_t","core::arch::aarch64","ARM-specific 64-bit wide vector of one packed `f64`.",null,null],[3,"float64x2_t","","ARM-specific 128-bit wide vector of two packed `f64`.",null,null],[3,"poly64x1_t","","ARM-specific 64-bit wide vector of one packed `p64`.",null,null],[3,"poly64x2_t","","ARM-specific 64-bit wide vector of two packed `p64`.",null,null],[3,"int8x16x2_t","","ARM-specific type containing two `int8x16_t` vectors.",null,null],[12,"0","","",175,null],[12,"1","","",175,null],[3,"int8x16x3_t","","ARM-specific type containing three `int8x16_t` vectors.",null,null],[12,"0","","",176,null],[12,"1","","",176,null],[12,"2","","",176,null],[3,"int8x16x4_t","","ARM-specific type containing four `int8x16_t` vectors.",null,null],[12,"0","","",177,null],[12,"1","","",177,null],[12,"2","","",177,null],[12,"3","","",177,null],[3,"uint8x16x2_t","","ARM-specific type containing two `uint8x16_t` vectors.",null,null],[12,"0","","",178,null],[12,"1","","",178,null],[3,"uint8x16x3_t","","ARM-specific type containing three `uint8x16_t` vectors.",null,null],[12,"0","","",179,null],[12,"1","","",179,null],[12,"2","","",179,null],[3,"uint8x16x4_t","","ARM-specific type containing four `uint8x16_t` vectors.",null,null],[12,"0","","",180,null],[12,"1","","",180,null],[12,"2","","",180,null],[12,"3","","",180,null],[3,"poly8x16x2_t","","ARM-specific type containing two `poly8x16_t` vectors.",null,null],[12,"0","","",181,null],[12,"1","","",181,null],[3,"poly8x16x3_t","","ARM-specific type containing three `poly8x16_t` vectors.",null,null],[12,"0","","",182,null],[12,"1","","",182,null],[12,"2","","",182,null],[3,"poly8x16x4_t","","ARM-specific type containing four `poly8x16_t` vectors.",null,null],[12,"0","","",183,null],[12,"1","","",183,null],[12,"2","","",183,null],[12,"3","","",183,null],[3,"SY","","Full system is the required shareability domain, reads and…",null,null],[3,"APSR","","Application Program Status Register",null,null],[3,"int8x8_t","","ARM-specific 64-bit wide vector of eight packed `i8`.",null,null],[3,"uint8x8_t","","ARM-specific 64-bit wide vector of eight packed `u8`.",null,null],[3,"poly8x8_t","","ARM-specific 64-bit wide polynomial vector of eight packed…",null,null],[3,"int16x4_t","","ARM-specific 64-bit wide vector of four packed `i16`.",null,null],[3,"uint16x4_t","","ARM-specific 64-bit wide vector of four packed `u16`.",null,null],[3,"poly16x4_t","","ARM-specific 64-bit wide vector of four packed `u16`.",null,null],[3,"int32x2_t","","ARM-specific 64-bit wide vector of two packed `i32`.",null,null],[3,"uint32x2_t","","ARM-specific 64-bit wide vector of two packed `u32`.",null,null],[3,"float32x2_t","","ARM-specific 64-bit wide vector of two packed `f32`.",null,null],[3,"int64x1_t","","ARM-specific 64-bit wide vector of one packed `i64`.",null,null],[3,"uint64x1_t","","ARM-specific 64-bit wide vector of one packed `u64`.",null,null],[3,"int8x16_t","","ARM-specific 128-bit wide vector of sixteen packed `i8`.",null,null],[3,"uint8x16_t","","ARM-specific 128-bit wide vector of sixteen packed `u8`.",null,null],[3,"poly8x16_t","","ARM-specific 128-bit wide vector of sixteen packed `u8`.",null,null],[3,"int16x8_t","","ARM-specific 128-bit wide vector of eight packed `i16`.",null,null],[3,"uint16x8_t","","ARM-specific 128-bit wide vector of eight packed `u16`.",null,null],[3,"poly16x8_t","","ARM-specific 128-bit wide vector of eight packed `u16`.",null,null],[3,"int32x4_t","","ARM-specific 128-bit wide vector of four packed `i32`.",null,null],[3,"uint32x4_t","","ARM-specific 128-bit wide vector of four packed `u32`.",null,null],[3,"float32x4_t","","ARM-specific 128-bit wide vector of four packed `f32`.",null,null],[3,"int64x2_t","","ARM-specific 128-bit wide vector of two packed `i64`.",null,null],[3,"uint64x2_t","","ARM-specific 128-bit wide vector of two packed `u64`.",null,null],[3,"int8x8x2_t","","ARM-specific type containing two `int8x8_t` vectors.",null,null],[12,"0","","",166,null],[12,"1","","",166,null],[3,"int8x8x3_t","","ARM-specific type containing three `int8x8_t` vectors.",null,null],[12,"0","","",167,null],[12,"1","","",167,null],[12,"2","","",167,null],[3,"int8x8x4_t","","ARM-specific type containing four `int8x8_t` vectors.",null,null],[12,"0","","",168,null],[12,"1","","",168,null],[12,"2","","",168,null],[12,"3","","",168,null],[3,"uint8x8x2_t","","ARM-specific type containing two `uint8x8_t` vectors.",null,null],[12,"0","","",169,null],[12,"1","","",169,null],[3,"uint8x8x3_t","","ARM-specific type containing three `uint8x8_t` vectors.",null,null],[12,"0","","",170,null],[12,"1","","",170,null],[12,"2","","",170,null],[3,"uint8x8x4_t","","ARM-specific type containing four `uint8x8_t` vectors.",null,null],[12,"0","","",171,null],[12,"1","","",171,null],[12,"2","","",171,null],[12,"3","","",171,null],[3,"poly8x8x2_t","","ARM-specific type containing two `poly8x8_t` vectors.",null,null],[12,"0","","",172,null],[12,"1","","",172,null],[3,"poly8x8x3_t","","ARM-specific type containing three `poly8x8_t` vectors.",null,null],[12,"0","","",173,null],[12,"1","","",173,null],[12,"2","","",173,null],[3,"poly8x8x4_t","","ARM-specific type containing four `poly8x8_t` vectors.",null,null],[12,"0","","",174,null],[12,"1","","",174,null],[12,"2","","",174,null],[12,"3","","",174,null],[3,"SY","","Full system is the required shareability domain, reads and…",null,null],[3,"APSR","","Application Program Status Register",null,null],[5,"_rev_u64","","Reverse the order of the bytes.",null,[[["u64"]],["u64"]]],[5,"_clz_u64","","Count Leading Zeros.",null,[[["u64"]],["u64"]]],[5,"_rbit_u64","","Reverse the bit order.",null,[[["u64"]],["u64"]]],[5,"_cls_u32","","Counts the leading most significant bits set.",null,[[["u32"]],["u32"]]],[5,"_cls_u64","","Counts the leading most significant bits set.",null,[[["u64"]],["u64"]]],[5,"vadd_f64","","Vector add.",null,[[["float64x1_t"]],["float64x1_t"]]],[5,"vaddq_f64","","Vector add.",null,[[["float64x2_t"]],["float64x2_t"]]],[5,"vaddd_s64","","Vector add.",null,[[["i64"]],["i64"]]],[5,"vaddd_u64","","Vector add.",null,[[["u64"]],["u64"]]],[5,"vmaxv_s8","","Horizontal vector max.",null,[[["int8x8_t"]],["i8"]]],[5,"vmaxvq_s8","","Horizontal vector max.",null,[[["int8x16_t"]],["i8"]]],[5,"vmaxv_s16","","Horizontal vector max.",null,[[["int16x4_t"]],["i16"]]],[5,"vmaxvq_s16","","Horizontal vector max.",null,[[["int16x8_t"]],["i16"]]],[5,"vmaxv_s32","","Horizontal vector max.",null,[[["int32x2_t"]],["i32"]]],[5,"vmaxvq_s32","","Horizontal vector max.",null,[[["int32x4_t"]],["i32"]]],[5,"vmaxv_u8","","Horizontal vector max.",null,[[["uint8x8_t"]],["u8"]]],[5,"vmaxvq_u8","","Horizontal vector max.",null,[[["uint8x16_t"]],["u8"]]],[5,"vmaxv_u16","","Horizontal vector max.",null,[[["uint16x4_t"]],["u16"]]],[5,"vmaxvq_u16","","Horizontal vector max.",null,[[["uint16x8_t"]],["u16"]]],[5,"vmaxv_u32","","Horizontal vector max.",null,[[["uint32x2_t"]],["u32"]]],[5,"vmaxvq_u32","","Horizontal vector max.",null,[[["uint32x4_t"]],["u32"]]],[5,"vmaxv_f32","","Horizontal vector max.",null,[[["float32x2_t"]],["f32"]]],[5,"vmaxvq_f32","","Horizontal vector max.",null,[[["float32x4_t"]],["f32"]]],[5,"vmaxvq_f64","","Horizontal vector max.",null,[[["float64x2_t"]],["f64"]]],[5,"vminv_s8","","Horizontal vector min.",null,[[["int8x8_t"]],["i8"]]],[5,"vminvq_s8","","Horizontal vector min.",null,[[["int8x16_t"]],["i8"]]],[5,"vminv_s16","","Horizontal vector min.",null,[[["int16x4_t"]],["i16"]]],[5,"vminvq_s16","","Horizontal vector min.",null,[[["int16x8_t"]],["i16"]]],[5,"vminv_s32","","Horizontal vector min.",null,[[["int32x2_t"]],["i32"]]],[5,"vminvq_s32","","Horizontal vector min.",null,[[["int32x4_t"]],["i32"]]],[5,"vminv_u8","","Horizontal vector min.",null,[[["uint8x8_t"]],["u8"]]],[5,"vminvq_u8","","Horizontal vector min.",null,[[["uint8x16_t"]],["u8"]]],[5,"vminv_u16","","Horizontal vector min.",null,[[["uint16x4_t"]],["u16"]]],[5,"vminvq_u16","","Horizontal vector min.",null,[[["uint16x8_t"]],["u16"]]],[5,"vminv_u32","","Horizontal vector min.",null,[[["uint32x2_t"]],["u32"]]],[5,"vminvq_u32","","Horizontal vector min.",null,[[["uint32x4_t"]],["u32"]]],[5,"vminv_f32","","Horizontal vector min.",null,[[["float32x2_t"]],["f32"]]],[5,"vminvq_f32","","Horizontal vector min.",null,[[["float32x4_t"]],["f32"]]],[5,"vminvq_f64","","Horizontal vector min.",null,[[["float64x2_t"]],["f64"]]],[5,"vpminq_s8","","Folding minimum of adjacent pairs",null,[[["int8x16_t"]],["int8x16_t"]]],[5,"vpminq_s16","","Folding minimum of adjacent pairs",null,[[["int16x8_t"]],["int16x8_t"]]],[5,"vpminq_s32","","Folding minimum of adjacent pairs",null,[[["int32x4_t"]],["int32x4_t"]]],[5,"vpminq_u8","","Folding minimum of adjacent pairs",null,[[["uint8x16_t"]],["uint8x16_t"]]],[5,"vpminq_u16","","Folding minimum of adjacent pairs",null,[[["uint16x8_t"]],["uint16x8_t"]]],[5,"vpminq_u32","","Folding minimum of adjacent pairs",null,[[["uint32x4_t"]],["uint32x4_t"]]],[5,"vpminq_f32","","Folding minimum of adjacent pairs",null,[[["float32x4_t"]],["float32x4_t"]]],[5,"vpminq_f64","","Folding minimum of adjacent pairs",null,[[["float64x2_t"]],["float64x2_t"]]],[5,"vpmaxq_s8","","Folding maximum of adjacent pairs",null,[[["int8x16_t"]],["int8x16_t"]]],[5,"vpmaxq_s16","","Folding maximum of adjacent pairs",null,[[["int16x8_t"]],["int16x8_t"]]],[5,"vpmaxq_s32","","Folding maximum of adjacent pairs",null,[[["int32x4_t"]],["int32x4_t"]]],[5,"vpmaxq_u8","","Folding maximum of adjacent pairs",null,[[["uint8x16_t"]],["uint8x16_t"]]],[5,"vpmaxq_u16","","Folding maximum of adjacent pairs",null,[[["uint16x8_t"]],["uint16x8_t"]]],[5,"vpmaxq_u32","","Folding maximum of adjacent pairs",null,[[["uint32x4_t"]],["uint32x4_t"]]],[5,"vpmaxq_f32","","Folding maximum of adjacent pairs",null,[[["float32x4_t"]],["float32x4_t"]]],[5,"vpmaxq_f64","","Folding maximum of adjacent pairs",null,[[["float64x2_t"]],["float64x2_t"]]],[5,"vcombine_s8","","Vector combine",null,[[["int8x8_t"]],["int8x16_t"]]],[5,"vcombine_s16","","Vector combine",null,[[["int16x4_t"]],["int16x8_t"]]],[5,"vcombine_s32","","Vector combine",null,[[["int32x2_t"]],["int32x4_t"]]],[5,"vcombine_s64","","Vector combine",null,[[["int64x1_t"]],["int64x2_t"]]],[5,"vcombine_u8","","Vector combine",null,[[["uint8x8_t"]],["uint8x16_t"]]],[5,"vcombine_u16","","Vector combine",null,[[["uint16x4_t"]],["uint16x8_t"]]],[5,"vcombine_u32","","Vector combine",null,[[["uint32x2_t"]],["uint32x4_t"]]],[5,"vcombine_u64","","Vector combine",null,[[["uint64x1_t"]],["uint64x2_t"]]],[5,"vcombine_p64","","Vector combine",null,[[["poly64x1_t"]],["poly64x2_t"]]],[5,"vcombine_f32","","Vector combine",null,[[["float32x2_t"]],["float32x4_t"]]],[5,"vcombine_p8","","Vector combine",null,[[["poly8x8_t"]],["poly8x16_t"]]],[5,"vcombine_p16","","Vector combine",null,[[["poly16x4_t"]],["poly16x8_t"]]],[5,"vcombine_f64","","Vector combine",null,[[["float64x1_t"]],["float64x2_t"]]],[5,"vtbl1_s8","","Table look-up",null,[[["int8x8_t"]],["int8x8_t"]]],[5,"vtbl1_u8","","Table look-up",null,[[["uint8x8_t"]],["uint8x8_t"]]],[5,"vtbl1_p8","","Table look-up",null,[[["uint8x8_t"],["poly8x8_t"]],["poly8x8_t"]]],[5,"vtbl2_s8","","Table look-up",null,[[["int8x8_t"],["int8x8x2_t"]],["int8x8_t"]]],[5,"vtbl2_u8","","Table look-up",null,[[["uint8x8_t"],["uint8x8x2_t"]],["uint8x8_t"]]],[5,"vtbl2_p8","","Table look-up",null,[[["poly8x8x2_t"],["uint8x8_t"]],["poly8x8_t"]]],[5,"vtbl3_s8","","Table look-up",null,[[["int8x8_t"],["int8x8x3_t"]],["int8x8_t"]]],[5,"vtbl3_u8","","Table look-up",null,[[["uint8x8x3_t"],["uint8x8_t"]],["uint8x8_t"]]],[5,"vtbl3_p8","","Table look-up",null,[[["uint8x8_t"],["poly8x8x3_t"]],["poly8x8_t"]]],[5,"vtbl4_s8","","Table look-up",null,[[["int8x8x4_t"],["int8x8_t"]],["int8x8_t"]]],[5,"vtbl4_u8","","Table look-up",null,[[["uint8x8_t"],["uint8x8x4_t"]],["uint8x8_t"]]],[5,"vtbl4_p8","","Table look-up",null,[[["poly8x8x4_t"],["uint8x8_t"]],["poly8x8_t"]]],[5,"vtbx1_s8","","Extended table look-up",null,[[["int8x8_t"]],["int8x8_t"]]],[5,"vtbx1_u8","","Extended table look-up",null,[[["uint8x8_t"]],["uint8x8_t"]]],[5,"vtbx1_p8","","Extended table look-up",null,[[["uint8x8_t"],["poly8x8_t"]],["poly8x8_t"]]],[5,"vtbx2_s8","","Extended table look-up",null,[[["int8x8_t"],["int8x8x2_t"]],["int8x8_t"]]],[5,"vtbx2_u8","","Extended table look-up",null,[[["uint8x8_t"],["uint8x8x2_t"]],["uint8x8_t"]]],[5,"vtbx2_p8","","Extended table look-up",null,[[["poly8x8x2_t"],["uint8x8_t"],["poly8x8_t"]],["poly8x8_t"]]],[5,"vtbx3_s8","","Extended table look-up",null,[[["int8x8_t"],["int8x8x3_t"]],["int8x8_t"]]],[5,"vtbx3_u8","","Extended table look-up",null,[[["uint8x8_t"],["uint8x8x3_t"]],["uint8x8_t"]]],[5,"vtbx3_p8","","Extended table look-up",null,[[["poly8x8x3_t"],["uint8x8_t"],["poly8x8_t"]],["poly8x8_t"]]],[5,"vtbx4_s8","","Extended table look-up",null,[[["int8x8_t"],["int8x8x4_t"]],["int8x8_t"]]],[5,"vtbx4_u8","","Extended table look-up",null,[[["uint8x8_t"],["uint8x8x4_t"]],["uint8x8_t"]]],[5,"vtbx4_p8","","Extended table look-up",null,[[["poly8x8x4_t"],["uint8x8_t"],["poly8x8_t"]],["poly8x8_t"]]],[5,"vqtbl1_s8","","Table look-up",null,[[["uint8x8_t"],["int8x16_t"]],["int8x8_t"]]],[5,"vqtbl1q_s8","","Table look-up",null,[[["uint8x16_t"],["int8x16_t"]],["int8x16_t"]]],[5,"vqtbl1_u8","","Table look-up",null,[[["uint8x16_t"],["uint8x8_t"]],["uint8x8_t"]]],[5,"vqtbl1q_u8","","Table look-up",null,[[["uint8x16_t"]],["uint8x16_t"]]],[5,"vqtbl1_p8","","Table look-up",null,[[["uint8x8_t"],["poly8x16_t"]],["poly8x8_t"]]],[5,"vqtbl1q_p8","","Table look-up",null,[[["uint8x16_t"],["poly8x16_t"]],["poly8x16_t"]]],[5,"vqtbx1_s8","","Extended table look-up",null,[[["int8x8_t"],["uint8x8_t"],["int8x16_t"]],["int8x8_t"]]],[5,"vqtbx1q_s8","","Extended table look-up",null,[[["uint8x16_t"],["int8x16_t"]],["int8x16_t"]]],[5,"vqtbx1_u8","","Extended table look-up",null,[[["uint8x8_t"],["uint8x16_t"]],["uint8x8_t"]]],[5,"vqtbx1q_u8","","Extended table look-up",null,[[["uint8x16_t"]],["uint8x16_t"]]],[5,"vqtbx1_p8","","Extended table look-up",null,[[["poly8x16_t"],["uint8x8_t"],["poly8x8_t"]],["poly8x8_t"]]],[5,"vqtbx1q_p8","","Extended table look-up",null,[[["uint8x16_t"],["poly8x16_t"]],["poly8x16_t"]]],[5,"vqtbl2_s8","","Table look-up",null,[[["int8x16x2_t"],["uint8x8_t"]],["int8x8_t"]]],[5,"vqtbl2q_s8","","Table look-up",null,[[["int8x16x2_t"],["uint8x16_t"]],["int8x16_t"]]],[5,"vqtbl2_u8","","Table look-up",null,[[["uint8x16x2_t"],["uint8x8_t"]],["uint8x8_t"]]],[5,"vqtbl2q_u8","","Table look-up",null,[[["uint8x16x2_t"],["uint8x16_t"]],["uint8x16_t"]]],[5,"vqtbl2_p8","","Table look-up",null,[[["poly8x16x2_t"],["uint8x8_t"]],["poly8x8_t"]]],[5,"vqtbl2q_p8","","Table look-up",null,[[["poly8x16x2_t"],["uint8x16_t"]],["poly8x16_t"]]],[5,"vqtbx2_s8","","Extended table look-up",null,[[["int8x8_t"],["int8x16x2_t"],["uint8x8_t"]],["int8x8_t"]]],[5,"vqtbx2q_s8","","Extended table look-up",null,[[["int8x16x2_t"],["uint8x16_t"],["int8x16_t"]],["int8x16_t"]]],[5,"vqtbx2_u8","","Extended table look-up",null,[[["uint8x8_t"],["uint8x16x2_t"]],["uint8x8_t"]]],[5,"vqtbx2q_u8","","Extended table look-up",null,[[["uint8x16_t"],["uint8x16x2_t"]],["uint8x16_t"]]],[5,"vqtbx2_p8","","Extended table look-up",null,[[["poly8x16x2_t"],["uint8x8_t"],["poly8x8_t"]],["poly8x8_t"]]],[5,"vqtbx2q_p8","","Extended table look-up",null,[[["poly8x16x2_t"],["uint8x16_t"],["poly8x16_t"]],["poly8x16_t"]]],[5,"vqtbl3_s8","","Table look-up",null,[[["uint8x8_t"],["int8x16x3_t"]],["int8x8_t"]]],[5,"vqtbl3q_s8","","Table look-up",null,[[["uint8x16_t"],["int8x16x3_t"]],["int8x16_t"]]],[5,"vqtbl3_u8","","Table look-up",null,[[["uint8x8_t"],["uint8x16x3_t"]],["uint8x8_t"]]],[5,"vqtbl3q_u8","","Table look-up",null,[[["uint8x16_t"],["uint8x16x3_t"]],["uint8x16_t"]]],[5,"vqtbl3_p8","","Table look-up",null,[[["poly8x16x3_t"],["uint8x8_t"]],["poly8x8_t"]]],[5,"vqtbl3q_p8","","Table look-up",null,[[["poly8x16x3_t"],["uint8x16_t"]],["poly8x16_t"]]],[5,"vqtbx3_s8","","Extended table look-up",null,[[["int8x8_t"],["uint8x8_t"],["int8x16x3_t"]],["int8x8_t"]]],[5,"vqtbx3q_s8","","Extended table look-up",null,[[["int8x16x3_t"],["uint8x16_t"],["int8x16_t"]],["int8x16_t"]]],[5,"vqtbx3_u8","","Extended table look-up",null,[[["uint8x8_t"],["uint8x16x3_t"]],["uint8x8_t"]]],[5,"vqtbx3q_u8","","Extended table look-up",null,[[["uint8x16_t"],["uint8x16x3_t"]],["uint8x16_t"]]],[5,"vqtbx3_p8","","Extended table look-up",null,[[["poly8x16x3_t"],["uint8x8_t"],["poly8x8_t"]],["poly8x8_t"]]],[5,"vqtbx3q_p8","","Extended table look-up",null,[[["poly8x16x3_t"],["uint8x16_t"],["poly8x16_t"]],["poly8x16_t"]]],[5,"vqtbl4_s8","","Table look-up",null,[[["int8x16x4_t"],["uint8x8_t"]],["int8x8_t"]]],[5,"vqtbl4q_s8","","Table look-up",null,[[["int8x16x4_t"],["uint8x16_t"]],["int8x16_t"]]],[5,"vqtbl4_u8","","Table look-up",null,[[["uint8x16x4_t"],["uint8x8_t"]],["uint8x8_t"]]],[5,"vqtbl4q_u8","","Table look-up",null,[[["uint8x16x4_t"],["uint8x16_t"]],["uint8x16_t"]]],[5,"vqtbl4_p8","","Table look-up",null,[[["uint8x8_t"],["poly8x16x4_t"]],["poly8x8_t"]]],[5,"vqtbl4q_p8","","Table look-up",null,[[["uint8x16_t"],["poly8x16x4_t"]],["poly8x16_t"]]],[5,"vqtbx4_s8","","Extended table look-up",null,[[["int8x16x4_t"],["int8x8_t"],["uint8x8_t"]],["int8x8_t"]]],[5,"vqtbx4q_s8","","Extended table look-up",null,[[["int8x16x4_t"],["uint8x16_t"],["int8x16_t"]],["int8x16_t"]]],[5,"vqtbx4_u8","","Extended table look-up",null,[[["uint8x8_t"],["uint8x16x4_t"]],["uint8x8_t"]]],[5,"vqtbx4q_u8","","Extended table look-up",null,[[["uint8x16_t"],["uint8x16x4_t"]],["uint8x16_t"]]],[5,"vqtbx4_p8","","Extended table look-up",null,[[["uint8x8_t"],["poly8x16x4_t"],["poly8x8_t"]],["poly8x8_t"]]],[5,"vqtbx4q_p8","","Extended table look-up",null,[[["uint8x16_t"],["poly8x16x4_t"],["poly8x16_t"]],["poly8x16_t"]]],[5,"vaeseq_u8","","AES single round encryption.",null,[[["uint8x16_t"]],["uint8x16_t"]]],[5,"vaesdq_u8","","AES single round decryption.",null,[[["uint8x16_t"]],["uint8x16_t"]]],[5,"vaesmcq_u8","","AES mix columns.",null,[[["uint8x16_t"]],["uint8x16_t"]]],[5,"vaesimcq_u8","","AES inverse mix columns.",null,[[["uint8x16_t"]],["uint8x16_t"]]],[5,"vsha1h_u32","","SHA1 fixed rotate.",null,[[["u32"]],["u32"]]],[5,"vsha1cq_u32","","SHA1 hash update accelerator, choose.",null,[[["uint32x4_t"],["u32"]],["uint32x4_t"]]],[5,"vsha1mq_u32","","SHA1 hash update accelerator, majority.",null,[[["uint32x4_t"],["u32"]],["uint32x4_t"]]],[5,"vsha1pq_u32","","SHA1 hash update accelerator, parity.",null,[[["uint32x4_t"],["u32"]],["uint32x4_t"]]],[5,"vsha1su0q_u32","","SHA1 schedule update accelerator, first part.",null,[[["uint32x4_t"]],["uint32x4_t"]]],[5,"vsha1su1q_u32","","SHA1 schedule update accelerator, second part.",null,[[["uint32x4_t"]],["uint32x4_t"]]],[5,"vsha256hq_u32","","SHA256 hash update accelerator.",null,[[["uint32x4_t"]],["uint32x4_t"]]],[5,"vsha256h2q_u32","","SHA256 hash update accelerator, upper part.",null,[[["uint32x4_t"]],["uint32x4_t"]]],[5,"vsha256su0q_u32","","SHA256 schedule update accelerator, first part.",null,[[["uint32x4_t"]],["uint32x4_t"]]],[5,"vsha256su1q_u32","","SHA256 schedule update accelerator, second part.",null,[[["uint32x4_t"]],["uint32x4_t"]]],[5,"__crc32b","","CRC32 single round checksum for bytes (8 bits).",null,[[["u32"],["u8"]],["u32"]]],[5,"__crc32h","","CRC32 single round checksum for half words (16 bits).",null,[[["u16"],["u32"]],["u32"]]],[5,"__crc32w","","CRC32 single round checksum for words (32 bits).",null,[[["u32"]],["u32"]]],[5,"__crc32d","","CRC32 single round checksum for quad words (64 bits).",null,[[["u32"],["u64"]],["u32"]]],[5,"__crc32cb","","CRC32-C single round checksum for bytes (8 bits).",null,[[["u32"],["u8"]],["u32"]]],[5,"__crc32ch","","CRC32-C single round checksum for half words (16 bits).",null,[[["u16"],["u32"]],["u32"]]],[5,"__crc32cw","","CRC32-C single round checksum for words (32 bits).",null,[[["u32"]],["u32"]]],[5,"__crc32cd","","CRC32-C single round checksum for quad words (64 bits).",null,[[["u32"],["u64"]],["u32"]]],[5,"__dmb","","Generates a DMB (data memory barrier) instruction or…",null,[[["a"]]]],[5,"__dsb","","Generates a DSB (data synchronization barrier) instruction…",null,[[["a"]]]],[5,"__isb","","Generates an ISB (instruction synchronization barrier)…",null,[[["a"]]]],[5,"__nop","","Generates an unspecified no-op instruction.",null,[[]]],[5,"__rsr","","Reads a 32-bit system register",null,[[["r"]],["u32"]]],[5,"__rsrp","","Reads a system register containing an address",null,[[["r"]]]],[5,"__wsr","","Writes a 32-bit system register",null,[[["u32"],["r"]]]],[5,"__wsrp","","Writes a system register containing an address",null,[[["r"]]]],[5,"brk","","Generates the trap instruction `BRK 1`",null,[[]]],[5,"__breakpoint","","Inserts a breakpoint instruction.",null,[[["i32"]]]],[5,"_rev_u16","","Reverse the order of the bytes.",null,[[["u16"]],["u16"]]],[5,"_rev_u32","","Reverse the order of the bytes.",null,[[["u32"]],["u32"]]],[5,"vadd_s8","","Vector add.",null,[[["int8x8_t"]],["int8x8_t"]]],[5,"vaddq_s8","","Vector add.",null,[[["int8x16_t"]],["int8x16_t"]]],[5,"vadd_s16","","Vector add.",null,[[["int16x4_t"]],["int16x4_t"]]],[5,"vaddq_s16","","Vector add.",null,[[["int16x8_t"]],["int16x8_t"]]],[5,"vadd_s32","","Vector add.",null,[[["int32x2_t"]],["int32x2_t"]]],[5,"vaddq_s32","","Vector add.",null,[[["int32x4_t"]],["int32x4_t"]]],[5,"vaddq_s64","","Vector add.",null,[[["int64x2_t"]],["int64x2_t"]]],[5,"vadd_u8","","Vector add.",null,[[["uint8x8_t"]],["uint8x8_t"]]],[5,"vaddq_u8","","Vector add.",null,[[["uint8x16_t"]],["uint8x16_t"]]],[5,"vadd_u16","","Vector add.",null,[[["uint16x4_t"]],["uint16x4_t"]]],[5,"vaddq_u16","","Vector add.",null,[[["uint16x8_t"]],["uint16x8_t"]]],[5,"vadd_u32","","Vector add.",null,[[["uint32x2_t"]],["uint32x2_t"]]],[5,"vaddq_u32","","Vector add.",null,[[["uint32x4_t"]],["uint32x4_t"]]],[5,"vaddq_u64","","Vector add.",null,[[["uint64x2_t"]],["uint64x2_t"]]],[5,"vadd_f32","","Vector add.",null,[[["float32x2_t"]],["float32x2_t"]]],[5,"vaddq_f32","","Vector add.",null,[[["float32x4_t"]],["float32x4_t"]]],[5,"vaddl_s8","","Vector long add.",null,[[["int8x8_t"]],["int16x8_t"]]],[5,"vaddl_s16","","Vector long add.",null,[[["int16x4_t"]],["int32x4_t"]]],[5,"vaddl_s32","","Vector long add.",null,[[["int32x2_t"]],["int64x2_t"]]],[5,"vaddl_u8","","Vector long add.",null,[[["uint8x8_t"]],["uint16x8_t"]]],[5,"vaddl_u16","","Vector long add.",null,[[["uint16x4_t"]],["uint32x4_t"]]],[5,"vaddl_u32","","Vector long add.",null,[[["uint32x2_t"]],["uint64x2_t"]]],[5,"vmovn_s16","","Vector narrow integer.",null,[[["int16x8_t"]],["int8x8_t"]]],[5,"vmovn_s32","","Vector narrow integer.",null,[[["int32x4_t"]],["int16x4_t"]]],[5,"vmovn_s64","","Vector narrow integer.",null,[[["int64x2_t"]],["int32x2_t"]]],[5,"vmovn_u16","","Vector narrow integer.",null,[[["uint16x8_t"]],["uint8x8_t"]]],[5,"vmovn_u32","","Vector narrow integer.",null,[[["uint32x4_t"]],["uint16x4_t"]]],[5,"vmovn_u64","","Vector narrow integer.",null,[[["uint64x2_t"]],["uint32x2_t"]]],[5,"vmovl_s8","","Vector long move.",null,[[["int8x8_t"]],["int16x8_t"]]],[5,"vmovl_s16","","Vector long move.",null,[[["int16x4_t"]],["int32x4_t"]]],[5,"vmovl_s32","","Vector long move.",null,[[["int32x2_t"]],["int64x2_t"]]],[5,"vmovl_u8","","Vector long move.",null,[[["uint8x8_t"]],["uint16x8_t"]]],[5,"vmovl_u16","","Vector long move.",null,[[["uint16x4_t"]],["uint32x4_t"]]],[5,"vmovl_u32","","Vector long move.",null,[[["uint32x2_t"]],["uint64x2_t"]]],[5,"vrsqrte_f32","","Reciprocal square-root estimate.",null,[[["float32x2_t"]],["float32x2_t"]]],[5,"vmvn_s8","","Vector bitwise not.",null,[[["int8x8_t"]],["int8x8_t"]]],[5,"vmvnq_s8","","Vector bitwise not.",null,[[["int8x16_t"]],["int8x16_t"]]],[5,"vmvn_s16","","Vector bitwise not.",null,[[["int16x4_t"]],["int16x4_t"]]],[5,"vmvnq_s16","","Vector bitwise not.",null,[[["int16x8_t"]],["int16x8_t"]]],[5,"vmvn_s32","","Vector bitwise not.",null,[[["int32x2_t"]],["int32x2_t"]]],[5,"vmvnq_s32","","Vector bitwise not.",null,[[["int32x4_t"]],["int32x4_t"]]],[5,"vmvn_u8","","Vector bitwise not.",null,[[["uint8x8_t"]],["uint8x8_t"]]],[5,"vmvnq_u8","","Vector bitwise not.",null,[[["uint8x16_t"]],["uint8x16_t"]]],[5,"vmvn_u16","","Vector bitwise not.",null,[[["uint16x4_t"]],["uint16x4_t"]]],[5,"vmvnq_u16","","Vector bitwise not.",null,[[["uint16x8_t"]],["uint16x8_t"]]],[5,"vmvn_u32","","Vector bitwise not.",null,[[["uint32x2_t"]],["uint32x2_t"]]],[5,"vmvnq_u32","","Vector bitwise not.",null,[[["uint32x4_t"]],["uint32x4_t"]]],[5,"vmvn_p8","","Vector bitwise not.",null,[[["poly8x8_t"]],["poly8x8_t"]]],[5,"vmvnq_p8","","Vector bitwise not.",null,[[["poly8x16_t"]],["poly8x16_t"]]],[5,"vpmin_s8","","Folding minimum of adjacent pairs",null,[[["int8x8_t"]],["int8x8_t"]]],[5,"vpmin_s16","","Folding minimum of adjacent pairs",null,[[["int16x4_t"]],["int16x4_t"]]],[5,"vpmin_s32","","Folding minimum of adjacent pairs",null,[[["int32x2_t"]],["int32x2_t"]]],[5,"vpmin_u8","","Folding minimum of adjacent pairs",null,[[["uint8x8_t"]],["uint8x8_t"]]],[5,"vpmin_u16","","Folding minimum of adjacent pairs",null,[[["uint16x4_t"]],["uint16x4_t"]]],[5,"vpmin_u32","","Folding minimum of adjacent pairs",null,[[["uint32x2_t"]],["uint32x2_t"]]],[5,"vpmin_f32","","Folding minimum of adjacent pairs",null,[[["float32x2_t"]],["float32x2_t"]]],[5,"vpmax_s8","","Folding maximum of adjacent pairs",null,[[["int8x8_t"]],["int8x8_t"]]],[5,"vpmax_s16","","Folding maximum of adjacent pairs",null,[[["int16x4_t"]],["int16x4_t"]]],[5,"vpmax_s32","","Folding maximum of adjacent pairs",null,[[["int32x2_t"]],["int32x2_t"]]],[5,"vpmax_u8","","Folding maximum of adjacent pairs",null,[[["uint8x8_t"]],["uint8x8_t"]]],[5,"vpmax_u16","","Folding maximum of adjacent pairs",null,[[["uint16x4_t"]],["uint16x4_t"]]],[5,"vpmax_u32","","Folding maximum of adjacent pairs",null,[[["uint32x2_t"]],["uint32x2_t"]]],[5,"vpmax_f32","","Folding maximum of adjacent pairs",null,[[["float32x2_t"]],["float32x2_t"]]],[5,"__dmb","","Generates a DMB (data memory barrier) instruction or…",null,[[["a"]]]],[5,"__dsb","","Generates a DSB (data synchronization barrier) instruction…",null,[[["a"]]]],[5,"__isb","","Generates an ISB (instruction synchronization barrier)…",null,[[["a"]]]],[5,"__nop","","Generates an unspecified no-op instruction.",null,[[]]],[5,"__rsr","","Reads a 32-bit system register",null,[[["r"]],["u32"]]],[5,"__rsrp","","Reads a system register containing an address",null,[[["r"]]]],[5,"__wsr","","Writes a 32-bit system register",null,[[["u32"],["r"]]]],[5,"__wsrp","","Writes a system register containing an address",null,[[["r"]]]],[0,"wasm32","core::arch","Platform-specific intrinsics for the `wasm32` platform.",null,null],[3,"v128","core::arch::wasm32","WASM-specific 128-bit wide SIMD vector type.",null,null],[5,"i32_atomic_wait","","Corresponding intrinsic to wasm's [`i32.atomic.wait`…",null,[[["i64"],["i32"]],["i32"]]],[5,"i64_atomic_wait","","Corresponding intrinsic to wasm's [`i64.atomic.wait`…",null,[[["i64"]],["i32"]]],[5,"atomic_notify","","Corresponding intrinsic to wasm's [`atomic.notify`…",null,[[["u32"]],["u32"]]],[5,"v128_load","","Loads a `v128` vector from the given heap address.",null,[[],["v128"]]],[5,"v128_store","","Stores a `v128` vector to the given heap address.",null,[[["v128"]]]],[5,"v128_const","","Materializes a constant SIMD value from the immediate…",null,[[["u8"]],["v128"]]],[5,"i8x16_splat","","Creates a vector with identical lanes.",null,[[["i8"]],["v128"]]],[5,"i8x16_extract_lane","","Extracts a lane from a 128-bit vector interpreted as 16…",null,[[["v128"],["usize"]],["i8"]]],[5,"i8x16_replace_lane","","Replaces a lane from a 128-bit vector interpreted as 16…",null,[[["v128"],["i8"],["usize"]],["v128"]]],[5,"i16x8_splat","","Creates a vector with identical lanes.",null,[[["i16"]],["v128"]]],[5,"i16x8_extract_lane","","Extracts a lane from a 128-bit vector interpreted as 8…",null,[[["v128"],["usize"]],["i16"]]],[5,"i16x8_replace_lane","","Replaces a lane from a 128-bit vector interpreted as 8…",null,[[["v128"],["usize"],["i16"]],["v128"]]],[5,"i32x4_splat","","Creates a vector with identical lanes.",null,[[["i32"]],["v128"]]],[5,"i32x4_extract_lane","","Extracts a lane from a 128-bit vector interpreted as 4…",null,[[["v128"],["usize"]],["i32"]]],[5,"i32x4_replace_lane","","Replaces a lane from a 128-bit vector interpreted as 4…",null,[[["v128"],["usize"],["i32"]],["v128"]]],[5,"i64x2_splat","","Creates a vector with identical lanes.",null,[[["i64"]],["v128"]]],[5,"i64x2_extract_lane","","Extracts a lane from a 128-bit vector interpreted as 2…",null,[[["v128"],["usize"]],["i64"]]],[5,"i64x2_replace_lane","","Replaces a lane from a 128-bit vector interpreted as 2…",null,[[["v128"],["i64"],["usize"]],["v128"]]],[5,"f32x4_splat","","Creates a vector with identical lanes.",null,[[["f32"]],["v128"]]],[5,"f32x4_extract_lane","","Extracts a lane from a 128-bit vector interpreted as 4…",null,[[["v128"],["usize"]],["f32"]]],[5,"f32x4_replace_lane","","Replaces a lane from a 128-bit vector interpreted as 4…",null,[[["v128"],["f32"],["usize"]],["v128"]]],[5,"f64x2_splat","","Creates a vector with identical lanes.",null,[[["f64"]],["v128"]]],[5,"f64x2_extract_lane","","Extracts lane from a 128-bit vector interpreted as 2…",null,[[["v128"],["usize"]],["f64"]]],[5,"f64x2_replace_lane","","Replaces a lane from a 128-bit vector interpreted as 2…",null,[[["v128"],["f64"],["usize"]],["v128"]]],[5,"i8x16_eq","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i8x16_ne","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i8x16_lt_s","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i8x16_lt_u","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i8x16_gt_s","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i8x16_gt_u","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i8x16_le_s","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i8x16_le_u","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i8x16_ge_s","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i8x16_ge_u","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i16x8_eq","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i16x8_ne","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i16x8_lt_s","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i16x8_lt_u","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i16x8_gt_s","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i16x8_gt_u","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i16x8_le_s","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i16x8_le_u","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i16x8_ge_s","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i16x8_ge_u","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i32x4_eq","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i32x4_ne","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i32x4_lt_s","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i32x4_lt_u","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i32x4_gt_s","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i32x4_gt_u","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i32x4_le_s","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i32x4_le_u","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i32x4_ge_s","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"i32x4_ge_u","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"f32x4_eq","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"f32x4_ne","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"f32x4_lt","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"f32x4_gt","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"f32x4_le","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"f32x4_ge","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"f64x2_eq","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"f64x2_ne","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"f64x2_lt","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"f64x2_gt","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"f64x2_le","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"f64x2_ge","","Compares two 128-bit vectors as if they were two vectors…",null,[[["v128"]],["v128"]]],[5,"v128_not","","Flips each bit of the 128-bit input vector.",null,[[["v128"]],["v128"]]],[5,"v128_and","","Performs a bitwise and of the two input 128-bit vectors,…",null,[[["v128"]],["v128"]]],[5,"v128_or","","Performs a bitwise or of the two input 128-bit vectors,…",null,[[["v128"]],["v128"]]],[5,"v128_xor","","Performs a bitwise xor of the two input 128-bit vectors,…",null,[[["v128"]],["v128"]]],[5,"v128_bitselect","","Use the bitmask in `c` to select bits from `v1` when 1 and…",null,[[["v128"]],["v128"]]],[5,"i8x16_neg","","Negates a 128-bit vectors intepreted as sixteen 8-bit…",null,[[["v128"]],["v128"]]],[5,"i8x16_any_true","","Returns 1 if any lane is nonzero or 0 if all lanes are zero.",null,[[["v128"]],["i32"]]],[5,"i8x16_all_true","","Returns 1 if all lanes are nonzero or 0 if any lane is…",null,[[["v128"]],["i32"]]],[5,"i8x16_shl","","Shifts each lane to the left by the specified number of…",null,[[["v128"],["u32"]],["v128"]]],[5,"i8x16_shr_s","","Shifts each lane to the right by the specified number of…",null,[[["v128"],["u32"]],["v128"]]],[5,"i8x16_shr_u","","Shifts each lane to the right by the specified number of…",null,[[["v128"],["u32"]],["v128"]]],[5,"i8x16_add","","Adds two 128-bit vectors as if they were two packed…",null,[[["v128"]],["v128"]]],[5,"i8x16_add_saturate_s","","Adds two 128-bit vectors as if they were two packed…",null,[[["v128"]],["v128"]]],[5,"i8x16_add_saturate_u","","Adds two 128-bit vectors as if they were two packed…",null,[[["v128"]],["v128"]]],[5,"i8x16_sub","","Subtracts two 128-bit vectors as if they were two packed…",null,[[["v128"]],["v128"]]],[5,"i8x16_sub_saturate_s","","Subtracts two 128-bit vectors as if they were two packed…",null,[[["v128"]],["v128"]]],[5,"i8x16_sub_saturate_u","","Subtracts two 128-bit vectors as if they were two packed…",null,[[["v128"]],["v128"]]],[5,"i8x16_mul","","Multiplies two 128-bit vectors as if they were two packed…",null,[[["v128"]],["v128"]]],[5,"i16x8_neg","","Negates a 128-bit vectors intepreted as eight 16-bit…",null,[[["v128"]],["v128"]]],[5,"i16x8_any_true","","Returns 1 if any lane is nonzero or 0 if all lanes are zero.",null,[[["v128"]],["i32"]]],[5,"i16x8_all_true","","Returns 1 if all lanes are nonzero or 0 if any lane is…",null,[[["v128"]],["i32"]]],[5,"i16x8_shl","","Shifts each lane to the left by the specified number of…",null,[[["v128"],["u32"]],["v128"]]],[5,"i16x8_shr_s","","Shifts each lane to the right by the specified number of…",null,[[["v128"],["u32"]],["v128"]]],[5,"i16x8_shr_u","","Shifts each lane to the right by the specified number of…",null,[[["v128"],["u32"]],["v128"]]],[5,"i16x8_add","","Adds two 128-bit vectors as if they were two packed eight…",null,[[["v128"]],["v128"]]],[5,"i16x8_add_saturate_s","","Adds two 128-bit vectors as if they were two packed eight…",null,[[["v128"]],["v128"]]],[5,"i16x8_add_saturate_u","","Adds two 128-bit vectors as if they were two packed eight…",null,[[["v128"]],["v128"]]],[5,"i16x8_sub","","Subtracts two 128-bit vectors as if they were two packed…",null,[[["v128"]],["v128"]]],[5,"i16x8_sub_saturate_s","","Subtracts two 128-bit vectors as if they were two packed…",null,[[["v128"]],["v128"]]],[5,"i16x8_sub_saturate_u","","Subtracts two 128-bit vectors as if they were two packed…",null,[[["v128"]],["v128"]]],[5,"i16x8_mul","","Multiplies two 128-bit vectors as if they were two packed…",null,[[["v128"]],["v128"]]],[5,"i32x4_neg","","Negates a 128-bit vectors intepreted as four 32-bit signed…",null,[[["v128"]],["v128"]]],[5,"i32x4_any_true","","Returns 1 if any lane is nonzero or 0 if all lanes are zero.",null,[[["v128"]],["i32"]]],[5,"i32x4_all_true","","Returns 1 if all lanes are nonzero or 0 if any lane is…",null,[[["v128"]],["i32"]]],[5,"i32x4_shl","","Shifts each lane to the left by the specified number of…",null,[[["v128"],["u32"]],["v128"]]],[5,"i32x4_shr_s","","Shifts each lane to the right by the specified number of…",null,[[["v128"],["u32"]],["v128"]]],[5,"i32x4_shr_u","","Shifts each lane to the right by the specified number of…",null,[[["v128"],["u32"]],["v128"]]],[5,"i32x4_add","","Adds two 128-bit vectors as if they were two packed four…",null,[[["v128"]],["v128"]]],[5,"i32x4_sub","","Subtracts two 128-bit vectors as if they were two packed…",null,[[["v128"]],["v128"]]],[5,"i32x4_mul","","Multiplies two 128-bit vectors as if they were two packed…",null,[[["v128"]],["v128"]]],[5,"i64x2_neg","","Negates a 128-bit vectors intepreted as two 64-bit signed…",null,[[["v128"]],["v128"]]],[5,"i64x2_any_true","","Returns 1 if any lane is nonzero or 0 if all lanes are zero.",null,[[["v128"]],["i32"]]],[5,"i64x2_all_true","","Returns 1 if all lanes are nonzero or 0 if any lane is…",null,[[["v128"]],["i32"]]],[5,"i64x2_shl","","Shifts each lane to the left by the specified number of…",null,[[["v128"],["u32"]],["v128"]]],[5,"i64x2_shr_s","","Shifts each lane to the right by the specified number of…",null,[[["v128"],["u32"]],["v128"]]],[5,"i64x2_shr_u","","Shifts each lane to the right by the specified number of…",null,[[["v128"],["u32"]],["v128"]]],[5,"i64x2_add","","Adds two 128-bit vectors as if they were two packed two…",null,[[["v128"]],["v128"]]],[5,"i64x2_sub","","Subtracts two 128-bit vectors as if they were two packed…",null,[[["v128"]],["v128"]]],[5,"f32x4_abs","","Calculates the absolute value of each lane of a 128-bit…",null,[[["v128"]],["v128"]]],[5,"f32x4_neg","","Negates each lane of a 128-bit vector interpreted as four…",null,[[["v128"]],["v128"]]],[5,"f32x4_sqrt","","Calculates the square root of each lane of a 128-bit…",null,[[["v128"]],["v128"]]],[5,"f32x4_add","","Adds pairwise lanes of two 128-bit vectors interpreted as…",null,[[["v128"]],["v128"]]],[5,"f32x4_sub","","Subtracts pairwise lanes of two 128-bit vectors…",null,[[["v128"]],["v128"]]],[5,"f32x4_mul","","Multiplies pairwise lanes of two 128-bit vectors…",null,[[["v128"]],["v128"]]],[5,"f32x4_div","","Divides pairwise lanes of two 128-bit vectors interpreted…",null,[[["v128"]],["v128"]]],[5,"f32x4_min","","Calculates the minimum of pairwise lanes of two 128-bit…",null,[[["v128"]],["v128"]]],[5,"f32x4_max","","Calculates the maximum of pairwise lanes of two 128-bit…",null,[[["v128"]],["v128"]]],[5,"f64x2_abs","","Calculates the absolute value of each lane of a 128-bit…",null,[[["v128"]],["v128"]]],[5,"f64x2_neg","","Negates each lane of a 128-bit vector interpreted as two…",null,[[["v128"]],["v128"]]],[5,"f64x2_sqrt","","Calculates the square root of each lane of a 128-bit…",null,[[["v128"]],["v128"]]],[5,"f64x2_add","","Adds pairwise lanes of two 128-bit vectors interpreted as…",null,[[["v128"]],["v128"]]],[5,"f64x2_sub","","Subtracts pairwise lanes of two 128-bit vectors…",null,[[["v128"]],["v128"]]],[5,"f64x2_mul","","Multiplies pairwise lanes of two 128-bit vectors…",null,[[["v128"]],["v128"]]],[5,"f64x2_div","","Divides pairwise lanes of two 128-bit vectors interpreted…",null,[[["v128"]],["v128"]]],[5,"f64x2_min","","Calculates the minimum of pairwise lanes of two 128-bit…",null,[[["v128"]],["v128"]]],[5,"f64x2_max","","Calculates the maximum of pairwise lanes of two 128-bit…",null,[[["v128"]],["v128"]]],[5,"i32x4_trunc_s_f32x4_sat","","Converts a 128-bit vector interpreted as four 32-bit…",null,[[["v128"]],["v128"]]],[5,"i32x4_trunc_u_f32x4_sat","","Converts a 128-bit vector interpreted as four 32-bit…",null,[[["v128"]],["v128"]]],[5,"i64x2_trunc_s_f64x2_sat","","Converts a 128-bit vector interpreted as two 64-bit…",null,[[["v128"]],["v128"]]],[5,"i64x2_trunc_u_f64x2_sat","","Converts a 128-bit vector interpreted as two 64-bit…",null,[[["v128"]],["v128"]]],[5,"f32x4_convert_i32x4_s","","Converts a 128-bit vector interpreted as four 32-bit…",null,[[["v128"]],["v128"]]],[5,"f32x4_convert_i32x4_u","","Converts a 128-bit vector interpreted as four 32-bit…",null,[[["v128"]],["v128"]]],[5,"f64x2_convert_s_i64x2","","Converts a 128-bit vector interpreted as two 64-bit signed…",null,[[["v128"]],["v128"]]],[5,"f64x2_convert_u_i64x2","","Converts a 128-bit vector interpreted as two 64-bit…",null,[[["v128"]],["v128"]]],[5,"memory_size","","Corresponding intrinsic to wasm's [`memory.size`…",null,[[["u32"]],["usize"]]],[5,"memory_grow","","Corresponding intrinsic to wasm's [`memory.grow`…",null,[[["u32"],["usize"]],["usize"]]],[5,"unreachable","","Generates the trap instruction `UNREACHABLE`",null,[[]]],[0,"mips","core::arch","Platform-specific intrinsics for the `mips` platform.",null,null],[3,"v16i8","core::arch::mips","",null,null],[3,"v8i16","","",null,null],[3,"v4i32","","",null,null],[3,"v2i64","","",null,null],[3,"v16u8","","",null,null],[3,"v8u16","","",null,null],[3,"v4u32","","",null,null],[3,"v2u64","","",null,null],[3,"v4f32","","",null,null],[3,"v2f64","","",null,null],[5,"__msa_add_a_b","","Vector Add Absolute Values.",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_add_a_h","","Vector Add Absolute Values",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_add_a_w","","Vector Add Absolute Values",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_add_a_d","","Vector Add Absolute Values",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_adds_a_b","","Signed Saturated Vector Saturated Add of Absolute Values",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_adds_a_h","","Vector Saturated Add of Absolute Values",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_adds_a_w","","Vector Saturated Add of Absolute Values",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_adds_a_d","","Vector Saturated Add of Absolute Values",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_adds_s_b","","Vector Signed Saturated Add of Signed Values",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_adds_s_h","","Vector Signed Saturated Add of Signed Values",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_adds_s_w","","Vector Signed Saturated Add of Signed Values",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_adds_s_d","","Vector Signed Saturated Add of Signed Values",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_adds_u_b","","Vector Unsigned Saturated Add of Unsigned Values",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_adds_u_h","","Vector Unsigned Saturated Add of Unsigned Values",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_adds_u_w","","Vector Unsigned Saturated Add of Unsigned Values",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_adds_u_d","","Vector Unsigned Saturated Add of Unsigned Values",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_addv_b","","Vector Add",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_addv_h","","Vector Add",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_addv_w","","Vector Add",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_addv_d","","Vector Add",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_addvi_b","","Immediate Add",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_addvi_h","","Immediate Add",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_addvi_w","","Immediate Add",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_addvi_d","","Immediate Add",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_and_v","","Vector Logical And",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_andi_b","","Immediate Logical And",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_asub_s_b","","Vector Absolute Values of Signed Subtract",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_asub_s_h","","Vector Absolute Values of Signed Subtract",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_asub_s_w","","Vector Absolute Values of Signed Subtract",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_asub_s_d","","Vector Absolute Values of Signed Subtract",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_asub_u_b","","Vector Absolute Values of Unsigned Subtract",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_asub_u_h","","Vector Absolute Values of Unsigned Subtract",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_asub_u_w","","Vector Absolute Values of Unsigned Subtract",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_asub_u_d","","Vector Absolute Values of Unsigned Subtract",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_ave_s_b","","Vector Signed Average",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_ave_s_h","","Vector Signed Average",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_ave_s_w","","Vector Signed Average",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_ave_s_d","","Vector Signed Average",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_ave_u_b","","Vector Unsigned Average",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_ave_u_h","","Vector Unsigned Average",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_ave_u_w","","Vector Unsigned Average",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_ave_u_d","","Vector Unsigned Average",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_aver_s_b","","Vector Signed Average Rounded",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_aver_s_h","","Vector Signed Average Rounded",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_aver_s_w","","Vector Signed Average Rounded",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_aver_s_d","","Vector Signed Average Rounded",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_aver_u_b","","Vector Unsigned Average Rounded",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_aver_u_h","","Vector Unsigned Average Rounded",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_aver_u_w","","Vector Unsigned Average Rounded",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_aver_u_d","","Vector Unsigned Average Rounded",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_bclr_b","","Vector Bit Clear",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_bclr_h","","Vector Bit Clear",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_bclr_w","","Vector Bit Clear",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_bclr_d","","Vector Bit Clear",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_bclri_b","","Immediate Bit Clear",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_bclri_h","","Immediate Bit Clear",null,[[["i32"],["v8u16"]],["v8u16"]]],[5,"__msa_bclri_w","","Immediate Bit Clear",null,[[["v4u32"],["i32"]],["v4u32"]]],[5,"__msa_bclri_d","","Immediate Bit Clear",null,[[["v2u64"],["i32"]],["v2u64"]]],[5,"__msa_binsl_b","","Vector Bit Insert Left",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_binsl_h","","Vector Bit Insert Left",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_binsl_w","","Vector Bit Insert Left",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_binsl_d","","Vector Bit Insert Left",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_binsli_b","","Immediate Bit Insert Left",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_binsli_h","","Immediate Bit Insert Left",null,[[["i32"],["v8u16"]],["v8u16"]]],[5,"__msa_binsli_w","","Immediate Bit Insert Left",null,[[["v4u32"],["i32"]],["v4u32"]]],[5,"__msa_binsli_d","","Immediate Bit Insert Left",null,[[["v2u64"],["i32"]],["v2u64"]]],[5,"__msa_binsr_b","","Vector Bit Insert Right",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_binsr_h","","Vector Bit Insert Right",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_binsr_w","","Vector Bit Insert Right",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_binsr_d","","Vector Bit Insert Right",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_binsri_b","","Immediate Bit Insert Right",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_binsri_h","","Immediate Bit Insert Right",null,[[["i32"],["v8u16"]],["v8u16"]]],[5,"__msa_binsri_w","","Immediate Bit Insert Right",null,[[["v4u32"],["i32"]],["v4u32"]]],[5,"__msa_binsri_d","","Immediate Bit Insert Right",null,[[["v2u64"],["i32"]],["v2u64"]]],[5,"__msa_bmnz_v","","Vector Bit Move If Not Zero",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_bmnzi_b","","Immediate Bit Move If Not Zero",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_bmz_v","","Vector Bit Move If Zero",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_bmzi_b","","Immediate Bit Move If Zero",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_bneg_b","","Vector Bit Negate",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_bneg_h","","Vector Bit Negate",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_bneg_w","","Vector Bit Negate",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_bneg_d","","Vector Bit Negate",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_bnegi_b","","Immediate Bit Negate",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_bnegi_h","","Immediate Bit Negate",null,[[["i32"],["v8u16"]],["v8u16"]]],[5,"__msa_bnegi_w","","Immediate Bit Negate",null,[[["v4u32"],["i32"]],["v4u32"]]],[5,"__msa_bnegi_d","","Immediate Bit Negate",null,[[["v2u64"],["i32"]],["v2u64"]]],[5,"__msa_bnz_b","","Immediate Branch If All Elements Are Not Zero",null,[[["v16u8"]],["i32"]]],[5,"__msa_bnz_h","","Immediate Branch If All Elements Are Not Zero",null,[[["v8u16"]],["i32"]]],[5,"__msa_bnz_w","","Immediate Branch If All Elements Are Not Zero",null,[[["v4u32"]],["i32"]]],[5,"__msa_bnz_d","","Immediate Branch If All Elements Are Not Zero",null,[[["v2u64"]],["i32"]]],[5,"__msa_bnz_v","","Immediate Branch If Not Zero (At Least One Element of Any…",null,[[["v16u8"]],["i32"]]],[5,"__msa_bsel_v","","Vector Bit Select",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_bseli_b","","Immediate Bit Select",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_bset_b","","Vector Bit Set",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_bset_h","","Vector Bit Set",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_bset_w","","Vector Bit Set",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_bset_d","","Vector Bit Set",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_bseti_b","","Immediate Bit Set",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_bseti_h","","Immediate Bit Set",null,[[["i32"],["v8u16"]],["v8u16"]]],[5,"__msa_bseti_w","","Immediate Bit Set",null,[[["v4u32"],["i32"]],["v4u32"]]],[5,"__msa_bseti_d","","Immediate Bit Set",null,[[["v2u64"],["i32"]],["v2u64"]]],[5,"__msa_bz_b","","Immediate Branch If At Least One Element Is Zero",null,[[["v16u8"]],["i32"]]],[5,"__msa_bz_h","","Immediate Branch If At Least One Element Is Zero",null,[[["v8u16"]],["i32"]]],[5,"__msa_bz_w","","Immediate Branch If At Least One Element Is Zero",null,[[["v4u32"]],["i32"]]],[5,"__msa_bz_d","","Immediate Branch If At Least One Element Is Zero",null,[[["v2u64"]],["i32"]]],[5,"__msa_bz_v","","Immediate Branch If Zero (All Elements of Any Format Are…",null,[[["v16u8"]],["i32"]]],[5,"__msa_ceq_b","","Vector Compare Equal",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_ceq_h","","Vector Compare Equal",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_ceq_w","","Vector Compare Equal",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_ceq_d","","Vector Compare Equal",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_ceqi_b","","Immediate Compare Equal",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_ceqi_h","","Immediate Compare Equal",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_ceqi_w","","Immediate Compare Equal",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_ceqi_d","","Immediate Compare Equal",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_cfcmsa","","GPR Copy from MSA Control Register",null,[[["i32"]],["i32"]]],[5,"__msa_cle_s_b","","Vector Compare Signed Less Than or Equal",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_cle_s_h","","Vector Compare Signed Less Than or Equal",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_cle_s_w","","Vector Compare Signed Less Than or Equal",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_cle_s_d","","Vector Compare Signed Less Than or Equal",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_cle_u_b","","Vector Compare Unsigned Less Than or Equal",null,[[["v16u8"]],["v16i8"]]],[5,"__msa_cle_u_h","","Vector Compare Unsigned Less Than or Equal",null,[[["v8u16"]],["v8i16"]]],[5,"__msa_cle_u_w","","Vector Compare Unsigned Less Than or Equal",null,[[["v4u32"]],["v4i32"]]],[5,"__msa_cle_u_d","","Vector Compare Unsigned Less Than or Equal",null,[[["v2u64"]],["v2i64"]]],[5,"__msa_clei_s_b","","Immediate Compare Signed Less Than or Equal",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_clei_s_h","","Immediate Compare Signed Less Than or Equal",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_clei_s_w","","Immediate Compare Signed Less Than or Equal",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_clei_s_d","","Immediate Compare Signed Less Than or Equal",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_clei_u_b","","Immediate Compare Unsigned Less Than or Equal",null,[[["i32"],["v16u8"]],["v16i8"]]],[5,"__msa_clei_u_h","","Immediate Compare Unsigned Less Than or Equal",null,[[["i32"],["v8u16"]],["v8i16"]]],[5,"__msa_clei_u_w","","Immediate Compare Unsigned Less Than or Equal",null,[[["v4u32"],["i32"]],["v4i32"]]],[5,"__msa_clei_u_d","","Immediate Compare Unsigned Less Than or Equal",null,[[["v2u64"],["i32"]],["v2i64"]]],[5,"__msa_clt_s_b","","Vector Compare Signed Less Than",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_clt_s_h","","Vector Compare Signed Less Than",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_clt_s_w","","Vector Compare Signed Less Than",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_clt_s_d","","Vector Compare Signed Less Than",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_clt_u_b","","Vector Compare Unsigned Less Than",null,[[["v16u8"]],["v16i8"]]],[5,"__msa_clt_u_h","","Vector Compare Unsigned Less Than",null,[[["v8u16"]],["v8i16"]]],[5,"__msa_clt_u_w","","Vector Compare Unsigned Less Than",null,[[["v4u32"]],["v4i32"]]],[5,"__msa_clt_u_d","","Vector Compare Unsigned Less Than",null,[[["v2u64"]],["v2i64"]]],[5,"__msa_clti_s_b","","Immediate Compare Signed Less Than",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_clti_s_h","","Immediate Compare Signed Less Than",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_clti_s_w","","Immediate Compare Signed Less Than",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_clti_s_d","","Immediate Compare Signed Less Than",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_clti_u_b","","Immediate Compare Unsigned Less Than",null,[[["i32"],["v16u8"]],["v16i8"]]],[5,"__msa_clti_u_h","","Immediate Compare Unsigned Less Than",null,[[["i32"],["v8u16"]],["v8i16"]]],[5,"__msa_clti_u_w","","Immediate Compare Unsigned Less Than",null,[[["v4u32"],["i32"]],["v4i32"]]],[5,"__msa_clti_u_d","","Immediate Compare Unsigned Less Than",null,[[["v2u64"],["i32"]],["v2i64"]]],[5,"__msa_copy_s_b","","Element Copy to GPR Signed",null,[[["v16i8"],["i32"]],["i32"]]],[5,"__msa_copy_s_h","","Element Copy to GPR Signed",null,[[["v8i16"],["i32"]],["i32"]]],[5,"__msa_copy_s_w","","Element Copy to GPR Signed",null,[[["i32"],["v4i32"]],["i32"]]],[5,"__msa_copy_s_d","","Element Copy to GPR Signed",null,[[["v2i64"],["i32"]],["i64"]]],[5,"__msa_copy_u_b","","Element Copy to GPR Unsigned",null,[[["v16i8"],["i32"]],["u32"]]],[5,"__msa_copy_u_h","","Element Copy to GPR Unsigned",null,[[["v8i16"],["i32"]],["u32"]]],[5,"__msa_copy_u_w","","Element Copy to GPR Unsigned",null,[[["i32"],["v4i32"]],["u32"]]],[5,"__msa_copy_u_d","","Element Copy to GPR Unsigned",null,[[["v2i64"],["i32"]],["u64"]]],[5,"__msa_ctcmsa","","GPR Copy to MSA Control Register",null,[[["i32"]]]],[5,"__msa_div_s_b","","Vector Signed Divide",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_div_s_h","","Vector Signed Divide",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_div_s_w","","Vector Signed Divide",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_div_s_d","","Vector Signed Divide",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_div_u_b","","Vector Unsigned Divide",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_div_u_h","","Vector Unsigned Divide",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_div_u_w","","Vector Unsigned Divide",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_div_u_d","","Vector Unsigned Divide",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_dotp_s_h","","Vector Signed Dot Product",null,[[["v16i8"]],["v8i16"]]],[5,"__msa_dotp_s_w","","Vector Signed Dot Product",null,[[["v8i16"]],["v4i32"]]],[5,"__msa_dotp_s_d","","Vector Signed Dot Product",null,[[["v4i32"]],["v2i64"]]],[5,"__msa_dotp_u_h","","Vector Unsigned Dot Product",null,[[["v16u8"]],["v8u16"]]],[5,"__msa_dotp_u_w","","Vector Unsigned Dot Product",null,[[["v8u16"]],["v4u32"]]],[5,"__msa_dotp_u_d","","Vector Unsigned Dot Product",null,[[["v4u32"]],["v2u64"]]],[5,"__msa_dpadd_s_h","","Vector Signed Dot Product and Add",null,[[["v16i8"],["v8i16"]],["v8i16"]]],[5,"__msa_dpadd_s_w","","Vector Signed Dot Product and Add",null,[[["v8i16"],["v4i32"]],["v4i32"]]],[5,"__msa_dpadd_s_d","","Vector Signed Dot Product and Add",null,[[["v2i64"],["v4i32"]],["v2i64"]]],[5,"__msa_dpadd_u_h","","Vector Unsigned Dot Product and Add",null,[[["v16u8"],["v8u16"]],["v8u16"]]],[5,"__msa_dpadd_u_w","","Vector Unsigned Dot Product and Add",null,[[["v4u32"],["v8u16"]],["v4u32"]]],[5,"__msa_dpadd_u_d","","Vector Unsigned Dot Product and Add",null,[[["v4u32"],["v2u64"]],["v2u64"]]],[5,"__msa_dpsub_s_h","","Vector Signed Dot Product and Add",null,[[["v16i8"],["v8i16"]],["v8i16"]]],[5,"__msa_dpsub_s_w","","Vector Signed Dot Product and Add",null,[[["v8i16"],["v4i32"]],["v4i32"]]],[5,"__msa_dpsub_s_d","","Vector Signed Dot Product and Add",null,[[["v2i64"],["v4i32"]],["v2i64"]]],[5,"__msa_dpsub_u_h","","Vector Unsigned Dot Product and Add",null,[[["v8i16"],["v16u8"]],["v8i16"]]],[5,"__msa_dpsub_u_w","","Vector Unsigned Dot Product and Add",null,[[["v8u16"],["v4i32"]],["v4i32"]]],[5,"__msa_dpsub_u_d","","Vector Unsigned Dot Product and Add",null,[[["v4u32"],["v2i64"]],["v2i64"]]],[5,"__msa_fadd_w","","Vector Floating-Point Addition",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_fadd_d","","Vector Floating-Point Addition",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_fcaf_w","","Vector Floating-Point Quiet Compare Always False",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fcaf_d","","Vector Floating-Point Quiet Compare Always False",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fceq_w","","Vector Floating-Point Quiet Compare Equal",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fceq_d","","Vector Floating-Point Quiet Compare Equal",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fclass_w","","Vector Floating-Point Class Mask",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fclass_d","","Vector Floating-Point Class Mask",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fcle_w","","Vector Floating-Point Quiet Compare Less or Equal",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fcle_d","","Vector Floating-Point Quiet Compare Less or Equal",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fclt_w","","Vector Floating-Point Quiet Compare Less Than",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fclt_d","","Vector Floating-Point Quiet Compare Less Than",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fcne_w","","Vector Floating-Point Quiet Compare Not Equal",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fcne_d","","Vector Floating-Point Quiet Compare Not Equal",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fcor_w","","Vector Floating-Point Quiet Compare Ordered",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fcor_d","","Vector Floating-Point Quiet Compare Ordered",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fcueq_w","","Vector Floating-Point Quiet Compare Unordered or Equal",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fcueq_d","","Vector Floating-Point Quiet Compare Unordered or Equal",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fcule_w","","Vector Floating-Point Quiet Compare Unordered or Less or…",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fcule_d","","Vector Floating-Point Quiet Compare Unordered or Less or…",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fcult_w","","Vector Floating-Point Quiet Compare Unordered or Less Than",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fcult_d","","Vector Floating-Point Quiet Compare Unordered or Less Than",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fcun_w","","Vector Floating-Point Quiet Compare Unordered",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fcun_d","","Vector Floating-Point Quiet Compare Unordered",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fcune_w","","Vector Floating-Point Quiet Compare Unordered or Not Equal",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fcune_d","","Vector Floating-Point Quiet Compare Unordered or Not Equal",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fdiv_w","","Vector Floating-Point Division",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_fdiv_d","","Vector Floating-Point Division",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_fexdo_w","","Vector Floating-Point Down-Convert Interchange Format",null,[[["v2f64"]],["v4f32"]]],[5,"__msa_fexp2_w","","Vector Floating-Point Down-Convert Interchange Format",null,[[["v4i32"],["v4f32"]],["v4f32"]]],[5,"__msa_fexp2_d","","Vector Floating-Point Down-Convert Interchange Format",null,[[["v2i64"],["v2f64"]],["v2f64"]]],[5,"__msa_fexupl_d","","Vector Floating-Point Up-Convert Interchange Format Left",null,[[["v4f32"]],["v2f64"]]],[5,"__msa_fexupr_d","","Vector Floating-Point Up-Convert Interchange Format Left",null,[[["v4f32"]],["v2f64"]]],[5,"__msa_ffint_s_w","","Vector Floating-Point Round and Convert from Signed Integer",null,[[["v4i32"]],["v4f32"]]],[5,"__msa_ffint_s_d","","Vector Floating-Point Round and Convert from Signed Integer",null,[[["v2i64"]],["v2f64"]]],[5,"__msa_ffint_u_w","","Vector Floating-Point Round and Convert from Unsigned…",null,[[["v4u32"]],["v4f32"]]],[5,"__msa_ffint_u_d","","Vector Floating-Point Round and Convert from Unsigned…",null,[[["v2u64"]],["v2f64"]]],[5,"__msa_ffql_w","","Vector Floating-Point Convert from Fixed-Point Left",null,[[["v8i16"]],["v4f32"]]],[5,"__msa_ffql_d","","Vector Floating-Point Convert from Fixed-Point Left",null,[[["v4i32"]],["v2f64"]]],[5,"__msa_ffqr_w","","Vector Floating-Point Convert from Fixed-Point Left",null,[[["v8i16"]],["v4f32"]]],[5,"__msa_ffqr_d","","Vector Floating-Point Convert from Fixed-Point Left",null,[[["v4i32"]],["v2f64"]]],[5,"__msa_fill_b","","Vector Fill from GPR",null,[[["i32"]],["v16i8"]]],[5,"__msa_fill_h","","Vector Fill from GPR",null,[[["i32"]],["v8i16"]]],[5,"__msa_fill_w","","Vector Fill from GPR",null,[[["i32"]],["v4i32"]]],[5,"__msa_fill_d","","Vector Fill from GPR",null,[[["i64"]],["v2i64"]]],[5,"__msa_flog2_w","","Vector Floating-Point Base 2 Logarithm",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_flog2_d","","Vector Floating-Point Base 2 Logarithm",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_fmadd_w","","Vector Floating-Point Multiply-Add",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_fmadd_d","","Vector Floating-Point Multiply-Add",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_fmax_w","","Vector Floating-Point Maximum",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_fmax_d","","Vector Floating-Point Maximum",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_fmax_a_w","","Vector Floating-Point Maximum Based on Absolute Values",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_fmax_a_d","","Vector Floating-Point Maximum Based on Absolute Values",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_fmin_w","","Vector Floating-Point Minimum",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_fmin_d","","Vector Floating-Point Minimum",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_fmin_a_w","","Vector Floating-Point Minimum Based on Absolute Values",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_fmin_a_d","","Vector Floating-Point Minimum Based on Absolute Values",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_fmsub_w","","Vector Floating-Point Multiply-Sub",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_fmsub_d","","Vector Floating-Point Multiply-Sub",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_fmul_w","","Vector Floating-Point Multiplication",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_fmul_d","","Vector Floating-Point Multiplication",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_frint_w","","Vector Floating-Point Round to Integer",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_frint_d","","Vector Floating-Point Round to Integer",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_frcp_w","","Vector Approximate Floating-Point Reciprocal",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_frcp_d","","Vector Approximate Floating-Point Reciprocal",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_frsqrt_w","","Vector Approximate Floating-Point Reciprocal of Square Root",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_frsqrt_d","","Vector Approximate Floating-Point Reciprocal of Square Root",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_fsaf_w","","Vector Floating-Point Signaling Compare Always False",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fsaf_d","","Vector Floating-Point Signaling Compare Always False",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fseq_w","","Vector Floating-Point Signaling Compare Equal",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fseq_d","","Vector Floating-Point Signaling Compare Equal",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fsle_w","","Vector Floating-Point Signaling Compare Less or Equal",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fsle_d","","Vector Floating-Point Signaling Compare Less or Equal",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fslt_w","","Vector Floating-Point Signaling Compare Less Than",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fslt_d","","Vector Floating-Point Signaling Compare Less Than",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fsne_w","","Vector Floating-Point Signaling Compare Not Equal",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fsne_d","","Vector Floating-Point Signaling Compare Not Equal",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fsor_w","","Vector Floating-Point Signaling Compare Ordered",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fsor_d","","Vector Floating-Point Signaling Compare Ordered",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fsqrt_w","","Vector Floating-Point Square Root",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_fsqrt_d","","Vector Floating-Point Square Root",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_fsub_w","","Vector Floating-Point Subtraction",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_fsub_d","","Vector Floating-Point Subtraction",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_fsueq_w","","Vector Floating-Point Signaling Compare Ordered",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fsueq_d","","Vector Floating-Point Signaling Compare Ordered",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fsule_w","","Vector Floating-Point Signaling Compare Unordered or Less…",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fsule_d","","Vector Floating-Point Signaling Compare Unordered or Less…",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fsult_w","","Vector Floating-Point Signaling Compare Unordered or Less…",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fsult_d","","Vector Floating-Point Signaling Compare Unordered or Less…",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fsun_w","","Vector Floating-Point Signaling Compare Unordered",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fsun_d","","Vector Floating-Point Signaling Compare Unordered",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fsune_w","","Vector Floating-Point Signaling Compare Unordered or Not…",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fsune_d","","Vector Floating-Point Signaling Compare Unordered or Not…",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_ftint_s_w","","Vector Floating-Point Convert to Signed Integer",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_ftint_s_d","","Vector Floating-Point Convert to Signed Integer",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_ftint_u_w","","Vector Floating-Point Convert to Unsigned Integer",null,[[["v4f32"]],["v4u32"]]],[5,"__msa_ftint_u_d","","Vector Floating-Point Convert to Unsigned Integer",null,[[["v2f64"]],["v2u64"]]],[5,"__msa_ftq_h","","Vector Floating-Point Convert to Fixed-Point",null,[[["v4f32"]],["v8i16"]]],[5,"__msa_ftq_w","","Vector Floating-Point Convert to Fixed-Point",null,[[["v2f64"]],["v4i32"]]],[5,"__msa_ftrunc_s_w","","Vector Floating-Point Truncate and Convert to Signed Integer",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_ftrunc_s_d","","Vector Floating-Point Truncate and Convert to Signed Integer",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_ftrunc_u_w","","Vector Floating-Point Truncate and Convert to Unsigned…",null,[[["v4f32"]],["v4u32"]]],[5,"__msa_ftrunc_u_d","","Vector Floating-Point Truncate and Convert to Unsigned…",null,[[["v2f64"]],["v2u64"]]],[5,"__msa_hadd_s_h","","Vector Signed Horizontal Add",null,[[["v16i8"]],["v8i16"]]],[5,"__msa_hadd_s_w","","Vector Signed Horizontal Add",null,[[["v8i16"]],["v4i32"]]],[5,"__msa_hadd_s_d","","Vector Signed Horizontal Add",null,[[["v4i32"]],["v2i64"]]],[5,"__msa_hadd_u_h","","Vector Unsigned Horizontal Add",null,[[["v16u8"]],["v8u16"]]],[5,"__msa_hadd_u_w","","Vector Unsigned Horizontal Add",null,[[["v8u16"]],["v4u32"]]],[5,"__msa_hadd_u_d","","Vector Unsigned Horizontal Add",null,[[["v4u32"]],["v2u64"]]],[5,"__msa_hsub_s_h","","Vector Signed Horizontal Subtract",null,[[["v16i8"]],["v8i16"]]],[5,"__msa_hsub_s_w","","Vector Signed Horizontal Subtract",null,[[["v8i16"]],["v4i32"]]],[5,"__msa_hsub_s_d","","Vector Signed Horizontal Subtract",null,[[["v4i32"]],["v2i64"]]],[5,"__msa_hsub_u_h","","Vector Unsigned Horizontal Subtract",null,[[["v16u8"]],["v8i16"]]],[5,"__msa_hsub_u_w","","Vector Unsigned Horizontal Subtract",null,[[["v8u16"]],["v4i32"]]],[5,"__msa_hsub_u_d","","Vector Unsigned Horizontal Subtract",null,[[["v4u32"]],["v2i64"]]],[5,"__msa_ilvev_b","","Vector Interleave Even",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_ilvev_h","","Vector Interleave Even",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_ilvev_w","","Vector Interleave Even",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_ilvev_d","","Vector Interleave Even",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_ilvl_b","","Vector Interleave Left",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_ilvl_h","","Vector Interleave Left",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_ilvl_w","","Vector Interleave Left",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_ilvl_d","","Vector Interleave Left",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_ilvod_b","","Vector Interleave Odd",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_ilvod_h","","Vector Interleave Odd",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_ilvod_w","","Vector Interleave Odd",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_ilvod_d","","Vector Interleave Odd",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_ilvr_b","","Vector Interleave Right",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_ilvr_h","","Vector Interleave Right",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_ilvr_w","","Vector Interleave Right",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_ilvr_d","","Vector Interleave Right",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_insert_b","","GPR Insert Element",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_insert_h","","GPR Insert Element",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_insert_w","","GPR Insert Element",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_insert_d","","GPR Insert Element",null,[[["i64"],["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_insve_b","","Element Insert Element",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_insve_h","","Element Insert Element",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_insve_w","","Element Insert Element",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_insve_d","","Element Insert Element",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_ld_b","","Vector Load",null,[[["i32"]],["v16i8"]]],[5,"__msa_ld_h","","Vector Load",null,[[["i32"]],["v8i16"]]],[5,"__msa_ld_w","","Vector Load",null,[[["i32"]],["v4i32"]]],[5,"__msa_ld_d","","Vector Load",null,[[["i32"]],["v2i64"]]],[5,"__msa_ldi_b","","Immediate Load",null,[[["i32"]],["v16i8"]]],[5,"__msa_ldi_h","","Immediate Load",null,[[["i32"]],["v8i16"]]],[5,"__msa_ldi_w","","Immediate Load",null,[[["i32"]],["v4i32"]]],[5,"__msa_ldi_d","","Immediate Load",null,[[["i32"]],["v2i64"]]],[5,"__msa_madd_q_h","","Vector Fixed-Point Multiply and Add",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_madd_q_w","","Vector Fixed-Point Multiply and Add",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_maddr_q_h","","Vector Fixed-Point Multiply and Add Rounded",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_maddr_q_w","","Vector Fixed-Point Multiply and Add Rounded",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_maddv_b","","Vector Multiply and Add",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_maddv_h","","Vector Multiply and Add",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_maddv_w","","Vector Multiply and Add",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_maddv_d","","Vector Multiply and Add",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_max_a_b","","Vector Maximum Based on Absolute Values",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_max_a_h","","Vector Maximum Based on Absolute Values",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_max_a_w","","Vector Maximum Based on Absolute Values",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_max_a_d","","Vector Maximum Based on Absolute Values",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_max_s_b","","Vector Signed Maximum",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_max_s_h","","Vector Signed Maximum",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_max_s_w","","Vector Signed Maximum",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_max_s_d","","Vector Signed Maximum",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_max_u_b","","Vector Unsigned Maximum",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_max_u_h","","Vector Unsigned Maximum",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_max_u_w","","Vector Unsigned Maximum",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_max_u_d","","Vector Unsigned Maximum",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_maxi_s_b","","Immediate Signed Maximum",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_maxi_s_h","","Immediate Signed Maximum",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_maxi_s_w","","Immediate Signed Maximum",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_maxi_s_d","","Immediate Signed Maximum",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_maxi_u_b","","Immediate Unsigned Maximum",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_maxi_u_h","","Immediate Unsigned Maximum",null,[[["i32"],["v8u16"]],["v8u16"]]],[5,"__msa_maxi_u_w","","Immediate Unsigned Maximum",null,[[["v4u32"],["i32"]],["v4u32"]]],[5,"__msa_maxi_u_d","","Immediate Unsigned Maximum",null,[[["v2u64"],["i32"]],["v2u64"]]],[5,"__msa_min_a_b","","Vector Minimum Based on Absolute Value",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_min_a_h","","Vector Minimum Based on Absolute Value",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_min_a_w","","Vector Minimum Based on Absolute Value",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_min_a_d","","Vector Minimum Based on Absolute Value",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_min_s_b","","Vector Signed Minimum",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_min_s_h","","Vector Signed Minimum",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_min_s_w","","Vector Signed Minimum",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_min_s_d","","Vector Signed Minimum",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_mini_s_b","","Immediate Signed Minimum",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_mini_s_h","","Immediate Signed Minimum",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_mini_s_w","","Immediate Signed Minimum",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_mini_s_d","","Immediate Signed Minimum",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_min_u_b","","Vector Unsigned Minimum",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_min_u_h","","Vector Unsigned Minimum",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_min_u_w","","Vector Unsigned Minimum",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_min_u_d","","Vector Unsigned Minimum",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_mini_u_b","","Immediate Unsigned Minimum",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_mini_u_h","","Immediate Unsigned Minimum",null,[[["i32"],["v8u16"]],["v8u16"]]],[5,"__msa_mini_u_w","","Immediate Unsigned Minimum",null,[[["v4u32"],["i32"]],["v4u32"]]],[5,"__msa_mini_u_d","","Immediate Unsigned Minimum",null,[[["v2u64"],["i32"]],["v2u64"]]],[5,"__msa_mod_s_b","","Vector Signed Modulo",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_mod_s_h","","Vector Signed Modulo",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_mod_s_w","","Vector Signed Modulo",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_mod_s_d","","Vector Signed Modulo",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_mod_u_b","","Vector Unsigned Modulo",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_mod_u_h","","Vector Unsigned Modulo",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_mod_u_w","","Vector Unsigned Modulo",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_mod_u_d","","Vector Unsigned Modulo",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_move_v","","Vector Move",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_msub_q_h","","Vector Fixed-Point Multiply and Subtract",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_msub_q_w","","Vector Fixed-Point Multiply and Subtract",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_msubr_q_h","","Vector Fixed-Point Multiply and Subtract Rounded",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_msubr_q_w","","Vector Fixed-Point Multiply and Subtract Rounded",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_msubv_b","","Vector Multiply and Subtract",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_msubv_h","","Vector Multiply and Subtract",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_msubv_w","","Vector Multiply and Subtract",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_msubv_d","","Vector Multiply and Subtract",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_mul_q_h","","Vector Fixed-Point Multiply",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_mul_q_w","","Vector Fixed-Point Multiply",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_mulr_q_h","","Vector Fixed-Point Multiply Rounded",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_mulr_q_w","","Vector Fixed-Point Multiply Rounded",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_mulv_b","","Vector Multiply",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_mulv_h","","Vector Multiply",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_mulv_w","","Vector Multiply",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_mulv_d","","Vector Multiply",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_nloc_b","","Vector Leading Ones Count",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_nloc_h","","Vector Leading Ones Count",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_nloc_w","","Vector Leading Ones Count",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_nloc_d","","Vector Leading Ones Count",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_nlzc_b","","Vector Leading Zeros Count",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_nlzc_h","","Vector Leading Zeros Count",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_nlzc_w","","Vector Leading Zeros Count",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_nlzc_d","","Vector Leading Zeros Count",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_nor_v","","Vector Logical Negated Or",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_nori_b","","Immediate Logical Negated Or",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_or_v","","Vector Logical Or",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_ori_b","","Immediate Logical Or",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_pckev_b","","Vector Pack Even",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_pckev_h","","Vector Pack Even",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_pckev_w","","Vector Pack Even",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_pckev_d","","Vector Pack Even",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_pckod_b","","Vector Pack Odd",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_pckod_h","","Vector Pack Odd",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_pckod_w","","Vector Pack Odd",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_pckod_d","","Vector Pack Odd",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_pcnt_b","","Vector Population Count",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_pcnt_h","","Vector Population Count",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_pcnt_w","","Vector Population Count",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_pcnt_d","","Vector Population Count",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_sat_s_b","","Immediate Signed Saturate",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_sat_s_h","","Immediate Signed Saturate",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_sat_s_w","","Immediate Signed Saturate",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_sat_s_d","","Immediate Signed Saturate",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_sat_u_b","","Immediate Unsigned Saturate",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_sat_u_h","","Immediate Unsigned Saturate",null,[[["i32"],["v8u16"]],["v8u16"]]],[5,"__msa_sat_u_w","","Immediate Unsigned Saturate",null,[[["v4u32"],["i32"]],["v4u32"]]],[5,"__msa_sat_u_d","","Immediate Unsigned Saturate",null,[[["v2u64"],["i32"]],["v2u64"]]],[5,"__msa_shf_b","","Immediate Set Shuffle Elements",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_shf_h","","Immediate Set Shuffle Elements",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_shf_w","","Immediate Set Shuffle Elements",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_sld_b","","GPR Columns Slide",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_sld_h","","GPR Columns Slide",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_sld_w","","GPR Columns Slide",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_sld_d","","GPR Columns Slide",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_sldi_b","","Immediate Columns Slide",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_sldi_h","","Immediate Columns Slide",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_sldi_w","","Immediate Columns Slide",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_sldi_d","","Immediate Columns Slide",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_sll_b","","Vector Shift Left",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_sll_h","","Vector Shift Left",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_sll_w","","Vector Shift Left",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_sll_d","","Vector Shift Left",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_slli_b","","Immediate Shift Left",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_slli_h","","Immediate Shift Left",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_slli_w","","Immediate Shift Left",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_slli_d","","Immediate Shift Left",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_splat_b","","GPR Element Splat",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_splat_h","","GPR Element Splat",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_splat_w","","GPR Element Splat",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_splat_d","","GPR Element Splat",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_splati_b","","Immediate Element Splat",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_splati_h","","Immediate Element Splat",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_splati_w","","Immediate Element Splat",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_splati_d","","Immediate Element Splat",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_sra_b","","Vector Shift Right Arithmetic",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_sra_h","","Vector Shift Right Arithmetic",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_sra_w","","Vector Shift Right Arithmetic",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_sra_d","","Vector Shift Right Arithmetic",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_srai_b","","Immediate Shift Right Arithmetic",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_srai_h","","Immediate Shift Right Arithmetic",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_srai_w","","Immediate Shift Right Arithmetic",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_srai_d","","Immediate Shift Right Arithmetic",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_srar_b","","Vector Shift Right Arithmetic Rounded",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_srar_h","","Vector Shift Right Arithmetic Rounded",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_srar_w","","Vector Shift Right Arithmetic Rounded",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_srar_d","","Vector Shift Right Arithmetic Rounded",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_srari_b","","Immediate Shift Right Arithmetic Rounded",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_srari_h","","Immediate Shift Right Arithmetic Rounded",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_srari_w","","Immediate Shift Right Arithmetic Rounded",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_srari_d","","Immediate Shift Right Arithmetic Rounded",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_srl_b","","Vector Shift Right Logical",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_srl_h","","Vector Shift Right Logical",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_srl_w","","Vector Shift Right Logical",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_srl_d","","Vector Shift Right Logical",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_srli_b","","Immediate Shift Right Logical",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_srli_h","","Immediate Shift Right Logical",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_srli_w","","Immediate Shift Right Logical",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_srli_d","","Immediate Shift Right Logical",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_srlr_b","","Vector Shift Right Logical Rounded",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_srlr_h","","Vector Shift Right Logical Rounded",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_srlr_w","","Vector Shift Right Logical Rounded",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_srlr_d","","Vector Shift Right Logical Rounded",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_srlri_b","","Immediate Shift Right Logical Rounded",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_srlri_h","","Immediate Shift Right Logical Rounded",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_srlri_w","","Immediate Shift Right Logical Rounded",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_srlri_d","","Immediate Shift Right Logical Rounded",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_st_b","","Vector Store",null,[[["v16i8"],["i32"]]]],[5,"__msa_st_h","","Vector Store",null,[[["v8i16"],["i32"]]]],[5,"__msa_st_w","","Vector Store",null,[[["i32"],["v4i32"]]]],[5,"__msa_st_d","","Vector Store",null,[[["v2i64"],["i32"]]]],[5,"__msa_subs_s_b","","Vector Signed Saturated Subtract of Signed Values",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_subs_s_h","","Vector Signed Saturated Subtract of Signed Values",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_subs_s_w","","Vector Signed Saturated Subtract of Signed Values",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_subs_s_d","","Vector Signed Saturated Subtract of Signed Values",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_subs_u_b","","Vector Unsigned Saturated Subtract of Unsigned Values",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_subs_u_h","","Vector Unsigned Saturated Subtract of Unsigned Values",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_subs_u_w","","Vector Unsigned Saturated Subtract of Unsigned Values",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_subs_u_d","","Vector Unsigned Saturated Subtract of Unsigned Values",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_subsus_u_b","","Vector Unsigned Saturated Subtract of Signed from Unsigned",null,[[["v16i8"],["v16u8"]],["v16u8"]]],[5,"__msa_subsus_u_h","","Vector Unsigned Saturated Subtract of Signed from Unsigned",null,[[["v8i16"],["v8u16"]],["v8u16"]]],[5,"__msa_subsus_u_w","","Vector Unsigned Saturated Subtract of Signed from Unsigned",null,[[["v4u32"],["v4i32"]],["v4u32"]]],[5,"__msa_subsus_u_d","","Vector Unsigned Saturated Subtract of Signed from Unsigned",null,[[["v2u64"],["v2i64"]],["v2u64"]]],[5,"__msa_subsuu_s_b","","Vector Signed Saturated Subtract of Unsigned Values",null,[[["v16u8"]],["v16i8"]]],[5,"__msa_subsuu_s_h","","Vector Signed Saturated Subtract of Unsigned Values",null,[[["v8u16"]],["v8i16"]]],[5,"__msa_subsuu_s_w","","Vector Signed Saturated Subtract of Unsigned Values",null,[[["v4u32"]],["v4i32"]]],[5,"__msa_subsuu_s_d","","Vector Signed Saturated Subtract of Unsigned Values",null,[[["v2u64"]],["v2i64"]]],[5,"__msa_subv_b","","Vector Subtract",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_subv_h","","Vector Subtract",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_subv_w","","Vector Subtract",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_subv_d","","Vector Subtract",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_subvi_b","","Immediate Subtract",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_subvi_h","","Immediate Subtract",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_subvi_w","","Immediate Subtract",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_subvi_d","","Immediate Subtract",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_vshf_b","","Vector Data Preserving Shuffle",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_vshf_h","","Vector Data Preserving Shuffle",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_vshf_w","","Vector Data Preserving Shuffle",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_vshf_d","","Vector Data Preserving Shuffle",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_xor_v","","Vector Logical Exclusive Or",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_xori_b","","Immediate Logical Exclusive Or",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"break_","","Generates the trap instruction `BREAK`",null,[[]]],[0,"mips64","core::arch","Platform-specific intrinsics for the `mips64` platform.",null,null],[3,"v16i8","core::arch::mips64","",null,null],[3,"v8i16","","",null,null],[3,"v4i32","","",null,null],[3,"v2i64","","",null,null],[3,"v16u8","","",null,null],[3,"v8u16","","",null,null],[3,"v4u32","","",null,null],[3,"v2u64","","",null,null],[3,"v4f32","","",null,null],[3,"v2f64","","",null,null],[5,"__msa_add_a_b","","Vector Add Absolute Values.",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_add_a_h","","Vector Add Absolute Values",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_add_a_w","","Vector Add Absolute Values",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_add_a_d","","Vector Add Absolute Values",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_adds_a_b","","Signed Saturated Vector Saturated Add of Absolute Values",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_adds_a_h","","Vector Saturated Add of Absolute Values",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_adds_a_w","","Vector Saturated Add of Absolute Values",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_adds_a_d","","Vector Saturated Add of Absolute Values",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_adds_s_b","","Vector Signed Saturated Add of Signed Values",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_adds_s_h","","Vector Signed Saturated Add of Signed Values",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_adds_s_w","","Vector Signed Saturated Add of Signed Values",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_adds_s_d","","Vector Signed Saturated Add of Signed Values",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_adds_u_b","","Vector Unsigned Saturated Add of Unsigned Values",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_adds_u_h","","Vector Unsigned Saturated Add of Unsigned Values",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_adds_u_w","","Vector Unsigned Saturated Add of Unsigned Values",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_adds_u_d","","Vector Unsigned Saturated Add of Unsigned Values",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_addv_b","","Vector Add",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_addv_h","","Vector Add",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_addv_w","","Vector Add",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_addv_d","","Vector Add",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_addvi_b","","Immediate Add",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_addvi_h","","Immediate Add",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_addvi_w","","Immediate Add",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_addvi_d","","Immediate Add",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_and_v","","Vector Logical And",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_andi_b","","Immediate Logical And",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_asub_s_b","","Vector Absolute Values of Signed Subtract",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_asub_s_h","","Vector Absolute Values of Signed Subtract",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_asub_s_w","","Vector Absolute Values of Signed Subtract",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_asub_s_d","","Vector Absolute Values of Signed Subtract",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_asub_u_b","","Vector Absolute Values of Unsigned Subtract",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_asub_u_h","","Vector Absolute Values of Unsigned Subtract",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_asub_u_w","","Vector Absolute Values of Unsigned Subtract",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_asub_u_d","","Vector Absolute Values of Unsigned Subtract",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_ave_s_b","","Vector Signed Average",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_ave_s_h","","Vector Signed Average",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_ave_s_w","","Vector Signed Average",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_ave_s_d","","Vector Signed Average",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_ave_u_b","","Vector Unsigned Average",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_ave_u_h","","Vector Unsigned Average",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_ave_u_w","","Vector Unsigned Average",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_ave_u_d","","Vector Unsigned Average",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_aver_s_b","","Vector Signed Average Rounded",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_aver_s_h","","Vector Signed Average Rounded",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_aver_s_w","","Vector Signed Average Rounded",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_aver_s_d","","Vector Signed Average Rounded",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_aver_u_b","","Vector Unsigned Average Rounded",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_aver_u_h","","Vector Unsigned Average Rounded",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_aver_u_w","","Vector Unsigned Average Rounded",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_aver_u_d","","Vector Unsigned Average Rounded",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_bclr_b","","Vector Bit Clear",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_bclr_h","","Vector Bit Clear",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_bclr_w","","Vector Bit Clear",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_bclr_d","","Vector Bit Clear",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_bclri_b","","Immediate Bit Clear",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_bclri_h","","Immediate Bit Clear",null,[[["i32"],["v8u16"]],["v8u16"]]],[5,"__msa_bclri_w","","Immediate Bit Clear",null,[[["v4u32"],["i32"]],["v4u32"]]],[5,"__msa_bclri_d","","Immediate Bit Clear",null,[[["v2u64"],["i32"]],["v2u64"]]],[5,"__msa_binsl_b","","Vector Bit Insert Left",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_binsl_h","","Vector Bit Insert Left",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_binsl_w","","Vector Bit Insert Left",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_binsl_d","","Vector Bit Insert Left",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_binsli_b","","Immediate Bit Insert Left",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_binsli_h","","Immediate Bit Insert Left",null,[[["i32"],["v8u16"]],["v8u16"]]],[5,"__msa_binsli_w","","Immediate Bit Insert Left",null,[[["v4u32"],["i32"]],["v4u32"]]],[5,"__msa_binsli_d","","Immediate Bit Insert Left",null,[[["v2u64"],["i32"]],["v2u64"]]],[5,"__msa_binsr_b","","Vector Bit Insert Right",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_binsr_h","","Vector Bit Insert Right",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_binsr_w","","Vector Bit Insert Right",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_binsr_d","","Vector Bit Insert Right",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_binsri_b","","Immediate Bit Insert Right",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_binsri_h","","Immediate Bit Insert Right",null,[[["i32"],["v8u16"]],["v8u16"]]],[5,"__msa_binsri_w","","Immediate Bit Insert Right",null,[[["v4u32"],["i32"]],["v4u32"]]],[5,"__msa_binsri_d","","Immediate Bit Insert Right",null,[[["v2u64"],["i32"]],["v2u64"]]],[5,"__msa_bmnz_v","","Vector Bit Move If Not Zero",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_bmnzi_b","","Immediate Bit Move If Not Zero",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_bmz_v","","Vector Bit Move If Zero",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_bmzi_b","","Immediate Bit Move If Zero",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_bneg_b","","Vector Bit Negate",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_bneg_h","","Vector Bit Negate",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_bneg_w","","Vector Bit Negate",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_bneg_d","","Vector Bit Negate",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_bnegi_b","","Immediate Bit Negate",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_bnegi_h","","Immediate Bit Negate",null,[[["i32"],["v8u16"]],["v8u16"]]],[5,"__msa_bnegi_w","","Immediate Bit Negate",null,[[["v4u32"],["i32"]],["v4u32"]]],[5,"__msa_bnegi_d","","Immediate Bit Negate",null,[[["v2u64"],["i32"]],["v2u64"]]],[5,"__msa_bnz_b","","Immediate Branch If All Elements Are Not Zero",null,[[["v16u8"]],["i32"]]],[5,"__msa_bnz_h","","Immediate Branch If All Elements Are Not Zero",null,[[["v8u16"]],["i32"]]],[5,"__msa_bnz_w","","Immediate Branch If All Elements Are Not Zero",null,[[["v4u32"]],["i32"]]],[5,"__msa_bnz_d","","Immediate Branch If All Elements Are Not Zero",null,[[["v2u64"]],["i32"]]],[5,"__msa_bnz_v","","Immediate Branch If Not Zero (At Least One Element of Any…",null,[[["v16u8"]],["i32"]]],[5,"__msa_bsel_v","","Vector Bit Select",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_bseli_b","","Immediate Bit Select",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_bset_b","","Vector Bit Set",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_bset_h","","Vector Bit Set",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_bset_w","","Vector Bit Set",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_bset_d","","Vector Bit Set",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_bseti_b","","Immediate Bit Set",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_bseti_h","","Immediate Bit Set",null,[[["i32"],["v8u16"]],["v8u16"]]],[5,"__msa_bseti_w","","Immediate Bit Set",null,[[["v4u32"],["i32"]],["v4u32"]]],[5,"__msa_bseti_d","","Immediate Bit Set",null,[[["v2u64"],["i32"]],["v2u64"]]],[5,"__msa_bz_b","","Immediate Branch If At Least One Element Is Zero",null,[[["v16u8"]],["i32"]]],[5,"__msa_bz_h","","Immediate Branch If At Least One Element Is Zero",null,[[["v8u16"]],["i32"]]],[5,"__msa_bz_w","","Immediate Branch If At Least One Element Is Zero",null,[[["v4u32"]],["i32"]]],[5,"__msa_bz_d","","Immediate Branch If At Least One Element Is Zero",null,[[["v2u64"]],["i32"]]],[5,"__msa_bz_v","","Immediate Branch If Zero (All Elements of Any Format Are…",null,[[["v16u8"]],["i32"]]],[5,"__msa_ceq_b","","Vector Compare Equal",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_ceq_h","","Vector Compare Equal",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_ceq_w","","Vector Compare Equal",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_ceq_d","","Vector Compare Equal",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_ceqi_b","","Immediate Compare Equal",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_ceqi_h","","Immediate Compare Equal",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_ceqi_w","","Immediate Compare Equal",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_ceqi_d","","Immediate Compare Equal",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_cfcmsa","","GPR Copy from MSA Control Register",null,[[["i32"]],["i32"]]],[5,"__msa_cle_s_b","","Vector Compare Signed Less Than or Equal",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_cle_s_h","","Vector Compare Signed Less Than or Equal",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_cle_s_w","","Vector Compare Signed Less Than or Equal",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_cle_s_d","","Vector Compare Signed Less Than or Equal",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_cle_u_b","","Vector Compare Unsigned Less Than or Equal",null,[[["v16u8"]],["v16i8"]]],[5,"__msa_cle_u_h","","Vector Compare Unsigned Less Than or Equal",null,[[["v8u16"]],["v8i16"]]],[5,"__msa_cle_u_w","","Vector Compare Unsigned Less Than or Equal",null,[[["v4u32"]],["v4i32"]]],[5,"__msa_cle_u_d","","Vector Compare Unsigned Less Than or Equal",null,[[["v2u64"]],["v2i64"]]],[5,"__msa_clei_s_b","","Immediate Compare Signed Less Than or Equal",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_clei_s_h","","Immediate Compare Signed Less Than or Equal",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_clei_s_w","","Immediate Compare Signed Less Than or Equal",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_clei_s_d","","Immediate Compare Signed Less Than or Equal",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_clei_u_b","","Immediate Compare Unsigned Less Than or Equal",null,[[["i32"],["v16u8"]],["v16i8"]]],[5,"__msa_clei_u_h","","Immediate Compare Unsigned Less Than or Equal",null,[[["i32"],["v8u16"]],["v8i16"]]],[5,"__msa_clei_u_w","","Immediate Compare Unsigned Less Than or Equal",null,[[["v4u32"],["i32"]],["v4i32"]]],[5,"__msa_clei_u_d","","Immediate Compare Unsigned Less Than or Equal",null,[[["v2u64"],["i32"]],["v2i64"]]],[5,"__msa_clt_s_b","","Vector Compare Signed Less Than",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_clt_s_h","","Vector Compare Signed Less Than",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_clt_s_w","","Vector Compare Signed Less Than",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_clt_s_d","","Vector Compare Signed Less Than",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_clt_u_b","","Vector Compare Unsigned Less Than",null,[[["v16u8"]],["v16i8"]]],[5,"__msa_clt_u_h","","Vector Compare Unsigned Less Than",null,[[["v8u16"]],["v8i16"]]],[5,"__msa_clt_u_w","","Vector Compare Unsigned Less Than",null,[[["v4u32"]],["v4i32"]]],[5,"__msa_clt_u_d","","Vector Compare Unsigned Less Than",null,[[["v2u64"]],["v2i64"]]],[5,"__msa_clti_s_b","","Immediate Compare Signed Less Than",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_clti_s_h","","Immediate Compare Signed Less Than",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_clti_s_w","","Immediate Compare Signed Less Than",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_clti_s_d","","Immediate Compare Signed Less Than",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_clti_u_b","","Immediate Compare Unsigned Less Than",null,[[["i32"],["v16u8"]],["v16i8"]]],[5,"__msa_clti_u_h","","Immediate Compare Unsigned Less Than",null,[[["i32"],["v8u16"]],["v8i16"]]],[5,"__msa_clti_u_w","","Immediate Compare Unsigned Less Than",null,[[["v4u32"],["i32"]],["v4i32"]]],[5,"__msa_clti_u_d","","Immediate Compare Unsigned Less Than",null,[[["v2u64"],["i32"]],["v2i64"]]],[5,"__msa_copy_s_b","","Element Copy to GPR Signed",null,[[["v16i8"],["i32"]],["i32"]]],[5,"__msa_copy_s_h","","Element Copy to GPR Signed",null,[[["v8i16"],["i32"]],["i32"]]],[5,"__msa_copy_s_w","","Element Copy to GPR Signed",null,[[["i32"],["v4i32"]],["i32"]]],[5,"__msa_copy_s_d","","Element Copy to GPR Signed",null,[[["v2i64"],["i32"]],["i64"]]],[5,"__msa_copy_u_b","","Element Copy to GPR Unsigned",null,[[["v16i8"],["i32"]],["u32"]]],[5,"__msa_copy_u_h","","Element Copy to GPR Unsigned",null,[[["v8i16"],["i32"]],["u32"]]],[5,"__msa_copy_u_w","","Element Copy to GPR Unsigned",null,[[["i32"],["v4i32"]],["u32"]]],[5,"__msa_copy_u_d","","Element Copy to GPR Unsigned",null,[[["v2i64"],["i32"]],["u64"]]],[5,"__msa_ctcmsa","","GPR Copy to MSA Control Register",null,[[["i32"]]]],[5,"__msa_div_s_b","","Vector Signed Divide",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_div_s_h","","Vector Signed Divide",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_div_s_w","","Vector Signed Divide",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_div_s_d","","Vector Signed Divide",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_div_u_b","","Vector Unsigned Divide",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_div_u_h","","Vector Unsigned Divide",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_div_u_w","","Vector Unsigned Divide",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_div_u_d","","Vector Unsigned Divide",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_dotp_s_h","","Vector Signed Dot Product",null,[[["v16i8"]],["v8i16"]]],[5,"__msa_dotp_s_w","","Vector Signed Dot Product",null,[[["v8i16"]],["v4i32"]]],[5,"__msa_dotp_s_d","","Vector Signed Dot Product",null,[[["v4i32"]],["v2i64"]]],[5,"__msa_dotp_u_h","","Vector Unsigned Dot Product",null,[[["v16u8"]],["v8u16"]]],[5,"__msa_dotp_u_w","","Vector Unsigned Dot Product",null,[[["v8u16"]],["v4u32"]]],[5,"__msa_dotp_u_d","","Vector Unsigned Dot Product",null,[[["v4u32"]],["v2u64"]]],[5,"__msa_dpadd_s_h","","Vector Signed Dot Product and Add",null,[[["v16i8"],["v8i16"]],["v8i16"]]],[5,"__msa_dpadd_s_w","","Vector Signed Dot Product and Add",null,[[["v8i16"],["v4i32"]],["v4i32"]]],[5,"__msa_dpadd_s_d","","Vector Signed Dot Product and Add",null,[[["v2i64"],["v4i32"]],["v2i64"]]],[5,"__msa_dpadd_u_h","","Vector Unsigned Dot Product and Add",null,[[["v16u8"],["v8u16"]],["v8u16"]]],[5,"__msa_dpadd_u_w","","Vector Unsigned Dot Product and Add",null,[[["v4u32"],["v8u16"]],["v4u32"]]],[5,"__msa_dpadd_u_d","","Vector Unsigned Dot Product and Add",null,[[["v4u32"],["v2u64"]],["v2u64"]]],[5,"__msa_dpsub_s_h","","Vector Signed Dot Product and Add",null,[[["v16i8"],["v8i16"]],["v8i16"]]],[5,"__msa_dpsub_s_w","","Vector Signed Dot Product and Add",null,[[["v8i16"],["v4i32"]],["v4i32"]]],[5,"__msa_dpsub_s_d","","Vector Signed Dot Product and Add",null,[[["v2i64"],["v4i32"]],["v2i64"]]],[5,"__msa_dpsub_u_h","","Vector Unsigned Dot Product and Add",null,[[["v8i16"],["v16u8"]],["v8i16"]]],[5,"__msa_dpsub_u_w","","Vector Unsigned Dot Product and Add",null,[[["v8u16"],["v4i32"]],["v4i32"]]],[5,"__msa_dpsub_u_d","","Vector Unsigned Dot Product and Add",null,[[["v4u32"],["v2i64"]],["v2i64"]]],[5,"__msa_fadd_w","","Vector Floating-Point Addition",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_fadd_d","","Vector Floating-Point Addition",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_fcaf_w","","Vector Floating-Point Quiet Compare Always False",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fcaf_d","","Vector Floating-Point Quiet Compare Always False",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fceq_w","","Vector Floating-Point Quiet Compare Equal",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fceq_d","","Vector Floating-Point Quiet Compare Equal",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fclass_w","","Vector Floating-Point Class Mask",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fclass_d","","Vector Floating-Point Class Mask",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fcle_w","","Vector Floating-Point Quiet Compare Less or Equal",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fcle_d","","Vector Floating-Point Quiet Compare Less or Equal",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fclt_w","","Vector Floating-Point Quiet Compare Less Than",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fclt_d","","Vector Floating-Point Quiet Compare Less Than",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fcne_w","","Vector Floating-Point Quiet Compare Not Equal",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fcne_d","","Vector Floating-Point Quiet Compare Not Equal",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fcor_w","","Vector Floating-Point Quiet Compare Ordered",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fcor_d","","Vector Floating-Point Quiet Compare Ordered",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fcueq_w","","Vector Floating-Point Quiet Compare Unordered or Equal",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fcueq_d","","Vector Floating-Point Quiet Compare Unordered or Equal",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fcule_w","","Vector Floating-Point Quiet Compare Unordered or Less or…",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fcule_d","","Vector Floating-Point Quiet Compare Unordered or Less or…",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fcult_w","","Vector Floating-Point Quiet Compare Unordered or Less Than",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fcult_d","","Vector Floating-Point Quiet Compare Unordered or Less Than",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fcun_w","","Vector Floating-Point Quiet Compare Unordered",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fcun_d","","Vector Floating-Point Quiet Compare Unordered",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fcune_w","","Vector Floating-Point Quiet Compare Unordered or Not Equal",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fcune_d","","Vector Floating-Point Quiet Compare Unordered or Not Equal",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fdiv_w","","Vector Floating-Point Division",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_fdiv_d","","Vector Floating-Point Division",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_fexdo_w","","Vector Floating-Point Down-Convert Interchange Format",null,[[["v2f64"]],["v4f32"]]],[5,"__msa_fexp2_w","","Vector Floating-Point Down-Convert Interchange Format",null,[[["v4i32"],["v4f32"]],["v4f32"]]],[5,"__msa_fexp2_d","","Vector Floating-Point Down-Convert Interchange Format",null,[[["v2i64"],["v2f64"]],["v2f64"]]],[5,"__msa_fexupl_d","","Vector Floating-Point Up-Convert Interchange Format Left",null,[[["v4f32"]],["v2f64"]]],[5,"__msa_fexupr_d","","Vector Floating-Point Up-Convert Interchange Format Left",null,[[["v4f32"]],["v2f64"]]],[5,"__msa_ffint_s_w","","Vector Floating-Point Round and Convert from Signed Integer",null,[[["v4i32"]],["v4f32"]]],[5,"__msa_ffint_s_d","","Vector Floating-Point Round and Convert from Signed Integer",null,[[["v2i64"]],["v2f64"]]],[5,"__msa_ffint_u_w","","Vector Floating-Point Round and Convert from Unsigned…",null,[[["v4u32"]],["v4f32"]]],[5,"__msa_ffint_u_d","","Vector Floating-Point Round and Convert from Unsigned…",null,[[["v2u64"]],["v2f64"]]],[5,"__msa_ffql_w","","Vector Floating-Point Convert from Fixed-Point Left",null,[[["v8i16"]],["v4f32"]]],[5,"__msa_ffql_d","","Vector Floating-Point Convert from Fixed-Point Left",null,[[["v4i32"]],["v2f64"]]],[5,"__msa_ffqr_w","","Vector Floating-Point Convert from Fixed-Point Left",null,[[["v8i16"]],["v4f32"]]],[5,"__msa_ffqr_d","","Vector Floating-Point Convert from Fixed-Point Left",null,[[["v4i32"]],["v2f64"]]],[5,"__msa_fill_b","","Vector Fill from GPR",null,[[["i32"]],["v16i8"]]],[5,"__msa_fill_h","","Vector Fill from GPR",null,[[["i32"]],["v8i16"]]],[5,"__msa_fill_w","","Vector Fill from GPR",null,[[["i32"]],["v4i32"]]],[5,"__msa_fill_d","","Vector Fill from GPR",null,[[["i64"]],["v2i64"]]],[5,"__msa_flog2_w","","Vector Floating-Point Base 2 Logarithm",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_flog2_d","","Vector Floating-Point Base 2 Logarithm",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_fmadd_w","","Vector Floating-Point Multiply-Add",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_fmadd_d","","Vector Floating-Point Multiply-Add",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_fmax_w","","Vector Floating-Point Maximum",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_fmax_d","","Vector Floating-Point Maximum",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_fmax_a_w","","Vector Floating-Point Maximum Based on Absolute Values",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_fmax_a_d","","Vector Floating-Point Maximum Based on Absolute Values",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_fmin_w","","Vector Floating-Point Minimum",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_fmin_d","","Vector Floating-Point Minimum",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_fmin_a_w","","Vector Floating-Point Minimum Based on Absolute Values",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_fmin_a_d","","Vector Floating-Point Minimum Based on Absolute Values",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_fmsub_w","","Vector Floating-Point Multiply-Sub",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_fmsub_d","","Vector Floating-Point Multiply-Sub",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_fmul_w","","Vector Floating-Point Multiplication",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_fmul_d","","Vector Floating-Point Multiplication",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_frint_w","","Vector Floating-Point Round to Integer",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_frint_d","","Vector Floating-Point Round to Integer",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_frcp_w","","Vector Approximate Floating-Point Reciprocal",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_frcp_d","","Vector Approximate Floating-Point Reciprocal",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_frsqrt_w","","Vector Approximate Floating-Point Reciprocal of Square Root",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_frsqrt_d","","Vector Approximate Floating-Point Reciprocal of Square Root",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_fsaf_w","","Vector Floating-Point Signaling Compare Always False",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fsaf_d","","Vector Floating-Point Signaling Compare Always False",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fseq_w","","Vector Floating-Point Signaling Compare Equal",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fseq_d","","Vector Floating-Point Signaling Compare Equal",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fsle_w","","Vector Floating-Point Signaling Compare Less or Equal",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fsle_d","","Vector Floating-Point Signaling Compare Less or Equal",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fslt_w","","Vector Floating-Point Signaling Compare Less Than",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fslt_d","","Vector Floating-Point Signaling Compare Less Than",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fsne_w","","Vector Floating-Point Signaling Compare Not Equal",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fsne_d","","Vector Floating-Point Signaling Compare Not Equal",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fsor_w","","Vector Floating-Point Signaling Compare Ordered",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fsor_d","","Vector Floating-Point Signaling Compare Ordered",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fsqrt_w","","Vector Floating-Point Square Root",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_fsqrt_d","","Vector Floating-Point Square Root",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_fsub_w","","Vector Floating-Point Subtraction",null,[[["v4f32"]],["v4f32"]]],[5,"__msa_fsub_d","","Vector Floating-Point Subtraction",null,[[["v2f64"]],["v2f64"]]],[5,"__msa_fsueq_w","","Vector Floating-Point Signaling Compare Ordered",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fsueq_d","","Vector Floating-Point Signaling Compare Ordered",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fsule_w","","Vector Floating-Point Signaling Compare Unordered or Less…",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fsule_d","","Vector Floating-Point Signaling Compare Unordered or Less…",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fsult_w","","Vector Floating-Point Signaling Compare Unordered or Less…",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fsult_d","","Vector Floating-Point Signaling Compare Unordered or Less…",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fsun_w","","Vector Floating-Point Signaling Compare Unordered",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fsun_d","","Vector Floating-Point Signaling Compare Unordered",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_fsune_w","","Vector Floating-Point Signaling Compare Unordered or Not…",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_fsune_d","","Vector Floating-Point Signaling Compare Unordered or Not…",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_ftint_s_w","","Vector Floating-Point Convert to Signed Integer",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_ftint_s_d","","Vector Floating-Point Convert to Signed Integer",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_ftint_u_w","","Vector Floating-Point Convert to Unsigned Integer",null,[[["v4f32"]],["v4u32"]]],[5,"__msa_ftint_u_d","","Vector Floating-Point Convert to Unsigned Integer",null,[[["v2f64"]],["v2u64"]]],[5,"__msa_ftq_h","","Vector Floating-Point Convert to Fixed-Point",null,[[["v4f32"]],["v8i16"]]],[5,"__msa_ftq_w","","Vector Floating-Point Convert to Fixed-Point",null,[[["v2f64"]],["v4i32"]]],[5,"__msa_ftrunc_s_w","","Vector Floating-Point Truncate and Convert to Signed Integer",null,[[["v4f32"]],["v4i32"]]],[5,"__msa_ftrunc_s_d","","Vector Floating-Point Truncate and Convert to Signed Integer",null,[[["v2f64"]],["v2i64"]]],[5,"__msa_ftrunc_u_w","","Vector Floating-Point Truncate and Convert to Unsigned…",null,[[["v4f32"]],["v4u32"]]],[5,"__msa_ftrunc_u_d","","Vector Floating-Point Truncate and Convert to Unsigned…",null,[[["v2f64"]],["v2u64"]]],[5,"__msa_hadd_s_h","","Vector Signed Horizontal Add",null,[[["v16i8"]],["v8i16"]]],[5,"__msa_hadd_s_w","","Vector Signed Horizontal Add",null,[[["v8i16"]],["v4i32"]]],[5,"__msa_hadd_s_d","","Vector Signed Horizontal Add",null,[[["v4i32"]],["v2i64"]]],[5,"__msa_hadd_u_h","","Vector Unsigned Horizontal Add",null,[[["v16u8"]],["v8u16"]]],[5,"__msa_hadd_u_w","","Vector Unsigned Horizontal Add",null,[[["v8u16"]],["v4u32"]]],[5,"__msa_hadd_u_d","","Vector Unsigned Horizontal Add",null,[[["v4u32"]],["v2u64"]]],[5,"__msa_hsub_s_h","","Vector Signed Horizontal Subtract",null,[[["v16i8"]],["v8i16"]]],[5,"__msa_hsub_s_w","","Vector Signed Horizontal Subtract",null,[[["v8i16"]],["v4i32"]]],[5,"__msa_hsub_s_d","","Vector Signed Horizontal Subtract",null,[[["v4i32"]],["v2i64"]]],[5,"__msa_hsub_u_h","","Vector Unsigned Horizontal Subtract",null,[[["v16u8"]],["v8i16"]]],[5,"__msa_hsub_u_w","","Vector Unsigned Horizontal Subtract",null,[[["v8u16"]],["v4i32"]]],[5,"__msa_hsub_u_d","","Vector Unsigned Horizontal Subtract",null,[[["v4u32"]],["v2i64"]]],[5,"__msa_ilvev_b","","Vector Interleave Even",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_ilvev_h","","Vector Interleave Even",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_ilvev_w","","Vector Interleave Even",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_ilvev_d","","Vector Interleave Even",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_ilvl_b","","Vector Interleave Left",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_ilvl_h","","Vector Interleave Left",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_ilvl_w","","Vector Interleave Left",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_ilvl_d","","Vector Interleave Left",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_ilvod_b","","Vector Interleave Odd",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_ilvod_h","","Vector Interleave Odd",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_ilvod_w","","Vector Interleave Odd",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_ilvod_d","","Vector Interleave Odd",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_ilvr_b","","Vector Interleave Right",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_ilvr_h","","Vector Interleave Right",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_ilvr_w","","Vector Interleave Right",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_ilvr_d","","Vector Interleave Right",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_insert_b","","GPR Insert Element",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_insert_h","","GPR Insert Element",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_insert_w","","GPR Insert Element",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_insert_d","","GPR Insert Element",null,[[["i64"],["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_insve_b","","Element Insert Element",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_insve_h","","Element Insert Element",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_insve_w","","Element Insert Element",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_insve_d","","Element Insert Element",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_ld_b","","Vector Load",null,[[["i32"]],["v16i8"]]],[5,"__msa_ld_h","","Vector Load",null,[[["i32"]],["v8i16"]]],[5,"__msa_ld_w","","Vector Load",null,[[["i32"]],["v4i32"]]],[5,"__msa_ld_d","","Vector Load",null,[[["i32"]],["v2i64"]]],[5,"__msa_ldi_b","","Immediate Load",null,[[["i32"]],["v16i8"]]],[5,"__msa_ldi_h","","Immediate Load",null,[[["i32"]],["v8i16"]]],[5,"__msa_ldi_w","","Immediate Load",null,[[["i32"]],["v4i32"]]],[5,"__msa_ldi_d","","Immediate Load",null,[[["i32"]],["v2i64"]]],[5,"__msa_madd_q_h","","Vector Fixed-Point Multiply and Add",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_madd_q_w","","Vector Fixed-Point Multiply and Add",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_maddr_q_h","","Vector Fixed-Point Multiply and Add Rounded",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_maddr_q_w","","Vector Fixed-Point Multiply and Add Rounded",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_maddv_b","","Vector Multiply and Add",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_maddv_h","","Vector Multiply and Add",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_maddv_w","","Vector Multiply and Add",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_maddv_d","","Vector Multiply and Add",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_max_a_b","","Vector Maximum Based on Absolute Values",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_max_a_h","","Vector Maximum Based on Absolute Values",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_max_a_w","","Vector Maximum Based on Absolute Values",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_max_a_d","","Vector Maximum Based on Absolute Values",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_max_s_b","","Vector Signed Maximum",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_max_s_h","","Vector Signed Maximum",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_max_s_w","","Vector Signed Maximum",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_max_s_d","","Vector Signed Maximum",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_max_u_b","","Vector Unsigned Maximum",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_max_u_h","","Vector Unsigned Maximum",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_max_u_w","","Vector Unsigned Maximum",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_max_u_d","","Vector Unsigned Maximum",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_maxi_s_b","","Immediate Signed Maximum",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_maxi_s_h","","Immediate Signed Maximum",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_maxi_s_w","","Immediate Signed Maximum",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_maxi_s_d","","Immediate Signed Maximum",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_maxi_u_b","","Immediate Unsigned Maximum",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_maxi_u_h","","Immediate Unsigned Maximum",null,[[["i32"],["v8u16"]],["v8u16"]]],[5,"__msa_maxi_u_w","","Immediate Unsigned Maximum",null,[[["v4u32"],["i32"]],["v4u32"]]],[5,"__msa_maxi_u_d","","Immediate Unsigned Maximum",null,[[["v2u64"],["i32"]],["v2u64"]]],[5,"__msa_min_a_b","","Vector Minimum Based on Absolute Value",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_min_a_h","","Vector Minimum Based on Absolute Value",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_min_a_w","","Vector Minimum Based on Absolute Value",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_min_a_d","","Vector Minimum Based on Absolute Value",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_min_s_b","","Vector Signed Minimum",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_min_s_h","","Vector Signed Minimum",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_min_s_w","","Vector Signed Minimum",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_min_s_d","","Vector Signed Minimum",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_mini_s_b","","Immediate Signed Minimum",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_mini_s_h","","Immediate Signed Minimum",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_mini_s_w","","Immediate Signed Minimum",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_mini_s_d","","Immediate Signed Minimum",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_min_u_b","","Vector Unsigned Minimum",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_min_u_h","","Vector Unsigned Minimum",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_min_u_w","","Vector Unsigned Minimum",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_min_u_d","","Vector Unsigned Minimum",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_mini_u_b","","Immediate Unsigned Minimum",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_mini_u_h","","Immediate Unsigned Minimum",null,[[["i32"],["v8u16"]],["v8u16"]]],[5,"__msa_mini_u_w","","Immediate Unsigned Minimum",null,[[["v4u32"],["i32"]],["v4u32"]]],[5,"__msa_mini_u_d","","Immediate Unsigned Minimum",null,[[["v2u64"],["i32"]],["v2u64"]]],[5,"__msa_mod_s_b","","Vector Signed Modulo",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_mod_s_h","","Vector Signed Modulo",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_mod_s_w","","Vector Signed Modulo",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_mod_s_d","","Vector Signed Modulo",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_mod_u_b","","Vector Unsigned Modulo",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_mod_u_h","","Vector Unsigned Modulo",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_mod_u_w","","Vector Unsigned Modulo",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_mod_u_d","","Vector Unsigned Modulo",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_move_v","","Vector Move",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_msub_q_h","","Vector Fixed-Point Multiply and Subtract",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_msub_q_w","","Vector Fixed-Point Multiply and Subtract",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_msubr_q_h","","Vector Fixed-Point Multiply and Subtract Rounded",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_msubr_q_w","","Vector Fixed-Point Multiply and Subtract Rounded",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_msubv_b","","Vector Multiply and Subtract",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_msubv_h","","Vector Multiply and Subtract",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_msubv_w","","Vector Multiply and Subtract",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_msubv_d","","Vector Multiply and Subtract",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_mul_q_h","","Vector Fixed-Point Multiply",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_mul_q_w","","Vector Fixed-Point Multiply",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_mulr_q_h","","Vector Fixed-Point Multiply Rounded",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_mulr_q_w","","Vector Fixed-Point Multiply Rounded",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_mulv_b","","Vector Multiply",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_mulv_h","","Vector Multiply",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_mulv_w","","Vector Multiply",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_mulv_d","","Vector Multiply",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_nloc_b","","Vector Leading Ones Count",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_nloc_h","","Vector Leading Ones Count",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_nloc_w","","Vector Leading Ones Count",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_nloc_d","","Vector Leading Ones Count",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_nlzc_b","","Vector Leading Zeros Count",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_nlzc_h","","Vector Leading Zeros Count",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_nlzc_w","","Vector Leading Zeros Count",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_nlzc_d","","Vector Leading Zeros Count",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_nor_v","","Vector Logical Negated Or",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_nori_b","","Immediate Logical Negated Or",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_or_v","","Vector Logical Or",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_ori_b","","Immediate Logical Or",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_pckev_b","","Vector Pack Even",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_pckev_h","","Vector Pack Even",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_pckev_w","","Vector Pack Even",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_pckev_d","","Vector Pack Even",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_pckod_b","","Vector Pack Odd",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_pckod_h","","Vector Pack Odd",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_pckod_w","","Vector Pack Odd",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_pckod_d","","Vector Pack Odd",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_pcnt_b","","Vector Population Count",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_pcnt_h","","Vector Population Count",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_pcnt_w","","Vector Population Count",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_pcnt_d","","Vector Population Count",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_sat_s_b","","Immediate Signed Saturate",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_sat_s_h","","Immediate Signed Saturate",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_sat_s_w","","Immediate Signed Saturate",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_sat_s_d","","Immediate Signed Saturate",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_sat_u_b","","Immediate Unsigned Saturate",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"__msa_sat_u_h","","Immediate Unsigned Saturate",null,[[["i32"],["v8u16"]],["v8u16"]]],[5,"__msa_sat_u_w","","Immediate Unsigned Saturate",null,[[["v4u32"],["i32"]],["v4u32"]]],[5,"__msa_sat_u_d","","Immediate Unsigned Saturate",null,[[["v2u64"],["i32"]],["v2u64"]]],[5,"__msa_shf_b","","Immediate Set Shuffle Elements",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_shf_h","","Immediate Set Shuffle Elements",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_shf_w","","Immediate Set Shuffle Elements",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_sld_b","","GPR Columns Slide",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_sld_h","","GPR Columns Slide",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_sld_w","","GPR Columns Slide",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_sld_d","","GPR Columns Slide",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_sldi_b","","Immediate Columns Slide",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_sldi_h","","Immediate Columns Slide",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_sldi_w","","Immediate Columns Slide",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_sldi_d","","Immediate Columns Slide",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_sll_b","","Vector Shift Left",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_sll_h","","Vector Shift Left",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_sll_w","","Vector Shift Left",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_sll_d","","Vector Shift Left",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_slli_b","","Immediate Shift Left",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_slli_h","","Immediate Shift Left",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_slli_w","","Immediate Shift Left",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_slli_d","","Immediate Shift Left",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_splat_b","","GPR Element Splat",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_splat_h","","GPR Element Splat",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_splat_w","","GPR Element Splat",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_splat_d","","GPR Element Splat",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_splati_b","","Immediate Element Splat",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_splati_h","","Immediate Element Splat",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_splati_w","","Immediate Element Splat",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_splati_d","","Immediate Element Splat",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_sra_b","","Vector Shift Right Arithmetic",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_sra_h","","Vector Shift Right Arithmetic",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_sra_w","","Vector Shift Right Arithmetic",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_sra_d","","Vector Shift Right Arithmetic",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_srai_b","","Immediate Shift Right Arithmetic",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_srai_h","","Immediate Shift Right Arithmetic",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_srai_w","","Immediate Shift Right Arithmetic",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_srai_d","","Immediate Shift Right Arithmetic",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_srar_b","","Vector Shift Right Arithmetic Rounded",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_srar_h","","Vector Shift Right Arithmetic Rounded",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_srar_w","","Vector Shift Right Arithmetic Rounded",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_srar_d","","Vector Shift Right Arithmetic Rounded",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_srari_b","","Immediate Shift Right Arithmetic Rounded",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_srari_h","","Immediate Shift Right Arithmetic Rounded",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_srari_w","","Immediate Shift Right Arithmetic Rounded",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_srari_d","","Immediate Shift Right Arithmetic Rounded",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_srl_b","","Vector Shift Right Logical",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_srl_h","","Vector Shift Right Logical",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_srl_w","","Vector Shift Right Logical",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_srl_d","","Vector Shift Right Logical",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_srli_b","","Immediate Shift Right Logical",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_srli_h","","Immediate Shift Right Logical",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_srli_w","","Immediate Shift Right Logical",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_srli_d","","Immediate Shift Right Logical",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_srlr_b","","Vector Shift Right Logical Rounded",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_srlr_h","","Vector Shift Right Logical Rounded",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_srlr_w","","Vector Shift Right Logical Rounded",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_srlr_d","","Vector Shift Right Logical Rounded",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_srlri_b","","Immediate Shift Right Logical Rounded",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_srlri_h","","Immediate Shift Right Logical Rounded",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_srlri_w","","Immediate Shift Right Logical Rounded",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_srlri_d","","Immediate Shift Right Logical Rounded",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_st_b","","Vector Store",null,[[["v16i8"],["i32"]]]],[5,"__msa_st_h","","Vector Store",null,[[["v8i16"],["i32"]]]],[5,"__msa_st_w","","Vector Store",null,[[["i32"],["v4i32"]]]],[5,"__msa_st_d","","Vector Store",null,[[["v2i64"],["i32"]]]],[5,"__msa_subs_s_b","","Vector Signed Saturated Subtract of Signed Values",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_subs_s_h","","Vector Signed Saturated Subtract of Signed Values",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_subs_s_w","","Vector Signed Saturated Subtract of Signed Values",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_subs_s_d","","Vector Signed Saturated Subtract of Signed Values",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_subs_u_b","","Vector Unsigned Saturated Subtract of Unsigned Values",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_subs_u_h","","Vector Unsigned Saturated Subtract of Unsigned Values",null,[[["v8u16"]],["v8u16"]]],[5,"__msa_subs_u_w","","Vector Unsigned Saturated Subtract of Unsigned Values",null,[[["v4u32"]],["v4u32"]]],[5,"__msa_subs_u_d","","Vector Unsigned Saturated Subtract of Unsigned Values",null,[[["v2u64"]],["v2u64"]]],[5,"__msa_subsus_u_b","","Vector Unsigned Saturated Subtract of Signed from Unsigned",null,[[["v16i8"],["v16u8"]],["v16u8"]]],[5,"__msa_subsus_u_h","","Vector Unsigned Saturated Subtract of Signed from Unsigned",null,[[["v8i16"],["v8u16"]],["v8u16"]]],[5,"__msa_subsus_u_w","","Vector Unsigned Saturated Subtract of Signed from Unsigned",null,[[["v4u32"],["v4i32"]],["v4u32"]]],[5,"__msa_subsus_u_d","","Vector Unsigned Saturated Subtract of Signed from Unsigned",null,[[["v2u64"],["v2i64"]],["v2u64"]]],[5,"__msa_subsuu_s_b","","Vector Signed Saturated Subtract of Unsigned Values",null,[[["v16u8"]],["v16i8"]]],[5,"__msa_subsuu_s_h","","Vector Signed Saturated Subtract of Unsigned Values",null,[[["v8u16"]],["v8i16"]]],[5,"__msa_subsuu_s_w","","Vector Signed Saturated Subtract of Unsigned Values",null,[[["v4u32"]],["v4i32"]]],[5,"__msa_subsuu_s_d","","Vector Signed Saturated Subtract of Unsigned Values",null,[[["v2u64"]],["v2i64"]]],[5,"__msa_subv_b","","Vector Subtract",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_subv_h","","Vector Subtract",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_subv_w","","Vector Subtract",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_subv_d","","Vector Subtract",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_subvi_b","","Immediate Subtract",null,[[["v16i8"],["i32"]],["v16i8"]]],[5,"__msa_subvi_h","","Immediate Subtract",null,[[["v8i16"],["i32"]],["v8i16"]]],[5,"__msa_subvi_w","","Immediate Subtract",null,[[["i32"],["v4i32"]],["v4i32"]]],[5,"__msa_subvi_d","","Immediate Subtract",null,[[["v2i64"],["i32"]],["v2i64"]]],[5,"__msa_vshf_b","","Vector Data Preserving Shuffle",null,[[["v16i8"]],["v16i8"]]],[5,"__msa_vshf_h","","Vector Data Preserving Shuffle",null,[[["v8i16"]],["v8i16"]]],[5,"__msa_vshf_w","","Vector Data Preserving Shuffle",null,[[["v4i32"]],["v4i32"]]],[5,"__msa_vshf_d","","Vector Data Preserving Shuffle",null,[[["v2i64"]],["v2i64"]]],[5,"__msa_xor_v","","Vector Logical Exclusive Or",null,[[["v16u8"]],["v16u8"]]],[5,"__msa_xori_b","","Immediate Logical Exclusive Or",null,[[["i32"],["v16u8"]],["v16u8"]]],[5,"break_","","Generates the trap instruction `BREAK`",null,[[]]],[0,"powerpc","core::arch","Platform-specific intrinsics for the `PowerPC` platform.",null,null],[3,"vector_signed_long","core::arch::powerpc","PowerPC-specific 128-bit wide vector of two packed `i64`",null,null],[3,"vector_unsigned_long","","PowerPC-specific 128-bit wide vector of two packed `u64`",null,null],[3,"vector_bool_long","","PowerPC-specific 128-bit wide vector mask of two elements",null,null],[3,"vector_double","","PowerPC-specific 128-bit wide vector of two packed `f64`",null,null],[5,"vec_xxpermdi","","Vector permute.",null,[[["t"],["u8"]],["t"]]],[5,"trap","","Generates the trap instruction `TRAP`",null,[[]]],[0,"powerpc64","core::arch","Platform-specific intrinsics for the `PowerPC64` platform.",null,null],[3,"vector_signed_long","core::arch::powerpc64","PowerPC-specific 128-bit wide vector of two packed `i64`",null,null],[3,"vector_unsigned_long","","PowerPC-specific 128-bit wide vector of two packed `u64`",null,null],[3,"vector_bool_long","","PowerPC-specific 128-bit wide vector mask of two elements",null,null],[3,"vector_double","","PowerPC-specific 128-bit wide vector of two packed `f64`",null,null],[5,"vec_xxpermdi","","Vector permute.",null,[[["t"],["u8"]],["t"]]],[5,"trap","","Generates the trap instruction `TRAP`",null,[[]]],[0,"nvptx","core::arch","Platform-specific intrinsics for the `NVPTX` platform.",null,null],[5,"_syncthreads","core::arch::nvptx","Synchronizes all threads in the block.",null,[[]]],[5,"_block_dim_x","","x-th thread-block dimension.",null,[[],["i32"]]],[5,"_block_dim_y","","y-th thread-block dimension.",null,[[],["i32"]]],[5,"_block_dim_z","","z-th thread-block dimension.",null,[[],["i32"]]],[5,"_block_idx_x","","x-th thread-block index.",null,[[],["i32"]]],[5,"_block_idx_y","","y-th thread-block index.",null,[[],["i32"]]],[5,"_block_idx_z","","z-th thread-block index.",null,[[],["i32"]]],[5,"_grid_dim_x","","x-th block-grid dimension.",null,[[],["i32"]]],[5,"_grid_dim_y","","y-th block-grid dimension.",null,[[],["i32"]]],[5,"_grid_dim_z","","z-th block-grid dimension.",null,[[],["i32"]]],[5,"_thread_idx_x","","x-th thread index.",null,[[],["i32"]]],[5,"_thread_idx_y","","y-th thread index.",null,[[],["i32"]]],[5,"_thread_idx_z","","z-th thread index.",null,[[],["i32"]]],[5,"trap","","Generates the trap instruction `TRAP`",null,[[]]],[5,"__assert_fail","","Syscall to be used whenever the assert expression produces…",null,[[["u32"]]]],[5,"vprintf","","Print formatted output from a kernel to a host-side output…",null,null],[5,"malloc","","Allocate memory dynamically from a fixed-size heap in…",null,null],[5,"free","","Free previously dynamically allocated memory.",null,null],[14,"panic","core","Panics the current thread.",null,null],[14,"assert_eq","","Asserts that two expressions are equal to each other…",null,null],[14,"assert_ne","","Asserts that two expressions are not equal to each other…",null,null],[14,"debug_assert","","Asserts that a boolean expression is `true` at runtime.",null,null],[14,"debug_assert_eq","","Asserts that two expressions are equal to each other.",null,null],[14,"debug_assert_ne","","Asserts that two expressions are not equal to each other.",null,null],[14,"matches","","Returns whether the given expression matches any of the…",null,null],[14,"try","","Unwraps a result or propagates its error.",null,null],[14,"write","","Writes formatted data into a buffer.",null,null],[14,"writeln","","Write formatted data into a buffer, with a newline appended.",null,null],[14,"unreachable","","Indicates unreachable code.",null,null],[14,"unimplemented","","Indicates unimplemented code by panicking with a message…",null,null],[14,"todo","","Indicates unfinished code.",null,null],[14,"compile_error","","Causes compilation to fail with the given error message…",null,null],[14,"format_args","","Constructs parameters for the other string-formatting…",null,null],[14,"format_args_nl","","Same as `format_args`, but adds a newline in the end.",null,null],[14,"env","","Inspects an environment variable at compile time.",null,null],[14,"option_env","","Optionally inspects an environment variable at compile time.",null,null],[14,"concat_idents","","Concatenates identifiers into one identifier.",null,null],[14,"concat","","Concatenates literals into a static string slice.",null,null],[14,"line","","Expands to the line number on which it was invoked.",null,null],[14,"column","","Expands to the column number at which it was invoked.",null,null],[14,"file","","Expands to the file name in which it was invoked.",null,null],[14,"stringify","","Stringifies its arguments.",null,null],[14,"include_str","","Includes a utf8-encoded file as a string.",null,null],[14,"include_bytes","","Includes a file as a reference to a byte array.",null,null],[14,"module_path","","Expands to a string that represents the current module path.",null,null],[14,"cfg","","Evaluates boolean combinations of configuration flags at…",null,null],[14,"include","","Parses a file as an expression or an item according to the…",null,null],[14,"assert","","Asserts that a boolean expression is `true` at runtime.",null,null],[14,"asm","","Inline assembly.",null,null],[14,"global_asm","","Module-level inline assembly.",null,null],[14,"log_syntax","","Prints passed tokens into the standard output.",null,null],[14,"trace_macros","","Enables or disables tracing functionality used for…",null,null],[14,"test","","Attribute macro applied to a function to turn it into a…",null,null],[14,"bench","","Attribute macro applied to a function to turn it into a…",null,null],[14,"test_case","","An implementation detail of the `#[test]` and `#[bench]`…",null,null],[14,"global_allocator","","Attribute macro applied to a static to register it as a…",null,null],[14,"RustcDecodable","","Unstable implementation detail of the `rustc` compiler, do…",null,null],[14,"RustcEncodable","","Unstable implementation detail of the `rustc` compiler, do…",null,null],[14,"Clone","","Derive macro generating an impl of the trait `Clone`.",null,null],[14,"PartialEq","","Derive macro generating an impl of the trait `PartialEq`.",null,null],[14,"Eq","","Derive macro generating an impl of the trait `Eq`.",null,null],[14,"Ord","","Derive macro generating an impl of the trait `Ord`.",null,null],[14,"PartialOrd","","Derive macro generating an impl of the trait `PartialOrd`.",null,null],[14,"Default","","Derive macro generating an impl of the trait `Default`.",null,null],[14,"Copy","","Derive macro generating an impl of the trait `Copy`.",null,null],[14,"Debug","","Derive macro generating an impl of the trait `Debug`.",null,null],[14,"Hash","","Derive macro generating an impl of the trait `Hash`.",null,null],[11,"borrow","core::num","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_into","","",3,[[],["result"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_into","","",4,[[],["result"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_into","","",5,[[],["result"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_into","","",6,[[],["result"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_into","","",7,[[],["result"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_into","","",8,[[],["result"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_into","","",9,[[],["result"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_into","","",10,[[],["result"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_into","","",11,[[],["result"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_into","","",12,[[],["result"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_into","","",13,[[],["result"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_into","","",14,[[],["result"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_into","","",0,[[],["result"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow","","",184,[[["self"]],["t"]]],[11,"borrow_mut","","",184,[[["self"]],["t"]]],[11,"into","","",184,[[],["u"]]],[11,"from","","",184,[[["t"]],["t"]]],[11,"from","","",184,[[],["t"]]],[11,"try_into","","",184,[[],["result"]]],[11,"try_from","","",184,[[["u"]],["result"]]],[11,"type_id","","",184,[[["self"]],["typeid"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_into","","",15,[[],["result"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"borrow","","",185,[[["self"]],["t"]]],[11,"borrow_mut","","",185,[[["self"]],["t"]]],[11,"into","","",185,[[],["u"]]],[11,"from","","",185,[[["t"]],["t"]]],[11,"try_into","","",185,[[],["result"]]],[11,"try_from","","",185,[[["u"]],["result"]]],[11,"type_id","","",185,[[["self"]],["typeid"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_into","","",1,[[],["result"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_into","","",2,[[],["result"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow","core::mem","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_into","","",16,[[],["result"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"borrow","","",186,[[["self"]],["t"]]],[11,"borrow_mut","","",186,[[["self"]],["t"]]],[11,"into","","",186,[[],["u"]]],[11,"from","","",186,[[["t"]],["t"]]],[11,"try_into","","",186,[[],["result"]]],[11,"try_from","","",186,[[["u"]],["result"]]],[11,"type_id","","",186,[[["self"]],["typeid"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_into","","",17,[[],["result"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"borrow","core::ptr","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_into","","",18,[[],["result"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"borrow","core::cmp","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_into","","",22,[[],["result"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_into","","",23,[[],["result"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"borrow","core::convert","",187,[[["self"]],["t"]]],[11,"borrow_mut","","",187,[[["self"]],["t"]]],[11,"into","","",187,[[],["u"]]],[11,"from","","",187,[[["t"]],["t"]]],[11,"from","","",187,[[],["t"]]],[11,"try_into","","",187,[[],["result"]]],[11,"try_from","","",187,[[["u"]],["result"]]],[11,"type_id","","",187,[[["self"]],["typeid"]]],[11,"borrow","core::marker","",188,[[["self"]],["t"]]],[11,"borrow_mut","","",188,[[["self"]],["t"]]],[11,"into","","",188,[[],["u"]]],[11,"from","","",188,[[["t"]],["t"]]],[11,"try_into","","",188,[[],["result"]]],[11,"try_from","","",188,[[["u"]],["result"]]],[11,"type_id","","",188,[[["self"]],["typeid"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"into","","",189,[[],["u"]]],[11,"from","","",189,[[["t"]],["t"]]],[11,"try_into","","",189,[[],["result"]]],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"type_id","","",189,[[["self"]],["typeid"]]],[11,"borrow","core::ops","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_into","","",34,[[],["result"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_into","","",35,[[],["result"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"into","","",190,[[],["u"]]],[11,"from","","",190,[[["t"]],["t"]]],[11,"try_into","","",190,[[],["result"]]],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"type_id","","",190,[[["self"]],["typeid"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_into","","",36,[[],["result"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_into","","",40,[[],["result"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_into","","",37,[[],["result"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_into","","",38,[[],["result"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_into","","",39,[[],["result"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"borrow","core::any","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"into","","",75,[[],["u"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"try_into","","",75,[[],["result"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"type_id","","",75,[[["self"]],["typeid"]]],[11,"borrow","core::array","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"into","","",76,[[],["u"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"try_into","","",76,[[],["result"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"type_id","","",76,[[["self"]],["typeid"]]],[11,"borrow","","",191,[[["self"]],["t"]]],[11,"borrow_mut","","",191,[[["self"]],["t"]]],[11,"into","","",191,[[],["u"]]],[11,"from","","",191,[[["t"]],["t"]]],[11,"try_into","","",191,[[],["result"]]],[11,"try_from","","",191,[[["u"]],["result"]]],[11,"type_id","","",191,[[["self"]],["typeid"]]],[11,"borrow","core::ascii","",192,[[["self"]],["t"]]],[11,"borrow_mut","","",192,[[["self"]],["t"]]],[11,"into","","",192,[[],["u"]]],[11,"from","","",192,[[["t"]],["t"]]],[11,"try_into","","",192,[[],["result"]]],[11,"try_from","","",192,[[["u"]],["result"]]],[11,"type_id","","",192,[[["self"]],["typeid"]]],[11,"borrow","core::cell","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"into","","",78,[[],["u"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"from","","",78,[[],["t"]]],[11,"try_into","","",78,[[],["result"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"type_id","","",78,[[["self"]],["typeid"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"into","","",79,[[],["u"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"from","","",79,[[],["t"]]],[11,"try_into","","",79,[[],["result"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"type_id","","",79,[[["self"]],["typeid"]]],[11,"borrow","","",193,[[["self"]],["t"]]],[11,"borrow_mut","","",193,[[["self"]],["t"]]],[11,"into","","",193,[[],["u"]]],[11,"from","","",193,[[["t"]],["t"]]],[11,"try_into","","",193,[[],["result"]]],[11,"try_from","","",193,[[["u"]],["result"]]],[11,"type_id","","",193,[[["self"]],["typeid"]]],[11,"borrow","","",194,[[["self"]],["t"]]],[11,"borrow_mut","","",194,[[["self"]],["t"]]],[11,"into","","",194,[[],["u"]]],[11,"from","","",194,[[["t"]],["t"]]],[11,"try_into","","",194,[[],["result"]]],[11,"try_from","","",194,[[["u"]],["result"]]],[11,"type_id","","",194,[[["self"]],["typeid"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"into","","",80,[[],["u"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"try_into","","",80,[[],["result"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"type_id","","",80,[[["self"]],["typeid"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"into","","",81,[[],["u"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"try_into","","",81,[[],["result"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"type_id","","",81,[[["self"]],["typeid"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"into","","",82,[[],["u"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"from","","",82,[[],["t"]]],[11,"try_into","","",82,[[],["result"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"type_id","","",82,[[["self"]],["typeid"]]],[11,"borrow","core::char","",195,[[["self"]],["t"]]],[11,"borrow_mut","","",195,[[["self"]],["t"]]],[11,"into","","",195,[[],["u"]]],[11,"from","","",195,[[["t"]],["t"]]],[11,"try_into","","",195,[[],["result"]]],[11,"try_from","","",195,[[["u"]],["result"]]],[11,"type_id","","",195,[[["self"]],["typeid"]]],[11,"borrow","","",196,[[["self"]],["t"]]],[11,"borrow_mut","","",196,[[["self"]],["t"]]],[11,"into","","",196,[[],["u"]]],[11,"from","","",196,[[["t"]],["t"]]],[11,"try_into","","",196,[[],["result"]]],[11,"try_from","","",196,[[["u"]],["result"]]],[11,"type_id","","",196,[[["self"]],["typeid"]]],[11,"borrow","","",197,[[["self"]],["t"]]],[11,"borrow_mut","","",197,[[["self"]],["t"]]],[11,"into","","",197,[[],["u"]]],[11,"from","","",197,[[["t"]],["t"]]],[11,"try_into","","",197,[[],["result"]]],[11,"try_from","","",197,[[["u"]],["result"]]],[11,"type_id","","",197,[[["self"]],["typeid"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"into","","",84,[[],["u"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"try_into","","",84,[[],["result"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"type_id","","",84,[[["self"]],["typeid"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"into","","",83,[[],["u"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"try_into","","",83,[[],["result"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"type_id","","",83,[[["self"]],["typeid"]]],[11,"borrow","","",198,[[["self"]],["t"]]],[11,"borrow_mut","","",198,[[["self"]],["t"]]],[11,"into","","",198,[[],["u"]]],[11,"from","","",198,[[["t"]],["t"]]],[11,"try_into","","",198,[[],["result"]]],[11,"try_from","","",198,[[["u"]],["result"]]],[11,"type_id","","",198,[[["self"]],["typeid"]]],[11,"borrow","","",199,[[["self"]],["t"]]],[11,"borrow_mut","","",199,[[["self"]],["t"]]],[11,"into","","",199,[[],["u"]]],[11,"from","","",199,[[["t"]],["t"]]],[11,"try_into","","",199,[[],["result"]]],[11,"try_from","","",199,[[["u"]],["result"]]],[11,"type_id","","",199,[[["self"]],["typeid"]]],[11,"borrow","","",200,[[["self"]],["t"]]],[11,"borrow_mut","","",200,[[["self"]],["t"]]],[11,"into","","",200,[[],["u"]]],[11,"from","","",200,[[["t"]],["t"]]],[11,"try_into","","",200,[[],["result"]]],[11,"try_from","","",200,[[["u"]],["result"]]],[11,"type_id","","",200,[[["self"]],["typeid"]]],[11,"borrow","","",201,[[["self"]],["t"]]],[11,"borrow_mut","","",201,[[["self"]],["t"]]],[11,"into","","",201,[[],["u"]]],[11,"from","","",201,[[["t"]],["t"]]],[11,"try_into","","",201,[[],["result"]]],[11,"try_from","","",201,[[["u"]],["result"]]],[11,"type_id","","",201,[[["self"]],["typeid"]]],[11,"borrow","","",202,[[["self"]],["t"]]],[11,"borrow_mut","","",202,[[["self"]],["t"]]],[11,"into","","",202,[[],["u"]]],[11,"from","","",202,[[["t"]],["t"]]],[11,"try_into","","",202,[[],["result"]]],[11,"try_from","","",202,[[["u"]],["result"]]],[11,"type_id","","",202,[[["self"]],["typeid"]]],[11,"borrow","core::ffi","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"into","","",85,[[],["u"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"try_into","","",85,[[],["result"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"type_id","","",85,[[["self"]],["typeid"]]],[11,"borrow","","",203,[[["self"]],["t"]]],[11,"borrow_mut","","",203,[[["self"]],["t"]]],[11,"into","","",203,[[],["u"]]],[11,"from","","",203,[[["t"]],["t"]]],[11,"try_into","","",203,[[],["result"]]],[11,"try_from","","",203,[[["u"]],["result"]]],[11,"type_id","","",203,[[["self"]],["typeid"]]],[11,"borrow","","",204,[[["self"]],["t"]]],[11,"borrow_mut","","",204,[[["self"]],["t"]]],[11,"into","","",204,[[],["u"]]],[11,"from","","",204,[[["t"]],["t"]]],[11,"try_into","","",204,[[],["result"]]],[11,"try_from","","",204,[[["u"]],["result"]]],[11,"type_id","","",204,[[["self"]],["typeid"]]],[11,"borrow","core::iter","",205,[[["self"]],["t"]]],[11,"borrow_mut","","",205,[[["self"]],["t"]]],[11,"into","","",205,[[],["u"]]],[11,"from","","",205,[[["t"]],["t"]]],[11,"try_into","","",205,[[],["result"]]],[11,"try_from","","",205,[[["u"]],["result"]]],[11,"type_id","","",205,[[["self"]],["typeid"]]],[11,"borrow","","",206,[[["self"]],["t"]]],[11,"borrow_mut","","",206,[[["self"]],["t"]]],[11,"into","","",206,[[],["u"]]],[11,"from","","",206,[[["t"]],["t"]]],[11,"try_into","","",206,[[],["result"]]],[11,"try_from","","",206,[[["u"]],["result"]]],[11,"type_id","","",206,[[["self"]],["typeid"]]],[11,"borrow","","",207,[[["self"]],["t"]]],[11,"borrow_mut","","",207,[[["self"]],["t"]]],[11,"into","","",207,[[],["u"]]],[11,"from","","",207,[[["t"]],["t"]]],[11,"try_into","","",207,[[],["result"]]],[11,"try_from","","",207,[[["u"]],["result"]]],[11,"type_id","","",207,[[["self"]],["typeid"]]],[11,"borrow","","",208,[[["self"]],["t"]]],[11,"borrow_mut","","",208,[[["self"]],["t"]]],[11,"into","","",208,[[],["u"]]],[11,"from","","",208,[[["t"]],["t"]]],[11,"try_into","","",208,[[],["result"]]],[11,"try_from","","",208,[[["u"]],["result"]]],[11,"type_id","","",208,[[["self"]],["typeid"]]],[11,"borrow","","",209,[[["self"]],["t"]]],[11,"borrow_mut","","",209,[[["self"]],["t"]]],[11,"into","","",209,[[],["u"]]],[11,"from","","",209,[[["t"]],["t"]]],[11,"try_into","","",209,[[],["result"]]],[11,"try_from","","",209,[[["u"]],["result"]]],[11,"type_id","","",209,[[["self"]],["typeid"]]],[11,"borrow","","",210,[[["self"]],["t"]]],[11,"borrow_mut","","",210,[[["self"]],["t"]]],[11,"into","","",210,[[],["u"]]],[11,"from","","",210,[[["t"]],["t"]]],[11,"try_into","","",210,[[],["result"]]],[11,"try_from","","",210,[[["u"]],["result"]]],[11,"type_id","","",210,[[["self"]],["typeid"]]],[11,"borrow","","",211,[[["self"]],["t"]]],[11,"borrow_mut","","",211,[[["self"]],["t"]]],[11,"into","","",211,[[],["u"]]],[11,"from","","",211,[[["t"]],["t"]]],[11,"try_into","","",211,[[],["result"]]],[11,"try_from","","",211,[[["u"]],["result"]]],[11,"type_id","","",211,[[["self"]],["typeid"]]],[11,"borrow","","",212,[[["self"]],["t"]]],[11,"borrow_mut","","",212,[[["self"]],["t"]]],[11,"into","","",212,[[],["u"]]],[11,"from","","",212,[[["t"]],["t"]]],[11,"try_into","","",212,[[],["result"]]],[11,"try_from","","",212,[[["u"]],["result"]]],[11,"type_id","","",212,[[["self"]],["typeid"]]],[11,"borrow","","",213,[[["self"]],["t"]]],[11,"borrow_mut","","",213,[[["self"]],["t"]]],[11,"into","","",213,[[],["u"]]],[11,"from","","",213,[[["t"]],["t"]]],[11,"try_into","","",213,[[],["result"]]],[11,"try_from","","",213,[[["u"]],["result"]]],[11,"type_id","","",213,[[["self"]],["typeid"]]],[11,"borrow","","",214,[[["self"]],["t"]]],[11,"borrow_mut","","",214,[[["self"]],["t"]]],[11,"into","","",214,[[],["u"]]],[11,"from","","",214,[[["t"]],["t"]]],[11,"try_into","","",214,[[],["result"]]],[11,"try_from","","",214,[[["u"]],["result"]]],[11,"type_id","","",214,[[["self"]],["typeid"]]],[11,"borrow","","",215,[[["self"]],["t"]]],[11,"borrow_mut","","",215,[[["self"]],["t"]]],[11,"into","","",215,[[],["u"]]],[11,"from","","",215,[[["t"]],["t"]]],[11,"try_into","","",215,[[],["result"]]],[11,"try_from","","",215,[[["u"]],["result"]]],[11,"type_id","","",215,[[["self"]],["typeid"]]],[11,"borrow","","",216,[[["self"]],["t"]]],[11,"borrow_mut","","",216,[[["self"]],["t"]]],[11,"into","","",216,[[],["u"]]],[11,"from","","",216,[[["t"]],["t"]]],[11,"try_into","","",216,[[],["result"]]],[11,"try_from","","",216,[[["u"]],["result"]]],[11,"type_id","","",216,[[["self"]],["typeid"]]],[11,"borrow","","",217,[[["self"]],["t"]]],[11,"borrow_mut","","",217,[[["self"]],["t"]]],[11,"into","","",217,[[],["u"]]],[11,"from","","",217,[[["t"]],["t"]]],[11,"try_into","","",217,[[],["result"]]],[11,"try_from","","",217,[[["u"]],["result"]]],[11,"type_id","","",217,[[["self"]],["typeid"]]],[11,"borrow","","",218,[[["self"]],["t"]]],[11,"borrow_mut","","",218,[[["self"]],["t"]]],[11,"into","","",218,[[],["u"]]],[11,"from","","",218,[[["t"]],["t"]]],[11,"try_into","","",218,[[],["result"]]],[11,"try_from","","",218,[[["u"]],["result"]]],[11,"type_id","","",218,[[["self"]],["typeid"]]],[11,"borrow","","",219,[[["self"]],["t"]]],[11,"borrow_mut","","",219,[[["self"]],["t"]]],[11,"into","","",219,[[],["u"]]],[11,"from","","",219,[[["t"]],["t"]]],[11,"try_into","","",219,[[],["result"]]],[11,"try_from","","",219,[[["u"]],["result"]]],[11,"type_id","","",219,[[["self"]],["typeid"]]],[11,"borrow","","",220,[[["self"]],["t"]]],[11,"borrow_mut","","",220,[[["self"]],["t"]]],[11,"into","","",220,[[],["u"]]],[11,"from","","",220,[[["t"]],["t"]]],[11,"try_into","","",220,[[],["result"]]],[11,"try_from","","",220,[[["u"]],["result"]]],[11,"type_id","","",220,[[["self"]],["typeid"]]],[11,"borrow","","",221,[[["self"]],["t"]]],[11,"borrow_mut","","",221,[[["self"]],["t"]]],[11,"into","","",221,[[],["u"]]],[11,"from","","",221,[[["t"]],["t"]]],[11,"try_into","","",221,[[],["result"]]],[11,"try_from","","",221,[[["u"]],["result"]]],[11,"type_id","","",221,[[["self"]],["typeid"]]],[11,"borrow","","",222,[[["self"]],["t"]]],[11,"borrow_mut","","",222,[[["self"]],["t"]]],[11,"into","","",222,[[],["u"]]],[11,"from","","",222,[[["t"]],["t"]]],[11,"try_into","","",222,[[],["result"]]],[11,"try_from","","",222,[[["u"]],["result"]]],[11,"type_id","","",222,[[["self"]],["typeid"]]],[11,"borrow","","",223,[[["self"]],["t"]]],[11,"borrow_mut","","",223,[[["self"]],["t"]]],[11,"into","","",223,[[],["u"]]],[11,"from","","",223,[[["t"]],["t"]]],[11,"try_into","","",223,[[],["result"]]],[11,"try_from","","",223,[[["u"]],["result"]]],[11,"type_id","","",223,[[["self"]],["typeid"]]],[11,"borrow","","",224,[[["self"]],["t"]]],[11,"borrow_mut","","",224,[[["self"]],["t"]]],[11,"into","","",224,[[],["u"]]],[11,"from","","",224,[[["t"]],["t"]]],[11,"try_into","","",224,[[],["result"]]],[11,"try_from","","",224,[[["u"]],["result"]]],[11,"type_id","","",224,[[["self"]],["typeid"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"into","","",86,[[],["u"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"try_into","","",86,[[],["result"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"type_id","","",86,[[["self"]],["typeid"]]],[11,"borrow","","",225,[[["self"]],["t"]]],[11,"borrow_mut","","",225,[[["self"]],["t"]]],[11,"into","","",225,[[],["u"]]],[11,"from","","",225,[[["t"]],["t"]]],[11,"try_into","","",225,[[],["result"]]],[11,"try_from","","",225,[[["u"]],["result"]]],[11,"type_id","","",225,[[["self"]],["typeid"]]],[11,"borrow","","",226,[[["self"]],["t"]]],[11,"borrow_mut","","",226,[[["self"]],["t"]]],[11,"into","","",226,[[],["u"]]],[11,"from","","",226,[[["t"]],["t"]]],[11,"try_into","","",226,[[],["result"]]],[11,"try_from","","",226,[[["u"]],["result"]]],[11,"type_id","","",226,[[["self"]],["typeid"]]],[11,"borrow","","",227,[[["self"]],["t"]]],[11,"borrow_mut","","",227,[[["self"]],["t"]]],[11,"into","","",227,[[],["u"]]],[11,"from","","",227,[[["t"]],["t"]]],[11,"try_into","","",227,[[],["result"]]],[11,"try_from","","",227,[[["u"]],["result"]]],[11,"type_id","","",227,[[["self"]],["typeid"]]],[11,"borrow","","",228,[[["self"]],["t"]]],[11,"borrow_mut","","",228,[[["self"]],["t"]]],[11,"into","","",228,[[],["u"]]],[11,"from","","",228,[[["t"]],["t"]]],[11,"try_into","","",228,[[],["result"]]],[11,"try_from","","",228,[[["u"]],["result"]]],[11,"type_id","","",228,[[["self"]],["typeid"]]],[11,"borrow","","",229,[[["self"]],["t"]]],[11,"borrow_mut","","",229,[[["self"]],["t"]]],[11,"into","","",229,[[],["u"]]],[11,"from","","",229,[[["t"]],["t"]]],[11,"try_into","","",229,[[],["result"]]],[11,"try_from","","",229,[[["u"]],["result"]]],[11,"type_id","","",229,[[["self"]],["typeid"]]],[11,"borrow","","",230,[[["self"]],["t"]]],[11,"borrow_mut","","",230,[[["self"]],["t"]]],[11,"into","","",230,[[],["u"]]],[11,"from","","",230,[[["t"]],["t"]]],[11,"try_into","","",230,[[],["result"]]],[11,"try_from","","",230,[[["u"]],["result"]]],[11,"type_id","","",230,[[["self"]],["typeid"]]],[11,"borrow","","",231,[[["self"]],["t"]]],[11,"borrow_mut","","",231,[[["self"]],["t"]]],[11,"into","","",231,[[],["u"]]],[11,"from","","",231,[[["t"]],["t"]]],[11,"try_into","","",231,[[],["result"]]],[11,"try_from","","",231,[[["u"]],["result"]]],[11,"type_id","","",231,[[["self"]],["typeid"]]],[11,"borrow","core::option","",232,[[["self"]],["t"]]],[11,"borrow_mut","","",232,[[["self"]],["t"]]],[11,"into","","",232,[[],["u"]]],[11,"from","","",232,[[["t"]],["t"]]],[11,"try_into","","",232,[[],["result"]]],[11,"try_from","","",232,[[["u"]],["result"]]],[11,"type_id","","",232,[[["self"]],["typeid"]]],[11,"borrow","","",233,[[["self"]],["t"]]],[11,"borrow_mut","","",233,[[["self"]],["t"]]],[11,"into","","",233,[[],["u"]]],[11,"from","","",233,[[["t"]],["t"]]],[11,"try_into","","",233,[[],["result"]]],[11,"try_from","","",233,[[["u"]],["result"]]],[11,"type_id","","",233,[[["self"]],["typeid"]]],[11,"borrow","","",234,[[["self"]],["t"]]],[11,"borrow_mut","","",234,[[["self"]],["t"]]],[11,"into","","",234,[[],["u"]]],[11,"from","","",234,[[["t"]],["t"]]],[11,"try_into","","",234,[[],["result"]]],[11,"try_from","","",234,[[["u"]],["result"]]],[11,"type_id","","",234,[[["self"]],["typeid"]]],[11,"borrow","","",235,[[["self"]],["t"]]],[11,"borrow_mut","","",235,[[["self"]],["t"]]],[11,"into","","",235,[[],["u"]]],[11,"from","","",235,[[["t"]],["t"]]],[11,"try_into","","",235,[[],["result"]]],[11,"try_from","","",235,[[["u"]],["result"]]],[11,"type_id","","",235,[[["self"]],["typeid"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"into","","",96,[[],["u"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"from","","",96,[[],["t"]]],[11,"try_into","","",96,[[],["result"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"type_id","","",96,[[["self"]],["typeid"]]],[11,"borrow","core::panic","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"into","","",97,[[],["u"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"try_into","","",97,[[],["result"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"type_id","","",97,[[["self"]],["typeid"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"into","","",98,[[],["u"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"try_into","","",98,[[],["result"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"type_id","","",98,[[["self"]],["typeid"]]],[11,"borrow","core::pin","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"into","","",99,[[],["u"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"try_into","","",99,[[],["result"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"type_id","","",99,[[["self"]],["typeid"]]],[11,"borrow","core::raw","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"into","","",100,[[],["u"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"try_into","","",100,[[],["result"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"type_id","","",100,[[["self"]],["typeid"]]],[11,"borrow","core::result","",236,[[["self"]],["t"]]],[11,"borrow_mut","","",236,[[["self"]],["t"]]],[11,"into","","",236,[[],["u"]]],[11,"from","","",236,[[["t"]],["t"]]],[11,"try_into","","",236,[[],["result"]]],[11,"try_from","","",236,[[["u"]],["result"]]],[11,"type_id","","",236,[[["self"]],["typeid"]]],[11,"borrow","","",237,[[["self"]],["t"]]],[11,"borrow_mut","","",237,[[["self"]],["t"]]],[11,"into","","",237,[[],["u"]]],[11,"from","","",237,[[["t"]],["t"]]],[11,"try_into","","",237,[[],["result"]]],[11,"try_from","","",237,[[["u"]],["result"]]],[11,"type_id","","",237,[[["self"]],["typeid"]]],[11,"borrow","","",238,[[["self"]],["t"]]],[11,"borrow_mut","","",238,[[["self"]],["t"]]],[11,"into","","",238,[[],["u"]]],[11,"from","","",238,[[["t"]],["t"]]],[11,"try_into","","",238,[[],["result"]]],[11,"try_from","","",238,[[["u"]],["result"]]],[11,"type_id","","",238,[[["self"]],["typeid"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"into","","",101,[[],["u"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"try_into","","",101,[[],["result"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"type_id","","",101,[[["self"]],["typeid"]]],[11,"borrow","core::sync::atomic","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"into","","",103,[[],["u"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"try_into","","",103,[[],["result"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"type_id","","",103,[[["self"]],["typeid"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"into","","",104,[[],["u"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"try_into","","",104,[[],["result"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"type_id","","",104,[[["self"]],["typeid"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"into","","",105,[[],["u"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"try_into","","",105,[[],["result"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"type_id","","",105,[[["self"]],["typeid"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"into","","",106,[[],["u"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"try_into","","",106,[[],["result"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"type_id","","",106,[[["self"]],["typeid"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"into","","",107,[[],["u"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"try_into","","",107,[[],["result"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"type_id","","",107,[[["self"]],["typeid"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"into","","",108,[[],["u"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"try_into","","",108,[[],["result"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"type_id","","",108,[[["self"]],["typeid"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"into","","",109,[[],["u"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"try_into","","",109,[[],["result"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"type_id","","",109,[[["self"]],["typeid"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"into","","",110,[[],["u"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"try_into","","",110,[[],["result"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"type_id","","",110,[[["self"]],["typeid"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"into","","",111,[[],["u"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"try_into","","",111,[[],["result"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"type_id","","",111,[[["self"]],["typeid"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"into","","",112,[[],["u"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"try_into","","",112,[[],["result"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"type_id","","",112,[[["self"]],["typeid"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"into","","",113,[[],["u"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"try_into","","",113,[[],["result"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"type_id","","",113,[[["self"]],["typeid"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"into","","",114,[[],["u"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"try_into","","",114,[[],["result"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"type_id","","",114,[[["self"]],["typeid"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"into","","",102,[[],["u"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"try_into","","",102,[[],["result"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"type_id","","",102,[[["self"]],["typeid"]]],[11,"borrow","core::fmt","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"into","","",119,[[],["u"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"try_into","","",119,[[],["result"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"type_id","","",119,[[["self"]],["typeid"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"into","","",120,[[],["u"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"try_into","","",120,[[],["result"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"type_id","","",120,[[["self"]],["typeid"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"into","","",118,[[],["u"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"try_into","","",118,[[],["result"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"type_id","","",118,[[["self"]],["typeid"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"into","","",116,[[],["u"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"try_into","","",116,[[],["result"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"type_id","","",116,[[["self"]],["typeid"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"into","","",117,[[],["u"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"try_into","","",117,[[],["result"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"type_id","","",117,[[["self"]],["typeid"]]],[11,"borrow","","",239,[[["self"]],["t"]]],[11,"borrow_mut","","",239,[[["self"]],["t"]]],[11,"into","","",239,[[],["u"]]],[11,"from","","",239,[[["t"]],["t"]]],[11,"try_into","","",239,[[],["result"]]],[11,"try_from","","",239,[[["u"]],["result"]]],[11,"type_id","","",239,[[["self"]],["typeid"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"into","","",131,[[],["u"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"try_into","","",131,[[],["result"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"type_id","","",131,[[["self"]],["typeid"]]],[11,"borrow","","",240,[[["self"]],["t"]]],[11,"borrow_mut","","",240,[[["self"]],["t"]]],[11,"into","","",240,[[],["u"]]],[11,"from","","",240,[[["t"]],["t"]]],[11,"try_into","","",240,[[],["result"]]],[11,"try_from","","",240,[[["u"]],["result"]]],[11,"type_id","","",240,[[["self"]],["typeid"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"into","","",115,[[],["u"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"try_into","","",115,[[],["result"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"type_id","","",115,[[["self"]],["typeid"]]],[11,"borrow","core::hash","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"into","","",132,[[],["u"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"try_into","","",132,[[],["result"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"type_id","","",132,[[["self"]],["typeid"]]],[11,"borrow","","",241,[[["self"]],["t"]]],[11,"borrow_mut","","",241,[[["self"]],["t"]]],[11,"into","","",241,[[],["u"]]],[11,"from","","",241,[[["t"]],["t"]]],[11,"try_into","","",241,[[],["result"]]],[11,"try_from","","",241,[[["u"]],["result"]]],[11,"type_id","","",241,[[["self"]],["typeid"]]],[11,"borrow","core::slice","",137,[[["self"]],["t"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"into","","",137,[[],["u"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"try_into","","",137,[[],["result"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"type_id","","",137,[[["self"]],["typeid"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"into","","",138,[[],["u"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"try_into","","",138,[[],["result"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"type_id","","",138,[[["self"]],["typeid"]]],[11,"borrow","","",242,[[["self"]],["t"]]],[11,"borrow_mut","","",242,[[["self"]],["t"]]],[11,"into","","",242,[[],["u"]]],[11,"from","","",242,[[["t"]],["t"]]],[11,"try_into","","",242,[[],["result"]]],[11,"try_from","","",242,[[["u"]],["result"]]],[11,"type_id","","",242,[[["self"]],["typeid"]]],[11,"borrow","","",243,[[["self"]],["t"]]],[11,"borrow_mut","","",243,[[["self"]],["t"]]],[11,"into","","",243,[[],["u"]]],[11,"from","","",243,[[["t"]],["t"]]],[11,"try_into","","",243,[[],["result"]]],[11,"try_from","","",243,[[["u"]],["result"]]],[11,"type_id","","",243,[[["self"]],["typeid"]]],[11,"borrow","","",244,[[["self"]],["t"]]],[11,"borrow_mut","","",244,[[["self"]],["t"]]],[11,"into","","",244,[[],["u"]]],[11,"from","","",244,[[["t"]],["t"]]],[11,"try_into","","",244,[[],["result"]]],[11,"try_from","","",244,[[["u"]],["result"]]],[11,"type_id","","",244,[[["self"]],["typeid"]]],[11,"borrow","","",245,[[["self"]],["t"]]],[11,"borrow_mut","","",245,[[["self"]],["t"]]],[11,"into","","",245,[[],["u"]]],[11,"from","","",245,[[["t"]],["t"]]],[11,"try_into","","",245,[[],["result"]]],[11,"try_from","","",245,[[["u"]],["result"]]],[11,"type_id","","",245,[[["self"]],["typeid"]]],[11,"borrow","","",246,[[["self"]],["t"]]],[11,"borrow_mut","","",246,[[["self"]],["t"]]],[11,"into","","",246,[[],["u"]]],[11,"from","","",246,[[["t"]],["t"]]],[11,"try_into","","",246,[[],["result"]]],[11,"try_from","","",246,[[["u"]],["result"]]],[11,"type_id","","",246,[[["self"]],["typeid"]]],[11,"borrow","","",247,[[["self"]],["t"]]],[11,"borrow_mut","","",247,[[["self"]],["t"]]],[11,"into","","",247,[[],["u"]]],[11,"from","","",247,[[["t"]],["t"]]],[11,"try_into","","",247,[[],["result"]]],[11,"try_from","","",247,[[["u"]],["result"]]],[11,"type_id","","",247,[[["self"]],["typeid"]]],[11,"borrow","","",248,[[["self"]],["t"]]],[11,"borrow_mut","","",248,[[["self"]],["t"]]],[11,"into","","",248,[[],["u"]]],[11,"from","","",248,[[["t"]],["t"]]],[11,"try_into","","",248,[[],["result"]]],[11,"try_from","","",248,[[["u"]],["result"]]],[11,"type_id","","",248,[[["self"]],["typeid"]]],[11,"borrow","","",249,[[["self"]],["t"]]],[11,"borrow_mut","","",249,[[["self"]],["t"]]],[11,"into","","",249,[[],["u"]]],[11,"from","","",249,[[["t"]],["t"]]],[11,"try_into","","",249,[[],["result"]]],[11,"try_from","","",249,[[["u"]],["result"]]],[11,"type_id","","",249,[[["self"]],["typeid"]]],[11,"borrow","","",250,[[["self"]],["t"]]],[11,"borrow_mut","","",250,[[["self"]],["t"]]],[11,"into","","",250,[[],["u"]]],[11,"from","","",250,[[["t"]],["t"]]],[11,"try_into","","",250,[[],["result"]]],[11,"try_from","","",250,[[["u"]],["result"]]],[11,"type_id","","",250,[[["self"]],["typeid"]]],[11,"borrow","","",251,[[["self"]],["t"]]],[11,"borrow_mut","","",251,[[["self"]],["t"]]],[11,"into","","",251,[[],["u"]]],[11,"from","","",251,[[["t"]],["t"]]],[11,"try_into","","",251,[[],["result"]]],[11,"try_from","","",251,[[["u"]],["result"]]],[11,"type_id","","",251,[[["self"]],["typeid"]]],[11,"borrow","","",252,[[["self"]],["t"]]],[11,"borrow_mut","","",252,[[["self"]],["t"]]],[11,"into","","",252,[[],["u"]]],[11,"from","","",252,[[["t"]],["t"]]],[11,"try_into","","",252,[[],["result"]]],[11,"try_from","","",252,[[["u"]],["result"]]],[11,"type_id","","",252,[[["self"]],["typeid"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"into","","",139,[[],["u"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"try_into","","",139,[[],["result"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"type_id","","",139,[[["self"]],["typeid"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"into","","",140,[[],["u"]]],[11,"from","","",140,[[["t"]],["t"]]],[11,"try_into","","",140,[[],["result"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"type_id","","",140,[[["self"]],["typeid"]]],[11,"borrow","","",253,[[["self"]],["t"]]],[11,"borrow_mut","","",253,[[["self"]],["t"]]],[11,"into","","",253,[[],["u"]]],[11,"from","","",253,[[["t"]],["t"]]],[11,"try_into","","",253,[[],["result"]]],[11,"try_from","","",253,[[["u"]],["result"]]],[11,"type_id","","",253,[[["self"]],["typeid"]]],[11,"borrow","","",254,[[["self"]],["t"]]],[11,"borrow_mut","","",254,[[["self"]],["t"]]],[11,"into","","",254,[[],["u"]]],[11,"from","","",254,[[["t"]],["t"]]],[11,"try_into","","",254,[[],["result"]]],[11,"try_from","","",254,[[["u"]],["result"]]],[11,"type_id","","",254,[[["self"]],["typeid"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"into","","",141,[[],["u"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"try_into","","",141,[[],["result"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"type_id","","",141,[[["self"]],["typeid"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"into","","",142,[[],["u"]]],[11,"from","","",142,[[["t"]],["t"]]],[11,"try_into","","",142,[[],["result"]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"type_id","","",142,[[["self"]],["typeid"]]],[11,"borrow","core::str","",255,[[["self"]],["t"]]],[11,"borrow_mut","","",255,[[["self"]],["t"]]],[11,"into","","",255,[[],["u"]]],[11,"from","","",255,[[["t"]],["t"]]],[11,"try_into","","",255,[[],["result"]]],[11,"try_from","","",255,[[["u"]],["result"]]],[11,"type_id","","",255,[[["self"]],["typeid"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"into","","",150,[[],["u"]]],[11,"from","","",150,[[["t"]],["t"]]],[11,"try_into","","",150,[[],["result"]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"type_id","","",150,[[["self"]],["typeid"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"into","","",151,[[],["u"]]],[11,"from","","",151,[[["t"]],["t"]]],[11,"try_into","","",151,[[],["result"]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"type_id","","",151,[[["self"]],["typeid"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"into","","",152,[[],["u"]]],[11,"from","","",152,[[["t"]],["t"]]],[11,"try_into","","",152,[[],["result"]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"type_id","","",152,[[["self"]],["typeid"]]],[11,"borrow","","",256,[[["self"]],["t"]]],[11,"borrow_mut","","",256,[[["self"]],["t"]]],[11,"into","","",256,[[],["u"]]],[11,"from","","",256,[[["t"]],["t"]]],[11,"try_into","","",256,[[],["result"]]],[11,"try_from","","",256,[[["u"]],["result"]]],[11,"type_id","","",256,[[["self"]],["typeid"]]],[11,"borrow","","",257,[[["self"]],["t"]]],[11,"borrow_mut","","",257,[[["self"]],["t"]]],[11,"into","","",257,[[],["u"]]],[11,"from","","",257,[[["t"]],["t"]]],[11,"try_into","","",257,[[],["result"]]],[11,"try_from","","",257,[[["u"]],["result"]]],[11,"type_id","","",257,[[["self"]],["typeid"]]],[11,"borrow","","",258,[[["self"]],["t"]]],[11,"borrow_mut","","",258,[[["self"]],["t"]]],[11,"into","","",258,[[],["u"]]],[11,"from","","",258,[[["t"]],["t"]]],[11,"try_into","","",258,[[],["result"]]],[11,"try_from","","",258,[[["u"]],["result"]]],[11,"type_id","","",258,[[["self"]],["typeid"]]],[11,"borrow","","",259,[[["self"]],["t"]]],[11,"borrow_mut","","",259,[[["self"]],["t"]]],[11,"into","","",259,[[],["u"]]],[11,"from","","",259,[[["t"]],["t"]]],[11,"try_into","","",259,[[],["result"]]],[11,"try_from","","",259,[[["u"]],["result"]]],[11,"type_id","","",259,[[["self"]],["typeid"]]],[11,"borrow","","",260,[[["self"]],["t"]]],[11,"borrow_mut","","",260,[[["self"]],["t"]]],[11,"into","","",260,[[],["u"]]],[11,"from","","",260,[[["t"]],["t"]]],[11,"try_into","","",260,[[],["result"]]],[11,"try_from","","",260,[[["u"]],["result"]]],[11,"type_id","","",260,[[["self"]],["typeid"]]],[11,"borrow","","",261,[[["self"]],["t"]]],[11,"borrow_mut","","",261,[[["self"]],["t"]]],[11,"into","","",261,[[],["u"]]],[11,"from","","",261,[[["t"]],["t"]]],[11,"try_into","","",261,[[],["result"]]],[11,"try_from","","",261,[[["u"]],["result"]]],[11,"type_id","","",261,[[["self"]],["typeid"]]],[11,"borrow","","",262,[[["self"]],["t"]]],[11,"borrow_mut","","",262,[[["self"]],["t"]]],[11,"into","","",262,[[],["u"]]],[11,"from","","",262,[[["t"]],["t"]]],[11,"try_into","","",262,[[],["result"]]],[11,"try_from","","",262,[[["u"]],["result"]]],[11,"type_id","","",262,[[["self"]],["typeid"]]],[11,"borrow","","",263,[[["self"]],["t"]]],[11,"borrow_mut","","",263,[[["self"]],["t"]]],[11,"into","","",263,[[],["u"]]],[11,"from","","",263,[[["t"]],["t"]]],[11,"try_into","","",263,[[],["result"]]],[11,"try_from","","",263,[[["u"]],["result"]]],[11,"type_id","","",263,[[["self"]],["typeid"]]],[11,"borrow","","",264,[[["self"]],["t"]]],[11,"borrow_mut","","",264,[[["self"]],["t"]]],[11,"into","","",264,[[],["u"]]],[11,"from","","",264,[[["t"]],["t"]]],[11,"try_into","","",264,[[],["result"]]],[11,"try_from","","",264,[[["u"]],["result"]]],[11,"type_id","","",264,[[["self"]],["typeid"]]],[11,"borrow","","",265,[[["self"]],["t"]]],[11,"borrow_mut","","",265,[[["self"]],["t"]]],[11,"into","","",265,[[],["u"]]],[11,"from","","",265,[[["t"]],["t"]]],[11,"try_into","","",265,[[],["result"]]],[11,"try_from","","",265,[[["u"]],["result"]]],[11,"type_id","","",265,[[["self"]],["typeid"]]],[11,"borrow","","",266,[[["self"]],["t"]]],[11,"borrow_mut","","",266,[[["self"]],["t"]]],[11,"into","","",266,[[],["u"]]],[11,"from","","",266,[[["t"]],["t"]]],[11,"try_into","","",266,[[],["result"]]],[11,"try_from","","",266,[[["u"]],["result"]]],[11,"type_id","","",266,[[["self"]],["typeid"]]],[11,"borrow","","",267,[[["self"]],["t"]]],[11,"borrow_mut","","",267,[[["self"]],["t"]]],[11,"into","","",267,[[],["u"]]],[11,"from","","",267,[[["t"]],["t"]]],[11,"try_into","","",267,[[],["result"]]],[11,"try_from","","",267,[[["u"]],["result"]]],[11,"type_id","","",267,[[["self"]],["typeid"]]],[11,"borrow","","",268,[[["self"]],["t"]]],[11,"borrow_mut","","",268,[[["self"]],["t"]]],[11,"into","","",268,[[],["u"]]],[11,"from","","",268,[[["t"]],["t"]]],[11,"try_into","","",268,[[],["result"]]],[11,"try_from","","",268,[[["u"]],["result"]]],[11,"type_id","","",268,[[["self"]],["typeid"]]],[11,"borrow","","",269,[[["self"]],["t"]]],[11,"borrow_mut","","",269,[[["self"]],["t"]]],[11,"into","","",269,[[],["u"]]],[11,"from","","",269,[[["t"]],["t"]]],[11,"try_into","","",269,[[],["result"]]],[11,"try_from","","",269,[[["u"]],["result"]]],[11,"type_id","","",269,[[["self"]],["typeid"]]],[11,"borrow","","",270,[[["self"]],["t"]]],[11,"borrow_mut","","",270,[[["self"]],["t"]]],[11,"into","","",270,[[],["u"]]],[11,"from","","",270,[[["t"]],["t"]]],[11,"try_into","","",270,[[],["result"]]],[11,"try_from","","",270,[[["u"]],["result"]]],[11,"type_id","","",270,[[["self"]],["typeid"]]],[11,"borrow","","",271,[[["self"]],["t"]]],[11,"borrow_mut","","",271,[[["self"]],["t"]]],[11,"into","","",271,[[],["u"]]],[11,"from","","",271,[[["t"]],["t"]]],[11,"try_into","","",271,[[],["result"]]],[11,"try_from","","",271,[[["u"]],["result"]]],[11,"type_id","","",271,[[["self"]],["typeid"]]],[11,"borrow","","",272,[[["self"]],["t"]]],[11,"borrow_mut","","",272,[[["self"]],["t"]]],[11,"into","","",272,[[],["u"]]],[11,"from","","",272,[[["t"]],["t"]]],[11,"try_into","","",272,[[],["result"]]],[11,"try_from","","",272,[[["u"]],["result"]]],[11,"type_id","","",272,[[["self"]],["typeid"]]],[11,"borrow","","",273,[[["self"]],["t"]]],[11,"borrow_mut","","",273,[[["self"]],["t"]]],[11,"into","","",273,[[],["u"]]],[11,"from","","",273,[[["t"]],["t"]]],[11,"try_into","","",273,[[],["result"]]],[11,"try_from","","",273,[[["u"]],["result"]]],[11,"type_id","","",273,[[["self"]],["typeid"]]],[11,"borrow","","",274,[[["self"]],["t"]]],[11,"borrow_mut","","",274,[[["self"]],["t"]]],[11,"into","","",274,[[],["u"]]],[11,"from","","",274,[[["t"]],["t"]]],[11,"try_into","","",274,[[],["result"]]],[11,"try_from","","",274,[[["u"]],["result"]]],[11,"type_id","","",274,[[["self"]],["typeid"]]],[11,"borrow","core::str::pattern","",275,[[["self"]],["t"]]],[11,"borrow_mut","","",275,[[["self"]],["t"]]],[11,"into","","",275,[[],["u"]]],[11,"from","","",275,[[["t"]],["t"]]],[11,"try_into","","",275,[[],["result"]]],[11,"try_from","","",275,[[["u"]],["result"]]],[11,"type_id","","",275,[[["self"]],["typeid"]]],[11,"borrow","","",276,[[["self"]],["t"]]],[11,"borrow_mut","","",276,[[["self"]],["t"]]],[11,"into","","",276,[[],["u"]]],[11,"from","","",276,[[["t"]],["t"]]],[11,"try_into","","",276,[[],["result"]]],[11,"try_from","","",276,[[["u"]],["result"]]],[11,"type_id","","",276,[[["self"]],["typeid"]]],[11,"borrow","","",277,[[["self"]],["t"]]],[11,"borrow_mut","","",277,[[["self"]],["t"]]],[11,"into","","",277,[[],["u"]]],[11,"from","","",277,[[["t"]],["t"]]],[11,"try_into","","",277,[[],["result"]]],[11,"try_from","","",277,[[["u"]],["result"]]],[11,"type_id","","",277,[[["self"]],["typeid"]]],[11,"borrow","","",278,[[["self"]],["t"]]],[11,"borrow_mut","","",278,[[["self"]],["t"]]],[11,"into","","",278,[[],["u"]]],[11,"from","","",278,[[["t"]],["t"]]],[11,"try_into","","",278,[[],["result"]]],[11,"try_from","","",278,[[["u"]],["result"]]],[11,"type_id","","",278,[[["self"]],["typeid"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"into","","",143,[[],["u"]]],[11,"from","","",143,[[["t"]],["t"]]],[11,"try_into","","",143,[[],["result"]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"type_id","","",143,[[["self"]],["typeid"]]],[11,"borrow","core::str::lossy","",148,[[["self"]],["t"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"type_id","","",148,[[["self"]],["typeid"]]],[11,"borrow","","",279,[[["self"]],["t"]]],[11,"borrow_mut","","",279,[[["self"]],["t"]]],[11,"into","","",279,[[],["u"]]],[11,"from","","",279,[[["t"]],["t"]]],[11,"try_into","","",279,[[],["result"]]],[11,"try_from","","",279,[[["u"]],["result"]]],[11,"type_id","","",279,[[["self"]],["typeid"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"into","","",147,[[],["u"]]],[11,"from","","",147,[[["t"]],["t"]]],[11,"try_into","","",147,[[],["result"]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"type_id","","",147,[[["self"]],["typeid"]]],[11,"borrow","core::time","",153,[[["self"]],["t"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"into","","",153,[[],["u"]]],[11,"from","","",153,[[["t"]],["t"]]],[11,"try_into","","",153,[[],["result"]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"type_id","","",153,[[["self"]],["typeid"]]],[11,"borrow","core::task","",158,[[["self"]],["t"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"into","","",158,[[],["u"]]],[11,"from","","",158,[[["t"]],["t"]]],[11,"try_into","","",158,[[],["result"]]],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"type_id","","",158,[[["self"]],["typeid"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"into","","",156,[[],["u"]]],[11,"from","","",156,[[["t"]],["t"]]],[11,"try_into","","",156,[[],["result"]]],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"type_id","","",156,[[["self"]],["typeid"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"into","","",157,[[],["u"]]],[11,"from","","",157,[[["t"]],["t"]]],[11,"try_into","","",157,[[],["result"]]],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"type_id","","",157,[[["self"]],["typeid"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"into","","",159,[[],["u"]]],[11,"from","","",159,[[["t"]],["t"]]],[11,"try_into","","",159,[[],["result"]]],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"type_id","","",159,[[["self"]],["typeid"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"into","","",155,[[],["u"]]],[11,"from","","",155,[[["t"]],["t"]]],[11,"from","","",155,[[],["t"]]],[11,"try_into","","",155,[[],["result"]]],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"type_id","","",155,[[["self"]],["typeid"]]],[11,"borrow","core::alloc","",160,[[["self"]],["t"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"into","","",160,[[],["u"]]],[11,"from","","",160,[[["t"]],["t"]]],[11,"try_into","","",160,[[],["result"]]],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"type_id","","",160,[[["self"]],["typeid"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"into","","",163,[[],["u"]]],[11,"from","","",163,[[["t"]],["t"]]],[11,"try_into","","",163,[[],["result"]]],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"type_id","","",163,[[["self"]],["typeid"]]],[11,"borrow","","",280,[[["self"]],["t"]]],[11,"borrow_mut","","",280,[[["self"]],["t"]]],[11,"into","","",280,[[],["u"]]],[11,"from","","",280,[[["t"]],["t"]]],[11,"try_into","","",280,[[],["result"]]],[11,"try_from","","",280,[[["u"]],["result"]]],[11,"type_id","","",280,[[["self"]],["typeid"]]],[11,"borrow","","",281,[[["self"]],["t"]]],[11,"borrow_mut","","",281,[[["self"]],["t"]]],[11,"into","","",281,[[],["u"]]],[11,"from","","",281,[[["t"]],["t"]]],[11,"try_into","","",281,[[],["result"]]],[11,"try_from","","",281,[[["u"]],["result"]]],[11,"type_id","","",281,[[["self"]],["typeid"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"into","","",164,[[],["u"]]],[11,"from","","",164,[[["t"]],["t"]]],[11,"try_into","","",164,[[],["result"]]],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"type_id","","",164,[[["self"]],["typeid"]]],[11,"borrow","core::arch::arm","",282,[[["self"]],["t"]]],[11,"borrow_mut","","",282,[[["self"]],["t"]]],[11,"into","","",282,[[],["u"]]],[11,"from","","",282,[[["t"]],["t"]]],[11,"try_into","","",282,[[],["result"]]],[11,"try_from","","",282,[[["u"]],["result"]]],[11,"type_id","","",282,[[["self"]],["typeid"]]],[11,"borrow","","",283,[[["self"]],["t"]]],[11,"borrow_mut","","",283,[[["self"]],["t"]]],[11,"into","","",283,[[],["u"]]],[11,"from","","",283,[[["t"]],["t"]]],[11,"try_into","","",283,[[],["result"]]],[11,"try_from","","",283,[[["u"]],["result"]]],[11,"type_id","","",283,[[["self"]],["typeid"]]],[11,"borrow","core::arch::x86","",284,[[["self"]],["t"]]],[11,"borrow_mut","","",284,[[["self"]],["t"]]],[11,"into","","",284,[[],["u"]]],[11,"from","","",284,[[["t"]],["t"]]],[11,"try_into","","",284,[[],["result"]]],[11,"try_from","","",284,[[["u"]],["result"]]],[11,"type_id","","",284,[[["self"]],["typeid"]]],[11,"borrow","","",285,[[["self"]],["t"]]],[11,"borrow_mut","","",285,[[["self"]],["t"]]],[11,"into","","",285,[[],["u"]]],[11,"from","","",285,[[["t"]],["t"]]],[11,"try_into","","",285,[[],["result"]]],[11,"try_from","","",285,[[["u"]],["result"]]],[11,"type_id","","",285,[[["self"]],["typeid"]]],[11,"borrow","","",286,[[["self"]],["t"]]],[11,"borrow_mut","","",286,[[["self"]],["t"]]],[11,"into","","",286,[[],["u"]]],[11,"from","","",286,[[["t"]],["t"]]],[11,"try_into","","",286,[[],["result"]]],[11,"try_from","","",286,[[["u"]],["result"]]],[11,"type_id","","",286,[[["self"]],["typeid"]]],[11,"borrow","","",287,[[["self"]],["t"]]],[11,"borrow_mut","","",287,[[["self"]],["t"]]],[11,"into","","",287,[[],["u"]]],[11,"from","","",287,[[["t"]],["t"]]],[11,"try_into","","",287,[[],["result"]]],[11,"try_from","","",287,[[["u"]],["result"]]],[11,"type_id","","",287,[[["self"]],["typeid"]]],[11,"borrow","","",288,[[["self"]],["t"]]],[11,"borrow_mut","","",288,[[["self"]],["t"]]],[11,"into","","",288,[[],["u"]]],[11,"from","","",288,[[["t"]],["t"]]],[11,"try_into","","",288,[[],["result"]]],[11,"try_from","","",288,[[["u"]],["result"]]],[11,"type_id","","",288,[[["self"]],["typeid"]]],[11,"borrow","","",289,[[["self"]],["t"]]],[11,"borrow_mut","","",289,[[["self"]],["t"]]],[11,"into","","",289,[[],["u"]]],[11,"from","","",289,[[["t"]],["t"]]],[11,"try_into","","",289,[[],["result"]]],[11,"try_from","","",289,[[["u"]],["result"]]],[11,"type_id","","",289,[[["self"]],["typeid"]]],[11,"borrow","","",290,[[["self"]],["t"]]],[11,"borrow_mut","","",290,[[["self"]],["t"]]],[11,"into","","",290,[[],["u"]]],[11,"from","","",290,[[["t"]],["t"]]],[11,"try_into","","",290,[[],["result"]]],[11,"try_from","","",290,[[["u"]],["result"]]],[11,"type_id","","",290,[[["self"]],["typeid"]]],[11,"borrow","","",291,[[["self"]],["t"]]],[11,"borrow_mut","","",291,[[["self"]],["t"]]],[11,"into","","",291,[[],["u"]]],[11,"from","","",291,[[["t"]],["t"]]],[11,"try_into","","",291,[[],["result"]]],[11,"try_from","","",291,[[["u"]],["result"]]],[11,"type_id","","",291,[[["self"]],["typeid"]]],[11,"borrow","","",292,[[["self"]],["t"]]],[11,"borrow_mut","","",292,[[["self"]],["t"]]],[11,"into","","",292,[[],["u"]]],[11,"from","","",292,[[["t"]],["t"]]],[11,"try_into","","",292,[[],["result"]]],[11,"try_from","","",292,[[["u"]],["result"]]],[11,"type_id","","",292,[[["self"]],["typeid"]]],[11,"borrow","","",293,[[["self"]],["t"]]],[11,"borrow_mut","","",293,[[["self"]],["t"]]],[11,"into","","",293,[[],["u"]]],[11,"from","","",293,[[["t"]],["t"]]],[11,"try_into","","",293,[[],["result"]]],[11,"try_from","","",293,[[["u"]],["result"]]],[11,"type_id","","",293,[[["self"]],["typeid"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"into","","",165,[[],["u"]]],[11,"from","","",165,[[["t"]],["t"]]],[11,"try_into","","",165,[[],["result"]]],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"type_id","","",165,[[["self"]],["typeid"]]],[11,"borrow","core::arch::aarch64","",294,[[["self"]],["t"]]],[11,"borrow_mut","","",294,[[["self"]],["t"]]],[11,"into","","",294,[[],["u"]]],[11,"from","","",294,[[["t"]],["t"]]],[11,"try_into","","",294,[[],["result"]]],[11,"try_from","","",294,[[["u"]],["result"]]],[11,"type_id","","",294,[[["self"]],["typeid"]]],[11,"borrow","","",295,[[["self"]],["t"]]],[11,"borrow_mut","","",295,[[["self"]],["t"]]],[11,"into","","",295,[[],["u"]]],[11,"from","","",295,[[["t"]],["t"]]],[11,"try_into","","",295,[[],["result"]]],[11,"try_from","","",295,[[["u"]],["result"]]],[11,"type_id","","",295,[[["self"]],["typeid"]]],[11,"borrow","","",296,[[["self"]],["t"]]],[11,"borrow_mut","","",296,[[["self"]],["t"]]],[11,"into","","",296,[[],["u"]]],[11,"from","","",296,[[["t"]],["t"]]],[11,"try_into","","",296,[[],["result"]]],[11,"try_from","","",296,[[["u"]],["result"]]],[11,"type_id","","",296,[[["self"]],["typeid"]]],[11,"borrow","","",297,[[["self"]],["t"]]],[11,"borrow_mut","","",297,[[["self"]],["t"]]],[11,"into","","",297,[[],["u"]]],[11,"from","","",297,[[["t"]],["t"]]],[11,"try_into","","",297,[[],["result"]]],[11,"try_from","","",297,[[["u"]],["result"]]],[11,"type_id","","",297,[[["self"]],["typeid"]]],[11,"borrow","","",175,[[["self"]],["t"]]],[11,"borrow_mut","","",175,[[["self"]],["t"]]],[11,"into","","",175,[[],["u"]]],[11,"from","","",175,[[["t"]],["t"]]],[11,"try_into","","",175,[[],["result"]]],[11,"try_from","","",175,[[["u"]],["result"]]],[11,"type_id","","",175,[[["self"]],["typeid"]]],[11,"borrow","","",176,[[["self"]],["t"]]],[11,"borrow_mut","","",176,[[["self"]],["t"]]],[11,"into","","",176,[[],["u"]]],[11,"from","","",176,[[["t"]],["t"]]],[11,"try_into","","",176,[[],["result"]]],[11,"try_from","","",176,[[["u"]],["result"]]],[11,"type_id","","",176,[[["self"]],["typeid"]]],[11,"borrow","","",177,[[["self"]],["t"]]],[11,"borrow_mut","","",177,[[["self"]],["t"]]],[11,"into","","",177,[[],["u"]]],[11,"from","","",177,[[["t"]],["t"]]],[11,"try_into","","",177,[[],["result"]]],[11,"try_from","","",177,[[["u"]],["result"]]],[11,"type_id","","",177,[[["self"]],["typeid"]]],[11,"borrow","","",178,[[["self"]],["t"]]],[11,"borrow_mut","","",178,[[["self"]],["t"]]],[11,"into","","",178,[[],["u"]]],[11,"from","","",178,[[["t"]],["t"]]],[11,"try_into","","",178,[[],["result"]]],[11,"try_from","","",178,[[["u"]],["result"]]],[11,"type_id","","",178,[[["self"]],["typeid"]]],[11,"borrow","","",179,[[["self"]],["t"]]],[11,"borrow_mut","","",179,[[["self"]],["t"]]],[11,"into","","",179,[[],["u"]]],[11,"from","","",179,[[["t"]],["t"]]],[11,"try_into","","",179,[[],["result"]]],[11,"try_from","","",179,[[["u"]],["result"]]],[11,"type_id","","",179,[[["self"]],["typeid"]]],[11,"borrow","","",180,[[["self"]],["t"]]],[11,"borrow_mut","","",180,[[["self"]],["t"]]],[11,"into","","",180,[[],["u"]]],[11,"from","","",180,[[["t"]],["t"]]],[11,"try_into","","",180,[[],["result"]]],[11,"try_from","","",180,[[["u"]],["result"]]],[11,"type_id","","",180,[[["self"]],["typeid"]]],[11,"borrow","","",181,[[["self"]],["t"]]],[11,"borrow_mut","","",181,[[["self"]],["t"]]],[11,"into","","",181,[[],["u"]]],[11,"from","","",181,[[["t"]],["t"]]],[11,"try_into","","",181,[[],["result"]]],[11,"try_from","","",181,[[["u"]],["result"]]],[11,"type_id","","",181,[[["self"]],["typeid"]]],[11,"borrow","","",182,[[["self"]],["t"]]],[11,"borrow_mut","","",182,[[["self"]],["t"]]],[11,"into","","",182,[[],["u"]]],[11,"from","","",182,[[["t"]],["t"]]],[11,"try_into","","",182,[[],["result"]]],[11,"try_from","","",182,[[["u"]],["result"]]],[11,"type_id","","",182,[[["self"]],["typeid"]]],[11,"borrow","","",183,[[["self"]],["t"]]],[11,"borrow_mut","","",183,[[["self"]],["t"]]],[11,"into","","",183,[[],["u"]]],[11,"from","","",183,[[["t"]],["t"]]],[11,"try_into","","",183,[[],["result"]]],[11,"try_from","","",183,[[["u"]],["result"]]],[11,"type_id","","",183,[[["self"]],["typeid"]]],[11,"borrow","core::arch::arm","",298,[[["self"]],["t"]]],[11,"borrow_mut","","",298,[[["self"]],["t"]]],[11,"into","","",298,[[],["u"]]],[11,"from","","",298,[[["t"]],["t"]]],[11,"try_into","","",298,[[],["result"]]],[11,"try_from","","",298,[[["u"]],["result"]]],[11,"type_id","","",298,[[["self"]],["typeid"]]],[11,"borrow","","",299,[[["self"]],["t"]]],[11,"borrow_mut","","",299,[[["self"]],["t"]]],[11,"into","","",299,[[],["u"]]],[11,"from","","",299,[[["t"]],["t"]]],[11,"try_into","","",299,[[],["result"]]],[11,"try_from","","",299,[[["u"]],["result"]]],[11,"type_id","","",299,[[["self"]],["typeid"]]],[11,"borrow","","",300,[[["self"]],["t"]]],[11,"borrow_mut","","",300,[[["self"]],["t"]]],[11,"into","","",300,[[],["u"]]],[11,"from","","",300,[[["t"]],["t"]]],[11,"try_into","","",300,[[],["result"]]],[11,"try_from","","",300,[[["u"]],["result"]]],[11,"type_id","","",300,[[["self"]],["typeid"]]],[11,"borrow","","",301,[[["self"]],["t"]]],[11,"borrow_mut","","",301,[[["self"]],["t"]]],[11,"into","","",301,[[],["u"]]],[11,"from","","",301,[[["t"]],["t"]]],[11,"try_into","","",301,[[],["result"]]],[11,"try_from","","",301,[[["u"]],["result"]]],[11,"type_id","","",301,[[["self"]],["typeid"]]],[11,"borrow","","",302,[[["self"]],["t"]]],[11,"borrow_mut","","",302,[[["self"]],["t"]]],[11,"into","","",302,[[],["u"]]],[11,"from","","",302,[[["t"]],["t"]]],[11,"try_into","","",302,[[],["result"]]],[11,"try_from","","",302,[[["u"]],["result"]]],[11,"type_id","","",302,[[["self"]],["typeid"]]],[11,"borrow","","",303,[[["self"]],["t"]]],[11,"borrow_mut","","",303,[[["self"]],["t"]]],[11,"into","","",303,[[],["u"]]],[11,"from","","",303,[[["t"]],["t"]]],[11,"try_into","","",303,[[],["result"]]],[11,"try_from","","",303,[[["u"]],["result"]]],[11,"type_id","","",303,[[["self"]],["typeid"]]],[11,"borrow","","",304,[[["self"]],["t"]]],[11,"borrow_mut","","",304,[[["self"]],["t"]]],[11,"into","","",304,[[],["u"]]],[11,"from","","",304,[[["t"]],["t"]]],[11,"try_into","","",304,[[],["result"]]],[11,"try_from","","",304,[[["u"]],["result"]]],[11,"type_id","","",304,[[["self"]],["typeid"]]],[11,"borrow","","",305,[[["self"]],["t"]]],[11,"borrow_mut","","",305,[[["self"]],["t"]]],[11,"into","","",305,[[],["u"]]],[11,"from","","",305,[[["t"]],["t"]]],[11,"try_into","","",305,[[],["result"]]],[11,"try_from","","",305,[[["u"]],["result"]]],[11,"type_id","","",305,[[["self"]],["typeid"]]],[11,"borrow","","",306,[[["self"]],["t"]]],[11,"borrow_mut","","",306,[[["self"]],["t"]]],[11,"into","","",306,[[],["u"]]],[11,"from","","",306,[[["t"]],["t"]]],[11,"try_into","","",306,[[],["result"]]],[11,"try_from","","",306,[[["u"]],["result"]]],[11,"type_id","","",306,[[["self"]],["typeid"]]],[11,"borrow","","",307,[[["self"]],["t"]]],[11,"borrow_mut","","",307,[[["self"]],["t"]]],[11,"into","","",307,[[],["u"]]],[11,"from","","",307,[[["t"]],["t"]]],[11,"try_into","","",307,[[],["result"]]],[11,"try_from","","",307,[[["u"]],["result"]]],[11,"type_id","","",307,[[["self"]],["typeid"]]],[11,"borrow","","",308,[[["self"]],["t"]]],[11,"borrow_mut","","",308,[[["self"]],["t"]]],[11,"into","","",308,[[],["u"]]],[11,"from","","",308,[[["t"]],["t"]]],[11,"try_into","","",308,[[],["result"]]],[11,"try_from","","",308,[[["u"]],["result"]]],[11,"type_id","","",308,[[["self"]],["typeid"]]],[11,"borrow","","",309,[[["self"]],["t"]]],[11,"borrow_mut","","",309,[[["self"]],["t"]]],[11,"into","","",309,[[],["u"]]],[11,"from","","",309,[[["t"]],["t"]]],[11,"try_into","","",309,[[],["result"]]],[11,"try_from","","",309,[[["u"]],["result"]]],[11,"type_id","","",309,[[["self"]],["typeid"]]],[11,"borrow","","",310,[[["self"]],["t"]]],[11,"borrow_mut","","",310,[[["self"]],["t"]]],[11,"into","","",310,[[],["u"]]],[11,"from","","",310,[[["t"]],["t"]]],[11,"try_into","","",310,[[],["result"]]],[11,"try_from","","",310,[[["u"]],["result"]]],[11,"type_id","","",310,[[["self"]],["typeid"]]],[11,"borrow","","",311,[[["self"]],["t"]]],[11,"borrow_mut","","",311,[[["self"]],["t"]]],[11,"into","","",311,[[],["u"]]],[11,"from","","",311,[[["t"]],["t"]]],[11,"try_into","","",311,[[],["result"]]],[11,"try_from","","",311,[[["u"]],["result"]]],[11,"type_id","","",311,[[["self"]],["typeid"]]],[11,"borrow","","",312,[[["self"]],["t"]]],[11,"borrow_mut","","",312,[[["self"]],["t"]]],[11,"into","","",312,[[],["u"]]],[11,"from","","",312,[[["t"]],["t"]]],[11,"try_into","","",312,[[],["result"]]],[11,"try_from","","",312,[[["u"]],["result"]]],[11,"type_id","","",312,[[["self"]],["typeid"]]],[11,"borrow","","",313,[[["self"]],["t"]]],[11,"borrow_mut","","",313,[[["self"]],["t"]]],[11,"into","","",313,[[],["u"]]],[11,"from","","",313,[[["t"]],["t"]]],[11,"try_into","","",313,[[],["result"]]],[11,"try_from","","",313,[[["u"]],["result"]]],[11,"type_id","","",313,[[["self"]],["typeid"]]],[11,"borrow","","",314,[[["self"]],["t"]]],[11,"borrow_mut","","",314,[[["self"]],["t"]]],[11,"into","","",314,[[],["u"]]],[11,"from","","",314,[[["t"]],["t"]]],[11,"try_into","","",314,[[],["result"]]],[11,"try_from","","",314,[[["u"]],["result"]]],[11,"type_id","","",314,[[["self"]],["typeid"]]],[11,"borrow","","",315,[[["self"]],["t"]]],[11,"borrow_mut","","",315,[[["self"]],["t"]]],[11,"into","","",315,[[],["u"]]],[11,"from","","",315,[[["t"]],["t"]]],[11,"try_into","","",315,[[],["result"]]],[11,"try_from","","",315,[[["u"]],["result"]]],[11,"type_id","","",315,[[["self"]],["typeid"]]],[11,"borrow","","",316,[[["self"]],["t"]]],[11,"borrow_mut","","",316,[[["self"]],["t"]]],[11,"into","","",316,[[],["u"]]],[11,"from","","",316,[[["t"]],["t"]]],[11,"try_into","","",316,[[],["result"]]],[11,"try_from","","",316,[[["u"]],["result"]]],[11,"type_id","","",316,[[["self"]],["typeid"]]],[11,"borrow","","",317,[[["self"]],["t"]]],[11,"borrow_mut","","",317,[[["self"]],["t"]]],[11,"into","","",317,[[],["u"]]],[11,"from","","",317,[[["t"]],["t"]]],[11,"try_into","","",317,[[],["result"]]],[11,"try_from","","",317,[[["u"]],["result"]]],[11,"type_id","","",317,[[["self"]],["typeid"]]],[11,"borrow","","",318,[[["self"]],["t"]]],[11,"borrow_mut","","",318,[[["self"]],["t"]]],[11,"into","","",318,[[],["u"]]],[11,"from","","",318,[[["t"]],["t"]]],[11,"try_into","","",318,[[],["result"]]],[11,"try_from","","",318,[[["u"]],["result"]]],[11,"type_id","","",318,[[["self"]],["typeid"]]],[11,"borrow","","",319,[[["self"]],["t"]]],[11,"borrow_mut","","",319,[[["self"]],["t"]]],[11,"into","","",319,[[],["u"]]],[11,"from","","",319,[[["t"]],["t"]]],[11,"try_into","","",319,[[],["result"]]],[11,"try_from","","",319,[[["u"]],["result"]]],[11,"type_id","","",319,[[["self"]],["typeid"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"into","","",166,[[],["u"]]],[11,"from","","",166,[[["t"]],["t"]]],[11,"try_into","","",166,[[],["result"]]],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"type_id","","",166,[[["self"]],["typeid"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"into","","",167,[[],["u"]]],[11,"from","","",167,[[["t"]],["t"]]],[11,"try_into","","",167,[[],["result"]]],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"type_id","","",167,[[["self"]],["typeid"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"into","","",168,[[],["u"]]],[11,"from","","",168,[[["t"]],["t"]]],[11,"try_into","","",168,[[],["result"]]],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"type_id","","",168,[[["self"]],["typeid"]]],[11,"borrow","","",169,[[["self"]],["t"]]],[11,"borrow_mut","","",169,[[["self"]],["t"]]],[11,"into","","",169,[[],["u"]]],[11,"from","","",169,[[["t"]],["t"]]],[11,"try_into","","",169,[[],["result"]]],[11,"try_from","","",169,[[["u"]],["result"]]],[11,"type_id","","",169,[[["self"]],["typeid"]]],[11,"borrow","","",170,[[["self"]],["t"]]],[11,"borrow_mut","","",170,[[["self"]],["t"]]],[11,"into","","",170,[[],["u"]]],[11,"from","","",170,[[["t"]],["t"]]],[11,"try_into","","",170,[[],["result"]]],[11,"try_from","","",170,[[["u"]],["result"]]],[11,"type_id","","",170,[[["self"]],["typeid"]]],[11,"borrow","","",171,[[["self"]],["t"]]],[11,"borrow_mut","","",171,[[["self"]],["t"]]],[11,"into","","",171,[[],["u"]]],[11,"from","","",171,[[["t"]],["t"]]],[11,"try_into","","",171,[[],["result"]]],[11,"try_from","","",171,[[["u"]],["result"]]],[11,"type_id","","",171,[[["self"]],["typeid"]]],[11,"borrow","","",172,[[["self"]],["t"]]],[11,"borrow_mut","","",172,[[["self"]],["t"]]],[11,"into","","",172,[[],["u"]]],[11,"from","","",172,[[["t"]],["t"]]],[11,"try_into","","",172,[[],["result"]]],[11,"try_from","","",172,[[["u"]],["result"]]],[11,"type_id","","",172,[[["self"]],["typeid"]]],[11,"borrow","","",173,[[["self"]],["t"]]],[11,"borrow_mut","","",173,[[["self"]],["t"]]],[11,"into","","",173,[[],["u"]]],[11,"from","","",173,[[["t"]],["t"]]],[11,"try_into","","",173,[[],["result"]]],[11,"try_from","","",173,[[["u"]],["result"]]],[11,"type_id","","",173,[[["self"]],["typeid"]]],[11,"borrow","","",174,[[["self"]],["t"]]],[11,"borrow_mut","","",174,[[["self"]],["t"]]],[11,"into","","",174,[[],["u"]]],[11,"from","","",174,[[["t"]],["t"]]],[11,"try_into","","",174,[[],["result"]]],[11,"try_from","","",174,[[["u"]],["result"]]],[11,"type_id","","",174,[[["self"]],["typeid"]]],[11,"borrow","core::arch::wasm32","",320,[[["self"]],["t"]]],[11,"borrow_mut","","",320,[[["self"]],["t"]]],[11,"into","","",320,[[],["u"]]],[11,"from","","",320,[[["t"]],["t"]]],[11,"try_into","","",320,[[],["result"]]],[11,"try_from","","",320,[[["u"]],["result"]]],[11,"type_id","","",320,[[["self"]],["typeid"]]],[11,"borrow","core::arch::mips","",321,[[["self"]],["t"]]],[11,"borrow_mut","","",321,[[["self"]],["t"]]],[11,"into","","",321,[[],["u"]]],[11,"from","","",321,[[["t"]],["t"]]],[11,"try_into","","",321,[[],["result"]]],[11,"try_from","","",321,[[["u"]],["result"]]],[11,"type_id","","",321,[[["self"]],["typeid"]]],[11,"borrow","","",322,[[["self"]],["t"]]],[11,"borrow_mut","","",322,[[["self"]],["t"]]],[11,"into","","",322,[[],["u"]]],[11,"from","","",322,[[["t"]],["t"]]],[11,"try_into","","",322,[[],["result"]]],[11,"try_from","","",322,[[["u"]],["result"]]],[11,"type_id","","",322,[[["self"]],["typeid"]]],[11,"borrow","","",323,[[["self"]],["t"]]],[11,"borrow_mut","","",323,[[["self"]],["t"]]],[11,"into","","",323,[[],["u"]]],[11,"from","","",323,[[["t"]],["t"]]],[11,"try_into","","",323,[[],["result"]]],[11,"try_from","","",323,[[["u"]],["result"]]],[11,"type_id","","",323,[[["self"]],["typeid"]]],[11,"borrow","","",324,[[["self"]],["t"]]],[11,"borrow_mut","","",324,[[["self"]],["t"]]],[11,"into","","",324,[[],["u"]]],[11,"from","","",324,[[["t"]],["t"]]],[11,"try_into","","",324,[[],["result"]]],[11,"try_from","","",324,[[["u"]],["result"]]],[11,"type_id","","",324,[[["self"]],["typeid"]]],[11,"borrow","","",325,[[["self"]],["t"]]],[11,"borrow_mut","","",325,[[["self"]],["t"]]],[11,"into","","",325,[[],["u"]]],[11,"from","","",325,[[["t"]],["t"]]],[11,"try_into","","",325,[[],["result"]]],[11,"try_from","","",325,[[["u"]],["result"]]],[11,"type_id","","",325,[[["self"]],["typeid"]]],[11,"borrow","","",326,[[["self"]],["t"]]],[11,"borrow_mut","","",326,[[["self"]],["t"]]],[11,"into","","",326,[[],["u"]]],[11,"from","","",326,[[["t"]],["t"]]],[11,"try_into","","",326,[[],["result"]]],[11,"try_from","","",326,[[["u"]],["result"]]],[11,"type_id","","",326,[[["self"]],["typeid"]]],[11,"borrow","","",327,[[["self"]],["t"]]],[11,"borrow_mut","","",327,[[["self"]],["t"]]],[11,"into","","",327,[[],["u"]]],[11,"from","","",327,[[["t"]],["t"]]],[11,"try_into","","",327,[[],["result"]]],[11,"try_from","","",327,[[["u"]],["result"]]],[11,"type_id","","",327,[[["self"]],["typeid"]]],[11,"borrow","","",328,[[["self"]],["t"]]],[11,"borrow_mut","","",328,[[["self"]],["t"]]],[11,"into","","",328,[[],["u"]]],[11,"from","","",328,[[["t"]],["t"]]],[11,"try_into","","",328,[[],["result"]]],[11,"try_from","","",328,[[["u"]],["result"]]],[11,"type_id","","",328,[[["self"]],["typeid"]]],[11,"borrow","","",329,[[["self"]],["t"]]],[11,"borrow_mut","","",329,[[["self"]],["t"]]],[11,"into","","",329,[[],["u"]]],[11,"from","","",329,[[["t"]],["t"]]],[11,"try_into","","",329,[[],["result"]]],[11,"try_from","","",329,[[["u"]],["result"]]],[11,"type_id","","",329,[[["self"]],["typeid"]]],[11,"borrow","","",330,[[["self"]],["t"]]],[11,"borrow_mut","","",330,[[["self"]],["t"]]],[11,"into","","",330,[[],["u"]]],[11,"from","","",330,[[["t"]],["t"]]],[11,"try_into","","",330,[[],["result"]]],[11,"try_from","","",330,[[["u"]],["result"]]],[11,"type_id","","",330,[[["self"]],["typeid"]]],[11,"borrow","core::arch::powerpc","",331,[[["self"]],["t"]]],[11,"borrow_mut","","",331,[[["self"]],["t"]]],[11,"into","","",331,[[],["u"]]],[11,"from","","",331,[[["t"]],["t"]]],[11,"try_into","","",331,[[],["result"]]],[11,"try_from","","",331,[[["u"]],["result"]]],[11,"type_id","","",331,[[["self"]],["typeid"]]],[11,"borrow","","",332,[[["self"]],["t"]]],[11,"borrow_mut","","",332,[[["self"]],["t"]]],[11,"into","","",332,[[],["u"]]],[11,"from","","",332,[[["t"]],["t"]]],[11,"try_into","","",332,[[],["result"]]],[11,"try_from","","",332,[[["u"]],["result"]]],[11,"type_id","","",332,[[["self"]],["typeid"]]],[11,"borrow","","",333,[[["self"]],["t"]]],[11,"borrow_mut","","",333,[[["self"]],["t"]]],[11,"into","","",333,[[],["u"]]],[11,"from","","",333,[[["t"]],["t"]]],[11,"try_into","","",333,[[],["result"]]],[11,"try_from","","",333,[[["u"]],["result"]]],[11,"type_id","","",333,[[["self"]],["typeid"]]],[11,"borrow","","",334,[[["self"]],["t"]]],[11,"borrow_mut","","",334,[[["self"]],["t"]]],[11,"into","","",334,[[],["u"]]],[11,"from","","",334,[[["t"]],["t"]]],[11,"try_into","","",334,[[],["result"]]],[11,"try_from","","",334,[[["u"]],["result"]]],[11,"type_id","","",334,[[["self"]],["typeid"]]],[11,"clone","core::num","",3,[[["self"]],["nonzerou8"]]],[11,"clone","","",4,[[["self"]],["nonzerou16"]]],[11,"clone","","",5,[[["self"]],["nonzerou32"]]],[11,"clone","","",6,[[["self"]],["nonzerou64"]]],[11,"clone","","",7,[[["self"]],["nonzerou128"]]],[11,"clone","","",8,[[["self"]],["nonzerousize"]]],[11,"clone","","",9,[[["self"]],["nonzeroi8"]]],[11,"clone","","",10,[[["self"]],["nonzeroi16"]]],[11,"clone","","",11,[[["self"]],["nonzeroi32"]]],[11,"clone","","",12,[[["self"]],["nonzeroi64"]]],[11,"clone","","",13,[[["self"]],["nonzeroi128"]]],[11,"clone","","",14,[[["self"]],["nonzeroisize"]]],[11,"clone","","",0,[[["self"]],["wrapping"]]],[11,"clone","","",185,[[["self"]],["parsefloaterror"]]],[11,"clone","","",1,[[["self"]],["fpcategory"]]],[11,"clone","","",184,[[["self"]],["tryfrominterror"]]],[11,"clone","","",15,[[["self"]],["parseinterror"]]],[11,"clone","","",2,[[["self"]],["interrorkind"]]],[11,"clone","core::mem","",16,[[["self"]],["manuallydrop"]]],[11,"clone","","",17,[[["self"]],["self"]]],[11,"clone","","",186,[[["self"]],["self"]]],[11,"clone","core::ptr","",18,[[["self"]],["self"]]],[11,"clone","core::cmp","",23,[[["self"]],["ordering"]]],[11,"clone","","",22,[[["self"]],["reverse"]]],[11,"clone","core::convert","",187,[[["self"]],["infallible"]]],[11,"clone","core::marker","",188,[[["self"]],["self"]]],[11,"clone","","",189,[[["self"]],["phantompinned"]]],[11,"clone","core::ops","",39,[[["self"]],["generatorstate"]]],[11,"clone","","",190,[[["self"]],["rangefull"]]],[11,"clone","","",34,[[["self"]],["range"]]],[11,"clone","","",35,[[["self"]],["rangefrom"]]],[11,"clone","","",36,[[["self"]],["rangeto"]]],[11,"clone","","",40,[[["self"]],["rangeinclusive"]]],[11,"clone","","",37,[[["self"]],["rangetoinclusive"]]],[11,"clone","","",38,[[["self"]],["bound"]]],[11,"clone","core::any","",75,[[["self"]],["typeid"]]],[11,"clone","core::array","",76,[[["self"]],["self"]]],[11,"clone","","",191,[[["self"]],["tryfromsliceerror"]]],[11,"clone","core::ascii","",192,[[["self"]],["escapedefault"]]],[11,"clone","core::cell","",78,[[["self"]],["cell"]]],[11,"clone","","Panics",79,[[["self"]],["refcell"]]],[11,"clone","core::char","",196,[[["self"]],["parsecharerror"]]],[11,"clone","","",195,[[["self"]],["chartryfromerror"]]],[11,"clone","","",197,[[["self"]],["decodeutf16"]]],[11,"clone","","",84,[[["self"]],["decodeutf16error"]]],[11,"clone","","",198,[[["self"]],["escapeunicode"]]],[11,"clone","","",199,[[["self"]],["escapedefault"]]],[11,"clone","","",200,[[["self"]],["escapedebug"]]],[11,"clone","","",201,[[["self"]],["tolowercase"]]],[11,"clone","","",202,[[["self"]],["touppercase"]]],[11,"clone","core::ffi","",85,[[["self"]],["self"]]],[11,"clone","core::iter","",216,[[["self"]],["chain"]]],[11,"clone","","",224,[[["self"]],["self"]]],[11,"clone","","",214,[[["self"]],["self"]]],[11,"clone","","",223,[[["self"]],["zip"]]],[11,"clone","","",222,[[["self"]],["rev"]]],[11,"clone","","",213,[[["self"]],["copied"]]],[11,"clone","","",212,[[["self"]],["cloned"]]],[11,"clone","","",217,[[["self"]],["cycle"]]],[11,"clone","","",215,[[["self"]],["stepby"]]],[11,"clone","","",221,[[["self"]],["map"]]],[11,"clone","","",219,[[["self"]],["filter"]]],[11,"clone","","",220,[[["self"]],["filtermap"]]],[11,"clone","","",218,[[["self"]],["enumerate"]]],[11,"clone","","",86,[[["self"]],["peekable"]]],[11,"clone","","",227,[[["self"]],["skipwhile"]]],[11,"clone","","",229,[[["self"]],["takewhile"]]],[11,"clone","","",226,[[["self"]],["skip"]]],[11,"clone","","",228,[[["self"]],["take"]]],[11,"clone","","",225,[[["self"]],["scan"]]],[11,"clone","","",230,[[["self"]],["fuse"]]],[11,"clone","","",231,[[["self"]],["inspect"]]],[11,"clone","","",209,[[["self"]],["repeat"]]],[11,"clone","","",210,[[["self"]],["repeatwith"]]],[11,"clone","","",205,[[["self"]],["empty"]]],[11,"clone","","",207,[[["self"]],["once"]]],[11,"clone","","",208,[[["self"]],["oncewith"]]],[11,"clone","","",206,[[["self"]],["fromfn"]]],[11,"clone","","",211,[[["self"]],["successors"]]],[11,"clone","core::option","",96,[[["self"]],["self"]]],[11,"clone_from","","",96,[[["self"],["self"]]]],[11,"clone","","",232,[[["self"]],["self"]]],[11,"clone","","",234,[[["self"]],["intoiter"]]],[11,"clone","","",235,[[["self"]],["noneerror"]]],[11,"clone","core::pin","",99,[[["self"]],["pin"]]],[11,"clone","core::raw","",100,[[["self"]],["traitobject"]]],[11,"clone","core::result","",101,[[["self"]],["self"]]],[11,"clone_from","","",101,[[["self"],["self"]]]],[11,"clone","","",236,[[["self"]],["self"]]],[11,"clone","","",238,[[["self"]],["intoiter"]]],[11,"clone","core::sync::atomic","",102,[[["self"]],["ordering"]]],[11,"clone","core::fmt","",239,[[["self"]],["error"]]],[11,"clone","","",240,[[["self"]],["arguments"]]],[11,"clone","core::hash","",132,[[["self"]],["siphasher"]]],[11,"clone","","",241,[[["self"]],["buildhasherdefault"]]],[11,"clone","core::slice","",137,[[["self"]],["self"]]],[11,"clone","","",242,[[["self"]],["self"]]],[11,"clone","","",244,[[["self"]],["rsplit"]]],[11,"clone","","",250,[[["self"]],["self"]]],[11,"clone","","",251,[[["self"]],["self"]]],[11,"clone","","",139,[[["self"]],["self"]]],[11,"clone","","",253,[[["self"]],["self"]]],[11,"clone","","",141,[[["self"]],["rchunksexact"]]],[11,"clone","core::str::pattern","",143,[[["self"]],["searchstep"]]],[11,"clone","","",275,[[["self"]],["charsearcher"]]],[11,"clone","","",276,[[["self"]],["charslicesearcher"]]],[11,"clone","","",277,[[["self"]],["charpredicatesearcher"]]],[11,"clone","","",278,[[["self"]],["strsearcher"]]],[11,"clone","core::str","",255,[[["self"]],["parseboolerror"]]],[11,"clone","","",150,[[["self"]],["utf8error"]]],[11,"clone","","",151,[[["self"]],["chars"]]],[11,"clone","","",152,[[["self"]],["charindices"]]],[11,"clone","","",256,[[["self"]],["bytes"]]],[11,"clone","","",257,[[["self"]],["self"]]],[11,"clone","","",258,[[["self"]],["self"]]],[11,"clone","","",259,[[["self"]],["self"]]],[11,"clone","","",260,[[["self"]],["self"]]],[11,"clone","","",261,[[["self"]],["self"]]],[11,"clone","","",262,[[["self"]],["self"]]],[11,"clone","","",263,[[["self"]],["self"]]],[11,"clone","","",264,[[["self"]],["self"]]],[11,"clone","","",265,[[["self"]],["self"]]],[11,"clone","","",266,[[["self"]],["self"]]],[11,"clone","","",267,[[["self"]],["lines"]]],[11,"clone","","",268,[[["self"]],["linesany"]]],[11,"clone","","",269,[[["self"]],["splitwhitespace"]]],[11,"clone","","",270,[[["self"]],["splitasciiwhitespace"]]],[11,"clone","","",271,[[["self"]],["encodeutf16"]]],[11,"clone","","",272,[[["self"]],["escapedebug"]]],[11,"clone","","",273,[[["self"]],["escapedefault"]]],[11,"clone","","",274,[[["self"]],["escapeunicode"]]],[11,"clone","core::time","",153,[[["self"]],["duration"]]],[11,"clone","core::char","",83,[[["self"]],["unicodeversion"]]],[11,"clone","core::task","",155,[[["self"]],["poll"]]],[11,"clone","","",157,[[["self"]],["rawwakervtable"]]],[11,"clone","","",159,[[["self"]],["self"]]],[11,"clone","core::alloc","",163,[[["self"]],["layout"]]],[11,"clone","","",280,[[["self"]],["layouterr"]]],[11,"clone","","",281,[[["self"]],["allocerr"]]],[11,"clone","","",164,[[["self"]],["cannotreallocinplace"]]],[11,"clone","core::arch::x86","",284,[[["self"]],["__m64"]]],[11,"clone","","",285,[[["self"]],["__m128i"]]],[11,"clone","","",286,[[["self"]],["__m128"]]],[11,"clone","","",287,[[["self"]],["__m128d"]]],[11,"clone","","",288,[[["self"]],["__m256i"]]],[11,"clone","","",289,[[["self"]],["__m256"]]],[11,"clone","","",290,[[["self"]],["__m256d"]]],[11,"clone","","",291,[[["self"]],["__m512i"]]],[11,"clone","","",292,[[["self"]],["__m512"]]],[11,"clone","","",293,[[["self"]],["__m512d"]]],[11,"clone","","",165,[[["self"]],["cpuidresult"]]],[11,"clone","core::arch::aarch64","",294,[[["self"]],["float64x1_t"]]],[11,"clone","","",295,[[["self"]],["float64x2_t"]]],[11,"clone","","",296,[[["self"]],["poly64x1_t"]]],[11,"clone","","",297,[[["self"]],["poly64x2_t"]]],[11,"clone","","",175,[[["self"]],["int8x16x2_t"]]],[11,"clone","","",176,[[["self"]],["int8x16x3_t"]]],[11,"clone","","",177,[[["self"]],["int8x16x4_t"]]],[11,"clone","","",178,[[["self"]],["uint8x16x2_t"]]],[11,"clone","","",179,[[["self"]],["uint8x16x3_t"]]],[11,"clone","","",180,[[["self"]],["uint8x16x4_t"]]],[11,"clone","","",181,[[["self"]],["poly8x16x2_t"]]],[11,"clone","","",182,[[["self"]],["poly8x16x3_t"]]],[11,"clone","","",183,[[["self"]],["poly8x16x4_t"]]],[11,"clone","core::arch::arm","",298,[[["self"]],["int8x8_t"]]],[11,"clone","","",299,[[["self"]],["uint8x8_t"]]],[11,"clone","","",300,[[["self"]],["poly8x8_t"]]],[11,"clone","","",301,[[["self"]],["int16x4_t"]]],[11,"clone","","",302,[[["self"]],["uint16x4_t"]]],[11,"clone","","",303,[[["self"]],["poly16x4_t"]]],[11,"clone","","",304,[[["self"]],["int32x2_t"]]],[11,"clone","","",305,[[["self"]],["uint32x2_t"]]],[11,"clone","","",306,[[["self"]],["float32x2_t"]]],[11,"clone","","",307,[[["self"]],["int64x1_t"]]],[11,"clone","","",308,[[["self"]],["uint64x1_t"]]],[11,"clone","","",309,[[["self"]],["int8x16_t"]]],[11,"clone","","",310,[[["self"]],["uint8x16_t"]]],[11,"clone","","",311,[[["self"]],["poly8x16_t"]]],[11,"clone","","",312,[[["self"]],["int16x8_t"]]],[11,"clone","","",313,[[["self"]],["uint16x8_t"]]],[11,"clone","","",314,[[["self"]],["poly16x8_t"]]],[11,"clone","","",315,[[["self"]],["int32x4_t"]]],[11,"clone","","",316,[[["self"]],["uint32x4_t"]]],[11,"clone","","",317,[[["self"]],["float32x4_t"]]],[11,"clone","","",318,[[["self"]],["int64x2_t"]]],[11,"clone","","",319,[[["self"]],["uint64x2_t"]]],[11,"clone","","",166,[[["self"]],["int8x8x2_t"]]],[11,"clone","","",167,[[["self"]],["int8x8x3_t"]]],[11,"clone","","",168,[[["self"]],["int8x8x4_t"]]],[11,"clone","","",169,[[["self"]],["uint8x8x2_t"]]],[11,"clone","","",170,[[["self"]],["uint8x8x3_t"]]],[11,"clone","","",171,[[["self"]],["uint8x8x4_t"]]],[11,"clone","","",172,[[["self"]],["poly8x8x2_t"]]],[11,"clone","","",173,[[["self"]],["poly8x8x3_t"]]],[11,"clone","","",174,[[["self"]],["poly8x8x4_t"]]],[11,"clone","core::arch::wasm32","",320,[[["self"]],["v128"]]],[11,"clone","core::arch::mips","",321,[[["self"]],["v16i8"]]],[11,"clone","","",322,[[["self"]],["v8i16"]]],[11,"clone","","",323,[[["self"]],["v4i32"]]],[11,"clone","","",324,[[["self"]],["v2i64"]]],[11,"clone","","",325,[[["self"]],["v16u8"]]],[11,"clone","","",326,[[["self"]],["v8u16"]]],[11,"clone","","",327,[[["self"]],["v4u32"]]],[11,"clone","","",328,[[["self"]],["v2u64"]]],[11,"clone","","",329,[[["self"]],["v4f32"]]],[11,"clone","","",330,[[["self"]],["v2f64"]]],[11,"clone","core::arch::powerpc","",331,[[["self"]],["vector_signed_long"]]],[11,"clone","","",332,[[["self"]],["vector_unsigned_long"]]],[11,"clone","","",333,[[["self"]],["vector_bool_long"]]],[11,"clone","","",334,[[["self"]],["vector_double"]]],[11,"eq","core::num","",3,[[["self"],["nonzerou8"]],["bool"]]],[11,"ne","","",3,[[["self"],["nonzerou8"]],["bool"]]],[11,"eq","","",4,[[["nonzerou16"],["self"]],["bool"]]],[11,"ne","","",4,[[["nonzerou16"],["self"]],["bool"]]],[11,"eq","","",5,[[["nonzerou32"],["self"]],["bool"]]],[11,"ne","","",5,[[["nonzerou32"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["nonzerou64"]],["bool"]]],[11,"ne","","",6,[[["self"],["nonzerou64"]],["bool"]]],[11,"eq","","",7,[[["nonzerou128"],["self"]],["bool"]]],[11,"ne","","",7,[[["nonzerou128"],["self"]],["bool"]]],[11,"eq","","",8,[[["nonzerousize"],["self"]],["bool"]]],[11,"ne","","",8,[[["nonzerousize"],["self"]],["bool"]]],[11,"eq","","",9,[[["nonzeroi8"],["self"]],["bool"]]],[11,"ne","","",9,[[["nonzeroi8"],["self"]],["bool"]]],[11,"eq","","",10,[[["nonzeroi16"],["self"]],["bool"]]],[11,"ne","","",10,[[["nonzeroi16"],["self"]],["bool"]]],[11,"eq","","",11,[[["self"],["nonzeroi32"]],["bool"]]],[11,"ne","","",11,[[["self"],["nonzeroi32"]],["bool"]]],[11,"eq","","",12,[[["self"],["nonzeroi64"]],["bool"]]],[11,"ne","","",12,[[["self"],["nonzeroi64"]],["bool"]]],[11,"eq","","",13,[[["self"],["nonzeroi128"]],["bool"]]],[11,"ne","","",13,[[["self"],["nonzeroi128"]],["bool"]]],[11,"eq","","",14,[[["nonzeroisize"],["self"]],["bool"]]],[11,"ne","","",14,[[["nonzeroisize"],["self"]],["bool"]]],[11,"eq","","",0,[[["wrapping"],["self"]],["bool"]]],[11,"ne","","",0,[[["wrapping"],["self"]],["bool"]]],[11,"eq","","",185,[[["parsefloaterror"],["self"]],["bool"]]],[11,"ne","","",185,[[["parsefloaterror"],["self"]],["bool"]]],[11,"eq","","",1,[[["fpcategory"],["self"]],["bool"]]],[11,"eq","","",184,[[["tryfrominterror"],["self"]],["bool"]]],[11,"ne","","",184,[[["tryfrominterror"],["self"]],["bool"]]],[11,"eq","","",15,[[["self"],["parseinterror"]],["bool"]]],[11,"ne","","",15,[[["self"],["parseinterror"]],["bool"]]],[11,"eq","","",2,[[["interrorkind"],["self"]],["bool"]]],[11,"eq","core::mem","",16,[[["manuallydrop"],["self"]],["bool"]]],[11,"ne","","",16,[[["manuallydrop"],["self"]],["bool"]]],[11,"eq","","",186,[[["self"]],["bool"]]],[11,"eq","core::ptr","",18,[[["self"]],["bool"]]],[11,"eq","core::cmp","",23,[[["self"],["ordering"]],["bool"]]],[11,"eq","","",22,[[["self"],["reverse"]],["bool"]]],[11,"ne","","",22,[[["self"],["reverse"]],["bool"]]],[11,"eq","core::convert","",187,[[["self"],["infallible"]],["bool"]]],[11,"eq","core::marker","",188,[[["phantomdata"],["self"]],["bool"]]],[11,"eq","","",189,[[["self"],["phantompinned"]],["bool"]]],[11,"eq","core::ops","",39,[[["self"],["generatorstate"]],["bool"]]],[11,"ne","","",39,[[["self"],["generatorstate"]],["bool"]]],[11,"eq","","",190,[[["self"],["rangefull"]],["bool"]]],[11,"eq","","",34,[[["range"],["self"]],["bool"]]],[11,"ne","","",34,[[["range"],["self"]],["bool"]]],[11,"eq","","",35,[[["self"],["rangefrom"]],["bool"]]],[11,"ne","","",35,[[["self"],["rangefrom"]],["bool"]]],[11,"eq","","",36,[[["rangeto"],["self"]],["bool"]]],[11,"ne","","",36,[[["rangeto"],["self"]],["bool"]]],[11,"eq","","",40,[[["self"]],["bool"]]],[11,"eq","","",37,[[["self"],["rangetoinclusive"]],["bool"]]],[11,"ne","","",37,[[["self"],["rangetoinclusive"]],["bool"]]],[11,"eq","","",38,[[["bound"],["self"]],["bool"]]],[11,"ne","","",38,[[["bound"],["self"]],["bool"]]],[11,"eq","core::any","",75,[[["self"],["typeid"]],["bool"]]],[11,"ne","","",75,[[["self"],["typeid"]],["bool"]]],[11,"eq","core::cell","",78,[[["self"],["cell"]],["bool"]]],[11,"eq","","Panics",79,[[["refcell"],["self"]],["bool"]]],[11,"eq","core::char","",196,[[["parsecharerror"],["self"]],["bool"]]],[11,"ne","","",196,[[["parsecharerror"],["self"]],["bool"]]],[11,"eq","","",195,[[["chartryfromerror"],["self"]],["bool"]]],[11,"ne","","",195,[[["chartryfromerror"],["self"]],["bool"]]],[11,"eq","","",84,[[["decodeutf16error"],["self"]],["bool"]]],[11,"ne","","",84,[[["decodeutf16error"],["self"]],["bool"]]],[11,"eq","core::option","",96,[[["option"],["self"]],["bool"]]],[11,"ne","","",96,[[["option"],["self"]],["bool"]]],[11,"eq","","",235,[[["noneerror"],["self"]],["bool"]]],[11,"eq","core::pin","",99,[[["pin"],["self"]],["bool"]]],[11,"ne","","",99,[[["pin"],["self"]],["bool"]]],[11,"eq","core::result","",101,[[["self"],["result"]],["bool"]]],[11,"ne","","",101,[[["self"],["result"]],["bool"]]],[11,"eq","core::sync::atomic","",102,[[["self"],["ordering"]],["bool"]]],[11,"eq","core::fmt","",239,[[["error"],["self"]],["bool"]]],[11,"eq","core::hash","",241,[[["buildhasherdefault"],["self"]],["bool"]]],[11,"eq","core::str::pattern","",143,[[["self"],["searchstep"]],["bool"]]],[11,"ne","","",143,[[["self"],["searchstep"]],["bool"]]],[11,"eq","core::str::lossy","",147,[[["utf8lossychunk"],["self"]],["bool"]]],[11,"ne","","",147,[[["utf8lossychunk"],["self"]],["bool"]]],[11,"eq","core::str","",255,[[["parseboolerror"],["self"]],["bool"]]],[11,"ne","","",255,[[["parseboolerror"],["self"]],["bool"]]],[11,"eq","","",150,[[["self"],["utf8error"]],["bool"]]],[11,"ne","","",150,[[["self"],["utf8error"]],["bool"]]],[11,"eq","core::time","",153,[[["self"],["duration"]],["bool"]]],[11,"ne","","",153,[[["self"],["duration"]],["bool"]]],[11,"eq","core::char","",83,[[["self"],["unicodeversion"]],["bool"]]],[11,"ne","","",83,[[["self"],["unicodeversion"]],["bool"]]],[11,"eq","core::task","",155,[[["self"],["poll"]],["bool"]]],[11,"ne","","",155,[[["self"],["poll"]],["bool"]]],[11,"eq","","",156,[[["self"],["rawwaker"]],["bool"]]],[11,"ne","","",156,[[["self"],["rawwaker"]],["bool"]]],[11,"eq","","",157,[[["self"],["rawwakervtable"]],["bool"]]],[11,"ne","","",157,[[["self"],["rawwakervtable"]],["bool"]]],[11,"eq","core::alloc","",163,[[["self"],["layout"]],["bool"]]],[11,"ne","","",163,[[["self"],["layout"]],["bool"]]],[11,"eq","","",280,[[["self"],["layouterr"]],["bool"]]],[11,"ne","","",280,[[["self"],["layouterr"]],["bool"]]],[11,"eq","","",281,[[["allocerr"],["self"]],["bool"]]],[11,"eq","","",164,[[["self"],["cannotreallocinplace"]],["bool"]]],[11,"eq","core::arch::x86","",165,[[["self"],["cpuidresult"]],["bool"]]],[11,"ne","","",165,[[["self"],["cpuidresult"]],["bool"]]],[11,"cmp","core::num","",3,[[["self"],["nonzerou8"]],["ordering"]]],[11,"cmp","","",4,[[["nonzerou16"],["self"]],["ordering"]]],[11,"cmp","","",5,[[["nonzerou32"],["self"]],["ordering"]]],[11,"cmp","","",6,[[["self"],["nonzerou64"]],["ordering"]]],[11,"cmp","","",7,[[["nonzerou128"],["self"]],["ordering"]]],[11,"cmp","","",8,[[["nonzerousize"],["self"]],["ordering"]]],[11,"cmp","","",9,[[["nonzeroi8"],["self"]],["ordering"]]],[11,"cmp","","",10,[[["nonzeroi16"],["self"]],["ordering"]]],[11,"cmp","","",11,[[["self"],["nonzeroi32"]],["ordering"]]],[11,"cmp","","",12,[[["self"],["nonzeroi64"]],["ordering"]]],[11,"cmp","","",13,[[["self"],["nonzeroi128"]],["ordering"]]],[11,"cmp","","",14,[[["nonzeroisize"],["self"]],["ordering"]]],[11,"cmp","","",0,[[["wrapping"],["self"]],["ordering"]]],[11,"cmp","core::mem","",16,[[["manuallydrop"],["self"]],["ordering"]]],[11,"cmp","core::ptr","",18,[[["self"]],["ordering"]]],[11,"cmp","core::cmp","",22,[[["self"],["reverse"]],["ordering"]]],[11,"cmp","","",23,[[["self"],["ordering"]],["ordering"]]],[11,"cmp","core::convert","",187,[[["self"]],["ordering"]]],[11,"cmp","core::marker","",188,[[["phantomdata"],["self"]],["ordering"]]],[11,"cmp","","",189,[[["self"],["phantompinned"]],["ordering"]]],[11,"cmp","core::ops","",39,[[["self"],["generatorstate"]],["ordering"]]],[11,"cmp","core::any","",75,[[["self"],["typeid"]],["ordering"]]],[11,"cmp","core::cell","",78,[[["self"],["cell"]],["ordering"]]],[11,"cmp","","Panics",79,[[["refcell"],["self"]],["ordering"]]],[11,"cmp","core::option","",96,[[["option"],["self"]],["ordering"]]],[11,"cmp","","",235,[[["noneerror"],["self"]],["ordering"]]],[11,"cmp","core::pin","",99,[[["self"]],["ordering"]]],[11,"cmp","core::result","",101,[[["self"],["result"]],["ordering"]]],[11,"cmp","core::fmt","",239,[[["error"],["self"]],["ordering"]]],[11,"cmp","core::time","",153,[[["self"],["duration"]],["ordering"]]],[11,"cmp","core::char","",83,[[["self"],["unicodeversion"]],["ordering"]]],[11,"cmp","core::task","",155,[[["self"],["poll"]],["ordering"]]],[11,"cmp","core::arch::x86","",165,[[["self"],["cpuidresult"]],["ordering"]]],[11,"partial_cmp","core::num","",3,[[["self"],["nonzerou8"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",3,[[["self"],["nonzerou8"]],["bool"]]],[11,"le","","",3,[[["self"],["nonzerou8"]],["bool"]]],[11,"gt","","",3,[[["self"],["nonzerou8"]],["bool"]]],[11,"ge","","",3,[[["self"],["nonzerou8"]],["bool"]]],[11,"partial_cmp","","",4,[[["nonzerou16"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",4,[[["nonzerou16"],["self"]],["bool"]]],[11,"le","","",4,[[["nonzerou16"],["self"]],["bool"]]],[11,"gt","","",4,[[["nonzerou16"],["self"]],["bool"]]],[11,"ge","","",4,[[["nonzerou16"],["self"]],["bool"]]],[11,"partial_cmp","","",5,[[["nonzerou32"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",5,[[["nonzerou32"],["self"]],["bool"]]],[11,"le","","",5,[[["nonzerou32"],["self"]],["bool"]]],[11,"gt","","",5,[[["nonzerou32"],["self"]],["bool"]]],[11,"ge","","",5,[[["nonzerou32"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["nonzerou64"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",6,[[["self"],["nonzerou64"]],["bool"]]],[11,"le","","",6,[[["self"],["nonzerou64"]],["bool"]]],[11,"gt","","",6,[[["self"],["nonzerou64"]],["bool"]]],[11,"ge","","",6,[[["self"],["nonzerou64"]],["bool"]]],[11,"partial_cmp","","",7,[[["nonzerou128"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",7,[[["nonzerou128"],["self"]],["bool"]]],[11,"le","","",7,[[["nonzerou128"],["self"]],["bool"]]],[11,"gt","","",7,[[["nonzerou128"],["self"]],["bool"]]],[11,"ge","","",7,[[["nonzerou128"],["self"]],["bool"]]],[11,"partial_cmp","","",8,[[["nonzerousize"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",8,[[["nonzerousize"],["self"]],["bool"]]],[11,"le","","",8,[[["nonzerousize"],["self"]],["bool"]]],[11,"gt","","",8,[[["nonzerousize"],["self"]],["bool"]]],[11,"ge","","",8,[[["nonzerousize"],["self"]],["bool"]]],[11,"partial_cmp","","",9,[[["nonzeroi8"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",9,[[["nonzeroi8"],["self"]],["bool"]]],[11,"le","","",9,[[["nonzeroi8"],["self"]],["bool"]]],[11,"gt","","",9,[[["nonzeroi8"],["self"]],["bool"]]],[11,"ge","","",9,[[["nonzeroi8"],["self"]],["bool"]]],[11,"partial_cmp","","",10,[[["nonzeroi16"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",10,[[["nonzeroi16"],["self"]],["bool"]]],[11,"le","","",10,[[["nonzeroi16"],["self"]],["bool"]]],[11,"gt","","",10,[[["nonzeroi16"],["self"]],["bool"]]],[11,"ge","","",10,[[["nonzeroi16"],["self"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["nonzeroi32"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",11,[[["self"],["nonzeroi32"]],["bool"]]],[11,"le","","",11,[[["self"],["nonzeroi32"]],["bool"]]],[11,"gt","","",11,[[["self"],["nonzeroi32"]],["bool"]]],[11,"ge","","",11,[[["self"],["nonzeroi32"]],["bool"]]],[11,"partial_cmp","","",12,[[["self"],["nonzeroi64"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",12,[[["self"],["nonzeroi64"]],["bool"]]],[11,"le","","",12,[[["self"],["nonzeroi64"]],["bool"]]],[11,"gt","","",12,[[["self"],["nonzeroi64"]],["bool"]]],[11,"ge","","",12,[[["self"],["nonzeroi64"]],["bool"]]],[11,"partial_cmp","","",13,[[["self"],["nonzeroi128"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",13,[[["self"],["nonzeroi128"]],["bool"]]],[11,"le","","",13,[[["self"],["nonzeroi128"]],["bool"]]],[11,"gt","","",13,[[["self"],["nonzeroi128"]],["bool"]]],[11,"ge","","",13,[[["self"],["nonzeroi128"]],["bool"]]],[11,"partial_cmp","","",14,[[["nonzeroisize"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",14,[[["nonzeroisize"],["self"]],["bool"]]],[11,"le","","",14,[[["nonzeroisize"],["self"]],["bool"]]],[11,"gt","","",14,[[["nonzeroisize"],["self"]],["bool"]]],[11,"ge","","",14,[[["nonzeroisize"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["wrapping"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",0,[[["wrapping"],["self"]],["bool"]]],[11,"le","","",0,[[["wrapping"],["self"]],["bool"]]],[11,"gt","","",0,[[["wrapping"],["self"]],["bool"]]],[11,"ge","","",0,[[["wrapping"],["self"]],["bool"]]],[11,"partial_cmp","core::mem","",16,[[["manuallydrop"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",16,[[["manuallydrop"],["self"]],["bool"]]],[11,"le","","",16,[[["manuallydrop"],["self"]],["bool"]]],[11,"gt","","",16,[[["manuallydrop"],["self"]],["bool"]]],[11,"ge","","",16,[[["manuallydrop"],["self"]],["bool"]]],[11,"partial_cmp","core::ptr","",18,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","core::cmp","",22,[[["self"],["reverse"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",22,[[["self"]],["bool"]]],[11,"le","","",22,[[["self"]],["bool"]]],[11,"gt","","",22,[[["self"]],["bool"]]],[11,"ge","","",22,[[["self"]],["bool"]]],[11,"partial_cmp","","",23,[[["self"],["ordering"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","core::convert","",187,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","core::marker","",188,[[["phantomdata"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",189,[[["self"],["phantompinned"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","core::ops","",39,[[["self"],["generatorstate"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",39,[[["self"],["generatorstate"]],["bool"]]],[11,"le","","",39,[[["self"],["generatorstate"]],["bool"]]],[11,"gt","","",39,[[["self"],["generatorstate"]],["bool"]]],[11,"ge","","",39,[[["self"],["generatorstate"]],["bool"]]],[11,"partial_cmp","core::any","",75,[[["self"],["typeid"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",75,[[["self"],["typeid"]],["bool"]]],[11,"le","","",75,[[["self"],["typeid"]],["bool"]]],[11,"gt","","",75,[[["self"],["typeid"]],["bool"]]],[11,"ge","","",75,[[["self"],["typeid"]],["bool"]]],[11,"partial_cmp","core::cell","",78,[[["self"],["cell"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",78,[[["self"],["cell"]],["bool"]]],[11,"le","","",78,[[["self"],["cell"]],["bool"]]],[11,"gt","","",78,[[["self"],["cell"]],["bool"]]],[11,"ge","","",78,[[["self"],["cell"]],["bool"]]],[11,"partial_cmp","","Panics",79,[[["refcell"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","Panics",79,[[["refcell"],["self"]],["bool"]]],[11,"le","","Panics",79,[[["refcell"],["self"]],["bool"]]],[11,"gt","","Panics",79,[[["refcell"],["self"]],["bool"]]],[11,"ge","","Panics",79,[[["refcell"],["self"]],["bool"]]],[11,"partial_cmp","core::option","",96,[[["option"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",96,[[["option"],["self"]],["bool"]]],[11,"le","","",96,[[["option"],["self"]],["bool"]]],[11,"gt","","",96,[[["option"],["self"]],["bool"]]],[11,"ge","","",96,[[["option"],["self"]],["bool"]]],[11,"partial_cmp","","",235,[[["noneerror"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","core::pin","",99,[[["pin"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",99,[[["pin"],["self"]],["bool"]]],[11,"le","","",99,[[["pin"],["self"]],["bool"]]],[11,"gt","","",99,[[["pin"],["self"]],["bool"]]],[11,"ge","","",99,[[["pin"],["self"]],["bool"]]],[11,"partial_cmp","core::result","",101,[[["self"],["result"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",101,[[["self"],["result"]],["bool"]]],[11,"le","","",101,[[["self"],["result"]],["bool"]]],[11,"gt","","",101,[[["self"],["result"]],["bool"]]],[11,"ge","","",101,[[["self"],["result"]],["bool"]]],[11,"partial_cmp","core::fmt","",239,[[["error"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","core::time","",153,[[["self"],["duration"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",153,[[["self"],["duration"]],["bool"]]],[11,"le","","",153,[[["self"],["duration"]],["bool"]]],[11,"gt","","",153,[[["self"],["duration"]],["bool"]]],[11,"ge","","",153,[[["self"],["duration"]],["bool"]]],[11,"partial_cmp","core::char","",83,[[["self"],["unicodeversion"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",83,[[["self"],["unicodeversion"]],["bool"]]],[11,"le","","",83,[[["self"],["unicodeversion"]],["bool"]]],[11,"gt","","",83,[[["self"],["unicodeversion"]],["bool"]]],[11,"ge","","",83,[[["self"],["unicodeversion"]],["bool"]]],[11,"partial_cmp","core::task","",155,[[["self"],["poll"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",155,[[["self"],["poll"]],["bool"]]],[11,"le","","",155,[[["self"],["poll"]],["bool"]]],[11,"gt","","",155,[[["self"],["poll"]],["bool"]]],[11,"ge","","",155,[[["self"],["poll"]],["bool"]]],[11,"partial_cmp","core::arch::x86","",165,[[["self"],["cpuidresult"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",165,[[["self"],["cpuidresult"]],["bool"]]],[11,"le","","",165,[[["self"],["cpuidresult"]],["bool"]]],[11,"gt","","",165,[[["self"],["cpuidresult"]],["bool"]]],[11,"ge","","",165,[[["self"],["cpuidresult"]],["bool"]]],[11,"as_ref","core::slice","",137,[[["self"]]]],[11,"from","core::num","",184,[[["infallible"]],["tryfrominterror"]]],[11,"from","","",184,[[],["tryfrominterror"]]],[11,"from","core::ptr","",18,[[["t"]],["self"]]],[11,"from","","",18,[[["t"]],["self"]]],[11,"from","core::num","",4,[[["nonzerou8"]],["self"]]],[11,"from","","",5,[[["nonzerou8"]],["self"]]],[11,"from","","",6,[[["nonzerou8"]],["self"]]],[11,"from","","",7,[[["nonzerou8"]],["self"]]],[11,"from","","",8,[[["nonzerou8"]],["self"]]],[11,"from","","",5,[[["nonzerou16"]],["self"]]],[11,"from","","",6,[[["nonzerou16"]],["self"]]],[11,"from","","",7,[[["nonzerou16"]],["self"]]],[11,"from","","",8,[[["nonzerou16"]],["self"]]],[11,"from","","",6,[[["nonzerou32"]],["self"]]],[11,"from","","",7,[[["nonzerou32"]],["self"]]],[11,"from","","",7,[[["nonzerou64"]],["self"]]],[11,"from","","",10,[[["nonzeroi8"]],["self"]]],[11,"from","","",11,[[["nonzeroi8"]],["self"]]],[11,"from","","",12,[[["nonzeroi8"]],["self"]]],[11,"from","","",13,[[["nonzeroi8"]],["self"]]],[11,"from","","",14,[[["nonzeroi8"]],["self"]]],[11,"from","","",11,[[["nonzeroi16"]],["self"]]],[11,"from","","",12,[[["nonzeroi16"]],["self"]]],[11,"from","","",13,[[["nonzeroi16"]],["self"]]],[11,"from","","",14,[[["nonzeroi16"]],["self"]]],[11,"from","","",12,[[["nonzeroi32"]],["self"]]],[11,"from","","",13,[[["nonzeroi32"]],["self"]]],[11,"from","","",13,[[["nonzeroi64"]],["self"]]],[11,"from","","",10,[[["nonzerou8"]],["self"]]],[11,"from","","",11,[[["nonzerou8"]],["self"]]],[11,"from","","",12,[[["nonzerou8"]],["self"]]],[11,"from","","",13,[[["nonzerou8"]],["self"]]],[11,"from","","",14,[[["nonzerou8"]],["self"]]],[11,"from","","",11,[[["nonzerou16"]],["self"]]],[11,"from","","",12,[[["nonzerou16"]],["self"]]],[11,"from","","",13,[[["nonzerou16"]],["self"]]],[11,"from","","",12,[[["nonzerou32"]],["self"]]],[11,"from","","",13,[[["nonzerou32"]],["self"]]],[11,"from","","",13,[[["nonzerou64"]],["self"]]],[11,"from","core::convert","",187,[[],["self"]]],[11,"from","core::array","",191,[[["infallible"]],["tryfromsliceerror"]]],[11,"from","core::cell","",78,[[["t"]],["cell"]]],[11,"from","","",79,[[["t"]],["refcell"]]],[11,"from","","",82,[[["t"]],["unsafecell"]]],[11,"from","core::option","",96,[[["t"]],["option"]]],[11,"from","","",96,[[["option"]],[["t"],["option"]]]],[11,"from","","",96,[[["option"]],[["option"],["t"]]]],[11,"from","core::sync::atomic","Converts a `bool` into an `AtomicBool`.",103,[[["bool"]],["self"]]],[11,"from","","",104,[[],["self"]]],[11,"from","","Converts an `i8` into an `AtomicI8`.",105,[[["i8"]],["self"]]],[11,"from","","Converts an `u8` into an `AtomicU8`.",106,[[["u8"]],["self"]]],[11,"from","","Converts an `i16` into an `AtomicI16`.",107,[[["i16"]],["self"]]],[11,"from","","Converts an `u16` into an `AtomicU16`.",108,[[["u16"]],["self"]]],[11,"from","","Converts an `i32` into an `AtomicI32`.",109,[[["i32"]],["self"]]],[11,"from","","Converts an `u32` into an `AtomicU32`.",110,[[["u32"]],["self"]]],[11,"from","","Converts an `i64` into an `AtomicI64`.",111,[[["i64"]],["self"]]],[11,"from","","Converts an `u64` into an `AtomicU64`.",112,[[["u64"]],["self"]]],[11,"from","","Converts an `isize` into an `AtomicIsize`.",113,[[["isize"]],["self"]]],[11,"from","","Converts an `usize` into an `AtomicUsize`.",114,[[["usize"]],["self"]]],[11,"from","core::task","",155,[[["t"]],["poll"]]],[11,"default","core::num","",0,[[],["wrapping"]]],[11,"default","core::mem","",16,[[],["manuallydrop"]]],[11,"default","core::cmp","",22,[[],["reverse"]]],[11,"default","core::marker","",188,[[],["self"]]],[11,"default","core::cell","Creates a `Cell<T>`, with the `Default` value for T.",78,[[],["cell"]]],[11,"default","","Creates a `RefCell<T>`, with the `Default` value for T.",79,[[],["refcell"]]],[11,"default","","Creates an `UnsafeCell`, with the `Default` value for T.",82,[[],["unsafecell"]]],[11,"default","core::iter","",205,[[],["empty"]]],[11,"default","core::option","Returns [`None`][Option::None].",96,[[],["option"]]],[11,"default","core::sync::atomic","Creates an `AtomicBool` initialized to `false`.",103,[[],["self"]]],[11,"default","","Creates a null `AtomicPtr<T>`.",104,[[],["atomicptr"]]],[11,"default","","",105,[[],["self"]]],[11,"default","","",106,[[],["self"]]],[11,"default","","",107,[[],["self"]]],[11,"default","","",108,[[],["self"]]],[11,"default","","",109,[[],["self"]]],[11,"default","","",110,[[],["self"]]],[11,"default","","",111,[[],["self"]]],[11,"default","","",112,[[],["self"]]],[11,"default","","",113,[[],["self"]]],[11,"default","","",114,[[],["self"]]],[11,"default","core::fmt","",239,[[],["error"]]],[11,"default","core::hash","",132,[[],["siphasher"]]],[11,"default","","",241,[[],["buildhasherdefault"]]],[11,"default","core::time","",153,[[],["duration"]]],[11,"add","core::num","",0,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"add","","",0,[[["wrapping"]]]],[11,"add","","",0,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"add","","",0,[[["wrapping"]]]],[11,"add","","",0,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"add","","",0,[[["wrapping"]]]],[11,"add","","",0,[[["wrapping",["u32"]],["u32"]],[["wrapping",["u32"]],["u32"]]]],[11,"add","","",0,[[["wrapping"]]]],[11,"add","","",0,[[["u64"],["wrapping",["u64"]]],[["u64"],["wrapping",["u64"]]]]],[11,"add","","",0,[[["wrapping"]]]],[11,"add","","",0,[[["wrapping",["u128"]],["u128"]],[["u128"],["wrapping",["u128"]]]]],[11,"add","","",0,[[["wrapping"]]]],[11,"add","","",0,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"add","","",0,[[["wrapping"]]]],[11,"add","","",0,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"add","","",0,[[["wrapping"]]]],[11,"add","","",0,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"add","","",0,[[["wrapping"]]]],[11,"add","","",0,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"add","","",0,[[["wrapping"]]]],[11,"add","","",0,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"add","","",0,[[["wrapping"]]]],[11,"add","","",0,[[["i128"],["wrapping",["i128"]]],[["i128"],["wrapping",["i128"]]]]],[11,"add","","",0,[[["wrapping"]]]],[11,"add","core::time","",153,[[["duration"]],["duration"]]],[11,"sub","core::num","",0,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"sub","","",0,[[["wrapping"]]]],[11,"sub","","",0,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"sub","","",0,[[["wrapping"]]]],[11,"sub","","",0,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"sub","","",0,[[["wrapping"]]]],[11,"sub","","",0,[[["wrapping",["u32"]],["u32"]],[["wrapping",["u32"]],["u32"]]]],[11,"sub","","",0,[[["wrapping"]]]],[11,"sub","","",0,[[["u64"],["wrapping",["u64"]]],[["u64"],["wrapping",["u64"]]]]],[11,"sub","","",0,[[["wrapping"]]]],[11,"sub","","",0,[[["wrapping",["u128"]],["u128"]],[["u128"],["wrapping",["u128"]]]]],[11,"sub","","",0,[[["wrapping"]]]],[11,"sub","","",0,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"sub","","",0,[[["wrapping"]]]],[11,"sub","","",0,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"sub","","",0,[[["wrapping"]]]],[11,"sub","","",0,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"sub","","",0,[[["wrapping"]]]],[11,"sub","","",0,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"sub","","",0,[[["wrapping"]]]],[11,"sub","","",0,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"sub","","",0,[[["wrapping"]]]],[11,"sub","","",0,[[["i128"],["wrapping",["i128"]]],[["i128"],["wrapping",["i128"]]]]],[11,"sub","","",0,[[["wrapping"]]]],[11,"sub","core::time","",153,[[["duration"]],["duration"]]],[11,"mul","core::num","",0,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"mul","","",0,[[["wrapping"]]]],[11,"mul","","",0,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"mul","","",0,[[["wrapping"]]]],[11,"mul","","",0,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"mul","","",0,[[["wrapping"]]]],[11,"mul","","",0,[[["wrapping",["u32"]],["u32"]],[["wrapping",["u32"]],["u32"]]]],[11,"mul","","",0,[[["wrapping"]]]],[11,"mul","","",0,[[["u64"],["wrapping",["u64"]]],[["u64"],["wrapping",["u64"]]]]],[11,"mul","","",0,[[["wrapping"]]]],[11,"mul","","",0,[[["wrapping",["u128"]],["u128"]],[["u128"],["wrapping",["u128"]]]]],[11,"mul","","",0,[[["wrapping"]]]],[11,"mul","","",0,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"mul","","",0,[[["wrapping"]]]],[11,"mul","","",0,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"mul","","",0,[[["wrapping"]]]],[11,"mul","","",0,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"mul","","",0,[[["wrapping"]]]],[11,"mul","","",0,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"mul","","",0,[[["wrapping"]]]],[11,"mul","","",0,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"mul","","",0,[[["wrapping"]]]],[11,"mul","","",0,[[["i128"],["wrapping",["i128"]]],[["i128"],["wrapping",["i128"]]]]],[11,"mul","","",0,[[["wrapping"]]]],[11,"mul","core::time","",153,[[["u32"]],["duration"]]],[11,"div","core::num","",0,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"div","","",0,[[["wrapping"]]]],[11,"div","","",0,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"div","","",0,[[["wrapping"]]]],[11,"div","","",0,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"div","","",0,[[["wrapping"]]]],[11,"div","","",0,[[["wrapping",["u32"]],["u32"]],[["wrapping",["u32"]],["u32"]]]],[11,"div","","",0,[[["wrapping"]]]],[11,"div","","",0,[[["u64"],["wrapping",["u64"]]],[["u64"],["wrapping",["u64"]]]]],[11,"div","","",0,[[["wrapping"]]]],[11,"div","","",0,[[["wrapping",["u128"]],["u128"]],[["u128"],["wrapping",["u128"]]]]],[11,"div","","",0,[[["wrapping"]]]],[11,"div","","",0,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"div","","",0,[[["wrapping"]]]],[11,"div","","",0,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"div","","",0,[[["wrapping"]]]],[11,"div","","",0,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"div","","",0,[[["wrapping"]]]],[11,"div","","",0,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"div","","",0,[[["wrapping"]]]],[11,"div","","",0,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"div","","",0,[[["wrapping"]]]],[11,"div","","",0,[[["i128"],["wrapping",["i128"]]],[["i128"],["wrapping",["i128"]]]]],[11,"div","","",0,[[["wrapping"]]]],[11,"div","core::time","",153,[[["u32"]],["duration"]]],[11,"rem","core::num","",0,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"rem","","",0,[[["wrapping"]]]],[11,"rem","","",0,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"rem","","",0,[[["wrapping"]]]],[11,"rem","","",0,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"rem","","",0,[[["wrapping"]]]],[11,"rem","","",0,[[["wrapping",["u32"]],["u32"]],[["wrapping",["u32"]],["u32"]]]],[11,"rem","","",0,[[["wrapping"]]]],[11,"rem","","",0,[[["u64"],["wrapping",["u64"]]],[["u64"],["wrapping",["u64"]]]]],[11,"rem","","",0,[[["wrapping"]]]],[11,"rem","","",0,[[["wrapping",["u128"]],["u128"]],[["u128"],["wrapping",["u128"]]]]],[11,"rem","","",0,[[["wrapping"]]]],[11,"rem","","",0,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"rem","","",0,[[["wrapping"]]]],[11,"rem","","",0,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"rem","","",0,[[["wrapping"]]]],[11,"rem","","",0,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"rem","","",0,[[["wrapping"]]]],[11,"rem","","",0,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"rem","","",0,[[["wrapping"]]]],[11,"rem","","",0,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"rem","","",0,[[["wrapping"]]]],[11,"rem","","",0,[[["i128"],["wrapping",["i128"]]],[["i128"],["wrapping",["i128"]]]]],[11,"rem","","",0,[[["wrapping"]]]],[11,"neg","","",0,[[],["self"]]],[11,"neg","","",0,[[],["self"]]],[11,"neg","","",0,[[],["self"]]],[11,"neg","","",0,[[],["self"]]],[11,"neg","","",0,[[],["self"]]],[11,"neg","","",0,[[],["self"]]],[11,"neg","","",0,[[],["self"]]],[11,"neg","","",0,[[],["self"]]],[11,"neg","","",0,[[],["self"]]],[11,"neg","","",0,[[],["self"]]],[11,"neg","","",0,[[],["self"]]],[11,"neg","","",0,[[],["self"]]],[11,"add_assign","","",0,[[["self"],["wrapping",["usize"]],["usize"]]]],[11,"add_assign","","",0,[[["self"],["wrapping"]]]],[11,"add_assign","","",0,[[["self"],["wrapping",["u8"]],["u8"]]]],[11,"add_assign","","",0,[[["self"],["wrapping"]]]],[11,"add_assign","","",0,[[["u16"],["self"],["wrapping",["u16"]]]]],[11,"add_assign","","",0,[[["self"],["wrapping"]]]],[11,"add_assign","","",0,[[["self"],["wrapping",["u32"]],["u32"]]]],[11,"add_assign","","",0,[[["self"],["wrapping"]]]],[11,"add_assign","","",0,[[["self"],["u64"],["wrapping",["u64"]]]]],[11,"add_assign","","",0,[[["wrapping"],["self"]]]],[11,"add_assign","","",0,[[["wrapping",["u128"]],["self"],["u128"]]]],[11,"add_assign","","",0,[[["self"],["wrapping"]]]],[11,"add_assign","","",0,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"add_assign","","",0,[[["self"],["wrapping"]]]],[11,"add_assign","","",0,[[["wrapping",["i8"]],["self"],["i8"]]]],[11,"add_assign","","",0,[[["self"],["wrapping"]]]],[11,"add_assign","","",0,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"add_assign","","",0,[[["wrapping"],["self"]]]],[11,"add_assign","","",0,[[["self"],["wrapping",["i32"]],["i32"]]]],[11,"add_assign","","",0,[[["self"],["wrapping"]]]],[11,"add_assign","","",0,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"add_assign","","",0,[[["self"],["wrapping"]]]],[11,"add_assign","","",0,[[["self"],["i128"],["wrapping",["i128"]]]]],[11,"add_assign","","",0,[[["self"],["wrapping"]]]],[11,"add_assign","core::time","",153,[[["self"],["duration"]]]],[11,"sub_assign","core::num","",0,[[["self"],["wrapping",["usize"]],["usize"]]]],[11,"sub_assign","","",0,[[["self"],["wrapping"]]]],[11,"sub_assign","","",0,[[["self"],["wrapping",["u8"]],["u8"]]]],[11,"sub_assign","","",0,[[["self"],["wrapping"]]]],[11,"sub_assign","","",0,[[["u16"],["self"],["wrapping",["u16"]]]]],[11,"sub_assign","","",0,[[["self"],["wrapping"]]]],[11,"sub_assign","","",0,[[["self"],["wrapping",["u32"]],["u32"]]]],[11,"sub_assign","","",0,[[["self"],["wrapping"]]]],[11,"sub_assign","","",0,[[["self"],["u64"],["wrapping",["u64"]]]]],[11,"sub_assign","","",0,[[["wrapping"],["self"]]]],[11,"sub_assign","","",0,[[["wrapping",["u128"]],["self"],["u128"]]]],[11,"sub_assign","","",0,[[["self"],["wrapping"]]]],[11,"sub_assign","","",0,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"sub_assign","","",0,[[["self"],["wrapping"]]]],[11,"sub_assign","","",0,[[["wrapping",["i8"]],["self"],["i8"]]]],[11,"sub_assign","","",0,[[["self"],["wrapping"]]]],[11,"sub_assign","","",0,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"sub_assign","","",0,[[["wrapping"],["self"]]]],[11,"sub_assign","","",0,[[["self"],["wrapping",["i32"]],["i32"]]]],[11,"sub_assign","","",0,[[["self"],["wrapping"]]]],[11,"sub_assign","","",0,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"sub_assign","","",0,[[["self"],["wrapping"]]]],[11,"sub_assign","","",0,[[["self"],["i128"],["wrapping",["i128"]]]]],[11,"sub_assign","","",0,[[["self"],["wrapping"]]]],[11,"sub_assign","core::time","",153,[[["self"],["duration"]]]],[11,"mul_assign","core::num","",0,[[["self"],["wrapping",["usize"]],["usize"]]]],[11,"mul_assign","","",0,[[["self"],["wrapping"]]]],[11,"mul_assign","","",0,[[["self"],["wrapping",["u8"]],["u8"]]]],[11,"mul_assign","","",0,[[["self"],["wrapping"]]]],[11,"mul_assign","","",0,[[["u16"],["self"],["wrapping",["u16"]]]]],[11,"mul_assign","","",0,[[["self"],["wrapping"]]]],[11,"mul_assign","","",0,[[["self"],["wrapping",["u32"]],["u32"]]]],[11,"mul_assign","","",0,[[["self"],["wrapping"]]]],[11,"mul_assign","","",0,[[["self"],["u64"],["wrapping",["u64"]]]]],[11,"mul_assign","","",0,[[["wrapping"],["self"]]]],[11,"mul_assign","","",0,[[["wrapping",["u128"]],["self"],["u128"]]]],[11,"mul_assign","","",0,[[["self"],["wrapping"]]]],[11,"mul_assign","","",0,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"mul_assign","","",0,[[["self"],["wrapping"]]]],[11,"mul_assign","","",0,[[["wrapping",["i8"]],["self"],["i8"]]]],[11,"mul_assign","","",0,[[["self"],["wrapping"]]]],[11,"mul_assign","","",0,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"mul_assign","","",0,[[["wrapping"],["self"]]]],[11,"mul_assign","","",0,[[["self"],["wrapping",["i32"]],["i32"]]]],[11,"mul_assign","","",0,[[["self"],["wrapping"]]]],[11,"mul_assign","","",0,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"mul_assign","","",0,[[["self"],["wrapping"]]]],[11,"mul_assign","","",0,[[["self"],["i128"],["wrapping",["i128"]]]]],[11,"mul_assign","","",0,[[["self"],["wrapping"]]]],[11,"mul_assign","core::time","",153,[[["self"],["u32"]]]],[11,"div_assign","core::num","",0,[[["self"],["wrapping",["usize"]],["usize"]]]],[11,"div_assign","","",0,[[["self"],["wrapping"]]]],[11,"div_assign","","",0,[[["self"],["wrapping",["u8"]],["u8"]]]],[11,"div_assign","","",0,[[["self"],["wrapping"]]]],[11,"div_assign","","",0,[[["u16"],["self"],["wrapping",["u16"]]]]],[11,"div_assign","","",0,[[["self"],["wrapping"]]]],[11,"div_assign","","",0,[[["self"],["wrapping",["u32"]],["u32"]]]],[11,"div_assign","","",0,[[["self"],["wrapping"]]]],[11,"div_assign","","",0,[[["self"],["u64"],["wrapping",["u64"]]]]],[11,"div_assign","","",0,[[["wrapping"],["self"]]]],[11,"div_assign","","",0,[[["wrapping",["u128"]],["self"],["u128"]]]],[11,"div_assign","","",0,[[["self"],["wrapping"]]]],[11,"div_assign","","",0,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"div_assign","","",0,[[["self"],["wrapping"]]]],[11,"div_assign","","",0,[[["wrapping",["i8"]],["self"],["i8"]]]],[11,"div_assign","","",0,[[["self"],["wrapping"]]]],[11,"div_assign","","",0,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"div_assign","","",0,[[["wrapping"],["self"]]]],[11,"div_assign","","",0,[[["self"],["wrapping",["i32"]],["i32"]]]],[11,"div_assign","","",0,[[["self"],["wrapping"]]]],[11,"div_assign","","",0,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"div_assign","","",0,[[["self"],["wrapping"]]]],[11,"div_assign","","",0,[[["self"],["i128"],["wrapping",["i128"]]]]],[11,"div_assign","","",0,[[["self"],["wrapping"]]]],[11,"div_assign","core::time","",153,[[["self"],["u32"]]]],[11,"rem_assign","core::num","",0,[[["self"],["wrapping",["usize"]],["usize"]]]],[11,"rem_assign","","",0,[[["self"],["wrapping"]]]],[11,"rem_assign","","",0,[[["self"],["wrapping",["u8"]],["u8"]]]],[11,"rem_assign","","",0,[[["self"],["wrapping"]]]],[11,"rem_assign","","",0,[[["u16"],["self"],["wrapping",["u16"]]]]],[11,"rem_assign","","",0,[[["self"],["wrapping"]]]],[11,"rem_assign","","",0,[[["self"],["wrapping",["u32"]],["u32"]]]],[11,"rem_assign","","",0,[[["self"],["wrapping"]]]],[11,"rem_assign","","",0,[[["self"],["u64"],["wrapping",["u64"]]]]],[11,"rem_assign","","",0,[[["wrapping"],["self"]]]],[11,"rem_assign","","",0,[[["wrapping",["u128"]],["self"],["u128"]]]],[11,"rem_assign","","",0,[[["self"],["wrapping"]]]],[11,"rem_assign","","",0,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"rem_assign","","",0,[[["self"],["wrapping"]]]],[11,"rem_assign","","",0,[[["wrapping",["i8"]],["self"],["i8"]]]],[11,"rem_assign","","",0,[[["self"],["wrapping"]]]],[11,"rem_assign","","",0,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"rem_assign","","",0,[[["wrapping"],["self"]]]],[11,"rem_assign","","",0,[[["self"],["wrapping",["i32"]],["i32"]]]],[11,"rem_assign","","",0,[[["self"],["wrapping"]]]],[11,"rem_assign","","",0,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"rem_assign","","",0,[[["self"],["wrapping"]]]],[11,"rem_assign","","",0,[[["self"],["i128"],["wrapping",["i128"]]]]],[11,"rem_assign","","",0,[[["self"],["wrapping"]]]],[11,"not","","",0,[[],[["wrapping",["usize"]],["usize"]]]],[11,"not","","",0,[[],[["wrapping",["u8"]],["u8"]]]],[11,"not","","",0,[[],[["u16"],["wrapping",["u16"]]]]],[11,"not","","",0,[[],[["wrapping",["u32"]],["u32"]]]],[11,"not","","",0,[[],[["u64"],["wrapping",["u64"]]]]],[11,"not","","",0,[[],[["u128"],["wrapping",["u128"]]]]],[11,"not","","",0,[[],[["isize"],["wrapping",["isize"]]]]],[11,"not","","",0,[[],[["wrapping",["i8"]],["i8"]]]],[11,"not","","",0,[[],[["wrapping",["i16"]],["i16"]]]],[11,"not","","",0,[[],[["wrapping",["i32"]],["i32"]]]],[11,"not","","",0,[[],[["i64"],["wrapping",["i64"]]]]],[11,"not","","",0,[[],[["i128"],["wrapping",["i128"]]]]],[11,"bitand","","",0,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"bitand","","",0,[[["wrapping"]]]],[11,"bitand","","",0,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"bitand","","",0,[[["wrapping"]]]],[11,"bitand","","",0,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"bitand","","",0,[[["wrapping"]]]],[11,"bitand","","",0,[[["wrapping",["u32"]],["u32"]],[["wrapping",["u32"]],["u32"]]]],[11,"bitand","","",0,[[["wrapping"]]]],[11,"bitand","","",0,[[["u64"],["wrapping",["u64"]]],[["u64"],["wrapping",["u64"]]]]],[11,"bitand","","",0,[[["wrapping"]]]],[11,"bitand","","",0,[[["wrapping",["u128"]],["u128"]],[["u128"],["wrapping",["u128"]]]]],[11,"bitand","","",0,[[["wrapping"]]]],[11,"bitand","","",0,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"bitand","","",0,[[["wrapping"]]]],[11,"bitand","","",0,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"bitand","","",0,[[["wrapping"]]]],[11,"bitand","","",0,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"bitand","","",0,[[["wrapping"]]]],[11,"bitand","","",0,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"bitand","","",0,[[["wrapping"]]]],[11,"bitand","","",0,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"bitand","","",0,[[["wrapping"]]]],[11,"bitand","","",0,[[["i128"],["wrapping",["i128"]]],[["i128"],["wrapping",["i128"]]]]],[11,"bitand","","",0,[[["wrapping"]]]],[11,"bitor","","",0,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"bitor","","",0,[[["wrapping"]]]],[11,"bitor","","",0,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"bitor","","",0,[[["wrapping"]]]],[11,"bitor","","",0,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"bitor","","",0,[[["wrapping"]]]],[11,"bitor","","",0,[[["wrapping",["u32"]],["u32"]],[["wrapping",["u32"]],["u32"]]]],[11,"bitor","","",0,[[["wrapping"]]]],[11,"bitor","","",0,[[["u64"],["wrapping",["u64"]]],[["u64"],["wrapping",["u64"]]]]],[11,"bitor","","",0,[[["wrapping"]]]],[11,"bitor","","",0,[[["wrapping",["u128"]],["u128"]],[["u128"],["wrapping",["u128"]]]]],[11,"bitor","","",0,[[["wrapping"]]]],[11,"bitor","","",0,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"bitor","","",0,[[["wrapping"]]]],[11,"bitor","","",0,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"bitor","","",0,[[["wrapping"]]]],[11,"bitor","","",0,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"bitor","","",0,[[["wrapping"]]]],[11,"bitor","","",0,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"bitor","","",0,[[["wrapping"]]]],[11,"bitor","","",0,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"bitor","","",0,[[["wrapping"]]]],[11,"bitor","","",0,[[["i128"],["wrapping",["i128"]]],[["i128"],["wrapping",["i128"]]]]],[11,"bitor","","",0,[[["wrapping"]]]],[11,"bitxor","","",0,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"bitxor","","",0,[[["wrapping"]]]],[11,"bitxor","","",0,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"bitxor","","",0,[[["wrapping"]]]],[11,"bitxor","","",0,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"bitxor","","",0,[[["wrapping"]]]],[11,"bitxor","","",0,[[["wrapping",["u32"]],["u32"]],[["wrapping",["u32"]],["u32"]]]],[11,"bitxor","","",0,[[["wrapping"]]]],[11,"bitxor","","",0,[[["u64"],["wrapping",["u64"]]],[["u64"],["wrapping",["u64"]]]]],[11,"bitxor","","",0,[[["wrapping"]]]],[11,"bitxor","","",0,[[["wrapping",["u128"]],["u128"]],[["u128"],["wrapping",["u128"]]]]],[11,"bitxor","","",0,[[["wrapping"]]]],[11,"bitxor","","",0,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"bitxor","","",0,[[["wrapping"]]]],[11,"bitxor","","",0,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"bitxor","","",0,[[["wrapping"]]]],[11,"bitxor","","",0,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"bitxor","","",0,[[["wrapping"]]]],[11,"bitxor","","",0,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"bitxor","","",0,[[["wrapping"]]]],[11,"bitxor","","",0,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"bitxor","","",0,[[["wrapping"]]]],[11,"bitxor","","",0,[[["i128"],["wrapping",["i128"]]],[["i128"],["wrapping",["i128"]]]]],[11,"bitxor","","",0,[[["wrapping"]]]],[11,"shl","","",0,[[["usize"]],[["wrapping",["u8"]],["u8"]]]],[11,"shl","","",0,[[["usize"]]]],[11,"shl","","",0,[[["usize"]],[["u16"],["wrapping",["u16"]]]]],[11,"shl","","",0,[[["usize"]]]],[11,"shl","","",0,[[["usize"]],[["wrapping",["u32"]],["u32"]]]],[11,"shl","","",0,[[["usize"]]]],[11,"shl","","",0,[[["usize"]],[["u64"],["wrapping",["u64"]]]]],[11,"shl","","",0,[[["usize"]]]],[11,"shl","","",0,[[["usize"]],[["u128"],["wrapping",["u128"]]]]],[11,"shl","","",0,[[["usize"]]]],[11,"shl","","",0,[[["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"shl","","",0,[[["usize"]]]],[11,"shl","","",0,[[["usize"]],[["wrapping",["i8"]],["i8"]]]],[11,"shl","","",0,[[["usize"]]]],[11,"shl","","",0,[[["usize"]],[["wrapping",["i16"]],["i16"]]]],[11,"shl","","",0,[[["usize"]]]],[11,"shl","","",0,[[["usize"]],[["wrapping",["i32"]],["i32"]]]],[11,"shl","","",0,[[["usize"]]]],[11,"shl","","",0,[[["usize"]],[["i64"],["wrapping",["i64"]]]]],[11,"shl","","",0,[[["usize"]]]],[11,"shl","","",0,[[["usize"]],[["i128"],["wrapping",["i128"]]]]],[11,"shl","","",0,[[["usize"]]]],[11,"shl","","",0,[[["usize"]],[["isize"],["wrapping",["isize"]]]]],[11,"shl","","",0,[[["usize"]]]],[11,"shr","","",0,[[["usize"]],[["wrapping",["u8"]],["u8"]]]],[11,"shr","","",0,[[["usize"]]]],[11,"shr","","",0,[[["usize"]],[["u16"],["wrapping",["u16"]]]]],[11,"shr","","",0,[[["usize"]]]],[11,"shr","","",0,[[["usize"]],[["wrapping",["u32"]],["u32"]]]],[11,"shr","","",0,[[["usize"]]]],[11,"shr","","",0,[[["usize"]],[["u64"],["wrapping",["u64"]]]]],[11,"shr","","",0,[[["usize"]]]],[11,"shr","","",0,[[["usize"]],[["u128"],["wrapping",["u128"]]]]],[11,"shr","","",0,[[["usize"]]]],[11,"shr","","",0,[[["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"shr","","",0,[[["usize"]]]],[11,"shr","","",0,[[["usize"]],[["wrapping",["i8"]],["i8"]]]],[11,"shr","","",0,[[["usize"]]]],[11,"shr","","",0,[[["usize"]],[["wrapping",["i16"]],["i16"]]]],[11,"shr","","",0,[[["usize"]]]],[11,"shr","","",0,[[["usize"]],[["wrapping",["i32"]],["i32"]]]],[11,"shr","","",0,[[["usize"]]]],[11,"shr","","",0,[[["usize"]],[["i64"],["wrapping",["i64"]]]]],[11,"shr","","",0,[[["usize"]]]],[11,"shr","","",0,[[["usize"]],[["i128"],["wrapping",["i128"]]]]],[11,"shr","","",0,[[["usize"]]]],[11,"shr","","",0,[[["usize"]],[["isize"],["wrapping",["isize"]]]]],[11,"shr","","",0,[[["usize"]]]],[11,"bitand_assign","","",0,[[["self"],["wrapping",["usize"]],["usize"]]]],[11,"bitand_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",0,[[["self"],["wrapping",["u8"]],["u8"]]]],[11,"bitand_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",0,[[["u16"],["self"],["wrapping",["u16"]]]]],[11,"bitand_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",0,[[["self"],["wrapping",["u32"]],["u32"]]]],[11,"bitand_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",0,[[["self"],["u64"],["wrapping",["u64"]]]]],[11,"bitand_assign","","",0,[[["wrapping"],["self"]]]],[11,"bitand_assign","","",0,[[["wrapping",["u128"]],["self"],["u128"]]]],[11,"bitand_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",0,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"bitand_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",0,[[["wrapping",["i8"]],["self"],["i8"]]]],[11,"bitand_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",0,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"bitand_assign","","",0,[[["wrapping"],["self"]]]],[11,"bitand_assign","","",0,[[["self"],["wrapping",["i32"]],["i32"]]]],[11,"bitand_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",0,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"bitand_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",0,[[["self"],["i128"],["wrapping",["i128"]]]]],[11,"bitand_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",0,[[["self"],["wrapping",["usize"]],["usize"]]]],[11,"bitor_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",0,[[["self"],["wrapping",["u8"]],["u8"]]]],[11,"bitor_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",0,[[["u16"],["self"],["wrapping",["u16"]]]]],[11,"bitor_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",0,[[["self"],["wrapping",["u32"]],["u32"]]]],[11,"bitor_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",0,[[["self"],["u64"],["wrapping",["u64"]]]]],[11,"bitor_assign","","",0,[[["wrapping"],["self"]]]],[11,"bitor_assign","","",0,[[["wrapping",["u128"]],["self"],["u128"]]]],[11,"bitor_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",0,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"bitor_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",0,[[["wrapping",["i8"]],["self"],["i8"]]]],[11,"bitor_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",0,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"bitor_assign","","",0,[[["wrapping"],["self"]]]],[11,"bitor_assign","","",0,[[["self"],["wrapping",["i32"]],["i32"]]]],[11,"bitor_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",0,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"bitor_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",0,[[["self"],["i128"],["wrapping",["i128"]]]]],[11,"bitor_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",0,[[["self"],["wrapping",["usize"]],["usize"]]]],[11,"bitxor_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",0,[[["self"],["wrapping",["u8"]],["u8"]]]],[11,"bitxor_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",0,[[["u16"],["self"],["wrapping",["u16"]]]]],[11,"bitxor_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",0,[[["self"],["wrapping",["u32"]],["u32"]]]],[11,"bitxor_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",0,[[["self"],["u64"],["wrapping",["u64"]]]]],[11,"bitxor_assign","","",0,[[["wrapping"],["self"]]]],[11,"bitxor_assign","","",0,[[["wrapping",["u128"]],["self"],["u128"]]]],[11,"bitxor_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",0,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"bitxor_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",0,[[["wrapping",["i8"]],["self"],["i8"]]]],[11,"bitxor_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",0,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"bitxor_assign","","",0,[[["wrapping"],["self"]]]],[11,"bitxor_assign","","",0,[[["self"],["wrapping",["i32"]],["i32"]]]],[11,"bitxor_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",0,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"bitxor_assign","","",0,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",0,[[["self"],["i128"],["wrapping",["i128"]]]]],[11,"bitxor_assign","","",0,[[["self"],["wrapping"]]]],[11,"shl_assign","","",0,[[["self"],["usize"]]]],[11,"shl_assign","","",0,[[["self"],["usize"]]]],[11,"shl_assign","","",0,[[["self"],["usize"]]]],[11,"shl_assign","","",0,[[["self"],["usize"]]]],[11,"shl_assign","","",0,[[["self"],["usize"]]]],[11,"shl_assign","","",0,[[["self"],["usize"]]]],[11,"shl_assign","","",0,[[["self"],["usize"]]]],[11,"shl_assign","","",0,[[["self"],["usize"]]]],[11,"shl_assign","","",0,[[["self"],["usize"]]]],[11,"shl_assign","","",0,[[["self"],["usize"]]]],[11,"shl_assign","","",0,[[["self"],["usize"]]]],[11,"shl_assign","","",0,[[["self"],["usize"]]]],[11,"shl_assign","","",0,[[["self"],["usize"]]]],[11,"shl_assign","","",0,[[["self"],["usize"]]]],[11,"shl_assign","","",0,[[["self"],["usize"]]]],[11,"shl_assign","","",0,[[["self"],["usize"]]]],[11,"shl_assign","","",0,[[["self"],["usize"]]]],[11,"shl_assign","","",0,[[["self"],["usize"]]]],[11,"shl_assign","","",0,[[["self"],["usize"]]]],[11,"shl_assign","","",0,[[["self"],["usize"]]]],[11,"shl_assign","","",0,[[["self"],["usize"]]]],[11,"shl_assign","","",0,[[["self"],["usize"]]]],[11,"shl_assign","","",0,[[["self"],["usize"]]]],[11,"shl_assign","","",0,[[["self"],["usize"]]]],[11,"shr_assign","","",0,[[["self"],["usize"]]]],[11,"shr_assign","","",0,[[["self"],["usize"]]]],[11,"shr_assign","","",0,[[["self"],["usize"]]]],[11,"shr_assign","","",0,[[["self"],["usize"]]]],[11,"shr_assign","","",0,[[["self"],["usize"]]]],[11,"shr_assign","","",0,[[["self"],["usize"]]]],[11,"shr_assign","","",0,[[["self"],["usize"]]]],[11,"shr_assign","","",0,[[["self"],["usize"]]]],[11,"shr_assign","","",0,[[["self"],["usize"]]]],[11,"shr_assign","","",0,[[["self"],["usize"]]]],[11,"shr_assign","","",0,[[["self"],["usize"]]]],[11,"shr_assign","","",0,[[["self"],["usize"]]]],[11,"shr_assign","","",0,[[["self"],["usize"]]]],[11,"shr_assign","","",0,[[["self"],["usize"]]]],[11,"shr_assign","","",0,[[["self"],["usize"]]]],[11,"shr_assign","","",0,[[["self"],["usize"]]]],[11,"shr_assign","","",0,[[["self"],["usize"]]]],[11,"shr_assign","","",0,[[["self"],["usize"]]]],[11,"shr_assign","","",0,[[["self"],["usize"]]]],[11,"shr_assign","","",0,[[["self"],["usize"]]]],[11,"shr_assign","","",0,[[["self"],["usize"]]]],[11,"shr_assign","","",0,[[["self"],["usize"]]]],[11,"shr_assign","","",0,[[["self"],["usize"]]]],[11,"shr_assign","","",0,[[["self"],["usize"]]]],[11,"deref","core::mem","",16,[[["self"]],["t"]]],[11,"deref","core::cell","",80,[[["self"]],["t"]]],[11,"deref","","",81,[[["self"]],["t"]]],[11,"deref","core::ffi","",203,[[["self"]],["valistimpl"]]],[11,"deref","core::pin","",99,[[["self"]]]],[11,"deref_mut","core::mem","",16,[[["self"]],["t"]]],[11,"deref_mut","core::cell","",81,[[["self"]],["t"]]],[11,"deref_mut","core::ffi","",203,[[["self"]],["valistimpl"]]],[11,"deref_mut","core::pin","",99,[[["self"]]]],[11,"drop","core::array","",76,[[["self"]]]],[11,"drop","core::ffi","",85,[[["self"]]]],[11,"drop","core::task","",159,[[["self"]]]],[11,"resume","core::pin","",99,[[["pin"],["self"]],["generatorstate"]]],[11,"start_bound","core::ops","",190,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",190,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",35,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",35,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",36,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",36,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",34,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",34,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",40,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",40,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",37,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",37,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",35,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",35,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",36,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",36,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",34,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",34,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",40,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",40,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",37,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",37,[[["self"]],[["bound"],["t"]]]],[11,"into_result","core::option","",96,[[],[["result",["noneerror"]],["noneerror"]]]],[11,"from_ok","","",96,[[["t"]],["self"]]],[11,"from_error","","",96,[[["noneerror"]],["self"]]],[11,"into_result","core::result","",101,[[],["self"]]],[11,"from_ok","","",101,[[["t"]],["self"]]],[11,"from_error","","",101,[[["e"]],["self"]]],[11,"into_result","core::task","",155,[[],["result"]]],[11,"from_error","","",155,[[],["self"]]],[11,"from_ok","","",155,[[],["self"]]],[11,"into_result","","",155,[[],["result"]]],[11,"from_error","","",155,[[],["self"]]],[11,"from_ok","","",155,[[],["self"]]],[11,"sum","core::num","",0,[[["iterator"]],["self"]]],[11,"sum","","",0,[[["iterator"]],["self"]]],[11,"sum","","",0,[[["iterator"]],["self"]]],[11,"sum","","",0,[[["iterator"]],["self"]]],[11,"sum","","",0,[[["iterator"]],["self"]]],[11,"sum","","",0,[[["iterator"]],["self"]]],[11,"sum","","",0,[[["iterator"]],["self"]]],[11,"sum","","",0,[[["iterator"]],["self"]]],[11,"sum","","",0,[[["iterator"]],["self"]]],[11,"sum","","",0,[[["iterator"]],["self"]]],[11,"sum","","",0,[[["iterator"]],["self"]]],[11,"sum","","",0,[[["iterator"]],["self"]]],[11,"sum","","",0,[[["iterator"]],["self"]]],[11,"sum","","",0,[[["iterator"]],["self"]]],[11,"sum","","",0,[[["iterator"]],["self"]]],[11,"sum","","",0,[[["iterator"]],["self"]]],[11,"sum","","",0,[[["iterator"]],["self"]]],[11,"sum","","",0,[[["iterator"]],["self"]]],[11,"sum","","",0,[[["iterator"]],["self"]]],[11,"sum","","",0,[[["iterator"]],["self"]]],[11,"sum","","",0,[[["iterator"]],["self"]]],[11,"sum","","",0,[[["iterator"]],["self"]]],[11,"sum","","",0,[[["iterator"]],["self"]]],[11,"sum","","",0,[[["iterator"]],["self"]]],[11,"sum","core::result","Takes each element in the `Iterator`: if it is an `Err`,…",101,[[["i"]],["result"]]],[11,"sum","core::option","Takes each element in the `Iterator`: if it is a `None`,…",96,[[["i"]],["option"]]],[11,"sum","core::time","",153,[[["iterator"]],["duration"]]],[11,"sum","","",153,[[["iterator"]],["duration"]]],[11,"product","core::num","",0,[[["iterator"]],["self"]]],[11,"product","","",0,[[["iterator"]],["self"]]],[11,"product","","",0,[[["iterator"]],["self"]]],[11,"product","","",0,[[["iterator"]],["self"]]],[11,"product","","",0,[[["iterator"]],["self"]]],[11,"product","","",0,[[["iterator"]],["self"]]],[11,"product","","",0,[[["iterator"]],["self"]]],[11,"product","","",0,[[["iterator"]],["self"]]],[11,"product","","",0,[[["iterator"]],["self"]]],[11,"product","","",0,[[["iterator"]],["self"]]],[11,"product","","",0,[[["iterator"]],["self"]]],[11,"product","","",0,[[["iterator"]],["self"]]],[11,"product","","",0,[[["iterator"]],["self"]]],[11,"product","","",0,[[["iterator"]],["self"]]],[11,"product","","",0,[[["iterator"]],["self"]]],[11,"product","","",0,[[["iterator"]],["self"]]],[11,"product","","",0,[[["iterator"]],["self"]]],[11,"product","","",0,[[["iterator"]],["self"]]],[11,"product","","",0,[[["iterator"]],["self"]]],[11,"product","","",0,[[["iterator"]],["self"]]],[11,"product","","",0,[[["iterator"]],["self"]]],[11,"product","","",0,[[["iterator"]],["self"]]],[11,"product","","",0,[[["iterator"]],["self"]]],[11,"product","","",0,[[["iterator"]],["self"]]],[11,"product","core::result","Takes each element in the `Iterator`: if it is an `Err`,…",101,[[["i"]],["result"]]],[11,"product","core::option","Takes each element in the `Iterator`: if it is a `None`,…",96,[[["i"]],["option"]]],[11,"from_iter","","Takes each element in the [`Iterator`]: if it is…",96,[[["intoiterator"]],["option"]]],[11,"from_iter","core::result","Takes each element in the `Iterator`: if it is an `Err`,…",101,[[["intoiterator"]],["result"]]],[11,"into_iter","core::option","Returns a consuming iterator over the possibly contained…",96,[[],["intoiter"]]],[11,"into_iter","core::result","Returns a consuming iterator over the possibly contained…",101,[[],["intoiter"]]],[11,"next_back","core::array","",76,[[["self"]],["option"]]],[11,"next_back","core::ascii","",192,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"next_back","core::iter","",216,[[["self"]],["option"]]],[11,"nth_back","","",216,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",216,[[["self"],["acc"],["f"]],["r"]]],[11,"rfold","","",216,[[["acc"],["f"]],["acc"]]],[11,"next_back","","",224,[[["self"]],["option"]]],[11,"try_rfold","","",224,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",224,[[["acc"],["fold"]],["acc"]]],[11,"next_back","","",214,[[["self"]],["option"]]],[11,"try_rfold","","",214,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",214,[[["acc"],["fold"]],["acc"]]],[11,"next_back","","",223,[[["self"]],["option"]]],[11,"next_back","","",222,[[["self"]],["option"]]],[11,"nth_back","","",222,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",222,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",222,[[["acc"],["f"]],["acc"]]],[11,"rfind","","",222,[[["self"],["p"]],["option"]]],[11,"next_back","","",213,[[["self"]],["option"]]],[11,"try_rfold","","",213,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",213,[[["acc"],["f"]],["acc"]]],[11,"next_back","","",212,[[["self"]],["option"]]],[11,"try_rfold","","",212,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",212,[[["acc"],["f"]],["acc"]]],[11,"next_back","","",215,[[["self"]],["option"]]],[11,"nth_back","","",215,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",215,[[["self"],["acc"],["f"]],["r"]]],[11,"next_back","","",221,[[["self"]],["option"]]],[11,"try_rfold","","",221,[[["self"],["acc"],["g"]],["r"]]],[11,"rfold","","",221,[[["acc"],["g"]],["acc"]]],[11,"next_back","","",219,[[["self"]],["option"]]],[11,"try_rfold","","",219,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",219,[[["acc"],["fold"]],["acc"]]],[11,"next_back","","",220,[[["self"]],["option"]]],[11,"try_rfold","","",220,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",220,[[["acc"],["fold"]],["acc"]]],[11,"next_back","","",218,[[["self"]],["option"]]],[11,"nth_back","","",218,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",218,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",218,[[["acc"],["fold"]],["acc"]]],[11,"next_back","","",86,[[["self"]],["option"]]],[11,"try_rfold","","",86,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",86,[[["acc"],["fold"]],["acc"]]],[11,"next_back","","",226,[[["self"]],["option"]]],[11,"nth_back","","",226,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",226,[[["self"],["acc"],["fold"]],["r"]]],[11,"next_back","","",228,[[["self"]],["option"]]],[11,"nth_back","","",228,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",228,[[["self"],["acc"],["fold"]],["r"]]],[11,"next_back","","",230,[[["self"]],["option"]]],[11,"nth_back","","",230,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",230,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",230,[[["acc"],["fold"]],["acc"]]],[11,"next_back","","",230,[[["self"]],["option"]]],[11,"nth_back","","",230,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",230,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",230,[[["acc"],["fold"]],["acc"]]],[11,"next_back","","",231,[[["self"]],["option"]]],[11,"try_rfold","","",231,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",231,[[["acc"],["fold"]],["acc"]]],[11,"next_back","core::ops","",34,[[["self"]],["option"]]],[11,"nth_back","","",34,[[["self"],["usize"]],["option"]]],[11,"next_back","","",40,[[["self"]],["option"]]],[11,"nth_back","","",40,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",40,[[["self"],["b"],["f"]],["r"]]],[11,"next_back","core::iter","",209,[[["self"]],["option"]]],[11,"next_back","","",205,[[["self"]],["option"]]],[11,"next_back","","",207,[[["self"]],["option"]]],[11,"next_back","","",208,[[["self"]],["option"]]],[11,"next_back","core::option","",232,[[["self"]],[["option"],["a"]]]],[11,"next_back","","",233,[[["self"]],[["option"],["a"]]]],[11,"next_back","","",234,[[["self"]],["option"]]],[11,"next_back","core::result","",236,[[["self"]],[["t"],["option"]]]],[11,"next_back","","",237,[[["self"]],[["option"],["t"]]]],[11,"next_back","","",238,[[["self"]],["option"]]],[11,"next_back","core::slice","",137,[[["self"]],[["t"],["option"]]]],[11,"nth_back","","",137,[[["self"],["usize"]],[["t"],["option"]]]],[11,"next_back","","",138,[[["self"]],[["option"],["t"]]]],[11,"nth_back","","",138,[[["self"],["usize"]],[["option"],["t"]]]],[11,"next_back","","",242,[[["self"]],["option"]]],[11,"next_back","","",243,[[["self"]],["option"]]],[11,"next_back","","",244,[[["self"]],["option"]]],[11,"next_back","","",245,[[["self"]],["option"]]],[11,"next_back","","",250,[[["self"]],["option"]]],[11,"nth_back","","",250,[[["self"],["usize"]],["option"]]],[11,"next_back","","",251,[[["self"]],["option"]]],[11,"nth_back","","",251,[[["self"],["usize"]],["option"]]],[11,"next_back","","",252,[[["self"]],["option"]]],[11,"nth_back","","",252,[[["self"],["usize"]],["option"]]],[11,"next_back","","",139,[[["self"]],["option"]]],[11,"nth_back","","",139,[[["self"],["usize"]],["option"]]],[11,"next_back","","",140,[[["self"]],["option"]]],[11,"nth_back","","",140,[[["self"],["usize"]],["option"]]],[11,"next_back","","",253,[[["self"]],["option"]]],[11,"nth_back","","",253,[[["self"],["usize"]],["option"]]],[11,"next_back","","",254,[[["self"]],["option"]]],[11,"nth_back","","",254,[[["self"],["usize"]],["option"]]],[11,"next_back","","",141,[[["self"]],["option"]]],[11,"nth_back","","",141,[[["self"],["usize"]],["option"]]],[11,"next_back","","",142,[[["self"]],["option"]]],[11,"nth_back","","",142,[[["self"],["usize"]],["option"]]],[11,"next_back","core::str","",151,[[["self"]],[["char"],["option",["char"]]]]],[11,"next_back","","",152,[[["self"]],["option"]]],[11,"next_back","","",256,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"nth_back","","",256,[[["self"],["usize"]],["option"]]],[11,"rfind","","",256,[[["self"],["p"]],["option"]]],[11,"next_back","","",257,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","","",258,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","","",259,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","","",260,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","","",263,[[["self"]],["option"]]],[11,"next_back","","",264,[[["self"]],["option"]]],[11,"next_back","","",265,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","","",266,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","","",267,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","","",268,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","","",269,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","","",270,[[["self"]],[["option",["str"]],["str"]]]],[11,"len","core::array","",76,[[["self"]],["usize"]]],[11,"is_empty","","",76,[[["self"]],["bool"]]],[11,"len","core::char","",198,[[["self"]],["usize"]]],[11,"len","","",199,[[["self"]],["usize"]]],[11,"len","core::iter","",222,[[["self"]],["usize"]]],[11,"is_empty","","",222,[[["self"]],["bool"]]],[11,"len","","",213,[[["self"]],["usize"]]],[11,"is_empty","","",213,[[["self"]],["bool"]]],[11,"len","","",212,[[["self"]],["usize"]]],[11,"is_empty","","",212,[[["self"]],["bool"]]],[11,"len","","",221,[[["self"]],["usize"]]],[11,"is_empty","","",221,[[["self"]],["bool"]]],[11,"len","","",218,[[["self"]],["usize"]]],[11,"is_empty","","",218,[[["self"]],["bool"]]],[11,"len","","",230,[[["self"]],["usize"]]],[11,"is_empty","","",230,[[["self"]],["bool"]]],[11,"len","","",231,[[["self"]],["usize"]]],[11,"is_empty","","",231,[[["self"]],["bool"]]],[11,"len","","",205,[[["self"]],["usize"]]],[11,"len","","",207,[[["self"]],["usize"]]],[11,"len","","",208,[[["self"]],["usize"]]],[11,"len","core::slice","",137,[[["self"]],["usize"]]],[11,"is_empty","","",137,[[["self"]],["bool"]]],[11,"len","","",138,[[["self"]],["usize"]]],[11,"is_empty","","",138,[[["self"]],["bool"]]],[11,"is_empty","","",139,[[["self"]],["bool"]]],[11,"is_empty","","",140,[[["self"]],["bool"]]],[11,"is_empty","","",141,[[["self"]],["bool"]]],[11,"is_empty","","",142,[[["self"]],["bool"]]],[11,"len","core::str","",256,[[["self"]],["usize"]]],[11,"is_empty","","",256,[[["self"]],["bool"]]],[11,"next","core::array","",76,[[["self"]],["option"]]],[11,"size_hint","","",76,[[["self"]]]],[11,"count","","",76,[[],["usize"]]],[11,"last","","",76,[[],["option"]]],[11,"next","core::ascii","",192,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"size_hint","","",192,[[["self"]]]],[11,"last","","",192,[[],[["option",["u8"]],["u8"]]]],[11,"next","core::char","",197,[[["self"]],[["result",["char","decodeutf16error"]],["option",["result"]]]]],[11,"size_hint","","",197,[[["self"]]]],[11,"next","","",198,[[["self"]],[["char"],["option",["char"]]]]],[11,"size_hint","","",198,[[["self"]]]],[11,"count","","",198,[[],["usize"]]],[11,"last","","",198,[[],[["char"],["option",["char"]]]]],[11,"next","","",199,[[["self"]],[["char"],["option",["char"]]]]],[11,"size_hint","","",199,[[["self"]]]],[11,"count","","",199,[[],["usize"]]],[11,"nth","","",199,[[["self"],["usize"]],[["char"],["option",["char"]]]]],[11,"last","","",199,[[],[["char"],["option",["char"]]]]],[11,"next","","",200,[[["self"]],[["char"],["option",["char"]]]]],[11,"size_hint","","",200,[[["self"]]]],[11,"next","","",201,[[["self"]],[["char"],["option",["char"]]]]],[11,"size_hint","","",201,[[["self"]]]],[11,"next","","",202,[[["self"]],[["char"],["option",["char"]]]]],[11,"size_hint","","",202,[[["self"]]]],[11,"next","core::iter","",216,[[["self"]],["option"]]],[11,"count","","",216,[[],["usize"]]],[11,"try_fold","","",216,[[["self"],["acc"],["f"]],["r"]]],[11,"fold","","",216,[[["acc"],["f"]],["acc"]]],[11,"nth","","",216,[[["self"],["usize"]],["option"]]],[11,"find","","",216,[[["self"],["p"]],["option"]]],[11,"last","","",216,[[],["option"]]],[11,"size_hint","","",216,[[["self"]]]],[11,"next","","",224,[[["self"]],["option"]]],[11,"size_hint","","",224,[[["self"]]]],[11,"try_fold","","",224,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",224,[[["acc"],["fold"]],["acc"]]],[11,"next","","",214,[[["self"]],["option"]]],[11,"size_hint","","",214,[[["self"]]]],[11,"try_fold","","",214,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",214,[[["acc"],["fold"]],["acc"]]],[11,"next","","",223,[[["self"]],["option"]]],[11,"size_hint","","",223,[[["self"]]]],[11,"nth","","",223,[[["self"],["usize"]],["option"]]],[11,"next","","",222,[[["self"]],["option"]]],[11,"size_hint","","",222,[[["self"]]]],[11,"nth","","",222,[[["self"],["usize"]],["option"]]],[11,"try_fold","","",222,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",222,[[["acc"],["f"]],["acc"]]],[11,"find","","",222,[[["self"],["p"]],["option"]]],[11,"next","","",213,[[["self"]],["option"]]],[11,"size_hint","","",213,[[["self"]]]],[11,"try_fold","","",213,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",213,[[["acc"],["f"]],["acc"]]],[11,"next","","",212,[[["self"]],["option"]]],[11,"size_hint","","",212,[[["self"]]]],[11,"try_fold","","",212,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",212,[[["acc"],["f"]],["acc"]]],[11,"next","","",217,[[["self"]],["option"]]],[11,"size_hint","","",217,[[["self"]]]],[11,"try_fold","","",217,[[["self"],["acc"],["f"]],["r"]]],[11,"next","","",215,[[["self"]],["option"]]],[11,"size_hint","","",215,[[["self"]]]],[11,"nth","","",215,[[["self"],["usize"]],["option"]]],[11,"try_fold","","",215,[[["self"],["acc"],["f"]],["r"]]],[11,"next","","",221,[[["self"]],["option"]]],[11,"size_hint","","",221,[[["self"]]]],[11,"try_fold","","",221,[[["self"],["acc"],["g"]],["r"]]],[11,"fold","","",221,[[["acc"],["g"]],["acc"]]],[11,"next","","",219,[[["self"]],["option"]]],[11,"size_hint","","",219,[[["self"]]]],[11,"count","","",219,[[],["usize"]]],[11,"try_fold","","",219,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",219,[[["acc"],["fold"]],["acc"]]],[11,"next","","",220,[[["self"]],["option"]]],[11,"size_hint","","",220,[[["self"]]]],[11,"try_fold","","",220,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",220,[[["acc"],["fold"]],["acc"]]],[11,"next","","Overflow Behavior",218,[[["self"]],["option"]]],[11,"size_hint","","",218,[[["self"]]]],[11,"nth","","",218,[[["self"],["usize"]],["option"]]],[11,"count","","",218,[[],["usize"]]],[11,"try_fold","","",218,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",218,[[["acc"],["fold"]],["acc"]]],[11,"next","","",86,[[["self"]],["option"]]],[11,"count","","",86,[[],["usize"]]],[11,"nth","","",86,[[["self"],["usize"]],["option"]]],[11,"last","","",86,[[],["option"]]],[11,"size_hint","","",86,[[["self"]]]],[11,"try_fold","","",86,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",86,[[["acc"],["fold"]],["acc"]]],[11,"next","","",227,[[["self"]],["option"]]],[11,"size_hint","","",227,[[["self"]]]],[11,"try_fold","","",227,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",227,[[["acc"],["fold"]],["acc"]]],[11,"next","","",229,[[["self"]],["option"]]],[11,"size_hint","","",229,[[["self"]]]],[11,"try_fold","","",229,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","","",226,[[["self"]],["option"]]],[11,"nth","","",226,[[["self"],["usize"]],["option"]]],[11,"count","","",226,[[],["usize"]]],[11,"last","","",226,[[],["option"]]],[11,"size_hint","","",226,[[["self"]]]],[11,"try_fold","","",226,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",226,[[["acc"],["fold"]],["acc"]]],[11,"next","","",228,[[["self"]],["option"]]],[11,"nth","","",228,[[["self"],["usize"]],["option"]]],[11,"size_hint","","",228,[[["self"]]]],[11,"try_fold","","",228,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","","",225,[[["self"]],["option"]]],[11,"size_hint","","",225,[[["self"]]]],[11,"try_fold","","",225,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","","",230,[[["self"]],["option"]]],[11,"nth","","",230,[[["self"],["usize"]],["option"]]],[11,"last","","",230,[[],["option"]]],[11,"count","","",230,[[],["usize"]]],[11,"size_hint","","",230,[[["self"]]]],[11,"try_fold","","",230,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",230,[[["acc"],["fold"]],["acc"]]],[11,"next","","",230,[[["self"]],["option"]]],[11,"nth","","",230,[[["self"],["usize"]],["option"]]],[11,"last","","",230,[[],["option"]]],[11,"count","","",230,[[],["usize"]]],[11,"size_hint","","",230,[[["self"]]]],[11,"try_fold","","",230,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",230,[[["acc"],["fold"]],["acc"]]],[11,"next","","",231,[[["self"]],["option"]]],[11,"size_hint","","",231,[[["self"]]]],[11,"try_fold","","",231,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",231,[[["acc"],["fold"]],["acc"]]],[11,"next","core::ops","",34,[[["self"]],["option"]]],[11,"size_hint","","",34,[[["self"]]]],[11,"nth","","",34,[[["self"],["usize"]],["option"]]],[11,"last","","",34,[[],["option"]]],[11,"min","","",34,[[],["option"]]],[11,"max","","",34,[[],["option"]]],[11,"next","","",35,[[["self"]],["option"]]],[11,"size_hint","","",35,[[["self"]]]],[11,"nth","","",35,[[["self"],["usize"]],["option"]]],[11,"next","","",40,[[["self"]],["option"]]],[11,"size_hint","","",40,[[["self"]]]],[11,"nth","","",40,[[["self"],["usize"]],["option"]]],[11,"try_fold","","",40,[[["self"],["b"],["f"]],["r"]]],[11,"last","","",40,[[],["option"]]],[11,"min","","",40,[[],["option"]]],[11,"max","","",40,[[],["option"]]],[11,"next","core::iter","",209,[[["self"]],["option"]]],[11,"size_hint","","",209,[[["self"]]]],[11,"next","","",210,[[["self"]],["option"]]],[11,"size_hint","","",210,[[["self"]]]],[11,"next","","",205,[[["self"]],["option"]]],[11,"size_hint","","",205,[[["self"]]]],[11,"next","","",207,[[["self"]],["option"]]],[11,"size_hint","","",207,[[["self"]]]],[11,"next","","",208,[[["self"]],["option"]]],[11,"size_hint","","",208,[[["self"]]]],[11,"next","","",206,[[["self"]],["option"]]],[11,"next","","",211,[[["self"]],["option"]]],[11,"size_hint","","",211,[[["self"]]]],[11,"next","core::option","",232,[[["self"]],[["option"],["a"]]]],[11,"size_hint","","",232,[[["self"]]]],[11,"next","","",233,[[["self"]],[["option"],["a"]]]],[11,"size_hint","","",233,[[["self"]]]],[11,"next","","",234,[[["self"]],["option"]]],[11,"size_hint","","",234,[[["self"]]]],[11,"next","core::result","",236,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",236,[[["self"]]]],[11,"next","","",237,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",237,[[["self"]]]],[11,"next","","",238,[[["self"]],["option"]]],[11,"size_hint","","",238,[[["self"]]]],[11,"next","core::slice","",137,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",137,[[["self"]]]],[11,"count","","",137,[[],["usize"]]],[11,"nth","","",137,[[["self"],["usize"]],[["t"],["option"]]]],[11,"last","","",137,[[],[["t"],["option"]]]],[11,"position","","",137,[[["self"],["p"]],[["usize"],["option",["usize"]]]]],[11,"rposition","","",137,[[["self"],["p"]],[["usize"],["option",["usize"]]]]],[11,"is_sorted_by","","",137,[[["f"]],["bool"]]],[11,"next","","",138,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",138,[[["self"]]]],[11,"count","","",138,[[],["usize"]]],[11,"nth","","",138,[[["self"],["usize"]],[["option"],["t"]]]],[11,"last","","",138,[[],[["option"],["t"]]]],[11,"position","","",138,[[["self"],["p"]],[["usize"],["option",["usize"]]]]],[11,"rposition","","",138,[[["self"],["p"]],[["usize"],["option",["usize"]]]]],[11,"next","","",242,[[["self"]],["option"]]],[11,"size_hint","","",242,[[["self"]]]],[11,"next","","",243,[[["self"]],["option"]]],[11,"size_hint","","",243,[[["self"]]]],[11,"next","","",244,[[["self"]],["option"]]],[11,"size_hint","","",244,[[["self"]]]],[11,"next","","",245,[[["self"]],["option"]]],[11,"size_hint","","",245,[[["self"]]]],[11,"next","","",246,[[["self"]],["option"]]],[11,"size_hint","","",246,[[["self"]]]],[11,"next","","",247,[[["self"]],["option"]]],[11,"size_hint","","",247,[[["self"]]]],[11,"next","","",248,[[["self"]],["option"]]],[11,"size_hint","","",248,[[["self"]]]],[11,"next","","",249,[[["self"]],["option"]]],[11,"size_hint","","",249,[[["self"]]]],[11,"next","","",250,[[["self"]],["option"]]],[11,"size_hint","","",250,[[["self"]]]],[11,"count","","",250,[[],["usize"]]],[11,"nth","","",250,[[["self"],["usize"]],["option"]]],[11,"last","","",250,[[],["option"]]],[11,"next","","",251,[[["self"]],["option"]]],[11,"size_hint","","",251,[[["self"]]]],[11,"count","","",251,[[],["usize"]]],[11,"nth","","",251,[[["self"],["usize"]],["option"]]],[11,"last","","",251,[[],["option"]]],[11,"next","","",252,[[["self"]],["option"]]],[11,"size_hint","","",252,[[["self"]]]],[11,"count","","",252,[[],["usize"]]],[11,"nth","","",252,[[["self"],["usize"]],["option"]]],[11,"last","","",252,[[],["option"]]],[11,"next","","",139,[[["self"]],["option"]]],[11,"size_hint","","",139,[[["self"]]]],[11,"count","","",139,[[],["usize"]]],[11,"nth","","",139,[[["self"],["usize"]],["option"]]],[11,"last","","",139,[[],["option"]]],[11,"next","","",140,[[["self"]],["option"]]],[11,"size_hint","","",140,[[["self"]]]],[11,"count","","",140,[[],["usize"]]],[11,"nth","","",140,[[["self"],["usize"]],["option"]]],[11,"last","","",140,[[],["option"]]],[11,"next","","",253,[[["self"]],["option"]]],[11,"size_hint","","",253,[[["self"]]]],[11,"count","","",253,[[],["usize"]]],[11,"nth","","",253,[[["self"],["usize"]],["option"]]],[11,"last","","",253,[[],["option"]]],[11,"next","","",254,[[["self"]],["option"]]],[11,"size_hint","","",254,[[["self"]]]],[11,"count","","",254,[[],["usize"]]],[11,"nth","","",254,[[["self"],["usize"]],["option"]]],[11,"last","","",254,[[],["option"]]],[11,"next","","",141,[[["self"]],["option"]]],[11,"size_hint","","",141,[[["self"]]]],[11,"count","","",141,[[],["usize"]]],[11,"nth","","",141,[[["self"],["usize"]],["option"]]],[11,"last","","",141,[[],["option"]]],[11,"next","","",142,[[["self"]],["option"]]],[11,"size_hint","","",142,[[["self"]]]],[11,"count","","",142,[[],["usize"]]],[11,"nth","","",142,[[["self"],["usize"]],["option"]]],[11,"last","","",142,[[],["option"]]],[11,"next","core::str::lossy","",279,[[["self"]],[["option",["utf8lossychunk"]],["utf8lossychunk"]]]],[11,"next","core::str","",151,[[["self"]],[["char"],["option",["char"]]]]],[11,"count","","",151,[[],["usize"]]],[11,"size_hint","","",151,[[["self"]]]],[11,"last","","",151,[[],[["char"],["option",["char"]]]]],[11,"next","","",152,[[["self"]],["option"]]],[11,"count","","",152,[[],["usize"]]],[11,"size_hint","","",152,[[["self"]]]],[11,"last","","",152,[[],["option"]]],[11,"next","","",256,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"size_hint","","",256,[[["self"]]]],[11,"count","","",256,[[],["usize"]]],[11,"last","","",256,[[],["option"]]],[11,"nth","","",256,[[["self"],["usize"]],["option"]]],[11,"all","","",256,[[["self"],["f"]],["bool"]]],[11,"any","","",256,[[["self"],["f"]],["bool"]]],[11,"find","","",256,[[["self"],["p"]],["option"]]],[11,"position","","",256,[[["self"],["p"]],[["usize"],["option",["usize"]]]]],[11,"rposition","","",256,[[["self"],["p"]],[["usize"],["option",["usize"]]]]],[11,"next","","",257,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","","",258,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","","",259,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","","",260,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","","",261,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","","",262,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","","",263,[[["self"]],["option"]]],[11,"next","","",264,[[["self"]],["option"]]],[11,"next","","",265,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","","",266,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","","",267,[[["self"]],[["option",["str"]],["str"]]]],[11,"size_hint","","",267,[[["self"]]]],[11,"last","","",267,[[],[["option",["str"]],["str"]]]],[11,"next","","",268,[[["self"]],[["option",["str"]],["str"]]]],[11,"size_hint","","",268,[[["self"]]]],[11,"next","","",269,[[["self"]],[["option",["str"]],["str"]]]],[11,"size_hint","","",269,[[["self"]]]],[11,"last","","",269,[[],[["option",["str"]],["str"]]]],[11,"next","","",270,[[["self"]],[["option",["str"]],["str"]]]],[11,"size_hint","","",270,[[["self"]]]],[11,"last","","",270,[[],[["option",["str"]],["str"]]]],[11,"next","","",271,[[["self"]],[["option",["u16"]],["u16"]]]],[11,"size_hint","","",271,[[["self"]]]],[11,"next","","",272,[[["self"]],[["char"],["option",["char"]]]]],[11,"size_hint","","",272,[[["self"]]]],[11,"try_fold","","",272,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",272,[[["acc"],["fold"]],["acc"]]],[11,"next","","",273,[[["self"]],[["char"],["option",["char"]]]]],[11,"size_hint","","",273,[[["self"]]]],[11,"try_fold","","",273,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",273,[[["acc"],["fold"]],["acc"]]],[11,"next","","",274,[[["self"]],[["char"],["option",["char"]]]]],[11,"size_hint","","",274,[[["self"]]]],[11,"try_fold","","",274,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",274,[[["acc"],["fold"]],["acc"]]],[11,"write_str","core::fmt","",131,[[["str"],["self"]],["result"]]],[11,"write_char","","",131,[[["self"],["char"]],["result"]]],[11,"write_fmt","","",131,[[["self"],["arguments"]],["result"]]],[11,"fmt","core::num","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",185,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",184,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::mem","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",186,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::ptr","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::cmp","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::convert","",187,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::marker","",189,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::ops","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",190,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",34,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",35,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",36,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",40,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",37,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::any","",74,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",74,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",74,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::array","",76,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",191,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::ascii","",192,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::cell","",193,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",194,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::char","",196,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",195,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",197,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",198,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",199,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",200,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",201,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",202,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::ffi","",204,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",203,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::iter","",216,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",224,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",214,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",223,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",222,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",213,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",212,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",217,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",215,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",221,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",219,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",220,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",218,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",227,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",229,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",226,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",228,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",225,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",230,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",231,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",209,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",210,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",205,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",207,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",208,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",206,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",211,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::option","",96,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",232,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",233,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",234,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",235,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::panic","",97,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::pin","",99,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::result","",101,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",236,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",237,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",238,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::sync::atomic","",102,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",105,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",106,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",107,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",108,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",109,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",110,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",111,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",112,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",113,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",114,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",103,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",104,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::fmt","",115,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",239,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",240,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::marker","",188,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::cell","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::hash","",132,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",241,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::slice","",137,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",138,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",242,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",243,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",244,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",245,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",246,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",247,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",248,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",249,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",250,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",251,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",252,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",253,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",254,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::str::pattern","",143,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",275,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",276,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",277,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",278,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::str::lossy","",147,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",148,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::str","",255,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",151,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",256,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",257,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",258,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",259,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",260,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",261,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",262,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",263,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",264,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",265,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",266,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",267,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",268,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",269,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",270,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",271,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",272,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",273,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",274,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::time","",153,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::char","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::task","",155,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",156,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",157,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",158,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",159,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::alloc","",160,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",163,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",280,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",281,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",164,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::arch::x86","",284,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",285,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",286,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",287,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",288,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",289,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",290,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",291,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",292,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",293,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",165,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::arch::aarch64","",294,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",295,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",296,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",297,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::arch::arm","",298,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",299,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",300,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",301,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",302,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",303,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",304,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",305,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",306,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",307,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",308,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",309,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",310,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",311,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",312,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",313,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",314,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",315,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",316,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",317,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",318,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",319,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::arch::wasm32","",320,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::arch::mips","",321,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",322,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",323,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",324,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",325,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",326,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",327,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",328,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",329,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",330,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::arch::powerpc","",331,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",332,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",333,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",334,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::num","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",185,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",184,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::convert","",187,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::array","",191,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::ascii","",192,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::cell","",193,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",194,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",80,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",81,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::char","",196,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",195,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",84,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",198,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",199,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",200,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",201,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",202,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::panic","",97,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",98,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::pin","",99,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::fmt","",240,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",239,[[["self"],["formatter"]],["result"]]],[11,"fmt","core::str::lossy","",148,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::str","",255,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",150,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",272,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",273,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",274,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::alloc","",280,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",281,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",164,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::num","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::ptr","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::pin","",99,[[["formatter"],["self"]],["result"]]],[11,"fmt","core::sync::atomic","",104,[[["formatter"],["self"]],["result"]]],[11,"hash","core::num","",3,[[["self"],["__h"]]]],[11,"hash","","",4,[[["self"],["__h"]]]],[11,"hash","","",5,[[["self"],["__h"]]]],[11,"hash","","",6,[[["self"],["__h"]]]],[11,"hash","","",7,[[["self"],["__h"]]]],[11,"hash","","",8,[[["self"],["__h"]]]],[11,"hash","","",9,[[["self"],["__h"]]]],[11,"hash","","",10,[[["self"],["__h"]]]],[11,"hash","","",11,[[["self"],["__h"]]]],[11,"hash","","",12,[[["self"],["__h"]]]],[11,"hash","","",13,[[["self"],["__h"]]]],[11,"hash","","",14,[[["self"],["__h"]]]],[11,"hash","","",0,[[["self"],["__h"]]]],[11,"hash","core::mem","",16,[[["self"],["__h"]]]],[11,"hash","","",186,[[["self"],["h"]]]],[11,"hash","core::ptr","",18,[[["self"],["h"]]]],[11,"hash","core::cmp","",23,[[["self"],["__h"]]]],[11,"hash","","",22,[[["self"],["__h"]]]],[11,"hash","core::marker","",188,[[["self"],["h"]]]],[11,"hash","","",189,[[["self"],["__h"]]]],[11,"hash","core::ops","",39,[[["self"],["__h"]]]],[11,"hash","","",190,[[["self"],["__h"]]]],[11,"hash","","",34,[[["self"],["__h"]]]],[11,"hash","","",35,[[["self"],["__h"]]]],[11,"hash","","",36,[[["self"],["__h"]]]],[11,"hash","","",40,[[["self"],["h"]]]],[11,"hash","","",37,[[["self"],["__h"]]]],[11,"hash","","",38,[[["self"],["__h"]]]],[11,"hash","core::any","",75,[[["self"],["__h"]]]],[11,"hash","core::option","",96,[[["self"],["__h"]]]],[11,"hash","","",235,[[["self"],["__h"]]]],[11,"hash","core::pin","",99,[[["self"],["h"]]]],[11,"hash","core::result","",101,[[["self"],["__h"]]]],[11,"hash","core::sync::atomic","",102,[[["self"],["__h"]]]],[11,"hash","core::fmt","",239,[[["self"],["__h"]]]],[11,"hash","core::time","",153,[[["self"],["__h"]]]],[11,"hash","core::task","",155,[[["self"],["__h"]]]],[11,"write","core::hash","",132,[[["self"]]]],[11,"finish","","",132,[[["self"]],["u64"]]],[11,"build_hasher","","",241,[[["self"]],["h"]]],[11,"get","core::ops","",34,[[],["option"]]],[11,"get_mut","","",34,[[],["option"]]],[11,"get_unchecked","","",34,[[]]],[11,"get_unchecked_mut","","",34,[[]]],[11,"index","","",34,[[]]],[11,"index_mut","","",34,[[]]],[11,"get","","",36,[[],["option"]]],[11,"get_mut","","",36,[[],["option"]]],[11,"get_unchecked","","",36,[[]]],[11,"get_unchecked_mut","","",36,[[]]],[11,"index","","",36,[[]]],[11,"index_mut","","",36,[[]]],[11,"get","","",35,[[],["option"]]],[11,"get_mut","","",35,[[],["option"]]],[11,"get_unchecked","","",35,[[]]],[11,"get_unchecked_mut","","",35,[[]]],[11,"index","","",35,[[]]],[11,"index_mut","","",35,[[]]],[11,"get","","",190,[[],["option"]]],[11,"get_mut","","",190,[[],["option"]]],[11,"get_unchecked","","",190,[[]]],[11,"get_unchecked_mut","","",190,[[]]],[11,"index","","",190,[[]]],[11,"index_mut","","",190,[[]]],[11,"get","","",40,[[],["option"]]],[11,"get_mut","","",40,[[],["option"]]],[11,"get_unchecked","","",40,[[]]],[11,"get_unchecked_mut","","",40,[[]]],[11,"index","","",40,[[]]],[11,"index_mut","","",40,[[]]],[11,"get","","",37,[[],["option"]]],[11,"get_mut","","",37,[[],["option"]]],[11,"get_unchecked","","",37,[[]]],[11,"get_unchecked_mut","","",37,[[]]],[11,"index","","",37,[[]]],[11,"index_mut","","",37,[[]]],[11,"get","","",190,[[["str"]],["option"]]],[11,"get_mut","","",190,[[["str"]],["option"]]],[11,"get_unchecked","","",190,[[["str"]]]],[11,"get_unchecked_mut","","",190,[[["str"]]]],[11,"index","","",190,[[["str"]]]],[11,"index_mut","","",190,[[["str"]]]],[11,"get","","",34,[[["str"]],["option"]]],[11,"get_mut","","",34,[[["str"]],["option"]]],[11,"get_unchecked","","",34,[[["str"]]]],[11,"get_unchecked_mut","","",34,[[["str"]]]],[11,"index","","",34,[[["str"]]]],[11,"index_mut","","",34,[[["str"]]]],[11,"get","","",36,[[["str"]],["option"]]],[11,"get_mut","","",36,[[["str"]],["option"]]],[11,"get_unchecked","","",36,[[["str"]]]],[11,"get_unchecked_mut","","",36,[[["str"]]]],[11,"index","","",36,[[["str"]]]],[11,"index_mut","","",36,[[["str"]]]],[11,"get","","",35,[[["str"]],["option"]]],[11,"get_mut","","",35,[[["str"]],["option"]]],[11,"get_unchecked","","",35,[[["str"]]]],[11,"get_unchecked_mut","","",35,[[["str"]]]],[11,"index","","",35,[[["str"]]]],[11,"index_mut","","",35,[[["str"]]]],[11,"get","","",40,[[["str"]],["option"]]],[11,"get_mut","","",40,[[["str"]],["option"]]],[11,"get_unchecked","","",40,[[["str"]]]],[11,"get_unchecked_mut","","",40,[[["str"]]]],[11,"index","","",40,[[["str"]]]],[11,"index_mut","","",40,[[["str"]]]],[11,"get","","",37,[[["str"]],["option"]]],[11,"get_mut","","",37,[[["str"]],["option"]]],[11,"get_unchecked","","",37,[[["str"]]]],[11,"get_unchecked_mut","","",37,[[["str"]]]],[11,"index","","",37,[[["str"]]]],[11,"index_mut","","",37,[[["str"]]]],[11,"haystack","core::str::pattern","",275,[[["self"]],["str"]]],[11,"next","","",275,[[["self"]],["searchstep"]]],[11,"next_match","","",275,[[["self"]],["option"]]],[11,"haystack","","",276,[[["self"]],["str"]]],[11,"next","","",276,[[["self"]],["searchstep"]]],[11,"next_match","","",276,[[["self"]],["option"]]],[11,"next_reject","","",276,[[["self"]],["option"]]],[11,"haystack","","",277,[[["self"]],["str"]]],[11,"next","","",277,[[["self"]],["searchstep"]]],[11,"next_match","","",277,[[["self"]],["option"]]],[11,"next_reject","","",277,[[["self"]],["option"]]],[11,"haystack","","",278,[[["self"]],["str"]]],[11,"next","","",278,[[["self"]],["searchstep"]]],[11,"next_match","","",278,[[["self"]],["option"]]],[11,"next_back","","",275,[[["self"]],["searchstep"]]],[11,"next_match_back","","",275,[[["self"]],["option"]]],[11,"next_back","","",276,[[["self"]],["searchstep"]]],[11,"next_match_back","","",276,[[["self"]],["option"]]],[11,"next_reject_back","","",276,[[["self"]],["option"]]],[11,"next_back","","",277,[[["self"]],["searchstep"]]],[11,"next_match_back","","",277,[[["self"]],["option"]]],[11,"next_reject_back","","",277,[[["self"]],["option"]]],[11,"next_back","","",278,[[["self"]],["searchstep"]]],[11,"next_match_back","","",278,[[["self"]],["option"]]],[11,"from_str","core::num","",3,[[["str"]],["result"]]],[11,"from_str","","",4,[[["str"]],["result"]]],[11,"from_str","","",5,[[["str"]],["result"]]],[11,"from_str","","",6,[[["str"]],["result"]]],[11,"from_str","","",7,[[["str"]],["result"]]],[11,"from_str","","",8,[[["str"]],["result"]]],[11,"from_str","","",9,[[["str"]],["result"]]],[11,"from_str","","",10,[[["str"]],["result"]]],[11,"from_str","","",11,[[["str"]],["result"]]],[11,"from_str","","",12,[[["str"]],["result"]]],[11,"from_str","","",13,[[["str"]],["result"]]],[11,"from_str","","",14,[[["str"]],["result"]]],[11,"poll","core::pin","",99,[[["pin"],["self"],["context"]],["poll"]]],[11,"contains","core::ops","Returns `true` if `item` is contained in the range.",71,[[["self"],["u"]],["bool"]]],[11,"sub_usize","core::iter","Subtracts a `usize`, returning `None` on underflow.",88,[[["self"],["usize"]],["option"]]],[11,"nth_back","","Returns the `n`th element from the end of the iterator.",89,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","This is the reverse version of [`try_fold()`]: it takes…",89,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","An iterator method that reduces the iterator's elements to…",89,[[["b"],["f"]],["b"]]],[11,"rfind","","Searches for an element of an iterator from the back that…",89,[[["self"],["p"]],["option"]]],[11,"len","","Returns the exact number of times the iterator will iterate.",93,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the iterator is empty.",93,[[["self"]],["bool"]]],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",87,[[["self"]]]],[11,"count","","Consumes the iterator, counting the number of iterations…",87,[[],["usize"]]],[11,"last","","Consumes the iterator, returning the last element.",87,[[],["option"]]],[11,"nth","","Returns the `n`th element of the iterator.",87,[[["self"],["usize"]],["option"]]],[11,"step_by","","Creates an iterator starting at the same point, but…",87,[[["usize"]],["stepby"]]],[11,"chain","","Takes two iterators and creates a new iterator over both…",87,[[["u"]],["chain"]]],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",87,[[["u"]],["zip"]]],[11,"map","","Takes a closure and creates an iterator which calls that…",87,[[["f"]],["map"]]],[11,"for_each","","Calls a closure on each element of an iterator.",87,[[["f"]]]],[11,"filter","","Creates an iterator which uses a closure to determine if…",87,[[["p"]],["filter"]]],[11,"filter_map","","Creates an iterator that both filters and maps.",87,[[["f"]],["filtermap"]]],[11,"enumerate","","Creates an iterator which gives the current iteration…",87,[[],["enumerate"]]],[11,"peekable","","Creates an iterator which can use `peek` to look at the…",87,[[],["peekable"]]],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a…",87,[[["p"]],["skipwhile"]]],[11,"take_while","","Creates an iterator that yields elements based on a…",87,[[["p"]],["takewhile"]]],[11,"skip","","Creates an iterator that skips the first `n` elements.",87,[[["usize"]],["skip"]]],[11,"take","","Creates an iterator that yields its first `n` elements.",87,[[["usize"]],["take"]]],[11,"scan","","An iterator adaptor similar to [`fold`] that holds…",87,[[["f"],["st"]],["scan"]]],[11,"flat_map","","Creates an iterator that works like map, but flattens…",87,[[["f"]],["flatmap"]]],[11,"flatten","","Creates an iterator that flattens nested structure.",87,[[],["flatten"]]],[11,"fuse","","Creates an iterator which ends after the first [`None`].",87,[[],["fuse"]]],[11,"inspect","","Does something with each element of an iterator, passing…",87,[[["f"]],["inspect"]]],[11,"by_ref","","Borrows an iterator, rather than consuming it.",87,[[["self"]],["self"]]],[11,"collect","","Transforms an iterator into a collection.",87,[[],["fromiterator"]]],[11,"partition","","Consumes an iterator, creating two collections from it.",87,[[["f"]]]],[11,"partition_in_place","","Reorders the elements of this iterator in-place according…",87,[[["p"]],["usize"]]],[11,"is_partitioned","","Checks if the elements of this iterator are partitioned…",87,[[["p"]],["bool"]]],[11,"try_fold","","An iterator method that applies a function as long as it…",87,[[["self"],["b"],["f"]],["r"]]],[11,"try_for_each","","An iterator method that applies a fallible function to…",87,[[["self"],["f"]],["r"]]],[11,"fold","","An iterator method that applies a function, producing a…",87,[[["b"],["f"]],["b"]]],[11,"all","","Tests if every element of the iterator matches a predicate.",87,[[["self"],["f"]],["bool"]]],[11,"any","","Tests if any element of the iterator matches a predicate.",87,[[["self"],["f"]],["bool"]]],[11,"find","","Searches for an element of an iterator that satisfies a…",87,[[["self"],["p"]],["option"]]],[11,"find_map","","Applies function to the elements of iterator and returns…",87,[[["self"],["f"]],["option"]]],[11,"try_find","","Applies function to the elements of iterator and returns…",87,[[["self"],["f"]],[["result",["option"]],["option"]]]],[11,"position","","Searches for an element in an iterator, returning its index.",87,[[["self"],["p"]],[["usize"],["option",["usize"]]]]],[11,"rposition","","Searches for an element in an iterator from the right,…",87,[[["self"],["p"]],[["usize"],["option",["usize"]]]]],[11,"max","","Returns the maximum element of an iterator.",87,[[],["option"]]],[11,"min","","Returns the minimum element of an iterator.",87,[[],["option"]]],[11,"max_by_key","","Returns the element that gives the maximum value from the…",87,[[["f"]],["option"]]],[11,"max_by","","Returns the element that gives the maximum value with…",87,[[["f"]],["option"]]],[11,"min_by_key","","Returns the element that gives the minimum value from the…",87,[[["f"]],["option"]]],[11,"min_by","","Returns the element that gives the minimum value with…",87,[[["f"]],["option"]]],[11,"rev","","Reverses an iterator's direction.",87,[[],["rev"]]],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",87,[[]]],[11,"copied","","Creates an iterator which copies all of its elements.",87,[[],["copied"]]],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",87,[[],["cloned"]]],[11,"cycle","","Repeats an iterator endlessly.",87,[[],["cycle"]]],[11,"sum","","Sums the elements of an iterator.",87,[[],["s"]]],[11,"product","","Iterates over the entire iterator, multiplying all the…",87,[[],["p"]]],[11,"cmp","","Lexicographically compares the elements of this `Iterator`…",87,[[["i"]],["ordering"]]],[11,"cmp_by","","Lexicographically compares the elements of this `Iterator`…",87,[[["i"],["f"]],["ordering"]]],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator`…",87,[[["i"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp_by","","Lexicographically compares the elements of this `Iterator`…",87,[[["i"],["f"]],[["option",["ordering"]],["ordering"]]]],[11,"eq","","Determines if the elements of this `Iterator` are equal to…",87,[[["i"]],["bool"]]],[11,"eq_by","","Determines if the elements of this `Iterator` are equal to…",87,[[["i"],["f"]],["bool"]]],[11,"ne","","Determines if the elements of this `Iterator` are unequal…",87,[[["i"]],["bool"]]],[11,"lt","","Determines if the elements of this `Iterator` are…",87,[[["i"]],["bool"]]],[11,"le","","Determines if the elements of this `Iterator` are…",87,[[["i"]],["bool"]]],[11,"gt","","Determines if the elements of this `Iterator` are…",87,[[["i"]],["bool"]]],[11,"ge","","Determines if the elements of this `Iterator` are…",87,[[["i"]],["bool"]]],[11,"is_sorted","","Checks if the elements of this iterator are sorted.",87,[[],["bool"]]],[11,"is_sorted_by","","Checks if the elements of this iterator are sorted using…",87,[[["f"]],["bool"]]],[11,"is_sorted_by_key","","Checks if the elements of this iterator are sorted using…",87,[[["f"]],["bool"]]]],"p":[[3,"Wrapping"],[4,"FpCategory"],[4,"IntErrorKind"],[3,"NonZeroU8"],[3,"NonZeroU16"],[3,"NonZeroU32"],[3,"NonZeroU64"],[3,"NonZeroU128"],[3,"NonZeroUsize"],[3,"NonZeroI8"],[3,"NonZeroI16"],[3,"NonZeroI32"],[3,"NonZeroI64"],[3,"NonZeroI128"],[3,"NonZeroIsize"],[3,"ParseIntError"],[3,"ManuallyDrop"],[19,"MaybeUninit"],[3,"NonNull"],[8,"Borrow"],[8,"BorrowMut"],[8,"Clone"],[3,"Reverse"],[4,"Ordering"],[8,"PartialEq"],[8,"Ord"],[8,"PartialOrd"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"TryInto"],[8,"TryFrom"],[8,"Default"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[3,"RangeToInclusive"],[4,"Bound"],[4,"GeneratorState"],[3,"RangeInclusive"],[8,"Add"],[8,"Div"],[8,"Mul"],[8,"Neg"],[8,"Rem"],[8,"Sub"],[8,"AddAssign"],[8,"DivAssign"],[8,"MulAssign"],[8,"RemAssign"],[8,"SubAssign"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Not"],[8,"Shl"],[8,"Shr"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Deref"],[8,"DerefMut"],[8,"Drop"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Index"],[8,"IndexMut"],[8,"RangeBounds"],[8,"Try"],[8,"Generator"],[8,"Any"],[3,"TypeId"],[3,"IntoIter"],[8,"FixedSizeArray"],[3,"Cell"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"UnicodeVersion"],[3,"DecodeUtf16Error"],[3,"VaListImpl"],[3,"Peekable"],[8,"Iterator"],[8,"Step"],[8,"DoubleEndedIterator"],[8,"Extend"],[8,"FromIterator"],[8,"IntoIterator"],[8,"ExactSizeIterator"],[8,"Product"],[8,"Sum"],[4,"Option"],[3,"PanicInfo"],[3,"Location"],[3,"Pin"],[3,"TraitObject"],[4,"Result"],[4,"Ordering"],[3,"AtomicBool"],[3,"AtomicPtr"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[8,"Write"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[3,"Formatter"],[3,"SipHasher"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"SliceIndex"],[3,"Iter"],[3,"IterMut"],[3,"ChunksExact"],[3,"ChunksExactMut"],[3,"RChunksExact"],[3,"RChunksExactMut"],[4,"SearchStep"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"Utf8LossyChunk"],[3,"Utf8Lossy"],[8,"FromStr"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Duration"],[8,"Future"],[4,"Poll"],[3,"RawWaker"],[3,"RawWakerVTable"],[3,"Context"],[3,"Waker"],[3,"Excess"],[8,"GlobalAlloc"],[8,"Alloc"],[3,"Layout"],[3,"CannotReallocInPlace"],[3,"CpuidResult"],[3,"int8x8x2_t"],[3,"int8x8x3_t"],[3,"int8x8x4_t"],[3,"uint8x8x2_t"],[3,"uint8x8x3_t"],[3,"uint8x8x4_t"],[3,"poly8x8x2_t"],[3,"poly8x8x3_t"],[3,"poly8x8x4_t"],[3,"int8x16x2_t"],[3,"int8x16x3_t"],[3,"int8x16x4_t"],[3,"uint8x16x2_t"],[3,"uint8x16x3_t"],[3,"uint8x16x4_t"],[3,"poly8x16x2_t"],[3,"poly8x16x3_t"],[3,"poly8x16x4_t"],[3,"TryFromIntError"],[3,"ParseFloatError"],[3,"Discriminant"],[4,"Infallible"],[3,"PhantomData"],[3,"PhantomPinned"],[3,"RangeFull"],[3,"TryFromSliceError"],[3,"EscapeDefault"],[3,"BorrowError"],[3,"BorrowMutError"],[3,"CharTryFromError"],[3,"ParseCharError"],[3,"DecodeUtf16"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EscapeDebug"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"VaList"],[4,"c_void"],[3,"Empty"],[3,"FromFn"],[3,"Once"],[3,"OnceWith"],[3,"Repeat"],[3,"RepeatWith"],[3,"Successors"],[3,"Cloned"],[3,"Copied"],[3,"Flatten"],[3,"StepBy"],[3,"Chain"],[3,"Cycle"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"Map"],[3,"Rev"],[3,"Zip"],[3,"FlatMap"],[3,"Scan"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Fuse"],[3,"Inspect"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"NoneError"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Error"],[3,"Arguments"],[3,"BuildHasherDefault"],[3,"Split"],[3,"SplitMut"],[3,"RSplit"],[3,"RSplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"RChunks"],[3,"RChunksMut"],[3,"ParseBoolError"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"SplitWhitespace"],[3,"SplitAsciiWhitespace"],[3,"EncodeUtf16"],[3,"EscapeDebug"],[3,"EscapeDefault"],[3,"EscapeUnicode"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"Utf8LossyChunksIter"],[3,"LayoutErr"],[3,"AllocErr"],[3,"SY"],[3,"APSR"],[3,"__m64"],[3,"__m128i"],[3,"__m128"],[3,"__m128d"],[3,"__m256i"],[3,"__m256"],[3,"__m256d"],[3,"__m512i"],[3,"__m512"],[3,"__m512d"],[3,"float64x1_t"],[3,"float64x2_t"],[3,"poly64x1_t"],[3,"poly64x2_t"],[3,"int8x8_t"],[3,"uint8x8_t"],[3,"poly8x8_t"],[3,"int16x4_t"],[3,"uint16x4_t"],[3,"poly16x4_t"],[3,"int32x2_t"],[3,"uint32x2_t"],[3,"float32x2_t"],[3,"int64x1_t"],[3,"uint64x1_t"],[3,"int8x16_t"],[3,"uint8x16_t"],[3,"poly8x16_t"],[3,"int16x8_t"],[3,"uint16x8_t"],[3,"poly16x8_t"],[3,"int32x4_t"],[3,"uint32x4_t"],[3,"float32x4_t"],[3,"int64x2_t"],[3,"uint64x2_t"],[3,"v128"],[3,"v16i8"],[3,"v8i16"],[3,"v4i32"],[3,"v2i64"],[3,"v16u8"],[3,"v8u16"],[3,"v4u32"],[3,"v2u64"],[3,"v4f32"],[3,"v2f64"],[3,"vector_signed_long"],[3,"vector_unsigned_long"],[3,"vector_bool_long"],[3,"vector_double"]]};
searchIndex["proc_macro"] = {"doc":"A support library for macro authors when defining new…","i":[[3,"Diagnostic","proc_macro","A structure representing a diagnostic message and…",null,null],[3,"TokenStream","","The main type provided by this crate, representing an…",null,null],[3,"LexError","","Error returned from `TokenStream::from_str`.",null,null],[3,"Span","","A region of source code, along with macro expansion…",null,null],[3,"LineColumn","","A line-column pair representing the start or end of a…",null,null],[12,"line","","The 1-indexed line in the source file on which the span…",0,null],[12,"column","","The 0-indexed column (in UTF-8 characters) in the source…",0,null],[3,"SourceFile","","The source file of a given `Span`.",null,null],[3,"Group","","A delimited token stream.",null,null],[3,"Punct","","An `Punct` is an single punctuation character like `+`,…",null,null],[3,"Ident","","An identifier (`ident`).",null,null],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`),…",null,null],[4,"Level","","An enum representing a diagnostic level.",null,null],[13,"Error","","An error.",1,null],[13,"Warning","","A warning.",1,null],[13,"Note","","A note.",1,null],[13,"Help","","A help message.",1,null],[4,"TokenTree","","A single token or a delimited sequence of token trees…",null,null],[13,"Group","","A token stream surrounded by bracket delimiters.",2,null],[13,"Ident","","An identifier.",2,null],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",2,null],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number…",2,null],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",null,null],[13,"Parenthesis","","`( ... )`",3,null],[13,"Brace","","`{ ... }`",3,null],[13,"Bracket","","`[ ... ]`",3,null],[13,"None","","`Ø ... Ø` An implicit delimiter, that may, for example,…",3,null],[4,"Spacing","","Whether an `Punct` is followed immediately by another…",null,null],[13,"Alone","","e.g., `+` is `Alone` in `+ =`, `+ident` or `+()`.",4,null],[13,"Joint","","e.g., `+` is `Joint` in `+=` or `'#`. Additionally, single…",4,null],[5,"quote","","Quote a `TokenStream` into a `TokenStream`. This is the…",null,[[["tokenstream"]],["tokenstream"]]],[5,"quote_span","","Quote a `Span` into a `TokenStream`. This is needed to…",null,[[["span"]],["tokenstream"]]],[11,"new","","Creates a new diagnostic with the given `level` and…",5,[[["level"],["into",["string"]],["string"]],["diagnostic"]]],[11,"spanned","","Creates a new diagnostic with the given `level` and…",5,[[["level"],["s"],["t"]],["diagnostic"]]],[11,"span_error","","Adds a new child diagnostic message to `self` with the…",5,[[["s"],["t"]],["diagnostic"]]],[11,"error","","Adds a new child diagnostic message to `self` with the…",5,[[["into",["string"]],["string"]],["diagnostic"]]],[11,"span_warning","","Adds a new child diagnostic message to `self` with the…",5,[[["s"],["t"]],["diagnostic"]]],[11,"warning","","Adds a new child diagnostic message to `self` with the…",5,[[["into",["string"]],["string"]],["diagnostic"]]],[11,"span_note","","Adds a new child diagnostic message to `self` with the…",5,[[["s"],["t"]],["diagnostic"]]],[11,"note","","Adds a new child diagnostic message to `self` with the…",5,[[["into",["string"]],["string"]],["diagnostic"]]],[11,"span_help","","Adds a new child diagnostic message to `self` with the…",5,[[["s"],["t"]],["diagnostic"]]],[11,"help","","Adds a new child diagnostic message to `self` with the…",5,[[["into",["string"]],["string"]],["diagnostic"]]],[11,"level","","Returns the diagnostic `level` for `self`.",5,[[["self"]],["level"]]],[11,"set_level","","Sets the level in `self` to `level`.",5,[[["level"],["self"]]]],[11,"message","","Returns the message in `self`.",5,[[["self"]],["str"]]],[11,"set_message","","Sets the message in `self` to `message`.",5,[[["into",["string"]],["self"],["string"]]]],[11,"spans","","Returns the `Span`s in `self`.",5,[[["self"]]]],[11,"set_spans","","Sets the `Span`s in `self` to `spans`.",5,[[["self"],["multispan"]]]],[11,"children","","Returns an iterator over the children diagnostics of `self`.",5,[[["self"]],["children"]]],[11,"emit","","Emit the diagnostic.",5,[[]]],[0,"token_stream","","Public implementation details for the `TokenStream` type,…",null,null],[3,"IntoIter","proc_macro::token_stream","An iterator over `TokenStream`'s `TokenTree`s. The…",null,null],[8,"MultiSpan","proc_macro","Trait implemented by types that can be converted into a…",null,null],[10,"into_spans","","Converts `self` into a `Vec<Span>`.",6,[[],[["vec",["span"]],["span"]]]],[11,"new","","Returns an empty `TokenStream` containing no token trees.",7,[[],["tokenstream"]]],[11,"is_empty","","Checks if this `TokenStream` is empty.",7,[[["self"]],["bool"]]],[11,"def_site","","A span that resolves at the macro definition site.",8,[[],["span"]]],[11,"call_site","","The span of the invocation of the current procedural…",8,[[],["span"]]],[11,"mixed_site","","A span that represents `macro_rules` hygiene, and…",8,[[],["span"]]],[11,"source_file","","The original source file into which this span points.",8,[[["self"]],["sourcefile"]]],[11,"parent","","The `Span` for the tokens in the previous macro expansion…",8,[[["self"]],[["span"],["option",["span"]]]]],[11,"source","","The span for the origin source code that `self` was…",8,[[["self"]],["span"]]],[11,"start","","Gets the starting line/column in the source file for this…",8,[[["self"]],["linecolumn"]]],[11,"end","","Gets the ending line/column in the source file for this…",8,[[["self"]],["linecolumn"]]],[11,"join","","Creates a new span encompassing `self` and `other`.",8,[[["span"],["self"]],[["span"],["option",["span"]]]]],[11,"resolved_at","","Creates a new span with the same line/column information…",8,[[["span"],["self"]],["span"]]],[11,"located_at","","Creates a new span with the same name resolution behavior…",8,[[["span"],["self"]],["span"]]],[11,"eq","","Compares to spans to see if they're equal.",8,[[["span"],["self"]],["bool"]]],[11,"source_text","","Returns the source text behind a span. This preserves the…",8,[[["self"]],[["string"],["option",["string"]]]]],[11,"error","","Creates a new `Diagnostic` with the given `message` at the…",8,[[["into",["string"]],["string"]],["diagnostic"]]],[11,"warning","","Creates a new `Diagnostic` with the given `message` at the…",8,[[["into",["string"]],["string"]],["diagnostic"]]],[11,"note","","Creates a new `Diagnostic` with the given `message` at the…",8,[[["into",["string"]],["string"]],["diagnostic"]]],[11,"help","","Creates a new `Diagnostic` with the given `message` at the…",8,[[["into",["string"]],["string"]],["diagnostic"]]],[11,"path","","Gets the path to this source file.",9,[[["self"]],["pathbuf"]]],[11,"is_real","","Returns `true` if this source file is a real source file,…",9,[[["self"]],["bool"]]],[11,"span","","Returns the span of this tree, delegating to the `span`…",2,[[["self"]],["span"]]],[11,"set_span","","Configures the span for only this token.",2,[[["self"],["span"]]]],[11,"new","","Creates a new `Group` with the given delimiter and token…",10,[[["delimiter"],["tokenstream"]],["group"]]],[11,"delimiter","","Returns the delimiter of this `Group`",10,[[["self"]],["delimiter"]]],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in…",10,[[["self"]],["tokenstream"]]],[11,"span","","Returns the span for the delimiters of this token stream,…",10,[[["self"]],["span"]]],[11,"span_open","","Returns the span pointing to the opening delimiter of this…",10,[[["self"]],["span"]]],[11,"span_close","","Returns the span pointing to the closing delimiter of this…",10,[[["self"]],["span"]]],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not…",10,[[["self"],["span"]]]],[11,"new","","Creates a new `Punct` from the given character and…",11,[[["spacing"],["char"]],["punct"]]],[11,"as_char","","Returns the value of this punctuation character as `char`.",11,[[["self"]],["char"]]],[11,"spacing","","Returns the spacing of this punctuation character,…",11,[[["self"]],["spacing"]]],[11,"span","","Returns the span for this punctuation character.",11,[[["self"]],["span"]]],[11,"set_span","","Configure the span for this punctuation character.",11,[[["self"],["span"]]]],[11,"new","","Creates a new `Ident` with the given `string` as well as…",12,[[["str"],["span"]],["ident"]]],[11,"new_raw","","Same as `Ident::new`, but creates a raw identifier…",12,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`, encompassing the entire…",12,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its…",12,[[["self"],["span"]]]],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified…",13,[[["u8"]],["literal"]]],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified…",13,[[["u16"]],["literal"]]],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified…",13,[[["u32"]],["literal"]]],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified…",13,[[["u64"]],["literal"]]],[11,"u128_suffixed","","Creates a new suffixed integer literal with the specified…",13,[[["u128"]],["literal"]]],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified…",13,[[["usize"]],["literal"]]],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified…",13,[[["i8"]],["literal"]]],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified…",13,[[["i16"]],["literal"]]],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified…",13,[[["i32"]],["literal"]]],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified…",13,[[["i64"]],["literal"]]],[11,"i128_suffixed","","Creates a new suffixed integer literal with the specified…",13,[[["i128"]],["literal"]]],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified…",13,[[["isize"]],["literal"]]],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the…",13,[[["u8"]],["literal"]]],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the…",13,[[["u16"]],["literal"]]],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the…",13,[[["u32"]],["literal"]]],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the…",13,[[["u64"]],["literal"]]],[11,"u128_unsuffixed","","Creates a new unsuffixed integer literal with the…",13,[[["u128"]],["literal"]]],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the…",13,[[["usize"]],["literal"]]],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the…",13,[[["i8"]],["literal"]]],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the…",13,[[["i16"]],["literal"]]],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the…",13,[[["i32"]],["literal"]]],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the…",13,[[["i64"]],["literal"]]],[11,"i128_unsuffixed","","Creates a new unsuffixed integer literal with the…",13,[[["i128"]],["literal"]]],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the…",13,[[["isize"]],["literal"]]],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",13,[[["f32"]],["literal"]]],[11,"f32_suffixed","","Creates a new suffixed floating-point literal.",13,[[["f32"]],["literal"]]],[11,"f64_unsuffixed","","Creates a new unsuffixed floating-point literal.",13,[[["f64"]],["literal"]]],[11,"f64_suffixed","","Creates a new suffixed floating-point literal.",13,[[["f64"]],["literal"]]],[11,"string","","String literal.",13,[[["str"]],["literal"]]],[11,"character","","Character literal.",13,[[["char"]],["literal"]]],[11,"byte_string","","Byte string literal.",13,[[],["literal"]]],[11,"span","","Returns the span encompassing this literal.",13,[[["self"]],["span"]]],[11,"set_span","","Configures the span associated for this literal.",13,[[["self"],["span"]]]],[11,"subspan","","Returns a `Span` that is a subset of `self.span()`…",13,[[["rangebounds",["usize"]],["self"],["usize"]],[["span"],["option",["span"]]]]],[14,"quote","","`quote!(..)` accepts arbitrary tokens and expands into a…",null,null],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"into_iter","","",7,[[],["i"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","proc_macro::token_stream","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"into_iter","","",15,[[],["i"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"into_spans","proc_macro","",8,[[],[["vec",["span"]],["span"]]]],[11,"from","","",7,[[["tokentree"]],["tokenstream"]]],[11,"from","","",2,[[["group"]],["tokentree"]]],[11,"from","","",2,[[["ident"]],["tokentree"]]],[11,"from","","",2,[[["punct"]],["tokentree"]]],[11,"from","","",2,[[["literal"]],["tokentree"]]],[11,"extend","","",7,[[["self"],["intoiterator"]]]],[11,"extend","","",7,[[["self"],["intoiterator"]]]],[11,"into_iter","","",7,[[],["intoiter"]]],[11,"next","proc_macro::token_stream","",15,[[["self"]],[["option",["tokentree"]],["tokentree"]]]],[11,"clone","proc_macro","",1,[[["self"]],["level"]]],[11,"clone","","",5,[[["self"]],["diagnostic"]]],[11,"clone","","",7,[[["self"]],["tokenstream"]]],[11,"clone","proc_macro::token_stream","",15,[[["self"]],["intoiter"]]],[11,"clone","proc_macro","",8,[[["self"]],["span"]]],[11,"clone","","",0,[[["self"]],["linecolumn"]]],[11,"clone","","",9,[[["self"]],["sourcefile"]]],[11,"clone","","",2,[[["self"]],["tokentree"]]],[11,"clone","","",10,[[["self"]],["group"]]],[11,"clone","","",3,[[["self"]],["delimiter"]]],[11,"clone","","",11,[[["self"]],["punct"]]],[11,"clone","","",4,[[["self"]],["spacing"]]],[11,"clone","","",12,[[["self"]],["ident"]]],[11,"clone","","",13,[[["self"]],["literal"]]],[11,"eq","","",0,[[["self"],["linecolumn"]],["bool"]]],[11,"ne","","",0,[[["self"],["linecolumn"]],["bool"]]],[11,"eq","","",9,[[["self"]],["bool"]]],[11,"eq","","",3,[[["self"],["delimiter"]],["bool"]]],[11,"eq","","",4,[[["spacing"],["self"]],["bool"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"from_iter","","",7,[[["intoiterator"]],["self"]]],[11,"from_iter","","",7,[[["intoiterator"]],["self"]]],[11,"from_str","","",7,[[["str"]],[["tokenstream"],["result",["tokenstream","lexerror"]],["lexerror"]]]]],"p":[[3,"LineColumn"],[4,"Level"],[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"Diagnostic"],[8,"MultiSpan"],[3,"TokenStream"],[3,"Span"],[3,"SourceFile"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"],[3,"LexError"],[3,"IntoIter"]]};
searchIndex["std"] = {"doc":"The Rust Standard Library","i":[[0,"borrow","std","A module for working with borrowed data.",null,null],[8,"ToOwned","std::borrow","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","The resulting type after obtaining ownership.",0,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",0,[[["self"]]]],[11,"clone_into","","Uses borrowed data to replace owned data, usually by…",0,[[["self"]]]],[4,"Cow","","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",1,null],[13,"Owned","","Owned data.",1,null],[8,"Borrow","","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",2,[[["self"]],["borrowed"]]],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",3,[[["self"]],["borrowed"]]],[0,"boxed","std","A pointer type for heap allocation.",null,null],[3,"Box","std::boxed","A pointer type for heap allocation.",null,null],[0,"fmt","std","Utilities for formatting and printing `String`s.",null,null],[5,"format","std::fmt","The `format` function takes an [`Arguments`] struct and…",null,[[["arguments"]],["string"]]],[4,"Alignment","","Possible alignments returned by `Formatter::align`",null,null],[13,"Left","","Indication that contents should be left-aligned.",4,null],[13,"Right","","Indication that contents should be right-aligned.",4,null],[13,"Center","","Indication that contents should be center-aligned.",4,null],[3,"Error","","The error type which is returned from formatting a message…",null,null],[5,"write","","The `write` function takes an output stream, and an…",null,[[["arguments"],["write"]],[["error"],["result",["error"]]]]],[3,"Arguments","","This structure represents a safely precompiled version of…",null,null],[8,"Binary","","`b` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",5,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[8,"Octal","","`o` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",6,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[8,"Debug","","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",7,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[14,"Debug","","Derive macro generating an impl of the trait `Debug`.",null,null],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",8,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"Formatter","","Configuration for formatting.",null,null],[6,"Result","","The type returned by formatter methods.",null,null],[8,"Write","","A collection of methods that are required to format a…",null,null],[10,"write_str","","Writes a string slice into this writer, returning whether…",9,[[["str"],["self"]],[["error"],["result",["error"]]]]],[11,"write_char","","Writes a [`char`] into this writer, returning whether the…",9,[[["self"],["char"]],[["error"],["result",["error"]]]]],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors…",9,[[["self"],["arguments"]],[["error"],["result",["error"]]]]],[8,"LowerExp","","`e` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",10,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[8,"UpperExp","","`E` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",11,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[8,"LowerHex","","`x` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",12,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[8,"Pointer","","`p` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",13,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[8,"UpperHex","","`X` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",14,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[14,"format","std","Creates a `String` using interpolation of runtime…",null,null],[0,"rc","","Single-threaded reference-counting pointers. 'Rc' stands…",null,null],[3,"Rc","std::rc","A single-threaded reference-counting pointer. 'Rc' stands…",null,null],[3,"Weak","","`Weak` is a version of [`Rc`] that holds a non-owning…",null,null],[0,"slice","std","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"Concat","std::slice","Helper trait for `[T]::concat`.",null,null],[16,"Output","","The resulting type after concatenation",15,null],[10,"concat","","Implementation of `[T]::concat`",15,[[["self"]]]],[8,"Join","","Helper trait for `[T]::join`",null,null],[16,"Output","","The resulting type after concatenation",16,null],[10,"join","","Implementation of `[T]::join`",16,[[["self"],["separator"]]]],[8,"SliceIndex","","A helper trait used for indexing operations.",null,null],[16,"Output","","The output type returned by methods.",17,null],[10,"get","","Returns a shared reference to the output at this location,…",17,[[["t"]],["option"]]],[10,"get_mut","","Returns a mutable reference to the output at this…",17,[[["t"]],["option"]]],[10,"get_unchecked","","Returns a shared reference to the output at this location,…",17,[[["t"]]]],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this…",17,[[["t"]]]],[10,"index","","Returns a shared reference to the output at this location,…",17,[[["t"]]]],[10,"index_mut","","Returns a mutable reference to the output at this…",17,[[["t"]]]],[5,"from_mut","","Converts a reference to T into a slice of length 1…",null,[[["t"]]]],[5,"from_ref","","Converts a reference to T into a slice of length 1…",null,[[["t"]]]],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,[[["usize"]]]],[5,"from_raw_parts_mut","","Performs the same functionality as [`from_raw_parts`],…",null,[[["usize"]]]],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks…",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"ChunksExact","","An iterator over a slice in (non-overlapping) chunks…",null,null],[3,"ChunksExactMut","","An iterator over a slice in (non-overlapping) mutable…",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable…",null,null],[3,"Split","","An iterator over subslices separated by elements that…",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are…",null,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"RChunks","","An iterator over a slice in (non-overlapping) chunks…",null,null],[3,"RChunksExact","","An iterator over a slice in (non-overlapping) chunks…",null,null],[3,"RChunksExactMut","","An iterator over a slice in (non-overlapping) mutable…",null,null],[3,"RChunksMut","","An iterator over a slice in (non-overlapping) mutable…",null,null],[3,"RSplit","","An iterator over subslices separated by elements that…",null,null],[3,"RSplitMut","","An iterator over the subslices of the vector which are…",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that…",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that…",null,null],[3,"SplitN","","An iterator over subslices separated by elements that…",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that…",null,null],[0,"str","std","Unicode string slices.",null,null],[5,"from_boxed_utf8_unchecked","std::str","Converts a boxed slice of bytes to a boxed string slice…",null,[[["box"]],[["str"],["box",["str"]]]]],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","std::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",18,null],[10,"into_searcher","","Constructs the associated searcher from `self` and the…",18,[[["str"]]]],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",18,[[["str"]],["bool"]]],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the…",18,[[["str"]],["bool"]]],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the…",18,[[["str"]],["bool"]]],[4,"SearchStep","","Result of calling `Searcher::next()` or…",null,null],[13,"Match","","Expresses that a match of the pattern has been found at…",19,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a…",19,null],[13,"Done","","Expresses that every byte of the haystack has been…",19,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlying string to be searched in",20,[[["self"]],["str"]]],[10,"next","","Performs the next search step starting from the front.",20,[[["self"]],["searchstep"]]],[11,"next_match","","Finds the next `Match` result. See `next()`",20,[[["self"]],["option"]]],[11,"next_reject","","Finds the next `Reject` result. See `next()` and…",20,[[["self"]],["option"]]],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",21,[[["self"]],["searchstep"]]],[11,"next_match_back","","Finds the next `Match` result. See `next_back()`",21,[[["self"]],["option"]]],[11,"next_reject_back","","Finds the next `Reject` result. See `next_back()`",21,[[["self"]],["option"]]],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be…",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[3,"EncodeUtf16","std::str","An iterator of [`u16`] over the string encoded as UTF-16.",null,null],[3,"SplitAsciiWhitespace","","An iterator over the non-ASCII-whitespace substrings of a…",null,null],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a…",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,[[],[["str"],["utf8error"],["result",["str","utf8error"]]]]],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",null,[[],[["result",["str","utf8error"]],["str"],["utf8error"]]]],[3,"Bytes","","An iterator over the bytes of a string slice.",null,null],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and…",null,null],[3,"Chars","","An iterator over the [`char`]s of a string slice.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without…",null,[[],["str"]]],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without…",null,[[],["str"]]],[3,"ParseBoolError","","An error returned when parsing a `bool` using [`from_str`]…",null,null],[3,"EscapeDebug","","The return type of [`str::escape_debug`].",null,null],[3,"EscapeDefault","","The return type of [`str::escape_default`].",null,null],[3,"EscapeUnicode","","The return type of [`str::escape_unicode`].",null,null],[8,"FromStr","","Parse a value from a string",null,null],[16,"Err","","The associated error which can be returned from parsing.",22,null],[10,"from_str","","Parses a string `s` to return a value of this type.",22,[[["str"]],["result"]]],[3,"Utf8Error","","Errors which can occur when attempting to interpret a…",null,null],[3,"Lines","","An iterator over the lines of a string, as string slices.",null,null],[3,"LinesAny","","Created with the method [`lines_any`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",null,null],[3,"Matches","","Created with the method [`matches`].",null,null],[3,"RMatches","","Created with the method [`rmatches`].",null,null],[3,"RSplit","","Created with the method [`rsplit`].",null,null],[3,"Split","","Created with the method [`split`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn`].",null,null],[3,"SplitN","","Created with the method [`splitn`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator`].",null,null],[0,"string","std","A UTF-8 encoded, growable string.",null,null],[3,"String","std::string","A UTF-8 encoded, growable string.",null,null],[3,"FromUtf8Error","","A possible error value when converting a `String` from a…",null,null],[3,"FromUtf16Error","","A possible error value when converting a `String` from a…",null,null],[6,"ParseError","","An error when parsing a `String`.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",23,[[["self"]],["string"]]],[3,"Drain","","A draining iterator for `String`.",null,null],[0,"vec","std","A contiguous growable array type with heap-allocated…",null,null],[3,"Vec","std::vec","A contiguous growable array type, written `Vec<T>` but…",null,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[3,"Drain","","A draining iterator for `Vec<T>`.",null,null],[3,"Splice","","A splicing iterator for `Vec`.",null,null],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on Vec.",null,null],[14,"vec","std","Creates a [`Vec`] containing the arguments.",null,null],[0,"any","","This module implements the `Any` trait, which enables…",null,null],[8,"Any","std::any","A trait to emulate dynamic typing.",null,null],[10,"type_id","","Gets the `TypeId` of `self`.",24,[[["self"]],["typeid"]]],[3,"TypeId","","A `TypeId` represents a globally unique identifier for a…",null,null],[5,"type_name","","Returns the name of a type as a string slice.",null,[[],["str"]]],[5,"type_name_of_val","","Returns the name of the type of the pointed-to value as a…",null,[[["t"]],["str"]]],[0,"array","std","Implementations of things like `Eq` for fixed-length…",null,null],[8,"FixedSizeArray","std::array","Utility trait implemented only on arrays of fixed size",null,null],[10,"as_slice","","Converts the array to immutable slice",25,[[["self"]]]],[10,"as_mut_slice","","Converts the array to mutable slice",25,[[["self"]]]],[3,"TryFromSliceError","","The error type returned when a conversion from a slice to…",null,null],[8,"LengthAtMost32","","Implemented for lengths where trait impls are allowed on…",null,null],[3,"IntoIter","","A by-value [array] iterator.",null,null],[0,"cell","std","Shareable mutable containers.",null,null],[3,"Cell","std::cell","A mutable memory location.",null,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow…",null,null],[3,"BorrowError","","An error returned by `RefCell::try_borrow`.",null,null],[3,"BorrowMutError","","An error returned by `RefCell::try_borrow_mut`.",null,null],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box.…",null,null],[3,"RefMut","","A wrapper type for a mutably borrowed value from a…",null,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[0,"char","std","A character type.",null,null],[17,"MAX","std::char","The highest valid code point a `char` can have.",null,null],[17,"REPLACEMENT_CHARACTER","","`U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to…",null,null],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode…",null,null],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"EscapeDebug","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"ToLowercase","","Returns an iterator that yields the lowercase equivalent…",null,null],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent…",null,null],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,[[["u32"]],["char"]]],[3,"CharTryFromError","","The error type returned when a conversion from u32 to char…",null,null],[3,"ParseCharError","","An error which can be returned when parsing a char.",null,null],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,[[["u32"]],[["option",["char"]],["char"]]]],[5,"from_u32","","Converts a `u32` to a `char`.",null,[[["u32"]],[["option",["char"]],["char"]]]],[5,"decode_utf16","","Creates an iterator over the UTF-16 encoded code points in…",null,[[["i"]],["decodeutf16"]]],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from…",null,null],[3,"DecodeUtf16Error","","An error that can be returned when decoding UTF-16 code…",null,null],[3,"UnicodeVersion","","Represents a Unicode Version.",null,null],[12,"major","","Major version.",26,null],[12,"minor","","Minor version.",26,null],[12,"micro","","Micro (or Update) version.",26,null],[17,"UNICODE_VERSION","","The version of Unicode that the Unicode parts of `char`…",null,null],[0,"clone","std","The `Clone` trait for types that cannot be 'implicitly…",null,null],[8,"Clone","std::clone","A common trait for the ability to explicitly duplicate an…",null,null],[10,"clone","","Returns a copy of the value.",27,[[["self"]],["self"]]],[11,"clone_from","","Performs copy-assignment from `source`.",27,[[["self"],["self"]]]],[14,"Clone","","Derive macro generating an impl of the trait `Clone`.",null,null],[0,"cmp","std","Functionality for ordering and comparison.",null,null],[8,"PartialEq","std::cmp","Trait for equality comparisons which are partial…",null,null],[10,"eq","","This method tests for `self` and `other` values to be…",28,[[["rhs"],["self"]],["bool"]]],[11,"ne","","This method tests for `!=`.",28,[[["rhs"],["self"]],["bool"]]],[8,"Eq","","Trait for equality comparisons which are equivalence…",null,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two…",null,null],[13,"Less","","An ordering where a compared value is less than another.",29,null],[13,"Equal","","An ordering where a compared value is equal to another.",29,null],[13,"Greater","","An ordering where a compared value is greater than another.",29,null],[3,"Reverse","","A helper struct for reverse ordering.",null,null],[12,"0","","",30,null],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and…",31,[[["self"]],["ordering"]]],[11,"max","","Compares and returns the maximum of two values.",31,[[],["self"]]],[11,"min","","Compares and returns the minimum of two values.",31,[[],["self"]]],[11,"clamp","","Restrict a value to a certain interval.",31,[[],["self"]]],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other`…",32,[[["rhs"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","This method tests less than (for `self` and `other`) and…",32,[[["rhs"],["self"]],["bool"]]],[11,"le","","This method tests less than or equal to (for `self` and…",32,[[["rhs"],["self"]],["bool"]]],[11,"gt","","This method tests greater than (for `self` and `other`)…",32,[[["rhs"],["self"]],["bool"]]],[11,"ge","","This method tests greater than or equal to (for `self` and…",32,[[["rhs"],["self"]],["bool"]]],[5,"min","","Compares and returns the minimum of two values.",null,[[["t"]],["t"]]],[5,"min_by","","Returns the minimum of two values with respect to the…",null,[[["t"],["f"]],["t"]]],[5,"min_by_key","","Returns the element that gives the minimum value from the…",null,[[["t"],["f"]],["t"]]],[5,"max","","Compares and returns the maximum of two values.",null,[[["t"]],["t"]]],[5,"max_by","","Returns the maximum of two values with respect to the…",null,[[["t"],["f"]],["t"]]],[5,"max_by_key","","Returns the element that gives the maximum value from the…",null,[[["t"],["f"]],["t"]]],[14,"PartialEq","","Derive macro generating an impl of the trait `PartialEq`.",null,null],[14,"Eq","","Derive macro generating an impl of the trait `Eq`.",null,null],[14,"Ord","","Derive macro generating an impl of the trait `Ord`.",null,null],[14,"PartialOrd","","Derive macro generating an impl of the trait `PartialOrd`.",null,null],[0,"convert","std","Traits for conversions between types.",null,null],[5,"identity","std::convert","The identity function.",null,[[["t"]],["t"]]],[8,"AsRef","","Used to do a cheap reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",33,[[["self"]],["t"]]],[8,"AsMut","","Used to do a cheap mutable-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",34,[[["self"]],["t"]]],[8,"Into","","A value-to-value conversion that consumes the input value.…",null,null],[10,"into","","Performs the conversion.",35,[[],["t"]]],[8,"From","","Used to do value-to-value conversions while consuming the…",null,null],[10,"from","","Performs the conversion.",36,[[["t"]],["self"]]],[8,"TryInto","","An attempted conversion that consumes `self`, which may or…",null,null],[16,"Error","","The type returned in the event of a conversion error.",37,null],[10,"try_into","","Performs the conversion.",37,[[],["result"]]],[8,"TryFrom","","Simple and safe type conversions that may fail in a…",null,null],[16,"Error","","The type returned in the event of a conversion error.",38,null],[10,"try_from","","Performs the conversion.",38,[[["t"]],["result"]]],[4,"Infallible","","The error type for errors that can never happen.",null,null],[8,"FloatToInt","","Supporting trait for inherent methods of `f32` and `f64`…",null,null],[0,"default","std","The `Default` trait for types which may have meaningful…",null,null],[8,"Default","std::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",39,[[],["self"]]],[14,"Default","","Derive macro generating an impl of the trait `Default`.",null,null],[0,"hash","std","Generic hashing support.",null,null],[8,"Hash","std::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the given [`Hasher`].",40,[[["self"],["h"]]]],[11,"hash_slice","","Feeds a slice of this type into the given [`Hasher`].",40,[[["h"]]]],[8,"Hasher","","A trait for hashing an arbitrary stream of bytes.",null,null],[10,"finish","","Returns the hash value for the values written so far.",41,[[["self"]],["u64"]]],[10,"write","","Writes some data into this `Hasher`.",41,[[["self"]]]],[11,"write_u8","","Writes a single `u8` into this hasher.",41,[[["self"],["u8"]]]],[11,"write_u16","","Writes a single `u16` into this hasher.",41,[[["u16"],["self"]]]],[11,"write_u32","","Writes a single `u32` into this hasher.",41,[[["self"],["u32"]]]],[11,"write_u64","","Writes a single `u64` into this hasher.",41,[[["self"],["u64"]]]],[11,"write_u128","","Writes a single `u128` into this hasher.",41,[[["self"],["u128"]]]],[11,"write_usize","","Writes a single `usize` into this hasher.",41,[[["self"],["usize"]]]],[11,"write_i8","","Writes a single `i8` into this hasher.",41,[[["self"],["i8"]]]],[11,"write_i16","","Writes a single `i16` into this hasher.",41,[[["self"],["i16"]]]],[11,"write_i32","","Writes a single `i32` into this hasher.",41,[[["self"],["i32"]]]],[11,"write_i64","","Writes a single `i64` into this hasher.",41,[[["i64"],["self"]]]],[11,"write_i128","","Writes a single `i128` into this hasher.",41,[[["self"],["i128"]]]],[11,"write_isize","","Writes a single `isize` into this hasher.",41,[[["isize"],["self"]]]],[8,"BuildHasher","","A trait for creating instances of [`Hasher`].",null,null],[16,"Hasher","","Type of the hasher that will be created.",42,null],[10,"build_hasher","","Creates a new hasher.",42,[[["self"]]]],[3,"BuildHasherDefault","","Used to create a default [`BuildHasher`] instance for…",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[14,"Hash","","Derive macro generating an impl of the trait `Hash`.",null,null],[0,"hint","std","Hints to compiler that affects how code should be emitted…",null,null],[5,"unreachable_unchecked","std::hint","Informs the compiler that this point in the code is not…",null,[[]]],[5,"spin_loop","","Emits a machine instruction hinting to the processor that…",null,[[]]],[5,"black_box","","An identity function that hints to the compiler to be…",null,[[["t"]],["t"]]],[0,"i128","std","The 128-bit signed integer type.",null,null],[17,"MIN","std::i128","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"i16","std","The 16-bit signed integer type.",null,null],[17,"MIN","std::i16","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"i32","std","The 32-bit signed integer type.",null,null],[17,"MIN","std::i32","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"i64","std","The 64-bit signed integer type.",null,null],[17,"MIN","std::i64","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"i8","std","The 8-bit signed integer type.",null,null],[17,"MIN","std::i8","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"intrinsics","std","Compiler intrinsics.",null,null],[5,"atomic_cxchg","std::intrinsics","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchg_acq","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchg_rel","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchg_acqrel","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchg_relaxed","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchg_failrelaxed","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchg_failacq","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchg_acq_failrelaxed","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchg_acqrel_failrelaxed","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchgweak","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchgweak_acq","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchgweak_rel","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchgweak_acqrel","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchgweak_relaxed","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchgweak_failrelaxed","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchgweak_failacq","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchgweak_acq_failrelaxed","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchgweak_acqrel_failrelaxed","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_load","","Loads the current value of the pointer. The stabilized…",null,[[],["t"]]],[5,"atomic_load_acq","","Loads the current value of the pointer. The stabilized…",null,[[],["t"]]],[5,"atomic_load_relaxed","","Loads the current value of the pointer. The stabilized…",null,[[],["t"]]],[5,"atomic_load_unordered","","",null,[[],["t"]]],[5,"atomic_store","","Stores the value at the specified memory location. The…",null,[[["t"]]]],[5,"atomic_store_rel","","Stores the value at the specified memory location. The…",null,[[["t"]]]],[5,"atomic_store_relaxed","","Stores the value at the specified memory location. The…",null,[[["t"]]]],[5,"atomic_store_unordered","","",null,[[["t"]]]],[5,"atomic_xchg","","Stores the value at the specified memory location,…",null,[[["t"]],["t"]]],[5,"atomic_xchg_acq","","Stores the value at the specified memory location,…",null,[[["t"]],["t"]]],[5,"atomic_xchg_rel","","Stores the value at the specified memory location,…",null,[[["t"]],["t"]]],[5,"atomic_xchg_acqrel","","Stores the value at the specified memory location,…",null,[[["t"]],["t"]]],[5,"atomic_xchg_relaxed","","Stores the value at the specified memory location,…",null,[[["t"]],["t"]]],[5,"atomic_xadd","","Adds to the current value, returning the previous value.…",null,[[["t"]],["t"]]],[5,"atomic_xadd_acq","","Adds to the current value, returning the previous value.…",null,[[["t"]],["t"]]],[5,"atomic_xadd_rel","","Adds to the current value, returning the previous value.…",null,[[["t"]],["t"]]],[5,"atomic_xadd_acqrel","","Adds to the current value, returning the previous value.…",null,[[["t"]],["t"]]],[5,"atomic_xadd_relaxed","","Adds to the current value, returning the previous value.…",null,[[["t"]],["t"]]],[5,"atomic_xsub","","Subtract from the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_xsub_acq","","Subtract from the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_xsub_rel","","Subtract from the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_xsub_acqrel","","Subtract from the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_xsub_relaxed","","Subtract from the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_and","","Bitwise and with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_and_acq","","Bitwise and with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_and_rel","","Bitwise and with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_and_acqrel","","Bitwise and with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_and_relaxed","","Bitwise and with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_nand","","Bitwise nand with the current value, returning the…",null,[[["t"]],["t"]]],[5,"atomic_nand_acq","","Bitwise nand with the current value, returning the…",null,[[["t"]],["t"]]],[5,"atomic_nand_rel","","Bitwise nand with the current value, returning the…",null,[[["t"]],["t"]]],[5,"atomic_nand_acqrel","","Bitwise nand with the current value, returning the…",null,[[["t"]],["t"]]],[5,"atomic_nand_relaxed","","Bitwise nand with the current value, returning the…",null,[[["t"]],["t"]]],[5,"atomic_or","","Bitwise or with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_or_acq","","Bitwise or with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_or_rel","","Bitwise or with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_or_acqrel","","Bitwise or with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_or_relaxed","","Bitwise or with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_xor","","Bitwise xor with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_xor_acq","","Bitwise xor with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_xor_rel","","Bitwise xor with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_xor_acqrel","","Bitwise xor with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_xor_relaxed","","Bitwise xor with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_max","","",null,[[["t"]],["t"]]],[5,"atomic_max_acq","","",null,[[["t"]],["t"]]],[5,"atomic_max_rel","","",null,[[["t"]],["t"]]],[5,"atomic_max_acqrel","","",null,[[["t"]],["t"]]],[5,"atomic_max_relaxed","","",null,[[["t"]],["t"]]],[5,"atomic_min","","",null,[[["t"]],["t"]]],[5,"atomic_min_acq","","",null,[[["t"]],["t"]]],[5,"atomic_min_rel","","",null,[[["t"]],["t"]]],[5,"atomic_min_acqrel","","",null,[[["t"]],["t"]]],[5,"atomic_min_relaxed","","",null,[[["t"]],["t"]]],[5,"atomic_umin","","",null,[[["t"]],["t"]]],[5,"atomic_umin_acq","","",null,[[["t"]],["t"]]],[5,"atomic_umin_rel","","",null,[[["t"]],["t"]]],[5,"atomic_umin_acqrel","","",null,[[["t"]],["t"]]],[5,"atomic_umin_relaxed","","",null,[[["t"]],["t"]]],[5,"atomic_umax","","",null,[[["t"]],["t"]]],[5,"atomic_umax_acq","","",null,[[["t"]],["t"]]],[5,"atomic_umax_rel","","",null,[[["t"]],["t"]]],[5,"atomic_umax_acqrel","","",null,[[["t"]],["t"]]],[5,"atomic_umax_relaxed","","",null,[[["t"]],["t"]]],[5,"prefetch_read_data","","The `prefetch` intrinsic is a hint to the code generator…",null,[[["i32"]]]],[5,"prefetch_write_data","","The `prefetch` intrinsic is a hint to the code generator…",null,[[["i32"]]]],[5,"prefetch_read_instruction","","The `prefetch` intrinsic is a hint to the code generator…",null,[[["i32"]]]],[5,"prefetch_write_instruction","","The `prefetch` intrinsic is a hint to the code generator…",null,[[["i32"]]]],[5,"atomic_fence","","",null,[[]]],[5,"atomic_fence_acq","","",null,[[]]],[5,"atomic_fence_rel","","",null,[[]]],[5,"atomic_fence_acqrel","","",null,[[]]],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,[[]]],[5,"atomic_singlethreadfence_acq","","",null,[[]]],[5,"atomic_singlethreadfence_rel","","",null,[[]]],[5,"atomic_singlethreadfence_acqrel","","",null,[[]]],[5,"rustc_peek","","Magic intrinsic that derives its meaning from attributes…",null,[[["t"]],["t"]]],[5,"abort","","Aborts the execution of the process.",null,[[]]],[5,"unreachable","","Tells LLVM that this point in the code is not reachable,…",null,[[]]],[5,"assume","","Informs the optimizer that a condition is always true. If…",null,[[["bool"]]]],[5,"likely","","Hints to the compiler that branch condition is likely to…",null,[[["bool"]],["bool"]]],[5,"unlikely","","Hints to the compiler that branch condition is likely to…",null,[[["bool"]],["bool"]]],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,[[]]],[5,"size_of","","The size of a type in bytes.",null,[[],["usize"]]],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,[[["t"]]]],[5,"min_align_of","","",null,[[],["usize"]]],[5,"pref_align_of","","",null,[[],["usize"]]],[5,"size_of_val","","The size of the referenced value in bytes.",null,[[["t"]],["usize"]]],[5,"min_align_of_val","","",null,[[["t"]],["usize"]]],[5,"type_name","","Gets a static string slice containing the name of a type.",null,[[],["str"]]],[5,"type_id","","Gets an identifier which is globally unique to the…",null,[[],["u64"]]],[5,"panic_if_uninhabited","","A guard for unsafe functions that cannot ever be executed…",null,[[]]],[5,"caller_location","","Gets a reference to a static `Location` indicating where…",null,[[],["location"]]],[5,"init","","Creates a value initialized to zero.",null,[[],["t"]]],[5,"uninit","","Creates an uninitialized value.",null,[[],["t"]]],[5,"forget","","Moves a value out of scope without running drop glue.",null,[[["t"]]]],[5,"transmute","","Reinterprets the bits of a value of one type as another…",null,[[["t"]],["u"]]],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires…",null,[[],["bool"]]],[5,"offset","","Calculates the offset from a pointer.",null,[[["isize"]]]],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,[[["isize"]]]],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*`…",null,[[["usize"]]]],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*`…",null,[[["usize"]]]],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*`…",null,[[["u8"],["usize"]]]],[5,"volatile_load","","Performs a volatile load from the `src` pointer. The…",null,[[],["t"]]],[5,"volatile_store","","Performs a volatile store to the `dst` pointer. The…",null,[[["t"]]]],[5,"unaligned_volatile_load","","Performs a volatile load from the `src` pointer The…",null,[[],["t"]]],[5,"unaligned_volatile_store","","Performs a volatile store to the `dst` pointer. The…",null,[[["t"]]]],[5,"sqrtf32","","Returns the square root of an `f32`",null,[[["f32"]],["f32"]]],[5,"sqrtf64","","Returns the square root of an `f64`",null,[[["f64"]],["f64"]]],[5,"powif32","","Raises an `f32` to an integer power.",null,[[["f32"],["i32"]],["f32"]]],[5,"powif64","","Raises an `f64` to an integer power.",null,[[["f64"],["i32"]],["f64"]]],[5,"sinf32","","Returns the sine of an `f32`.",null,[[["f32"]],["f32"]]],[5,"sinf64","","Returns the sine of an `f64`.",null,[[["f64"]],["f64"]]],[5,"cosf32","","Returns the cosine of an `f32`.",null,[[["f32"]],["f32"]]],[5,"cosf64","","Returns the cosine of an `f64`.",null,[[["f64"]],["f64"]]],[5,"powf32","","Raises an `f32` to an `f32` power.",null,[[["f32"]],["f32"]]],[5,"powf64","","Raises an `f64` to an `f64` power.",null,[[["f64"]],["f64"]]],[5,"expf32","","Returns the exponential of an `f32`.",null,[[["f32"]],["f32"]]],[5,"expf64","","Returns the exponential of an `f64`.",null,[[["f64"]],["f64"]]],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,[[["f32"]],["f32"]]],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,[[["f64"]],["f64"]]],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,[[["f32"]],["f32"]]],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,[[["f64"]],["f64"]]],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,[[["f32"]],["f32"]]],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,[[["f64"]],["f64"]]],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,[[["f32"]],["f32"]]],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,[[["f64"]],["f64"]]],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,[[["f32"]],["f32"]]],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,[[["f64"]],["f64"]]],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,[[["f32"]],["f32"]]],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,[[["f64"]],["f64"]]],[5,"minnumf32","","Returns the minimum of two `f32` values.",null,[[["f32"]],["f32"]]],[5,"minnumf64","","Returns the minimum of two `f64` values.",null,[[["f64"]],["f64"]]],[5,"maxnumf32","","Returns the maximum of two `f32` values.",null,[[["f32"]],["f32"]]],[5,"maxnumf64","","Returns the maximum of two `f64` values.",null,[[["f64"]],["f64"]]],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,[[["f32"]],["f32"]]],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,[[["f64"]],["f64"]]],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,[[["f32"]],["f32"]]],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,[[["f64"]],["f64"]]],[5,"ceilf32","","Returns the smallest integer greater than or equal to an…",null,[[["f32"]],["f32"]]],[5,"ceilf64","","Returns the smallest integer greater than or equal to an…",null,[[["f64"]],["f64"]]],[5,"truncf32","","Returns the integer part of an `f32`.",null,[[["f32"]],["f32"]]],[5,"truncf64","","Returns the integer part of an `f64`.",null,[[["f64"]],["f64"]]],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an…",null,[[["f32"]],["f32"]]],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an…",null,[[["f64"]],["f64"]]],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,[[["f32"]],["f32"]]],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,[[["f64"]],["f64"]]],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way…",null,[[["f32"]],["f32"]]],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way…",null,[[["f64"]],["f64"]]],[5,"fadd_fast","","Float addition that allows optimizations based on…",null,[[["t"]],["t"]]],[5,"fsub_fast","","Float subtraction that allows optimizations based on…",null,[[["t"]],["t"]]],[5,"fmul_fast","","Float multiplication that allows optimizations based on…",null,[[["t"]],["t"]]],[5,"fdiv_fast","","Float division that allows optimizations based on…",null,[[["t"]],["t"]]],[5,"frem_fast","","Float remainder that allows optimizations based on…",null,[[["t"]],["t"]]],[5,"float_to_int_approx_unchecked","","Convert with LLVM’s fptoui/fptosi, which may return undef…",null,[[["float"]],["int"]]],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,[[["t"]],["t"]]],[5,"ctlz","","Returns the number of leading unset bits (zeroes) in an…",null,[[["t"]],["t"]]],[5,"ctlz_nonzero","","Like `ctlz`, but extra-unsafe as it returns `undef` when…",null,[[["t"]],["t"]]],[5,"cttz","","Returns the number of trailing unset bits (zeroes) in an…",null,[[["t"]],["t"]]],[5,"cttz_nonzero","","Like `cttz`, but extra-unsafe as it returns `undef` when…",null,[[["t"]],["t"]]],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,[[["t"]],["t"]]],[5,"bitreverse","","Reverses the bits in an integer type `T`.",null,[[["t"]],["t"]]],[5,"add_with_overflow","","Performs checked integer addition. The stabilized versions…",null,[[["t"]]]],[5,"sub_with_overflow","","Performs checked integer subtraction The stabilized…",null,[[["t"]]]],[5,"mul_with_overflow","","Performs checked integer multiplication The stabilized…",null,[[["t"]]]],[5,"exact_div","","Performs an exact division, resulting in undefined…",null,[[["t"]],["t"]]],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined…",null,[[["t"]],["t"]]],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting…",null,[[["t"]],["t"]]],[5,"unchecked_shl","","Performs an unchecked left shift, resulting in undefined…",null,[[["t"]],["t"]]],[5,"unchecked_shr","","Performs an unchecked right shift, resulting in undefined…",null,[[["t"]],["t"]]],[5,"unchecked_add","","Returns the result of an unchecked addition, resulting in…",null,[[["t"]],["t"]]],[5,"unchecked_sub","","Returns the result of an unchecked subtraction, resulting…",null,[[["t"]],["t"]]],[5,"unchecked_mul","","Returns the result of an unchecked multiplication,…",null,[[["t"]],["t"]]],[5,"rotate_left","","Performs rotate left. The stabilized versions of this…",null,[[["t"]],["t"]]],[5,"rotate_right","","Performs rotate right. The stabilized versions of this…",null,[[["t"]],["t"]]],[5,"wrapping_add","","Returns (a + b) mod 2N, where N is the width of T in bits.…",null,[[["t"]],["t"]]],[5,"wrapping_sub","","Returns (a - b) mod 2N, where N is the width of T in bits.…",null,[[["t"]],["t"]]],[5,"wrapping_mul","","Returns (a * b) mod 2N, where N is the width of T in bits.…",null,[[["t"]],["t"]]],[5,"saturating_add","","Computes `a + b`, while saturating at numeric bounds. The…",null,[[["t"]],["t"]]],[5,"saturating_sub","","Computes `a - b`, while saturating at numeric bounds. The…",null,[[["t"]],["t"]]],[5,"discriminant_value","","Returns the value of the discriminant for the variant in…",null,[[["t"]],["u64"]]],[5,"try","","Rust's \"try catch\" construct which invokes the function…",null,[[],["i32"]]],[5,"nontemporal_store","","Emits a `!nontemporal` store according to LLVM (see their…",null,[[["t"]]]],[5,"ptr_offset_from","","See documentation of `<*const T>::offset_from` for details.",null,[[],["isize"]]],[5,"miri_start_panic","","Internal hook used by Miri to implement unwinding.…",null,[[]]],[5,"copy_nonoverlapping","","Copies `count * size_of::<T>()` bytes from `src` to `dst`.…",null,[[["usize"]]]],[5,"copy","","Copies `count * size_of::<T>()` bytes from `src` to `dst`.…",null,[[["usize"]]]],[5,"write_bytes","","Sets `count * size_of::<T>()` bytes of memory starting at…",null,[[["u8"],["usize"]]]],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,[[]]],[0,"isize","std","The pointer-sized signed integer type.",null,null],[17,"MIN","std::isize","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"iter","std","Composable external iteration.",null,null],[8,"Iterator","std::iter","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",43,null],[10,"next","","Advances the iterator and returns the next value.",43,[[["self"]],["option"]]],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",43,[[["self"]]]],[11,"count","","Consumes the iterator, counting the number of iterations…",43,[[],["usize"]]],[11,"last","","Consumes the iterator, returning the last element.",43,[[],["option"]]],[11,"nth","","Returns the `n`th element of the iterator.",43,[[["self"],["usize"]],["option"]]],[11,"step_by","","Creates an iterator starting at the same point, but…",43,[[["usize"]],["stepby"]]],[11,"chain","","Takes two iterators and creates a new iterator over both…",43,[[["u"]],["chain"]]],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",43,[[["u"]],["zip"]]],[11,"map","","Takes a closure and creates an iterator which calls that…",43,[[["f"]],["map"]]],[11,"for_each","","Calls a closure on each element of an iterator.",43,[[["f"]]]],[11,"filter","","Creates an iterator which uses a closure to determine if…",43,[[["p"]],["filter"]]],[11,"filter_map","","Creates an iterator that both filters and maps.",43,[[["f"]],["filtermap"]]],[11,"enumerate","","Creates an iterator which gives the current iteration…",43,[[],["enumerate"]]],[11,"peekable","","Creates an iterator which can use `peek` to look at the…",43,[[],["peekable"]]],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a…",43,[[["p"]],["skipwhile"]]],[11,"take_while","","Creates an iterator that yields elements based on a…",43,[[["p"]],["takewhile"]]],[11,"skip","","Creates an iterator that skips the first `n` elements.",43,[[["usize"]],["skip"]]],[11,"take","","Creates an iterator that yields its first `n` elements.",43,[[["usize"]],["take"]]],[11,"scan","","An iterator adaptor similar to [`fold`] that holds…",43,[[["f"],["st"]],["scan"]]],[11,"flat_map","","Creates an iterator that works like map, but flattens…",43,[[["f"]],["flatmap"]]],[11,"flatten","","Creates an iterator that flattens nested structure.",43,[[],["flatten"]]],[11,"fuse","","Creates an iterator which ends after the first [`None`].",43,[[],["fuse"]]],[11,"inspect","","Does something with each element of an iterator, passing…",43,[[["f"]],["inspect"]]],[11,"by_ref","","Borrows an iterator, rather than consuming it.",43,[[["self"]],["self"]]],[11,"collect","","Transforms an iterator into a collection.",43,[[],["b"]]],[11,"partition","","Consumes an iterator, creating two collections from it.",43,[[["f"]]]],[11,"partition_in_place","","Reorders the elements of this iterator in-place according…",43,[[["p"]],["usize"]]],[11,"is_partitioned","","Checks if the elements of this iterator are partitioned…",43,[[["p"]],["bool"]]],[11,"try_fold","","An iterator method that applies a function as long as it…",43,[[["self"],["b"],["f"]],["r"]]],[11,"try_for_each","","An iterator method that applies a fallible function to…",43,[[["self"],["f"]],["r"]]],[11,"fold","","An iterator method that applies a function, producing a…",43,[[["b"],["f"]],["b"]]],[11,"all","","Tests if every element of the iterator matches a predicate.",43,[[["self"],["f"]],["bool"]]],[11,"any","","Tests if any element of the iterator matches a predicate.",43,[[["self"],["f"]],["bool"]]],[11,"find","","Searches for an element of an iterator that satisfies a…",43,[[["self"],["p"]],["option"]]],[11,"find_map","","Applies function to the elements of iterator and returns…",43,[[["self"],["f"]],["option"]]],[11,"try_find","","Applies function to the elements of iterator and returns…",43,[[["self"],["f"]],[["option"],["result",["option"]]]]],[11,"position","","Searches for an element in an iterator, returning its index.",43,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"rposition","","Searches for an element in an iterator from the right,…",43,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"max","","Returns the maximum element of an iterator.",43,[[],["option"]]],[11,"min","","Returns the minimum element of an iterator.",43,[[],["option"]]],[11,"max_by_key","","Returns the element that gives the maximum value from the…",43,[[["f"]],["option"]]],[11,"max_by","","Returns the element that gives the maximum value with…",43,[[["f"]],["option"]]],[11,"min_by_key","","Returns the element that gives the minimum value from the…",43,[[["f"]],["option"]]],[11,"min_by","","Returns the element that gives the minimum value with…",43,[[["f"]],["option"]]],[11,"rev","","Reverses an iterator's direction.",43,[[],["rev"]]],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",43,[[]]],[11,"copied","","Creates an iterator which copies all of its elements.",43,[[],["copied"]]],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",43,[[],["cloned"]]],[11,"cycle","","Repeats an iterator endlessly.",43,[[],["cycle"]]],[11,"sum","","Sums the elements of an iterator.",43,[[],["s"]]],[11,"product","","Iterates over the entire iterator, multiplying all the…",43,[[],["p"]]],[11,"cmp","","Lexicographically compares the elements of this `Iterator`…",43,[[["i"]],["ordering"]]],[11,"cmp_by","","Lexicographically compares the elements of this `Iterator`…",43,[[["i"],["f"]],["ordering"]]],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator`…",43,[[["i"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp_by","","Lexicographically compares the elements of this `Iterator`…",43,[[["i"],["f"]],[["option",["ordering"]],["ordering"]]]],[11,"eq","","Determines if the elements of this `Iterator` are equal to…",43,[[["i"]],["bool"]]],[11,"eq_by","","Determines if the elements of this `Iterator` are equal to…",43,[[["i"],["f"]],["bool"]]],[11,"ne","","Determines if the elements of this `Iterator` are unequal…",43,[[["i"]],["bool"]]],[11,"lt","","Determines if the elements of this `Iterator` are…",43,[[["i"]],["bool"]]],[11,"le","","Determines if the elements of this `Iterator` are…",43,[[["i"]],["bool"]]],[11,"gt","","Determines if the elements of this `Iterator` are…",43,[[["i"]],["bool"]]],[11,"ge","","Determines if the elements of this `Iterator` are…",43,[[["i"]],["bool"]]],[11,"is_sorted","","Checks if the elements of this iterator are sorted.",43,[[],["bool"]]],[11,"is_sorted_by","","Checks if the elements of this iterator are sorted using…",43,[[["f"]],["bool"]]],[11,"is_sorted_by_key","","Checks if the elements of this iterator are sorted using…",43,[[["f"]],["bool"]]],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"steps_between","","Returns the number of steps between two step objects. The…",44,[[["self"]],[["option",["usize"]],["usize"]]]],[10,"replace_one","","Replaces this step with `1`, returning a clone of itself.",44,[[["self"]],["self"]]],[10,"replace_zero","","Replaces this step with `0`, returning a clone of itself.",44,[[["self"]],["self"]]],[10,"add_one","","Adds one to this step, returning the result.",44,[[["self"]],["self"]]],[10,"sub_one","","Subtracts one to this step, returning the result.",44,[[["self"]],["self"]]],[10,"add_usize","","Adds a `usize`, returning `None` on overflow.",44,[[["self"],["usize"]],["option"]]],[11,"sub_usize","","Subtracts a `usize`, returning `None` on underflow.",44,[[["self"],["usize"]],["option"]]],[5,"empty","","Creates an iterator that yields nothing.",null,[[],["empty"]]],[3,"Empty","","An iterator that yields nothing.",null,null],[5,"from_fn","","Creates a new iterator where each iteration calls the…",null,[[["f"]],["fromfn"]]],[3,"FromFn","","An iterator where each iteration calls the provided…",null,null],[5,"once","","Creates an iterator that yields an element exactly once.",null,[[["t"]],["once"]]],[3,"Once","","An iterator that yields an element exactly once.",null,null],[5,"once_with","","Creates an iterator that lazily generates a value exactly…",null,[[["f"]],["oncewith"]]],[3,"OnceWith","","An iterator that yields a single element of type `A` by…",null,null],[5,"repeat","","Creates a new iterator that endlessly repeats a single…",null,[[["t"]],["repeat"]]],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[5,"repeat_with","","Creates a new iterator that repeats elements of type `A`…",null,[[["f"]],["repeatwith"]]],[3,"RepeatWith","","An iterator that repeats elements of type `A` endlessly by…",null,null],[5,"successors","","Creates a new iterator where each successive item is…",null,[[["option"],["f"]],["successors"]]],[3,"Successors","","An new iterator where each successive item is computed…",null,null],[8,"FusedIterator","","An iterator that always continues to yield `None` when…",null,null],[8,"TrustedLen","","An iterator that reports an accurate length using size_hint.",null,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","Removes and returns an element from the end of the iterator.",45,[[["self"]],["option"]]],[11,"nth_back","","Returns the `n`th element from the end of the iterator.",45,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","This is the reverse version of [`try_fold()`]: it takes…",45,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","An iterator method that reduces the iterator's elements to…",45,[[["b"],["f"]],["b"]]],[11,"rfind","","Searches for an element of an iterator from the back that…",45,[[["self"],["p"]],["option"]]],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",46,[[["self"],["t"]]]],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",47,[[["t"]],["self"]]],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",48,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",48,null],[10,"into_iter","","Creates an iterator from a value.",48,[[]]],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",49,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the iterator is empty.",49,[[["self"]],["bool"]]],[8,"Product","","Trait to represent types that can be created by…",null,null],[10,"product","","Method which takes an iterator and generates `Self` from…",50,[[["i"]],["self"]]],[8,"Sum","","Trait to represent types that can be created by summing up…",null,null],[10,"sum","","Method which takes an iterator and generates `Self` from…",51,[[["i"]],["self"]]],[3,"Cloned","","An iterator that clones the elements of an underlying…",null,null],[3,"Copied","","An iterator that copies the elements of an underlying…",null,null],[3,"Flatten","","An iterator that flattens one level of nesting in an…",null,null],[3,"StepBy","","An iterator for stepping iterators by a custom amount.",null,null],[3,"Chain","","An iterator that links two iterators together, in a chain.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element…",null,null],[3,"Filter","","An iterator that filters the elements of `iter` with…",null,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements…",null,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[3,"Rev","","A double-ended iterator with the direction inverted.",null,null],[3,"Zip","","An iterator that iterates two other iterators…",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and…",null,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional…",null,null],[3,"Scan","","An iterator to maintain state while iterating another…",null,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate`…",null,null],[3,"Take","","An iterator that only iterates over the first `n`…",null,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate`…",null,null],[3,"Fuse","","An iterator that yields `None` forever after the…",null,null],[3,"Inspect","","An iterator that calls a function with a reference to each…",null,null],[0,"marker","std","Primitive traits and types representing basic properties…",null,null],[8,"Send","std::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile time.",null,null],[8,"Unsize","","Types that can be \"unsized\" to a dynamically-sized type.",null,null],[8,"StructuralPartialEq","","Required trait for constants used in pattern matches.",null,null],[8,"StructuralEq","","Required trait for constants used in pattern matches.",null,null],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",null,null],[8,"Sync","","Types for which it is safe to share references between…",null,null],[3,"PhantomData","","Zero-sized type used to mark things that \"act like\" they…",null,null],[8,"Unpin","","Types that can be safely moved after being pinned.",null,null],[3,"PhantomPinned","","A marker type which does not implement `Unpin`.",null,null],[14,"Copy","","Derive macro generating an impl of the trait `Copy`.",null,null],[0,"mem","std","Basic functions for dealing with memory.",null,null],[5,"forget","std::mem","Takes ownership and \"forgets\" about the value without…",null,[[["t"]]]],[5,"forget_unsized","","Like [`forget`], but also accepts unsized values.",null,[[["t"]]]],[5,"size_of","","Returns the size of a type in bytes.",null,[[],["usize"]]],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",null,[[["t"]],["usize"]]],[5,"min_align_of","","Returns the [ABI]-required minimum alignment of a type.",null,[[],["usize"]]],[5,"min_align_of_val","","Returns the [ABI]-required minimum alignment of the type…",null,[[["t"]],["usize"]]],[5,"align_of","","Returns the [ABI]-required minimum alignment of a type.",null,[[],["usize"]]],[5,"align_of_val","","Returns the [ABI]-required minimum alignment of the type…",null,[[["t"]],["usize"]]],[5,"needs_drop","","Returns `true` if dropping values of type `T` matters.",null,[[],["bool"]]],[5,"zeroed","","Returns the value of type `T` represented by the all-zero…",null,[[],["t"]]],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by…",null,[[],["t"]]],[5,"swap","","Swaps the values at two mutable locations, without…",null,[[["t"]]]],[5,"take","","Replaces `dest` with the default value of `T`, returning…",null,[[["t"]],["t"]]],[5,"replace","","Moves `src` into the referenced `dest`, returning the…",null,[[["t"],["t"]],["t"]]],[5,"drop","","Disposes of a value.",null,[[["t"]]]],[5,"transmute_copy","","Interprets `src` as having type `&U`, and then reads `src`…",null,[[["t"]],["u"]]],[3,"Discriminant","","Opaque type representing the discriminant of an enum.",null,null],[5,"discriminant","","Returns a value uniquely identifying the enum variant in…",null,[[["t"]],["discriminant"]]],[3,"ManuallyDrop","","A wrapper to inhibit compiler from automatically calling…",null,null],[19,"MaybeUninit","","A wrapper type to construct uninitialized instances of `T`.",null,null],[5,"transmute","","Reinterprets the bits of a value of one type as another…",null,[[["t"]],["u"]]],[0,"ops","std","Overloadable operators.",null,null],[8,"Add","std::ops","The addition operator `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator.",52,null],[10,"add","","Performs the `+` operation.",52,[[["rhs"]]]],[8,"Div","","The division operator `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator.",53,null],[10,"div","","Performs the `/` operation.",53,[[["rhs"]]]],[8,"Mul","","The multiplication operator `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator.",54,null],[10,"mul","","Performs the `*` operation.",54,[[["rhs"]]]],[8,"Neg","","The unary negation operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",55,null],[10,"neg","","Performs the unary `-` operation.",55,[[]]],[8,"Rem","","The remainder operator `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator.",56,null],[10,"rem","","Performs the `%` operation.",56,[[["rhs"]]]],[8,"Sub","","The subtraction operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",57,null],[10,"sub","","Performs the `-` operation.",57,[[["rhs"]]]],[8,"AddAssign","","The addition assignment operator `+=`.",null,null],[10,"add_assign","","Performs the `+=` operation.",58,[[["self"],["rhs"]]]],[8,"DivAssign","","The division assignment operator `/=`.",null,null],[10,"div_assign","","Performs the `/=` operation.",59,[[["self"],["rhs"]]]],[8,"MulAssign","","The multiplication assignment operator `*=`.",null,null],[10,"mul_assign","","Performs the `*=` operation.",60,[[["self"],["rhs"]]]],[8,"RemAssign","","The remainder assignment operator `%=`.",null,null],[10,"rem_assign","","Performs the `%=` operation.",61,[[["self"],["rhs"]]]],[8,"SubAssign","","The subtraction assignment operator `-=`.",null,null],[10,"sub_assign","","Performs the `-=` operation.",62,[[["self"],["rhs"]]]],[8,"BitAnd","","The bitwise AND operator `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator.",63,null],[10,"bitand","","Performs the `&` operation.",63,[[["rhs"]]]],[8,"BitOr","","The bitwise OR operator `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator.",64,null],[10,"bitor","","Performs the `|` operation.",64,[[["rhs"]]]],[8,"BitXor","","The bitwise XOR operator `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator.",65,null],[10,"bitxor","","Performs the `^` operation.",65,[[["rhs"]]]],[8,"Not","","The unary logical negation operator `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator.",66,null],[10,"not","","Performs the unary `!` operation.",66,[[]]],[8,"Shl","","The left shift operator `<<`. Note that because this trait…",null,null],[16,"Output","","The resulting type after applying the `<<` operator.",67,null],[10,"shl","","Performs the `<<` operation.",67,[[["rhs"]]]],[8,"Shr","","The right shift operator `>>`. Note that because this…",null,null],[16,"Output","","The resulting type after applying the `>>` operator.",68,null],[10,"shr","","Performs the `>>` operation.",68,[[["rhs"]]]],[8,"BitAndAssign","","The bitwise AND assignment operator `&=`.",null,null],[10,"bitand_assign","","Performs the `&=` operation.",69,[[["self"],["rhs"]]]],[8,"BitOrAssign","","The bitwise OR assignment operator `|=`.",null,null],[10,"bitor_assign","","Performs the `|=` operation.",70,[[["self"],["rhs"]]]],[8,"BitXorAssign","","The bitwise XOR assignment operator `^=`.",null,null],[10,"bitxor_assign","","Performs the `^=` operation.",71,[[["self"],["rhs"]]]],[8,"ShlAssign","","The left shift assignment operator `<<=`.",null,null],[10,"shl_assign","","Performs the `<<=` operation.",72,[[["self"],["rhs"]]]],[8,"ShrAssign","","The right shift assignment operator `>>=`.",null,null],[10,"shr_assign","","Performs the `>>=` operation.",73,[[["self"],["rhs"]]]],[8,"Deref","","Used for immutable dereferencing operations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing.",74,null],[10,"deref","","Dereferences the value.",74,[[["self"]]]],[8,"DerefMut","","Used for mutable dereferencing operations, like in `*v =…",null,null],[10,"deref_mut","","Mutably dereferences the value.",75,[[["self"]]]],[8,"Drop","","Used to run some code when a value goes out of scope. This…",null,null],[10,"drop","","Executes the destructor for this type.",76,[[["self"]]]],[8,"Fn","","The version of the call operator that takes an immutable…",null,null],[10,"call","","Performs the call operation.",77,[[["args"],["self"]]]],[8,"FnMut","","The version of the call operator that takes a mutable…",null,null],[10,"call_mut","","Performs the call operation.",78,[[["args"],["self"]]]],[8,"FnOnce","","The version of the call operator that takes a by-value…",null,null],[16,"Output","","The returned type after the call operator is used.",79,null],[10,"call_once","","Performs the call operation.",79,[[["args"]]]],[8,"Index","","Used for indexing operations (`container[index]`) in…",null,null],[16,"Output","","The returned type after indexing.",80,null],[10,"index","","Performs the indexing (`container[index]`) operation.",80,[[["idx"],["self"]]]],[8,"IndexMut","","Used for indexing operations (`container[index]`) in…",null,null],[10,"index_mut","","Performs the mutable indexing (`container[index]`)…",81,[[["self"],["idx"]]]],[3,"Range","","A (half-open) range bounded inclusively below and…",null,null],[12,"start","","The lower bound of the range (inclusive).",82,null],[12,"end","","The upper bound of the range (exclusive).",82,null],[3,"RangeFrom","","A range only bounded inclusively below (`start..`).",null,null],[12,"start","","The lower bound of the range (inclusive).",83,null],[3,"RangeFull","","An unbounded range (`..`).",null,null],[3,"RangeTo","","A range only bounded exclusively above (`..end`).",null,null],[12,"end","","The upper bound of the range (exclusive).",84,null],[4,"Bound","","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",85,null],[13,"Excluded","","An exclusive bound.",85,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in…",85,null],[8,"RangeBounds","","`RangeBounds` is implemented by Rust's built-in range…",null,null],[10,"start_bound","","Start index bound.",86,[[["self"]],[["bound"],["t"]]]],[10,"end_bound","","End index bound.",86,[[["self"]],[["bound"],["t"]]]],[11,"contains","","Returns `true` if `item` is contained in the range.",86,[[["self"],["u"]],["bool"]]],[3,"RangeInclusive","","A range bounded inclusively below and above (`start..=end`).",null,null],[3,"RangeToInclusive","","A range only bounded inclusively above (`..=end`).",null,null],[12,"end","","The upper bound of the range (inclusive)",87,null],[8,"Try","","A trait for customizing the behavior of the `?` operator.",null,null],[16,"Ok","","The type of this value when viewed as successful.",88,null],[16,"Error","","The type of this value when viewed as failed.",88,null],[10,"into_result","","Applies the \"?\" operator. A return of `Ok(t)` means that…",88,[[],["result"]]],[10,"from_error","","Wrap an error value to construct the composite result. For…",88,[[],["self"]]],[10,"from_ok","","Wrap an OK value to construct the composite result. For…",88,[[],["self"]]],[8,"Generator","","The trait implemented by builtin generator types.",null,null],[16,"Yield","","The type of value this generator yields.",89,null],[16,"Return","","The type of value this generator returns.",89,null],[10,"resume","","Resumes the execution of this generator.",89,[[["pin"],["self"]],["generatorstate"]]],[4,"GeneratorState","","The result of a generator resumption.",null,null],[13,"Yielded","","The generator suspended with a value.",90,null],[13,"Complete","","The generator completed with a return value.",90,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper…",null,null],[8,"DispatchFromDyn","","This is used for object safety, to check that a method's…",null,null],[0,"option","std","Optional values.",null,null],[4,"Option","std::option","The `Option` type. See the module level documentation for…",null,null],[13,"None","","No value",91,null],[13,"Some","","Some value `T`",91,null],[3,"Iter","","An iterator over a reference to the [`Some`] variant of an…",null,null],[3,"IterMut","","An iterator over a mutable reference to the [`Some`]…",null,null],[3,"IntoIter","","An iterator over the value in [`Some`] variant of an…",null,null],[3,"NoneError","","The error type that results from applying the try operator…",null,null],[0,"pin","std","Types that pin data to its location in memory.",null,null],[3,"Pin","std::pin","A pinned pointer.",null,null],[0,"ptr","std","Manually manage memory through raw pointers.",null,null],[5,"drop_in_place","std::ptr","Executes the destructor (if any) of the pointed-to value.",null,[[]]],[5,"null","","Creates a null raw pointer.",null,[[]]],[5,"null_mut","","Creates a null mutable raw pointer.",null,[[]]],[5,"slice_from_raw_parts","","Forms a raw slice from a pointer and a length.",null,[[["usize"]]]],[5,"slice_from_raw_parts_mut","","Performs the same functionality as…",null,[[["usize"]]]],[5,"swap","","Swaps the values at two mutable locations of the same…",null,[[]]],[5,"swap_nonoverlapping","","Swaps `count * size_of::<T>()` bytes between the two…",null,[[["usize"]]]],[5,"replace","","Moves `src` into the pointed `dst`, returning the previous…",null,[[["t"]],["t"]]],[5,"read","","Reads the value from `src` without moving it. This leaves…",null,[[],["t"]]],[5,"read_unaligned","","Reads the value from `src` without moving it. This leaves…",null,[[],["t"]]],[5,"write","","Overwrites a memory location with the given value without…",null,[[["t"]]]],[5,"write_unaligned","","Overwrites a memory location with the given value without…",null,[[["t"]]]],[5,"read_volatile","","Performs a volatile read of the value from `src` without…",null,[[],["t"]]],[5,"write_volatile","","Performs a volatile write of a memory location with the…",null,[[["t"]]]],[5,"eq","","Compares raw pointers for equality.",null,[[],["bool"]]],[5,"hash","","Hash a raw pointer.",null,[[["s"]]]],[5,"copy_nonoverlapping","","Copies `count * size_of::<T>()` bytes from `src` to `dst`.…",null,[[["usize"]]]],[5,"copy","","Copies `count * size_of::<T>()` bytes from `src` to `dst`.…",null,[[["usize"]]]],[5,"write_bytes","","Sets `count * size_of::<T>()` bytes of memory starting at…",null,[[["u8"],["usize"]]]],[3,"NonNull","","`*mut T` but non-zero and covariant.",null,null],[0,"raw","std","Contains struct definitions for the layout of compiler…",null,null],[3,"TraitObject","std::raw","The representation of a trait object like `&SomeTrait`.",null,null],[12,"data","","",92,null],[12,"vtable","","",92,null],[0,"result","std","Error handling with the `Result` type.",null,null],[4,"Result","std::result","`Result` is a type that represents either success ([`Ok`])…",null,null],[13,"Ok","","Contains the success value",93,null],[13,"Err","","Contains the error value",93,null],[3,"Iter","","An iterator over a reference to the [`Ok`] variant of a…",null,null],[3,"IterMut","","An iterator over a mutable reference to the [`Ok`] variant…",null,null],[3,"IntoIter","","An iterator over the value in a [`Ok`] variant of a…",null,null],[0,"u128","std","The 128-bit unsigned integer type.",null,null],[17,"MIN","std::u128","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"u16","std","The 16-bit unsigned integer type.",null,null],[17,"MIN","std::u16","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"u32","std","The 32-bit unsigned integer type.",null,null],[17,"MIN","std::u32","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"u64","std","The 64-bit unsigned integer type.",null,null],[17,"MIN","std::u64","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"u8","std","The 8-bit unsigned integer type.",null,null],[17,"MIN","std::u8","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"usize","std","The pointer-sized unsigned integer type.",null,null],[17,"MIN","std::usize","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[14,"assert_eq","std","Asserts that two expressions are equal to each other…",null,null],[14,"assert_ne","","Asserts that two expressions are not equal to each other…",null,null],[14,"debug_assert","","Asserts that a boolean expression is `true` at runtime.",null,null],[14,"debug_assert_eq","","Asserts that two expressions are equal to each other.",null,null],[14,"debug_assert_ne","","Asserts that two expressions are not equal to each other.",null,null],[14,"matches","","Returns whether the given expression matches any of the…",null,null],[14,"try","","Unwraps a result or propagates its error.",null,null],[14,"todo","","Indicates unfinished code.",null,null],[14,"unimplemented","","Indicates unimplemented code by panicking with a message…",null,null],[14,"unreachable","","Indicates unreachable code.",null,null],[14,"write","","Writes formatted data into a buffer.",null,null],[14,"writeln","","Write formatted data into a buffer, with a newline appended.",null,null],[14,"asm","","Inline assembly.",null,null],[14,"assert","","Asserts that a boolean expression is `true` at runtime.",null,null],[14,"cfg","","Evaluates boolean combinations of configuration flags at…",null,null],[14,"column","","Expands to the column number at which it was invoked.",null,null],[14,"compile_error","","Causes compilation to fail with the given error message…",null,null],[14,"concat","","Concatenates literals into a static string slice.",null,null],[14,"concat_idents","","Concatenates identifiers into one identifier.",null,null],[14,"env","","Inspects an environment variable at compile time.",null,null],[14,"file","","Expands to the file name in which it was invoked.",null,null],[14,"format_args","","Constructs parameters for the other string-formatting…",null,null],[14,"format_args_nl","","Same as `format_args`, but adds a newline in the end.",null,null],[14,"global_asm","","Module-level inline assembly.",null,null],[14,"include","","Parses a file as an expression or an item according to the…",null,null],[14,"include_bytes","","Includes a file as a reference to a byte array.",null,null],[14,"include_str","","Includes a utf8-encoded file as a string.",null,null],[14,"line","","Expands to the line number on which it was invoked.",null,null],[14,"log_syntax","","Prints passed tokens into the standard output.",null,null],[14,"module_path","","Expands to a string that represents the current module path.",null,null],[14,"option_env","","Optionally inspects an environment variable at compile time.",null,null],[14,"stringify","","Stringifies its arguments.",null,null],[14,"trace_macros","","Enables or disables tracing functionality used for…",null,null],[0,"prelude","","The Rust Prelude.",null,null],[0,"v1","std::prelude","The first version of the prelude of The Rust Standard…",null,null],[0,"f32","std","This module provides constants which are specific to the…",null,null],[0,"consts","std::f32","Basic mathematical constants.",null,null],[17,"PI","std::f32::consts","Archimedes' constant (π)",null,null],[17,"TAU","","The full circle constant (τ)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler's number (e)",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG2_10","","log2(10)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LOG10_2","","log10(2)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[17,"DIGITS","std::f32","Approximate number of significant digits in base 10.",null,null],[17,"EPSILON","","[Machine epsilon] value for `f32`.",null,null],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2.",null,null],[17,"RADIX","","The radix or base of the internal representation of `f32`.",null,null],[17,"INFINITY","","Infinity (∞).",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",null,null],[17,"NAN","","Not a Number (NaN).",null,null],[17,"NEG_INFINITY","","Negative infinity (−∞).",null,null],[17,"MAX","","Largest finite `f32` value.",null,null],[17,"MIN","","Smallest finite `f32` value.",null,null],[17,"MIN_POSITIVE","","Smallest positive normal `f32` value.",null,null],[17,"MAX_EXP","","Maximum possible power of 2 exponent.",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2…",null,null],[0,"f64","std","This module provides constants which are specific to the…",null,null],[0,"consts","std::f64","Basic mathematical constants.",null,null],[17,"PI","std::f64::consts","Archimedes' constant (π)",null,null],[17,"TAU","","The full circle constant (τ)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler's number (e)",null,null],[17,"LOG2_10","","log2(10)",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_2","","log10(2)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[17,"DIGITS","std::f64","Approximate number of significant digits in base 10.",null,null],[17,"EPSILON","","[Machine epsilon] value for `f64`.",null,null],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2.",null,null],[17,"RADIX","","The radix or base of the internal representation of `f64`.",null,null],[17,"INFINITY","","Infinity (∞).",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",null,null],[17,"NAN","","Not a Number (NaN).",null,null],[17,"NEG_INFINITY","","Negative infinity (−∞).",null,null],[17,"MAX","","Largest finite `f64` value.",null,null],[17,"MIN","","Smallest finite `f64` value.",null,null],[17,"MIN_POSITIVE","","Smallest positive normal `f64` value.",null,null],[17,"MAX_EXP","","Maximum possible power of 2 exponent.",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2…",null,null],[0,"thread","std","Native threads.",null,null],[3,"AccessError","std::thread","An error returned by `LocalKey::try_with`.",null,null],[3,"LocalKey","","A thread local storage key which owns its contents.",null,null],[3,"Builder","","Thread factory, which can be used in order to configure…",null,null],[3,"ThreadId","","A unique identifier for a running thread.",null,null],[3,"Thread","","A handle to a thread.",null,null],[3,"JoinHandle","","An owned permission to join on a thread (block on its…",null,null],[5,"spawn","","Spawns a new thread, returning a [`JoinHandle`] for it.",null,[[["f"]],["joinhandle"]]],[5,"current","","Gets a handle to the thread that invokes it.",null,[[],["thread"]]],[5,"yield_now","","Cooperatively gives up a timeslice to the OS scheduler.",null,[[]]],[5,"panicking","","Determines whether the current thread is unwinding because…",null,[[],["bool"]]],[5,"sleep_ms","","Puts the current thread to sleep for at least the…",null,[[["u32"]]]],[5,"sleep","","Puts the current thread to sleep for at least the…",null,[[["duration"]]]],[5,"park","","Blocks unless or until the current thread's token is made…",null,[[]]],[5,"park_timeout_ms","","Use [`park_timeout`].",null,[[["u32"]]]],[5,"park_timeout","","Blocks unless or until the current thread's token is made…",null,[[["duration"]]]],[11,"with","","Acquires a reference to the value in this TLS key.",94,[[["self"],["f"]],["r"]]],[11,"try_with","","Acquires a reference to the value in this TLS key.",94,[[["self"],["f"]],[["accesserror"],["result",["accesserror"]]]]],[6,"Result","","A specialized [`Result`] type for threads.",null,null],[11,"new","","Generates the base configuration for spawning a thread,…",95,[[],["builder"]]],[11,"name","","Names the thread-to-be. Currently the name is used for…",95,[[["string"]],["builder"]]],[11,"stack_size","","Sets the size of the stack (in bytes) for the new thread.",95,[[["usize"]],["builder"]]],[11,"spawn","","Spawns a new thread by taking ownership of the `Builder`,…",95,[[["f"]],[["joinhandle"],["result",["joinhandle"]]]]],[11,"spawn_unchecked","","Spawns a new thread without any lifetime restrictions by…",95,[[["f"]],[["joinhandle"],["result",["joinhandle"]]]]],[11,"as_u64","","This returns a numeric identifier for the thread…",96,[[["self"]],["u64"]]],[11,"unpark","","Atomically makes the handle's token available if it is not…",97,[[["self"]]]],[11,"id","","Gets the thread's unique identifier.",97,[[["self"]],["threadid"]]],[11,"name","","Gets the thread's name.",97,[[["self"]],[["str"],["option",["str"]]]]],[11,"thread","","Extracts a handle to the underlying thread.",98,[[["self"]],["thread"]]],[11,"join","","Waits for the associated thread to finish.",98,[[],["result"]]],[0,"ascii","std","Operations on ASCII strings and characters.",null,null],[5,"escape_default","std::ascii","Returns an iterator that produces an escaped version of a…",null,[[["u8"]],["escapedefault"]]],[3,"EscapeDefault","","An iterator over the escaped version of a byte.",null,null],[8,"AsciiExt","","Extension methods for ASCII-subset only operations.",null,null],[16,"Owned","","Container type for copied ASCII characters.",99,null],[10,"is_ascii","","Checks if the value is within the ASCII range.",99,[[["self"]],["bool"]]],[10,"to_ascii_uppercase","","Makes a copy of the value in its ASCII upper case…",99,[[["self"]]]],[10,"to_ascii_lowercase","","Makes a copy of the value in its ASCII lower case…",99,[[["self"]]]],[10,"eq_ignore_ascii_case","","Checks that two values are an ASCII case-insensitive match.",99,[[["self"]],["bool"]]],[10,"make_ascii_uppercase","","Converts this type to its ASCII upper case equivalent…",99,[[["self"]]]],[10,"make_ascii_lowercase","","Converts this type to its ASCII lower case equivalent…",99,[[["self"]]]],[0,"backtrace","std","Support for capturing a stack backtrace of an OS thread",null,null],[3,"Backtrace","std::backtrace","A captured OS thread stack backtrace.",null,null],[4,"BacktraceStatus","","The current status of a backtrace, indicating whether it…",null,null],[13,"Unsupported","","Capturing a backtrace is not supported, likely because…",100,null],[13,"Disabled","","Capturing a backtrace has been disabled through either the…",100,null],[13,"Captured","","A backtrace has been captured and the `Backtrace` should…",100,null],[11,"capture","","Capture a stack backtrace of the current thread.",101,[[],["backtrace"]]],[11,"force_capture","","Forcibly captures a full backtrace, regardless of…",101,[[],["backtrace"]]],[11,"status","","Returns the status of this backtrace, indicating whether…",101,[[["self"]],["backtracestatus"]]],[0,"collections","std","Collection types.",null,null],[0,"binary_heap","std::collections","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","std::collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[3,"PeekMut","","Structure wrapping a mutable reference to the greatest…",null,null],[3,"Iter","","An iterator over the elements of a `BinaryHeap`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `BinaryHeap`.",null,null],[3,"IntoIterSorted","","",null,null],[3,"Drain","","A draining iterator over the elements of a `BinaryHeap`.",null,null],[3,"DrainSorted","","A draining iterator over the elements of a `BinaryHeap`.",null,null],[0,"btree_map","std::collections","A map based on a B-Tree.",null,null],[3,"BTreeMap","std::collections::btree_map","A map based on a B-Tree.",null,null],[3,"Keys","","An iterator over the keys of a `BTreeMap`.",null,null],[3,"Iter","","An iterator over the entries of a `BTreeMap`.",null,null],[3,"IntoIter","","An owning iterator over the entries of a `BTreeMap`.",null,null],[3,"Values","","An iterator over the values of a `BTreeMap`.",null,null],[3,"Range","","An iterator over a sub-range of entries in a `BTreeMap`.",null,null],[3,"RangeMut","","A mutable iterator over a sub-range of entries in a…",null,null],[4,"Entry","","A view into a single entry in a map, which may either be…",null,null],[13,"Vacant","","A vacant entry.",102,null],[13,"Occupied","","An occupied entry.",102,null],[3,"VacantEntry","","A view into a vacant entry in a `BTreeMap`. It is part of…",null,null],[3,"OccupiedEntry","","A view into an occupied entry in a `BTreeMap`. It is part…",null,null],[3,"IterMut","","A mutable iterator over the entries of a `BTreeMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a `BTreeMap`.",null,null],[0,"btree_set","std::collections","A set based on a B-Tree.",null,null],[3,"Iter","std::collections::btree_set","An iterator over the items of a `BTreeSet`.",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of…",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric…",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of…",null,null],[3,"Union","","A lazy iterator producing elements in the union of…",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[3,"IntoIter","","An owning iterator over the items of a `BTreeSet`.",null,null],[3,"Range","","An iterator over a sub-range of items in a `BTreeSet`.",null,null],[0,"linked_list","std::collections","A doubly-linked list with owned nodes.",null,null],[3,"LinkedList","std::collections::linked_list","A doubly-linked list with owned nodes.",null,null],[3,"Iter","","An iterator over the elements of a `LinkedList`.",null,null],[3,"IterMut","","A mutable iterator over the elements of a `LinkedList`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `LinkedList`.",null,null],[3,"Cursor","","A cursor over a `LinkedList`.",null,null],[3,"CursorMut","","A cursor over a `LinkedList` with editing operations.",null,null],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on…",null,null],[0,"vec_deque","std::collections","A double-ended queue implemented with a growable ring…",null,null],[3,"VecDeque","std::collections::vec_deque","A double-ended queue implemented with a growable ring…",null,null],[3,"Iter","","An iterator over the elements of a `VecDeque`.",null,null],[3,"IterMut","","A mutable iterator over the elements of a `VecDeque`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `VecDeque`.",null,null],[3,"Drain","","A draining iterator over the elements of a `VecDeque`.",null,null],[3,"BTreeMap","std::collections","A map based on a B-Tree.",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[3,"BinaryHeap","","A priority queue implemented with a binary heap.",null,null],[3,"LinkedList","","A doubly-linked list with owned nodes.",null,null],[3,"VecDeque","","A double-ended queue implemented with a growable ring…",null,null],[4,"TryReserveError","","The error type for `try_reserve` methods.",null,null],[13,"CapacityOverflow","","Error due to the computed capacity exceeding the…",103,null],[13,"AllocError","","The memory allocator returned an error",103,null],[12,"layout","std::collections::TryReserveError","The layout of allocation request that failed",103,null],[3,"HashMap","std::collections","A hash map implemented with quadratic probing and SIMD…",null,null],[3,"HashSet","","A hash set implemented as a `HashMap` where the value is…",null,null],[11,"new","","Creates an empty `HashMap`.",104,[[],[["randomstate"],["hashmap",["randomstate"]]]]],[11,"with_capacity","","Creates an empty `HashMap` with the specified capacity.",104,[[["usize"]],[["randomstate"],["hashmap",["randomstate"]]]]],[11,"capacity","","Returns the number of elements the map can hold without…",104,[[["self"]],["usize"]]],[11,"keys","","An iterator visiting all keys in arbitrary order. The…",104,[[["self"]],["keys"]]],[11,"values","","An iterator visiting all values in arbitrary order. The…",104,[[["self"]],["values"]]],[11,"values_mut","","An iterator visiting all values mutably in arbitrary…",104,[[["self"]],["valuesmut"]]],[11,"iter","","An iterator visiting all key-value pairs in arbitrary…",104,[[["self"]],["iter"]]],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary…",104,[[["self"]],["itermut"]]],[11,"len","","Returns the number of elements in the map.",104,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the map contains no elements.",104,[[["self"]],["bool"]]],[11,"drain","","Clears the map, returning all key-value pairs as an…",104,[[["self"]],["drain"]]],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the…",104,[[["self"]]]],[11,"with_hasher","","Creates an empty `HashMap` which will use the given hash…",104,[[["s"]],["hashmap"]]],[11,"with_capacity_and_hasher","","Creates an empty `HashMap` with the specified capacity,…",104,[[["s"],["usize"]],["hashmap"]]],[11,"hasher","","Returns a reference to the map's [`BuildHasher`].",104,[[["self"]],["s"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",104,[[["self"],["usize"]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",104,[[["self"],["usize"]],[["tryreserveerror"],["result",["tryreserveerror"]]]]],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It…",104,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of the map with a lower limit. It…",104,[[["self"],["usize"]]]],[11,"entry","","Gets the given key's corresponding entry in the map for…",104,[[["self"],["k"]],["entry"]]],[11,"get","","Returns a reference to the value corresponding to the key.",104,[[["self"],["q"]],[["option"],["v"]]]],[11,"get_key_value","","Returns the key-value pair corresponding to the supplied…",104,[[["self"],["q"]],["option"]]],[11,"contains_key","","Returns `true` if the map contains a value for the…",104,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to…",104,[[["self"],["q"]],[["option"],["v"]]]],[11,"insert","","Inserts a key-value pair into the map.",104,[[["self"],["k"],["v"]],["option"]]],[11,"remove","","Removes a key from the map, returning the value at the key…",104,[[["self"],["q"]],["option"]]],[11,"remove_entry","","Removes a key from the map, returning the stored key and…",104,[[["self"],["q"]],["option"]]],[11,"retain","","Retains only the elements specified by the predicate.",104,[[["self"],["f"]]]],[11,"raw_entry_mut","","Creates a raw entry builder for the HashMap.",104,[[["self"]],["rawentrybuildermut"]]],[11,"raw_entry","","Creates a raw immutable entry builder for the HashMap.",104,[[["self"]],["rawentrybuilder"]]],[11,"new","","Creates an empty `HashSet`.",105,[[],[["randomstate"],["hashset",["randomstate"]]]]],[11,"with_capacity","","Creates an empty `HashSet` with the specified capacity.",105,[[["usize"]],[["randomstate"],["hashset",["randomstate"]]]]],[11,"capacity","","Returns the number of elements the set can hold without…",105,[[["self"]],["usize"]]],[11,"iter","","An iterator visiting all elements in arbitrary order. The…",105,[[["self"]],["iter"]]],[11,"len","","Returns the number of elements in the set.",105,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no elements.",105,[[["self"]],["bool"]]],[11,"drain","","Clears the set, returning all elements in an iterator.",105,[[["self"]],["drain"]]],[11,"clear","","Clears the set, removing all values.",105,[[["self"]]]],[11,"with_hasher","","Creates a new empty hash set which will use the given…",105,[[["s"]],["hashset"]]],[11,"with_capacity_and_hasher","","Creates an empty `HashSet` with the specified capacity,…",105,[[["s"],["usize"]],["hashset"]]],[11,"hasher","","Returns a reference to the set's [`BuildHasher`].",105,[[["self"]],["s"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",105,[[["self"],["usize"]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",105,[[["self"],["usize"]],[["tryreserveerror"],["result",["tryreserveerror"]]]]],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It…",105,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of the set with a lower limit. It…",105,[[["self"],["usize"]]]],[11,"difference","","Visits the values representing the difference, i.e., the…",105,[[["hashset"],["self"]],["difference"]]],[11,"symmetric_difference","","Visits the values representing the symmetric difference,…",105,[[["hashset"],["self"]],["symmetricdifference"]]],[11,"intersection","","Visits the values representing the intersection, i.e., the…",105,[[["hashset"],["self"]],["intersection"]]],[11,"union","","Visits the values representing the union, i.e., all the…",105,[[["hashset"],["self"]],["union"]]],[11,"contains","","Returns `true` if the set contains a value.",105,[[["self"],["q"]],["bool"]]],[11,"get","","Returns a reference to the value in the set, if any, that…",105,[[["self"],["q"]],[["option"],["t"]]]],[11,"get_or_insert","","Inserts the given `value` into the set if it is not…",105,[[["self"],["t"]],["t"]]],[11,"get_or_insert_owned","","Inserts an owned copy of the given `value` into the set if…",105,[[["self"],["q"]],["t"]]],[11,"get_or_insert_with","","Inserts a value computed from `f` into the set if the…",105,[[["self"],["f"],["q"]],["t"]]],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with…",105,[[["hashset"],["self"]],["bool"]]],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e.,…",105,[[["hashset"],["self"]],["bool"]]],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e.,…",105,[[["hashset"],["self"]],["bool"]]],[11,"insert","","Adds a value to the set.",105,[[["self"],["t"]],["bool"]]],[11,"replace","","Adds a value to the set, replacing the existing value, if…",105,[[["self"],["t"]],["option"]]],[11,"remove","","Removes a value from the set. Returns whether the value…",105,[[["self"],["q"]],["bool"]]],[11,"take","","Removes and returns the value in the set, if any, that is…",105,[[["self"],["q"]],["option"]]],[11,"retain","","Retains only the elements specified by the predicate.",105,[[["self"],["f"]]]],[0,"hash_map","","A hash map implemented with quadratic probing and SIMD…",null,null],[3,"HashMap","std::collections::hash_map","A hash map implemented with quadratic probing and SIMD…",null,null],[3,"Iter","","An iterator over the entries of a `HashMap`.",null,null],[3,"IterMut","","A mutable iterator over the entries of a `HashMap`.",null,null],[3,"IntoIter","","An owning iterator over the entries of a `HashMap`.",null,null],[3,"Keys","","An iterator over the keys of a `HashMap`.",null,null],[3,"Values","","An iterator over the values of a `HashMap`.",null,null],[3,"Drain","","A draining iterator over the entries of a `HashMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a `HashMap`.",null,null],[3,"RawEntryBuilderMut","","A builder for computing where in a HashMap a key-value…",null,null],[3,"RawOccupiedEntryMut","","A view into an occupied entry in a `HashMap`. It is part…",null,null],[3,"RawVacantEntryMut","","A view into a vacant entry in a `HashMap`. It is part of…",null,null],[3,"RawEntryBuilder","","A builder for computing where in a HashMap a key-value…",null,null],[3,"OccupiedEntry","","A view into an occupied entry in a `HashMap`. It is part…",null,null],[3,"VacantEntry","","A view into a vacant entry in a `HashMap`. It is part of…",null,null],[3,"RandomState","","`RandomState` is the default state for [`HashMap`] types.",null,null],[3,"DefaultHasher","","The default [`Hasher`] used by [`RandomState`].",null,null],[4,"RawEntryMut","","A view into a single entry in a map, which may either be…",null,null],[13,"Occupied","","An occupied entry.",106,null],[13,"Vacant","","A vacant entry.",106,null],[4,"Entry","","A view into a single entry in a map, which may either be…",null,null],[13,"Occupied","","An occupied entry.",107,null],[13,"Vacant","","A vacant entry.",107,null],[0,"hash_set","std::collections","A hash set implemented as a `HashMap` where the value is…",null,null],[3,"HashSet","std::collections::hash_set","A hash set implemented as a `HashMap` where the value is…",null,null],[3,"Iter","","An iterator over the items of a `HashSet`.",null,null],[3,"IntoIter","","An owning iterator over the items of a `HashSet`.",null,null],[3,"Drain","","A draining iterator over the items of a `HashSet`.",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of…",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of…",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric…",null,null],[3,"Union","","A lazy iterator producing elements in the union of…",null,null],[0,"env","std","Inspection and manipulation of the process's environment.",null,null],[3,"Vars","std::env","An iterator over a snapshot of the environment variables…",null,null],[3,"VarsOs","","An iterator over a snapshot of the environment variables…",null,null],[3,"SplitPaths","","An iterator that splits an environment variable into paths…",null,null],[3,"JoinPathsError","","The error type for operations on the `PATH` variable.…",null,null],[3,"Args","","An iterator over the arguments of a process, yielding a…",null,null],[3,"ArgsOs","","An iterator over the arguments of a process, yielding an…",null,null],[4,"VarError","","The error type for operations interacting with environment…",null,null],[13,"NotPresent","","The specified environment variable was not present in the…",108,null],[13,"NotUnicode","","The specified environment variable was found, but it did…",108,null],[5,"current_dir","","Returns the current working directory as a [`PathBuf`].",null,[[],[["result",["pathbuf"]],["pathbuf"]]]],[5,"set_current_dir","","Changes the current working directory to the specified path.",null,[[["path"],["asref",["path"]]],["result"]]],[5,"vars","","Returns an iterator of (variable, value) pairs of strings,…",null,[[],["vars"]]],[5,"vars_os","","Returns an iterator of (variable, value) pairs of OS…",null,[[],["varsos"]]],[5,"var","","Fetches the environment variable `key` from the current…",null,[[["osstr"],["asref",["osstr"]]],[["string"],["varerror"],["result",["string","varerror"]]]]],[5,"var_os","","Fetches the environment variable `key` from the current…",null,[[["osstr"],["asref",["osstr"]]],[["option",["osstring"]],["osstring"]]]],[5,"set_var","","Sets the environment variable `k` to the value `v` for the…",null,[[["osstr"],["asref",["osstr"]]]]],[5,"remove_var","","Removes an environment variable from the environment of…",null,[[["osstr"],["asref",["osstr"]]]]],[5,"split_paths","","Parses input according to platform conventions for the…",null,[[["t"]],["splitpaths"]]],[5,"join_paths","","Joins a collection of [`Path`]s appropriately for the…",null,[[["i"]],[["osstring"],["joinpathserror"],["result",["osstring","joinpathserror"]]]]],[5,"home_dir","","Returns the path of the current user's home directory if…",null,[[],[["option",["pathbuf"]],["pathbuf"]]]],[5,"temp_dir","","Returns the path of a temporary directory.",null,[[],["pathbuf"]]],[5,"current_exe","","Returns the full filesystem path of the current running…",null,[[],[["result",["pathbuf"]],["pathbuf"]]]],[5,"args","","Returns the arguments which this program was started with…",null,[[],["args"]]],[5,"args_os","","Returns the arguments which this program was started with…",null,[[],["argsos"]]],[0,"consts","","Constants associated with the current target",null,null],[17,"ARCH","std::env::consts","A string describing the architecture of the CPU that is…",null,null],[17,"FAMILY","","The family of the operating system. Example value is `unix`.",null,null],[17,"OS","","A string describing the specific operating system in use.…",null,null],[17,"DLL_PREFIX","","Specifies the filename prefix used for shared libraries on…",null,null],[17,"DLL_SUFFIX","","Specifies the filename suffix used for shared libraries on…",null,null],[17,"DLL_EXTENSION","","Specifies the file extension used for shared libraries on…",null,null],[17,"EXE_SUFFIX","","Specifies the filename suffix used for executable binaries…",null,null],[17,"EXE_EXTENSION","","Specifies the file extension, if any, used for executable…",null,null],[0,"error","std","Traits for working with Errors.",null,null],[3,"Chain","std::error","An iterator over an [`Error`] and its sources.",null,null],[8,"Error","","`Error` is a trait representing the basic expectations for…",null,null],[11,"source","","The lower-level source of this error, if any.",109,[[["self"]],[["option",["error"]],["error"]]]],[11,"backtrace","","Returns a stack backtrace, if available, of where this…",109,[[["self"]],[["option",["backtrace"]],["backtrace"]]]],[11,"description","","`if let Err(e) = \"xc\".parse::<u32>() { // Print `e`…",109,[[["self"]],["str"]]],[11,"cause","","",109,[[["self"]],[["error"],["option",["error"]]]]],[11,"is","","Returns `true` if the boxed type is the same as `T`",109,[[["self"]],["bool"]]],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type…",109,[[["self"]],[["option"],["t"]]]],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is…",109,[[["self"]],[["option"],["t"]]]],[11,"is","","Forwards to the method defined on the type `dyn Error`.",109,[[["self"]],["bool"]]],[11,"downcast_ref","","Forwards to the method defined on the type `dyn Error`.",109,[[["self"]],[["option"],["t"]]]],[11,"downcast_mut","","Forwards to the method defined on the type `dyn Error`.",109,[[["self"]],[["option"],["t"]]]],[11,"is","","Forwards to the method defined on the type `dyn Error`.",109,[[["self"]],["bool"]]],[11,"downcast_ref","","Forwards to the method defined on the type `dyn Error`.",109,[[["self"]],[["option"],["t"]]]],[11,"downcast_mut","","Forwards to the method defined on the type `dyn Error`.",109,[[["self"]],[["option"],["t"]]]],[11,"downcast","","Attempts to downcast the box to a concrete type.",109,[[["box"]],[["box"],["box",["error"]],["result",["box","box"]]]]],[11,"chain","","Returns an iterator starting with the current error and…",109,[[["self"]],["chain"]]],[11,"downcast","","Attempts to downcast the box to a concrete type.",109,[[["box"]],[["result",["box","box"]],["box"],["box",["error"]]]]],[11,"downcast","","Attempts to downcast the box to a concrete type.",109,[[["box"]],[["box"],["box"],["result",["box","box"]]]]],[0,"ffi","std","Utilities related to FFI bindings.",null,null],[4,"c_void","std::ffi","Equivalent to C's `void` type when used as a [pointer].",null,null],[3,"VaList","","A wrapper for a `va_list`",null,null],[3,"VaListImpl","","x86_64 ABI implementation of a `va_list`.",null,null],[3,"FromBytesWithNulError","","An error indicating that a nul byte was not in the…",null,null],[3,"CStr","","Representation of a borrowed C string.",null,null],[3,"CString","","A type representing an owned, C-compatible, nul-terminated…",null,null],[3,"IntoStringError","","An error indicating invalid UTF-8 when converting a…",null,null],[3,"NulError","","An error indicating that an interior nul byte was found.",null,null],[3,"OsStr","","Borrowed reference to an OS string (see [`OsString`]).",null,null],[3,"OsString","","A type that can represent owned, mutable platform-native…",null,null],[11,"new","","Creates a new C-compatible string from a container of bytes.",110,[[["into",["vec"]],["vec",["u8"]]],[["result",["cstring","nulerror"]],["cstring"],["nulerror"]]]],[11,"from_vec_unchecked","","Creates a C-compatible string by consuming a byte vector,…",110,[[["vec",["u8"]],["u8"]],["cstring"]]],[11,"from_raw","","Retakes ownership of a `CString` that was transferred to C…",110,[[],["cstring"]]],[11,"into_raw","","Consumes the `CString` and transfers ownership of the…",110,[[]]],[11,"into_string","","Converts the `CString` into a [`String`] if it contains…",110,[[],[["string"],["intostringerror"],["result",["string","intostringerror"]]]]],[11,"into_bytes","","Consumes the `CString` and returns the underlying byte…",110,[[],[["vec",["u8"]],["u8"]]]],[11,"into_bytes_with_nul","","Equivalent to the [`into_bytes`] function except that the…",110,[[],[["vec",["u8"]],["u8"]]]],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",110,[[["self"]]]],[11,"as_bytes_with_nul","","Equivalent to the [`as_bytes`] function except that the…",110,[[["self"]]]],[11,"as_c_str","","Extracts a [`CStr`] slice containing the entire string.",110,[[["self"]],["cstr"]]],[11,"into_boxed_c_str","","Converts this `CString` into a boxed [`CStr`].",110,[[],[["box",["cstr"]],["cstr"]]]],[11,"nul_position","","Returns the position of the nul byte in the slice that…",111,[[["self"]],["usize"]]],[11,"into_vec","","Consumes this error, returning the underlying vector of…",111,[[],[["vec",["u8"]],["u8"]]]],[11,"into_cstring","","Consumes this error, returning original [`CString`] which…",112,[[],["cstring"]]],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of…",112,[[["self"]],["utf8error"]]],[11,"from_ptr","","Wraps a raw C string with a safe C string wrapper.",113,[[],["cstr"]]],[11,"from_bytes_with_nul","","Creates a C string wrapper from a byte slice.",113,[[],[["cstr"],["result",["cstr","frombyteswithnulerror"]],["frombyteswithnulerror"]]]],[11,"from_bytes_with_nul_unchecked","","Unsafely creates a C string wrapper from a byte slice.",113,[[],["cstr"]]],[11,"as_ptr","","Returns the inner pointer to this C string.",113,[[["self"]]]],[11,"to_bytes","","Converts this C string to a byte slice.",113,[[["self"]]]],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the…",113,[[["self"]]]],[11,"to_str","","Yields a [`&str`] slice if the `CStr` contains valid UTF-8.",113,[[["self"]],[["str"],["utf8error"],["result",["str","utf8error"]]]]],[11,"to_string_lossy","","Converts a `CStr` into a [`Cow`]`<`[`str`]`>`.",113,[[["self"]],[["cow",["str"]],["str"]]]],[11,"into_c_string","","Converts a [`Box`]`<CStr>` into a [`CString`] without…",113,[[["box",["cstr"]],["cstr"]],["cstring"]]],[11,"new","","Constructs a new empty `OsString`.",114,[[],["osstring"]]],[11,"as_os_str","","Converts to an [`OsStr`] slice.",114,[[["self"]],["osstr"]]],[11,"into_string","","Converts the `OsString` into a [`String`] if it contains…",114,[[],[["osstring"],["result",["string","osstring"]],["string"]]]],[11,"push","","Extends the string with the given [`&OsStr`] slice.",114,[[["osstr"],["self"],["asref",["osstr"]]]]],[11,"with_capacity","","Creates a new `OsString` with the given capacity.",114,[[["usize"]],["osstring"]]],[11,"clear","","Truncates the `OsString` to zero length.",114,[[["self"]]]],[11,"capacity","","Returns the capacity this `OsString` can hold without…",114,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more capacity…",114,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional`…",114,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the `OsString` to match its length.",114,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of the `OsString` with a lower bound.",114,[[["self"],["usize"]]]],[11,"into_boxed_os_str","","Converts this `OsString` into a boxed [`OsStr`].",114,[[],[["osstr"],["box",["osstr"]]]]],[11,"new","","Coerces into an `OsStr` slice.",115,[[["s"]],["osstr"]]],[11,"to_str","","Yields a [`&str`] slice if the `OsStr` is valid Unicode.",115,[[["self"]],[["str"],["option",["str"]]]]],[11,"to_string_lossy","","Converts an `OsStr` to a [`Cow`]`<`[`str`]`>`.",115,[[["self"]],[["cow",["str"]],["str"]]]],[11,"to_os_string","","Copies the slice into an owned [`OsString`].",115,[[["self"]],["osstring"]]],[11,"is_empty","","Checks whether the `OsStr` is empty.",115,[[["self"]],["bool"]]],[11,"len","","Returns the length of this `OsStr`.",115,[[["self"]],["usize"]]],[11,"into_os_string","","Converts a [`Box`]`<OsStr>` into an [`OsString`] without…",115,[[["osstr"],["box",["osstr"]]],["osstring"]]],[0,"fs","std","Filesystem manipulation operations.",null,null],[3,"File","std::fs","A reference to an open file on the filesystem.",null,null],[3,"Metadata","","Metadata information about a file.",null,null],[3,"ReadDir","","Iterator over the entries in a directory.",null,null],[3,"DirEntry","","Entries returned by the [`ReadDir`] iterator.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a…",null,null],[3,"Permissions","","Representation of the various permissions on a file.",null,null],[3,"FileType","","A structure representing a type of file with accessors for…",null,null],[3,"DirBuilder","","A builder used to create directories in various manners.",null,null],[5,"read","","Read the entire contents of a file into a bytes vector.",null,[[["path"],["asref",["path"]]],[["result",["vec"]],["vec",["u8"]]]]],[5,"read_to_string","","Read the entire contents of a file into a string.",null,[[["path"],["asref",["path"]]],[["result",["string"]],["string"]]]],[5,"write","","Write a slice as the entire contents of a file.",null,[[["path"],["asref",["path"]],["asref"]],["result"]]],[5,"remove_file","","Removes a file from the filesystem.",null,[[["path"],["asref",["path"]]],["result"]]],[5,"metadata","","Given a path, query the file system to get information…",null,[[["path"],["asref",["path"]]],[["result",["metadata"]],["metadata"]]]],[5,"symlink_metadata","","Query the metadata about a file without following symlinks.",null,[[["path"],["asref",["path"]]],[["result",["metadata"]],["metadata"]]]],[5,"rename","","Rename a file or directory to a new name, replacing the…",null,[[["path"],["asref",["path"]]],["result"]]],[5,"copy","","Copies the contents of one file to another. This function…",null,[[["path"],["asref",["path"]]],[["u64"],["result",["u64"]]]]],[5,"hard_link","","Creates a new hard link on the filesystem.",null,[[["path"],["asref",["path"]]],["result"]]],[5,"soft_link","","Creates a new symbolic link on the filesystem.",null,[[["path"],["asref",["path"]]],["result"]]],[5,"read_link","","Reads a symbolic link, returning the file that the link…",null,[[["path"],["asref",["path"]]],[["result",["pathbuf"]],["pathbuf"]]]],[5,"canonicalize","","Returns the canonical, absolute form of a path with all…",null,[[["path"],["asref",["path"]]],[["result",["pathbuf"]],["pathbuf"]]]],[5,"create_dir","","Creates a new, empty directory at the provided path",null,[[["path"],["asref",["path"]]],["result"]]],[5,"create_dir_all","","Recursively create a directory and all of its parent…",null,[[["path"],["asref",["path"]]],["result"]]],[5,"remove_dir","","Removes an existing, empty directory.",null,[[["path"],["asref",["path"]]],["result"]]],[5,"remove_dir_all","","Removes a directory at this path, after removing all its…",null,[[["path"],["asref",["path"]]],["result"]]],[5,"read_dir","","Returns an iterator over the entries within a directory.",null,[[["path"],["asref",["path"]]],[["readdir"],["result",["readdir"]]]]],[5,"set_permissions","","Changes the permissions found on a file or a directory.",null,[[["path"],["asref",["path"]],["permissions"]],["result"]]],[11,"open","","Attempts to open a file in read-only mode.",116,[[["path"],["asref",["path"]]],[["result",["file"]],["file"]]]],[11,"create","","Opens a file in write-only mode.",116,[[["path"],["asref",["path"]]],[["result",["file"]],["file"]]]],[11,"with_options","","Returns a new OpenOptions object.",116,[[],["openoptions"]]],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",116,[[["self"]],["result"]]],[11,"sync_data","","This function is similar to [`sync_all`], except that it…",116,[[["self"]],["result"]]],[11,"set_len","","Truncates or extends the underlying file, updating the…",116,[[["self"],["u64"]],["result"]]],[11,"metadata","","Queries metadata about the underlying file.",116,[[["self"]],[["result",["metadata"]],["metadata"]]]],[11,"try_clone","","Creates a new `File` instance that shares the same…",116,[[["self"]],[["result",["file"]],["file"]]]],[11,"set_permissions","","Changes the permissions on the underlying file.",116,[[["permissions"],["self"]],["result"]]],[11,"new","","Creates a blank new set of options ready for configuration.",117,[[],["openoptions"]]],[11,"read","","Sets the option for read access.",117,[[["self"],["bool"]],["openoptions"]]],[11,"write","","Sets the option for write access.",117,[[["self"],["bool"]],["openoptions"]]],[11,"append","","Sets the option for the append mode.",117,[[["self"],["bool"]],["openoptions"]]],[11,"truncate","","Sets the option for truncating a previous file.",117,[[["self"],["bool"]],["openoptions"]]],[11,"create","","Sets the option for creating a new file.",117,[[["self"],["bool"]],["openoptions"]]],[11,"create_new","","Sets the option to always create a new file.",117,[[["self"],["bool"]],["openoptions"]]],[11,"open","","Opens a file at `path` with the options specified by `self`.",117,[[["path"],["asref",["path"]],["self"]],[["result",["file"]],["file"]]]],[11,"file_type","","Returns the file type for this metadata.",118,[[["self"]],["filetype"]]],[11,"is_dir","","Returns `true` if this metadata is for a directory. The…",118,[[["self"]],["bool"]]],[11,"is_file","","Returns `true` if this metadata is for a regular file. The…",118,[[["self"]],["bool"]]],[11,"len","","Returns the size of the file, in bytes, this metadata is…",118,[[["self"]],["u64"]]],[11,"permissions","","Returns the permissions of the file this metadata is for.",118,[[["self"]],["permissions"]]],[11,"modified","","Returns the last modification time listed in this metadata.",118,[[["self"]],[["result",["systemtime"]],["systemtime"]]]],[11,"accessed","","Returns the last access time of this metadata.",118,[[["self"]],[["result",["systemtime"]],["systemtime"]]]],[11,"created","","Returns the creation time listed in this metadata.",118,[[["self"]],[["result",["systemtime"]],["systemtime"]]]],[11,"readonly","","Returns `true` if these permissions describe a readonly…",119,[[["self"]],["bool"]]],[11,"set_readonly","","Modifies the readonly flag for this set of permissions. If…",119,[[["self"],["bool"]]]],[11,"is_dir","","Tests whether this file type represents a directory. The…",120,[[["self"]],["bool"]]],[11,"is_file","","Tests whether this file type represents a regular file.…",120,[[["self"]],["bool"]]],[11,"is_symlink","","Tests whether this file type represents a symbolic link.…",120,[[["self"]],["bool"]]],[11,"path","","Returns the full path to the file that this entry…",121,[[["self"]],["pathbuf"]]],[11,"metadata","","Returns the metadata for the file that this entry points at.",121,[[["self"]],[["result",["metadata"]],["metadata"]]]],[11,"file_type","","Returns the file type for the file that this entry points…",121,[[["self"]],[["filetype"],["result",["filetype"]]]]],[11,"file_name","","Returns the bare file name of this directory entry without…",121,[[["self"]],["osstring"]]],[11,"new","","Creates a new set of options with default mode/security…",122,[[],["dirbuilder"]]],[11,"recursive","","Indicates that directories should be created recursively,…",122,[[["self"],["bool"]],["self"]]],[11,"create","","Creates the specified directory with the options…",122,[[["path"],["asref",["path"]],["self"]],["result"]]],[0,"io","std","Traits, helpers, and type definitions for core I/O…",null,null],[3,"IntoInnerError","std::io","An error returned by `into_inner` which combines an error…",null,null],[3,"BufReader","","The `BufReader<R>` struct adds buffering to any reader.",null,null],[3,"BufWriter","","Wraps a writer and buffers its output.",null,null],[3,"LineWriter","","Wraps a writer and buffers output to it, flushing whenever…",null,null],[3,"Cursor","","A `Cursor` wraps an in-memory buffer and provides it with…",null,null],[3,"Error","","The error type for I/O operations of the [`Read`],…",null,null],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[3,"Stdout","","A handle to the global standard output stream of the…",null,null],[3,"StderrLock","","A locked reference to the `Stderr` handle.",null,null],[3,"StdinLock","","A locked reference to the `Stdin` handle.",null,null],[3,"StdoutLock","","A locked reference to the `Stdout` handle.",null,null],[3,"Empty","","A reader which is always at EOF.",null,null],[3,"Repeat","","A reader which yields one byte over and over and over and…",null,null],[3,"Sink","","A writer which will move data into the void.",null,null],[3,"IoSliceMut","","A buffer type used with `Read::read_vectored`.",null,null],[3,"IoSlice","","A buffer type used with `Write::write_vectored`.",null,null],[3,"Initializer","","A type used to conditionally initialize buffers passed to…",null,null],[3,"Chain","","Adaptor to chain together two readers.",null,null],[3,"Take","","Reader adaptor which limits the bytes read from an…",null,null],[3,"Bytes","","An iterator over `u8` values of a reader.",null,null],[3,"Split","","An iterator over the contents of an instance of `BufRead`…",null,null],[3,"Lines","","An iterator over the lines of an instance of `BufRead`.",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",123,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",123,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",123,null],[13,"ConnectionReset","","The connection was reset by the remote server.",123,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote…",123,null],[13,"NotConnected","","The network operation failed because it was not connected…",123,null],[13,"AddrInUse","","A socket address could not be bound because the address is…",123,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested…",123,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",123,null],[13,"AlreadyExists","","An entity already exists, often a file.",123,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking…",123,null],[13,"InvalidInput","","A parameter was incorrect.",123,null],[13,"InvalidData","","Data not valid for the operation were encountered.",123,null],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be…",123,null],[13,"WriteZero","","An error returned when an operation could not be completed…",123,null],[13,"Interrupted","","This operation was interrupted.",123,null],[13,"Other","","Any I/O error not part of this list.",123,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed…",123,null],[4,"SeekFrom","","Enumeration of possible methods to seek within an I/O…",null,null],[13,"Start","","Sets the offset to the provided number of bytes.",124,null],[13,"End","","Sets the offset to the size of this object plus the…",124,null],[13,"Current","","Sets the offset to the current position plus the specified…",124,null],[5,"stderr","","Constructs a new handle to the standard error of the…",null,[[],["stderr"]]],[5,"stdin","","Constructs a new handle to the standard input of the…",null,[[],["stdin"]]],[5,"stdout","","Constructs a new handle to the standard output of the…",null,[[],["stdout"]]],[5,"copy","","Copies the entire contents of a reader into a writer.",null,[[["w"],["r"]],[["u64"],["result",["u64"]]]]],[5,"empty","","Constructs a new handle to an empty reader.",null,[[],["empty"]]],[5,"repeat","","Creates an instance of a reader that infinitely repeats…",null,[[["u8"]],["repeat"]]],[5,"sink","","Creates an instance of a writer which will successfully…",null,[[],["sink"]]],[11,"new","","Creates a new `BufReader<R>` with a default buffer…",125,[[["r"]],["bufreader"]]],[11,"with_capacity","","Creates a new `BufReader<R>` with the specified buffer…",125,[[["usize"],["r"]],["bufreader"]]],[11,"get_ref","","Gets a reference to the underlying reader.",125,[[["self"]],["r"]]],[11,"get_mut","","Gets a mutable reference to the underlying reader.",125,[[["self"]],["r"]]],[11,"buffer","","Returns a reference to the internally buffered data.",125,[[["self"]]]],[11,"into_inner","","Unwraps this `BufReader<R>`, returning the underlying…",125,[[],["r"]]],[11,"seek_relative","","Seeks relative to the current position. If the new…",125,[[["i64"],["self"]],["result"]]],[11,"new","","Creates a new `BufWriter<W>` with a default buffer…",126,[[["w"]],["bufwriter"]]],[11,"with_capacity","","Creates a new `BufWriter<W>` with the specified buffer…",126,[[["w"],["usize"]],["bufwriter"]]],[11,"get_ref","","Gets a reference to the underlying writer.",126,[[["self"]],["w"]]],[11,"get_mut","","Gets a mutable reference to the underlying writer.",126,[[["self"]],["w"]]],[11,"buffer","","Returns a reference to the internally buffered data.",126,[[["self"]]]],[11,"into_inner","","Unwraps this `BufWriter<W>`, returning the underlying…",126,[[],[["result",["intoinnererror"]],["intoinnererror",["bufwriter"]]]]],[11,"error","","Returns the error which caused the call to `into_inner()`…",127,[[["self"]],["error"]]],[11,"into_inner","","Returns the buffered writer instance which generated the…",127,[[],["w"]]],[11,"new","","Creates a new `LineWriter`.",128,[[["w"]],["linewriter"]]],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for…",128,[[["w"],["usize"]],["linewriter"]]],[11,"get_ref","","Gets a reference to the underlying writer.",128,[[["self"]],["w"]]],[11,"get_mut","","Gets a mutable reference to the underlying writer.",128,[[["self"]],["w"]]],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",128,[[],[["intoinnererror",["linewriter"]],["result",["intoinnererror"]]]]],[11,"new","","Creates a new cursor wrapping the provided underlying…",129,[[["t"]],["cursor"]]],[11,"into_inner","","Consumes this cursor, returning the underlying value.",129,[[],["t"]]],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",129,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying value in this…",129,[[["self"]],["t"]]],[11,"position","","Returns the current position of this cursor.",129,[[["self"]],["u64"]]],[11,"set_position","","Sets the position of this cursor.",129,[[["self"],["u64"]]]],[11,"new","","Creates a new I/O error from a known kind of error as well…",130,[[["errorkind"],["e"]],["error"]]],[11,"last_os_error","","Returns an error representing the last OS error which…",130,[[],["error"]]],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS…",130,[[["i32"]],["error"]]],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",130,[[["self"]],[["option",["i32"]],["i32"]]]],[11,"get_ref","","Returns a reference to the inner error wrapped by this…",130,[[["self"]],[["option",["error"]],["error"]]]],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by…",130,[[["self"]],[["option",["error"]],["error"]]]],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",130,[[],[["option",["box"]],["box",["error"]]]]],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",130,[[["self"]],["errorkind"]]],[0,"prelude","","The I/O Prelude",null,null],[11,"lock","","Locks this handle to the standard input stream, returning…",131,[[["self"]],["stdinlock"]]],[11,"read_line","","Locks this handle and reads a line of input into the…",131,[[["string"],["self"]],[["result",["usize"]],["usize"]]]],[11,"lock","","Locks this handle to the standard output stream, returning…",132,[[["self"]],["stdoutlock"]]],[11,"lock","","Locks this handle to the standard error stream, returning…",133,[[["self"]],["stderrlock"]]],[6,"Result","","A specialized `Result` type for I/O operations.",null,null],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified…",134,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"read_vectored","","Like `read`, except that it reads into a slice of buffers.",134,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"initializer","","Determines if this `Read`er can work with buffers of…",134,[[["self"]],["initializer"]]],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into…",134,[[["self"],["vec"]],[["result",["usize"]],["usize"]]]],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to…",134,[[["string"],["self"]],[["result",["usize"]],["usize"]]]],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",134,[[["self"]],["result"]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of…",134,[[["self"]],["self"]]],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over…",134,[[],["bytes"]]],[11,"chain","","Creates an adaptor which will chain this stream with…",134,[[["read"]],[["read"],["chain"]]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes…",134,[[["u64"]],["take"]]],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this writer, returning how many bytes…",135,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_vectored","","Like `write`, except that it writes from a slice of buffers.",135,[[["self"]],[["result",["usize"]],["usize"]]]],[10,"flush","","Flush this output stream, ensuring that all intermediately…",135,[[["self"]],["result"]]],[11,"write_all","","Attempts to write an entire buffer into this writer.",135,[[["self"]],["result"]]],[11,"write_fmt","","Writes a formatted string into this writer, returning any…",135,[[["self"],["arguments"]],["result"]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of…",135,[[["self"]],["self"]]],[8,"Seek","","The `Seek` trait provides a cursor which can be moved…",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",136,[[["self"],["seekfrom"]],[["u64"],["result",["u64"]]]]],[11,"stream_len","","Returns the length of this stream (in bytes).",136,[[["self"]],[["u64"],["result",["u64"]]]]],[11,"stream_position","","Returns the current seek position from the start of the…",136,[[["self"]],[["u64"],["result",["u64"]]]]],[8,"BufRead","","A `BufRead` is a type of `Read`er which has an internal…",null,null],[10,"fill_buf","","Returns the contents of the internal buffer, filling it…",137,[[["self"]],["result"]]],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from…",137,[[["self"],["usize"]]]],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` or…",137,[[["vec"],["self"],["u8"]],[["result",["usize"]],["usize"]]]],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached,…",137,[[["string"],["self"]],[["result",["usize"]],["usize"]]]],[11,"split","","Returns an iterator over the contents of this reader split…",137,[[["u8"]],["split"]]],[11,"lines","","Returns an iterator over the lines of this reader.",137,[[],["lines"]]],[11,"new","","Creates a new `IoSliceMut` wrapping a byte slice.",138,[[],["ioslicemut"]]],[11,"advance","","Advance the internal cursor of the slice.",138,[[["usize"]]]],[11,"new","","Creates a new `IoSlice` wrapping a byte slice.",139,[[],["ioslice"]]],[11,"advance","","Advance the internal cursor of the slice.",139,[[["usize"]]]],[11,"zeroing","","Returns a new `Initializer` which will zero out buffers.",140,[[],["initializer"]]],[11,"nop","","Returns a new `Initializer` which will not zero out buffers.",140,[[],["initializer"]]],[11,"should_initialize","","Indicates if a buffer should be initialized.",140,[[["self"]],["bool"]]],[11,"initialize","","Initializes a buffer if necessary.",140,[[["self"]]]],[11,"into_inner","","Consumes the `Chain`, returning the wrapped readers.",141,[[]]],[11,"get_ref","","Gets references to the underlying readers in this `Chain`.",141,[[["self"]]]],[11,"get_mut","","Gets mutable references to the underlying readers in this…",141,[[["self"]]]],[11,"limit","","Returns the number of bytes that can be read before this…",142,[[["self"]],["u64"]]],[11,"set_limit","","Sets the number of bytes that can be read before this…",142,[[["self"],["u64"]]]],[11,"into_inner","","Consumes the `Take`, returning the wrapped reader.",142,[[],["t"]]],[11,"get_ref","","Gets a reference to the underlying reader.",142,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying reader.",142,[[["self"]],["t"]]],[0,"net","std","Networking primitives for TCP/UDP communication.",null,null],[3,"SocketAddrV4","std::net","An IPv4 socket address.",null,null],[3,"SocketAddrV6","","An IPv6 socket address.",null,null],[3,"Ipv4Addr","","An IPv4 address.",null,null],[3,"Ipv6Addr","","An IPv6 address.",null,null],[3,"AddrParseError","","An error which can be returned when parsing an IP address…",null,null],[3,"Incoming","","An iterator that infinitely [`accept`]s connections on a…",null,null],[3,"TcpListener","","A TCP socket server, listening for connections.",null,null],[3,"TcpStream","","A TCP stream between a local and a remote socket.",null,null],[3,"UdpSocket","","A UDP socket.",null,null],[4,"SocketAddr","","An internet socket address, either IPv4 or IPv6.",null,null],[13,"V4","","An IPv4 socket address.",143,null],[13,"V6","","An IPv6 socket address.",143,null],[4,"IpAddr","","An IP address, either IPv4 or IPv6.",null,null],[13,"V4","","An IPv4 address.",144,null],[13,"V6","","An IPv6 address.",144,null],[4,"Ipv6MulticastScope","","",null,null],[13,"InterfaceLocal","","",145,null],[13,"LinkLocal","","",145,null],[13,"RealmLocal","","",145,null],[13,"AdminLocal","","",145,null],[13,"SiteLocal","","",145,null],[13,"OrganizationLocal","","",145,null],[13,"Global","","",145,null],[4,"Shutdown","","Possible values which can be passed to the [`shutdown`]…",null,null],[13,"Read","","The reading portion of the [`TcpStream`] should be shut…",146,null],[13,"Write","","The writing portion of the [`TcpStream`] should be shut…",146,null],[13,"Both","","Both the reading and the writing portions of the…",146,null],[11,"new","","Creates a new socket address from an [IP address] and a…",143,[[["u16"],["ipaddr"]],["socketaddr"]]],[11,"ip","","Returns the IP address associated with this socket address.",143,[[["self"]],["ipaddr"]]],[11,"set_ip","","Changes the IP address associated with this socket address.",143,[[["self"],["ipaddr"]]]],[11,"port","","Returns the port number associated with this socket address.",143,[[["self"]],["u16"]]],[11,"set_port","","Changes the port number associated with this socket address.",143,[[["u16"],["self"]]]],[11,"is_ipv4","","Returns [`true`] if the [IP address] in this `SocketAddr`…",143,[[["self"]],["bool"]]],[11,"is_ipv6","","Returns [`true`] if the [IP address] in this `SocketAddr`…",143,[[["self"]],["bool"]]],[11,"new","","Creates a new socket address from an [IPv4 address] and a…",147,[[["u16"],["ipv4addr"]],["socketaddrv4"]]],[11,"ip","","Returns the IP address associated with this socket address.",147,[[["self"]],["ipv4addr"]]],[11,"set_ip","","Changes the IP address associated with this socket address.",147,[[["self"],["ipv4addr"]]]],[11,"port","","Returns the port number associated with this socket address.",147,[[["self"]],["u16"]]],[11,"set_port","","Changes the port number associated with this socket address.",147,[[["u16"],["self"]]]],[11,"new","","Creates a new socket address from an [IPv6 address], a…",148,[[["ipv6addr"],["u32"],["u16"]],["socketaddrv6"]]],[11,"ip","","Returns the IP address associated with this socket address.",148,[[["self"]],["ipv6addr"]]],[11,"set_ip","","Changes the IP address associated with this socket address.",148,[[["self"],["ipv6addr"]]]],[11,"port","","Returns the port number associated with this socket address.",148,[[["self"]],["u16"]]],[11,"set_port","","Changes the port number associated with this socket address.",148,[[["u16"],["self"]]]],[11,"flowinfo","","Returns the flow information associated with this address.",148,[[["self"]],["u32"]]],[11,"set_flowinfo","","Changes the flow information associated with this socket…",148,[[["self"],["u32"]]]],[11,"scope_id","","Returns the scope ID associated with this address.",148,[[["self"]],["u32"]]],[11,"set_scope_id","","Changes the scope ID associated with this socket address.",148,[[["self"],["u32"]]]],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address.",144,[[["self"]],["bool"]]],[11,"is_loopback","","Returns [`true`] if this is a loopback address.",144,[[["self"]],["bool"]]],[11,"is_global","","Returns [`true`] if the address appears to be globally…",144,[[["self"]],["bool"]]],[11,"is_multicast","","Returns [`true`] if this is a multicast address.",144,[[["self"]],["bool"]]],[11,"is_documentation","","Returns [`true`] if this address is in a range designated…",144,[[["self"]],["bool"]]],[11,"is_ipv4","","Returns [`true`] if this address is an [IPv4 address], and…",144,[[["self"]],["bool"]]],[11,"is_ipv6","","Returns [`true`] if this address is an [IPv6 address], and…",144,[[["self"]],["bool"]]],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",149,[[["u8"]],["ipv4addr"]]],[18,"LOCALHOST","","An IPv4 address with the address pointing to localhost:…",149,null],[18,"UNSPECIFIED","","An IPv4 address representing an unspecified address: 0.0.0.0",149,null],[18,"BROADCAST","","An IPv4 address representing the broadcast address:…",149,null],[11,"octets","","Returns the four eight-bit integers that make up this…",149,[[["self"]]]],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address…",149,[[["self"]],["bool"]]],[11,"is_loopback","","Returns [`true`] if this is a loopback address…",149,[[["self"]],["bool"]]],[11,"is_private","","Returns [`true`] if this is a private address.",149,[[["self"]],["bool"]]],[11,"is_link_local","","Returns [`true`] if the address is link-local…",149,[[["self"]],["bool"]]],[11,"is_global","","Returns [`true`] if the address appears to be globally…",149,[[["self"]],["bool"]]],[11,"is_shared","","Returns [`true`] if this address is part of the Shared…",149,[[["self"]],["bool"]]],[11,"is_ietf_protocol_assignment","","Returns [`true`] if this address is part of…",149,[[["self"]],["bool"]]],[11,"is_benchmarking","","Returns [`true`] if this address part of the…",149,[[["self"]],["bool"]]],[11,"is_reserved","","Returns [`true`] if this address is reserved by IANA for…",149,[[["self"]],["bool"]]],[11,"is_multicast","","Returns [`true`] if this is a multicast address…",149,[[["self"]],["bool"]]],[11,"is_broadcast","","Returns [`true`] if this is a broadcast address…",149,[[["self"]],["bool"]]],[11,"is_documentation","","Returns [`true`] if this address is in a range designated…",149,[[["self"]],["bool"]]],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible [IPv6 address].",149,[[["self"]],["ipv6addr"]]],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped [IPv6 address].",149,[[["self"]],["ipv6addr"]]],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",150,[[["u16"]],["ipv6addr"]]],[18,"LOCALHOST","","An IPv6 address representing localhost: `::1`.",150,null],[18,"UNSPECIFIED","","An IPv6 address representing the unspecified address: `::`",150,null],[11,"segments","","Returns the eight 16-bit segments that make up this address.",150,[[["self"]]]],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address (::).",150,[[["self"]],["bool"]]],[11,"is_loopback","","Returns [`true`] if this is a loopback address (::1).",150,[[["self"]],["bool"]]],[11,"is_global","","Returns [`true`] if the address appears to be globally…",150,[[["self"]],["bool"]]],[11,"is_unique_local","","Returns [`true`] if this is a unique local address…",150,[[["self"]],["bool"]]],[11,"is_unicast_link_local_strict","","Returns [`true`] if the address is a unicast link-local…",150,[[["self"]],["bool"]]],[11,"is_unicast_link_local","","Returns [`true`] if the address is a unicast link-local…",150,[[["self"]],["bool"]]],[11,"is_unicast_site_local","","Returns [`true`] if this is a deprecated unicast…",150,[[["self"]],["bool"]]],[11,"is_documentation","","Returns [`true`] if this is an address reserved for…",150,[[["self"]],["bool"]]],[11,"is_unicast_global","","Returns [`true`] if the address is a globally routable…",150,[[["self"]],["bool"]]],[11,"multicast_scope","","Returns the address's multicast scope if the address is…",150,[[["self"]],[["ipv6multicastscope"],["option",["ipv6multicastscope"]]]]],[11,"is_multicast","","Returns [`true`] if this is a multicast address (ff00::/8).",150,[[["self"]],["bool"]]],[11,"to_ipv4","","Converts this address to an [IPv4 address]. Returns…",150,[[["self"]],[["option",["ipv4addr"]],["ipv4addr"]]]],[11,"octets","","Returns the sixteen eight-bit integers the IPv6 address…",150,[[["self"]]]],[11,"connect","","Opens a TCP connection to a remote host.",151,[[["tosocketaddrs"]],[["result",["tcpstream"]],["tcpstream"]]]],[11,"connect_timeout","","Opens a TCP connection to a remote host with a timeout.",151,[[["duration"],["socketaddr"]],[["result",["tcpstream"]],["tcpstream"]]]],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP…",151,[[["self"]],[["result",["socketaddr"]],["socketaddr"]]]],[11,"local_addr","","Returns the socket address of the local half of this TCP…",151,[[["self"]],[["result",["socketaddr"]],["socketaddr"]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this…",151,[[["self"],["shutdown"]],["result"]]],[11,"try_clone","","Creates a new independently owned handle to the underlying…",151,[[["self"]],[["result",["tcpstream"]],["tcpstream"]]]],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",151,[[["option",["duration"]],["self"],["duration"]],["result"]]],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",151,[[["option",["duration"]],["self"],["duration"]],["result"]]],[11,"read_timeout","","Returns the read timeout of this socket.",151,[[["self"]],[["result",["option"]],["option",["duration"]]]]],[11,"write_timeout","","Returns the write timeout of this socket.",151,[[["self"]],[["result",["option"]],["option",["duration"]]]]],[11,"peek","","Receives data on the socket from the remote address to…",151,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",151,[[["self"],["bool"]],["result"]]],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",151,[[["self"]],[["result",["bool"]],["bool"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",151,[[["u32"],["self"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",151,[[["self"]],[["result",["u32"]],["u32"]]]],[11,"take_error","","Gets the value of the `SO_ERROR` option on this socket.",151,[[["self"]],[["result",["option"]],["option",["error"]]]]],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",151,[[["self"],["bool"]],["result"]]],[11,"bind","","Creates a new `TcpListener` which will be bound to the…",152,[[["tosocketaddrs"]],[["result",["tcplistener"]],["tcplistener"]]]],[11,"local_addr","","Returns the local socket address of this listener.",152,[[["self"]],[["result",["socketaddr"]],["socketaddr"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying…",152,[[["self"]],[["result",["tcplistener"]],["tcplistener"]]]],[11,"accept","","Accept a new incoming connection from this listener.",152,[[["self"]],["result"]]],[11,"incoming","","Returns an iterator over the connections being received on…",152,[[["self"]],["incoming"]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",152,[[["u32"],["self"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",152,[[["self"]],[["result",["u32"]],["u32"]]]],[11,"set_only_v6","","",152,[[["self"],["bool"]],["result"]]],[11,"only_v6","","",152,[[["self"]],[["result",["bool"]],["bool"]]]],[11,"take_error","","Gets the value of the `SO_ERROR` option on this socket.",152,[[["self"]],[["result",["option"]],["option",["error"]]]]],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",152,[[["self"],["bool"]],["result"]]],[11,"bind","","Creates a UDP socket from the given address.",153,[[["tosocketaddrs"]],[["result",["udpsocket"]],["udpsocket"]]]],[11,"recv_from","","Receives a single datagram message on the socket. On…",153,[[["self"]],["result"]]],[11,"peek_from","","Receives a single datagram message on the socket, without…",153,[[["self"]],["result"]]],[11,"send_to","","Sends data on the socket to the given address. On success,…",153,[[["self"],["tosocketaddrs"]],[["result",["usize"]],["usize"]]]],[11,"peer_addr","","Returns the socket address of the remote peer this socket…",153,[[["self"]],[["result",["socketaddr"]],["socketaddr"]]]],[11,"local_addr","","Returns the socket address that this socket was created…",153,[[["self"]],[["result",["socketaddr"]],["socketaddr"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying…",153,[[["self"]],[["result",["udpsocket"]],["udpsocket"]]]],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",153,[[["option",["duration"]],["self"],["duration"]],["result"]]],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",153,[[["option",["duration"]],["self"],["duration"]],["result"]]],[11,"read_timeout","","Returns the read timeout of this socket.",153,[[["self"]],[["result",["option"]],["option",["duration"]]]]],[11,"write_timeout","","Returns the write timeout of this socket.",153,[[["self"]],[["result",["option"]],["option",["duration"]]]]],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",153,[[["self"],["bool"]],["result"]]],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",153,[[["self"]],[["result",["bool"]],["bool"]]]],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this…",153,[[["self"],["bool"]],["result"]]],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this…",153,[[["self"]],[["result",["bool"]],["bool"]]]],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this…",153,[[["u32"],["self"]],["result"]]],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this…",153,[[["self"]],[["result",["u32"]],["u32"]]]],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for…",153,[[["self"],["bool"]],["result"]]],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for…",153,[[["self"]],[["result",["bool"]],["bool"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",153,[[["u32"],["self"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",153,[[["self"]],[["result",["u32"]],["u32"]]]],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",153,[[["ipv4addr"],["self"]],["result"]]],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",153,[[["u32"],["self"],["ipv6addr"]],["result"]]],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",153,[[["ipv4addr"],["self"]],["result"]]],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",153,[[["u32"],["self"],["ipv6addr"]],["result"]]],[11,"take_error","","Gets the value of the `SO_ERROR` option on this socket.",153,[[["self"]],[["result",["option"]],["option",["error"]]]]],[11,"connect","","Connects this UDP socket to a remote address, allowing the…",153,[[["self"],["tosocketaddrs"]],["result"]]],[11,"send","","Sends data on the socket to the remote address to which it…",153,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"recv","","Receives a single datagram message on the socket from the…",153,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"peek","","Receives single datagram on the socket from the remote…",153,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",153,[[["self"],["bool"]],["result"]]],[8,"ToSocketAddrs","","A trait for objects which can be converted or resolved to…",null,null],[16,"Iter","","Returned iterator over socket addresses which this type…",154,null],[10,"to_socket_addrs","","Converts this object to an iterator of resolved…",154,[[["self"]],["result"]]],[0,"num","std","Additional functionality for numerics.",null,null],[3,"Wrapping","std::num","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",155,null],[4,"FpCategory","","A classification of floating point numbers.",null,null],[13,"Nan","","\"Not a Number\", often obtained by dividing by zero.",156,null],[13,"Infinite","","Positive or negative infinity.",156,null],[13,"Zero","","Positive or negative zero.",156,null],[13,"Subnormal","","De-normalized floating point representation (less precise…",156,null],[13,"Normal","","A regular floating point number.",156,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[3,"TryFromIntError","","The error type returned when a checked integral type…",null,null],[3,"NonZeroI128","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI16","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI32","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI64","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI8","","An integer that is known not to equal zero.",null,null],[3,"NonZeroIsize","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU128","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU16","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU32","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU64","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU8","","An integer that is known not to equal zero.",null,null],[3,"NonZeroUsize","","An integer that is known not to equal zero.",null,null],[4,"IntErrorKind","","Enum to store the various types of errors that can cause…",null,null],[13,"Empty","","Value being parsed is empty.",157,null],[13,"InvalidDigit","","Contains an invalid digit.",157,null],[13,"Overflow","","Integer is too large to store in target integer type.",157,null],[13,"Underflow","","Integer is too small to store in target integer type.",157,null],[13,"Zero","","Value was Zero",157,null],[0,"os","std","OS-specific functionality.",null,null],[0,"unix","std::os","Platform-specific extensions to `std` for Unix platforms.",null,null],[0,"ffi","std::os::unix","Unix-specific extension to the primitives in the…",null,null],[8,"OsStringExt","std::os::unix::ffi","Platform-specific extensions to [`OsString`].",null,null],[10,"from_vec","","Creates an [`OsString`] from a byte vector.",158,[[["vec",["u8"]],["u8"]],["self"]]],[10,"into_vec","","Yields the underlying byte vector of this [`OsString`].",158,[[],[["vec",["u8"]],["u8"]]]],[8,"OsStrExt","","Platform-specific extensions to [`OsStr`].",null,null],[10,"from_bytes","","Creates an [`OsStr`] from a byte slice.",159,[[],["self"]]],[10,"as_bytes","","Gets the underlying byte view of the [`OsStr`] slice.",159,[[["self"]]]],[0,"fs","std::os::unix","Unix-specific extensions to primitives in the `std::fs`…",null,null],[5,"symlink","std::os::unix::fs","Creates a new symbolic link on the filesystem.",null,[[["path"],["asref",["path"]]],["result"]]],[8,"FileExt","","Unix-specific extensions to [`File`].",null,null],[10,"read_at","","Reads a number of bytes starting from a given offset.",160,[[["u64"],["self"]],[["result",["usize"]],["usize"]]]],[11,"read_exact_at","","Reads the exact number of byte required to fill `buf` from…",160,[[["u64"],["self"]],["result"]]],[10,"write_at","","Writes a number of bytes starting from a given offset.",160,[[["self"],["u64"]],[["result",["usize"]],["usize"]]]],[11,"write_all_at","","Attempts to write an entire buffer starting from a given…",160,[[["self"],["u64"]],["result"]]],[8,"PermissionsExt","","Unix-specific extensions to [`fs::Permissions`].",null,null],[10,"mode","","Returns the underlying raw `st_mode` bits that contain the…",161,[[["self"]],["u32"]]],[10,"set_mode","","Sets the underlying raw bits for this set of permissions.",161,[[["self"],["u32"]]]],[10,"from_mode","","Creates a new instance of `Permissions` from the given set…",161,[[["u32"]],["self"]]],[8,"OpenOptionsExt","","Unix-specific extensions to [`fs::OpenOptions`].",null,null],[10,"mode","","Sets the mode bits that a new file will be created with.",162,[[["self"],["u32"]],["self"]]],[10,"custom_flags","","Pass custom flags to the `flags` argument of `open`.",162,[[["self"],["i32"]],["self"]]],[8,"MetadataExt","","Unix-specific extensions to [`fs::Metadata`].",null,null],[10,"dev","","Returns the ID of the device containing the file.",163,[[["self"]],["u64"]]],[10,"ino","","Returns the inode number.",163,[[["self"]],["u64"]]],[10,"mode","","Returns the rights applied to this file.",163,[[["self"]],["u32"]]],[10,"nlink","","Returns the number of hard links pointing to this file.",163,[[["self"]],["u64"]]],[10,"uid","","Returns the user ID of the owner of this file.",163,[[["self"]],["u32"]]],[10,"gid","","Returns the group ID of the owner of this file.",163,[[["self"]],["u32"]]],[10,"rdev","","Returns the device ID of this file (if it is a special one).",163,[[["self"]],["u64"]]],[10,"size","","Returns the total size of this file in bytes.",163,[[["self"]],["u64"]]],[10,"atime","","Returns the last access time of the file, in seconds since…",163,[[["self"]],["i64"]]],[10,"atime_nsec","","Returns the last access time of the file, in nanoseconds…",163,[[["self"]],["i64"]]],[10,"mtime","","Returns the last modification time of the file, in seconds…",163,[[["self"]],["i64"]]],[10,"mtime_nsec","","Returns the last modification time of the file, in…",163,[[["self"]],["i64"]]],[10,"ctime","","Returns the last status change time of the file, in…",163,[[["self"]],["i64"]]],[10,"ctime_nsec","","Returns the last status change time of the file, in…",163,[[["self"]],["i64"]]],[10,"blksize","","Returns the blocksize for filesystem I/O.",163,[[["self"]],["u64"]]],[10,"blocks","","Returns the number of blocks allocated to the file, in…",163,[[["self"]],["u64"]]],[8,"FileTypeExt","","Unix-specific extensions for [`FileType`].",null,null],[10,"is_block_device","","Returns `true` if this file type is a block device.",164,[[["self"]],["bool"]]],[10,"is_char_device","","Returns `true` if this file type is a char device.",164,[[["self"]],["bool"]]],[10,"is_fifo","","Returns `true` if this file type is a fifo.",164,[[["self"]],["bool"]]],[10,"is_socket","","Returns `true` if this file type is a socket.",164,[[["self"]],["bool"]]],[8,"DirEntryExt","","Unix-specific extension methods for [`fs::DirEntry`].",null,null],[10,"ino","","Returns the underlying `d_ino` field in the contained…",165,[[["self"]],["u64"]]],[8,"DirBuilderExt","","Unix-specific extensions to [`fs::DirBuilder`].",null,null],[10,"mode","","Sets the mode to create new directories with. This option…",166,[[["self"],["u32"]],["self"]]],[0,"io","std::os::unix","Unix-specific extensions to general I/O primitives",null,null],[6,"RawFd","std::os::unix::io","Raw file descriptors.",null,null],[8,"AsRawFd","","A trait to extract the raw unix file descriptor from an…",null,null],[10,"as_raw_fd","","Extracts the raw file descriptor.",167,[[["self"]],["rawfd"]]],[8,"FromRawFd","","A trait to express the ability to construct an object from…",null,null],[10,"from_raw_fd","","Constructs a new instance of `Self` from the given raw…",168,[[["rawfd"]],["self"]]],[8,"IntoRawFd","","A trait to express the ability to consume an object and…",null,null],[10,"into_raw_fd","","Consumes this object, returning the raw underlying file…",169,[[],["rawfd"]]],[0,"net","std::os::unix","Unix-specific networking functionality",null,null],[3,"SocketAddr","std::os::unix::net","An address associated with a Unix socket.",null,null],[3,"UnixStream","","A Unix stream socket.",null,null],[3,"UnixListener","","A structure representing a Unix domain socket server.",null,null],[3,"Incoming","","An iterator over incoming connections to a [`UnixListener`].",null,null],[3,"UnixDatagram","","A Unix datagram socket.",null,null],[0,"process","std::os::unix","Unix-specific extensions to primitives in the…",null,null],[5,"parent_id","std::os::unix::process","Returns the OS-assigned process identifier associated with…",null,[[],["u32"]]],[8,"CommandExt","","Unix-specific extensions to the [`process::Command`]…",null,null],[10,"uid","","Sets the child process's user ID. This translates to a…",170,[[["self"],["u32"]],["command"]]],[10,"gid","","Similar to `uid`, but sets the group ID of the child…",170,[[["self"],["u32"]],["command"]]],[10,"pre_exec","","Schedules a closure to be run just before the `exec`…",170,[[["self"],["f"]],["command"]]],[11,"before_exec","","Schedules a closure to be run just before the `exec`…",170,[[["self"],["f"]],["command"]]],[10,"exec","","Performs all the required setup by this `Command`,…",170,[[["self"]],["error"]]],[10,"arg0","","Set executable argument",170,[[["self"],["s"]],["command"]]],[8,"ExitStatusExt","","Unix-specific extensions to [`process::ExitStatus`].",null,null],[10,"from_raw","","Creates a new `ExitStatus` from the raw underlying `i32`…",171,[[["i32"]],["self"]]],[10,"signal","","If the process was terminated by a signal, returns that…",171,[[["self"]],[["option",["i32"]],["i32"]]]],[0,"raw","std::os::unix","Unix-specific primitives available on all unix platforms",null,null],[6,"uid_t","std::os::unix::raw","",null,null],[6,"gid_t","","",null,null],[6,"pid_t","","",null,null],[6,"pthread_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"time_t","","",null,null],[6,"blksize_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"off_t","","",null,null],[0,"thread","std::os::unix","Unix-specific extensions to primitives in the…",null,null],[6,"RawPthread","std::os::unix::thread","",null,null],[8,"JoinHandleExt","","Unix-specific extensions to [`thread::JoinHandle`].",null,null],[10,"as_pthread_t","","Extracts the raw pthread_t without taking ownership",172,[[["self"]],["rawpthread"]]],[10,"into_pthread_t","","Consumes the thread, returning the raw pthread_t",172,[[],["rawpthread"]]],[0,"prelude","std::os::unix","A prelude for conveniently writing platform-specific code.",null,null],[0,"windows","std::os","Platform-specific extensions to `std` for Windows.",null,null],[0,"ffi","std::os::windows","Windows-specific extensions to the primitives in the…",null,null],[3,"EncodeWide","std::os::windows::ffi","Generates a wide character sequence for potentially…",null,null],[8,"OsStringExt","","Windows-specific extensions to [`OsString`].",null,null],[10,"from_wide","","Creates an `OsString` from a potentially ill-formed UTF-16…",173,[[],["self"]]],[8,"OsStrExt","","Windows-specific extensions to [`OsStr`].",null,null],[10,"encode_wide","","Re-encodes an `OsStr` as a wide character sequence, i.e.,…",174,[[["self"]],["encodewide"]]],[0,"fs","std::os::windows","Windows-specific extensions for the primitives in the…",null,null],[5,"symlink_file","std::os::windows::fs","Creates a new file symbolic link on the filesystem.",null,[[["path"],["asref",["path"]]],["result"]]],[5,"symlink_dir","","Creates a new directory symlink on the filesystem.",null,[[["path"],["asref",["path"]]],["result"]]],[8,"FileExt","","Windows-specific extensions to [`File`].",null,null],[10,"seek_read","","Seeks to a given position and reads a number of bytes.",175,[[["u64"],["self"]],[["result",["usize"]],["usize"]]]],[10,"seek_write","","Seeks to a given position and writes a number of bytes.",175,[[["self"],["u64"]],[["result",["usize"]],["usize"]]]],[8,"OpenOptionsExt","","Windows-specific extensions to [`fs::OpenOptions`].",null,null],[10,"access_mode","","Overrides the `dwDesiredAccess` argument to the call to…",176,[[["self"],["u32"]],["self"]]],[10,"share_mode","","Overrides the `dwShareMode` argument to the call to…",176,[[["self"],["u32"]],["self"]]],[10,"custom_flags","","Sets extra flags for the `dwFileFlags` argument to the…",176,[[["self"],["u32"]],["self"]]],[10,"attributes","","Sets the `dwFileAttributes` argument to the call to…",176,[[["self"],["u32"]],["self"]]],[10,"security_qos_flags","","Sets the `dwSecurityQosFlags` argument to the call to…",176,[[["self"],["u32"]],["openoptions"]]],[8,"MetadataExt","","Windows-specific extensions to [`fs::Metadata`].",null,null],[10,"file_attributes","","Returns the value of the `dwFileAttributes` field of this…",177,[[["self"]],["u32"]]],[10,"creation_time","","Returns the value of the `ftCreationTime` field of this…",177,[[["self"]],["u64"]]],[10,"last_access_time","","Returns the value of the `ftLastAccessTime` field of this…",177,[[["self"]],["u64"]]],[10,"last_write_time","","Returns the value of the `ftLastWriteTime` field of this…",177,[[["self"]],["u64"]]],[10,"file_size","","Returns the value of the `nFileSize{High,Low}` fields of…",177,[[["self"]],["u64"]]],[10,"volume_serial_number","","Returns the value of the `dwVolumeSerialNumber` field of…",177,[[["self"]],[["u32"],["option",["u32"]]]]],[10,"number_of_links","","Returns the value of the `nNumberOfLinks` field of this…",177,[[["self"]],[["u32"],["option",["u32"]]]]],[10,"file_index","","Returns the value of the `nFileIndex{Low,High}` fields of…",177,[[["self"]],[["u64"],["option",["u64"]]]]],[8,"FileTypeExt","","Windows-specific extensions to [`FileType`].",null,null],[10,"is_symlink_dir","","Returns `true` if this file type is a symbolic link that…",178,[[["self"]],["bool"]]],[10,"is_symlink_file","","Returns `true` if this file type is a symbolic link that…",178,[[["self"]],["bool"]]],[0,"io","std::os::windows","",null,null],[6,"RawHandle","std::os::windows::io","Raw HANDLEs.",null,null],[6,"RawSocket","","Raw SOCKETs.",null,null],[8,"AsRawHandle","","Extracts raw handles.",null,null],[10,"as_raw_handle","","Extracts the raw handle, without taking any ownership.",179,[[["self"]],["rawhandle"]]],[8,"FromRawHandle","","Construct I/O objects from raw handles.",null,null],[10,"from_raw_handle","","Constructs a new I/O object from the specified raw handle.",180,[[["rawhandle"]],["self"]]],[8,"IntoRawHandle","","A trait to express the ability to consume an object and…",null,null],[10,"into_raw_handle","","Consumes this object, returning the raw underlying handle.",181,[[],["rawhandle"]]],[8,"AsRawSocket","","Extracts raw sockets.",null,null],[10,"as_raw_socket","","Extracts the underlying raw socket from this object.",182,[[["self"]],["rawsocket"]]],[8,"FromRawSocket","","Creates I/O objects from raw sockets.",null,null],[10,"from_raw_socket","","Creates a new I/O object from the given raw socket.",183,[[["rawsocket"]],["self"]]],[8,"IntoRawSocket","","A trait to express the ability to consume an object and…",null,null],[10,"into_raw_socket","","Consumes this object, returning the raw underlying socket.",184,[[],["rawsocket"]]],[0,"process","std::os::windows","Extensions to `std::process` for Windows.",null,null],[8,"ExitStatusExt","std::os::windows::process","Windows-specific extensions to [`process::ExitStatus`].",null,null],[10,"from_raw","","Creates a new `ExitStatus` from the raw underlying `u32`…",185,[[["u32"]],["self"]]],[8,"CommandExt","","Windows-specific extensions to the [`process::Command`]…",null,null],[10,"creation_flags","","Sets the [process creation flags][1] to be passed to…",186,[[["self"],["u32"]],["command"]]],[0,"raw","std::os::windows","Windows-specific primitives",null,null],[6,"HANDLE","std::os::windows::raw","",null,null],[6,"SOCKET","","",null,null],[0,"thread","std::os::windows","Extensions to `std::thread` for Windows.",null,null],[0,"prelude","","A prelude for conveniently writing platform-specific code.",null,null],[0,"linux","std::os","Linux-specific definitions",null,null],[0,"fs","std::os::linux","",null,null],[8,"MetadataExt","std::os::linux::fs","OS-specific extensions to [`fs::Metadata`].",null,null],[10,"as_raw_stat","","Gain a reference to the underlying `stat` structure which…",187,[[["self"]],["stat"]]],[10,"st_dev","","Returns the device ID on which this file resides.",187,[[["self"]],["u64"]]],[10,"st_ino","","Returns the inode number.",187,[[["self"]],["u64"]]],[10,"st_mode","","Returns the file type and mode.",187,[[["self"]],["u32"]]],[10,"st_nlink","","Returns the number of hard links to file.",187,[[["self"]],["u64"]]],[10,"st_uid","","Returns the user ID of the file owner.",187,[[["self"]],["u32"]]],[10,"st_gid","","Returns the group ID of the file owner.",187,[[["self"]],["u32"]]],[10,"st_rdev","","Returns the device ID that this file represents. Only…",187,[[["self"]],["u64"]]],[10,"st_size","","Returns the size of the file (if it is a regular file or a…",187,[[["self"]],["u64"]]],[10,"st_atime","","Returns the last access time of the file, in seconds since…",187,[[["self"]],["i64"]]],[10,"st_atime_nsec","","Returns the last access time of the file, in nanoseconds…",187,[[["self"]],["i64"]]],[10,"st_mtime","","Returns the last modification time of the file, in seconds…",187,[[["self"]],["i64"]]],[10,"st_mtime_nsec","","Returns the last modification time of the file, in…",187,[[["self"]],["i64"]]],[10,"st_ctime","","Returns the last status change time of the file, in…",187,[[["self"]],["i64"]]],[10,"st_ctime_nsec","","Returns the last status change time of the file, in…",187,[[["self"]],["i64"]]],[10,"st_blksize","","Returns the \"preferred\" blocksize for efficient filesystem…",187,[[["self"]],["u64"]]],[10,"st_blocks","","Returns the number of blocks allocated to the file,…",187,[[["self"]],["u64"]]],[0,"raw","std::os::linux","Linux-specific raw type definitions",null,null],[3,"stat","std::os::linux::raw","",null,null],[12,"st_dev","","",188,null],[12,"st_ino","","",188,null],[12,"st_nlink","","",188,null],[12,"st_mode","","",188,null],[12,"st_uid","","",188,null],[12,"st_gid","","",188,null],[12,"__pad0","","",188,null],[12,"st_rdev","","",188,null],[12,"st_size","","",188,null],[12,"st_blksize","","",188,null],[12,"st_blocks","","",188,null],[12,"st_atime","","",188,null],[12,"st_atime_nsec","","",188,null],[12,"st_mtime","","",188,null],[12,"st_mtime_nsec","","",188,null],[12,"st_ctime","","",188,null],[12,"st_ctime_nsec","","",188,null],[12,"__unused","","",188,null],[6,"dev_t","","",null,null],[6,"mode_t","","",null,null],[6,"pthread_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"blksize_t","","",null,null],[6,"ino_t","","",null,null],[6,"nlink_t","","",null,null],[6,"off_t","","",null,null],[6,"time_t","","",null,null],[0,"raw","std::os","Platform-specific types, as defined by C.",null,null],[6,"c_char","std::os::raw","Equivalent to C's `char` type.",null,null],[6,"c_schar","","Equivalent to C's `signed char` type.",null,null],[6,"c_uchar","","Equivalent to C's `unsigned char` type.",null,null],[6,"c_short","","Equivalent to C's `signed short` (`short`) type.",null,null],[6,"c_ushort","","Equivalent to C's `unsigned short` type.",null,null],[6,"c_int","","Equivalent to C's `signed int` (`int`) type.",null,null],[6,"c_uint","","Equivalent to C's `unsigned int` type.",null,null],[6,"c_long","","Equivalent to C's `signed long` (`long`) type.",null,null],[6,"c_ulong","","Equivalent to C's `unsigned long` type.",null,null],[6,"c_longlong","","Equivalent to C's `signed long long` (`long long`) type.",null,null],[6,"c_ulonglong","","Equivalent to C's `unsigned long long` type.",null,null],[6,"c_float","","Equivalent to C's `float` type.",null,null],[6,"c_double","","Equivalent to C's `double` type.",null,null],[0,"panic","std","Panic support in the standard library.",null,null],[3,"Location","std::panic","A struct containing information about the location of a…",null,null],[3,"PanicInfo","","A struct providing information about a panic.",null,null],[3,"AssertUnwindSafe","","A simple wrapper around a type to assert that it is unwind…",null,null],[12,"0","","",189,null],[5,"set_hook","","Registers a custom panic hook, replacing any that was…",null,[[["fn"],["box",["fn"]]]]],[5,"take_hook","","Unregisters the current panic hook, returning it.",null,[[],[["fn"],["box",["fn"]]]]],[5,"catch_unwind","","Invokes a closure, capturing the cause of an unwinding…",null,[[["unwindsafe"],["fnonce"]],["result"]]],[5,"resume_unwind","","Triggers a panic without invoking the panic hook.",null,[[["box",["any"]],["any"]]]],[8,"UnwindSafe","","A marker trait which represents \"panic safe\" types in Rust.",null,null],[8,"RefUnwindSafe","","A marker trait representing types where a shared reference…",null,null],[0,"path","std","Cross-platform path manipulation.",null,null],[3,"PrefixComponent","std::path","A structure wrapping a Windows path prefix as well as its…",null,null],[3,"Components","","An iterator over the [`Component`]s of a [`Path`].",null,null],[3,"Iter","","An iterator over the [`Component`]s of a [`Path`], as…",null,null],[3,"Ancestors","","An iterator over [`Path`] and its ancestors.",null,null],[3,"PathBuf","","An owned, mutable path (akin to [`String`]).",null,null],[3,"Path","","A slice of a path (akin to [`str`]).",null,null],[3,"StripPrefixError","","An error returned from…",null,null],[3,"Display","","Helper struct for safely printing paths with [`format!`]…",null,null],[4,"Prefix","","Windows path prefixes, e.g., `C:` or `\\\\server\\share`.",null,null],[13,"Verbatim","","Verbatim prefix, e.g., `\\\\?\\cat_pics`.",190,null],[13,"VerbatimUNC","","Verbatim prefix using Windows' Uniform Naming Convention,…",190,null],[13,"VerbatimDisk","","Verbatim disk prefix, e.g., `\\\\?\\C:\\`.",190,null],[13,"DeviceNS","","Device namespace prefix, e.g., `\\\\.\\COM42`.",190,null],[13,"UNC","","Prefix using Windows' Uniform Naming Convention, e.g.…",190,null],[13,"Disk","","Prefix `C:` for the given disk drive.",190,null],[4,"Component","","A single component of a path.",null,null],[13,"Prefix","","A Windows path prefix, e.g., `C:` or `\\\\server\\share`.",191,null],[13,"RootDir","","The root directory component, appears after any prefix and…",191,null],[13,"CurDir","","A reference to the current directory, i.e., `.`.",191,null],[13,"ParentDir","","A reference to the parent directory, i.e., `..`.",191,null],[13,"Normal","","A normal component, e.g., `a` and `b` in `a/b`.",191,null],[5,"is_separator","","Determines whether the character is one of the permitted…",null,[[["char"]],["bool"]]],[17,"MAIN_SEPARATOR","","The primary separator of path components for the current…",null,null],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e., begins with…",190,[[["self"]],["bool"]]],[11,"kind","","Returns the parsed prefix data.",192,[[["self"]],["prefix"]]],[11,"as_os_str","","Returns the raw [`OsStr`] slice for this prefix.",192,[[["self"]],["osstr"]]],[11,"as_os_str","","Extracts the underlying [`OsStr`] slice.",191,[[],["osstr"]]],[11,"as_path","","Extracts a slice corresponding to the portion of the path…",193,[[["self"]],["path"]]],[11,"as_path","","Extracts a slice corresponding to the portion of the path…",194,[[["self"]],["path"]]],[11,"new","","Allocates an empty `PathBuf`.",195,[[],["pathbuf"]]],[11,"with_capacity","","Creates a new `PathBuf` with a given capacity used to…",195,[[["usize"]],["pathbuf"]]],[11,"as_path","","Coerces to a [`Path`] slice.",195,[[["self"]],["path"]]],[11,"push","","Extends `self` with `path`.",195,[[["path"],["self"],["asref",["path"]]]]],[11,"pop","","Truncates `self` to [`self.parent`].",195,[[["self"]],["bool"]]],[11,"set_file_name","","Updates [`self.file_name`] to `file_name`.",195,[[["osstr"],["self"],["asref",["osstr"]]]]],[11,"set_extension","","Updates [`self.extension`] to `extension`.",195,[[["osstr"],["self"],["asref",["osstr"]]],["bool"]]],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal [`OsString`]…",195,[[],["osstring"]]],[11,"into_boxed_path","","Converts this `PathBuf` into a [boxed][`Box`] [`Path`].",195,[[],[["box",["path"]],["path"]]]],[11,"capacity","","Invokes [`capacity`] on the underlying instance of…",195,[[["self"]],["usize"]]],[11,"clear","","Invokes [`clear`] on the underlying instance of…",195,[[["self"]]]],[11,"reserve","","Invokes [`reserve`] on the underlying instance of…",195,[[["self"],["usize"]]]],[11,"reserve_exact","","Invokes [`reserve_exact`] on the underlying instance of…",195,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Invokes [`shrink_to_fit`] on the underlying instance of…",195,[[["self"]]]],[11,"shrink_to","","Invokes [`shrink_to`] on the underlying instance of…",195,[[["self"],["usize"]]]],[11,"new","","Directly wraps a string slice as a `Path` slice.",196,[[["s"]],["path"]]],[11,"as_os_str","","Yields the underlying [`OsStr`] slice.",196,[[["self"]],["osstr"]]],[11,"to_str","","Yields a [`&str`] slice if the `Path` is valid unicode.",196,[[["self"]],[["str"],["option",["str"]]]]],[11,"to_string_lossy","","Converts a `Path` to a [`Cow<str>`].",196,[[["self"]],[["cow",["str"]],["str"]]]],[11,"to_path_buf","","Converts a `Path` to an owned [`PathBuf`].",196,[[["self"]],["pathbuf"]]],[11,"is_absolute","","Returns `true` if the `Path` is absolute, i.e., if it is…",196,[[["self"]],["bool"]]],[11,"is_relative","","Returns `true` if the `Path` is relative, i.e., not…",196,[[["self"]],["bool"]]],[11,"has_root","","Returns `true` if the `Path` has a root.",196,[[["self"]],["bool"]]],[11,"parent","","Returns the `Path` without its final component, if there…",196,[[["self"]],[["path"],["option",["path"]]]]],[11,"ancestors","","Produces an iterator over `Path` and its ancestors.",196,[[["self"]],["ancestors"]]],[11,"file_name","","Returns the final component of the `Path`, if there is one.",196,[[["self"]],[["option",["osstr"]],["osstr"]]]],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",196,[[["self"],["p"]],[["result",["path","stripprefixerror"]],["path"],["stripprefixerror"]]]],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",196,[[["path"],["asref",["path"]],["self"]],["bool"]]],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",196,[[["path"],["asref",["path"]],["self"]],["bool"]]],[11,"file_stem","","Extracts the stem (non-extension) portion of…",196,[[["self"]],[["option",["osstr"]],["osstr"]]]],[11,"extension","","Extracts the extension of [`self.file_name`], if possible.",196,[[["self"]],[["option",["osstr"]],["osstr"]]]],[11,"join","","Creates an owned [`PathBuf`] with `path` adjoined to `self`.",196,[[["path"],["asref",["path"]],["self"]],["pathbuf"]]],[11,"with_file_name","","Creates an owned [`PathBuf`] like `self` but with the…",196,[[["osstr"],["self"],["asref",["osstr"]]],["pathbuf"]]],[11,"with_extension","","Creates an owned [`PathBuf`] like `self` but with the…",196,[[["osstr"],["self"],["asref",["osstr"]]],["pathbuf"]]],[11,"components","","Produces an iterator over the [`Component`]s of the path.",196,[[["self"]],["components"]]],[11,"iter","","Produces an iterator over the path's components viewed as…",196,[[["self"]],["iter"]]],[11,"display","","Returns an object that implements [`Display`] for safely…",196,[[["self"]],["display"]]],[11,"metadata","","Queries the file system to get information about a file,…",196,[[["self"]],[["metadata"],["result",["metadata"]]]]],[11,"symlink_metadata","","Queries the metadata about a file without following…",196,[[["self"]],[["metadata"],["result",["metadata"]]]]],[11,"canonicalize","","Returns the canonical, absolute form of the path with all…",196,[[["self"]],[["result",["pathbuf"]],["pathbuf"]]]],[11,"read_link","","Reads a symbolic link, returning the file that the link…",196,[[["self"]],[["result",["pathbuf"]],["pathbuf"]]]],[11,"read_dir","","Returns an iterator over the entries within a directory.",196,[[["self"]],[["readdir"],["result",["readdir"]]]]],[11,"exists","","Returns `true` if the path points at an existing entity.",196,[[["self"]],["bool"]]],[11,"is_file","","Returns `true` if the path exists on disk and is pointing…",196,[[["self"]],["bool"]]],[11,"is_dir","","Returns `true` if the path exists on disk and is pointing…",196,[[["self"]],["bool"]]],[11,"into_path_buf","","Converts a [`Box<Path>`][`Box`] into a [`PathBuf`] without…",196,[[["box",["path"]],["path"]],["pathbuf"]]],[0,"process","std","A module for working with processes.",null,null],[3,"Child","std::process","Representation of a running or exited child process.",null,null],[12,"stdin","","The handle for writing to the child's standard input…",197,null],[12,"stdout","","The handle for reading from the child's standard output…",197,null],[12,"stderr","","The handle for reading from the child's standard error…",197,null],[3,"ChildStdin","","A handle to a child process's standard input (stdin).",null,null],[3,"ChildStdout","","A handle to a child process's standard output (stdout).",null,null],[3,"ChildStderr","","A handle to a child process's stderr.",null,null],[3,"Command","","A process builder, providing fine-grained control over how…",null,null],[3,"Output","","The output of a finished process.",null,null],[12,"status","","The status (exit code) of the process.",198,null],[12,"stdout","","The data that the process wrote to stdout.",198,null],[12,"stderr","","The data that the process wrote to stderr.",198,null],[3,"Stdio","","Describes what to do with a standard I/O stream for a…",null,null],[3,"ExitStatus","","Describes the result of a process after it has terminated.",null,null],[3,"ExitCode","","This type represents the status code a process can return…",null,null],[5,"exit","","Terminates the current process with the specified exit code.",null,[[["i32"]]]],[5,"abort","","Terminates the process in an abnormal fashion.",null,[[]]],[5,"id","","Returns the OS-assigned process identifier associated with…",null,[[],["u32"]]],[8,"Termination","","A trait for implementing arbitrary return types in the…",null,null],[10,"report","","Is called to get the representation of the value as status…",199,[[],["i32"]]],[11,"new","","Constructs a new `Command` for launching the program at…",200,[[["osstr"],["asref",["osstr"]]],["command"]]],[11,"arg","","Adds an argument to pass to the program.",200,[[["osstr"],["self"],["asref",["osstr"]]],["command"]]],[11,"args","","Adds multiple arguments to pass to the program.",200,[[["self"],["i"]],["command"]]],[11,"env","","Inserts or updates an environment variable mapping.",200,[[["self"],["k"],["v"]],["command"]]],[11,"envs","","Adds or updates multiple environment variable mappings.",200,[[["self"],["i"]],["command"]]],[11,"env_remove","","Removes an environment variable mapping.",200,[[["osstr"],["self"],["asref",["osstr"]]],["command"]]],[11,"env_clear","","Clears the entire environment map for the child process.",200,[[["self"]],["command"]]],[11,"current_dir","","Sets the working directory for the child process.",200,[[["path"],["self"],["asref",["path"]]],["command"]]],[11,"stdin","","Configuration for the child process's standard input…",200,[[["self"],["stdio"],["into",["stdio"]]],["command"]]],[11,"stdout","","Configuration for the child process's standard output…",200,[[["self"],["stdio"],["into",["stdio"]]],["command"]]],[11,"stderr","","Configuration for the child process's standard error…",200,[[["self"],["stdio"],["into",["stdio"]]],["command"]]],[11,"spawn","","Executes the command as a child process, returning a…",200,[[["self"]],[["result",["child"]],["child"]]]],[11,"output","","Executes the command as a child process, waiting for it to…",200,[[["self"]],[["output"],["result",["output"]]]]],[11,"status","","Executes a command as a child process, waiting for it to…",200,[[["self"]],[["exitstatus"],["result",["exitstatus"]]]]],[11,"piped","","A new pipe should be arranged to connect the parent and…",201,[[],["stdio"]]],[11,"inherit","","The child inherits from the corresponding parent descriptor.",201,[[],["stdio"]]],[11,"null","","This stream will be ignored. This is the equivalent of…",201,[[],["stdio"]]],[11,"success","","Was termination successful? Signal termination is not…",202,[[["self"]],["bool"]]],[11,"code","","Returns the exit code of the process, if any.",202,[[["self"]],[["option",["i32"]],["i32"]]]],[18,"SUCCESS","","The canonical ExitCode for successful termination on this…",203,null],[18,"FAILURE","","The canonical ExitCode for unsuccessful termination on…",203,null],[11,"kill","","Forces the child process to exit. If the child has already…",197,[[["self"]],["result"]]],[11,"id","","Returns the OS-assigned process identifier associated with…",197,[[["self"]],["u32"]]],[11,"wait","","Waits for the child to exit completely, returning the…",197,[[["self"]],[["exitstatus"],["result",["exitstatus"]]]]],[11,"try_wait","","Attempts to collect the exit status of the child if it has…",197,[[["self"]],[["result",["option"]],["option",["exitstatus"]]]]],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all…",197,[[],[["output"],["result",["output"]]]]],[0,"sync","std","Useful synchronization primitives.",null,null],[3,"Arc","std::sync","A thread-safe reference-counting pointer. 'Arc' stands for…",null,null],[3,"Weak","","`Weak` is a version of [`Arc`] that holds a non-owning…",null,null],[0,"atomic","","Atomic types",null,null],[5,"spin_loop_hint","std::sync::atomic","Signals the processor that it is inside a busy-wait…",null,[[]]],[3,"AtomicBool","","A boolean type which can be safely shared between threads.",null,null],[3,"AtomicPtr","","A raw pointer type which can be safely shared between…",null,null],[4,"Ordering","","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations.",204,null],[13,"Release","","When coupled with a store, all previous operations become…",204,null],[13,"Acquire","","When coupled with a load, if the loaded value was written…",204,null],[13,"AcqRel","","Has the effects of both [`Acquire`] and [`Release`]…",204,null],[13,"SeqCst","","Like [`Acquire`]/[`Release`]/[`AcqRel`] (for load, store,…",204,null],[17,"ATOMIC_BOOL_INIT","","An [`AtomicBool`] initialized to `false`.",null,null],[3,"AtomicI8","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I8_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU8","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U8_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI16","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I16_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU16","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U16_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI32","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I32_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU32","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U32_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI64","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I64_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU64","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U64_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicIsize","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_ISIZE_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicUsize","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_USIZE_INIT","","An atomic integer initialized to `0`.",null,null],[5,"fence","","An atomic fence.",null,[[["ordering"]]]],[5,"compiler_fence","","A compiler memory fence.",null,[[["ordering"]]]],[3,"Barrier","std::sync","A barrier enables multiple threads to synchronize the…",null,null],[3,"BarrierWaitResult","","A `BarrierWaitResult` is returned by [`wait`] when all…",null,null],[3,"Condvar","","A Condition Variable",null,null],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition…",null,null],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared…",null,null],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When…",null,null],[3,"Once","","A synchronization primitive which can be used to run a…",null,null],[3,"OnceState","","State yielded to [`call_once_force`]’s closure parameter.…",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a…",null,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access…",null,null],[3,"PoisonError","","A type of error which can be returned whenever a lock is…",null,null],[4,"TryLockError","","An enumeration of possible errors associated with a…",null,null],[13,"Poisoned","","The lock could not be acquired because another thread…",205,null],[13,"WouldBlock","","The lock could not be acquired at this time because the…",205,null],[0,"mpsc","","Multi-producer, single-consumer FIFO queue communication…",null,null],[3,"Receiver","std::sync::mpsc","The receiving half of Rust's [`channel`] (or…",null,null],[3,"Iter","","An iterator over messages on a [`Receiver`], created by…",null,null],[3,"TryIter","","An iterator that attempts to yield all pending values for…",null,null],[3,"IntoIter","","An owning iterator over messages on a [`Receiver`],…",null,null],[3,"Sender","","The sending-half of Rust's asynchronous [`channel`] type.…",null,null],[3,"SyncSender","","The sending-half of Rust's synchronous [`sync_channel`]…",null,null],[3,"SendError","","An error returned from the [`Sender::send`] or…",null,null],[12,"0","","",206,null],[3,"RecvError","","An error returned from the [`recv`] function on a…",null,null],[4,"TryRecvError","","This enumeration is the list of the possible reasons that…",null,null],[13,"Empty","","This channel is currently empty, but the Sender(s) have…",207,null],[13,"Disconnected","","The channel's sending half has become disconnected, and…",207,null],[4,"RecvTimeoutError","","This enumeration is the list of possible errors that made…",null,null],[13,"Timeout","","This channel is currently empty, but the Sender(s) have…",208,null],[13,"Disconnected","","The channel's sending half has become disconnected, and…",208,null],[4,"TrySendError","","This enumeration is the list of the possible error…",null,null],[13,"Full","","The data could not be sent on the [`sync_channel`] because…",209,null],[13,"Disconnected","","This [`sync_channel`]'s receiving half has disconnected,…",209,null],[5,"channel","","Creates a new asynchronous channel, returning the…",null,[[]]],[5,"sync_channel","","Creates a new synchronous, bounded channel. All data sent…",null,[[["usize"]]]],[11,"send","","Attempts to send a value on this channel, returning it…",210,[[["self"],["t"]],[["result",["senderror"]],["senderror"]]]],[11,"send","","Sends a value on this synchronous channel.",211,[[["self"],["t"]],[["result",["senderror"]],["senderror"]]]],[11,"try_send","","Attempts to send a value on this channel without blocking.",211,[[["self"],["t"]],[["result",["trysenderror"]],["trysenderror"]]]],[11,"try_recv","","Attempts to return a pending value on this receiver…",212,[[["self"]],[["result",["tryrecverror"]],["tryrecverror"]]]],[11,"recv","","Attempts to wait for a value on this receiver, returning…",212,[[["self"]],[["recverror"],["result",["recverror"]]]]],[11,"recv_timeout","","Attempts to wait for a value on this receiver, returning…",212,[[["self"],["duration"]],[["recvtimeouterror"],["result",["recvtimeouterror"]]]]],[11,"recv_deadline","","Attempts to wait for a value on this receiver, returning…",212,[[["instant"],["self"]],[["recvtimeouterror"],["result",["recvtimeouterror"]]]]],[11,"iter","","Returns an iterator that will block waiting for messages,…",212,[[["self"]],["iter"]]],[11,"try_iter","","Returns an iterator that will attempt to yield all pending…",212,[[["self"]],["tryiter"]]],[11,"new","std::sync","Creates a new barrier that can block a given number of…",213,[[["usize"]],["barrier"]]],[11,"wait","","Blocks the current thread until all threads have…",213,[[["self"]],["barrierwaitresult"]]],[11,"is_leader","","Returns `true` if this thread from [`wait`] is the \"leader…",214,[[["self"]],["bool"]]],[11,"timed_out","","Returns `true` if the wait was known to have timed out.",215,[[["self"]],["bool"]]],[11,"new","","Creates a new condition variable which is ready to be…",216,[[],["condvar"]]],[11,"wait","","Blocks the current thread until this condition variable…",216,[[["mutexguard"],["self"]],[["mutexguard"],["lockresult",["mutexguard"]]]]],[11,"wait_while","","Blocks the current thread until this condition variable…",216,[[["mutexguard"],["self"],["f"]],[["mutexguard"],["lockresult",["mutexguard"]]]]],[11,"wait_timeout_ms","","Waits on this condition variable for a notification,…",216,[[["mutexguard"],["u32"],["self"]],["lockresult"]]],[11,"wait_timeout","","Waits on this condition variable for a notification,…",216,[[["mutexguard"],["self"],["duration"]],["lockresult"]]],[11,"wait_timeout_while","","Waits on this condition variable for a notification,…",216,[[["duration"],["mutexguard"],["self"],["f"]],["lockresult"]]],[11,"notify_one","","Wakes up one blocked thread on this condvar.",216,[[["self"]]]],[11,"notify_all","","Wakes up all blocked threads on this condvar.",216,[[["self"]]]],[11,"new","","Creates a new mutex in an unlocked state ready for use.",217,[[["t"]],["mutex"]]],[11,"lock","","Acquires a mutex, blocking the current thread until it is…",217,[[["self"]],[["mutexguard"],["lockresult",["mutexguard"]]]]],[11,"try_lock","","Attempts to acquire this lock.",217,[[["self"]],[["mutexguard"],["trylockresult",["mutexguard"]]]]],[11,"is_poisoned","","Determines whether the mutex is poisoned.",217,[[["self"]],["bool"]]],[11,"into_inner","","Consumes this mutex, returning the underlying data.",217,[[],["lockresult"]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",217,[[["self"]],[["t"],["lockresult"]]]],[11,"new","","Creates a new `Once` value.",218,[[],["once"]]],[11,"call_once","","Performs an initialization routine once and only once. The…",218,[[["self"],["f"]]]],[11,"call_once_force","","Performs the same function as [`call_once`] except ignores…",218,[[["self"],["f"]]]],[11,"is_completed","","Returns `true` if some `call_once` call has completed…",218,[[["self"]],["bool"]]],[11,"poisoned","","Returns `true` if the associated [`Once`] was poisoned…",219,[[["self"]],["bool"]]],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",220,[[["t"]],["rwlock"]]],[11,"read","","Locks this rwlock with shared read access, blocking the…",220,[[["self"]],[["lockresult",["rwlockreadguard"]],["rwlockreadguard"]]]],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",220,[[["self"]],[["trylockresult",["rwlockreadguard"]],["rwlockreadguard"]]]],[11,"write","","Locks this rwlock with exclusive write access, blocking…",220,[[["self"]],[["rwlockwriteguard"],["lockresult",["rwlockwriteguard"]]]]],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",220,[[["self"]],[["trylockresult",["rwlockwriteguard"]],["rwlockwriteguard"]]]],[11,"is_poisoned","","Determines whether the lock is poisoned.",220,[[["self"]],["bool"]]],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",220,[[],["lockresult"]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",220,[[["self"]],[["t"],["lockresult"]]]],[6,"LockResult","","A type alias for the result of a lock method which can be…",null,null],[6,"TryLockResult","","A type alias for the result of a nonblocking locking method.",null,null],[17,"ONCE_INIT","","Initialization value for static [`Once`] values.",null,null],[0,"time","std","Temporal quantification.",null,null],[3,"Duration","std::time","A `Duration` type to represent a span of time, typically…",null,null],[3,"Instant","","A measurement of a monotonically nondecreasing clock.…",null,null],[3,"SystemTime","","A measurement of the system clock, useful for talking to…",null,null],[3,"SystemTimeError","","An error returned from the `duration_since` and `elapsed`…",null,null],[17,"UNIX_EPOCH","","An anchor in time which can be used to create new…",null,null],[11,"now","","Returns an instant corresponding to \"now\".",221,[[],["instant"]]],[11,"duration_since","","Returns the amount of time elapsed from another instant to…",221,[[["instant"],["self"]],["duration"]]],[11,"checked_duration_since","","Returns the amount of time elapsed from another instant to…",221,[[["instant"],["self"]],[["duration"],["option",["duration"]]]]],[11,"saturating_duration_since","","Returns the amount of time elapsed from another instant to…",221,[[["instant"],["self"]],["duration"]]],[11,"elapsed","","Returns the amount of time elapsed since this instant was…",221,[[["self"]],["duration"]]],[11,"checked_add","","Returns `Some(t)` where `t` is the time `self + duration`…",221,[[["self"],["duration"]],[["instant"],["option",["instant"]]]]],[11,"checked_sub","","Returns `Some(t)` where `t` is the time `self - duration`…",221,[[["self"],["duration"]],[["instant"],["option",["instant"]]]]],[18,"UNIX_EPOCH","","An anchor in time which can be used to create new…",222,null],[11,"now","","Returns the system time corresponding to \"now\".",222,[[],["systemtime"]]],[11,"duration_since","","Returns the amount of time elapsed from an earlier point…",222,[[["systemtime"],["self"]],[["systemtimeerror"],["duration"],["result",["duration","systemtimeerror"]]]]],[11,"elapsed","","Returns the difference between the clock time when this…",222,[[["self"]],[["systemtimeerror"],["duration"],["result",["duration","systemtimeerror"]]]]],[11,"checked_add","","Returns `Some(t)` where `t` is the time `self + duration`…",222,[[["self"],["duration"]],[["systemtime"],["option",["systemtime"]]]]],[11,"checked_sub","","Returns `Some(t)` where `t` is the time `self - duration`…",222,[[["self"],["duration"]],[["systemtime"],["option",["systemtime"]]]]],[11,"duration","","Returns the positive duration which represents how far…",223,[[["self"]],["duration"]]],[0,"task","std","Types and Traits for working with asynchronous tasks.",null,null],[4,"Poll","std::task","Indicates whether a value is available or if the current…",null,null],[13,"Ready","","Represents that a value is immediately ready.",224,null],[13,"Pending","","Represents that a value is not ready yet.",224,null],[3,"Context","","The `Context` of an asynchronous task.",null,null],[3,"RawWaker","","A `RawWaker` allows the implementor of a task executor to…",null,null],[3,"RawWakerVTable","","A virtual function pointer table (vtable) that specifies…",null,null],[3,"Waker","","A `Waker` is a handle for waking up a task by notifying…",null,null],[0,"future","std","Asynchronous values.",null,null],[8,"Future","std::future","A future represents an asynchronous computation.",null,null],[16,"Output","","The type of value produced on completion.",225,null],[10,"poll","","Attempt to resolve the future to a final value,…",225,[[["pin"],["self"],["context"]],["poll"]]],[11,"new","std::sync","Creates a `PoisonError`.",226,[[["t"]],["poisonerror"]]],[11,"into_inner","","Consumes this error indicating that a lock is poisoned,…",226,[[],["t"]]],[11,"get_ref","","Reaches into this error indicating that a lock is…",226,[[["self"]],["t"]]],[11,"get_mut","","Reaches into this error indicating that a lock is…",226,[[["self"]],["t"]]],[11,"read_exact_at","std::os::unix::fs","Reads the exact number of byte required to fill `buf` from…",160,[[["u64"],["self"]],["result"]]],[11,"write_all_at","","Attempts to write an entire buffer starting from a given…",160,[[["self"],["u64"]],["result"]]],[11,"is_unnamed","std::os::unix::net","Returns `true` if the address is unnamed.",227,[[["self"]],["bool"]]],[11,"as_pathname","","Returns the contents of this address if it is a `pathname`…",227,[[["self"]],[["path"],["option",["path"]]]]],[11,"connect","","Connects to the socket named by `path`.",228,[[["path"],["asref",["path"]]],[["result",["unixstream"]],["unixstream"]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",228,[[],["result"]]],[11,"try_clone","","Creates a new independently owned handle to the underlying…",228,[[["self"]],[["result",["unixstream"]],["unixstream"]]]],[11,"local_addr","","Returns the socket address of the local half of this…",228,[[["self"]],[["result",["socketaddr"]],["socketaddr"]]]],[11,"peer_addr","","Returns the socket address of the remote half of this…",228,[[["self"]],[["result",["socketaddr"]],["socketaddr"]]]],[11,"set_read_timeout","","Sets the read timeout for the socket.",228,[[["option",["duration"]],["self"],["duration"]],["result"]]],[11,"set_write_timeout","","Sets the write timeout for the socket.",228,[[["option",["duration"]],["self"],["duration"]],["result"]]],[11,"read_timeout","","Returns the read timeout of this socket.",228,[[["self"]],[["result",["option"]],["option",["duration"]]]]],[11,"write_timeout","","Returns the write timeout of this socket.",228,[[["self"]],[["result",["option"]],["option",["duration"]]]]],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",228,[[["self"],["bool"]],["result"]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",228,[[["self"]],[["result",["option"]],["option",["error"]]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this…",228,[[["self"],["shutdown"]],["result"]]],[11,"bind","","Creates a new `UnixListener` bound to the specified socket.",229,[[["path"],["asref",["path"]]],[["unixlistener"],["result",["unixlistener"]]]]],[11,"accept","","Accepts a new incoming connection to this listener.",229,[[["self"]],["result"]]],[11,"try_clone","","Creates a new independently owned handle to the underlying…",229,[[["self"]],[["unixlistener"],["result",["unixlistener"]]]]],[11,"local_addr","","Returns the local socket address of this listener.",229,[[["self"]],[["result",["socketaddr"]],["socketaddr"]]]],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",229,[[["self"],["bool"]],["result"]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",229,[[["self"]],[["result",["option"]],["option",["error"]]]]],[11,"incoming","","Returns an iterator over incoming connections.",229,[[["self"]],["incoming"]]],[11,"bind","","Creates a Unix datagram socket bound to the given path.",230,[[["path"],["asref",["path"]]],[["unixdatagram"],["result",["unixdatagram"]]]]],[11,"unbound","","Creates a Unix Datagram socket which is not bound to any…",230,[[],[["unixdatagram"],["result",["unixdatagram"]]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",230,[[],["result"]]],[11,"connect","","Connects the socket to the specified address.",230,[[["path"],["asref",["path"]],["self"]],["result"]]],[11,"try_clone","","Creates a new independently owned handle to the underlying…",230,[[["self"]],[["unixdatagram"],["result",["unixdatagram"]]]]],[11,"local_addr","","Returns the address of this socket.",230,[[["self"]],[["result",["socketaddr"]],["socketaddr"]]]],[11,"peer_addr","","Returns the address of this socket's peer.",230,[[["self"]],[["result",["socketaddr"]],["socketaddr"]]]],[11,"recv_from","","Receives data from the socket.",230,[[["self"]],["result"]]],[11,"recv","","Receives data from the socket.",230,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"send_to","","Sends data on the socket to the specified address.",230,[[["path"],["asref",["path"]],["self"]],[["result",["usize"]],["usize"]]]],[11,"send","","Sends data on the socket to the socket's peer.",230,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"set_read_timeout","","Sets the read timeout for the socket.",230,[[["option",["duration"]],["self"],["duration"]],["result"]]],[11,"set_write_timeout","","Sets the write timeout for the socket.",230,[[["option",["duration"]],["self"],["duration"]],["result"]]],[11,"read_timeout","","Returns the read timeout of this socket.",230,[[["self"]],[["result",["option"]],["option",["duration"]]]]],[11,"write_timeout","","Returns the write timeout of this socket.",230,[[["self"]],[["result",["option"]],["option",["duration"]]]]],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",230,[[["self"],["bool"]],["result"]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",230,[[["self"]],[["result",["option"]],["option",["error"]]]]],[11,"shutdown","","Shut down the read, write, or both halves of this…",230,[[["self"],["shutdown"]],["result"]]],[11,"before_exec","std::os::unix::process","Schedules a closure to be run just before the `exec`…",170,[[["self"],["f"]],["command"]]],[0,"alloc","std","Memory allocation APIs",null,null],[3,"Global","std::alloc","The global memory allocator.",null,null],[5,"alloc","","Allocate memory with the global allocator.",null,[[["layout"]]]],[5,"dealloc","","Deallocate memory with the global allocator.",null,[[["layout"]]]],[5,"realloc","","Reallocate memory with the global allocator.",null,[[["layout"],["usize"]]]],[5,"alloc_zeroed","","Allocate zero-initialized memory with the global allocator.",null,[[["layout"]]]],[5,"handle_alloc_error","","Abort on memory allocation error or failure.",null,[[["layout"]]]],[3,"Excess","","Represents the combination of a starting address and a…",null,null],[12,"0","","",231,null],[12,"1","","",231,null],[3,"Layout","","Layout of a block of memory.",null,null],[3,"LayoutErr","","The parameters given to `Layout::from_size_align` or some…",null,null],[3,"AllocErr","","The `AllocErr` error indicates an allocation failure that…",null,null],[3,"CannotReallocInPlace","","The `CannotReallocInPlace` error is used when…",null,null],[8,"GlobalAlloc","","A memory allocator that can be registered as the standard…",null,null],[10,"alloc","","Allocate memory as described by the given `layout`.",232,[[["self"],["layout"]]]],[10,"dealloc","","Deallocate the block of memory at the given `ptr` pointer…",232,[[["self"],["layout"]]]],[11,"alloc_zeroed","","Behaves like `alloc`, but also ensures that the contents…",232,[[["self"],["layout"]]]],[11,"realloc","","Shrink or grow a block of memory to the given `new_size`.…",232,[[["usize"],["self"],["layout"]]]],[8,"Alloc","","An implementation of `Alloc` can allocate, reallocate, and…",null,null],[10,"alloc","","Returns a pointer meeting the size and alignment…",233,[[["self"],["layout"]],[["allocerr"],["result",["nonnull","allocerr"]],["nonnull",["u8"]]]]],[10,"dealloc","","Deallocate the memory referenced by `ptr`.",233,[[["layout"],["self"],["nonnull",["u8"]],["u8"]]]],[11,"usable_size","","Returns bounds on the guaranteed usable size of a…",233,[[["self"],["layout"]]]],[11,"realloc","","Returns a pointer suitable for holding data described by a…",233,[[["layout"],["usize"],["self"],["nonnull",["u8"]],["u8"]],[["allocerr"],["result",["nonnull","allocerr"]],["nonnull",["u8"]]]]],[11,"alloc_zeroed","","Behaves like `alloc`, but also ensures that the contents…",233,[[["self"],["layout"]],[["allocerr"],["result",["nonnull","allocerr"]],["nonnull",["u8"]]]]],[11,"alloc_excess","","Behaves like `alloc`, but also returns the whole size of…",233,[[["self"],["layout"]],[["result",["excess","allocerr"]],["allocerr"],["excess"]]]],[11,"realloc_excess","","Behaves like `realloc`, but also returns the whole size of…",233,[[["layout"],["usize"],["self"],["nonnull",["u8"]],["u8"]],[["result",["excess","allocerr"]],["allocerr"],["excess"]]]],[11,"grow_in_place","","Attempts to extend the allocation referenced by `ptr` to…",233,[[["layout"],["usize"],["self"],["nonnull",["u8"]],["u8"]],[["cannotreallocinplace"],["result",["cannotreallocinplace"]]]]],[11,"shrink_in_place","","Attempts to shrink the allocation referenced by `ptr` to…",233,[[["layout"],["usize"],["self"],["nonnull",["u8"]],["u8"]],[["cannotreallocinplace"],["result",["cannotreallocinplace"]]]]],[11,"alloc_one","","Allocates a block suitable for holding an instance of `T`.",233,[[["self"]],[["result",["nonnull","allocerr"]],["nonnull"],["allocerr"]]]],[11,"dealloc_one","","Deallocates a block suitable for holding an instance of `T`.",233,[[["self"],["nonnull"]]]],[11,"alloc_array","","Allocates a block suitable for holding `n` instances of `T`.",233,[[["self"],["usize"]],[["result",["nonnull","allocerr"]],["nonnull"],["allocerr"]]]],[11,"realloc_array","","Reallocates a block previously suitable for holding…",233,[[["nonnull"],["usize"],["self"]],[["result",["nonnull","allocerr"]],["nonnull"],["allocerr"]]]],[11,"dealloc_array","","Deallocates a block suitable for holding `n` instances of…",233,[[["self"],["nonnull"],["usize"]],[["result",["allocerr"]],["allocerr"]]]],[3,"System","","The default memory allocator provided by the operating…",null,null],[5,"set_alloc_error_hook","","Registers a custom allocation error hook, replacing any…",null,[[]]],[5,"take_alloc_error_hook","","Unregisters the current allocation error hook, returning it.",null,[[]]],[14,"panic","std","Panics the current thread.",null,null],[14,"print","","Prints to the standard output.",null,null],[14,"println","","Prints to the standard output, with a newline.",null,null],[14,"eprint","","Prints to the standard error.",null,null],[14,"eprintln","","Prints to the standard error, with a newline.",null,null],[14,"dbg","","Prints and returns the value of a given expression for…",null,null],[14,"thread_local","","Declare a new thread local storage key of type…",null,null],[14,"is_arm_feature_detected","","Prevents compilation if `is_arm_feature_detected` is used…",null,null],[14,"is_aarch64_feature_detected","","Prevents compilation if `is_aarch64_feature_detected` is…",null,null],[14,"is_powerpc_feature_detected","","Prevents compilation if `is_powerpc_feature_detected` is…",null,null],[14,"is_powerpc64_feature_detected","","Prevents compilation if `is_powerpc64_feature_detected` is…",null,null],[14,"is_mips_feature_detected","","Prevents compilation if `is_mips_feature_detected` is used…",null,null],[14,"is_mips64_feature_detected","","Prevents compilation if `is_mips64_feature_detected` is…",null,null],[14,"is_x86_feature_detected","","A macro to test at runtime whether a CPU feature is…",null,null],[15,"bool","","The boolean type.",null,null],[15,"never","","The `!` type, also called \"never\".",null,null],[15,"char","","A character type.",null,null],[15,"unit","","The `()` type, sometimes called \"unit\" or \"nil\".",null,null],[15,"pointer","","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[15,"array","","A fixed-size array, denoted `[T; N]`, for the element…",null,null],[15,"slice","","A dynamically-sized view into a contiguous sequence,…",null,null],[15,"str","","String slices.",null,null],[15,"tuple","","A finite heterogeneous sequence, `(T, U, ..)`.",null,null],[15,"f32","","The 32-bit floating point type.",null,null],[15,"f64","","The 64-bit floating point type.",null,null],[15,"i8","","The 8-bit signed integer type.",null,null],[15,"i16","","The 16-bit signed integer type.",null,null],[15,"i32","","The 32-bit signed integer type.",null,null],[15,"i64","","The 64-bit signed integer type.",null,null],[15,"i128","","The 128-bit signed integer type.",null,null],[15,"u8","","The 8-bit unsigned integer type.",null,null],[15,"u16","","The 16-bit unsigned integer type.",null,null],[15,"u32","","The 32-bit unsigned integer type.",null,null],[15,"u64","","The 64-bit unsigned integer type.",null,null],[15,"u128","","The 128-bit unsigned integer type.",null,null],[15,"isize","","The pointer-sized signed integer type.",null,null],[15,"usize","","The pointer-sized unsigned integer type.",null,null],[15,"reference","","References, both shared and mutable.",null,null],[15,"fn","","Function pointers, like `fn(usize) -> bool`.",null,null],[21,"as","","Cast between types, or rename an import.",null,null],[21,"break","","Exit early from a loop.",null,null],[21,"const","","Compile-time constants and deterministic functions.",null,null],[21,"continue","","Skip to the next iteration of a loop.",null,null],[21,"crate","","A Rust binary or library.",null,null],[21,"else","","What to do when an [`if`] condition does not hold.",null,null],[21,"enum","","A type that can be any one of several variants.",null,null],[21,"extern","","Link to or import external code.",null,null],[21,"false","","A value of type [`bool`] representing logical false.",null,null],[21,"fn","","A function or function pointer.",null,null],[21,"for","","Iteration with [`in`], trait implementation with [`impl`],…",null,null],[21,"if","","Evaluate a block if a condition holds.",null,null],[21,"impl","","Implement some functionality for a type.",null,null],[21,"in","","Iterate over a series of values with [`for`].",null,null],[21,"let","","Bind a value to a variable.",null,null],[21,"while","","Loop while a condition is upheld.",null,null],[21,"loop","","Loop indefinitely.",null,null],[21,"match","","Control flow based on pattern matching.",null,null],[21,"mod","","Organize code into [modules].",null,null],[21,"move","","Capture a [closure]'s environment by value.",null,null],[21,"mut","","A mutable binding, reference, or pointer.",null,null],[21,"pub","","Make an item visible to others.",null,null],[21,"ref","","Bind by reference during pattern matching.",null,null],[21,"return","","Return a value from a function.",null,null],[21,"self","","The receiver of a method, or the current module.",null,null],[21,"Self","","The implementing type within a [`trait`] or [`impl`]…",null,null],[21,"static","","A place that is valid for the duration of a program.",null,null],[21,"struct","","A type that is composed of other types.",null,null],[21,"super","","The parent of the current [module].",null,null],[21,"trait","","A common interface for a class of types.",null,null],[21,"true","","A value of type [`bool`] representing logical true.",null,null],[21,"type","","Define an alias for an existing type.",null,null],[21,"unsafe","","Code or interfaces whose [memory safety] cannot be…",null,null],[21,"use","","Import or rename items from other crates or modules.",null,null],[21,"where","","Add constraints that must be upheld to use an item.",null,null],[21,"async","","Return a [`Future`] instead of blocking the current thread.",null,null],[21,"await","","Suspend execution until the result of a [`Future`] is ready.",null,null],[21,"dyn","","Name the type of a [trait object].",null,null],[21,"union","","The [Rust equivalent of a C-style union][union].",null,null],[11,"from","std::borrow","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"from","std::boxed","",234,[[["t"]],["t"]]],[11,"from","","",234,[[],["t"]]],[11,"into_iter","","",234,[[],["i"]]],[11,"into_searcher","","",234,[[["str"]],["charpredicatesearcher"]]],[11,"is_contained_in","","",234,[[["str"]],["bool"]]],[11,"is_prefix_of","","",234,[[["str"]],["bool"]]],[11,"is_suffix_of","","",234,[[["str"]],["bool"]]],[11,"try_from","","",234,[[["u"]],["result"]]],[11,"into","","",234,[[],["u"]]],[11,"try_into","","",234,[[],["result"]]],[11,"borrow","","",234,[[["self"]],["t"]]],[11,"borrow_mut","","",234,[[["self"]],["t"]]],[11,"type_id","","",234,[[["self"]],["typeid"]]],[11,"to_owned","","",234,[[["self"]],["t"]]],[11,"clone_into","","",234,[[["self"],["t"]]]],[11,"to_string","","",234,[[["self"]],["string"]]],[11,"from","std::fmt","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",235,[[["t"]],["t"]]],[11,"try_from","","",235,[[["u"]],["result"]]],[11,"into","","",235,[[],["u"]]],[11,"try_into","","",235,[[],["result"]]],[11,"borrow","","",235,[[["self"]],["t"]]],[11,"borrow_mut","","",235,[[["self"]],["t"]]],[11,"type_id","","",235,[[["self"]],["typeid"]]],[11,"to_owned","","",235,[[["self"]],["t"]]],[11,"clone_into","","",235,[[["self"],["t"]]]],[11,"to_string","","",235,[[["self"]],["string"]]],[11,"from","","",236,[[["t"]],["t"]]],[11,"try_from","","",236,[[["u"]],["result"]]],[11,"into","","",236,[[],["u"]]],[11,"try_into","","",236,[[],["result"]]],[11,"borrow","","",236,[[["self"]],["t"]]],[11,"borrow_mut","","",236,[[["self"]],["t"]]],[11,"type_id","","",236,[[["self"]],["typeid"]]],[11,"to_owned","","",236,[[["self"]],["t"]]],[11,"clone_into","","",236,[[["self"],["t"]]]],[11,"to_string","","",236,[[["self"]],["string"]]],[11,"from","","",237,[[["t"]],["t"]]],[11,"try_from","","",237,[[["u"]],["result"]]],[11,"into","","",237,[[],["u"]]],[11,"try_into","","",237,[[],["result"]]],[11,"borrow","","",237,[[["self"]],["t"]]],[11,"borrow_mut","","",237,[[["self"]],["t"]]],[11,"type_id","","",237,[[["self"]],["typeid"]]],[11,"from","","",238,[[["t"]],["t"]]],[11,"try_from","","",238,[[["u"]],["result"]]],[11,"into","","",238,[[],["u"]]],[11,"try_into","","",238,[[],["result"]]],[11,"borrow","","",238,[[["self"]],["t"]]],[11,"borrow_mut","","",238,[[["self"]],["t"]]],[11,"type_id","","",238,[[["self"]],["typeid"]]],[11,"from","","",239,[[["t"]],["t"]]],[11,"try_from","","",239,[[["u"]],["result"]]],[11,"into","","",239,[[],["u"]]],[11,"try_into","","",239,[[],["result"]]],[11,"borrow","","",239,[[["self"]],["t"]]],[11,"borrow_mut","","",239,[[["self"]],["t"]]],[11,"type_id","","",239,[[["self"]],["typeid"]]],[11,"from","","",240,[[["t"]],["t"]]],[11,"try_from","","",240,[[["u"]],["result"]]],[11,"into","","",240,[[],["u"]]],[11,"try_into","","",240,[[],["result"]]],[11,"borrow","","",240,[[["self"]],["t"]]],[11,"borrow_mut","","",240,[[["self"]],["t"]]],[11,"type_id","","",240,[[["self"]],["typeid"]]],[11,"from","","",241,[[["t"]],["t"]]],[11,"try_from","","",241,[[["u"]],["result"]]],[11,"into","","",241,[[],["u"]]],[11,"try_into","","",241,[[],["result"]]],[11,"borrow","","",241,[[["self"]],["t"]]],[11,"borrow_mut","","",241,[[["self"]],["t"]]],[11,"type_id","","",241,[[["self"]],["typeid"]]],[11,"from","","",242,[[["t"]],["t"]]],[11,"try_from","","",242,[[["u"]],["result"]]],[11,"into","","",242,[[],["u"]]],[11,"try_into","","",242,[[],["result"]]],[11,"borrow","","",242,[[["self"]],["t"]]],[11,"borrow_mut","","",242,[[["self"]],["t"]]],[11,"type_id","","",242,[[["self"]],["typeid"]]],[11,"from","std::rc","",243,[[["t"]],["t"]]],[11,"from","","",243,[[],["t"]]],[11,"try_from","","",243,[[["u"]],["result"]]],[11,"into","","",243,[[],["u"]]],[11,"try_into","","",243,[[],["result"]]],[11,"borrow","","",243,[[["self"]],["t"]]],[11,"borrow_mut","","",243,[[["self"]],["t"]]],[11,"type_id","","",243,[[["self"]],["typeid"]]],[11,"to_owned","","",243,[[["self"]],["t"]]],[11,"clone_into","","",243,[[["self"],["t"]]]],[11,"to_string","","",243,[[["self"]],["string"]]],[11,"from","","",244,[[["t"]],["t"]]],[11,"try_from","","",244,[[["u"]],["result"]]],[11,"into","","",244,[[],["u"]]],[11,"try_into","","",244,[[],["result"]]],[11,"borrow","","",244,[[["self"]],["t"]]],[11,"borrow_mut","","",244,[[["self"]],["t"]]],[11,"type_id","","",244,[[["self"]],["typeid"]]],[11,"to_owned","","",244,[[["self"]],["t"]]],[11,"clone_into","","",244,[[["self"],["t"]]]],[11,"from","std::slice","",245,[[["t"]],["t"]]],[11,"into_iter","","",245,[[],["i"]]],[11,"try_from","","",245,[[["u"]],["result"]]],[11,"into","","",245,[[],["u"]]],[11,"try_into","","",245,[[],["result"]]],[11,"borrow","","",245,[[["self"]],["t"]]],[11,"borrow_mut","","",245,[[["self"]],["t"]]],[11,"type_id","","",245,[[["self"]],["typeid"]]],[11,"to_owned","","",245,[[["self"]],["t"]]],[11,"clone_into","","",245,[[["self"],["t"]]]],[11,"from","","",246,[[["t"]],["t"]]],[11,"into_iter","","",246,[[],["i"]]],[11,"try_from","","",246,[[["u"]],["result"]]],[11,"into","","",246,[[],["u"]]],[11,"try_into","","",246,[[],["result"]]],[11,"borrow","","",246,[[["self"]],["t"]]],[11,"borrow_mut","","",246,[[["self"]],["t"]]],[11,"type_id","","",246,[[["self"]],["typeid"]]],[11,"to_owned","","",246,[[["self"]],["t"]]],[11,"clone_into","","",246,[[["self"],["t"]]]],[11,"from","","",247,[[["t"]],["t"]]],[11,"into_iter","","",247,[[],["i"]]],[11,"try_from","","",247,[[["u"]],["result"]]],[11,"into","","",247,[[],["u"]]],[11,"try_into","","",247,[[],["result"]]],[11,"borrow","","",247,[[["self"]],["t"]]],[11,"borrow_mut","","",247,[[["self"]],["t"]]],[11,"type_id","","",247,[[["self"]],["typeid"]]],[11,"to_owned","","",247,[[["self"]],["t"]]],[11,"clone_into","","",247,[[["self"],["t"]]]],[11,"from","","",248,[[["t"]],["t"]]],[11,"into_iter","","",248,[[],["i"]]],[11,"try_from","","",248,[[["u"]],["result"]]],[11,"into","","",248,[[],["u"]]],[11,"try_into","","",248,[[],["result"]]],[11,"borrow","","",248,[[["self"]],["t"]]],[11,"borrow_mut","","",248,[[["self"]],["t"]]],[11,"type_id","","",248,[[["self"]],["typeid"]]],[11,"from","","",249,[[["t"]],["t"]]],[11,"into_iter","","",249,[[],["i"]]],[11,"try_from","","",249,[[["u"]],["result"]]],[11,"into","","",249,[[],["u"]]],[11,"try_into","","",249,[[],["result"]]],[11,"borrow","","",249,[[["self"]],["t"]]],[11,"borrow_mut","","",249,[[["self"]],["t"]]],[11,"type_id","","",249,[[["self"]],["typeid"]]],[11,"from","","",250,[[["t"]],["t"]]],[11,"into_iter","","",250,[[],["i"]]],[11,"try_from","","",250,[[["u"]],["result"]]],[11,"into","","",250,[[],["u"]]],[11,"try_into","","",250,[[],["result"]]],[11,"borrow","","",250,[[["self"]],["t"]]],[11,"borrow_mut","","",250,[[["self"]],["t"]]],[11,"type_id","","",250,[[["self"]],["typeid"]]],[11,"to_owned","","",250,[[["self"]],["t"]]],[11,"clone_into","","",250,[[["self"],["t"]]]],[11,"from","","",251,[[["t"]],["t"]]],[11,"into_iter","","",251,[[],["i"]]],[11,"try_from","","",251,[[["u"]],["result"]]],[11,"into","","",251,[[],["u"]]],[11,"try_into","","",251,[[],["result"]]],[11,"borrow","","",251,[[["self"]],["t"]]],[11,"borrow_mut","","",251,[[["self"]],["t"]]],[11,"type_id","","",251,[[["self"]],["typeid"]]],[11,"from","","",252,[[["t"]],["t"]]],[11,"into_iter","","",252,[[],["i"]]],[11,"try_from","","",252,[[["u"]],["result"]]],[11,"into","","",252,[[],["u"]]],[11,"try_into","","",252,[[],["result"]]],[11,"borrow","","",252,[[["self"]],["t"]]],[11,"borrow_mut","","",252,[[["self"]],["t"]]],[11,"type_id","","",252,[[["self"]],["typeid"]]],[11,"to_owned","","",252,[[["self"]],["t"]]],[11,"clone_into","","",252,[[["self"],["t"]]]],[11,"from","","",253,[[["t"]],["t"]]],[11,"into_iter","","",253,[[],["i"]]],[11,"try_from","","",253,[[["u"]],["result"]]],[11,"into","","",253,[[],["u"]]],[11,"try_into","","",253,[[],["result"]]],[11,"borrow","","",253,[[["self"]],["t"]]],[11,"borrow_mut","","",253,[[["self"]],["t"]]],[11,"type_id","","",253,[[["self"]],["typeid"]]],[11,"from","","",254,[[["t"]],["t"]]],[11,"into_iter","","",254,[[],["i"]]],[11,"try_from","","",254,[[["u"]],["result"]]],[11,"into","","",254,[[],["u"]]],[11,"try_into","","",254,[[],["result"]]],[11,"borrow","","",254,[[["self"]],["t"]]],[11,"borrow_mut","","",254,[[["self"]],["t"]]],[11,"type_id","","",254,[[["self"]],["typeid"]]],[11,"to_owned","","",254,[[["self"]],["t"]]],[11,"clone_into","","",254,[[["self"],["t"]]]],[11,"from","","",255,[[["t"]],["t"]]],[11,"into_iter","","",255,[[],["i"]]],[11,"try_from","","",255,[[["u"]],["result"]]],[11,"into","","",255,[[],["u"]]],[11,"try_into","","",255,[[],["result"]]],[11,"borrow","","",255,[[["self"]],["t"]]],[11,"borrow_mut","","",255,[[["self"]],["t"]]],[11,"type_id","","",255,[[["self"]],["typeid"]]],[11,"to_owned","","",255,[[["self"]],["t"]]],[11,"clone_into","","",255,[[["self"],["t"]]]],[11,"from","","",256,[[["t"]],["t"]]],[11,"into_iter","","",256,[[],["i"]]],[11,"try_from","","",256,[[["u"]],["result"]]],[11,"into","","",256,[[],["u"]]],[11,"try_into","","",256,[[],["result"]]],[11,"borrow","","",256,[[["self"]],["t"]]],[11,"borrow_mut","","",256,[[["self"]],["t"]]],[11,"type_id","","",256,[[["self"]],["typeid"]]],[11,"from","","",257,[[["t"]],["t"]]],[11,"into_iter","","",257,[[],["i"]]],[11,"try_from","","",257,[[["u"]],["result"]]],[11,"into","","",257,[[],["u"]]],[11,"try_into","","",257,[[],["result"]]],[11,"borrow","","",257,[[["self"]],["t"]]],[11,"borrow_mut","","",257,[[["self"]],["t"]]],[11,"type_id","","",257,[[["self"]],["typeid"]]],[11,"from","","",258,[[["t"]],["t"]]],[11,"into_iter","","",258,[[],["i"]]],[11,"try_from","","",258,[[["u"]],["result"]]],[11,"into","","",258,[[],["u"]]],[11,"try_into","","",258,[[],["result"]]],[11,"borrow","","",258,[[["self"]],["t"]]],[11,"borrow_mut","","",258,[[["self"]],["t"]]],[11,"type_id","","",258,[[["self"]],["typeid"]]],[11,"to_owned","","",258,[[["self"]],["t"]]],[11,"clone_into","","",258,[[["self"],["t"]]]],[11,"from","","",259,[[["t"]],["t"]]],[11,"into_iter","","",259,[[],["i"]]],[11,"try_from","","",259,[[["u"]],["result"]]],[11,"into","","",259,[[],["u"]]],[11,"try_into","","",259,[[],["result"]]],[11,"borrow","","",259,[[["self"]],["t"]]],[11,"borrow_mut","","",259,[[["self"]],["t"]]],[11,"type_id","","",259,[[["self"]],["typeid"]]],[11,"from","","",260,[[["t"]],["t"]]],[11,"into_iter","","",260,[[],["i"]]],[11,"try_from","","",260,[[["u"]],["result"]]],[11,"into","","",260,[[],["u"]]],[11,"try_into","","",260,[[],["result"]]],[11,"borrow","","",260,[[["self"]],["t"]]],[11,"borrow_mut","","",260,[[["self"]],["t"]]],[11,"type_id","","",260,[[["self"]],["typeid"]]],[11,"from","","",261,[[["t"]],["t"]]],[11,"into_iter","","",261,[[],["i"]]],[11,"try_from","","",261,[[["u"]],["result"]]],[11,"into","","",261,[[],["u"]]],[11,"try_into","","",261,[[],["result"]]],[11,"borrow","","",261,[[["self"]],["t"]]],[11,"borrow_mut","","",261,[[["self"]],["t"]]],[11,"type_id","","",261,[[["self"]],["typeid"]]],[11,"from","","",262,[[["t"]],["t"]]],[11,"into_iter","","",262,[[],["i"]]],[11,"try_from","","",262,[[["u"]],["result"]]],[11,"into","","",262,[[],["u"]]],[11,"try_into","","",262,[[],["result"]]],[11,"borrow","","",262,[[["self"]],["t"]]],[11,"borrow_mut","","",262,[[["self"]],["t"]]],[11,"type_id","","",262,[[["self"]],["typeid"]]],[11,"from","","",263,[[["t"]],["t"]]],[11,"into_iter","","",263,[[],["i"]]],[11,"try_from","","",263,[[["u"]],["result"]]],[11,"into","","",263,[[],["u"]]],[11,"try_into","","",263,[[],["result"]]],[11,"borrow","","",263,[[["self"]],["t"]]],[11,"borrow_mut","","",263,[[["self"]],["t"]]],[11,"type_id","","",263,[[["self"]],["typeid"]]],[11,"from","std::str::pattern","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"into","","",19,[[],["u"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"from","","",264,[[["t"]],["t"]]],[11,"try_from","","",264,[[["u"]],["result"]]],[11,"into","","",264,[[],["u"]]],[11,"try_into","","",264,[[],["result"]]],[11,"borrow","","",264,[[["self"]],["t"]]],[11,"borrow_mut","","",264,[[["self"]],["t"]]],[11,"type_id","","",264,[[["self"]],["typeid"]]],[11,"to_owned","","",264,[[["self"]],["t"]]],[11,"clone_into","","",264,[[["self"],["t"]]]],[11,"from","","",265,[[["t"]],["t"]]],[11,"try_from","","",265,[[["u"]],["result"]]],[11,"into","","",265,[[],["u"]]],[11,"try_into","","",265,[[],["result"]]],[11,"borrow","","",265,[[["self"]],["t"]]],[11,"borrow_mut","","",265,[[["self"]],["t"]]],[11,"type_id","","",265,[[["self"]],["typeid"]]],[11,"to_owned","","",265,[[["self"]],["t"]]],[11,"clone_into","","",265,[[["self"],["t"]]]],[11,"from","","",266,[[["t"]],["t"]]],[11,"try_from","","",266,[[["u"]],["result"]]],[11,"into","","",266,[[],["u"]]],[11,"try_into","","",266,[[],["result"]]],[11,"borrow","","",266,[[["self"]],["t"]]],[11,"borrow_mut","","",266,[[["self"]],["t"]]],[11,"type_id","","",266,[[["self"]],["typeid"]]],[11,"to_owned","","",266,[[["self"]],["t"]]],[11,"clone_into","","",266,[[["self"],["t"]]]],[11,"from","","",267,[[["t"]],["t"]]],[11,"try_from","","",267,[[["u"]],["result"]]],[11,"into","","",267,[[],["u"]]],[11,"try_into","","",267,[[],["result"]]],[11,"borrow","","",267,[[["self"]],["t"]]],[11,"borrow_mut","","",267,[[["self"]],["t"]]],[11,"type_id","","",267,[[["self"]],["typeid"]]],[11,"to_owned","","",267,[[["self"]],["t"]]],[11,"clone_into","","",267,[[["self"],["t"]]]],[11,"from","std::str","",268,[[["t"]],["t"]]],[11,"into_iter","","",268,[[],["i"]]],[11,"try_from","","",268,[[["u"]],["result"]]],[11,"into","","",268,[[],["u"]]],[11,"try_into","","",268,[[],["result"]]],[11,"borrow","","",268,[[["self"]],["t"]]],[11,"borrow_mut","","",268,[[["self"]],["t"]]],[11,"type_id","","",268,[[["self"]],["typeid"]]],[11,"to_owned","","",268,[[["self"]],["t"]]],[11,"clone_into","","",268,[[["self"],["t"]]]],[11,"from","","",269,[[["t"]],["t"]]],[11,"into_iter","","",269,[[],["i"]]],[11,"try_from","","",269,[[["u"]],["result"]]],[11,"into","","",269,[[],["u"]]],[11,"try_into","","",269,[[],["result"]]],[11,"borrow","","",269,[[["self"]],["t"]]],[11,"borrow_mut","","",269,[[["self"]],["t"]]],[11,"type_id","","",269,[[["self"]],["typeid"]]],[11,"to_owned","","",269,[[["self"]],["t"]]],[11,"clone_into","","",269,[[["self"],["t"]]]],[11,"from","","",270,[[["t"]],["t"]]],[11,"into_iter","","",270,[[],["i"]]],[11,"try_from","","",270,[[["u"]],["result"]]],[11,"into","","",270,[[],["u"]]],[11,"try_into","","",270,[[],["result"]]],[11,"borrow","","",270,[[["self"]],["t"]]],[11,"borrow_mut","","",270,[[["self"]],["t"]]],[11,"type_id","","",270,[[["self"]],["typeid"]]],[11,"to_owned","","",270,[[["self"]],["t"]]],[11,"clone_into","","",270,[[["self"],["t"]]]],[11,"from","","",271,[[["t"]],["t"]]],[11,"into_iter","","",271,[[],["i"]]],[11,"try_from","","",271,[[["u"]],["result"]]],[11,"into","","",271,[[],["u"]]],[11,"try_into","","",271,[[],["result"]]],[11,"borrow","","",271,[[["self"]],["t"]]],[11,"borrow_mut","","",271,[[["self"]],["t"]]],[11,"type_id","","",271,[[["self"]],["typeid"]]],[11,"to_owned","","",271,[[["self"]],["t"]]],[11,"clone_into","","",271,[[["self"],["t"]]]],[11,"from","","",272,[[["t"]],["t"]]],[11,"into_iter","","",272,[[],["i"]]],[11,"try_from","","",272,[[["u"]],["result"]]],[11,"into","","",272,[[],["u"]]],[11,"try_into","","",272,[[],["result"]]],[11,"borrow","","",272,[[["self"]],["t"]]],[11,"borrow_mut","","",272,[[["self"]],["t"]]],[11,"type_id","","",272,[[["self"]],["typeid"]]],[11,"to_owned","","",272,[[["self"]],["t"]]],[11,"clone_into","","",272,[[["self"],["t"]]]],[11,"from","","",273,[[["t"]],["t"]]],[11,"into_iter","","",273,[[],["i"]]],[11,"try_from","","",273,[[["u"]],["result"]]],[11,"into","","",273,[[],["u"]]],[11,"try_into","","",273,[[],["result"]]],[11,"borrow","","",273,[[["self"]],["t"]]],[11,"borrow_mut","","",273,[[["self"]],["t"]]],[11,"type_id","","",273,[[["self"]],["typeid"]]],[11,"to_owned","","",273,[[["self"]],["t"]]],[11,"clone_into","","",273,[[["self"],["t"]]]],[11,"from","","",274,[[["t"]],["t"]]],[11,"try_from","","",274,[[["u"]],["result"]]],[11,"into","","",274,[[],["u"]]],[11,"try_into","","",274,[[],["result"]]],[11,"borrow","","",274,[[["self"]],["t"]]],[11,"borrow_mut","","",274,[[["self"]],["t"]]],[11,"type_id","","",274,[[["self"]],["typeid"]]],[11,"to_owned","","",274,[[["self"]],["t"]]],[11,"clone_into","","",274,[[["self"],["t"]]]],[11,"to_string","","",274,[[["self"]],["string"]]],[11,"from","","",275,[[["t"]],["t"]]],[11,"into_iter","","",275,[[],["i"]]],[11,"try_from","","",275,[[["u"]],["result"]]],[11,"into","","",275,[[],["u"]]],[11,"try_into","","",275,[[],["result"]]],[11,"borrow","","",275,[[["self"]],["t"]]],[11,"borrow_mut","","",275,[[["self"]],["t"]]],[11,"type_id","","",275,[[["self"]],["typeid"]]],[11,"to_owned","","",275,[[["self"]],["t"]]],[11,"clone_into","","",275,[[["self"],["t"]]]],[11,"to_string","","",275,[[["self"]],["string"]]],[11,"from","","",276,[[["t"]],["t"]]],[11,"into_iter","","",276,[[],["i"]]],[11,"try_from","","",276,[[["u"]],["result"]]],[11,"into","","",276,[[],["u"]]],[11,"try_into","","",276,[[],["result"]]],[11,"borrow","","",276,[[["self"]],["t"]]],[11,"borrow_mut","","",276,[[["self"]],["t"]]],[11,"type_id","","",276,[[["self"]],["typeid"]]],[11,"to_owned","","",276,[[["self"]],["t"]]],[11,"clone_into","","",276,[[["self"],["t"]]]],[11,"to_string","","",276,[[["self"]],["string"]]],[11,"from","","",277,[[["t"]],["t"]]],[11,"into_iter","","",277,[[],["i"]]],[11,"try_from","","",277,[[["u"]],["result"]]],[11,"into","","",277,[[],["u"]]],[11,"try_into","","",277,[[],["result"]]],[11,"borrow","","",277,[[["self"]],["t"]]],[11,"borrow_mut","","",277,[[["self"]],["t"]]],[11,"type_id","","",277,[[["self"]],["typeid"]]],[11,"to_owned","","",277,[[["self"]],["t"]]],[11,"clone_into","","",277,[[["self"],["t"]]]],[11,"to_string","","",277,[[["self"]],["string"]]],[11,"from","","",278,[[["t"]],["t"]]],[11,"try_from","","",278,[[["u"]],["result"]]],[11,"into","","",278,[[],["u"]]],[11,"try_into","","",278,[[],["result"]]],[11,"borrow","","",278,[[["self"]],["t"]]],[11,"borrow_mut","","",278,[[["self"]],["t"]]],[11,"type_id","","",278,[[["self"]],["typeid"]]],[11,"to_owned","","",278,[[["self"]],["t"]]],[11,"clone_into","","",278,[[["self"],["t"]]]],[11,"to_string","","",278,[[["self"]],["string"]]],[11,"from","","",279,[[["t"]],["t"]]],[11,"into_iter","","",279,[[],["i"]]],[11,"try_from","","",279,[[["u"]],["result"]]],[11,"into","","",279,[[],["u"]]],[11,"try_into","","",279,[[],["result"]]],[11,"borrow","","",279,[[["self"]],["t"]]],[11,"borrow_mut","","",279,[[["self"]],["t"]]],[11,"type_id","","",279,[[["self"]],["typeid"]]],[11,"to_owned","","",279,[[["self"]],["t"]]],[11,"clone_into","","",279,[[["self"],["t"]]]],[11,"from","","",280,[[["t"]],["t"]]],[11,"into_iter","","",280,[[],["i"]]],[11,"try_from","","",280,[[["u"]],["result"]]],[11,"into","","",280,[[],["u"]]],[11,"try_into","","",280,[[],["result"]]],[11,"borrow","","",280,[[["self"]],["t"]]],[11,"borrow_mut","","",280,[[["self"]],["t"]]],[11,"type_id","","",280,[[["self"]],["typeid"]]],[11,"to_owned","","",280,[[["self"]],["t"]]],[11,"clone_into","","",280,[[["self"],["t"]]]],[11,"from","","",281,[[["t"]],["t"]]],[11,"into_iter","","",281,[[],["i"]]],[11,"try_from","","",281,[[["u"]],["result"]]],[11,"into","","",281,[[],["u"]]],[11,"try_into","","",281,[[],["result"]]],[11,"borrow","","",281,[[["self"]],["t"]]],[11,"borrow_mut","","",281,[[["self"]],["t"]]],[11,"type_id","","",281,[[["self"]],["typeid"]]],[11,"to_owned","","",281,[[["self"]],["t"]]],[11,"clone_into","","",281,[[["self"],["t"]]]],[11,"from","","",282,[[["t"]],["t"]]],[11,"into_iter","","",282,[[],["i"]]],[11,"try_from","","",282,[[["u"]],["result"]]],[11,"into","","",282,[[],["u"]]],[11,"try_into","","",282,[[],["result"]]],[11,"borrow","","",282,[[["self"]],["t"]]],[11,"borrow_mut","","",282,[[["self"]],["t"]]],[11,"type_id","","",282,[[["self"]],["typeid"]]],[11,"to_owned","","",282,[[["self"]],["t"]]],[11,"clone_into","","",282,[[["self"],["t"]]]],[11,"from","","",283,[[["t"]],["t"]]],[11,"into_iter","","",283,[[],["i"]]],[11,"try_from","","",283,[[["u"]],["result"]]],[11,"into","","",283,[[],["u"]]],[11,"try_into","","",283,[[],["result"]]],[11,"borrow","","",283,[[["self"]],["t"]]],[11,"borrow_mut","","",283,[[["self"]],["t"]]],[11,"type_id","","",283,[[["self"]],["typeid"]]],[11,"to_owned","","",283,[[["self"]],["t"]]],[11,"clone_into","","",283,[[["self"],["t"]]]],[11,"from","","",284,[[["t"]],["t"]]],[11,"into_iter","","",284,[[],["i"]]],[11,"try_from","","",284,[[["u"]],["result"]]],[11,"into","","",284,[[],["u"]]],[11,"try_into","","",284,[[],["result"]]],[11,"borrow","","",284,[[["self"]],["t"]]],[11,"borrow_mut","","",284,[[["self"]],["t"]]],[11,"type_id","","",284,[[["self"]],["typeid"]]],[11,"to_owned","","",284,[[["self"]],["t"]]],[11,"clone_into","","",284,[[["self"],["t"]]]],[11,"from","","",285,[[["t"]],["t"]]],[11,"into_iter","","",285,[[],["i"]]],[11,"try_from","","",285,[[["u"]],["result"]]],[11,"into","","",285,[[],["u"]]],[11,"try_into","","",285,[[],["result"]]],[11,"borrow","","",285,[[["self"]],["t"]]],[11,"borrow_mut","","",285,[[["self"]],["t"]]],[11,"type_id","","",285,[[["self"]],["typeid"]]],[11,"to_owned","","",285,[[["self"]],["t"]]],[11,"clone_into","","",285,[[["self"],["t"]]]],[11,"from","","",286,[[["t"]],["t"]]],[11,"into_iter","","",286,[[],["i"]]],[11,"try_from","","",286,[[["u"]],["result"]]],[11,"into","","",286,[[],["u"]]],[11,"try_into","","",286,[[],["result"]]],[11,"borrow","","",286,[[["self"]],["t"]]],[11,"borrow_mut","","",286,[[["self"]],["t"]]],[11,"type_id","","",286,[[["self"]],["typeid"]]],[11,"to_owned","","",286,[[["self"]],["t"]]],[11,"clone_into","","",286,[[["self"],["t"]]]],[11,"from","","",287,[[["t"]],["t"]]],[11,"into_iter","","",287,[[],["i"]]],[11,"try_from","","",287,[[["u"]],["result"]]],[11,"into","","",287,[[],["u"]]],[11,"try_into","","",287,[[],["result"]]],[11,"borrow","","",287,[[["self"]],["t"]]],[11,"borrow_mut","","",287,[[["self"]],["t"]]],[11,"type_id","","",287,[[["self"]],["typeid"]]],[11,"to_owned","","",287,[[["self"]],["t"]]],[11,"clone_into","","",287,[[["self"],["t"]]]],[11,"from","","",288,[[["t"]],["t"]]],[11,"into_iter","","",288,[[],["i"]]],[11,"try_from","","",288,[[["u"]],["result"]]],[11,"into","","",288,[[],["u"]]],[11,"try_into","","",288,[[],["result"]]],[11,"borrow","","",288,[[["self"]],["t"]]],[11,"borrow_mut","","",288,[[["self"]],["t"]]],[11,"type_id","","",288,[[["self"]],["typeid"]]],[11,"to_owned","","",288,[[["self"]],["t"]]],[11,"clone_into","","",288,[[["self"],["t"]]]],[11,"from","","",289,[[["t"]],["t"]]],[11,"into_iter","","",289,[[],["i"]]],[11,"try_from","","",289,[[["u"]],["result"]]],[11,"into","","",289,[[],["u"]]],[11,"try_into","","",289,[[],["result"]]],[11,"borrow","","",289,[[["self"]],["t"]]],[11,"borrow_mut","","",289,[[["self"]],["t"]]],[11,"type_id","","",289,[[["self"]],["typeid"]]],[11,"to_owned","","",289,[[["self"]],["t"]]],[11,"clone_into","","",289,[[["self"],["t"]]]],[11,"from","","",290,[[["t"]],["t"]]],[11,"into_iter","","",290,[[],["i"]]],[11,"try_from","","",290,[[["u"]],["result"]]],[11,"into","","",290,[[],["u"]]],[11,"try_into","","",290,[[],["result"]]],[11,"borrow","","",290,[[["self"]],["t"]]],[11,"borrow_mut","","",290,[[["self"]],["t"]]],[11,"type_id","","",290,[[["self"]],["typeid"]]],[11,"to_owned","","",290,[[["self"]],["t"]]],[11,"clone_into","","",290,[[["self"],["t"]]]],[11,"from","std::string","",291,[[["t"]],["t"]]],[11,"try_from","","",291,[[["u"]],["result"]]],[11,"into","","",291,[[],["u"]]],[11,"try_into","","",291,[[],["result"]]],[11,"borrow","","",291,[[["self"]],["t"]]],[11,"borrow_mut","","",291,[[["self"]],["t"]]],[11,"type_id","","",291,[[["self"]],["typeid"]]],[11,"to_owned","","",291,[[["self"]],["t"]]],[11,"clone_into","","",291,[[["self"],["t"]]]],[11,"to_string","","",291,[[["self"]],["string"]]],[11,"from","","",292,[[["t"]],["t"]]],[11,"try_from","","",292,[[["u"]],["result"]]],[11,"into","","",292,[[],["u"]]],[11,"try_into","","",292,[[],["result"]]],[11,"borrow","","",292,[[["self"]],["t"]]],[11,"borrow_mut","","",292,[[["self"]],["t"]]],[11,"type_id","","",292,[[["self"]],["typeid"]]],[11,"to_string","","",292,[[["self"]],["string"]]],[11,"from","","",293,[[["t"]],["t"]]],[11,"try_from","","",293,[[["u"]],["result"]]],[11,"into","","",293,[[],["u"]]],[11,"try_into","","",293,[[],["result"]]],[11,"borrow","","",293,[[["self"]],["t"]]],[11,"borrow_mut","","",293,[[["self"]],["t"]]],[11,"type_id","","",293,[[["self"]],["typeid"]]],[11,"to_string","","",293,[[["self"]],["string"]]],[11,"from","","",294,[[["t"]],["t"]]],[11,"into_iter","","",294,[[],["i"]]],[11,"try_from","","",294,[[["u"]],["result"]]],[11,"into","","",294,[[],["u"]]],[11,"try_into","","",294,[[],["result"]]],[11,"borrow","","",294,[[["self"]],["t"]]],[11,"borrow_mut","","",294,[[["self"]],["t"]]],[11,"type_id","","",294,[[["self"]],["typeid"]]],[11,"from","std::vec","",295,[[["t"]],["t"]]],[11,"into_iter","","",295,[[],["i"]]],[11,"try_from","","",295,[[["u"]],["result"]]],[11,"into","","",295,[[],["u"]]],[11,"try_into","","",295,[[],["result"]]],[11,"borrow","","",295,[[["self"]],["t"]]],[11,"borrow_mut","","",295,[[["self"]],["t"]]],[11,"type_id","","",295,[[["self"]],["typeid"]]],[11,"to_owned","","",295,[[["self"]],["t"]]],[11,"clone_into","","",295,[[["self"],["t"]]]],[11,"from","","",296,[[["t"]],["t"]]],[11,"into_iter","","",296,[[],["i"]]],[11,"try_from","","",296,[[["u"]],["result"]]],[11,"into","","",296,[[],["u"]]],[11,"try_into","","",296,[[],["result"]]],[11,"borrow","","",296,[[["self"]],["t"]]],[11,"borrow_mut","","",296,[[["self"]],["t"]]],[11,"type_id","","",296,[[["self"]],["typeid"]]],[11,"to_owned","","",296,[[["self"]],["t"]]],[11,"clone_into","","",296,[[["self"],["t"]]]],[11,"from","","",297,[[["t"]],["t"]]],[11,"into_iter","","",297,[[],["i"]]],[11,"try_from","","",297,[[["u"]],["result"]]],[11,"into","","",297,[[],["u"]]],[11,"try_into","","",297,[[],["result"]]],[11,"borrow","","",297,[[["self"]],["t"]]],[11,"borrow_mut","","",297,[[["self"]],["t"]]],[11,"type_id","","",297,[[["self"]],["typeid"]]],[11,"from","","",298,[[["t"]],["t"]]],[11,"into_iter","","",298,[[],["i"]]],[11,"try_from","","",298,[[["u"]],["result"]]],[11,"into","","",298,[[],["u"]]],[11,"try_into","","",298,[[],["result"]]],[11,"borrow","","",298,[[["self"]],["t"]]],[11,"borrow_mut","","",298,[[["self"]],["t"]]],[11,"type_id","","",298,[[["self"]],["typeid"]]],[11,"from","","",299,[[["t"]],["t"]]],[11,"into_iter","","",299,[[],["i"]]],[11,"try_from","","",299,[[["u"]],["result"]]],[11,"into","","",299,[[],["u"]]],[11,"try_into","","",299,[[],["result"]]],[11,"borrow","","",299,[[["self"]],["t"]]],[11,"borrow_mut","","",299,[[["self"]],["t"]]],[11,"type_id","","",299,[[["self"]],["typeid"]]],[11,"from","std::any","",300,[[["t"]],["t"]]],[11,"try_from","","",300,[[["u"]],["result"]]],[11,"into","","",300,[[],["u"]]],[11,"try_into","","",300,[[],["result"]]],[11,"borrow","","",300,[[["self"]],["t"]]],[11,"borrow_mut","","",300,[[["self"]],["t"]]],[11,"type_id","","",300,[[["self"]],["typeid"]]],[11,"to_owned","","",300,[[["self"]],["t"]]],[11,"clone_into","","",300,[[["self"],["t"]]]],[11,"from","std::array","",301,[[["t"]],["t"]]],[11,"try_from","","",301,[[["u"]],["result"]]],[11,"into","","",301,[[],["u"]]],[11,"try_into","","",301,[[],["result"]]],[11,"borrow","","",301,[[["self"]],["t"]]],[11,"borrow_mut","","",301,[[["self"]],["t"]]],[11,"type_id","","",301,[[["self"]],["typeid"]]],[11,"to_owned","","",301,[[["self"]],["t"]]],[11,"clone_into","","",301,[[["self"],["t"]]]],[11,"to_string","","",301,[[["self"]],["string"]]],[11,"from","","",302,[[["t"]],["t"]]],[11,"into_iter","","",302,[[],["i"]]],[11,"try_from","","",302,[[["u"]],["result"]]],[11,"into","","",302,[[],["u"]]],[11,"try_into","","",302,[[],["result"]]],[11,"borrow","","",302,[[["self"]],["t"]]],[11,"borrow_mut","","",302,[[["self"]],["t"]]],[11,"type_id","","",302,[[["self"]],["typeid"]]],[11,"to_owned","","",302,[[["self"]],["t"]]],[11,"clone_into","","",302,[[["self"],["t"]]]],[11,"from","std::cell","",303,[[["t"]],["t"]]],[11,"from","","",303,[[],["t"]]],[11,"try_from","","",303,[[["u"]],["result"]]],[11,"into","","",303,[[],["u"]]],[11,"try_into","","",303,[[],["result"]]],[11,"borrow","","",303,[[["self"]],["t"]]],[11,"borrow_mut","","",303,[[["self"]],["t"]]],[11,"type_id","","",303,[[["self"]],["typeid"]]],[11,"to_owned","","",303,[[["self"]],["t"]]],[11,"clone_into","","",303,[[["self"],["t"]]]],[11,"from","","",304,[[["t"]],["t"]]],[11,"from","","",304,[[],["t"]]],[11,"try_from","","",304,[[["u"]],["result"]]],[11,"into","","",304,[[],["u"]]],[11,"try_into","","",304,[[],["result"]]],[11,"borrow","","",304,[[["self"]],["t"]]],[11,"borrow_mut","","",304,[[["self"]],["t"]]],[11,"type_id","","",304,[[["self"]],["typeid"]]],[11,"to_owned","","",304,[[["self"]],["t"]]],[11,"clone_into","","",304,[[["self"],["t"]]]],[11,"from","","",305,[[["t"]],["t"]]],[11,"try_from","","",305,[[["u"]],["result"]]],[11,"into","","",305,[[],["u"]]],[11,"try_into","","",305,[[],["result"]]],[11,"borrow","","",305,[[["self"]],["t"]]],[11,"borrow_mut","","",305,[[["self"]],["t"]]],[11,"type_id","","",305,[[["self"]],["typeid"]]],[11,"to_string","","",305,[[["self"]],["string"]]],[11,"from","","",306,[[["t"]],["t"]]],[11,"try_from","","",306,[[["u"]],["result"]]],[11,"into","","",306,[[],["u"]]],[11,"try_into","","",306,[[],["result"]]],[11,"borrow","","",306,[[["self"]],["t"]]],[11,"borrow_mut","","",306,[[["self"]],["t"]]],[11,"type_id","","",306,[[["self"]],["typeid"]]],[11,"to_string","","",306,[[["self"]],["string"]]],[11,"from","","",307,[[["t"]],["t"]]],[11,"try_from","","",307,[[["u"]],["result"]]],[11,"into","","",307,[[],["u"]]],[11,"try_into","","",307,[[],["result"]]],[11,"borrow","","",307,[[["self"]],["t"]]],[11,"borrow_mut","","",307,[[["self"]],["t"]]],[11,"type_id","","",307,[[["self"]],["typeid"]]],[11,"to_string","","",307,[[["self"]],["string"]]],[11,"from","","",308,[[["t"]],["t"]]],[11,"try_from","","",308,[[["u"]],["result"]]],[11,"into","","",308,[[],["u"]]],[11,"try_into","","",308,[[],["result"]]],[11,"borrow","","",308,[[["self"]],["t"]]],[11,"borrow_mut","","",308,[[["self"]],["t"]]],[11,"type_id","","",308,[[["self"]],["typeid"]]],[11,"to_string","","",308,[[["self"]],["string"]]],[11,"from","","",309,[[["t"]],["t"]]],[11,"from","","",309,[[],["t"]]],[11,"try_from","","",309,[[["u"]],["result"]]],[11,"into","","",309,[[],["u"]]],[11,"try_into","","",309,[[],["result"]]],[11,"borrow","","",309,[[["self"]],["t"]]],[11,"borrow_mut","","",309,[[["self"]],["t"]]],[11,"type_id","","",309,[[["self"]],["typeid"]]],[11,"from","std::char","",310,[[["t"]],["t"]]],[11,"into_iter","","",310,[[],["i"]]],[11,"try_from","","",310,[[["u"]],["result"]]],[11,"into","","",310,[[],["u"]]],[11,"try_into","","",310,[[],["result"]]],[11,"borrow","","",310,[[["self"]],["t"]]],[11,"borrow_mut","","",310,[[["self"]],["t"]]],[11,"type_id","","",310,[[["self"]],["typeid"]]],[11,"to_owned","","",310,[[["self"]],["t"]]],[11,"clone_into","","",310,[[["self"],["t"]]]],[11,"to_string","","",310,[[["self"]],["string"]]],[11,"from","","",311,[[["t"]],["t"]]],[11,"into_iter","","",311,[[],["i"]]],[11,"try_from","","",311,[[["u"]],["result"]]],[11,"into","","",311,[[],["u"]]],[11,"try_into","","",311,[[],["result"]]],[11,"borrow","","",311,[[["self"]],["t"]]],[11,"borrow_mut","","",311,[[["self"]],["t"]]],[11,"type_id","","",311,[[["self"]],["typeid"]]],[11,"to_owned","","",311,[[["self"]],["t"]]],[11,"clone_into","","",311,[[["self"],["t"]]]],[11,"to_string","","",311,[[["self"]],["string"]]],[11,"from","","",312,[[["t"]],["t"]]],[11,"into_iter","","",312,[[],["i"]]],[11,"try_from","","",312,[[["u"]],["result"]]],[11,"into","","",312,[[],["u"]]],[11,"try_into","","",312,[[],["result"]]],[11,"borrow","","",312,[[["self"]],["t"]]],[11,"borrow_mut","","",312,[[["self"]],["t"]]],[11,"type_id","","",312,[[["self"]],["typeid"]]],[11,"to_owned","","",312,[[["self"]],["t"]]],[11,"clone_into","","",312,[[["self"],["t"]]]],[11,"to_string","","",312,[[["self"]],["string"]]],[11,"from","","",313,[[["t"]],["t"]]],[11,"into_iter","","",313,[[],["i"]]],[11,"try_from","","",313,[[["u"]],["result"]]],[11,"into","","",313,[[],["u"]]],[11,"try_into","","",313,[[],["result"]]],[11,"borrow","","",313,[[["self"]],["t"]]],[11,"borrow_mut","","",313,[[["self"]],["t"]]],[11,"type_id","","",313,[[["self"]],["typeid"]]],[11,"to_owned","","",313,[[["self"]],["t"]]],[11,"clone_into","","",313,[[["self"],["t"]]]],[11,"to_string","","",313,[[["self"]],["string"]]],[11,"from","","",314,[[["t"]],["t"]]],[11,"into_iter","","",314,[[],["i"]]],[11,"try_from","","",314,[[["u"]],["result"]]],[11,"into","","",314,[[],["u"]]],[11,"try_into","","",314,[[],["result"]]],[11,"borrow","","",314,[[["self"]],["t"]]],[11,"borrow_mut","","",314,[[["self"]],["t"]]],[11,"type_id","","",314,[[["self"]],["typeid"]]],[11,"to_owned","","",314,[[["self"]],["t"]]],[11,"clone_into","","",314,[[["self"],["t"]]]],[11,"to_string","","",314,[[["self"]],["string"]]],[11,"from","","",315,[[["t"]],["t"]]],[11,"try_from","","",315,[[["u"]],["result"]]],[11,"into","","",315,[[],["u"]]],[11,"try_into","","",315,[[],["result"]]],[11,"borrow","","",315,[[["self"]],["t"]]],[11,"borrow_mut","","",315,[[["self"]],["t"]]],[11,"type_id","","",315,[[["self"]],["typeid"]]],[11,"to_owned","","",315,[[["self"]],["t"]]],[11,"clone_into","","",315,[[["self"],["t"]]]],[11,"to_string","","",315,[[["self"]],["string"]]],[11,"from","","",316,[[["t"]],["t"]]],[11,"try_from","","",316,[[["u"]],["result"]]],[11,"into","","",316,[[],["u"]]],[11,"try_into","","",316,[[],["result"]]],[11,"borrow","","",316,[[["self"]],["t"]]],[11,"borrow_mut","","",316,[[["self"]],["t"]]],[11,"type_id","","",316,[[["self"]],["typeid"]]],[11,"to_owned","","",316,[[["self"]],["t"]]],[11,"clone_into","","",316,[[["self"],["t"]]]],[11,"to_string","","",316,[[["self"]],["string"]]],[11,"from","","",317,[[["t"]],["t"]]],[11,"into_iter","","",317,[[],["i"]]],[11,"try_from","","",317,[[["u"]],["result"]]],[11,"into","","",317,[[],["u"]]],[11,"try_into","","",317,[[],["result"]]],[11,"borrow","","",317,[[["self"]],["t"]]],[11,"borrow_mut","","",317,[[["self"]],["t"]]],[11,"type_id","","",317,[[["self"]],["typeid"]]],[11,"to_owned","","",317,[[["self"]],["t"]]],[11,"clone_into","","",317,[[["self"],["t"]]]],[11,"from","","",318,[[["t"]],["t"]]],[11,"try_from","","",318,[[["u"]],["result"]]],[11,"into","","",318,[[],["u"]]],[11,"try_into","","",318,[[],["result"]]],[11,"borrow","","",318,[[["self"]],["t"]]],[11,"borrow_mut","","",318,[[["self"]],["t"]]],[11,"type_id","","",318,[[["self"]],["typeid"]]],[11,"to_owned","","",318,[[["self"]],["t"]]],[11,"clone_into","","",318,[[["self"],["t"]]]],[11,"to_string","","",318,[[["self"]],["string"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"into","","",26,[[],["u"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"from","std::cmp","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"into","","",29,[[],["u"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"into","","",30,[[],["u"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"from","std::convert","",319,[[["t"]],["t"]]],[11,"from","","",319,[[],["t"]]],[11,"try_from","","",319,[[["u"]],["result"]]],[11,"into","","",319,[[],["u"]]],[11,"try_into","","",319,[[],["result"]]],[11,"borrow","","",319,[[["self"]],["t"]]],[11,"borrow_mut","","",319,[[["self"]],["t"]]],[11,"type_id","","",319,[[["self"]],["typeid"]]],[11,"to_owned","","",319,[[["self"]],["t"]]],[11,"clone_into","","",319,[[["self"],["t"]]]],[11,"to_string","","",319,[[["self"]],["string"]]],[11,"from","std::hash","",320,[[["t"]],["t"]]],[11,"try_from","","",320,[[["u"]],["result"]]],[11,"into","","",320,[[],["u"]]],[11,"try_into","","",320,[[],["result"]]],[11,"borrow","","",320,[[["self"]],["t"]]],[11,"borrow_mut","","",320,[[["self"]],["t"]]],[11,"type_id","","",320,[[["self"]],["typeid"]]],[11,"to_owned","","",320,[[["self"]],["t"]]],[11,"clone_into","","",320,[[["self"],["t"]]]],[11,"from","","",321,[[["t"]],["t"]]],[11,"try_from","","",321,[[["u"]],["result"]]],[11,"into","","",321,[[],["u"]]],[11,"try_into","","",321,[[],["result"]]],[11,"borrow","","",321,[[["self"]],["t"]]],[11,"borrow_mut","","",321,[[["self"]],["t"]]],[11,"type_id","","",321,[[["self"]],["typeid"]]],[11,"to_owned","","",321,[[["self"]],["t"]]],[11,"clone_into","","",321,[[["self"],["t"]]]],[11,"from","std::iter","",322,[[["t"]],["t"]]],[11,"into_iter","","",322,[[],["i"]]],[11,"try_from","","",322,[[["u"]],["result"]]],[11,"into","","",322,[[],["u"]]],[11,"try_into","","",322,[[],["result"]]],[11,"borrow","","",322,[[["self"]],["t"]]],[11,"borrow_mut","","",322,[[["self"]],["t"]]],[11,"type_id","","",322,[[["self"]],["typeid"]]],[11,"to_owned","","",322,[[["self"]],["t"]]],[11,"clone_into","","",322,[[["self"],["t"]]]],[11,"from","","",323,[[["t"]],["t"]]],[11,"into_iter","","",323,[[],["i"]]],[11,"try_from","","",323,[[["u"]],["result"]]],[11,"into","","",323,[[],["u"]]],[11,"try_into","","",323,[[],["result"]]],[11,"borrow","","",323,[[["self"]],["t"]]],[11,"borrow_mut","","",323,[[["self"]],["t"]]],[11,"type_id","","",323,[[["self"]],["typeid"]]],[11,"to_owned","","",323,[[["self"]],["t"]]],[11,"clone_into","","",323,[[["self"],["t"]]]],[11,"from","","",324,[[["t"]],["t"]]],[11,"into_iter","","",324,[[],["i"]]],[11,"try_from","","",324,[[["u"]],["result"]]],[11,"into","","",324,[[],["u"]]],[11,"try_into","","",324,[[],["result"]]],[11,"borrow","","",324,[[["self"]],["t"]]],[11,"borrow_mut","","",324,[[["self"]],["t"]]],[11,"type_id","","",324,[[["self"]],["typeid"]]],[11,"to_owned","","",324,[[["self"]],["t"]]],[11,"clone_into","","",324,[[["self"],["t"]]]],[11,"from","","",325,[[["t"]],["t"]]],[11,"into_iter","","",325,[[],["i"]]],[11,"try_from","","",325,[[["u"]],["result"]]],[11,"into","","",325,[[],["u"]]],[11,"try_into","","",325,[[],["result"]]],[11,"borrow","","",325,[[["self"]],["t"]]],[11,"borrow_mut","","",325,[[["self"]],["t"]]],[11,"type_id","","",325,[[["self"]],["typeid"]]],[11,"to_owned","","",325,[[["self"]],["t"]]],[11,"clone_into","","",325,[[["self"],["t"]]]],[11,"from","","",326,[[["t"]],["t"]]],[11,"into_iter","","",326,[[],["i"]]],[11,"try_from","","",326,[[["u"]],["result"]]],[11,"into","","",326,[[],["u"]]],[11,"try_into","","",326,[[],["result"]]],[11,"borrow","","",326,[[["self"]],["t"]]],[11,"borrow_mut","","",326,[[["self"]],["t"]]],[11,"type_id","","",326,[[["self"]],["typeid"]]],[11,"to_owned","","",326,[[["self"]],["t"]]],[11,"clone_into","","",326,[[["self"],["t"]]]],[11,"from","","",327,[[["t"]],["t"]]],[11,"into_iter","","",327,[[],["i"]]],[11,"try_from","","",327,[[["u"]],["result"]]],[11,"into","","",327,[[],["u"]]],[11,"try_into","","",327,[[],["result"]]],[11,"borrow","","",327,[[["self"]],["t"]]],[11,"borrow_mut","","",327,[[["self"]],["t"]]],[11,"type_id","","",327,[[["self"]],["typeid"]]],[11,"to_owned","","",327,[[["self"]],["t"]]],[11,"clone_into","","",327,[[["self"],["t"]]]],[11,"from","","",328,[[["t"]],["t"]]],[11,"into_iter","","",328,[[],["i"]]],[11,"try_from","","",328,[[["u"]],["result"]]],[11,"into","","",328,[[],["u"]]],[11,"try_into","","",328,[[],["result"]]],[11,"borrow","","",328,[[["self"]],["t"]]],[11,"borrow_mut","","",328,[[["self"]],["t"]]],[11,"type_id","","",328,[[["self"]],["typeid"]]],[11,"to_owned","","",328,[[["self"]],["t"]]],[11,"clone_into","","",328,[[["self"],["t"]]]],[11,"from","","",329,[[["t"]],["t"]]],[11,"into_iter","","",329,[[],["i"]]],[11,"try_from","","",329,[[["u"]],["result"]]],[11,"into","","",329,[[],["u"]]],[11,"try_into","","",329,[[],["result"]]],[11,"borrow","","",329,[[["self"]],["t"]]],[11,"borrow_mut","","",329,[[["self"]],["t"]]],[11,"type_id","","",329,[[["self"]],["typeid"]]],[11,"to_owned","","",329,[[["self"]],["t"]]],[11,"clone_into","","",329,[[["self"],["t"]]]],[11,"from","","",330,[[["t"]],["t"]]],[11,"into_iter","","",330,[[],["i"]]],[11,"try_from","","",330,[[["u"]],["result"]]],[11,"into","","",330,[[],["u"]]],[11,"try_into","","",330,[[],["result"]]],[11,"borrow","","",330,[[["self"]],["t"]]],[11,"borrow_mut","","",330,[[["self"]],["t"]]],[11,"type_id","","",330,[[["self"]],["typeid"]]],[11,"to_owned","","",330,[[["self"]],["t"]]],[11,"clone_into","","",330,[[["self"],["t"]]]],[11,"from","","",331,[[["t"]],["t"]]],[11,"into_iter","","",331,[[],["i"]]],[11,"try_from","","",331,[[["u"]],["result"]]],[11,"into","","",331,[[],["u"]]],[11,"try_into","","",331,[[],["result"]]],[11,"borrow","","",331,[[["self"]],["t"]]],[11,"borrow_mut","","",331,[[["self"]],["t"]]],[11,"type_id","","",331,[[["self"]],["typeid"]]],[11,"to_owned","","",331,[[["self"]],["t"]]],[11,"clone_into","","",331,[[["self"],["t"]]]],[11,"from","","",332,[[["t"]],["t"]]],[11,"into_iter","","",332,[[],["i"]]],[11,"try_from","","",332,[[["u"]],["result"]]],[11,"into","","",332,[[],["u"]]],[11,"try_into","","",332,[[],["result"]]],[11,"borrow","","",332,[[["self"]],["t"]]],[11,"borrow_mut","","",332,[[["self"]],["t"]]],[11,"type_id","","",332,[[["self"]],["typeid"]]],[11,"to_owned","","",332,[[["self"]],["t"]]],[11,"clone_into","","",332,[[["self"],["t"]]]],[11,"from","","",333,[[["t"]],["t"]]],[11,"into_iter","","",333,[[],["i"]]],[11,"try_from","","",333,[[["u"]],["result"]]],[11,"into","","",333,[[],["u"]]],[11,"try_into","","",333,[[],["result"]]],[11,"borrow","","",333,[[["self"]],["t"]]],[11,"borrow_mut","","",333,[[["self"]],["t"]]],[11,"type_id","","",333,[[["self"]],["typeid"]]],[11,"to_owned","","",333,[[["self"]],["t"]]],[11,"clone_into","","",333,[[["self"],["t"]]]],[11,"from","","",334,[[["t"]],["t"]]],[11,"into_iter","","",334,[[],["i"]]],[11,"try_from","","",334,[[["u"]],["result"]]],[11,"into","","",334,[[],["u"]]],[11,"try_into","","",334,[[],["result"]]],[11,"borrow","","",334,[[["self"]],["t"]]],[11,"borrow_mut","","",334,[[["self"]],["t"]]],[11,"type_id","","",334,[[["self"]],["typeid"]]],[11,"to_owned","","",334,[[["self"]],["t"]]],[11,"clone_into","","",334,[[["self"],["t"]]]],[11,"from","","",335,[[["t"]],["t"]]],[11,"into_iter","","",335,[[],["i"]]],[11,"try_from","","",335,[[["u"]],["result"]]],[11,"into","","",335,[[],["u"]]],[11,"try_into","","",335,[[],["result"]]],[11,"borrow","","",335,[[["self"]],["t"]]],[11,"borrow_mut","","",335,[[["self"]],["t"]]],[11,"type_id","","",335,[[["self"]],["typeid"]]],[11,"to_owned","","",335,[[["self"]],["t"]]],[11,"clone_into","","",335,[[["self"],["t"]]]],[11,"from","","",336,[[["t"]],["t"]]],[11,"into_iter","","",336,[[],["i"]]],[11,"try_from","","",336,[[["u"]],["result"]]],[11,"into","","",336,[[],["u"]]],[11,"try_into","","",336,[[],["result"]]],[11,"borrow","","",336,[[["self"]],["t"]]],[11,"borrow_mut","","",336,[[["self"]],["t"]]],[11,"type_id","","",336,[[["self"]],["typeid"]]],[11,"to_owned","","",336,[[["self"]],["t"]]],[11,"clone_into","","",336,[[["self"],["t"]]]],[11,"from","","",337,[[["t"]],["t"]]],[11,"into_iter","","",337,[[],["i"]]],[11,"try_from","","",337,[[["u"]],["result"]]],[11,"into","","",337,[[],["u"]]],[11,"try_into","","",337,[[],["result"]]],[11,"borrow","","",337,[[["self"]],["t"]]],[11,"borrow_mut","","",337,[[["self"]],["t"]]],[11,"type_id","","",337,[[["self"]],["typeid"]]],[11,"to_owned","","",337,[[["self"]],["t"]]],[11,"clone_into","","",337,[[["self"],["t"]]]],[11,"from","","",338,[[["t"]],["t"]]],[11,"into_iter","","",338,[[],["i"]]],[11,"try_from","","",338,[[["u"]],["result"]]],[11,"into","","",338,[[],["u"]]],[11,"try_into","","",338,[[],["result"]]],[11,"borrow","","",338,[[["self"]],["t"]]],[11,"borrow_mut","","",338,[[["self"]],["t"]]],[11,"type_id","","",338,[[["self"]],["typeid"]]],[11,"to_owned","","",338,[[["self"]],["t"]]],[11,"clone_into","","",338,[[["self"],["t"]]]],[11,"from","","",339,[[["t"]],["t"]]],[11,"into_iter","","",339,[[],["i"]]],[11,"try_from","","",339,[[["u"]],["result"]]],[11,"into","","",339,[[],["u"]]],[11,"try_into","","",339,[[],["result"]]],[11,"borrow","","",339,[[["self"]],["t"]]],[11,"borrow_mut","","",339,[[["self"]],["t"]]],[11,"type_id","","",339,[[["self"]],["typeid"]]],[11,"to_owned","","",339,[[["self"]],["t"]]],[11,"clone_into","","",339,[[["self"],["t"]]]],[11,"from","","",340,[[["t"]],["t"]]],[11,"into_iter","","",340,[[],["i"]]],[11,"try_from","","",340,[[["u"]],["result"]]],[11,"into","","",340,[[],["u"]]],[11,"try_into","","",340,[[],["result"]]],[11,"borrow","","",340,[[["self"]],["t"]]],[11,"borrow_mut","","",340,[[["self"]],["t"]]],[11,"type_id","","",340,[[["self"]],["typeid"]]],[11,"to_owned","","",340,[[["self"]],["t"]]],[11,"clone_into","","",340,[[["self"],["t"]]]],[11,"from","","",341,[[["t"]],["t"]]],[11,"into_iter","","",341,[[],["i"]]],[11,"try_from","","",341,[[["u"]],["result"]]],[11,"into","","",341,[[],["u"]]],[11,"try_into","","",341,[[],["result"]]],[11,"borrow","","",341,[[["self"]],["t"]]],[11,"borrow_mut","","",341,[[["self"]],["t"]]],[11,"type_id","","",341,[[["self"]],["typeid"]]],[11,"to_owned","","",341,[[["self"]],["t"]]],[11,"clone_into","","",341,[[["self"],["t"]]]],[11,"from","","",342,[[["t"]],["t"]]],[11,"into_iter","","",342,[[],["i"]]],[11,"try_from","","",342,[[["u"]],["result"]]],[11,"into","","",342,[[],["u"]]],[11,"try_into","","",342,[[],["result"]]],[11,"borrow","","",342,[[["self"]],["t"]]],[11,"borrow_mut","","",342,[[["self"]],["t"]]],[11,"type_id","","",342,[[["self"]],["typeid"]]],[11,"to_owned","","",342,[[["self"]],["t"]]],[11,"clone_into","","",342,[[["self"],["t"]]]],[11,"from","","",343,[[["t"]],["t"]]],[11,"into_iter","","",343,[[],["i"]]],[11,"try_from","","",343,[[["u"]],["result"]]],[11,"into","","",343,[[],["u"]]],[11,"try_into","","",343,[[],["result"]]],[11,"borrow","","",343,[[["self"]],["t"]]],[11,"borrow_mut","","",343,[[["self"]],["t"]]],[11,"type_id","","",343,[[["self"]],["typeid"]]],[11,"to_owned","","",343,[[["self"]],["t"]]],[11,"clone_into","","",343,[[["self"],["t"]]]],[11,"from","","",344,[[["t"]],["t"]]],[11,"into_iter","","",344,[[],["i"]]],[11,"try_from","","",344,[[["u"]],["result"]]],[11,"into","","",344,[[],["u"]]],[11,"try_into","","",344,[[],["result"]]],[11,"borrow","","",344,[[["self"]],["t"]]],[11,"borrow_mut","","",344,[[["self"]],["t"]]],[11,"type_id","","",344,[[["self"]],["typeid"]]],[11,"to_owned","","",344,[[["self"]],["t"]]],[11,"clone_into","","",344,[[["self"],["t"]]]],[11,"from","","",345,[[["t"]],["t"]]],[11,"into_iter","","",345,[[],["i"]]],[11,"try_from","","",345,[[["u"]],["result"]]],[11,"into","","",345,[[],["u"]]],[11,"try_into","","",345,[[],["result"]]],[11,"borrow","","",345,[[["self"]],["t"]]],[11,"borrow_mut","","",345,[[["self"]],["t"]]],[11,"type_id","","",345,[[["self"]],["typeid"]]],[11,"to_owned","","",345,[[["self"]],["t"]]],[11,"clone_into","","",345,[[["self"],["t"]]]],[11,"from","","",346,[[["t"]],["t"]]],[11,"into_iter","","",346,[[],["i"]]],[11,"try_from","","",346,[[["u"]],["result"]]],[11,"into","","",346,[[],["u"]]],[11,"try_into","","",346,[[],["result"]]],[11,"borrow","","",346,[[["self"]],["t"]]],[11,"borrow_mut","","",346,[[["self"]],["t"]]],[11,"type_id","","",346,[[["self"]],["typeid"]]],[11,"to_owned","","",346,[[["self"]],["t"]]],[11,"clone_into","","",346,[[["self"],["t"]]]],[11,"from","","",347,[[["t"]],["t"]]],[11,"into_iter","","",347,[[],["i"]]],[11,"try_from","","",347,[[["u"]],["result"]]],[11,"into","","",347,[[],["u"]]],[11,"try_into","","",347,[[],["result"]]],[11,"borrow","","",347,[[["self"]],["t"]]],[11,"borrow_mut","","",347,[[["self"]],["t"]]],[11,"type_id","","",347,[[["self"]],["typeid"]]],[11,"to_owned","","",347,[[["self"]],["t"]]],[11,"clone_into","","",347,[[["self"],["t"]]]],[11,"from","","",348,[[["t"]],["t"]]],[11,"into_iter","","",348,[[],["i"]]],[11,"try_from","","",348,[[["u"]],["result"]]],[11,"into","","",348,[[],["u"]]],[11,"try_into","","",348,[[],["result"]]],[11,"borrow","","",348,[[["self"]],["t"]]],[11,"borrow_mut","","",348,[[["self"]],["t"]]],[11,"type_id","","",348,[[["self"]],["typeid"]]],[11,"to_owned","","",348,[[["self"]],["t"]]],[11,"clone_into","","",348,[[["self"],["t"]]]],[11,"from","","",349,[[["t"]],["t"]]],[11,"into_iter","","",349,[[],["i"]]],[11,"try_from","","",349,[[["u"]],["result"]]],[11,"into","","",349,[[],["u"]]],[11,"try_into","","",349,[[],["result"]]],[11,"borrow","","",349,[[["self"]],["t"]]],[11,"borrow_mut","","",349,[[["self"]],["t"]]],[11,"type_id","","",349,[[["self"]],["typeid"]]],[11,"to_owned","","",349,[[["self"]],["t"]]],[11,"clone_into","","",349,[[["self"],["t"]]]],[11,"from","std::marker","",350,[[["t"]],["t"]]],[11,"try_from","","",350,[[["u"]],["result"]]],[11,"into","","",350,[[],["u"]]],[11,"try_into","","",350,[[],["result"]]],[11,"borrow","","",350,[[["self"]],["t"]]],[11,"borrow_mut","","",350,[[["self"]],["t"]]],[11,"type_id","","",350,[[["self"]],["typeid"]]],[11,"to_owned","","",350,[[["self"]],["t"]]],[11,"clone_into","","",350,[[["self"],["t"]]]],[11,"from","","",351,[[["t"]],["t"]]],[11,"try_from","","",351,[[["u"]],["result"]]],[11,"into","","",351,[[],["u"]]],[11,"try_into","","",351,[[],["result"]]],[11,"borrow","","",351,[[["self"]],["t"]]],[11,"borrow_mut","","",351,[[["self"]],["t"]]],[11,"type_id","","",351,[[["self"]],["typeid"]]],[11,"to_owned","","",351,[[["self"]],["t"]]],[11,"clone_into","","",351,[[["self"],["t"]]]],[11,"from","std::mem","",352,[[["t"]],["t"]]],[11,"try_from","","",352,[[["u"]],["result"]]],[11,"into","","",352,[[],["u"]]],[11,"try_into","","",352,[[],["result"]]],[11,"borrow","","",352,[[["self"]],["t"]]],[11,"borrow_mut","","",352,[[["self"]],["t"]]],[11,"type_id","","",352,[[["self"]],["typeid"]]],[11,"to_owned","","",352,[[["self"]],["t"]]],[11,"clone_into","","",352,[[["self"],["t"]]]],[11,"from","","",353,[[["t"]],["t"]]],[11,"try_from","","",353,[[["u"]],["result"]]],[11,"into","","",353,[[],["u"]]],[11,"try_into","","",353,[[],["result"]]],[11,"borrow","","",353,[[["self"]],["t"]]],[11,"borrow_mut","","",353,[[["self"]],["t"]]],[11,"type_id","","",353,[[["self"]],["typeid"]]],[11,"to_owned","","",353,[[["self"]],["t"]]],[11,"clone_into","","",353,[[["self"],["t"]]]],[11,"from","","",354,[[["t"]],["t"]]],[11,"try_from","","",354,[[["u"]],["result"]]],[11,"into","","",354,[[],["u"]]],[11,"try_into","","",354,[[],["result"]]],[11,"borrow","","",354,[[["self"]],["t"]]],[11,"borrow_mut","","",354,[[["self"]],["t"]]],[11,"type_id","","",354,[[["self"]],["typeid"]]],[11,"to_owned","","",354,[[["self"]],["t"]]],[11,"clone_into","","",354,[[["self"],["t"]]]],[11,"from","std::ops","",82,[[["t"]],["t"]]],[11,"into_iter","","",82,[[],["i"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"into","","",82,[[],["u"]]],[11,"try_into","","",82,[[],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"type_id","","",82,[[["self"]],["typeid"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,[[["self"],["t"]]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into_iter","","",83,[[],["i"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"into","","",83,[[],["u"]]],[11,"try_into","","",83,[[],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"type_id","","",83,[[["self"]],["typeid"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,[[["self"],["t"]]]],[11,"from","","",355,[[["t"]],["t"]]],[11,"try_from","","",355,[[["u"]],["result"]]],[11,"into","","",355,[[],["u"]]],[11,"try_into","","",355,[[],["result"]]],[11,"borrow","","",355,[[["self"]],["t"]]],[11,"borrow_mut","","",355,[[["self"]],["t"]]],[11,"type_id","","",355,[[["self"]],["typeid"]]],[11,"to_owned","","",355,[[["self"]],["t"]]],[11,"clone_into","","",355,[[["self"],["t"]]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"into","","",84,[[],["u"]]],[11,"try_into","","",84,[[],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"type_id","","",84,[[["self"]],["typeid"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,[[["self"],["t"]]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"into","","",85,[[],["u"]]],[11,"try_into","","",85,[[],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"type_id","","",85,[[["self"]],["typeid"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,[[["self"],["t"]]]],[11,"from","","",356,[[["t"]],["t"]]],[11,"into_iter","","",356,[[],["i"]]],[11,"try_from","","",356,[[["u"]],["result"]]],[11,"into","","",356,[[],["u"]]],[11,"try_into","","",356,[[],["result"]]],[11,"borrow","","",356,[[["self"]],["t"]]],[11,"borrow_mut","","",356,[[["self"]],["t"]]],[11,"type_id","","",356,[[["self"]],["typeid"]]],[11,"to_owned","","",356,[[["self"]],["t"]]],[11,"clone_into","","",356,[[["self"],["t"]]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"into","","",87,[[],["u"]]],[11,"try_into","","",87,[[],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"type_id","","",87,[[["self"]],["typeid"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,[[["self"],["t"]]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"into","","",90,[[],["u"]]],[11,"try_into","","",90,[[],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"type_id","","",90,[[["self"]],["typeid"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,[[["self"],["t"]]]],[11,"from","std::option","",91,[[["t"]],["t"]]],[11,"from","","",91,[[],["t"]]],[11,"into_iter","","",91,[[],["i"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"into","","",91,[[],["u"]]],[11,"try_into","","",91,[[],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"type_id","","",91,[[["self"]],["typeid"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,[[["self"],["t"]]]],[11,"from","","",357,[[["t"]],["t"]]],[11,"into_iter","","",357,[[],["i"]]],[11,"try_from","","",357,[[["u"]],["result"]]],[11,"into","","",357,[[],["u"]]],[11,"try_into","","",357,[[],["result"]]],[11,"borrow","","",357,[[["self"]],["t"]]],[11,"borrow_mut","","",357,[[["self"]],["t"]]],[11,"type_id","","",357,[[["self"]],["typeid"]]],[11,"to_owned","","",357,[[["self"]],["t"]]],[11,"clone_into","","",357,[[["self"],["t"]]]],[11,"from","","",358,[[["t"]],["t"]]],[11,"into_iter","","",358,[[],["i"]]],[11,"try_from","","",358,[[["u"]],["result"]]],[11,"into","","",358,[[],["u"]]],[11,"try_into","","",358,[[],["result"]]],[11,"borrow","","",358,[[["self"]],["t"]]],[11,"borrow_mut","","",358,[[["self"]],["t"]]],[11,"type_id","","",358,[[["self"]],["typeid"]]],[11,"from","","",359,[[["t"]],["t"]]],[11,"into_iter","","",359,[[],["i"]]],[11,"try_from","","",359,[[["u"]],["result"]]],[11,"into","","",359,[[],["u"]]],[11,"try_into","","",359,[[],["result"]]],[11,"borrow","","",359,[[["self"]],["t"]]],[11,"borrow_mut","","",359,[[["self"]],["t"]]],[11,"type_id","","",359,[[["self"]],["typeid"]]],[11,"to_owned","","",359,[[["self"]],["t"]]],[11,"clone_into","","",359,[[["self"],["t"]]]],[11,"from","","",360,[[["t"]],["t"]]],[11,"try_from","","",360,[[["u"]],["result"]]],[11,"into","","",360,[[],["u"]]],[11,"try_into","","",360,[[],["result"]]],[11,"borrow","","",360,[[["self"]],["t"]]],[11,"borrow_mut","","",360,[[["self"]],["t"]]],[11,"type_id","","",360,[[["self"]],["typeid"]]],[11,"to_owned","","",360,[[["self"]],["t"]]],[11,"clone_into","","",360,[[["self"],["t"]]]],[11,"from","std::pin","",361,[[["t"]],["t"]]],[11,"try_from","","",361,[[["u"]],["result"]]],[11,"into","","",361,[[],["u"]]],[11,"try_into","","",361,[[],["result"]]],[11,"borrow","","",361,[[["self"]],["t"]]],[11,"borrow_mut","","",361,[[["self"]],["t"]]],[11,"type_id","","",361,[[["self"]],["typeid"]]],[11,"to_owned","","",361,[[["self"]],["t"]]],[11,"clone_into","","",361,[[["self"],["t"]]]],[11,"to_string","","",361,[[["self"]],["string"]]],[11,"from","std::ptr","",362,[[["t"]],["t"]]],[11,"try_from","","",362,[[["u"]],["result"]]],[11,"into","","",362,[[],["u"]]],[11,"try_into","","",362,[[],["result"]]],[11,"borrow","","",362,[[["self"]],["t"]]],[11,"borrow_mut","","",362,[[["self"]],["t"]]],[11,"type_id","","",362,[[["self"]],["typeid"]]],[11,"to_owned","","",362,[[["self"]],["t"]]],[11,"clone_into","","",362,[[["self"],["t"]]]],[11,"from","std::raw","",92,[[["t"]],["t"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"into","","",92,[[],["u"]]],[11,"try_into","","",92,[[],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"type_id","","",92,[[["self"]],["typeid"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,[[["self"],["t"]]]],[11,"from","std::result","",93,[[["t"]],["t"]]],[11,"into_iter","","",93,[[],["i"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"into","","",93,[[],["u"]]],[11,"try_into","","",93,[[],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"type_id","","",93,[[["self"]],["typeid"]]],[11,"to_owned","","",93,[[["self"]],["t"]]],[11,"clone_into","","",93,[[["self"],["t"]]]],[11,"from","","",363,[[["t"]],["t"]]],[11,"into_iter","","",363,[[],["i"]]],[11,"try_from","","",363,[[["u"]],["result"]]],[11,"into","","",363,[[],["u"]]],[11,"try_into","","",363,[[],["result"]]],[11,"borrow","","",363,[[["self"]],["t"]]],[11,"borrow_mut","","",363,[[["self"]],["t"]]],[11,"type_id","","",363,[[["self"]],["typeid"]]],[11,"to_owned","","",363,[[["self"]],["t"]]],[11,"clone_into","","",363,[[["self"],["t"]]]],[11,"from","","",364,[[["t"]],["t"]]],[11,"into_iter","","",364,[[],["i"]]],[11,"try_from","","",364,[[["u"]],["result"]]],[11,"into","","",364,[[],["u"]]],[11,"try_into","","",364,[[],["result"]]],[11,"borrow","","",364,[[["self"]],["t"]]],[11,"borrow_mut","","",364,[[["self"]],["t"]]],[11,"type_id","","",364,[[["self"]],["typeid"]]],[11,"from","","",365,[[["t"]],["t"]]],[11,"into_iter","","",365,[[],["i"]]],[11,"try_from","","",365,[[["u"]],["result"]]],[11,"into","","",365,[[],["u"]]],[11,"try_into","","",365,[[],["result"]]],[11,"borrow","","",365,[[["self"]],["t"]]],[11,"borrow_mut","","",365,[[["self"]],["t"]]],[11,"type_id","","",365,[[["self"]],["typeid"]]],[11,"to_owned","","",365,[[["self"]],["t"]]],[11,"clone_into","","",365,[[["self"],["t"]]]],[11,"from","std::thread","",366,[[["t"]],["t"]]],[11,"try_from","","",366,[[["u"]],["result"]]],[11,"into","","",366,[[],["u"]]],[11,"try_into","","",366,[[],["result"]]],[11,"borrow","","",366,[[["self"]],["t"]]],[11,"borrow_mut","","",366,[[["self"]],["t"]]],[11,"type_id","","",366,[[["self"]],["typeid"]]],[11,"to_owned","","",366,[[["self"]],["t"]]],[11,"clone_into","","",366,[[["self"],["t"]]]],[11,"to_string","","",366,[[["self"]],["string"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"into","","",94,[[],["u"]]],[11,"try_into","","",94,[[],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"type_id","","",94,[[["self"]],["typeid"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"into","","",95,[[],["u"]]],[11,"try_into","","",95,[[],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"type_id","","",95,[[["self"]],["typeid"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"into","","",96,[[],["u"]]],[11,"try_into","","",96,[[],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"type_id","","",96,[[["self"]],["typeid"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,[[["self"],["t"]]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"into","","",97,[[],["u"]]],[11,"try_into","","",97,[[],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"type_id","","",97,[[["self"]],["typeid"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,[[["self"],["t"]]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"into","","",98,[[],["u"]]],[11,"try_into","","",98,[[],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"type_id","","",98,[[["self"]],["typeid"]]],[11,"from","std::ascii","",367,[[["t"]],["t"]]],[11,"into_iter","","",367,[[],["i"]]],[11,"try_from","","",367,[[["u"]],["result"]]],[11,"into","","",367,[[],["u"]]],[11,"try_into","","",367,[[],["result"]]],[11,"borrow","","",367,[[["self"]],["t"]]],[11,"borrow_mut","","",367,[[["self"]],["t"]]],[11,"type_id","","",367,[[["self"]],["typeid"]]],[11,"to_owned","","",367,[[["self"]],["t"]]],[11,"clone_into","","",367,[[["self"],["t"]]]],[11,"to_string","","",367,[[["self"]],["string"]]],[11,"from","std::backtrace","",101,[[["t"]],["t"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"into","","",101,[[],["u"]]],[11,"try_into","","",101,[[],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"type_id","","",101,[[["self"]],["typeid"]]],[11,"to_string","","",101,[[["self"]],["string"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"into","","",100,[[],["u"]]],[11,"try_into","","",100,[[],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"type_id","","",100,[[["self"]],["typeid"]]],[11,"from","std::collections","",368,[[["t"]],["t"]]],[11,"into_iter","","",368,[[],["i"]]],[11,"try_from","","",368,[[["u"]],["result"]]],[11,"into","","",368,[[],["u"]]],[11,"try_into","","",368,[[],["result"]]],[11,"borrow","","",368,[[["self"]],["t"]]],[11,"borrow_mut","","",368,[[["self"]],["t"]]],[11,"type_id","","",368,[[["self"]],["typeid"]]],[11,"to_owned","","",368,[[["self"]],["t"]]],[11,"clone_into","","",368,[[["self"],["t"]]]],[11,"from","std::collections::binary_heap","",369,[[["t"]],["t"]]],[11,"try_from","","",369,[[["u"]],["result"]]],[11,"into","","",369,[[],["u"]]],[11,"try_into","","",369,[[],["result"]]],[11,"borrow","","",369,[[["self"]],["t"]]],[11,"borrow_mut","","",369,[[["self"]],["t"]]],[11,"type_id","","",369,[[["self"]],["typeid"]]],[11,"from","","",370,[[["t"]],["t"]]],[11,"into_iter","","",370,[[],["i"]]],[11,"try_from","","",370,[[["u"]],["result"]]],[11,"into","","",370,[[],["u"]]],[11,"try_into","","",370,[[],["result"]]],[11,"borrow","","",370,[[["self"]],["t"]]],[11,"borrow_mut","","",370,[[["self"]],["t"]]],[11,"type_id","","",370,[[["self"]],["typeid"]]],[11,"to_owned","","",370,[[["self"]],["t"]]],[11,"clone_into","","",370,[[["self"],["t"]]]],[11,"from","","",371,[[["t"]],["t"]]],[11,"into_iter","","",371,[[],["i"]]],[11,"try_from","","",371,[[["u"]],["result"]]],[11,"into","","",371,[[],["u"]]],[11,"try_into","","",371,[[],["result"]]],[11,"borrow","","",371,[[["self"]],["t"]]],[11,"borrow_mut","","",371,[[["self"]],["t"]]],[11,"type_id","","",371,[[["self"]],["typeid"]]],[11,"to_owned","","",371,[[["self"]],["t"]]],[11,"clone_into","","",371,[[["self"],["t"]]]],[11,"from","","",372,[[["t"]],["t"]]],[11,"into_iter","","",372,[[],["i"]]],[11,"try_from","","",372,[[["u"]],["result"]]],[11,"into","","",372,[[],["u"]]],[11,"try_into","","",372,[[],["result"]]],[11,"borrow","","",372,[[["self"]],["t"]]],[11,"borrow_mut","","",372,[[["self"]],["t"]]],[11,"type_id","","",372,[[["self"]],["typeid"]]],[11,"to_owned","","",372,[[["self"]],["t"]]],[11,"clone_into","","",372,[[["self"],["t"]]]],[11,"from","","",373,[[["t"]],["t"]]],[11,"into_iter","","",373,[[],["i"]]],[11,"try_from","","",373,[[["u"]],["result"]]],[11,"into","","",373,[[],["u"]]],[11,"try_into","","",373,[[],["result"]]],[11,"borrow","","",373,[[["self"]],["t"]]],[11,"borrow_mut","","",373,[[["self"]],["t"]]],[11,"type_id","","",373,[[["self"]],["typeid"]]],[11,"from","","",374,[[["t"]],["t"]]],[11,"into_iter","","",374,[[],["i"]]],[11,"try_from","","",374,[[["u"]],["result"]]],[11,"into","","",374,[[],["u"]]],[11,"try_into","","",374,[[],["result"]]],[11,"borrow","","",374,[[["self"]],["t"]]],[11,"borrow_mut","","",374,[[["self"]],["t"]]],[11,"type_id","","",374,[[["self"]],["typeid"]]],[11,"from","std::collections","",375,[[["t"]],["t"]]],[11,"into_iter","","",375,[[],["i"]]],[11,"try_from","","",375,[[["u"]],["result"]]],[11,"into","","",375,[[],["u"]]],[11,"try_into","","",375,[[],["result"]]],[11,"borrow","","",375,[[["self"]],["t"]]],[11,"borrow_mut","","",375,[[["self"]],["t"]]],[11,"type_id","","",375,[[["self"]],["typeid"]]],[11,"to_owned","","",375,[[["self"]],["t"]]],[11,"clone_into","","",375,[[["self"],["t"]]]],[11,"from","std::collections::btree_map","",376,[[["t"]],["t"]]],[11,"into_iter","","",376,[[],["i"]]],[11,"try_from","","",376,[[["u"]],["result"]]],[11,"into","","",376,[[],["u"]]],[11,"try_into","","",376,[[],["result"]]],[11,"borrow","","",376,[[["self"]],["t"]]],[11,"borrow_mut","","",376,[[["self"]],["t"]]],[11,"type_id","","",376,[[["self"]],["typeid"]]],[11,"to_owned","","",376,[[["self"]],["t"]]],[11,"clone_into","","",376,[[["self"],["t"]]]],[11,"from","","",377,[[["t"]],["t"]]],[11,"into_iter","","",377,[[],["i"]]],[11,"try_from","","",377,[[["u"]],["result"]]],[11,"into","","",377,[[],["u"]]],[11,"try_into","","",377,[[],["result"]]],[11,"borrow","","",377,[[["self"]],["t"]]],[11,"borrow_mut","","",377,[[["self"]],["t"]]],[11,"type_id","","",377,[[["self"]],["typeid"]]],[11,"to_owned","","",377,[[["self"]],["t"]]],[11,"clone_into","","",377,[[["self"],["t"]]]],[11,"from","","",378,[[["t"]],["t"]]],[11,"into_iter","","",378,[[],["i"]]],[11,"try_from","","",378,[[["u"]],["result"]]],[11,"into","","",378,[[],["u"]]],[11,"try_into","","",378,[[],["result"]]],[11,"borrow","","",378,[[["self"]],["t"]]],[11,"borrow_mut","","",378,[[["self"]],["t"]]],[11,"type_id","","",378,[[["self"]],["typeid"]]],[11,"from","","",379,[[["t"]],["t"]]],[11,"into_iter","","",379,[[],["i"]]],[11,"try_from","","",379,[[["u"]],["result"]]],[11,"into","","",379,[[],["u"]]],[11,"try_into","","",379,[[],["result"]]],[11,"borrow","","",379,[[["self"]],["t"]]],[11,"borrow_mut","","",379,[[["self"]],["t"]]],[11,"type_id","","",379,[[["self"]],["typeid"]]],[11,"to_owned","","",379,[[["self"]],["t"]]],[11,"clone_into","","",379,[[["self"],["t"]]]],[11,"from","","",380,[[["t"]],["t"]]],[11,"into_iter","","",380,[[],["i"]]],[11,"try_from","","",380,[[["u"]],["result"]]],[11,"into","","",380,[[],["u"]]],[11,"try_into","","",380,[[],["result"]]],[11,"borrow","","",380,[[["self"]],["t"]]],[11,"borrow_mut","","",380,[[["self"]],["t"]]],[11,"type_id","","",380,[[["self"]],["typeid"]]],[11,"to_owned","","",380,[[["self"]],["t"]]],[11,"clone_into","","",380,[[["self"],["t"]]]],[11,"from","","",381,[[["t"]],["t"]]],[11,"into_iter","","",381,[[],["i"]]],[11,"try_from","","",381,[[["u"]],["result"]]],[11,"into","","",381,[[],["u"]]],[11,"try_into","","",381,[[],["result"]]],[11,"borrow","","",381,[[["self"]],["t"]]],[11,"borrow_mut","","",381,[[["self"]],["t"]]],[11,"type_id","","",381,[[["self"]],["typeid"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"into","","",102,[[],["u"]]],[11,"try_into","","",102,[[],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"type_id","","",102,[[["self"]],["typeid"]]],[11,"from","","",382,[[["t"]],["t"]]],[11,"try_from","","",382,[[["u"]],["result"]]],[11,"into","","",382,[[],["u"]]],[11,"try_into","","",382,[[],["result"]]],[11,"borrow","","",382,[[["self"]],["t"]]],[11,"borrow_mut","","",382,[[["self"]],["t"]]],[11,"type_id","","",382,[[["self"]],["typeid"]]],[11,"from","","",383,[[["t"]],["t"]]],[11,"try_from","","",383,[[["u"]],["result"]]],[11,"into","","",383,[[],["u"]]],[11,"try_into","","",383,[[],["result"]]],[11,"borrow","","",383,[[["self"]],["t"]]],[11,"borrow_mut","","",383,[[["self"]],["t"]]],[11,"type_id","","",383,[[["self"]],["typeid"]]],[11,"from","","",384,[[["t"]],["t"]]],[11,"into_iter","","",384,[[],["i"]]],[11,"try_from","","",384,[[["u"]],["result"]]],[11,"into","","",384,[[],["u"]]],[11,"try_into","","",384,[[],["result"]]],[11,"borrow","","",384,[[["self"]],["t"]]],[11,"borrow_mut","","",384,[[["self"]],["t"]]],[11,"type_id","","",384,[[["self"]],["typeid"]]],[11,"from","","",385,[[["t"]],["t"]]],[11,"into_iter","","",385,[[],["i"]]],[11,"try_from","","",385,[[["u"]],["result"]]],[11,"into","","",385,[[],["u"]]],[11,"try_into","","",385,[[],["result"]]],[11,"borrow","","",385,[[["self"]],["t"]]],[11,"borrow_mut","","",385,[[["self"]],["t"]]],[11,"type_id","","",385,[[["self"]],["typeid"]]],[11,"from","std::collections::btree_set","",386,[[["t"]],["t"]]],[11,"into_iter","","",386,[[],["i"]]],[11,"try_from","","",386,[[["u"]],["result"]]],[11,"into","","",386,[[],["u"]]],[11,"try_into","","",386,[[],["result"]]],[11,"borrow","","",386,[[["self"]],["t"]]],[11,"borrow_mut","","",386,[[["self"]],["t"]]],[11,"type_id","","",386,[[["self"]],["typeid"]]],[11,"to_owned","","",386,[[["self"]],["t"]]],[11,"clone_into","","",386,[[["self"],["t"]]]],[11,"from","","",387,[[["t"]],["t"]]],[11,"into_iter","","",387,[[],["i"]]],[11,"try_from","","",387,[[["u"]],["result"]]],[11,"into","","",387,[[],["u"]]],[11,"try_into","","",387,[[],["result"]]],[11,"borrow","","",387,[[["self"]],["t"]]],[11,"borrow_mut","","",387,[[["self"]],["t"]]],[11,"type_id","","",387,[[["self"]],["typeid"]]],[11,"to_owned","","",387,[[["self"]],["t"]]],[11,"clone_into","","",387,[[["self"],["t"]]]],[11,"from","","",388,[[["t"]],["t"]]],[11,"into_iter","","",388,[[],["i"]]],[11,"try_from","","",388,[[["u"]],["result"]]],[11,"into","","",388,[[],["u"]]],[11,"try_into","","",388,[[],["result"]]],[11,"borrow","","",388,[[["self"]],["t"]]],[11,"borrow_mut","","",388,[[["self"]],["t"]]],[11,"type_id","","",388,[[["self"]],["typeid"]]],[11,"to_owned","","",388,[[["self"]],["t"]]],[11,"clone_into","","",388,[[["self"],["t"]]]],[11,"from","","",389,[[["t"]],["t"]]],[11,"into_iter","","",389,[[],["i"]]],[11,"try_from","","",389,[[["u"]],["result"]]],[11,"into","","",389,[[],["u"]]],[11,"try_into","","",389,[[],["result"]]],[11,"borrow","","",389,[[["self"]],["t"]]],[11,"borrow_mut","","",389,[[["self"]],["t"]]],[11,"type_id","","",389,[[["self"]],["typeid"]]],[11,"to_owned","","",389,[[["self"]],["t"]]],[11,"clone_into","","",389,[[["self"],["t"]]]],[11,"from","","",390,[[["t"]],["t"]]],[11,"into_iter","","",390,[[],["i"]]],[11,"try_from","","",390,[[["u"]],["result"]]],[11,"into","","",390,[[],["u"]]],[11,"try_into","","",390,[[],["result"]]],[11,"borrow","","",390,[[["self"]],["t"]]],[11,"borrow_mut","","",390,[[["self"]],["t"]]],[11,"type_id","","",390,[[["self"]],["typeid"]]],[11,"to_owned","","",390,[[["self"]],["t"]]],[11,"clone_into","","",390,[[["self"],["t"]]]],[11,"from","std::collections","",391,[[["t"]],["t"]]],[11,"into_iter","","",391,[[],["i"]]],[11,"try_from","","",391,[[["u"]],["result"]]],[11,"into","","",391,[[],["u"]]],[11,"try_into","","",391,[[],["result"]]],[11,"borrow","","",391,[[["self"]],["t"]]],[11,"borrow_mut","","",391,[[["self"]],["t"]]],[11,"type_id","","",391,[[["self"]],["typeid"]]],[11,"to_owned","","",391,[[["self"]],["t"]]],[11,"clone_into","","",391,[[["self"],["t"]]]],[11,"from","std::collections::btree_set","",392,[[["t"]],["t"]]],[11,"into_iter","","",392,[[],["i"]]],[11,"try_from","","",392,[[["u"]],["result"]]],[11,"into","","",392,[[],["u"]]],[11,"try_into","","",392,[[],["result"]]],[11,"borrow","","",392,[[["self"]],["t"]]],[11,"borrow_mut","","",392,[[["self"]],["t"]]],[11,"type_id","","",392,[[["self"]],["typeid"]]],[11,"from","","",393,[[["t"]],["t"]]],[11,"into_iter","","",393,[[],["i"]]],[11,"try_from","","",393,[[["u"]],["result"]]],[11,"into","","",393,[[],["u"]]],[11,"try_into","","",393,[[],["result"]]],[11,"borrow","","",393,[[["self"]],["t"]]],[11,"borrow_mut","","",393,[[["self"]],["t"]]],[11,"type_id","","",393,[[["self"]],["typeid"]]],[11,"to_owned","","",393,[[["self"]],["t"]]],[11,"clone_into","","",393,[[["self"],["t"]]]],[11,"from","std::collections","",394,[[["t"]],["t"]]],[11,"into_iter","","",394,[[],["i"]]],[11,"try_from","","",394,[[["u"]],["result"]]],[11,"into","","",394,[[],["u"]]],[11,"try_into","","",394,[[],["result"]]],[11,"borrow","","",394,[[["self"]],["t"]]],[11,"borrow_mut","","",394,[[["self"]],["t"]]],[11,"type_id","","",394,[[["self"]],["typeid"]]],[11,"to_owned","","",394,[[["self"]],["t"]]],[11,"clone_into","","",394,[[["self"],["t"]]]],[11,"from","std::collections::linked_list","",395,[[["t"]],["t"]]],[11,"into_iter","","",395,[[],["i"]]],[11,"try_from","","",395,[[["u"]],["result"]]],[11,"into","","",395,[[],["u"]]],[11,"try_into","","",395,[[],["result"]]],[11,"borrow","","",395,[[["self"]],["t"]]],[11,"borrow_mut","","",395,[[["self"]],["t"]]],[11,"type_id","","",395,[[["self"]],["typeid"]]],[11,"to_owned","","",395,[[["self"]],["t"]]],[11,"clone_into","","",395,[[["self"],["t"]]]],[11,"from","","",396,[[["t"]],["t"]]],[11,"into_iter","","",396,[[],["i"]]],[11,"try_from","","",396,[[["u"]],["result"]]],[11,"into","","",396,[[],["u"]]],[11,"try_into","","",396,[[],["result"]]],[11,"borrow","","",396,[[["self"]],["t"]]],[11,"borrow_mut","","",396,[[["self"]],["t"]]],[11,"type_id","","",396,[[["self"]],["typeid"]]],[11,"from","","",397,[[["t"]],["t"]]],[11,"into_iter","","",397,[[],["i"]]],[11,"try_from","","",397,[[["u"]],["result"]]],[11,"into","","",397,[[],["u"]]],[11,"try_into","","",397,[[],["result"]]],[11,"borrow","","",397,[[["self"]],["t"]]],[11,"borrow_mut","","",397,[[["self"]],["t"]]],[11,"type_id","","",397,[[["self"]],["typeid"]]],[11,"to_owned","","",397,[[["self"]],["t"]]],[11,"clone_into","","",397,[[["self"],["t"]]]],[11,"from","","",398,[[["t"]],["t"]]],[11,"try_from","","",398,[[["u"]],["result"]]],[11,"into","","",398,[[],["u"]]],[11,"try_into","","",398,[[],["result"]]],[11,"borrow","","",398,[[["self"]],["t"]]],[11,"borrow_mut","","",398,[[["self"]],["t"]]],[11,"type_id","","",398,[[["self"]],["typeid"]]],[11,"from","","",399,[[["t"]],["t"]]],[11,"try_from","","",399,[[["u"]],["result"]]],[11,"into","","",399,[[],["u"]]],[11,"try_into","","",399,[[],["result"]]],[11,"borrow","","",399,[[["self"]],["t"]]],[11,"borrow_mut","","",399,[[["self"]],["t"]]],[11,"type_id","","",399,[[["self"]],["typeid"]]],[11,"from","","",400,[[["t"]],["t"]]],[11,"into_iter","","",400,[[],["i"]]],[11,"try_from","","",400,[[["u"]],["result"]]],[11,"into","","",400,[[],["u"]]],[11,"try_into","","",400,[[],["result"]]],[11,"borrow","","",400,[[["self"]],["t"]]],[11,"borrow_mut","","",400,[[["self"]],["t"]]],[11,"type_id","","",400,[[["self"]],["typeid"]]],[11,"from","std::collections","",401,[[["t"]],["t"]]],[11,"into_iter","","",401,[[],["i"]]],[11,"try_from","","",401,[[["u"]],["result"]]],[11,"into","","",401,[[],["u"]]],[11,"try_into","","",401,[[],["result"]]],[11,"borrow","","",401,[[["self"]],["t"]]],[11,"borrow_mut","","",401,[[["self"]],["t"]]],[11,"type_id","","",401,[[["self"]],["typeid"]]],[11,"to_owned","","",401,[[["self"]],["t"]]],[11,"clone_into","","",401,[[["self"],["t"]]]],[11,"from","std::collections::vec_deque","",402,[[["t"]],["t"]]],[11,"into_iter","","",402,[[],["i"]]],[11,"try_from","","",402,[[["u"]],["result"]]],[11,"into","","",402,[[],["u"]]],[11,"try_into","","",402,[[],["result"]]],[11,"borrow","","",402,[[["self"]],["t"]]],[11,"borrow_mut","","",402,[[["self"]],["t"]]],[11,"type_id","","",402,[[["self"]],["typeid"]]],[11,"to_owned","","",402,[[["self"]],["t"]]],[11,"clone_into","","",402,[[["self"],["t"]]]],[11,"from","","",403,[[["t"]],["t"]]],[11,"into_iter","","",403,[[],["i"]]],[11,"try_from","","",403,[[["u"]],["result"]]],[11,"into","","",403,[[],["u"]]],[11,"try_into","","",403,[[],["result"]]],[11,"borrow","","",403,[[["self"]],["t"]]],[11,"borrow_mut","","",403,[[["self"]],["t"]]],[11,"type_id","","",403,[[["self"]],["typeid"]]],[11,"from","","",404,[[["t"]],["t"]]],[11,"into_iter","","",404,[[],["i"]]],[11,"try_from","","",404,[[["u"]],["result"]]],[11,"into","","",404,[[],["u"]]],[11,"try_into","","",404,[[],["result"]]],[11,"borrow","","",404,[[["self"]],["t"]]],[11,"borrow_mut","","",404,[[["self"]],["t"]]],[11,"type_id","","",404,[[["self"]],["typeid"]]],[11,"to_owned","","",404,[[["self"]],["t"]]],[11,"clone_into","","",404,[[["self"],["t"]]]],[11,"from","","",405,[[["t"]],["t"]]],[11,"into_iter","","",405,[[],["i"]]],[11,"try_from","","",405,[[["u"]],["result"]]],[11,"into","","",405,[[],["u"]]],[11,"try_into","","",405,[[],["result"]]],[11,"borrow","","",405,[[["self"]],["t"]]],[11,"borrow_mut","","",405,[[["self"]],["t"]]],[11,"type_id","","",405,[[["self"]],["typeid"]]],[11,"from","std::collections","",103,[[["t"]],["t"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"into","","",103,[[],["u"]]],[11,"try_into","","",103,[[],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"type_id","","",103,[[["self"]],["typeid"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,[[["self"],["t"]]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into_iter","","",104,[[],["i"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"into","","",104,[[],["u"]]],[11,"try_into","","",104,[[],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"type_id","","",104,[[["self"]],["typeid"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,[[["self"],["t"]]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into_iter","","",105,[[],["i"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"into","","",105,[[],["u"]]],[11,"try_into","","",105,[[],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"type_id","","",105,[[["self"]],["typeid"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,[[["self"],["t"]]]],[11,"from","std::collections::hash_map","",406,[[["t"]],["t"]]],[11,"into_iter","","",406,[[],["i"]]],[11,"try_from","","",406,[[["u"]],["result"]]],[11,"into","","",406,[[],["u"]]],[11,"try_into","","",406,[[],["result"]]],[11,"borrow","","",406,[[["self"]],["t"]]],[11,"borrow_mut","","",406,[[["self"]],["t"]]],[11,"type_id","","",406,[[["self"]],["typeid"]]],[11,"to_owned","","",406,[[["self"]],["t"]]],[11,"clone_into","","",406,[[["self"],["t"]]]],[11,"from","","",407,[[["t"]],["t"]]],[11,"into_iter","","",407,[[],["i"]]],[11,"try_from","","",407,[[["u"]],["result"]]],[11,"into","","",407,[[],["u"]]],[11,"try_into","","",407,[[],["result"]]],[11,"borrow","","",407,[[["self"]],["t"]]],[11,"borrow_mut","","",407,[[["self"]],["t"]]],[11,"type_id","","",407,[[["self"]],["typeid"]]],[11,"from","","",408,[[["t"]],["t"]]],[11,"into_iter","","",408,[[],["i"]]],[11,"try_from","","",408,[[["u"]],["result"]]],[11,"into","","",408,[[],["u"]]],[11,"try_into","","",408,[[],["result"]]],[11,"borrow","","",408,[[["self"]],["t"]]],[11,"borrow_mut","","",408,[[["self"]],["t"]]],[11,"type_id","","",408,[[["self"]],["typeid"]]],[11,"from","","",409,[[["t"]],["t"]]],[11,"into_iter","","",409,[[],["i"]]],[11,"try_from","","",409,[[["u"]],["result"]]],[11,"into","","",409,[[],["u"]]],[11,"try_into","","",409,[[],["result"]]],[11,"borrow","","",409,[[["self"]],["t"]]],[11,"borrow_mut","","",409,[[["self"]],["t"]]],[11,"type_id","","",409,[[["self"]],["typeid"]]],[11,"to_owned","","",409,[[["self"]],["t"]]],[11,"clone_into","","",409,[[["self"],["t"]]]],[11,"from","","",410,[[["t"]],["t"]]],[11,"into_iter","","",410,[[],["i"]]],[11,"try_from","","",410,[[["u"]],["result"]]],[11,"into","","",410,[[],["u"]]],[11,"try_into","","",410,[[],["result"]]],[11,"borrow","","",410,[[["self"]],["t"]]],[11,"borrow_mut","","",410,[[["self"]],["t"]]],[11,"type_id","","",410,[[["self"]],["typeid"]]],[11,"to_owned","","",410,[[["self"]],["t"]]],[11,"clone_into","","",410,[[["self"],["t"]]]],[11,"from","","",411,[[["t"]],["t"]]],[11,"into_iter","","",411,[[],["i"]]],[11,"try_from","","",411,[[["u"]],["result"]]],[11,"into","","",411,[[],["u"]]],[11,"try_into","","",411,[[],["result"]]],[11,"borrow","","",411,[[["self"]],["t"]]],[11,"borrow_mut","","",411,[[["self"]],["t"]]],[11,"type_id","","",411,[[["self"]],["typeid"]]],[11,"from","","",412,[[["t"]],["t"]]],[11,"into_iter","","",412,[[],["i"]]],[11,"try_from","","",412,[[["u"]],["result"]]],[11,"into","","",412,[[],["u"]]],[11,"try_into","","",412,[[],["result"]]],[11,"borrow","","",412,[[["self"]],["t"]]],[11,"borrow_mut","","",412,[[["self"]],["t"]]],[11,"type_id","","",412,[[["self"]],["typeid"]]],[11,"from","","",413,[[["t"]],["t"]]],[11,"try_from","","",413,[[["u"]],["result"]]],[11,"into","","",413,[[],["u"]]],[11,"try_into","","",413,[[],["result"]]],[11,"borrow","","",413,[[["self"]],["t"]]],[11,"borrow_mut","","",413,[[["self"]],["t"]]],[11,"type_id","","",413,[[["self"]],["typeid"]]],[11,"from","","",414,[[["t"]],["t"]]],[11,"try_from","","",414,[[["u"]],["result"]]],[11,"into","","",414,[[],["u"]]],[11,"try_into","","",414,[[],["result"]]],[11,"borrow","","",414,[[["self"]],["t"]]],[11,"borrow_mut","","",414,[[["self"]],["t"]]],[11,"type_id","","",414,[[["self"]],["typeid"]]],[11,"from","","",415,[[["t"]],["t"]]],[11,"try_from","","",415,[[["u"]],["result"]]],[11,"into","","",415,[[],["u"]]],[11,"try_into","","",415,[[],["result"]]],[11,"borrow","","",415,[[["self"]],["t"]]],[11,"borrow_mut","","",415,[[["self"]],["t"]]],[11,"type_id","","",415,[[["self"]],["typeid"]]],[11,"from","","",416,[[["t"]],["t"]]],[11,"try_from","","",416,[[["u"]],["result"]]],[11,"into","","",416,[[],["u"]]],[11,"try_into","","",416,[[],["result"]]],[11,"borrow","","",416,[[["self"]],["t"]]],[11,"borrow_mut","","",416,[[["self"]],["t"]]],[11,"type_id","","",416,[[["self"]],["typeid"]]],[11,"from","","",417,[[["t"]],["t"]]],[11,"try_from","","",417,[[["u"]],["result"]]],[11,"into","","",417,[[],["u"]]],[11,"try_into","","",417,[[],["result"]]],[11,"borrow","","",417,[[["self"]],["t"]]],[11,"borrow_mut","","",417,[[["self"]],["t"]]],[11,"type_id","","",417,[[["self"]],["typeid"]]],[11,"from","","",418,[[["t"]],["t"]]],[11,"try_from","","",418,[[["u"]],["result"]]],[11,"into","","",418,[[],["u"]]],[11,"try_into","","",418,[[],["result"]]],[11,"borrow","","",418,[[["self"]],["t"]]],[11,"borrow_mut","","",418,[[["self"]],["t"]]],[11,"type_id","","",418,[[["self"]],["typeid"]]],[11,"from","","",419,[[["t"]],["t"]]],[11,"try_from","","",419,[[["u"]],["result"]]],[11,"into","","",419,[[],["u"]]],[11,"try_into","","",419,[[],["result"]]],[11,"borrow","","",419,[[["self"]],["t"]]],[11,"borrow_mut","","",419,[[["self"]],["t"]]],[11,"type_id","","",419,[[["self"]],["typeid"]]],[11,"to_owned","","",419,[[["self"]],["t"]]],[11,"clone_into","","",419,[[["self"],["t"]]]],[11,"from","","",420,[[["t"]],["t"]]],[11,"try_from","","",420,[[["u"]],["result"]]],[11,"into","","",420,[[],["u"]]],[11,"try_into","","",420,[[],["result"]]],[11,"borrow","","",420,[[["self"]],["t"]]],[11,"borrow_mut","","",420,[[["self"]],["t"]]],[11,"type_id","","",420,[[["self"]],["typeid"]]],[11,"to_owned","","",420,[[["self"]],["t"]]],[11,"clone_into","","",420,[[["self"],["t"]]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"into","","",106,[[],["u"]]],[11,"try_into","","",106,[[],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"type_id","","",106,[[["self"]],["typeid"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"into","","",107,[[],["u"]]],[11,"try_into","","",107,[[],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"type_id","","",107,[[["self"]],["typeid"]]],[11,"from","std::collections::hash_set","",421,[[["t"]],["t"]]],[11,"into_iter","","",421,[[],["i"]]],[11,"try_from","","",421,[[["u"]],["result"]]],[11,"into","","",421,[[],["u"]]],[11,"try_into","","",421,[[],["result"]]],[11,"borrow","","",421,[[["self"]],["t"]]],[11,"borrow_mut","","",421,[[["self"]],["t"]]],[11,"type_id","","",421,[[["self"]],["typeid"]]],[11,"to_owned","","",421,[[["self"]],["t"]]],[11,"clone_into","","",421,[[["self"],["t"]]]],[11,"from","","",422,[[["t"]],["t"]]],[11,"into_iter","","",422,[[],["i"]]],[11,"try_from","","",422,[[["u"]],["result"]]],[11,"into","","",422,[[],["u"]]],[11,"try_into","","",422,[[],["result"]]],[11,"borrow","","",422,[[["self"]],["t"]]],[11,"borrow_mut","","",422,[[["self"]],["t"]]],[11,"type_id","","",422,[[["self"]],["typeid"]]],[11,"from","","",423,[[["t"]],["t"]]],[11,"into_iter","","",423,[[],["i"]]],[11,"try_from","","",423,[[["u"]],["result"]]],[11,"into","","",423,[[],["u"]]],[11,"try_into","","",423,[[],["result"]]],[11,"borrow","","",423,[[["self"]],["t"]]],[11,"borrow_mut","","",423,[[["self"]],["t"]]],[11,"type_id","","",423,[[["self"]],["typeid"]]],[11,"from","","",424,[[["t"]],["t"]]],[11,"into_iter","","",424,[[],["i"]]],[11,"try_from","","",424,[[["u"]],["result"]]],[11,"into","","",424,[[],["u"]]],[11,"try_into","","",424,[[],["result"]]],[11,"borrow","","",424,[[["self"]],["t"]]],[11,"borrow_mut","","",424,[[["self"]],["t"]]],[11,"type_id","","",424,[[["self"]],["typeid"]]],[11,"to_owned","","",424,[[["self"]],["t"]]],[11,"clone_into","","",424,[[["self"],["t"]]]],[11,"from","","",425,[[["t"]],["t"]]],[11,"into_iter","","",425,[[],["i"]]],[11,"try_from","","",425,[[["u"]],["result"]]],[11,"into","","",425,[[],["u"]]],[11,"try_into","","",425,[[],["result"]]],[11,"borrow","","",425,[[["self"]],["t"]]],[11,"borrow_mut","","",425,[[["self"]],["t"]]],[11,"type_id","","",425,[[["self"]],["typeid"]]],[11,"to_owned","","",425,[[["self"]],["t"]]],[11,"clone_into","","",425,[[["self"],["t"]]]],[11,"from","","",426,[[["t"]],["t"]]],[11,"into_iter","","",426,[[],["i"]]],[11,"try_from","","",426,[[["u"]],["result"]]],[11,"into","","",426,[[],["u"]]],[11,"try_into","","",426,[[],["result"]]],[11,"borrow","","",426,[[["self"]],["t"]]],[11,"borrow_mut","","",426,[[["self"]],["t"]]],[11,"type_id","","",426,[[["self"]],["typeid"]]],[11,"to_owned","","",426,[[["self"]],["t"]]],[11,"clone_into","","",426,[[["self"],["t"]]]],[11,"from","","",427,[[["t"]],["t"]]],[11,"into_iter","","",427,[[],["i"]]],[11,"try_from","","",427,[[["u"]],["result"]]],[11,"into","","",427,[[],["u"]]],[11,"try_into","","",427,[[],["result"]]],[11,"borrow","","",427,[[["self"]],["t"]]],[11,"borrow_mut","","",427,[[["self"]],["t"]]],[11,"type_id","","",427,[[["self"]],["typeid"]]],[11,"to_owned","","",427,[[["self"]],["t"]]],[11,"clone_into","","",427,[[["self"],["t"]]]],[11,"from","std::env","",428,[[["t"]],["t"]]],[11,"into_iter","","",428,[[],["i"]]],[11,"try_from","","",428,[[["u"]],["result"]]],[11,"into","","",428,[[],["u"]]],[11,"try_into","","",428,[[],["result"]]],[11,"borrow","","",428,[[["self"]],["t"]]],[11,"borrow_mut","","",428,[[["self"]],["t"]]],[11,"type_id","","",428,[[["self"]],["typeid"]]],[11,"from","","",429,[[["t"]],["t"]]],[11,"into_iter","","",429,[[],["i"]]],[11,"try_from","","",429,[[["u"]],["result"]]],[11,"into","","",429,[[],["u"]]],[11,"try_into","","",429,[[],["result"]]],[11,"borrow","","",429,[[["self"]],["t"]]],[11,"borrow_mut","","",429,[[["self"]],["t"]]],[11,"type_id","","",429,[[["self"]],["typeid"]]],[11,"from","","",430,[[["t"]],["t"]]],[11,"into_iter","","",430,[[],["i"]]],[11,"try_from","","",430,[[["u"]],["result"]]],[11,"into","","",430,[[],["u"]]],[11,"try_into","","",430,[[],["result"]]],[11,"borrow","","",430,[[["self"]],["t"]]],[11,"borrow_mut","","",430,[[["self"]],["t"]]],[11,"type_id","","",430,[[["self"]],["typeid"]]],[11,"from","","",431,[[["t"]],["t"]]],[11,"try_from","","",431,[[["u"]],["result"]]],[11,"into","","",431,[[],["u"]]],[11,"try_into","","",431,[[],["result"]]],[11,"borrow","","",431,[[["self"]],["t"]]],[11,"borrow_mut","","",431,[[["self"]],["t"]]],[11,"type_id","","",431,[[["self"]],["typeid"]]],[11,"to_string","","",431,[[["self"]],["string"]]],[11,"from","","",432,[[["t"]],["t"]]],[11,"into_iter","","",432,[[],["i"]]],[11,"try_from","","",432,[[["u"]],["result"]]],[11,"into","","",432,[[],["u"]]],[11,"try_into","","",432,[[],["result"]]],[11,"borrow","","",432,[[["self"]],["t"]]],[11,"borrow_mut","","",432,[[["self"]],["t"]]],[11,"type_id","","",432,[[["self"]],["typeid"]]],[11,"from","","",433,[[["t"]],["t"]]],[11,"into_iter","","",433,[[],["i"]]],[11,"try_from","","",433,[[["u"]],["result"]]],[11,"into","","",433,[[],["u"]]],[11,"try_into","","",433,[[],["result"]]],[11,"borrow","","",433,[[["self"]],["t"]]],[11,"borrow_mut","","",433,[[["self"]],["t"]]],[11,"type_id","","",433,[[["self"]],["typeid"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"into","","",108,[[],["u"]]],[11,"try_into","","",108,[[],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"type_id","","",108,[[["self"]],["typeid"]]],[11,"to_owned","","",108,[[["self"]],["t"]]],[11,"clone_into","","",108,[[["self"],["t"]]]],[11,"to_string","","",108,[[["self"]],["string"]]],[11,"from","std::error","",434,[[["t"]],["t"]]],[11,"into_iter","","",434,[[],["i"]]],[11,"try_from","","",434,[[["u"]],["result"]]],[11,"into","","",434,[[],["u"]]],[11,"try_into","","",434,[[],["result"]]],[11,"borrow","","",434,[[["self"]],["t"]]],[11,"borrow_mut","","",434,[[["self"]],["t"]]],[11,"type_id","","",434,[[["self"]],["typeid"]]],[11,"to_owned","","",434,[[["self"]],["t"]]],[11,"clone_into","","",434,[[["self"],["t"]]]],[11,"from","std::ffi","",435,[[["t"]],["t"]]],[11,"try_from","","",435,[[["u"]],["result"]]],[11,"into","","",435,[[],["u"]]],[11,"try_into","","",435,[[],["result"]]],[11,"borrow","","",435,[[["self"]],["t"]]],[11,"borrow_mut","","",435,[[["self"]],["t"]]],[11,"type_id","","",435,[[["self"]],["typeid"]]],[11,"from","","",436,[[["t"]],["t"]]],[11,"try_from","","",436,[[["u"]],["result"]]],[11,"into","","",436,[[],["u"]]],[11,"try_into","","",436,[[],["result"]]],[11,"borrow","","",436,[[["self"]],["t"]]],[11,"borrow_mut","","",436,[[["self"]],["t"]]],[11,"type_id","","",436,[[["self"]],["typeid"]]],[11,"from","","",437,[[["t"]],["t"]]],[11,"try_from","","",437,[[["u"]],["result"]]],[11,"into","","",437,[[],["u"]]],[11,"try_into","","",437,[[],["result"]]],[11,"borrow","","",437,[[["self"]],["t"]]],[11,"borrow_mut","","",437,[[["self"]],["t"]]],[11,"type_id","","",437,[[["self"]],["typeid"]]],[11,"to_owned","","",437,[[["self"]],["t"]]],[11,"clone_into","","",437,[[["self"],["t"]]]],[11,"from","","",438,[[["t"]],["t"]]],[11,"try_from","","",438,[[["u"]],["result"]]],[11,"into","","",438,[[],["u"]]],[11,"try_into","","",438,[[],["result"]]],[11,"borrow","","",438,[[["self"]],["t"]]],[11,"borrow_mut","","",438,[[["self"]],["t"]]],[11,"type_id","","",438,[[["self"]],["typeid"]]],[11,"to_owned","","",438,[[["self"]],["t"]]],[11,"clone_into","","",438,[[["self"],["t"]]]],[11,"to_string","","",438,[[["self"]],["string"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"type_id","","",113,[[["self"]],["typeid"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,[[["self"],["t"]]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"into","","",110,[[],["u"]]],[11,"try_into","","",110,[[],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"type_id","","",110,[[["self"]],["typeid"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,[[["self"],["t"]]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"into","","",112,[[],["u"]]],[11,"try_into","","",112,[[],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"type_id","","",112,[[["self"]],["typeid"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,[[["self"],["t"]]]],[11,"to_string","","",112,[[["self"]],["string"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"into","","",111,[[],["u"]]],[11,"try_into","","",111,[[],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"type_id","","",111,[[["self"]],["typeid"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,[[["self"],["t"]]]],[11,"to_string","","",111,[[["self"]],["string"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"type_id","","",115,[[["self"]],["typeid"]]],[11,"to_owned","","",115,[[["self"]],["t"]]],[11,"clone_into","","",115,[[["self"],["t"]]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"into","","",114,[[],["u"]]],[11,"try_into","","",114,[[],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"type_id","","",114,[[["self"]],["typeid"]]],[11,"to_owned","","",114,[[["self"]],["t"]]],[11,"clone_into","","",114,[[["self"],["t"]]]],[11,"from","std::fs","",116,[[["t"]],["t"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"into","","",116,[[],["u"]]],[11,"try_into","","",116,[[],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"type_id","","",116,[[["self"]],["typeid"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"into","","",118,[[],["u"]]],[11,"try_into","","",118,[[],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"type_id","","",118,[[["self"]],["typeid"]]],[11,"to_owned","","",118,[[["self"]],["t"]]],[11,"clone_into","","",118,[[["self"],["t"]]]],[11,"from","","",439,[[["t"]],["t"]]],[11,"into_iter","","",439,[[],["i"]]],[11,"try_from","","",439,[[["u"]],["result"]]],[11,"into","","",439,[[],["u"]]],[11,"try_into","","",439,[[],["result"]]],[11,"borrow","","",439,[[["self"]],["t"]]],[11,"borrow_mut","","",439,[[["self"]],["t"]]],[11,"type_id","","",439,[[["self"]],["typeid"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"into","","",121,[[],["u"]]],[11,"try_into","","",121,[[],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"type_id","","",121,[[["self"]],["typeid"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"into","","",117,[[],["u"]]],[11,"try_into","","",117,[[],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"type_id","","",117,[[["self"]],["typeid"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,[[["self"],["t"]]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"into","","",119,[[],["u"]]],[11,"try_into","","",119,[[],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"type_id","","",119,[[["self"]],["typeid"]]],[11,"to_owned","","",119,[[["self"]],["t"]]],[11,"clone_into","","",119,[[["self"],["t"]]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"into","","",120,[[],["u"]]],[11,"try_into","","",120,[[],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"type_id","","",120,[[["self"]],["typeid"]]],[11,"to_owned","","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,[[["self"],["t"]]]],[11,"from","","",122,[[["t"]],["t"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"into","","",122,[[],["u"]]],[11,"try_into","","",122,[[],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"type_id","","",122,[[["self"]],["typeid"]]],[11,"from","std::io","",127,[[["t"]],["t"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"into","","",127,[[],["u"]]],[11,"try_into","","",127,[[],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"type_id","","",127,[[["self"]],["typeid"]]],[11,"to_string","","",127,[[["self"]],["string"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"into","","",125,[[],["u"]]],[11,"try_into","","",125,[[],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"type_id","","",125,[[["self"]],["typeid"]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"into","","",126,[[],["u"]]],[11,"try_into","","",126,[[],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"type_id","","",126,[[["self"]],["typeid"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"into","","",128,[[],["u"]]],[11,"try_into","","",128,[[],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"type_id","","",128,[[["self"]],["typeid"]]],[11,"from","","",129,[[["t"]],["t"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"into","","",129,[[],["u"]]],[11,"try_into","","",129,[[],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"type_id","","",129,[[["self"]],["typeid"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,[[["self"],["t"]]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"into","","",130,[[],["u"]]],[11,"try_into","","",130,[[],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"type_id","","",130,[[["self"]],["typeid"]]],[11,"to_string","","",130,[[["self"]],["string"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"into","","",133,[[],["u"]]],[11,"try_into","","",133,[[],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"type_id","","",133,[[["self"]],["typeid"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"into","","",131,[[],["u"]]],[11,"try_into","","",131,[[],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"type_id","","",131,[[["self"]],["typeid"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"into","","",132,[[],["u"]]],[11,"try_into","","",132,[[],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"type_id","","",132,[[["self"]],["typeid"]]],[11,"from","","",440,[[["t"]],["t"]]],[11,"try_from","","",440,[[["u"]],["result"]]],[11,"into","","",440,[[],["u"]]],[11,"try_into","","",440,[[],["result"]]],[11,"borrow","","",440,[[["self"]],["t"]]],[11,"borrow_mut","","",440,[[["self"]],["t"]]],[11,"type_id","","",440,[[["self"]],["typeid"]]],[11,"from","","",441,[[["t"]],["t"]]],[11,"try_from","","",441,[[["u"]],["result"]]],[11,"into","","",441,[[],["u"]]],[11,"try_into","","",441,[[],["result"]]],[11,"borrow","","",441,[[["self"]],["t"]]],[11,"borrow_mut","","",441,[[["self"]],["t"]]],[11,"type_id","","",441,[[["self"]],["typeid"]]],[11,"from","","",442,[[["t"]],["t"]]],[11,"try_from","","",442,[[["u"]],["result"]]],[11,"into","","",442,[[],["u"]]],[11,"try_into","","",442,[[],["result"]]],[11,"borrow","","",442,[[["self"]],["t"]]],[11,"borrow_mut","","",442,[[["self"]],["t"]]],[11,"type_id","","",442,[[["self"]],["typeid"]]],[11,"from","","",443,[[["t"]],["t"]]],[11,"try_from","","",443,[[["u"]],["result"]]],[11,"into","","",443,[[],["u"]]],[11,"try_into","","",443,[[],["result"]]],[11,"borrow","","",443,[[["self"]],["t"]]],[11,"borrow_mut","","",443,[[["self"]],["t"]]],[11,"type_id","","",443,[[["self"]],["typeid"]]],[11,"from","","",444,[[["t"]],["t"]]],[11,"try_from","","",444,[[["u"]],["result"]]],[11,"into","","",444,[[],["u"]]],[11,"try_into","","",444,[[],["result"]]],[11,"borrow","","",444,[[["self"]],["t"]]],[11,"borrow_mut","","",444,[[["self"]],["t"]]],[11,"type_id","","",444,[[["self"]],["typeid"]]],[11,"from","","",445,[[["t"]],["t"]]],[11,"try_from","","",445,[[["u"]],["result"]]],[11,"into","","",445,[[],["u"]]],[11,"try_into","","",445,[[],["result"]]],[11,"borrow","","",445,[[["self"]],["t"]]],[11,"borrow_mut","","",445,[[["self"]],["t"]]],[11,"type_id","","",445,[[["self"]],["typeid"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"into","","",138,[[],["u"]]],[11,"try_into","","",138,[[],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"type_id","","",138,[[["self"]],["typeid"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"into","","",139,[[],["u"]]],[11,"try_into","","",139,[[],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"type_id","","",139,[[["self"]],["typeid"]]],[11,"from","","",140,[[["t"]],["t"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"into","","",140,[[],["u"]]],[11,"try_into","","",140,[[],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"type_id","","",140,[[["self"]],["typeid"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"into","","",141,[[],["u"]]],[11,"try_into","","",141,[[],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"type_id","","",141,[[["self"]],["typeid"]]],[11,"from","","",142,[[["t"]],["t"]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"into","","",142,[[],["u"]]],[11,"try_into","","",142,[[],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"type_id","","",142,[[["self"]],["typeid"]]],[11,"from","","",446,[[["t"]],["t"]]],[11,"into_iter","","",446,[[],["i"]]],[11,"try_from","","",446,[[["u"]],["result"]]],[11,"into","","",446,[[],["u"]]],[11,"try_into","","",446,[[],["result"]]],[11,"borrow","","",446,[[["self"]],["t"]]],[11,"borrow_mut","","",446,[[["self"]],["t"]]],[11,"type_id","","",446,[[["self"]],["typeid"]]],[11,"from","","",447,[[["t"]],["t"]]],[11,"into_iter","","",447,[[],["i"]]],[11,"try_from","","",447,[[["u"]],["result"]]],[11,"into","","",447,[[],["u"]]],[11,"try_into","","",447,[[],["result"]]],[11,"borrow","","",447,[[["self"]],["t"]]],[11,"borrow_mut","","",447,[[["self"]],["t"]]],[11,"type_id","","",447,[[["self"]],["typeid"]]],[11,"from","","",448,[[["t"]],["t"]]],[11,"into_iter","","",448,[[],["i"]]],[11,"try_from","","",448,[[["u"]],["result"]]],[11,"into","","",448,[[],["u"]]],[11,"try_into","","",448,[[],["result"]]],[11,"borrow","","",448,[[["self"]],["t"]]],[11,"borrow_mut","","",448,[[["self"]],["t"]]],[11,"type_id","","",448,[[["self"]],["typeid"]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"into","","",123,[[],["u"]]],[11,"try_into","","",123,[[],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"type_id","","",123,[[["self"]],["typeid"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,[[["self"],["t"]]]],[11,"from","","",124,[[["t"]],["t"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"into","","",124,[[],["u"]]],[11,"try_into","","",124,[[],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"type_id","","",124,[[["self"]],["typeid"]]],[11,"to_owned","","",124,[[["self"]],["t"]]],[11,"clone_into","","",124,[[["self"],["t"]]]],[11,"from","std::net","",147,[[["t"]],["t"]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"into","","",147,[[],["u"]]],[11,"try_into","","",147,[[],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"type_id","","",147,[[["self"]],["typeid"]]],[11,"to_owned","","",147,[[["self"]],["t"]]],[11,"clone_into","","",147,[[["self"],["t"]]]],[11,"to_string","","",147,[[["self"]],["string"]]],[11,"from","","",148,[[["t"]],["t"]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"into","","",148,[[],["u"]]],[11,"try_into","","",148,[[],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"type_id","","",148,[[["self"]],["typeid"]]],[11,"to_owned","","",148,[[["self"]],["t"]]],[11,"clone_into","","",148,[[["self"],["t"]]]],[11,"to_string","","",148,[[["self"]],["string"]]],[11,"from","","",149,[[["t"]],["t"]]],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"into","","",149,[[],["u"]]],[11,"try_into","","",149,[[],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"type_id","","",149,[[["self"]],["typeid"]]],[11,"to_owned","","",149,[[["self"]],["t"]]],[11,"clone_into","","",149,[[["self"],["t"]]]],[11,"to_string","","",149,[[["self"]],["string"]]],[11,"from","","",150,[[["t"]],["t"]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"into","","",150,[[],["u"]]],[11,"try_into","","",150,[[],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"type_id","","",150,[[["self"]],["typeid"]]],[11,"to_owned","","",150,[[["self"]],["t"]]],[11,"clone_into","","",150,[[["self"],["t"]]]],[11,"to_string","","",150,[[["self"]],["string"]]],[11,"from","","",449,[[["t"]],["t"]]],[11,"try_from","","",449,[[["u"]],["result"]]],[11,"into","","",449,[[],["u"]]],[11,"try_into","","",449,[[],["result"]]],[11,"borrow","","",449,[[["self"]],["t"]]],[11,"borrow_mut","","",449,[[["self"]],["t"]]],[11,"type_id","","",449,[[["self"]],["typeid"]]],[11,"to_owned","","",449,[[["self"]],["t"]]],[11,"clone_into","","",449,[[["self"],["t"]]]],[11,"to_string","","",449,[[["self"]],["string"]]],[11,"from","","",450,[[["t"]],["t"]]],[11,"into_iter","","",450,[[],["i"]]],[11,"try_from","","",450,[[["u"]],["result"]]],[11,"into","","",450,[[],["u"]]],[11,"try_into","","",450,[[],["result"]]],[11,"borrow","","",450,[[["self"]],["t"]]],[11,"borrow_mut","","",450,[[["self"]],["t"]]],[11,"type_id","","",450,[[["self"]],["typeid"]]],[11,"from","","",152,[[["t"]],["t"]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"into","","",152,[[],["u"]]],[11,"try_into","","",152,[[],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"type_id","","",152,[[["self"]],["typeid"]]],[11,"from","","",151,[[["t"]],["t"]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"into","","",151,[[],["u"]]],[11,"try_into","","",151,[[],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"type_id","","",151,[[["self"]],["typeid"]]],[11,"from","","",153,[[["t"]],["t"]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"into","","",153,[[],["u"]]],[11,"try_into","","",153,[[],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"type_id","","",153,[[["self"]],["typeid"]]],[11,"from","","",143,[[["t"]],["t"]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"into","","",143,[[],["u"]]],[11,"try_into","","",143,[[],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"type_id","","",143,[[["self"]],["typeid"]]],[11,"to_owned","","",143,[[["self"]],["t"]]],[11,"clone_into","","",143,[[["self"],["t"]]]],[11,"to_string","","",143,[[["self"]],["string"]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"into","","",144,[[],["u"]]],[11,"try_into","","",144,[[],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"type_id","","",144,[[["self"]],["typeid"]]],[11,"to_owned","","",144,[[["self"]],["t"]]],[11,"clone_into","","",144,[[["self"],["t"]]]],[11,"to_string","","",144,[[["self"]],["string"]]],[11,"from","","",145,[[["t"]],["t"]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"into","","",145,[[],["u"]]],[11,"try_into","","",145,[[],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"type_id","","",145,[[["self"]],["typeid"]]],[11,"to_owned","","",145,[[["self"]],["t"]]],[11,"clone_into","","",145,[[["self"],["t"]]]],[11,"from","","",146,[[["t"]],["t"]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"into","","",146,[[],["u"]]],[11,"try_into","","",146,[[],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"type_id","","",146,[[["self"]],["typeid"]]],[11,"to_owned","","",146,[[["self"]],["t"]]],[11,"clone_into","","",146,[[["self"],["t"]]]],[11,"from","std::num","",155,[[["t"]],["t"]]],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"into","","",155,[[],["u"]]],[11,"try_into","","",155,[[],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"type_id","","",155,[[["self"]],["typeid"]]],[11,"to_owned","","",155,[[["self"]],["t"]]],[11,"clone_into","","",155,[[["self"],["t"]]]],[11,"to_string","","",155,[[["self"]],["string"]]],[11,"from","","",156,[[["t"]],["t"]]],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"into","","",156,[[],["u"]]],[11,"try_into","","",156,[[],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"type_id","","",156,[[["self"]],["typeid"]]],[11,"to_owned","","",156,[[["self"]],["t"]]],[11,"clone_into","","",156,[[["self"],["t"]]]],[11,"from","","",451,[[["t"]],["t"]]],[11,"try_from","","",451,[[["u"]],["result"]]],[11,"into","","",451,[[],["u"]]],[11,"try_into","","",451,[[],["result"]]],[11,"borrow","","",451,[[["self"]],["t"]]],[11,"borrow_mut","","",451,[[["self"]],["t"]]],[11,"type_id","","",451,[[["self"]],["typeid"]]],[11,"to_owned","","",451,[[["self"]],["t"]]],[11,"clone_into","","",451,[[["self"],["t"]]]],[11,"to_string","","",451,[[["self"]],["string"]]],[11,"from","","",452,[[["t"]],["t"]]],[11,"try_from","","",452,[[["u"]],["result"]]],[11,"into","","",452,[[],["u"]]],[11,"try_into","","",452,[[],["result"]]],[11,"borrow","","",452,[[["self"]],["t"]]],[11,"borrow_mut","","",452,[[["self"]],["t"]]],[11,"type_id","","",452,[[["self"]],["typeid"]]],[11,"to_owned","","",452,[[["self"]],["t"]]],[11,"clone_into","","",452,[[["self"],["t"]]]],[11,"to_string","","",452,[[["self"]],["string"]]],[11,"from","","",453,[[["t"]],["t"]]],[11,"from","","",453,[[],["t"]]],[11,"try_from","","",453,[[["u"]],["result"]]],[11,"into","","",453,[[],["u"]]],[11,"try_into","","",453,[[],["result"]]],[11,"borrow","","",453,[[["self"]],["t"]]],[11,"borrow_mut","","",453,[[["self"]],["t"]]],[11,"type_id","","",453,[[["self"]],["typeid"]]],[11,"to_owned","","",453,[[["self"]],["t"]]],[11,"clone_into","","",453,[[["self"],["t"]]]],[11,"to_string","","",453,[[["self"]],["string"]]],[11,"from","","",454,[[["t"]],["t"]]],[11,"try_from","","",454,[[["u"]],["result"]]],[11,"into","","",454,[[],["u"]]],[11,"try_into","","",454,[[],["result"]]],[11,"borrow","","",454,[[["self"]],["t"]]],[11,"borrow_mut","","",454,[[["self"]],["t"]]],[11,"type_id","","",454,[[["self"]],["typeid"]]],[11,"to_owned","","",454,[[["self"]],["t"]]],[11,"clone_into","","",454,[[["self"],["t"]]]],[11,"to_string","","",454,[[["self"]],["string"]]],[11,"from","","",455,[[["t"]],["t"]]],[11,"try_from","","",455,[[["u"]],["result"]]],[11,"into","","",455,[[],["u"]]],[11,"try_into","","",455,[[],["result"]]],[11,"borrow","","",455,[[["self"]],["t"]]],[11,"borrow_mut","","",455,[[["self"]],["t"]]],[11,"type_id","","",455,[[["self"]],["typeid"]]],[11,"to_owned","","",455,[[["self"]],["t"]]],[11,"clone_into","","",455,[[["self"],["t"]]]],[11,"to_string","","",455,[[["self"]],["string"]]],[11,"from","","",456,[[["t"]],["t"]]],[11,"try_from","","",456,[[["u"]],["result"]]],[11,"into","","",456,[[],["u"]]],[11,"try_into","","",456,[[],["result"]]],[11,"borrow","","",456,[[["self"]],["t"]]],[11,"borrow_mut","","",456,[[["self"]],["t"]]],[11,"type_id","","",456,[[["self"]],["typeid"]]],[11,"to_owned","","",456,[[["self"]],["t"]]],[11,"clone_into","","",456,[[["self"],["t"]]]],[11,"to_string","","",456,[[["self"]],["string"]]],[11,"from","","",457,[[["t"]],["t"]]],[11,"try_from","","",457,[[["u"]],["result"]]],[11,"into","","",457,[[],["u"]]],[11,"try_into","","",457,[[],["result"]]],[11,"borrow","","",457,[[["self"]],["t"]]],[11,"borrow_mut","","",457,[[["self"]],["t"]]],[11,"type_id","","",457,[[["self"]],["typeid"]]],[11,"to_owned","","",457,[[["self"]],["t"]]],[11,"clone_into","","",457,[[["self"],["t"]]]],[11,"to_string","","",457,[[["self"]],["string"]]],[11,"from","","",458,[[["t"]],["t"]]],[11,"try_from","","",458,[[["u"]],["result"]]],[11,"into","","",458,[[],["u"]]],[11,"try_into","","",458,[[],["result"]]],[11,"borrow","","",458,[[["self"]],["t"]]],[11,"borrow_mut","","",458,[[["self"]],["t"]]],[11,"type_id","","",458,[[["self"]],["typeid"]]],[11,"to_owned","","",458,[[["self"]],["t"]]],[11,"clone_into","","",458,[[["self"],["t"]]]],[11,"to_string","","",458,[[["self"]],["string"]]],[11,"from","","",459,[[["t"]],["t"]]],[11,"try_from","","",459,[[["u"]],["result"]]],[11,"into","","",459,[[],["u"]]],[11,"try_into","","",459,[[],["result"]]],[11,"borrow","","",459,[[["self"]],["t"]]],[11,"borrow_mut","","",459,[[["self"]],["t"]]],[11,"type_id","","",459,[[["self"]],["typeid"]]],[11,"to_owned","","",459,[[["self"]],["t"]]],[11,"clone_into","","",459,[[["self"],["t"]]]],[11,"to_string","","",459,[[["self"]],["string"]]],[11,"from","","",460,[[["t"]],["t"]]],[11,"try_from","","",460,[[["u"]],["result"]]],[11,"into","","",460,[[],["u"]]],[11,"try_into","","",460,[[],["result"]]],[11,"borrow","","",460,[[["self"]],["t"]]],[11,"borrow_mut","","",460,[[["self"]],["t"]]],[11,"type_id","","",460,[[["self"]],["typeid"]]],[11,"to_owned","","",460,[[["self"]],["t"]]],[11,"clone_into","","",460,[[["self"],["t"]]]],[11,"to_string","","",460,[[["self"]],["string"]]],[11,"from","","",461,[[["t"]],["t"]]],[11,"try_from","","",461,[[["u"]],["result"]]],[11,"into","","",461,[[],["u"]]],[11,"try_into","","",461,[[],["result"]]],[11,"borrow","","",461,[[["self"]],["t"]]],[11,"borrow_mut","","",461,[[["self"]],["t"]]],[11,"type_id","","",461,[[["self"]],["typeid"]]],[11,"to_owned","","",461,[[["self"]],["t"]]],[11,"clone_into","","",461,[[["self"],["t"]]]],[11,"to_string","","",461,[[["self"]],["string"]]],[11,"from","","",462,[[["t"]],["t"]]],[11,"try_from","","",462,[[["u"]],["result"]]],[11,"into","","",462,[[],["u"]]],[11,"try_into","","",462,[[],["result"]]],[11,"borrow","","",462,[[["self"]],["t"]]],[11,"borrow_mut","","",462,[[["self"]],["t"]]],[11,"type_id","","",462,[[["self"]],["typeid"]]],[11,"to_owned","","",462,[[["self"]],["t"]]],[11,"clone_into","","",462,[[["self"],["t"]]]],[11,"to_string","","",462,[[["self"]],["string"]]],[11,"from","","",463,[[["t"]],["t"]]],[11,"try_from","","",463,[[["u"]],["result"]]],[11,"into","","",463,[[],["u"]]],[11,"try_into","","",463,[[],["result"]]],[11,"borrow","","",463,[[["self"]],["t"]]],[11,"borrow_mut","","",463,[[["self"]],["t"]]],[11,"type_id","","",463,[[["self"]],["typeid"]]],[11,"to_owned","","",463,[[["self"]],["t"]]],[11,"clone_into","","",463,[[["self"],["t"]]]],[11,"to_string","","",463,[[["self"]],["string"]]],[11,"from","","",464,[[["t"]],["t"]]],[11,"try_from","","",464,[[["u"]],["result"]]],[11,"into","","",464,[[],["u"]]],[11,"try_into","","",464,[[],["result"]]],[11,"borrow","","",464,[[["self"]],["t"]]],[11,"borrow_mut","","",464,[[["self"]],["t"]]],[11,"type_id","","",464,[[["self"]],["typeid"]]],[11,"to_owned","","",464,[[["self"]],["t"]]],[11,"clone_into","","",464,[[["self"],["t"]]]],[11,"to_string","","",464,[[["self"]],["string"]]],[11,"from","","",465,[[["t"]],["t"]]],[11,"try_from","","",465,[[["u"]],["result"]]],[11,"into","","",465,[[],["u"]]],[11,"try_into","","",465,[[],["result"]]],[11,"borrow","","",465,[[["self"]],["t"]]],[11,"borrow_mut","","",465,[[["self"]],["t"]]],[11,"type_id","","",465,[[["self"]],["typeid"]]],[11,"to_owned","","",465,[[["self"]],["t"]]],[11,"clone_into","","",465,[[["self"],["t"]]]],[11,"to_string","","",465,[[["self"]],["string"]]],[11,"from","","",157,[[["t"]],["t"]]],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"into","","",157,[[],["u"]]],[11,"try_into","","",157,[[],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"type_id","","",157,[[["self"]],["typeid"]]],[11,"to_owned","","",157,[[["self"]],["t"]]],[11,"clone_into","","",157,[[["self"],["t"]]]],[11,"from","std::os::unix::net","",227,[[["t"]],["t"]]],[11,"try_from","","",227,[[["u"]],["result"]]],[11,"into","","",227,[[],["u"]]],[11,"try_into","","",227,[[],["result"]]],[11,"borrow","","",227,[[["self"]],["t"]]],[11,"borrow_mut","","",227,[[["self"]],["t"]]],[11,"type_id","","",227,[[["self"]],["typeid"]]],[11,"to_owned","","",227,[[["self"]],["t"]]],[11,"clone_into","","",227,[[["self"],["t"]]]],[11,"from","","",228,[[["t"]],["t"]]],[11,"try_from","","",228,[[["u"]],["result"]]],[11,"into","","",228,[[],["u"]]],[11,"try_into","","",228,[[],["result"]]],[11,"borrow","","",228,[[["self"]],["t"]]],[11,"borrow_mut","","",228,[[["self"]],["t"]]],[11,"type_id","","",228,[[["self"]],["typeid"]]],[11,"from","","",229,[[["t"]],["t"]]],[11,"try_from","","",229,[[["u"]],["result"]]],[11,"into","","",229,[[],["u"]]],[11,"try_into","","",229,[[],["result"]]],[11,"borrow","","",229,[[["self"]],["t"]]],[11,"borrow_mut","","",229,[[["self"]],["t"]]],[11,"type_id","","",229,[[["self"]],["typeid"]]],[11,"from","","",466,[[["t"]],["t"]]],[11,"into_iter","","",466,[[],["i"]]],[11,"try_from","","",466,[[["u"]],["result"]]],[11,"into","","",466,[[],["u"]]],[11,"try_into","","",466,[[],["result"]]],[11,"borrow","","",466,[[["self"]],["t"]]],[11,"borrow_mut","","",466,[[["self"]],["t"]]],[11,"type_id","","",466,[[["self"]],["typeid"]]],[11,"from","","",230,[[["t"]],["t"]]],[11,"try_from","","",230,[[["u"]],["result"]]],[11,"into","","",230,[[],["u"]]],[11,"try_into","","",230,[[],["result"]]],[11,"borrow","","",230,[[["self"]],["t"]]],[11,"borrow_mut","","",230,[[["self"]],["t"]]],[11,"type_id","","",230,[[["self"]],["typeid"]]],[11,"from","std::os::windows::ffi","",467,[[["t"]],["t"]]],[11,"into_iter","","",467,[[],["i"]]],[11,"try_from","","",467,[[["u"]],["result"]]],[11,"into","","",467,[[],["u"]]],[11,"try_into","","",467,[[],["result"]]],[11,"borrow","","",467,[[["self"]],["t"]]],[11,"borrow_mut","","",467,[[["self"]],["t"]]],[11,"type_id","","",467,[[["self"]],["typeid"]]],[11,"to_owned","","",467,[[["self"]],["t"]]],[11,"clone_into","","",467,[[["self"],["t"]]]],[11,"from","std::os::linux::raw","",188,[[["t"]],["t"]]],[11,"try_from","","",188,[[["u"]],["result"]]],[11,"into","","",188,[[],["u"]]],[11,"try_into","","",188,[[],["result"]]],[11,"borrow","","",188,[[["self"]],["t"]]],[11,"borrow_mut","","",188,[[["self"]],["t"]]],[11,"type_id","","",188,[[["self"]],["typeid"]]],[11,"to_owned","","",188,[[["self"]],["t"]]],[11,"clone_into","","",188,[[["self"],["t"]]]],[11,"from","std::panic","",468,[[["t"]],["t"]]],[11,"try_from","","",468,[[["u"]],["result"]]],[11,"into","","",468,[[],["u"]]],[11,"try_into","","",468,[[],["result"]]],[11,"borrow","","",468,[[["self"]],["t"]]],[11,"borrow_mut","","",468,[[["self"]],["t"]]],[11,"type_id","","",468,[[["self"]],["typeid"]]],[11,"to_string","","",468,[[["self"]],["string"]]],[11,"from","","",469,[[["t"]],["t"]]],[11,"try_from","","",469,[[["u"]],["result"]]],[11,"into","","",469,[[],["u"]]],[11,"try_into","","",469,[[],["result"]]],[11,"borrow","","",469,[[["self"]],["t"]]],[11,"borrow_mut","","",469,[[["self"]],["t"]]],[11,"type_id","","",469,[[["self"]],["typeid"]]],[11,"to_string","","",469,[[["self"]],["string"]]],[11,"from","","",189,[[["t"]],["t"]]],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"into","","",189,[[],["u"]]],[11,"try_into","","",189,[[],["result"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"type_id","","",189,[[["self"]],["typeid"]]],[11,"from","std::path","",192,[[["t"]],["t"]]],[11,"try_from","","",192,[[["u"]],["result"]]],[11,"into","","",192,[[],["u"]]],[11,"try_into","","",192,[[],["result"]]],[11,"borrow","","",192,[[["self"]],["t"]]],[11,"borrow_mut","","",192,[[["self"]],["t"]]],[11,"type_id","","",192,[[["self"]],["typeid"]]],[11,"to_owned","","",192,[[["self"]],["t"]]],[11,"clone_into","","",192,[[["self"],["t"]]]],[11,"from","","",193,[[["t"]],["t"]]],[11,"into_iter","","",193,[[],["i"]]],[11,"try_from","","",193,[[["u"]],["result"]]],[11,"into","","",193,[[],["u"]]],[11,"try_into","","",193,[[],["result"]]],[11,"borrow","","",193,[[["self"]],["t"]]],[11,"borrow_mut","","",193,[[["self"]],["t"]]],[11,"type_id","","",193,[[["self"]],["typeid"]]],[11,"to_owned","","",193,[[["self"]],["t"]]],[11,"clone_into","","",193,[[["self"],["t"]]]],[11,"from","","",194,[[["t"]],["t"]]],[11,"into_iter","","",194,[[],["i"]]],[11,"try_from","","",194,[[["u"]],["result"]]],[11,"into","","",194,[[],["u"]]],[11,"try_into","","",194,[[],["result"]]],[11,"borrow","","",194,[[["self"]],["t"]]],[11,"borrow_mut","","",194,[[["self"]],["t"]]],[11,"type_id","","",194,[[["self"]],["typeid"]]],[11,"to_owned","","",194,[[["self"]],["t"]]],[11,"clone_into","","",194,[[["self"],["t"]]]],[11,"from","","",470,[[["t"]],["t"]]],[11,"into_iter","","",470,[[],["i"]]],[11,"try_from","","",470,[[["u"]],["result"]]],[11,"into","","",470,[[],["u"]]],[11,"try_into","","",470,[[],["result"]]],[11,"borrow","","",470,[[["self"]],["t"]]],[11,"borrow_mut","","",470,[[["self"]],["t"]]],[11,"type_id","","",470,[[["self"]],["typeid"]]],[11,"to_owned","","",470,[[["self"]],["t"]]],[11,"clone_into","","",470,[[["self"],["t"]]]],[11,"from","","",195,[[["t"]],["t"]]],[11,"try_from","","",195,[[["u"]],["result"]]],[11,"into","","",195,[[],["u"]]],[11,"try_into","","",195,[[],["result"]]],[11,"borrow","","",195,[[["self"]],["t"]]],[11,"borrow_mut","","",195,[[["self"]],["t"]]],[11,"type_id","","",195,[[["self"]],["typeid"]]],[11,"to_owned","","",195,[[["self"]],["t"]]],[11,"clone_into","","",195,[[["self"],["t"]]]],[11,"borrow","","",196,[[["self"]],["t"]]],[11,"borrow_mut","","",196,[[["self"]],["t"]]],[11,"type_id","","",196,[[["self"]],["typeid"]]],[11,"to_owned","","",196,[[["self"]],["t"]]],[11,"clone_into","","",196,[[["self"],["t"]]]],[11,"from","","",471,[[["t"]],["t"]]],[11,"try_from","","",471,[[["u"]],["result"]]],[11,"into","","",471,[[],["u"]]],[11,"try_into","","",471,[[],["result"]]],[11,"borrow","","",471,[[["self"]],["t"]]],[11,"borrow_mut","","",471,[[["self"]],["t"]]],[11,"type_id","","",471,[[["self"]],["typeid"]]],[11,"to_owned","","",471,[[["self"]],["t"]]],[11,"clone_into","","",471,[[["self"],["t"]]]],[11,"to_string","","",471,[[["self"]],["string"]]],[11,"from","","",472,[[["t"]],["t"]]],[11,"try_from","","",472,[[["u"]],["result"]]],[11,"into","","",472,[[],["u"]]],[11,"try_into","","",472,[[],["result"]]],[11,"borrow","","",472,[[["self"]],["t"]]],[11,"borrow_mut","","",472,[[["self"]],["t"]]],[11,"type_id","","",472,[[["self"]],["typeid"]]],[11,"to_string","","",472,[[["self"]],["string"]]],[11,"from","","",190,[[["t"]],["t"]]],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"into","","",190,[[],["u"]]],[11,"try_into","","",190,[[],["result"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"type_id","","",190,[[["self"]],["typeid"]]],[11,"to_owned","","",190,[[["self"]],["t"]]],[11,"clone_into","","",190,[[["self"],["t"]]]],[11,"from","","",191,[[["t"]],["t"]]],[11,"try_from","","",191,[[["u"]],["result"]]],[11,"into","","",191,[[],["u"]]],[11,"try_into","","",191,[[],["result"]]],[11,"borrow","","",191,[[["self"]],["t"]]],[11,"borrow_mut","","",191,[[["self"]],["t"]]],[11,"type_id","","",191,[[["self"]],["typeid"]]],[11,"to_owned","","",191,[[["self"]],["t"]]],[11,"clone_into","","",191,[[["self"],["t"]]]],[11,"from","std::process","",197,[[["t"]],["t"]]],[11,"try_from","","",197,[[["u"]],["result"]]],[11,"into","","",197,[[],["u"]]],[11,"try_into","","",197,[[],["result"]]],[11,"borrow","","",197,[[["self"]],["t"]]],[11,"borrow_mut","","",197,[[["self"]],["t"]]],[11,"type_id","","",197,[[["self"]],["typeid"]]],[11,"from","","",473,[[["t"]],["t"]]],[11,"try_from","","",473,[[["u"]],["result"]]],[11,"into","","",473,[[],["u"]]],[11,"try_into","","",473,[[],["result"]]],[11,"borrow","","",473,[[["self"]],["t"]]],[11,"borrow_mut","","",473,[[["self"]],["t"]]],[11,"type_id","","",473,[[["self"]],["typeid"]]],[11,"from","","",474,[[["t"]],["t"]]],[11,"try_from","","",474,[[["u"]],["result"]]],[11,"into","","",474,[[],["u"]]],[11,"try_into","","",474,[[],["result"]]],[11,"borrow","","",474,[[["self"]],["t"]]],[11,"borrow_mut","","",474,[[["self"]],["t"]]],[11,"type_id","","",474,[[["self"]],["typeid"]]],[11,"from","","",475,[[["t"]],["t"]]],[11,"try_from","","",475,[[["u"]],["result"]]],[11,"into","","",475,[[],["u"]]],[11,"try_into","","",475,[[],["result"]]],[11,"borrow","","",475,[[["self"]],["t"]]],[11,"borrow_mut","","",475,[[["self"]],["t"]]],[11,"type_id","","",475,[[["self"]],["typeid"]]],[11,"from","","",200,[[["t"]],["t"]]],[11,"try_from","","",200,[[["u"]],["result"]]],[11,"into","","",200,[[],["u"]]],[11,"try_into","","",200,[[],["result"]]],[11,"borrow","","",200,[[["self"]],["t"]]],[11,"borrow_mut","","",200,[[["self"]],["t"]]],[11,"type_id","","",200,[[["self"]],["typeid"]]],[11,"from","","",198,[[["t"]],["t"]]],[11,"try_from","","",198,[[["u"]],["result"]]],[11,"into","","",198,[[],["u"]]],[11,"try_into","","",198,[[],["result"]]],[11,"borrow","","",198,[[["self"]],["t"]]],[11,"borrow_mut","","",198,[[["self"]],["t"]]],[11,"type_id","","",198,[[["self"]],["typeid"]]],[11,"to_owned","","",198,[[["self"]],["t"]]],[11,"clone_into","","",198,[[["self"],["t"]]]],[11,"from","","",201,[[["t"]],["t"]]],[11,"try_from","","",201,[[["u"]],["result"]]],[11,"into","","",201,[[],["u"]]],[11,"try_into","","",201,[[],["result"]]],[11,"borrow","","",201,[[["self"]],["t"]]],[11,"borrow_mut","","",201,[[["self"]],["t"]]],[11,"type_id","","",201,[[["self"]],["typeid"]]],[11,"from","","",202,[[["t"]],["t"]]],[11,"try_from","","",202,[[["u"]],["result"]]],[11,"into","","",202,[[],["u"]]],[11,"try_into","","",202,[[],["result"]]],[11,"borrow","","",202,[[["self"]],["t"]]],[11,"borrow_mut","","",202,[[["self"]],["t"]]],[11,"type_id","","",202,[[["self"]],["typeid"]]],[11,"to_owned","","",202,[[["self"]],["t"]]],[11,"clone_into","","",202,[[["self"],["t"]]]],[11,"to_string","","",202,[[["self"]],["string"]]],[11,"from","","",203,[[["t"]],["t"]]],[11,"try_from","","",203,[[["u"]],["result"]]],[11,"into","","",203,[[],["u"]]],[11,"try_into","","",203,[[],["result"]]],[11,"borrow","","",203,[[["self"]],["t"]]],[11,"borrow_mut","","",203,[[["self"]],["t"]]],[11,"type_id","","",203,[[["self"]],["typeid"]]],[11,"to_owned","","",203,[[["self"]],["t"]]],[11,"clone_into","","",203,[[["self"],["t"]]]],[11,"from","std::sync","",476,[[["t"]],["t"]]],[11,"from","","",476,[[],["t"]]],[11,"try_from","","",476,[[["u"]],["result"]]],[11,"into","","",476,[[],["u"]]],[11,"try_into","","",476,[[],["result"]]],[11,"borrow","","",476,[[["self"]],["t"]]],[11,"borrow_mut","","",476,[[["self"]],["t"]]],[11,"type_id","","",476,[[["self"]],["typeid"]]],[11,"to_owned","","",476,[[["self"]],["t"]]],[11,"clone_into","","",476,[[["self"],["t"]]]],[11,"to_string","","",476,[[["self"]],["string"]]],[11,"from","","",477,[[["t"]],["t"]]],[11,"try_from","","",477,[[["u"]],["result"]]],[11,"into","","",477,[[],["u"]]],[11,"try_into","","",477,[[],["result"]]],[11,"borrow","","",477,[[["self"]],["t"]]],[11,"borrow_mut","","",477,[[["self"]],["t"]]],[11,"type_id","","",477,[[["self"]],["typeid"]]],[11,"to_owned","","",477,[[["self"]],["t"]]],[11,"clone_into","","",477,[[["self"],["t"]]]],[11,"from","std::sync::atomic","",478,[[["t"]],["t"]]],[11,"try_from","","",478,[[["u"]],["result"]]],[11,"into","","",478,[[],["u"]]],[11,"try_into","","",478,[[],["result"]]],[11,"borrow","","",478,[[["self"]],["t"]]],[11,"borrow_mut","","",478,[[["self"]],["t"]]],[11,"type_id","","",478,[[["self"]],["typeid"]]],[11,"from","","",479,[[["t"]],["t"]]],[11,"try_from","","",479,[[["u"]],["result"]]],[11,"into","","",479,[[],["u"]]],[11,"try_into","","",479,[[],["result"]]],[11,"borrow","","",479,[[["self"]],["t"]]],[11,"borrow_mut","","",479,[[["self"]],["t"]]],[11,"type_id","","",479,[[["self"]],["typeid"]]],[11,"from","","",204,[[["t"]],["t"]]],[11,"try_from","","",204,[[["u"]],["result"]]],[11,"into","","",204,[[],["u"]]],[11,"try_into","","",204,[[],["result"]]],[11,"borrow","","",204,[[["self"]],["t"]]],[11,"borrow_mut","","",204,[[["self"]],["t"]]],[11,"type_id","","",204,[[["self"]],["typeid"]]],[11,"to_owned","","",204,[[["self"]],["t"]]],[11,"clone_into","","",204,[[["self"],["t"]]]],[11,"from","","",480,[[["t"]],["t"]]],[11,"try_from","","",480,[[["u"]],["result"]]],[11,"into","","",480,[[],["u"]]],[11,"try_into","","",480,[[],["result"]]],[11,"borrow","","",480,[[["self"]],["t"]]],[11,"borrow_mut","","",480,[[["self"]],["t"]]],[11,"type_id","","",480,[[["self"]],["typeid"]]],[11,"from","","",481,[[["t"]],["t"]]],[11,"try_from","","",481,[[["u"]],["result"]]],[11,"into","","",481,[[],["u"]]],[11,"try_into","","",481,[[],["result"]]],[11,"borrow","","",481,[[["self"]],["t"]]],[11,"borrow_mut","","",481,[[["self"]],["t"]]],[11,"type_id","","",481,[[["self"]],["typeid"]]],[11,"from","","",482,[[["t"]],["t"]]],[11,"try_from","","",482,[[["u"]],["result"]]],[11,"into","","",482,[[],["u"]]],[11,"try_into","","",482,[[],["result"]]],[11,"borrow","","",482,[[["self"]],["t"]]],[11,"borrow_mut","","",482,[[["self"]],["t"]]],[11,"type_id","","",482,[[["self"]],["typeid"]]],[11,"from","","",483,[[["t"]],["t"]]],[11,"try_from","","",483,[[["u"]],["result"]]],[11,"into","","",483,[[],["u"]]],[11,"try_into","","",483,[[],["result"]]],[11,"borrow","","",483,[[["self"]],["t"]]],[11,"borrow_mut","","",483,[[["self"]],["t"]]],[11,"type_id","","",483,[[["self"]],["typeid"]]],[11,"from","","",484,[[["t"]],["t"]]],[11,"try_from","","",484,[[["u"]],["result"]]],[11,"into","","",484,[[],["u"]]],[11,"try_into","","",484,[[],["result"]]],[11,"borrow","","",484,[[["self"]],["t"]]],[11,"borrow_mut","","",484,[[["self"]],["t"]]],[11,"type_id","","",484,[[["self"]],["typeid"]]],[11,"from","","",485,[[["t"]],["t"]]],[11,"try_from","","",485,[[["u"]],["result"]]],[11,"into","","",485,[[],["u"]]],[11,"try_into","","",485,[[],["result"]]],[11,"borrow","","",485,[[["self"]],["t"]]],[11,"borrow_mut","","",485,[[["self"]],["t"]]],[11,"type_id","","",485,[[["self"]],["typeid"]]],[11,"from","","",486,[[["t"]],["t"]]],[11,"try_from","","",486,[[["u"]],["result"]]],[11,"into","","",486,[[],["u"]]],[11,"try_into","","",486,[[],["result"]]],[11,"borrow","","",486,[[["self"]],["t"]]],[11,"borrow_mut","","",486,[[["self"]],["t"]]],[11,"type_id","","",486,[[["self"]],["typeid"]]],[11,"from","","",487,[[["t"]],["t"]]],[11,"try_from","","",487,[[["u"]],["result"]]],[11,"into","","",487,[[],["u"]]],[11,"try_into","","",487,[[],["result"]]],[11,"borrow","","",487,[[["self"]],["t"]]],[11,"borrow_mut","","",487,[[["self"]],["t"]]],[11,"type_id","","",487,[[["self"]],["typeid"]]],[11,"from","","",488,[[["t"]],["t"]]],[11,"try_from","","",488,[[["u"]],["result"]]],[11,"into","","",488,[[],["u"]]],[11,"try_into","","",488,[[],["result"]]],[11,"borrow","","",488,[[["self"]],["t"]]],[11,"borrow_mut","","",488,[[["self"]],["t"]]],[11,"type_id","","",488,[[["self"]],["typeid"]]],[11,"from","","",489,[[["t"]],["t"]]],[11,"try_from","","",489,[[["u"]],["result"]]],[11,"into","","",489,[[],["u"]]],[11,"try_into","","",489,[[],["result"]]],[11,"borrow","","",489,[[["self"]],["t"]]],[11,"borrow_mut","","",489,[[["self"]],["t"]]],[11,"type_id","","",489,[[["self"]],["typeid"]]],[11,"from","std::sync","",213,[[["t"]],["t"]]],[11,"try_from","","",213,[[["u"]],["result"]]],[11,"into","","",213,[[],["u"]]],[11,"try_into","","",213,[[],["result"]]],[11,"borrow","","",213,[[["self"]],["t"]]],[11,"borrow_mut","","",213,[[["self"]],["t"]]],[11,"type_id","","",213,[[["self"]],["typeid"]]],[11,"from","","",214,[[["t"]],["t"]]],[11,"try_from","","",214,[[["u"]],["result"]]],[11,"into","","",214,[[],["u"]]],[11,"try_into","","",214,[[],["result"]]],[11,"borrow","","",214,[[["self"]],["t"]]],[11,"borrow_mut","","",214,[[["self"]],["t"]]],[11,"type_id","","",214,[[["self"]],["typeid"]]],[11,"from","","",216,[[["t"]],["t"]]],[11,"try_from","","",216,[[["u"]],["result"]]],[11,"into","","",216,[[],["u"]]],[11,"try_into","","",216,[[],["result"]]],[11,"borrow","","",216,[[["self"]],["t"]]],[11,"borrow_mut","","",216,[[["self"]],["t"]]],[11,"type_id","","",216,[[["self"]],["typeid"]]],[11,"from","","",215,[[["t"]],["t"]]],[11,"try_from","","",215,[[["u"]],["result"]]],[11,"into","","",215,[[],["u"]]],[11,"try_into","","",215,[[],["result"]]],[11,"borrow","","",215,[[["self"]],["t"]]],[11,"borrow_mut","","",215,[[["self"]],["t"]]],[11,"type_id","","",215,[[["self"]],["typeid"]]],[11,"to_owned","","",215,[[["self"]],["t"]]],[11,"clone_into","","",215,[[["self"],["t"]]]],[11,"from","","",217,[[["t"]],["t"]]],[11,"from","","",217,[[],["t"]]],[11,"try_from","","",217,[[["u"]],["result"]]],[11,"into","","",217,[[],["u"]]],[11,"try_into","","",217,[[],["result"]]],[11,"borrow","","",217,[[["self"]],["t"]]],[11,"borrow_mut","","",217,[[["self"]],["t"]]],[11,"type_id","","",217,[[["self"]],["typeid"]]],[11,"from","","",490,[[["t"]],["t"]]],[11,"try_from","","",490,[[["u"]],["result"]]],[11,"into","","",490,[[],["u"]]],[11,"try_into","","",490,[[],["result"]]],[11,"borrow","","",490,[[["self"]],["t"]]],[11,"borrow_mut","","",490,[[["self"]],["t"]]],[11,"type_id","","",490,[[["self"]],["typeid"]]],[11,"to_string","","",490,[[["self"]],["string"]]],[11,"from","","",218,[[["t"]],["t"]]],[11,"try_from","","",218,[[["u"]],["result"]]],[11,"into","","",218,[[],["u"]]],[11,"try_into","","",218,[[],["result"]]],[11,"borrow","","",218,[[["self"]],["t"]]],[11,"borrow_mut","","",218,[[["self"]],["t"]]],[11,"type_id","","",218,[[["self"]],["typeid"]]],[11,"from","","",219,[[["t"]],["t"]]],[11,"try_from","","",219,[[["u"]],["result"]]],[11,"into","","",219,[[],["u"]]],[11,"try_into","","",219,[[],["result"]]],[11,"borrow","","",219,[[["self"]],["t"]]],[11,"borrow_mut","","",219,[[["self"]],["t"]]],[11,"type_id","","",219,[[["self"]],["typeid"]]],[11,"from","","",220,[[["t"]],["t"]]],[11,"from","","",220,[[],["t"]]],[11,"try_from","","",220,[[["u"]],["result"]]],[11,"into","","",220,[[],["u"]]],[11,"try_into","","",220,[[],["result"]]],[11,"borrow","","",220,[[["self"]],["t"]]],[11,"borrow_mut","","",220,[[["self"]],["t"]]],[11,"type_id","","",220,[[["self"]],["typeid"]]],[11,"from","","",491,[[["t"]],["t"]]],[11,"try_from","","",491,[[["u"]],["result"]]],[11,"into","","",491,[[],["u"]]],[11,"try_into","","",491,[[],["result"]]],[11,"borrow","","",491,[[["self"]],["t"]]],[11,"borrow_mut","","",491,[[["self"]],["t"]]],[11,"type_id","","",491,[[["self"]],["typeid"]]],[11,"to_string","","",491,[[["self"]],["string"]]],[11,"from","","",492,[[["t"]],["t"]]],[11,"try_from","","",492,[[["u"]],["result"]]],[11,"into","","",492,[[],["u"]]],[11,"try_into","","",492,[[],["result"]]],[11,"borrow","","",492,[[["self"]],["t"]]],[11,"borrow_mut","","",492,[[["self"]],["t"]]],[11,"type_id","","",492,[[["self"]],["typeid"]]],[11,"to_string","","",492,[[["self"]],["string"]]],[11,"from","","",226,[[["t"]],["t"]]],[11,"try_from","","",226,[[["u"]],["result"]]],[11,"into","","",226,[[],["u"]]],[11,"try_into","","",226,[[],["result"]]],[11,"borrow","","",226,[[["self"]],["t"]]],[11,"borrow_mut","","",226,[[["self"]],["t"]]],[11,"type_id","","",226,[[["self"]],["typeid"]]],[11,"to_string","","",226,[[["self"]],["string"]]],[11,"from","","",205,[[["t"]],["t"]]],[11,"try_from","","",205,[[["u"]],["result"]]],[11,"into","","",205,[[],["u"]]],[11,"try_into","","",205,[[],["result"]]],[11,"borrow","","",205,[[["self"]],["t"]]],[11,"borrow_mut","","",205,[[["self"]],["t"]]],[11,"type_id","","",205,[[["self"]],["typeid"]]],[11,"to_string","","",205,[[["self"]],["string"]]],[11,"from","std::sync::mpsc","",212,[[["t"]],["t"]]],[11,"into_iter","","",212,[[],["i"]]],[11,"try_from","","",212,[[["u"]],["result"]]],[11,"into","","",212,[[],["u"]]],[11,"try_into","","",212,[[],["result"]]],[11,"borrow","","",212,[[["self"]],["t"]]],[11,"borrow_mut","","",212,[[["self"]],["t"]]],[11,"type_id","","",212,[[["self"]],["typeid"]]],[11,"from","","",493,[[["t"]],["t"]]],[11,"into_iter","","",493,[[],["i"]]],[11,"try_from","","",493,[[["u"]],["result"]]],[11,"into","","",493,[[],["u"]]],[11,"try_into","","",493,[[],["result"]]],[11,"borrow","","",493,[[["self"]],["t"]]],[11,"borrow_mut","","",493,[[["self"]],["t"]]],[11,"type_id","","",493,[[["self"]],["typeid"]]],[11,"from","","",494,[[["t"]],["t"]]],[11,"into_iter","","",494,[[],["i"]]],[11,"try_from","","",494,[[["u"]],["result"]]],[11,"into","","",494,[[],["u"]]],[11,"try_into","","",494,[[],["result"]]],[11,"borrow","","",494,[[["self"]],["t"]]],[11,"borrow_mut","","",494,[[["self"]],["t"]]],[11,"type_id","","",494,[[["self"]],["typeid"]]],[11,"from","","",495,[[["t"]],["t"]]],[11,"into_iter","","",495,[[],["i"]]],[11,"try_from","","",495,[[["u"]],["result"]]],[11,"into","","",495,[[],["u"]]],[11,"try_into","","",495,[[],["result"]]],[11,"borrow","","",495,[[["self"]],["t"]]],[11,"borrow_mut","","",495,[[["self"]],["t"]]],[11,"type_id","","",495,[[["self"]],["typeid"]]],[11,"from","","",210,[[["t"]],["t"]]],[11,"try_from","","",210,[[["u"]],["result"]]],[11,"into","","",210,[[],["u"]]],[11,"try_into","","",210,[[],["result"]]],[11,"borrow","","",210,[[["self"]],["t"]]],[11,"borrow_mut","","",210,[[["self"]],["t"]]],[11,"type_id","","",210,[[["self"]],["typeid"]]],[11,"to_owned","","",210,[[["self"]],["t"]]],[11,"clone_into","","",210,[[["self"],["t"]]]],[11,"from","","",211,[[["t"]],["t"]]],[11,"try_from","","",211,[[["u"]],["result"]]],[11,"into","","",211,[[],["u"]]],[11,"try_into","","",211,[[],["result"]]],[11,"borrow","","",211,[[["self"]],["t"]]],[11,"borrow_mut","","",211,[[["self"]],["t"]]],[11,"type_id","","",211,[[["self"]],["typeid"]]],[11,"to_owned","","",211,[[["self"]],["t"]]],[11,"clone_into","","",211,[[["self"],["t"]]]],[11,"from","","",206,[[["t"]],["t"]]],[11,"try_from","","",206,[[["u"]],["result"]]],[11,"into","","",206,[[],["u"]]],[11,"try_into","","",206,[[],["result"]]],[11,"borrow","","",206,[[["self"]],["t"]]],[11,"borrow_mut","","",206,[[["self"]],["t"]]],[11,"type_id","","",206,[[["self"]],["typeid"]]],[11,"to_owned","","",206,[[["self"]],["t"]]],[11,"clone_into","","",206,[[["self"],["t"]]]],[11,"to_string","","",206,[[["self"]],["string"]]],[11,"from","","",496,[[["t"]],["t"]]],[11,"try_from","","",496,[[["u"]],["result"]]],[11,"into","","",496,[[],["u"]]],[11,"try_into","","",496,[[],["result"]]],[11,"borrow","","",496,[[["self"]],["t"]]],[11,"borrow_mut","","",496,[[["self"]],["t"]]],[11,"type_id","","",496,[[["self"]],["typeid"]]],[11,"to_owned","","",496,[[["self"]],["t"]]],[11,"clone_into","","",496,[[["self"],["t"]]]],[11,"to_string","","",496,[[["self"]],["string"]]],[11,"from","","",207,[[["t"]],["t"]]],[11,"try_from","","",207,[[["u"]],["result"]]],[11,"into","","",207,[[],["u"]]],[11,"try_into","","",207,[[],["result"]]],[11,"borrow","","",207,[[["self"]],["t"]]],[11,"borrow_mut","","",207,[[["self"]],["t"]]],[11,"type_id","","",207,[[["self"]],["typeid"]]],[11,"to_owned","","",207,[[["self"]],["t"]]],[11,"clone_into","","",207,[[["self"],["t"]]]],[11,"to_string","","",207,[[["self"]],["string"]]],[11,"from","","",208,[[["t"]],["t"]]],[11,"try_from","","",208,[[["u"]],["result"]]],[11,"into","","",208,[[],["u"]]],[11,"try_into","","",208,[[],["result"]]],[11,"borrow","","",208,[[["self"]],["t"]]],[11,"borrow_mut","","",208,[[["self"]],["t"]]],[11,"type_id","","",208,[[["self"]],["typeid"]]],[11,"to_owned","","",208,[[["self"]],["t"]]],[11,"clone_into","","",208,[[["self"],["t"]]]],[11,"to_string","","",208,[[["self"]],["string"]]],[11,"from","","",209,[[["t"]],["t"]]],[11,"try_from","","",209,[[["u"]],["result"]]],[11,"into","","",209,[[],["u"]]],[11,"try_into","","",209,[[],["result"]]],[11,"borrow","","",209,[[["self"]],["t"]]],[11,"borrow_mut","","",209,[[["self"]],["t"]]],[11,"type_id","","",209,[[["self"]],["typeid"]]],[11,"to_owned","","",209,[[["self"]],["t"]]],[11,"clone_into","","",209,[[["self"],["t"]]]],[11,"to_string","","",209,[[["self"]],["string"]]],[11,"from","std::time","",497,[[["t"]],["t"]]],[11,"try_from","","",497,[[["u"]],["result"]]],[11,"into","","",497,[[],["u"]]],[11,"try_into","","",497,[[],["result"]]],[11,"borrow","","",497,[[["self"]],["t"]]],[11,"borrow_mut","","",497,[[["self"]],["t"]]],[11,"type_id","","",497,[[["self"]],["typeid"]]],[11,"to_owned","","",497,[[["self"]],["t"]]],[11,"clone_into","","",497,[[["self"],["t"]]]],[11,"from","","",221,[[["t"]],["t"]]],[11,"try_from","","",221,[[["u"]],["result"]]],[11,"into","","",221,[[],["u"]]],[11,"try_into","","",221,[[],["result"]]],[11,"borrow","","",221,[[["self"]],["t"]]],[11,"borrow_mut","","",221,[[["self"]],["t"]]],[11,"type_id","","",221,[[["self"]],["typeid"]]],[11,"to_owned","","",221,[[["self"]],["t"]]],[11,"clone_into","","",221,[[["self"],["t"]]]],[11,"from","","",222,[[["t"]],["t"]]],[11,"try_from","","",222,[[["u"]],["result"]]],[11,"into","","",222,[[],["u"]]],[11,"try_into","","",222,[[],["result"]]],[11,"borrow","","",222,[[["self"]],["t"]]],[11,"borrow_mut","","",222,[[["self"]],["t"]]],[11,"type_id","","",222,[[["self"]],["typeid"]]],[11,"to_owned","","",222,[[["self"]],["t"]]],[11,"clone_into","","",222,[[["self"],["t"]]]],[11,"from","","",223,[[["t"]],["t"]]],[11,"try_from","","",223,[[["u"]],["result"]]],[11,"into","","",223,[[],["u"]]],[11,"try_into","","",223,[[],["result"]]],[11,"borrow","","",223,[[["self"]],["t"]]],[11,"borrow_mut","","",223,[[["self"]],["t"]]],[11,"type_id","","",223,[[["self"]],["typeid"]]],[11,"to_owned","","",223,[[["self"]],["t"]]],[11,"clone_into","","",223,[[["self"],["t"]]]],[11,"to_string","","",223,[[["self"]],["string"]]],[11,"from","std::task","",224,[[["t"]],["t"]]],[11,"from","","",224,[[],["t"]]],[11,"try_from","","",224,[[["u"]],["result"]]],[11,"into","","",224,[[],["u"]]],[11,"try_into","","",224,[[],["result"]]],[11,"borrow","","",224,[[["self"]],["t"]]],[11,"borrow_mut","","",224,[[["self"]],["t"]]],[11,"type_id","","",224,[[["self"]],["typeid"]]],[11,"to_owned","","",224,[[["self"]],["t"]]],[11,"clone_into","","",224,[[["self"],["t"]]]],[11,"from","","",498,[[["t"]],["t"]]],[11,"try_from","","",498,[[["u"]],["result"]]],[11,"into","","",498,[[],["u"]]],[11,"try_into","","",498,[[],["result"]]],[11,"borrow","","",498,[[["self"]],["t"]]],[11,"borrow_mut","","",498,[[["self"]],["t"]]],[11,"type_id","","",498,[[["self"]],["typeid"]]],[11,"from","","",499,[[["t"]],["t"]]],[11,"try_from","","",499,[[["u"]],["result"]]],[11,"into","","",499,[[],["u"]]],[11,"try_into","","",499,[[],["result"]]],[11,"borrow","","",499,[[["self"]],["t"]]],[11,"borrow_mut","","",499,[[["self"]],["t"]]],[11,"type_id","","",499,[[["self"]],["typeid"]]],[11,"from","","",500,[[["t"]],["t"]]],[11,"try_from","","",500,[[["u"]],["result"]]],[11,"into","","",500,[[],["u"]]],[11,"try_into","","",500,[[],["result"]]],[11,"borrow","","",500,[[["self"]],["t"]]],[11,"borrow_mut","","",500,[[["self"]],["t"]]],[11,"type_id","","",500,[[["self"]],["typeid"]]],[11,"to_owned","","",500,[[["self"]],["t"]]],[11,"clone_into","","",500,[[["self"],["t"]]]],[11,"from","","",501,[[["t"]],["t"]]],[11,"try_from","","",501,[[["u"]],["result"]]],[11,"into","","",501,[[],["u"]]],[11,"try_into","","",501,[[],["result"]]],[11,"borrow","","",501,[[["self"]],["t"]]],[11,"borrow_mut","","",501,[[["self"]],["t"]]],[11,"type_id","","",501,[[["self"]],["typeid"]]],[11,"to_owned","","",501,[[["self"]],["t"]]],[11,"clone_into","","",501,[[["self"],["t"]]]],[11,"from","std::alloc","",502,[[["t"]],["t"]]],[11,"try_from","","",502,[[["u"]],["result"]]],[11,"into","","",502,[[],["u"]]],[11,"try_into","","",502,[[],["result"]]],[11,"borrow","","",502,[[["self"]],["t"]]],[11,"borrow_mut","","",502,[[["self"]],["t"]]],[11,"type_id","","",502,[[["self"]],["typeid"]]],[11,"to_owned","","",502,[[["self"]],["t"]]],[11,"clone_into","","",502,[[["self"],["t"]]]],[11,"from","","",231,[[["t"]],["t"]]],[11,"try_from","","",231,[[["u"]],["result"]]],[11,"into","","",231,[[],["u"]]],[11,"try_into","","",231,[[],["result"]]],[11,"borrow","","",231,[[["self"]],["t"]]],[11,"borrow_mut","","",231,[[["self"]],["t"]]],[11,"type_id","","",231,[[["self"]],["typeid"]]],[11,"from","","",503,[[["t"]],["t"]]],[11,"try_from","","",503,[[["u"]],["result"]]],[11,"into","","",503,[[],["u"]]],[11,"try_into","","",503,[[],["result"]]],[11,"borrow","","",503,[[["self"]],["t"]]],[11,"borrow_mut","","",503,[[["self"]],["t"]]],[11,"type_id","","",503,[[["self"]],["typeid"]]],[11,"to_owned","","",503,[[["self"]],["t"]]],[11,"clone_into","","",503,[[["self"],["t"]]]],[11,"from","","",504,[[["t"]],["t"]]],[11,"try_from","","",504,[[["u"]],["result"]]],[11,"into","","",504,[[],["u"]]],[11,"try_into","","",504,[[],["result"]]],[11,"borrow","","",504,[[["self"]],["t"]]],[11,"borrow_mut","","",504,[[["self"]],["t"]]],[11,"type_id","","",504,[[["self"]],["typeid"]]],[11,"to_owned","","",504,[[["self"]],["t"]]],[11,"clone_into","","",504,[[["self"],["t"]]]],[11,"to_string","","",504,[[["self"]],["string"]]],[11,"from","","",505,[[["t"]],["t"]]],[11,"try_from","","",505,[[["u"]],["result"]]],[11,"into","","",505,[[],["u"]]],[11,"try_into","","",505,[[],["result"]]],[11,"borrow","","",505,[[["self"]],["t"]]],[11,"borrow_mut","","",505,[[["self"]],["t"]]],[11,"type_id","","",505,[[["self"]],["typeid"]]],[11,"to_owned","","",505,[[["self"]],["t"]]],[11,"clone_into","","",505,[[["self"],["t"]]]],[11,"to_string","","",505,[[["self"]],["string"]]],[11,"from","","",506,[[["t"]],["t"]]],[11,"try_from","","",506,[[["u"]],["result"]]],[11,"into","","",506,[[],["u"]]],[11,"try_into","","",506,[[],["result"]]],[11,"borrow","","",506,[[["self"]],["t"]]],[11,"borrow_mut","","",506,[[["self"]],["t"]]],[11,"type_id","","",506,[[["self"]],["typeid"]]],[11,"to_owned","","",506,[[["self"]],["t"]]],[11,"clone_into","","",506,[[["self"],["t"]]]],[11,"to_string","","",506,[[["self"]],["string"]]],[11,"from","","",507,[[["t"]],["t"]]],[11,"try_from","","",507,[[["u"]],["result"]]],[11,"into","","",507,[[],["u"]]],[11,"try_into","","",507,[[],["result"]]],[11,"borrow","","",507,[[["self"]],["t"]]],[11,"borrow_mut","","",507,[[["self"]],["t"]]],[11,"type_id","","",507,[[["self"]],["typeid"]]],[11,"to_owned","","",507,[[["self"]],["t"]]],[11,"clone_into","","",507,[[["self"],["t"]]]],[11,"call","std","",508,[[["a"],["self"]]]],[11,"index_mut","","",509,[[["self"],["i"]]]],[11,"index_mut","","",510,[[["self"],["i"]]]],[11,"not","std::num","",155,[[],[["wrapping",["u16"]],["u16"]]]],[11,"not","std","",511,[[],["i128"]]],[11,"not","std::num","",155,[[],[["wrapping",["i32"]],["i32"]]]],[11,"not","","",155,[[],[["wrapping",["u128"]],["u128"]]]],[11,"not","std","",512,[[],["bool"]]],[11,"not","","",513,[[],["u8"]]],[11,"not","std::num","",155,[[],[["wrapping",["i8"]],["i8"]]]],[11,"not","std","",514,[[],["i16"]]],[11,"not","","",514,[[]]],[11,"not","","",515,[[]]],[11,"not","","",516,[[],["u16"]]],[11,"not","","",517,[[],["u32"]]],[11,"not","std::num","",155,[[],[["wrapping",["i16"]],["i16"]]]],[11,"not","std","",511,[[]]],[11,"not","","",512,[[]]],[11,"not","","",518,[[]]],[11,"not","","",519,[[],["u64"]]],[11,"not","","",516,[[]]],[11,"not","","",519,[[]]],[11,"not","","",520,[[]]],[11,"not","","",517,[[]]],[11,"not","","",521,[[],["usize"]]],[11,"not","","",518,[[],["u128"]]],[11,"not","","",521,[[]]],[11,"not","std::num","",155,[[],[["u32"],["wrapping",["u32"]]]]],[11,"not","std","",522,[[]]],[11,"not","std::num","",155,[[],[["i128"],["wrapping",["i128"]]]]],[11,"not","","",155,[[],[["isize"],["wrapping",["isize"]]]]],[11,"not","std","",523,[[]]],[11,"not","std::num","",155,[[],[["i64"],["wrapping",["i64"]]]]],[11,"not","std","",515,[[],["isize"]]],[11,"not","","",522,[[],["i8"]]],[11,"not","std::num","",155,[[],[["wrapping",["u8"]],["u8"]]]],[11,"not","","",155,[[],[["wrapping",["usize"]],["usize"]]]],[11,"not","std","",513,[[]]],[11,"not","","",520,[[],["i64"]]],[11,"not","std::num","",155,[[],[["u64"],["wrapping",["u64"]]]]],[11,"not","std","",523,[[],["i32"]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::sync::atomic","",479,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",525,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",525,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::ptr","",362,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::pin","",361,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",508,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",508,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"shl_assign","","",518,[[["self"],["u128"]]]],[11,"shl_assign","","",521,[[["self"],["usize"]]]],[11,"shl_assign","","",518,[[["i64"],["self"]]]],[11,"shl_assign","","",523,[[["self"],["u32"]]]],[11,"shl_assign","","",513,[[["self"],["u8"]]]],[11,"shl_assign","","",514,[[["self"],["u8"]]]],[11,"shl_assign","","",521,[[["self"],["i16"]]]],[11,"shl_assign","","",515,[[["self"],["u32"]]]],[11,"shl_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shl_assign","std","",516,[[["self"],["i8"]]]],[11,"shl_assign","","",522,[[["self"],["i8"]]]],[11,"shl_assign","","",522,[[["self"],["i32"]]]],[11,"shl_assign","","",520,[[["self"],["i8"]]]],[11,"shl_assign","","",522,[[["self"],["u128"]]]],[11,"shl_assign","","",515,[[["self"],["i128"]]]],[11,"shl_assign","","",513,[[["self"],["u32"]]]],[11,"shl_assign","","",517,[[["self"],["i32"]]]],[11,"shl_assign","","",515,[[["isize"],["self"]]]],[11,"shl_assign","","",523,[[["isize"],["self"]]]],[11,"shl_assign","","",513,[[["self"],["u128"]]]],[11,"shl_assign","","",521,[[["self"],["usize"]]]],[11,"shl_assign","","",519,[[["self"],["i128"]]]],[11,"shl_assign","","",511,[[["self"],["usize"]]]],[11,"shl_assign","","",521,[[["self"],["u64"]]]],[11,"shl_assign","","",518,[[["self"],["i8"]]]],[11,"shl_assign","","",519,[[["u16"],["self"]]]],[11,"shl_assign","","",521,[[["self"],["u32"]]]],[11,"shl_assign","","",522,[[["self"],["u64"]]]],[11,"shl_assign","","",522,[[["self"],["i128"]]]],[11,"shl_assign","","",519,[[["i64"],["self"]]]],[11,"shl_assign","","",511,[[["self"],["u32"]]]],[11,"shl_assign","","",515,[[["u16"],["self"]]]],[11,"shl_assign","","",521,[[["i64"],["self"]]]],[11,"shl_assign","","",515,[[["self"],["i128"]]]],[11,"shl_assign","","",518,[[["self"],["i8"]]]],[11,"shl_assign","","",522,[[["self"],["u8"]]]],[11,"shl_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shl_assign","","",155,[[["self"],["usize"]]]],[11,"shl_assign","std","",511,[[["self"],["i8"]]]],[11,"shl_assign","","",514,[[["isize"],["self"]]]],[11,"shl_assign","","",511,[[["self"],["i16"]]]],[11,"shl_assign","","",514,[[["self"],["i16"]]]],[11,"shl_assign","","",516,[[["self"],["usize"]]]],[11,"shl_assign","","",523,[[["self"],["u8"]]]],[11,"shl_assign","","",514,[[["self"],["i32"]]]],[11,"shl_assign","","",511,[[["self"],["u8"]]]],[11,"shl_assign","","",518,[[["self"],["i128"]]]],[11,"shl_assign","","",522,[[["i64"],["self"]]]],[11,"shl_assign","","",518,[[["self"],["u32"]]]],[11,"shl_assign","","",518,[[["self"],["usize"]]]],[11,"shl_assign","","",516,[[["self"],["i16"]]]],[11,"shl_assign","","",520,[[["isize"],["self"]]]],[11,"shl_assign","","",523,[[["u16"],["self"]]]],[11,"shl_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shl_assign","","",155,[[["self"],["usize"]]]],[11,"shl_assign","std","",519,[[["self"],["u8"]]]],[11,"shl_assign","","",519,[[["u16"],["self"]]]],[11,"shl_assign","","",522,[[["u16"],["self"]]]],[11,"shl_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shl_assign","std","",517,[[["i64"],["self"]]]],[11,"shl_assign","","",514,[[["self"],["i8"]]]],[11,"shl_assign","","",515,[[["self"],["i32"]]]],[11,"shl_assign","","",522,[[["self"],["i16"]]]],[11,"shl_assign","","",519,[[["self"],["u128"]]]],[11,"shl_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shl_assign","std","",517,[[["self"],["u64"]]]],[11,"shl_assign","","",515,[[["i64"],["self"]]]],[11,"shl_assign","","",511,[[["u16"],["self"]]]],[11,"shl_assign","","",518,[[["self"],["i32"]]]],[11,"shl_assign","","",519,[[["self"],["u32"]]]],[11,"shl_assign","","",517,[[["i64"],["self"]]]],[11,"shl_assign","","",520,[[["self"],["u128"]]]],[11,"shl_assign","","",517,[[["self"],["u8"]]]],[11,"shl_assign","","",511,[[["self"],["i128"]]]],[11,"shl_assign","","",516,[[["self"],["i128"]]]],[11,"shl_assign","","",517,[[["self"],["u128"]]]],[11,"shl_assign","","",511,[[["self"],["u32"]]]],[11,"shl_assign","","",521,[[["isize"],["self"]]]],[11,"shl_assign","","",514,[[["self"],["u64"]]]],[11,"shl_assign","","",520,[[["self"],["i8"]]]],[11,"shl_assign","","",520,[[["u16"],["self"]]]],[11,"shl_assign","","",515,[[["self"],["u64"]]]],[11,"shl_assign","","",522,[[["i64"],["self"]]]],[11,"shl_assign","","",511,[[["self"],["i32"]]]],[11,"shl_assign","","",521,[[["self"],["u8"]]]],[11,"shl_assign","","",523,[[["i64"],["self"]]]],[11,"shl_assign","","",513,[[["self"],["i128"]]]],[11,"shl_assign","","",517,[[["self"],["i128"]]]],[11,"shl_assign","","",522,[[["self"],["u128"]]]],[11,"shl_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shl_assign","std","",521,[[["self"],["i16"]]]],[11,"shl_assign","","",511,[[["self"],["u128"]]]],[11,"shl_assign","","",511,[[["self"],["u128"]]]],[11,"shl_assign","","",511,[[["isize"],["self"]]]],[11,"shl_assign","","",521,[[["self"],["i32"]]]],[11,"shl_assign","","",516,[[["self"],["usize"]]]],[11,"shl_assign","","",523,[[["self"],["u64"]]]],[11,"shl_assign","","",514,[[["self"],["u128"]]]],[11,"shl_assign","","",511,[[["self"],["i8"]]]],[11,"shl_assign","","",518,[[["self"],["u8"]]]],[11,"shl_assign","","",523,[[["self"],["i128"]]]],[11,"shl_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shl_assign","std","",516,[[["i64"],["self"]]]],[11,"shl_assign","","",516,[[["self"],["u64"]]]],[11,"shl_assign","","",513,[[["self"],["u64"]]]],[11,"shl_assign","","",516,[[["isize"],["self"]]]],[11,"shl_assign","","",517,[[["self"],["u32"]]]],[11,"shl_assign","","",513,[[["self"],["i128"]]]],[11,"shl_assign","","",515,[[["self"],["i8"]]]],[11,"shl_assign","","",520,[[["self"],["i128"]]]],[11,"shl_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shl_assign","std","",519,[[["self"],["u64"]]]],[11,"shl_assign","","",513,[[["i64"],["self"]]]],[11,"shl_assign","","",517,[[["self"],["u128"]]]],[11,"shl_assign","","",522,[[["self"],["u32"]]]],[11,"shl_assign","","",520,[[["self"],["i16"]]]],[11,"shl_assign","","",519,[[["self"],["usize"]]]],[11,"shl_assign","","",511,[[["i64"],["self"]]]],[11,"shl_assign","","",511,[[["self"],["u8"]]]],[11,"shl_assign","","",511,[[["self"],["usize"]]]],[11,"shl_assign","","",519,[[["self"],["u128"]]]],[11,"shl_assign","","",522,[[["self"],["u64"]]]],[11,"shl_assign","","",514,[[["self"],["i128"]]]],[11,"shl_assign","","",521,[[["self"],["u8"]]]],[11,"shl_assign","","",513,[[["self"],["u32"]]]],[11,"shl_assign","","",519,[[["self"],["usize"]]]],[11,"shl_assign","","",523,[[["self"],["u128"]]]],[11,"shl_assign","","",518,[[["u16"],["self"]]]],[11,"shl_assign","","",520,[[["self"],["u32"]]]],[11,"shl_assign","","",520,[[["self"],["i32"]]]],[11,"shl_assign","","",513,[[["self"],["u128"]]]],[11,"shl_assign","","",511,[[["self"],["u64"]]]],[11,"shl_assign","","",518,[[["i64"],["self"]]]],[11,"shl_assign","","",513,[[["self"],["i32"]]]],[11,"shl_assign","","",515,[[["self"],["u64"]]]],[11,"shl_assign","","",519,[[["self"],["i8"]]]],[11,"shl_assign","","",522,[[["self"],["i8"]]]],[11,"shl_assign","","",511,[[["self"],["i128"]]]],[11,"shl_assign","","",513,[[["self"],["i16"]]]],[11,"shl_assign","","",515,[[["self"],["usize"]]]],[11,"shl_assign","","",514,[[["isize"],["self"]]]],[11,"shl_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shl_assign","","",155,[[["self"],["usize"]]]],[11,"shl_assign","std","",522,[[["self"],["i16"]]]],[11,"shl_assign","","",523,[[["isize"],["self"]]]],[11,"shl_assign","","",522,[[["self"],["i32"]]]],[11,"shl_assign","","",520,[[["self"],["u64"]]]],[11,"shl_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shl_assign","std","",518,[[["self"],["u8"]]]],[11,"shl_assign","","",518,[[["self"],["i128"]]]],[11,"shl_assign","","",518,[[["self"],["usize"]]]],[11,"shl_assign","","",518,[[["self"],["u32"]]]],[11,"shl_assign","","",515,[[["self"],["i32"]]]],[11,"shl_assign","","",523,[[["self"],["u32"]]]],[11,"shl_assign","","",518,[[["isize"],["self"]]]],[11,"shl_assign","","",522,[[["u16"],["self"]]]],[11,"shl_assign","","",519,[[["isize"],["self"]]]],[11,"shl_assign","","",522,[[["self"],["usize"]]]],[11,"shl_assign","","",513,[[["isize"],["self"]]]],[11,"shl_assign","","",523,[[["self"],["u8"]]]],[11,"shl_assign","","",518,[[["self"],["i16"]]]],[11,"shl_assign","","",519,[[["self"],["i8"]]]],[11,"shl_assign","","",522,[[["self"],["u8"]]]],[11,"shl_assign","","",513,[[["self"],["i16"]]]],[11,"shl_assign","","",521,[[["self"],["i8"]]]],[11,"shl_assign","","",513,[[["u16"],["self"]]]],[11,"shl_assign","","",517,[[["self"],["i128"]]]],[11,"shl_assign","","",519,[[["self"],["i16"]]]],[11,"shl_assign","","",520,[[["self"],["u8"]]]],[11,"shl_assign","","",516,[[["self"],["i8"]]]],[11,"shl_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shl_assign","std","",523,[[["self"],["i128"]]]],[11,"shl_assign","","",523,[[["self"],["i32"]]]],[11,"shl_assign","","",515,[[["self"],["i8"]]]],[11,"shl_assign","","",514,[[["self"],["i16"]]]],[11,"shl_assign","","",515,[[["self"],["usize"]]]],[11,"shl_assign","","",521,[[["self"],["u64"]]]],[11,"shl_assign","","",514,[[["self"],["u128"]]]],[11,"shl_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shl_assign","std","",522,[[["isize"],["self"]]]],[11,"shl_assign","","",517,[[["self"],["i16"]]]],[11,"shl_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shl_assign","std","",515,[[["self"],["u32"]]]],[11,"shl_assign","","",515,[[["self"],["i16"]]]],[11,"shl_assign","","",516,[[["self"],["u128"]]]],[11,"shl_assign","","",517,[[["u16"],["self"]]]],[11,"shl_assign","","",515,[[["self"],["u8"]]]],[11,"shl_assign","","",523,[[["self"],["i16"]]]],[11,"shl_assign","","",514,[[["self"],["usize"]]]],[11,"shl_assign","","",517,[[["u16"],["self"]]]],[11,"shl_assign","","",521,[[["self"],["i128"]]]],[11,"shl_assign","","",513,[[["self"],["i8"]]]],[11,"shl_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shl_assign","std","",514,[[["self"],["i8"]]]],[11,"shl_assign","","",517,[[["isize"],["self"]]]],[11,"shl_assign","","",516,[[["i64"],["self"]]]],[11,"shl_assign","","",520,[[["self"],["i16"]]]],[11,"shl_assign","","",517,[[["self"],["u64"]]]],[11,"shl_assign","","",516,[[["self"],["i16"]]]],[11,"shl_assign","","",520,[[["self"],["usize"]]]],[11,"shl_assign","","",511,[[["self"],["u64"]]]],[11,"shl_assign","","",518,[[["self"],["i16"]]]],[11,"shl_assign","","",517,[[["self"],["usize"]]]],[11,"shl_assign","","",520,[[["self"],["u64"]]]],[11,"shl_assign","","",517,[[["self"],["u32"]]]],[11,"shl_assign","","",516,[[["u16"],["self"]]]],[11,"shl_assign","","",517,[[["self"],["i16"]]]],[11,"shl_assign","","",521,[[["self"],["i8"]]]],[11,"shl_assign","","",513,[[["self"],["u8"]]]],[11,"shl_assign","","",513,[[["isize"],["self"]]]],[11,"shl_assign","","",522,[[["self"],["u32"]]]],[11,"shl_assign","","",516,[[["u16"],["self"]]]],[11,"shl_assign","","",514,[[["u16"],["self"]]]],[11,"shl_assign","","",514,[[["i64"],["self"]]]],[11,"shl_assign","","",511,[[["i64"],["self"]]]],[11,"shl_assign","","",522,[[["isize"],["self"]]]],[11,"shl_assign","","",522,[[["self"],["usize"]]]],[11,"shl_assign","","",516,[[["self"],["i32"]]]],[11,"shl_assign","","",519,[[["self"],["i128"]]]],[11,"shl_assign","","",515,[[["self"],["u128"]]]],[11,"shl_assign","","",520,[[["self"],["usize"]]]],[11,"shl_assign","","",520,[[["self"],["i128"]]]],[11,"shl_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shl_assign","std","",511,[[["self"],["i16"]]]],[11,"shl_assign","","",523,[[["self"],["i8"]]]],[11,"shl_assign","","",519,[[["self"],["u8"]]]],[11,"shl_assign","","",519,[[["self"],["i16"]]]],[11,"shl_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shl_assign","std","",521,[[["i64"],["self"]]]],[11,"shl_assign","","",514,[[["self"],["u32"]]]],[11,"shl_assign","","",516,[[["self"],["i32"]]]],[11,"shl_assign","","",518,[[["u16"],["self"]]]],[11,"shl_assign","","",518,[[["self"],["i32"]]]],[11,"shl_assign","","",523,[[["self"],["usize"]]]],[11,"shl_assign","","",517,[[["self"],["usize"]]]],[11,"shl_assign","","",521,[[["self"],["i128"]]]],[11,"shl_assign","","",520,[[["u16"],["self"]]]],[11,"shl_assign","","",515,[[["self"],["u8"]]]],[11,"shl_assign","","",514,[[["self"],["u64"]]]],[11,"shl_assign","","",516,[[["self"],["u32"]]]],[11,"shl_assign","","",514,[[["self"],["u32"]]]],[11,"shl_assign","","",514,[[["u16"],["self"]]]],[11,"shl_assign","","",518,[[["self"],["u64"]]]],[11,"shl_assign","","",516,[[["self"],["u64"]]]],[11,"shl_assign","","",513,[[["self"],["usize"]]]],[11,"shl_assign","","",523,[[["self"],["usize"]]]],[11,"shl_assign","","",513,[[["self"],["i8"]]]],[11,"shl_assign","","",516,[[["self"],["u128"]]]],[11,"shl_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shl_assign","std","",519,[[["self"],["i32"]]]],[11,"shl_assign","","",513,[[["self"],["i32"]]]],[11,"shl_assign","","",513,[[["self"],["usize"]]]],[11,"shl_assign","","",520,[[["i64"],["self"]]]],[11,"shl_assign","","",521,[[["self"],["u128"]]]],[11,"shl_assign","","",523,[[["self"],["i16"]]]],[11,"shl_assign","","",517,[[["self"],["i32"]]]],[11,"shl_assign","","",523,[[["i64"],["self"]]]],[11,"shl_assign","","",520,[[["self"],["u128"]]]],[11,"shl_assign","","",523,[[["self"],["u128"]]]],[11,"shl_assign","","",516,[[["self"],["u8"]]]],[11,"shl_assign","","",518,[[["self"],["u64"]]]],[11,"shl_assign","","",516,[[["self"],["i128"]]]],[11,"shl_assign","","",513,[[["u16"],["self"]]]],[11,"shl_assign","","",514,[[["self"],["i32"]]]],[11,"shl_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shl_assign","std","",517,[[["self"],["u8"]]]],[11,"shl_assign","","",523,[[["self"],["i8"]]]],[11,"shl_assign","","",520,[[["isize"],["self"]]]],[11,"shl_assign","","",511,[[["isize"],["self"]]]],[11,"shl_assign","","",521,[[["isize"],["self"]]]],[11,"shl_assign","","",511,[[["self"],["i32"]]]],[11,"shl_assign","","",514,[[["self"],["usize"]]]],[11,"shl_assign","","",514,[[["i64"],["self"]]]],[11,"shl_assign","","",517,[[["self"],["i8"]]]],[11,"shl_assign","","",514,[[["self"],["i128"]]]],[11,"shl_assign","","",520,[[["self"],["u8"]]]],[11,"shl_assign","","",514,[[["self"],["u8"]]]],[11,"shl_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shl_assign","std","",515,[[["self"],["u128"]]]],[11,"shl_assign","","",521,[[["self"],["u128"]]]],[11,"shl_assign","","",519,[[["self"],["i32"]]]],[11,"shl_assign","","",518,[[["self"],["u128"]]]],[11,"shl_assign","","",519,[[["isize"],["self"]]]],[11,"shl_assign","","",513,[[["i64"],["self"]]]],[11,"shl_assign","","",516,[[["self"],["u8"]]]],[11,"shl_assign","","",515,[[["isize"],["self"]]]],[11,"shl_assign","","",513,[[["self"],["u64"]]]],[11,"shl_assign","","",523,[[["self"],["i32"]]]],[11,"shl_assign","","",520,[[["self"],["i32"]]]],[11,"shl_assign","","",511,[[["u16"],["self"]]]],[11,"shl_assign","","",521,[[["self"],["i32"]]]],[11,"shl_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shl_assign","std","",521,[[["u16"],["self"]]]],[11,"shl_assign","","",516,[[["self"],["u32"]]]],[11,"shl_assign","","",520,[[["self"],["u32"]]]],[11,"shl_assign","","",521,[[["u16"],["self"]]]],[11,"shl_assign","","",523,[[["u16"],["self"]]]],[11,"shl_assign","","",520,[[["i64"],["self"]]]],[11,"shl_assign","","",515,[[["u16"],["self"]]]],[11,"shl_assign","","",515,[[["i64"],["self"]]]],[11,"shl_assign","","",522,[[["self"],["i128"]]]],[11,"shl_assign","","",519,[[["self"],["u32"]]]],[11,"shl_assign","","",523,[[["self"],["u64"]]]],[11,"shl_assign","","",521,[[["self"],["u32"]]]],[11,"shl_assign","","",517,[[["isize"],["self"]]]],[11,"shl_assign","","",517,[[["self"],["i8"]]]],[11,"shl_assign","","",519,[[["i64"],["self"]]]],[11,"shl_assign","","",519,[[["self"],["u64"]]]],[11,"shl_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shl_assign","std","",518,[[["isize"],["self"]]]],[11,"shl_assign","","",515,[[["self"],["i16"]]]],[11,"shl_assign","","",516,[[["isize"],["self"]]]],[11,"into_searcher","","",510,[[["str"]],["charslicesearcher"]]],[11,"is_contained_in","","",510,[[["str"]],["bool"]]],[11,"is_prefix_of","","",510,[[["str"]],["bool"]]],[11,"is_suffix_of","","",510,[[["str"]],["bool"]]],[11,"into_searcher","","",526,[[["str"]]]],[11,"is_contained_in","","",526,[[["str"]],["bool"]]],[11,"is_prefix_of","","",526,[[["str"]],["bool"]]],[11,"is_suffix_of","","",526,[[["str"]],["bool"]]],[11,"into_searcher","","",509,[[["str"]],["strsearcher"]]],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the…",509,[[["str"]],["bool"]]],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the…",509,[[["str"]],["bool"]]],[11,"bitand_assign","","",511,[[["self"],["i128"]]]],[11,"bitand_assign","std::num","",155,[[["wrapping",["i8"]],["self"],["i8"]]]],[11,"bitand_assign","","",155,[[["self"],["wrapping",["u8"]],["u8"]]]],[11,"bitand_assign","","",155,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"bitand_assign","","",155,[[["self"],["u64"],["wrapping",["u64"]]]]],[11,"bitand_assign","","",155,[[["self"],["wrapping"]]]],[11,"bitand_assign","std","",516,[[["u16"],["self"]]]],[11,"bitand_assign","","",523,[[["self"],["i32"]]]],[11,"bitand_assign","","",514,[[["self"],["i16"]]]],[11,"bitand_assign","","",521,[[["self"],["usize"]]]],[11,"bitand_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"bitand_assign","std","",519,[[["self"],["u64"]]]],[11,"bitand_assign","std::num","",155,[[["wrapping"],["self"]]]],[11,"bitand_assign","","",155,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"bitand_assign","std","",518,[[["self"],["u128"]]]],[11,"bitand_assign","","",518,[[["self"],["u128"]]]],[11,"bitand_assign","","",520,[[["i64"],["self"]]]],[11,"bitand_assign","std::num","",155,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"bitand_assign","std","",512,[[["self"],["bool"]]]],[11,"bitand_assign","","",517,[[["self"],["u32"]]]],[11,"bitand_assign","std::num","",155,[[["wrapping",["usize"]],["self"],["usize"]]]],[11,"bitand_assign","std","",515,[[["isize"],["self"]]]],[11,"bitand_assign","","",516,[[["u16"],["self"]]]],[11,"bitand_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",155,[[["wrapping",["u128"]],["self"],["u128"]]]],[11,"bitand_assign","","",155,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",155,[[["self"],["wrapping"]]]],[11,"bitand_assign","std","",521,[[["self"],["usize"]]]],[11,"bitand_assign","","",519,[[["self"],["u64"]]]],[11,"bitand_assign","std::num","",155,[[["self"],["wrapping",["i32"]],["i32"]]]],[11,"bitand_assign","","",155,[[["self"],["u32"],["wrapping",["u32"]]]]],[11,"bitand_assign","","",155,[[["wrapping",["u16"]],["self"],["u16"]]]],[11,"bitand_assign","std","",523,[[["self"],["i32"]]]],[11,"bitand_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"bitand_assign","std","",513,[[["self"],["u8"]]]],[11,"bitand_assign","","",522,[[["self"],["i8"]]]],[11,"bitand_assign","","",512,[[["self"],["bool"]]]],[11,"bitand_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",155,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",155,[[["self"],["i128"],["wrapping",["i128"]]]]],[11,"bitand_assign","","",155,[[["wrapping"],["self"]]]],[11,"bitand_assign","std","",515,[[["isize"],["self"]]]],[11,"bitand_assign","","",522,[[["self"],["i8"]]]],[11,"bitand_assign","std::num","",155,[[["wrapping"],["self"]]]],[11,"bitand_assign","std","",514,[[["self"],["i16"]]]],[11,"bitand_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"bitand_assign","std","",513,[[["self"],["u8"]]]],[11,"bitand_assign","","",517,[[["self"],["u32"]]]],[11,"bitand_assign","","",511,[[["self"],["i128"]]]],[11,"bitand_assign","","",520,[[["i64"],["self"]]]],[11,"borrow_mut","","",527,[[["self"]]]],[11,"borrow_mut","","",508,[[["self"]],["t"]]],[11,"shl","","",518,[[["i16"]]]],[11,"shl","","",519,[[["isize"]],["u64"]]],[11,"shl","","",517,[[["u8"]]]],[11,"shl","","",520,[[["i16"]],["i64"]]],[11,"shl","","",519,[[["usize"]]]],[11,"shl","","",517,[[["i128"]]]],[11,"shl","","",522,[[["u8"]]]],[11,"shl","","",516,[[["usize"]],["u16"]]],[11,"shl","","",515,[[["u32"]]]],[11,"shl","","",520,[[["i64"]]]],[11,"shl","","",511,[[["i16"]]]],[11,"shl","","",520,[[["u32"]],["i64"]]],[11,"shl","","",511,[[["i128"]]]],[11,"shl","","",516,[[["i128"]]]],[11,"shl","","",520,[[["usize"]],["i64"]]],[11,"shl","","",518,[[["u8"]]]],[11,"shl","","",511,[[["u16"]]]],[11,"shl","","",513,[[["u16"]]]],[11,"shl","","",521,[[["u16"]]]],[11,"shl","","",519,[[["usize"]]]],[11,"shl","","",522,[[["i16"]]]],[11,"shl","","",514,[[["i32"]]]],[11,"shl","","",516,[[["u128"]]]],[11,"shl","","",521,[[["i32"]]]],[11,"shl","","",517,[[["u64"]]]],[11,"shl","","",521,[[["i128"]]]],[11,"shl","","",513,[[["u16"]]]],[11,"shl","","",516,[[["i8"]]]],[11,"shl","","",517,[[["i8"]]]],[11,"shl","","",511,[[["u128"]]]],[11,"shl","","",520,[[["i32"]]]],[11,"shl","","",519,[[["usize"]],["u64"]]],[11,"shl","","",514,[[["i64"]],["i16"]]],[11,"shl","","",518,[[["i32"]]]],[11,"shl","","",523,[[["u64"]],["i32"]]],[11,"shl","","",523,[[["u128"]],["i32"]]],[11,"shl","","",523,[[["u16"]]]],[11,"shl","","",519,[[["u128"]]]],[11,"shl","","",515,[[["u16"]]]],[11,"shl","","",518,[[["u16"]],["u128"]]],[11,"shl","std::num","",155,[[["usize"]]]],[11,"shl","std","",511,[[["u32"]]]],[11,"shl","","",519,[[["isize"]]]],[11,"shl","","",513,[[["u64"]]]],[11,"shl","","",521,[[["usize"]]]],[11,"shl","","",520,[[["i32"]],["i64"]]],[11,"shl","","",516,[[["u64"]]]],[11,"shl","","",516,[[["u32"]],["u16"]]],[11,"shl","","",515,[[["u16"]]]],[11,"shl","","",523,[[["u128"]]]],[11,"shl","","",523,[[["usize"]]]],[11,"shl","","",521,[[["u128"]],["usize"]]],[11,"shl","","",515,[[["i8"]]]],[11,"shl","","",513,[[["usize"]]]],[11,"shl","","",518,[[["isize"]]]],[11,"shl","","",515,[[["usize"]]]],[11,"shl","","",511,[[["u128"]]]],[11,"shl","","",518,[[["u32"]]]],[11,"shl","","",514,[[["u8"]],["i16"]]],[11,"shl","","",517,[[["u16"]]]],[11,"shl","","",521,[[["i32"]]]],[11,"shl","","",513,[[["u8"]]]],[11,"shl","","",511,[[["u64"]],["i128"]]],[11,"shl","","",521,[[["u8"]]]],[11,"shl","","",520,[[["i8"]],["i64"]]],[11,"shl","","",515,[[["u32"]]]],[11,"shl","","",515,[[["usize"]]]],[11,"shl","","",520,[[["i16"]]]],[11,"shl","","",517,[[["isize"]],["u32"]]],[11,"shl","","",522,[[["i32"]]]],[11,"shl","","",511,[[["i8"]]]],[11,"shl","","",514,[[["u128"]]]],[11,"shl","","",518,[[["u32"]]]],[11,"shl","","",513,[[["usize"]]]],[11,"shl","","",518,[[["i32"]]]],[11,"shl","","",514,[[["u64"]]]],[11,"shl","std::num","",155,[[["usize"]],[["wrapping",["i8"]],["i8"]]]],[11,"shl","std","",513,[[["u16"]],["u8"]]],[11,"shl","","",517,[[["i8"]]]],[11,"shl","","",511,[[["u8"]]]],[11,"shl","","",520,[[["u128"]]]],[11,"shl","","",515,[[["i8"]],["isize"]]],[11,"shl","","",514,[[["i16"]],["i16"]]],[11,"shl","","",514,[[["u128"]]]],[11,"shl","","",515,[[["i32"]]]],[11,"shl","","",518,[[["i16"]]]],[11,"shl","","",523,[[["i16"]]]],[11,"shl","","",520,[[["i16"]]]],[11,"shl","","",516,[[["u128"]],["u16"]]],[11,"shl","","",519,[[["u8"]]]],[11,"shl","","",523,[[["u8"]]]],[11,"shl","","",515,[[["u16"]],["isize"]]],[11,"shl","","",513,[[["u32"]]]],[11,"shl","","",515,[[["u8"]]]],[11,"shl","","",520,[[["i8"]]]],[11,"shl","std::num","",155,[[["usize"]],[["wrapping",["i32"]],["i32"]]]],[11,"shl","std","",520,[[["u32"]]]],[11,"shl","","",519,[[["u64"]]]],[11,"shl","","",514,[[["i16"]]]],[11,"shl","","",520,[[["u32"]]]],[11,"shl","","",522,[[["u64"]]]],[11,"shl","","",523,[[["i16"]]]],[11,"shl","","",522,[[["i8"]]]],[11,"shl","","",520,[[["u128"]],["i64"]]],[11,"shl","","",520,[[["isize"]],["i64"]]],[11,"shl","","",523,[[["u32"]],["i32"]]],[11,"shl","","",511,[[["i32"]],["i128"]]],[11,"shl","","",511,[[["u16"]]]],[11,"shl","","",521,[[["u128"]]]],[11,"shl","","",521,[[["u64"]],["usize"]]],[11,"shl","","",519,[[["i128"]],["u64"]]],[11,"shl","","",522,[[["isize"]],["i8"]]],[11,"shl","","",515,[[["usize"]]]],[11,"shl","","",517,[[["usize"]]]],[11,"shl","","",523,[[["u8"]],["i32"]]],[11,"shl","","",520,[[["u128"]]]],[11,"shl","","",521,[[["i32"]]]],[11,"shl","","",520,[[["i32"]]]],[11,"shl","","",513,[[["u32"]]]],[11,"shl","","",520,[[["i8"]]]],[11,"shl","","",515,[[["u128"]]]],[11,"shl","","",511,[[["u8"]]]],[11,"shl","","",516,[[["u128"]]]],[11,"shl","","",513,[[["u16"]]]],[11,"shl","","",521,[[["u8"]]]],[11,"shl","","",518,[[["u32"]]]],[11,"shl","","",515,[[["i32"]],["isize"]]],[11,"shl","","",516,[[["i32"]]]],[11,"shl","","",515,[[["u64"]]]],[11,"shl","","",517,[[["isize"]]]],[11,"shl","","",521,[[["u16"]]]],[11,"shl","","",513,[[["u8"]]]],[11,"shl","","",511,[[["usize"]],["i128"]]],[11,"shl","","",522,[[["u64"]],["i8"]]],[11,"shl","std::num","",155,[[["usize"]]]],[11,"shl","std","",517,[[["u64"]],["u32"]]],[11,"shl","","",522,[[["u8"]]]],[11,"shl","","",511,[[["i32"]]]],[11,"shl","","",511,[[["i64"]]]],[11,"shl","","",518,[[["i16"]],["u128"]]],[11,"shl","","",515,[[["u32"]]]],[11,"shl","","",519,[[["u32"]],["u64"]]],[11,"shl","","",513,[[["isize"]]]],[11,"shl","","",523,[[["i8"]]]],[11,"shl","","",514,[[["usize"]]]],[11,"shl","","",517,[[["i32"]]]],[11,"shl","","",513,[[["i8"]],["u8"]]],[11,"shl","","",522,[[["u64"]]]],[11,"shl","","",521,[[["u128"]]]],[11,"shl","","",515,[[["i8"]]]],[11,"shl","","",516,[[["i128"]]]],[11,"shl","","",522,[[["u16"]]]],[11,"shl","","",518,[[["i64"]]]],[11,"shl","","",518,[[["u16"]]]],[11,"shl","","",520,[[["u8"]]]],[11,"shl","","",522,[[["i16"]]]],[11,"shl","","",522,[[["isize"]]]],[11,"shl","","",519,[[["u32"]]]],[11,"shl","","",514,[[["u16"]]]],[11,"shl","","",517,[[["u16"]]]],[11,"shl","","",522,[[["i64"]]]],[11,"shl","","",517,[[["i32"]],["u32"]]],[11,"shl","","",511,[[["i128"]]]],[11,"shl","","",513,[[["u128"]]]],[11,"shl","","",514,[[["i128"]]]],[11,"shl","","",515,[[["i16"]]]],[11,"shl","","",517,[[["i16"]],["u32"]]],[11,"shl","","",521,[[["i8"]],["usize"]]],[11,"shl","","",517,[[["i128"]]]],[11,"shl","","",522,[[["i8"]],["i8"]]],[11,"shl","","",522,[[["i16"]],["i8"]]],[11,"shl","","",516,[[["i16"]]]],[11,"shl","","",523,[[["u128"]]]],[11,"shl","","",515,[[["isize"]]]],[11,"shl","","",517,[[["isize"]]]],[11,"shl","","",517,[[["i32"]]]],[11,"shl","","",514,[[["i8"]],["i16"]]],[11,"shl","","",518,[[["u128"]]]],[11,"shl","","",522,[[["i64"]]]],[11,"shl","","",520,[[["u8"]],["i64"]]],[11,"shl","","",520,[[["u64"]]]],[11,"shl","","",515,[[["i16"]]]],[11,"shl","","",518,[[["i128"]]]],[11,"shl","","",515,[[["isize"]]]],[11,"shl","","",517,[[["u128"]]]],[11,"shl","","",517,[[["usize"]]]],[11,"shl","","",520,[[["i64"]],["i64"]]],[11,"shl","","",517,[[["i64"]],["u32"]]],[11,"shl","","",513,[[["u32"]],["u8"]]],[11,"shl","","",516,[[["u32"]]]],[11,"shl","","",514,[[["u16"]],["i16"]]],[11,"shl","","",520,[[["i128"]],["i64"]]],[11,"shl","","",519,[[["u8"]],["u64"]]],[11,"shl","","",523,[[["i32"]]]],[11,"shl","","",521,[[["i32"]],["usize"]]],[11,"shl","","",519,[[["u128"]]]],[11,"shl","","",517,[[["u64"]]]],[11,"shl","","",522,[[["u32"]],["i8"]]],[11,"shl","","",520,[[["usize"]]]],[11,"shl","","",515,[[["u64"]],["isize"]]],[11,"shl","","",523,[[["i32"]]]],[11,"shl","","",523,[[["usize"]],["i32"]]],[11,"shl","","",517,[[["isize"]]]],[11,"shl","","",517,[[["u128"]]]],[11,"shl","","",520,[[["u16"]],["i64"]]],[11,"shl","","",518,[[["u64"]]]],[11,"shl","std::num","",155,[[["usize"]],[["u32"],["wrapping",["u32"]]]]],[11,"shl","std","",519,[[["i32"]]]],[11,"shl","","",518,[[["u64"]]]],[11,"shl","","",515,[[["isize"]],["isize"]]],[11,"shl","","",514,[[["i128"]],["i16"]]],[11,"shl","","",519,[[["i8"]],["u64"]]],[11,"shl","","",516,[[["u128"]]]],[11,"shl","","",517,[[["i16"]]]],[11,"shl","","",522,[[["isize"]]]],[11,"shl","","",514,[[["i16"]]]],[11,"shl","","",518,[[["isize"]],["u128"]]],[11,"shl","","",519,[[["u16"]]]],[11,"shl","std::num","",155,[[["usize"]],[["wrapping",["u128"]],["u128"]]]],[11,"shl","std","",516,[[["i16"]]]],[11,"shl","","",515,[[["i128"]],["isize"]]],[11,"shl","","",520,[[["u32"]]]],[11,"shl","","",513,[[["i32"]]]],[11,"shl","","",520,[[["i8"]]]],[11,"shl","","",515,[[["i16"]],["isize"]]],[11,"shl","","",521,[[["u128"]]]],[11,"shl","","",519,[[["i16"]]]],[11,"shl","","",519,[[["i8"]]]],[11,"shl","","",516,[[["i8"]]]],[11,"shl","","",511,[[["u32"]]]],[11,"shl","","",520,[[["i16"]]]],[11,"shl","","",518,[[["usize"]],["u128"]]],[11,"shl","","",514,[[["u32"]],["i16"]]],[11,"shl","","",514,[[["u8"]]]],[11,"shl","","",516,[[["i32"]]]],[11,"shl","","",522,[[["u128"]]]],[11,"shl","","",522,[[["u16"]]]],[11,"shl","","",513,[[["isize"]],["u8"]]],[11,"shl","std::num","",155,[[["usize"]],[["isize"],["wrapping",["isize"]]]]],[11,"shl","","",155,[[["usize"]]]],[11,"shl","std","",523,[[["i16"]],["i32"]]],[11,"shl","","",514,[[["i64"]]]],[11,"shl","","",516,[[["u8"]]]],[11,"shl","","",521,[[["u32"]]]],[11,"shl","","",517,[[["u64"]]]],[11,"shl","","",517,[[["u16"]],["u32"]]],[11,"shl","","",521,[[["u64"]]]],[11,"shl","","",513,[[["i32"]]]],[11,"shl","","",513,[[["usize"]]]],[11,"shl","","",518,[[["u8"]],["u128"]]],[11,"shl","","",515,[[["u128"]],["isize"]]],[11,"shl","","",520,[[["u8"]]]],[11,"shl","","",514,[[["isize"]]]],[11,"shl","","",513,[[["isize"]]]],[11,"shl","","",521,[[["u64"]]]],[11,"shl","","",521,[[["usize"]]]],[11,"shl","","",518,[[["u8"]]]],[11,"shl","","",515,[[["u8"]],["isize"]]],[11,"shl","","",515,[[["i64"]]]],[11,"shl","","",523,[[["u16"]]]],[11,"shl","","",516,[[["i8"]]]],[11,"shl","","",518,[[["u8"]]]],[11,"shl","","",522,[[["u32"]]]],[11,"shl","","",523,[[["u8"]]]],[11,"shl","std::num","",155,[[["usize"]],[["wrapping",["u16"]],["u16"]]]],[11,"shl","std","",523,[[["u64"]]]],[11,"shl","","",522,[[["i64"]],["i8"]]],[11,"shl","","",513,[[["u8"]],["u8"]]],[11,"shl","std::num","",155,[[["usize"]],[["i64"],["wrapping",["i64"]]]]],[11,"shl","std","",522,[[["u16"]]]],[11,"shl","","",515,[[["i128"]]]],[11,"shl","","",518,[[["u64"]],["u128"]]],[11,"shl","","",515,[[["i64"]],["isize"]]],[11,"shl","","",521,[[["u16"]],["usize"]]],[11,"shl","","",515,[[["i64"]]]],[11,"shl","","",516,[[["u64"]]]],[11,"shl","std::num","",155,[[["usize"]]]],[11,"shl","std","",516,[[["isize"]]]],[11,"shl","","",522,[[["i8"]]]],[11,"shl","std::num","",155,[[["usize"]],[["i128"],["wrapping",["i128"]]]]],[11,"shl","std","",518,[[["u32"]],["u128"]]],[11,"shl","","",511,[[["usize"]]]],[11,"shl","","",522,[[["i32"]],["i8"]]],[11,"shl","","",513,[[["i64"]]]],[11,"shl","","",520,[[["usize"]]]],[11,"shl","","",511,[[["u64"]]]],[11,"shl","","",511,[[["i64"]]]],[11,"shl","","",516,[[["isize"]]]],[11,"shl","","",511,[[["u16"]],["i128"]]],[11,"shl","","",518,[[["u16"]]]],[11,"shl","","",523,[[["isize"]]]],[11,"shl","","",515,[[["i128"]]]],[11,"shl","","",523,[[["i64"]]]],[11,"shl","","",519,[[["isize"]]]],[11,"shl","","",513,[[["i64"]],["u8"]]],[11,"shl","","",523,[[["isize"]],["i32"]]],[11,"shl","","",517,[[["u32"]]]],[11,"shl","std::num","",155,[[["usize"]]]],[11,"shl","std","",516,[[["i64"]]]],[11,"shl","","",518,[[["i8"]]]],[11,"shl","","",522,[[["i64"]]]],[11,"shl","","",516,[[["u16"]],["u16"]]],[11,"shl","","",514,[[["i128"]]]],[11,"shl","","",519,[[["u16"]]]],[11,"shl","","",513,[[["u128"]]]],[11,"shl","","",521,[[["isize"]],["usize"]]],[11,"shl","","",515,[[["u8"]]]],[11,"shl","","",511,[[["i64"]]]],[11,"shl","","",517,[[["u8"]],["u32"]]],[11,"shl","","",520,[[["u64"]],["i64"]]],[11,"shl","","",521,[[["i16"]]]],[11,"shl","","",521,[[["i64"]],["usize"]]],[11,"shl","","",516,[[["usize"]]]],[11,"shl","","",511,[[["i16"]]]],[11,"shl","","",511,[[["u64"]]]],[11,"shl","","",517,[[["u8"]]]],[11,"shl","","",515,[[["i8"]]]],[11,"shl","","",522,[[["i8"]]]],[11,"shl","","",515,[[["i128"]]]],[11,"shl","","",522,[[["isize"]]]],[11,"shl","","",519,[[["i16"]]]],[11,"shl","","",516,[[["i128"]],["u16"]]],[11,"shl","","",516,[[["i128"]]]],[11,"shl","","",519,[[["u128"]]]],[11,"shl","","",516,[[["u16"]]]],[11,"shl","","",517,[[["i16"]]]],[11,"shl","","",520,[[["i128"]]]],[11,"shl","","",519,[[["u32"]]]],[11,"shl","","",515,[[["u32"]],["isize"]]],[11,"shl","","",511,[[["isize"]]]],[11,"shl","","",519,[[["u64"]]]],[11,"shl","","",521,[[["i16"]],["usize"]]],[11,"shl","","",518,[[["u16"]]]],[11,"shl","","",514,[[["i32"]]]],[11,"shl","","",513,[[["u64"]],["u8"]]],[11,"shl","","",519,[[["u8"]]]],[11,"shl","","",523,[[["i8"]]]],[11,"shl","","",521,[[["i64"]]]],[11,"shl","","",519,[[["u8"]]]],[11,"shl","","",516,[[["i64"]],["u16"]]],[11,"shl","","",511,[[["u128"]]]],[11,"shl","","",511,[[["i128"]]]],[11,"shl","","",511,[[["usize"]]]],[11,"shl","","",513,[[["i64"]]]],[11,"shl","","",522,[[["i128"]],["i8"]]],[11,"shl","","",519,[[["i32"]]]],[11,"shl","","",523,[[["i128"]]]],[11,"shl","","",514,[[["usize"]]]],[11,"shl","","",521,[[["i128"]]]],[11,"shl","","",517,[[["i32"]]]],[11,"shl","","",521,[[["i16"]]]],[11,"shl","","",519,[[["i64"]]]],[11,"shl","","",514,[[["u32"]]]],[11,"shl","","",517,[[["i8"]]]],[11,"shl","","",517,[[["u32"]]]],[11,"shl","","",513,[[["i16"]]]],[11,"shl","","",514,[[["i8"]]]],[11,"shl","","",517,[[["i64"]]]],[11,"shl","","",515,[[["i16"]]]],[11,"shl","","",511,[[["u8"]],["i128"]]],[11,"shl","std::num","",155,[[["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"shl","std","",514,[[["isize"]]]],[11,"shl","","",515,[[["u128"]]]],[11,"shl","","",517,[[["u16"]]]],[11,"shl","","",511,[[["u32"]],["i128"]]],[11,"shl","","",516,[[["i16"]],["u16"]]],[11,"shl","","",522,[[["i32"]]]],[11,"shl","","",518,[[["usize"]]]],[11,"shl","","",516,[[["i64"]]]],[11,"shl","","",522,[[["i128"]]]],[11,"shl","","",522,[[["u128"]],["i8"]]],[11,"shl","","",518,[[["i16"]]]],[11,"shl","","",521,[[["u32"]],["usize"]]],[11,"shl","","",514,[[["u16"]]]],[11,"shl","","",521,[[["i8"]]]],[11,"shl","","",520,[[["u128"]]]],[11,"shl","","",511,[[["u16"]]]],[11,"shl","","",516,[[["u64"]]]],[11,"shl","","",514,[[["u32"]]]],[11,"shl","","",511,[[["i64"]],["i128"]]],[11,"shl","","",518,[[["i64"]],["u128"]]],[11,"shl","std::num","",155,[[["usize"]]]],[11,"shl","std","",513,[[["i32"]]]],[11,"shl","","",515,[[["i64"]]]],[11,"shl","","",522,[[["usize"]],["i8"]]],[11,"shl","","",518,[[["i128"]],["u128"]]],[11,"shl","","",514,[[["usize"]]]],[11,"shl","","",513,[[["i8"]]]],[11,"shl","","",518,[[["i128"]]]],[11,"shl","","",523,[[["i32"]]]],[11,"shl","","",518,[[["u128"]]]],[11,"shl","","",519,[[["i32"]],["u64"]]],[11,"shl","","",511,[[["i8"]],["i128"]]],[11,"shl","","",520,[[["i32"]]]],[11,"shl","","",516,[[["u16"]]]],[11,"shl","","",522,[[["u32"]]]],[11,"shl","","",523,[[["i16"]]]],[11,"shl","","",517,[[["u128"]]]],[11,"shl","","",516,[[["isize"]]]],[11,"shl","","",518,[[["isize"]]]],[11,"shl","","",521,[[["u32"]]]],[11,"shl","","",523,[[["u128"]]]],[11,"shl","","",516,[[["u32"]]]],[11,"shl","","",517,[[["i64"]]]],[11,"shl","","",516,[[["i8"]],["u16"]]],[11,"shl","","",521,[[["i128"]]]],[11,"shl","","",516,[[["i32"]]]],[11,"shl","","",522,[[["u8"]]]],[11,"shl","","",515,[[["u64"]]]],[11,"shl","","",516,[[["usize"]]]],[11,"shl","","",514,[[["isize"]]]],[11,"shl","","",523,[[["u32"]]]],[11,"shl","","",516,[[["i16"]]]],[11,"shl","","",513,[[["i128"]],["u8"]]],[11,"shl","","",522,[[["u128"]]]],[11,"shl","","",520,[[["u8"]]]],[11,"shl","","",517,[[["i128"]],["u32"]]],[11,"shl","","",521,[[["i128"]],["usize"]]],[11,"shl","","",521,[[["isize"]]]],[11,"shl","","",518,[[["i8"]]]],[11,"shl","","",514,[[["u32"]]]],[11,"shl","","",513,[[["u32"]]]],[11,"shl","std::num","",155,[[["usize"]],[["wrapping",["u8"]],["u8"]]]],[11,"shl","std","",511,[[["i128"]],["i128"]]],[11,"shl","","",519,[[["i32"]]]],[11,"shl","","",511,[[["isize"]],["i128"]]],[11,"shl","","",522,[[["u64"]]]],[11,"shl","","",519,[[["i8"]]]],[11,"shl","","",523,[[["isize"]]]],[11,"shl","","",519,[[["u16"]],["u64"]]],[11,"shl","","",513,[[["isize"]]]],[11,"shl","","",521,[[["i64"]]]],[11,"shl","","",514,[[["u128"]],["i16"]]],[11,"shl","","",514,[[["i64"]]]],[11,"shl","","",516,[[["u32"]]]],[11,"shl","","",522,[[["u16"]],["i8"]]],[11,"shl","","",515,[[["u8"]]]],[11,"shl","","",520,[[["i128"]]]],[11,"shl","","",514,[[["i8"]]]],[11,"shl","","",518,[[["isize"]]]],[11,"shl","","",523,[[["u16"]],["i32"]]],[11,"shl","","",519,[[["u16"]]]],[11,"shl","","",518,[[["i8"]],["u128"]]],[11,"shl","","",515,[[["i32"]]]],[11,"shl","","",518,[[["u64"]]]],[11,"shl","","",521,[[["isize"]]]],[11,"shl","","",513,[[["i32"]],["u8"]]],[11,"shl","","",520,[[["i64"]]]],[11,"shl","","",514,[[["u8"]]]],[11,"shl","","",523,[[["isize"]]]],[11,"shl","","",511,[[["isize"]]]],[11,"shl","","",521,[[["usize"]],["usize"]]],[11,"shl","","",516,[[["usize"]]]],[11,"shl","","",514,[[["i16"]]]],[11,"shl","","",523,[[["usize"]]]],[11,"shl","","",520,[[["isize"]]]],[11,"shl","","",515,[[["u128"]]]],[11,"shl","std::num","",155,[[["usize"]],[["wrapping",["i16"]],["i16"]]]],[11,"shl","std","",518,[[["i64"]]]],[11,"shl","","",511,[[["u128"]],["i128"]]],[11,"shl","","",520,[[["u64"]]]],[11,"shl","","",511,[[["i16"]]]],[11,"shl","","",514,[[["i128"]]]],[11,"shl","","",516,[[["u16"]]]],[11,"shl","","",514,[[["i8"]]]],[11,"shl","","",522,[[["i16"]]]],[11,"shl","","",513,[[["i16"]],["u8"]]],[11,"shl","","",515,[[["u16"]]]],[11,"shl","","",522,[[["i32"]]]],[11,"shl","std::num","",155,[[["usize"]]]],[11,"shl","std","",515,[[["isize"]]]],[11,"shl","","",521,[[["isize"]]]],[11,"shl","","",520,[[["usize"]]]],[11,"shl","","",521,[[["i64"]]]],[11,"shl","","",513,[[["u64"]]]],[11,"shl","","",515,[[["u64"]]]],[11,"shl","","",513,[[["i8"]]]],[11,"shl","","",516,[[["u64"]],["u16"]]],[11,"shl","","",519,[[["isize"]]]],[11,"shl","","",518,[[["usize"]]]],[11,"shl","","",522,[[["usize"]]]],[11,"shl","","",520,[[["u16"]]]],[11,"shl","","",517,[[["i8"]],["u32"]]],[11,"shl","","",522,[[["u32"]]]],[11,"shl","","",519,[[["u128"]],["u64"]]],[11,"shl","","",513,[[["u128"]]]],[11,"shl","","",523,[[["i128"]]]],[11,"shl","","",522,[[["i128"]]]],[11,"shl","","",516,[[["i64"]]]],[11,"shl","","",514,[[["u64"]],["i16"]]],[11,"shl","","",520,[[["i64"]]]],[11,"shl","","",523,[[["u32"]]]],[11,"shl","","",514,[[["u128"]]]],[11,"shl","","",519,[[["i16"]],["u64"]]],[11,"shl","","",518,[[["u128"]],["u128"]]],[11,"shl","","",513,[[["i64"]]]],[11,"shl","","",511,[[["i16"]],["i128"]]],[11,"shl","","",517,[[["usize"]],["u32"]]],[11,"shl","","",513,[[["i16"]]]],[11,"shl","","",519,[[["i64"]],["u64"]]],[11,"shl","","",513,[[["u128"]],["u8"]]],[11,"shl","","",517,[[["i128"]]]],[11,"shl","","",523,[[["u64"]]]],[11,"shl","","",517,[[["usize"]]]],[11,"shl","std::num","",155,[[["usize"]],[["u64"],["wrapping",["u64"]]]]],[11,"shl","std","",519,[[["i64"]]]],[11,"shl","","",517,[[["u32"]]]],[11,"shl","","",521,[[["i8"]]]],[11,"shl","","",522,[[["usize"]]]],[11,"shl","std::num","",155,[[["usize"]]]],[11,"shl","std","",515,[[["usize"]],["isize"]]],[11,"shl","std::num","",155,[[["usize"]]]],[11,"shl","std","",523,[[["u8"]]]],[11,"shl","","",513,[[["i128"]]]],[11,"shl","","",514,[[["isize"]],["i16"]]],[11,"shl","","",523,[[["i8"]]]],[11,"shl","","",514,[[["i32"]],["i16"]]],[11,"shl","","",522,[[["usize"]]]],[11,"shl","","",517,[[["u32"]],["u32"]]],[11,"shl","","",520,[[["isize"]]]],[11,"shl","","",516,[[["u8"]]]],[11,"shl","","",520,[[["u16"]]]],[11,"shl","","",519,[[["u64"]],["u64"]]],[11,"shl","","",521,[[["u16"]]]],[11,"shl","","",514,[[["i64"]]]],[11,"shl","std::num","",155,[[["usize"]]]],[11,"shl","std","",518,[[["i32"]],["u128"]]],[11,"shl","","",521,[[["i8"]]]],[11,"shl","","",523,[[["i8"]],["i32"]]],[11,"shl","std::num","",155,[[["usize"]]]],[11,"shl","std","",517,[[["i64"]]]],[11,"shl","","",511,[[["usize"]]]],[11,"shl","","",521,[[["u32"]]]],[11,"shl","","",523,[[["i128"]]]],[11,"shl","","",514,[[["u64"]]]],[11,"shl","","",518,[[["i128"]]]],[11,"shl","","",519,[[["u64"]]]],[11,"shl","","",523,[[["i64"]]]],[11,"shl","","",513,[[["u8"]]]],[11,"shl","","",519,[[["u32"]]]],[11,"shl","","",519,[[["i64"]]]],[11,"shl","","",523,[[["u16"]]]],[11,"shl","","",513,[[["i8"]]]],[11,"shl","","",517,[[["u8"]]]],[11,"shl","","",513,[[["usize"]],["u8"]]],[11,"shl","","",514,[[["u16"]]]],[11,"shl","","",513,[[["i16"]]]],[11,"shl","","",518,[[["i32"]]]],[11,"shl","","",521,[[["usize"]]]],[11,"shl","","",521,[[["u8"]]]],[11,"shl","","",519,[[["i128"]]]],[11,"shl","","",523,[[["i32"]],["i32"]]],[11,"shl","","",523,[[["u32"]]]],[11,"shl","","",514,[[["u8"]]]],[11,"shl","","",511,[[["u64"]]]],[11,"shl","","",518,[[["u128"]]]],[11,"shl","","",521,[[["i16"]]]],[11,"shl","","",518,[[["i8"]]]],[11,"shl","","",511,[[["u8"]]]],[11,"shl","","",519,[[["usize"]]]],[11,"shl","","",518,[[["i64"]]]],[11,"shl","","",523,[[["u64"]]]],[11,"shl","","",520,[[["u16"]]]],[11,"shl","","",520,[[["i128"]]]],[11,"shl","","",519,[[["i128"]]]],[11,"shl","","",517,[[["u128"]],["u32"]]],[11,"shl","","",519,[[["i8"]]]],[11,"shl","","",520,[[["isize"]]]],[11,"shl","","",513,[[["i128"]]]],[11,"shl","","",519,[[["i16"]]]],[11,"shl","","",521,[[["u8"]],["usize"]]],[11,"shl","","",522,[[["i128"]]]],[11,"shl","","",511,[[["i32"]]]],[11,"shl","","",520,[[["u64"]]]],[11,"shl","","",523,[[["i64"]],["i32"]]],[11,"shl","","",522,[[["u8"]],["i8"]]],[11,"shl","","",514,[[["u64"]]]],[11,"shl","","",516,[[["u8"]]]],[11,"shl","","",513,[[["i128"]]]],[11,"shl","","",516,[[["i32"]],["u16"]]],[11,"shl","std::num","",155,[[["usize"]]]],[11,"shl","std","",511,[[["u32"]]]],[11,"shl","","",514,[[["i32"]]]],[11,"shl","","",519,[[["i128"]]]],[11,"shl","","",516,[[["u8"]],["u16"]]],[11,"shl","","",513,[[["u64"]]]],[11,"shl","","",522,[[["u128"]]]],[11,"shl","","",523,[[["i128"]],["i32"]]],[11,"shl","","",514,[[["usize"]],["i16"]]],[11,"shl","","",523,[[["usize"]]]],[11,"shl","","",516,[[["isize"]],["u16"]]],[11,"shl","","",511,[[["isize"]]]],[11,"shl","","",517,[[["i16"]]]],[11,"shl","","",518,[[["usize"]]]],[11,"shl","","",511,[[["i32"]]]],[11,"shl","","",511,[[["i8"]]]],[11,"shl","","",521,[[["u64"]]]],[11,"shl","","",511,[[["i8"]]]],[11,"shl","","",515,[[["i32"]]]],[11,"shl","","",523,[[["i64"]]]],[11,"rem_assign","","",523,[[["self"],["i32"]]]],[11,"rem_assign","","",515,[[["isize"],["self"]]]],[11,"rem_assign","std::num","",155,[[["self"],["i128"],["wrapping",["i128"]]]]],[11,"rem_assign","std","",517,[[["self"],["u32"]]]],[11,"rem_assign","","",519,[[["self"],["u64"]]]],[11,"rem_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"rem_assign","","",155,[[["self"],["wrapping"]]]],[11,"rem_assign","std","",513,[[["self"],["u8"]]]],[11,"rem_assign","","",517,[[["self"],["u32"]]]],[11,"rem_assign","","",518,[[["self"],["u128"]]]],[11,"rem_assign","std::num","",155,[[["wrapping",["u128"]],["self"],["u128"]]]],[11,"rem_assign","","",155,[[["self"],["wrapping"]]]],[11,"rem_assign","std","",528,[[["f32"],["self"]]]],[11,"rem_assign","std::num","",155,[[["wrapping"],["self"]]]],[11,"rem_assign","","",155,[[["self"],["u64"],["wrapping",["u64"]]]]],[11,"rem_assign","","",155,[[["self"],["wrapping"]]]],[11,"rem_assign","std","",520,[[["i64"],["self"]]]],[11,"rem_assign","","",529,[[["self"],["f64"]]]],[11,"rem_assign","","",511,[[["self"],["i128"]]]],[11,"rem_assign","","",528,[[["f32"],["self"]]]],[11,"rem_assign","std::num","",155,[[["wrapping"],["self"]]]],[11,"rem_assign","","",155,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"rem_assign","","",155,[[["self"],["wrapping"]]]],[11,"rem_assign","std","",520,[[["i64"],["self"]]]],[11,"rem_assign","std::num","",155,[[["wrapping",["i8"]],["self"],["i8"]]]],[11,"rem_assign","std","",513,[[["self"],["u8"]]]],[11,"rem_assign","","",514,[[["self"],["i16"]]]],[11,"rem_assign","std::num","",155,[[["wrapping",["usize"]],["self"],["usize"]]]],[11,"rem_assign","","",155,[[["self"],["wrapping"]]]],[11,"rem_assign","std","",523,[[["self"],["i32"]]]],[11,"rem_assign","","",522,[[["self"],["i8"]]]],[11,"rem_assign","","",514,[[["self"],["i16"]]]],[11,"rem_assign","","",516,[[["u16"],["self"]]]],[11,"rem_assign","std::num","",155,[[["self"],["wrapping",["u8"]],["u8"]]]],[11,"rem_assign","std","",516,[[["u16"],["self"]]]],[11,"rem_assign","","",521,[[["self"],["usize"]]]],[11,"rem_assign","std::num","",155,[[["wrapping"],["self"]]]],[11,"rem_assign","std","",529,[[["self"],["f64"]]]],[11,"rem_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"rem_assign","std","",521,[[["self"],["usize"]]]],[11,"rem_assign","std::num","",155,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"rem_assign","","",155,[[["self"],["u32"],["wrapping",["u32"]]]]],[11,"rem_assign","","",155,[[["self"],["wrapping"]]]],[11,"rem_assign","","",155,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"rem_assign","","",155,[[["self"],["wrapping"]]]],[11,"rem_assign","std","",515,[[["isize"],["self"]]]],[11,"rem_assign","std::num","",155,[[["wrapping",["u16"]],["self"],["u16"]]]],[11,"rem_assign","std","",519,[[["self"],["u64"]]]],[11,"rem_assign","std::num","",155,[[["self"],["wrapping",["i32"]],["i32"]]]],[11,"rem_assign","std","",518,[[["self"],["u128"]]]],[11,"rem_assign","","",522,[[["self"],["i8"]]]],[11,"rem_assign","","",511,[[["self"],["i128"]]]],[11,"write","std::hash","",321,[[["self"]]]],[11,"finish","","",321,[[["self"]],["u64"]]],[11,"finish","std","",508,[[["self"]],["u64"]]],[11,"write","","",508,[[["self"]]]],[11,"write_u8","","",508,[[["self"],["u8"]]]],[11,"write_u16","","",508,[[["u16"],["self"]]]],[11,"write_u32","","",508,[[["self"],["u32"]]]],[11,"write_u64","","",508,[[["self"],["u64"]]]],[11,"write_u128","","",508,[[["self"],["u128"]]]],[11,"write_usize","","",508,[[["self"],["usize"]]]],[11,"write_i8","","",508,[[["self"],["i8"]]]],[11,"write_i16","","",508,[[["self"],["i16"]]]],[11,"write_i32","","",508,[[["self"],["i32"]]]],[11,"write_i64","","",508,[[["i64"],["self"]]]],[11,"write_i128","","",508,[[["self"],["i128"]]]],[11,"write_isize","","",508,[[["isize"],["self"]]]],[11,"sub_assign","std::num","",155,[[["self"],["u32"],["wrapping",["u32"]]]]],[11,"sub_assign","std","",513,[[["self"],["u8"]]]],[11,"sub_assign","","",517,[[["self"],["u32"]]]],[11,"sub_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"sub_assign","std","",520,[[["i64"],["self"]]]],[11,"sub_assign","std::time","",497,[[["self"],["duration"]]]],[11,"sub_assign","std","",514,[[["self"],["i16"]]]],[11,"sub_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"sub_assign","","",155,[[["wrapping",["u16"]],["self"],["u16"]]]],[11,"sub_assign","","",155,[[["wrapping"],["self"]]]],[11,"sub_assign","std","",529,[[["self"],["f64"]]]],[11,"sub_assign","std::num","",155,[[["wrapping",["i8"]],["self"],["i8"]]]],[11,"sub_assign","std","",528,[[["f32"],["self"]]]],[11,"sub_assign","","",515,[[["isize"],["self"]]]],[11,"sub_assign","","",529,[[["self"],["f64"]]]],[11,"sub_assign","","",514,[[["self"],["i16"]]]],[11,"sub_assign","","",523,[[["self"],["i32"]]]],[11,"sub_assign","","",528,[[["f32"],["self"]]]],[11,"sub_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"sub_assign","","",155,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"sub_assign","","",155,[[["self"],["wrapping"]]]],[11,"sub_assign","std","",516,[[["u16"],["self"]]]],[11,"sub_assign","std::num","",155,[[["self"],["u64"],["wrapping",["u64"]]]]],[11,"sub_assign","","",155,[[["self"],["wrapping"]]]],[11,"sub_assign","","",155,[[["wrapping"],["self"]]]],[11,"sub_assign","","",155,[[["self"],["wrapping"]]]],[11,"sub_assign","","",155,[[["wrapping"],["self"]]]],[11,"sub_assign","std","",511,[[["self"],["i128"]]]],[11,"sub_assign","","",511,[[["self"],["i128"]]]],[11,"sub_assign","std::num","",155,[[["wrapping",["usize"]],["self"],["usize"]]]],[11,"sub_assign","std","",521,[[["self"],["usize"]]]],[11,"sub_assign","","",520,[[["i64"],["self"]]]],[11,"sub_assign","std::num","",155,[[["self"],["i128"],["wrapping",["i128"]]]]],[11,"sub_assign","","",155,[[["self"],["wrapping",["u8"]],["u8"]]]],[11,"sub_assign","","",155,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"sub_assign","","",155,[[["self"],["wrapping"]]]],[11,"sub_assign","std","",515,[[["isize"],["self"]]]],[11,"sub_assign","","",517,[[["self"],["u32"]]]],[11,"sub_assign","","",522,[[["self"],["i8"]]]],[11,"sub_assign","","",522,[[["self"],["i8"]]]],[11,"sub_assign","","",518,[[["self"],["u128"]]]],[11,"sub_assign","std::num","",155,[[["wrapping",["u128"]],["self"],["u128"]]]],[11,"sub_assign","","",155,[[["self"],["wrapping",["i32"]],["i32"]]]],[11,"sub_assign","std","",513,[[["self"],["u8"]]]],[11,"sub_assign","std::num","",155,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"sub_assign","std","",519,[[["self"],["u64"]]]],[11,"sub_assign","","",523,[[["self"],["i32"]]]],[11,"sub_assign","","",518,[[["self"],["u128"]]]],[11,"sub_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"sub_assign","std","",519,[[["self"],["u64"]]]],[11,"sub_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"sub_assign","std","",516,[[["u16"],["self"]]]],[11,"sub_assign","","",521,[[["self"],["usize"]]]],[11,"haystack","std::str::pattern","",266,[[["self"]],["str"]]],[11,"next","","",266,[[["self"]],["searchstep"]]],[11,"next_match","","",266,[[["self"]],["option"]]],[11,"next_reject","","",266,[[["self"]],["option"]]],[11,"haystack","","",265,[[["self"]],["str"]]],[11,"next","","",265,[[["self"]],["searchstep"]]],[11,"next_match","","",265,[[["self"]],["option"]]],[11,"next_reject","","",265,[[["self"]],["option"]]],[11,"haystack","","",267,[[["self"]],["str"]]],[11,"next","","",267,[[["self"]],["searchstep"]]],[11,"next_match","","",267,[[["self"]],["option"]]],[11,"haystack","","",264,[[["self"]],["str"]]],[11,"next","","",264,[[["self"]],["searchstep"]]],[11,"next_match","","",264,[[["self"]],["option"]]],[11,"clone","std::num","",462,[[["self"]],["nonzerou32"]]],[11,"clone","std::mem","",354,[[["self"]],["maybeuninit"]]],[11,"clone","std::num","",452,[[["self"]],["parseinterror"]]],[11,"clone","std::option","",360,[[["self"]],["noneerror"]]],[11,"clone","std","",526,[[["self"]],["char"]]],[11,"clone","std::num","",461,[[["self"]],["nonzerou16"]]],[11,"clone","std","",529,[[["self"]],["f64"]]],[11,"clone","std::option","",359,[[["self"]],["intoiter"]]],[11,"clone","std","",522,[[["self"]],["i8"]]],[11,"clone","std::char","",317,[[["self"]],["decodeutf16"]]],[11,"clone","std::str","",286,[[["self"]],["split"]]],[11,"clone","std::iter","",325,[[["self"]],["oncewith"]]],[11,"clone","std::str","",284,[[["self"]],["rmatches"]]],[11,"clone","std::ptr","",362,[[["self"]],["nonnull"]]],[11,"clone","std::iter","",323,[[["self"]],["fromfn"]]],[11,"clone","std::cmp","",30,[[["self"]],["reverse"]]],[11,"clone","std::iter","",339,[[["self"]],["rev"]]],[11,"clone","std::str","",287,[[["self"]],["rsplitn"]]],[11,"clone","std::iter","",344,[[["self"]],["skip"]]],[11,"clone","std::ops","",90,[[["self"]],["generatorstate"]]],[11,"clone","std::iter","",346,[[["self"]],["take"]]],[11,"clone","std::pin","",361,[[["self"]],["pin"]]],[11,"clone","std::str","",290,[[["self"]],["splitterminator"]]],[11,"clone","std::iter","",333,[[["self"]],["chain"]]],[11,"clone","std::str","",268,[[["self"]],["encodeutf16"]]],[11,"clone","std::marker","",350,[[["self"]],["phantomdata"]]],[11,"clone","std::ops","",84,[[["self"]],["rangeto"]]],[11,"clone","std","",525,[[["self"]]]],[11,"clone","std::iter","",328,[[["self"]],["successors"]]],[11,"clone","std::str","",280,[[["self"]],["linesany"]]],[11,"clone","std","",508,[[["self"]],["t"]]],[11,"clone","std::str","",275,[[["self"]],["escapedebug"]]],[11,"clone","std::str::pattern","",266,[[["self"]],["charpredicatesearcher"]]],[11,"clone","std::str","",285,[[["self"]],["rsplit"]]],[11,"clone","std::ascii","",367,[[["self"]],["escapedefault"]]],[11,"clone","std","",521,[[["self"]],["usize"]]],[11,"clone","","",523,[[["self"]],["i32"]]],[11,"clone","std::marker","",351,[[["self"]],["phantompinned"]]],[11,"clone","std::sync::atomic","",204,[[["self"]],["ordering"]]],[11,"clone","std","",511,[[["self"]],["i128"]]],[11,"clone","std::char","",315,[[["self"]],["chartryfromerror"]]],[11,"clone","std::time","",497,[[["self"]],["duration"]]],[11,"clone","std::result","",363,[[["self"]],["iter"]]],[11,"clone","std::num","",458,[[["self"]],["nonzeroi8"]]],[11,"clone","std::iter","",327,[[["self"]],["repeatwith"]]],[11,"clone","std::str","",272,[[["self"]],["charindices"]]],[11,"clone","std::num","",463,[[["self"]],["nonzerou64"]]],[11,"clone","std","",512,[[["self"]],["bool"]]],[11,"clone","std::num","",455,[[["self"]],["nonzeroi16"]]],[11,"clone","std::iter","",341,[[["self"]],["flatmap"]]],[11,"clone","","",343,[[["self"]],["scan"]]],[11,"clone","std::result","",93,[[["self"]],["result"]]],[11,"clone_from","","",93,[[["self"],["result"]]]],[11,"clone","std::num","",157,[[["self"]],["interrorkind"]]],[11,"clone","std::char","",312,[[["self"]],["escapedebug"]]],[11,"clone","std::str","",289,[[["self"]],["rsplitterminator"]]],[11,"clone","std::ops","",355,[[["self"]],["rangefull"]]],[11,"clone","std::str::pattern","",19,[[["self"]],["searchstep"]]],[11,"clone","std::option","",357,[[["self"]],["iter"]]],[11,"clone","std::char","",310,[[["self"]],["escapeunicode"]]],[11,"clone","std::iter","",338,[[["self"]],["map"]]],[11,"clone","std::alloc","",504,[[["self"]],["layouterr"]]],[11,"clone","std::char","",26,[[["self"]],["unicodeversion"]]],[11,"clone","std::iter","",347,[[["self"]],["takewhile"]]],[11,"clone","std","",530,[[["self"]]]],[11,"clone","std::ops","",82,[[["self"]],["range"]]],[11,"clone","std::slice","",252,[[["self"]],["iter"]]],[11,"clone","std::str","",282,[[["self"]],["rmatchindices"]]],[11,"clone","","",278,[[["self"]],["utf8error"]]],[11,"clone","std::iter","",322,[[["self"]],["empty"]]],[11,"clone","std::convert","",319,[[["self"]],["infallible"]]],[11,"clone","std::str","",277,[[["self"]],["escapeunicode"]]],[11,"clone","std::slice","",247,[[["self"]],["chunksexact"]]],[11,"clone","std::num","",456,[[["self"]],["nonzeroi32"]]],[11,"clone","","",454,[[["self"]],["nonzeroi128"]]],[11,"clone","std::iter","",349,[[["self"]],["inspect"]]],[11,"clone","std::num","",453,[[["self"]],["tryfrominterror"]]],[11,"clone","std::char","",318,[[["self"]],["decodeutf16error"]]],[11,"clone","std::iter","",324,[[["self"]],["once"]]],[11,"clone","","",336,[[["self"]],["filter"]]],[11,"clone","std::cell","",303,[[["self"]],["cell"]]],[11,"clone","std::iter","",326,[[["self"]],["repeat"]]],[11,"clone","std::num","",460,[[["self"]],["nonzerou128"]]],[11,"clone","std::str","",276,[[["self"]],["escapedefault"]]],[11,"clone","std::task","",224,[[["self"]],["poll"]]],[11,"clone","std::num","",451,[[["self"]],["parsefloaterror"]]],[11,"clone","","",155,[[["self"]],["wrapping"]]],[11,"clone","std::hash","",320,[[["self"]],["buildhasherdefault"]]],[11,"clone","std::iter","",330,[[["self"]],["copied"]]],[11,"clone","std::alloc","",506,[[["self"]],["cannotreallocinplace"]]],[11,"clone","std::iter","",329,[[["self"]],["cloned"]]],[11,"clone","std::ops","",83,[[["self"]],["rangefrom"]]],[11,"clone","std::ffi","",437,[[["self"]],["valistimpl"]]],[11,"clone","std::ops","",85,[[["self"]],["bound"]]],[11,"clone","std::slice","",255,[[["self"]],["rchunksexact"]]],[11,"clone","std::str::pattern","",265,[[["self"]],["charslicesearcher"]]],[11,"clone","std","",528,[[["self"]],["f32"]]],[11,"clone","std::slice","",246,[[["self"]],["windows"]]],[11,"clone","std::char","",316,[[["self"]],["parsecharerror"]]],[11,"clone","std::iter","",334,[[["self"]],["cycle"]]],[11,"clone","std::array","",301,[[["self"]],["tryfromsliceerror"]]],[11,"clone","std::task","",501,[[["self"]],["waker"]]],[11,"clone","std::fmt","",235,[[["self"]],["error"]]],[11,"clone","std::cmp","",29,[[["self"]],["ordering"]]],[11,"clone","std::num","",465,[[["self"]],["nonzerousize"]]],[11,"clone","std::str","",271,[[["self"]],["bytes"]]],[11,"clone","std::iter","",331,[[["self"]],["flatten"]]],[11,"clone","std::str","",281,[[["self"]],["matchindices"]]],[11,"clone","std","",518,[[["self"]],["u128"]]],[11,"clone","","",513,[[["self"]],["u8"]]],[11,"clone","std::hash","",321,[[["self"]],["siphasher"]]],[11,"clone","std::iter","",342,[[["self"]],["peekable"]]],[11,"clone","std::num","",459,[[["self"]],["nonzeroisize"]]],[11,"clone","std::slice","",254,[[["self"]],["rchunks"]]],[11,"clone","std::iter","",337,[[["self"]],["filtermap"]]],[11,"clone","","",332,[[["self"]],["stepby"]]],[11,"clone","std::alloc","",505,[[["self"]],["allocerr"]]],[11,"clone","std::cell","Panics",304,[[["self"]],["refcell"]]],[11,"clone","std::mem","",352,[[["self"]],["discriminant"]]],[11,"clone","std::slice","",250,[[["self"]],["split"]]],[11,"clone","std::str::pattern","",264,[[["self"]],["charsearcher"]]],[11,"clone","std::str","",273,[[["self"]],["chars"]]],[11,"clone","std::task","",500,[[["self"]],["rawwakervtable"]]],[11,"clone","std::char","",311,[[["self"]],["escapedefault"]]],[11,"clone","std::iter","",348,[[["self"]],["fuse"]]],[11,"clone","","",340,[[["self"]],["zip"]]],[11,"clone","std","",525,[[["self"]]]],[11,"clone","","",517,[[["self"]],["u32"]]],[11,"clone","","",514,[[["self"]],["i16"]]],[11,"clone","std::str","",274,[[["self"]],["parseboolerror"]]],[11,"clone","std::fmt","",236,[[["self"]],["arguments"]]],[11,"clone","std::char","",314,[[["self"]],["touppercase"]]],[11,"clone","std::slice","",245,[[["self"]],["chunks"]]],[11,"clone","std","",515,[[["self"]],["isize"]]],[11,"clone","std::num","",464,[[["self"]],["nonzerou8"]]],[11,"clone","std::alloc","",503,[[["self"]],["layout"]]],[11,"clone","std::slice","",258,[[["self"]],["rsplit"]]],[11,"clone","std::iter","",335,[[["self"]],["enumerate"]]],[11,"clone","std","",520,[[["self"]],["i64"]]],[11,"clone","std::option","",91,[[["self"]],["option"]]],[11,"clone_from","","",91,[[["self"],["option"]]]],[11,"clone","std::str","",279,[[["self"]],["lines"]]],[11,"clone","","",270,[[["self"]],["splitwhitespace"]]],[11,"clone","std::ops","",356,[[["self"]],["rangeinclusive"]]],[11,"clone","std::num","",156,[[["self"]],["fpcategory"]]],[11,"clone","std::str","",283,[[["self"]],["matches"]]],[11,"clone","std::num","",457,[[["self"]],["nonzeroi64"]]],[11,"clone","std::str::pattern","",267,[[["self"]],["strsearcher"]]],[11,"clone","std::iter","",345,[[["self"]],["skipwhile"]]],[11,"clone","std::array","",302,[[["self"]],["intoiter"]]],[11,"clone","std::char","",313,[[["self"]],["tolowercase"]]],[11,"clone","std::raw","",92,[[["self"]],["traitobject"]]],[11,"clone","std::mem","",353,[[["self"]],["manuallydrop"]]],[11,"clone","std::result","",365,[[["self"]],["intoiter"]]],[11,"clone","std::str","",269,[[["self"]],["splitasciiwhitespace"]]],[11,"clone","std","",516,[[["self"]],["u16"]]],[11,"clone","std::str","",288,[[["self"]],["splitn"]]],[11,"clone","std","",519,[[["self"]],["u64"]]],[11,"clone","std::any","",300,[[["self"]],["typeid"]]],[11,"clone","std::ops","",87,[[["self"]],["rangetoinclusive"]]],[11,"build_hasher","std::hash","",320,[[["self"]],["h"]]],[11,"bitxor","std::num","",155,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"bitxor","std","",516,[[["u16"]]]],[11,"bitxor","","",520,[[["i64"]]]],[11,"bitxor","","",517,[[["u32"]],["u32"]]],[11,"bitxor","","",520,[[["i64"]]]],[11,"bitxor","std::num","",155,[[["wrapping"]]]],[11,"bitxor","std","",519,[[["u64"]]]],[11,"bitxor","std::num","",155,[[["wrapping"]]]],[11,"bitxor","std","",515,[[["isize"]]]],[11,"bitxor","","",511,[[["i128"]]]],[11,"bitxor","std::num","",155,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"bitxor","","",155,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"bitxor","std","",519,[[["u64"]],["u64"]]],[11,"bitxor","","",520,[[["i64"]]]],[11,"bitxor","","",514,[[["i16"]],["i16"]]],[11,"bitxor","","",515,[[["isize"]]]],[11,"bitxor","","",523,[[["i32"]]]],[11,"bitxor","","",512,[[["bool"]],["bool"]]],[11,"bitxor","","",516,[[["u16"]]]],[11,"bitxor","","",513,[[["u8"]],["u8"]]],[11,"bitxor","","",522,[[["i8"]]]],[11,"bitxor","std::num","",155,[[["i128"],["wrapping",["i128"]]],[["i128"],["wrapping",["i128"]]]]],[11,"bitxor","","",155,[[["wrapping"]]]],[11,"bitxor","","",155,[[["wrapping"]]]],[11,"bitxor","std","",515,[[["isize"]],["isize"]]],[11,"bitxor","","",516,[[["u16"]],["u16"]]],[11,"bitxor","","",519,[[["u64"]]]],[11,"bitxor","","",523,[[["i32"]],["i32"]]],[11,"bitxor","","",517,[[["u32"]]]],[11,"bitxor","","",512,[[["bool"]]]],[11,"bitxor","std::num","",155,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"bitxor","","",155,[[["wrapping"]]]],[11,"bitxor","std","",521,[[["usize"]]]],[11,"bitxor","std::num","",155,[[["wrapping"]]]],[11,"bitxor","","",155,[[["u64"],["wrapping",["u64"]]],[["u64"],["wrapping",["u64"]]]]],[11,"bitxor","std","",511,[[["i128"]]]],[11,"bitxor","std::num","",155,[[["wrapping"]]]],[11,"bitxor","","",155,[[["u32"],["wrapping",["u32"]]],[["u32"],["wrapping",["u32"]]]]],[11,"bitxor","std","",522,[[["i8"]],["i8"]]],[11,"bitxor","std::num","",155,[[["wrapping"]]]],[11,"bitxor","std","",521,[[["usize"]]]],[11,"bitxor","std::num","",155,[[["wrapping"]]]],[11,"bitxor","std","",522,[[["i8"]]]],[11,"bitxor","std::num","",155,[[["wrapping"]]]],[11,"bitxor","std","",517,[[["u32"]]]],[11,"bitxor","","",519,[[["u64"]]]],[11,"bitxor","","",521,[[["usize"]]]],[11,"bitxor","","",523,[[["i32"]]]],[11,"bitxor","","",518,[[["u128"]]]],[11,"bitxor","std::num","",155,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"bitxor","std","",515,[[["isize"]]]],[11,"bitxor","","",518,[[["u128"]]]],[11,"bitxor","","",521,[[["usize"]],["usize"]]],[11,"bitxor","std::num","",155,[[["wrapping"]]]],[11,"bitxor","std","",523,[[["i32"]]]],[11,"bitxor","","",520,[[["i64"]],["i64"]]],[11,"bitxor","std::num","",155,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"bitxor","std","",514,[[["i16"]]]],[11,"bitxor","","",516,[[["u16"]]]],[11,"bitxor","std::num","",155,[[["wrapping",["u16"]],["u16"]],[["wrapping",["u16"]],["u16"]]]],[11,"bitxor","std","",518,[[["u128"]],["u128"]]],[11,"bitxor","","",512,[[["bool"]]]],[11,"bitxor","","",514,[[["i16"]]]],[11,"bitxor","","",513,[[["u8"]]]],[11,"bitxor","std::num","",155,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"bitxor","std","",513,[[["u8"]]]],[11,"bitxor","","",514,[[["i16"]]]],[11,"bitxor","","",511,[[["i128"]]]],[11,"bitxor","","",513,[[["u8"]]]],[11,"bitxor","std::num","",155,[[["wrapping"]]]],[11,"bitxor","std","",522,[[["i8"]]]],[11,"bitxor","std::num","",155,[[["wrapping",["u128"]],["u128"]],[["wrapping",["u128"]],["u128"]]]],[11,"bitxor","std","",512,[[["bool"]]]],[11,"bitxor","","",511,[[["i128"]],["i128"]]],[11,"bitxor","","",517,[[["u32"]]]],[11,"bitxor","","",518,[[["u128"]]]],[11,"fmt","","",528,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",529,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",508,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",508,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"as_mut","","",510,[[["self"]]]],[11,"as_mut","","",527,[[["self"]]]],[11,"as_mut","","",508,[[["self"]],["u"]]],[11,"fmt","std::alloc","",504,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",459,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::cell","",307,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::panic","",468,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",508,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::fmt","",235,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",508,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",458,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",463,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",460,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::char","",316,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",528,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",461,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::char","",312,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",318,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::array","",301,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",509,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::ascii","",367,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::alloc","",506,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",520,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::cell","",308,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::char","",310,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",277,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",526,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",453,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",457,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::char","",315,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",314,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",465,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",456,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",454,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",155,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",529,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::cell","",306,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",276,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::alloc","",505,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",521,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",523,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",518,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",512,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",274,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",530,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::fmt","",236,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",522,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",462,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",517,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",516,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",452,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::char","",313,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::cell","",305,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::panic","",469,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::pin","",361,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",519,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",451,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",278,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",464,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",515,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",513,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",455,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",275,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::char","",311,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::convert","",319,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",514,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",511,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"len","std::iter","",348,[[["self"]],["usize"]]],[11,"is_empty","","",348,[[["self"]],["bool"]]],[11,"len","","",335,[[["self"]],["usize"]]],[11,"is_empty","","",335,[[["self"]],["bool"]]],[11,"len","std::slice","",253,[[["self"]],["usize"]]],[11,"is_empty","","",253,[[["self"]],["bool"]]],[11,"len","std::iter","",325,[[["self"]],["usize"]]],[11,"is_empty","std::slice","",247,[[["self"]],["bool"]]],[11,"len","","",252,[[["self"]],["usize"]]],[11,"is_empty","","",252,[[["self"]],["bool"]]],[11,"len","std::iter","",324,[[["self"]],["usize"]]],[11,"is_empty","std::slice","",248,[[["self"]],["bool"]]],[11,"len","std::iter","",339,[[["self"]],["usize"]]],[11,"is_empty","","",339,[[["self"]],["bool"]]],[11,"len","std::array","",302,[[["self"]],["usize"]]],[11,"is_empty","","",302,[[["self"]],["bool"]]],[11,"len","std::iter","",329,[[["self"]],["usize"]]],[11,"is_empty","","",329,[[["self"]],["bool"]]],[11,"len","","",330,[[["self"]],["usize"]]],[11,"is_empty","","",330,[[["self"]],["bool"]]],[11,"is_empty","std::slice","",256,[[["self"]],["bool"]]],[11,"len","std::iter","",349,[[["self"]],["usize"]]],[11,"is_empty","","",349,[[["self"]],["bool"]]],[11,"is_empty","std::slice","",255,[[["self"]],["bool"]]],[11,"len","std::iter","",338,[[["self"]],["usize"]]],[11,"is_empty","","",338,[[["self"]],["bool"]]],[11,"len","std::str","",271,[[["self"]],["usize"]]],[11,"is_empty","","",271,[[["self"]],["bool"]]],[11,"len","std","",508,[[["self"]],["usize"]]],[11,"is_empty","","",508,[[["self"]],["bool"]]],[11,"len","std::char","",311,[[["self"]],["usize"]]],[11,"len","std::iter","",322,[[["self"]],["usize"]]],[11,"len","std::char","",310,[[["self"]],["usize"]]],[11,"drop","std::task","",501,[[["self"]]]],[11,"drop","std::array","",302,[[["self"]]]],[11,"drop","std::ffi","",437,[[["self"]]]],[11,"bitor","std","",521,[[["usize"]]]],[11,"bitor","","",518,[[["u128"]]]],[11,"bitor","std::num","",155,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"bitor","std","",512,[[["bool"]]]],[11,"bitor","std::num","",155,[[["wrapping"]]]],[11,"bitor","std","",513,[[["u8"]]]],[11,"bitor","","",522,[[["i8"]]]],[11,"bitor","","",517,[[["u32"]]]],[11,"bitor","","",515,[[["isize"]]]],[11,"bitor","","",517,[[["u32"]]]],[11,"bitor","","",517,[[["u32"]],["u32"]]],[11,"bitor","","",522,[[["i8"]]]],[11,"bitor","","",515,[[["isize"]]]],[11,"bitor","","",519,[[["u64"]]]],[11,"bitor","","",515,[[["isize"]],["isize"]]],[11,"bitor","","",512,[[["bool"]],["bool"]]],[11,"bitor","std::num","",155,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"bitor","","",155,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"bitor","std","",511,[[["i128"]]]],[11,"bitor","std::num","",155,[[["wrapping"]]]],[11,"bitor","std","",523,[[["i32"]],["i32"]]],[11,"bitor","","",516,[[["u16"]]]],[11,"bitor","","",523,[[["i32"]]]],[11,"bitor","","",520,[[["i64"]]]],[11,"bitor","std::num","",155,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"bitor","","",155,[[["wrapping",["u16"]],["u16"]],[["wrapping",["u16"]],["u16"]]]],[11,"bitor","std","",523,[[["i32"]]]],[11,"bitor","","",511,[[["i128"]]]],[11,"bitor","","",512,[[["bool"]]]],[11,"bitor","","",520,[[["i64"]]]],[11,"bitor","std::num","",155,[[["wrapping"]]]],[11,"bitor","std","",521,[[["usize"]]]],[11,"bitor","","",522,[[["i8"]],["i8"]]],[11,"bitor","","",522,[[["i8"]]]],[11,"bitor","","",514,[[["i16"]]]],[11,"bitor","std::num","",155,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"bitor","std","",513,[[["u8"]]]],[11,"bitor","","",520,[[["i64"]],["i64"]]],[11,"bitor","","",516,[[["u16"]]]],[11,"bitor","","",520,[[["i64"]]]],[11,"bitor","","",518,[[["u128"]]]],[11,"bitor","std::num","",155,[[["wrapping"]]]],[11,"bitor","std","",519,[[["u64"]]]],[11,"bitor","std::num","",155,[[["wrapping",["u128"]],["u128"]],[["wrapping",["u128"]],["u128"]]]],[11,"bitor","std","",518,[[["u128"]],["u128"]]],[11,"bitor","","",514,[[["i16"]]]],[11,"bitor","std::num","",155,[[["u64"],["wrapping",["u64"]]],[["u64"],["wrapping",["u64"]]]]],[11,"bitor","","",155,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"bitor","std","",513,[[["u8"]],["u8"]]],[11,"bitor","","",514,[[["i16"]]]],[11,"bitor","","",519,[[["u64"]]]],[11,"bitor","std::num","",155,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"bitor","","",155,[[["wrapping"]]]],[11,"bitor","std","",523,[[["i32"]]]],[11,"bitor","std::num","",155,[[["u32"],["wrapping",["u32"]]],[["u32"],["wrapping",["u32"]]]]],[11,"bitor","","",155,[[["i128"],["wrapping",["i128"]]],[["i128"],["wrapping",["i128"]]]]],[11,"bitor","std","",514,[[["i16"]],["i16"]]],[11,"bitor","","",516,[[["u16"]]]],[11,"bitor","std::num","",155,[[["wrapping"]]]],[11,"bitor","","",155,[[["wrapping"]]]],[11,"bitor","std","",518,[[["u128"]]]],[11,"bitor","","",511,[[["i128"]]]],[11,"bitor","","",517,[[["u32"]]]],[11,"bitor","std::num","",155,[[["wrapping"]]]],[11,"bitor","std","",521,[[["usize"]],["usize"]]],[11,"bitor","","",513,[[["u8"]]]],[11,"bitor","","",515,[[["isize"]]]],[11,"bitor","std::num","",155,[[["wrapping"]]]],[11,"bitor","","",155,[[["wrapping"]]]],[11,"bitor","std","",511,[[["i128"]],["i128"]]],[11,"bitor","","",521,[[["usize"]]]],[11,"bitor","std::num","",155,[[["wrapping"]]]],[11,"bitor","std","",512,[[["bool"]]]],[11,"bitor","","",519,[[["u64"]],["u64"]]],[11,"bitor","std::num","",155,[[["wrapping"]]]],[11,"bitor","std","",516,[[["u16"]],["u16"]]],[11,"eq","","",510,[[["self"]],["bool"]]],[11,"ne","","",510,[[["self"]],["bool"]]],[11,"eq","","",519,[[["self"],["u64"]],["bool"]]],[11,"ne","","",519,[[["self"],["u64"]],["bool"]]],[11,"eq","std::cell","Panics",304,[[["refcell"],["self"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","std::task","",499,[[["self"],["rawwaker"]],["bool"]]],[11,"ne","","",499,[[["self"],["rawwaker"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","std::hash","",320,[[["self"],["buildhasherdefault"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","std::char","",318,[[["decodeutf16error"],["self"]],["bool"]]],[11,"ne","","",318,[[["decodeutf16error"],["self"]],["bool"]]],[11,"eq","std","",531,[[["self"]],["bool"]]],[11,"ne","","",531,[[["self"]],["bool"]]],[11,"eq","std::ops","",87,[[["self"],["rangetoinclusive"]],["bool"]]],[11,"ne","","",87,[[["self"],["rangetoinclusive"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","std::num","",456,[[["nonzeroi32"],["self"]],["bool"]]],[11,"ne","","",456,[[["nonzeroi32"],["self"]],["bool"]]],[11,"eq","","",455,[[["self"],["nonzeroi16"]],["bool"]]],[11,"ne","","",455,[[["self"],["nonzeroi16"]],["bool"]]],[11,"eq","std::ops","",355,[[["rangefull"],["self"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","std::cell","",303,[[["cell"],["self"]],["bool"]]],[11,"eq","std::cmp","",30,[[["reverse"],["self"]],["bool"]]],[11,"ne","","",30,[[["reverse"],["self"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","std::ops","",82,[[["range"],["self"]],["bool"]]],[11,"ne","","",82,[[["range"],["self"]],["bool"]]],[11,"eq","std","",527,[[["self"]],["bool"]]],[11,"ne","","",527,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","std::task","",500,[[["rawwakervtable"],["self"]],["bool"]]],[11,"ne","","",500,[[["rawwakervtable"],["self"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","std::str","",274,[[["self"],["parseboolerror"]],["bool"]]],[11,"ne","","",274,[[["self"],["parseboolerror"]],["bool"]]],[11,"eq","std::alloc","",506,[[["self"],["cannotreallocinplace"]],["bool"]]],[11,"eq","std::num","",465,[[["self"],["nonzerousize"]],["bool"]]],[11,"ne","","",465,[[["self"],["nonzerousize"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","","",521,[[["self"],["usize"]],["bool"]]],[11,"ne","","",521,[[["self"],["usize"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",531,[[["self"]],["bool"]]],[11,"ne","","",531,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","std::ops","",90,[[["generatorstate"],["self"]],["bool"]]],[11,"ne","","",90,[[["generatorstate"],["self"]],["bool"]]],[11,"eq","std::option","",360,[[["noneerror"],["self"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","","",531,[[["self"]],["bool"]]],[11,"ne","","",531,[[["self"]],["bool"]]],[11,"eq","std::mem","",353,[[["manuallydrop"],["self"]],["bool"]]],[11,"ne","","",353,[[["manuallydrop"],["self"]],["bool"]]],[11,"eq","","",352,[[["discriminant"],["self"]],["bool"]]],[11,"eq","std::pin","",361,[[["pin"],["self"]],["bool"]]],[11,"ne","","",361,[[["pin"],["self"]],["bool"]]],[11,"eq","std","",531,[[["self"]],["bool"]]],[11,"ne","","",531,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",531,[[["self"]],["bool"]]],[11,"ne","","",531,[[["self"]],["bool"]]],[11,"eq","","",515,[[["isize"],["self"]],["bool"]]],[11,"ne","","",515,[[["isize"],["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",514,[[["self"],["i16"]],["bool"]]],[11,"ne","","",514,[[["self"],["i16"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",517,[[["u32"],["self"]],["bool"]]],[11,"ne","","",517,[[["u32"],["self"]],["bool"]]],[11,"eq","","",510,[[["self"]],["bool"]]],[11,"ne","","",510,[[["self"]],["bool"]]],[11,"eq","std::str","",278,[[["utf8error"],["self"]],["bool"]]],[11,"ne","","",278,[[["utf8error"],["self"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","std::num","",157,[[["interrorkind"],["self"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","","",529,[[["f64"],["self"]],["bool"]]],[11,"ne","","",529,[[["f64"],["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","std::marker","",350,[[["self"],["phantomdata"]],["bool"]]],[11,"eq","std::time","",497,[[["duration"],["self"]],["bool"]]],[11,"ne","","",497,[[["duration"],["self"]],["bool"]]],[11,"eq","std::num","",461,[[["nonzerou16"],["self"]],["bool"]]],[11,"ne","","",461,[[["nonzerou16"],["self"]],["bool"]]],[11,"eq","std","",525,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","std::sync::atomic","",204,[[["ordering"],["self"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","","",510,[[["self"]],["bool"]]],[11,"ne","","",510,[[["self"]],["bool"]]],[11,"eq","std::num","",451,[[["parsefloaterror"],["self"]],["bool"]]],[11,"ne","","",451,[[["parsefloaterror"],["self"]],["bool"]]],[11,"eq","std","",508,[[["b"],["self"]],["bool"]]],[11,"ne","","",508,[[["b"],["self"]],["bool"]]],[11,"eq","","",530,[[["self"]],["bool"]]],[11,"eq","std::num","",452,[[["self"],["parseinterror"]],["bool"]]],[11,"ne","","",452,[[["self"],["parseinterror"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","std::num","",453,[[["self"],["tryfrominterror"]],["bool"]]],[11,"ne","","",453,[[["self"],["tryfrominterror"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","std::num","",458,[[["nonzeroi8"],["self"]],["bool"]]],[11,"ne","","",458,[[["nonzeroi8"],["self"]],["bool"]]],[11,"eq","std","",520,[[["i64"],["self"]],["bool"]]],[11,"ne","","",520,[[["i64"],["self"]],["bool"]]],[11,"eq","std::num","",155,[[["self"],["wrapping"]],["bool"]]],[11,"ne","","",155,[[["self"],["wrapping"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","std::num","",156,[[["self"],["fpcategory"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","std::ops","",83,[[["rangefrom"],["self"]],["bool"]]],[11,"ne","","",83,[[["rangefrom"],["self"]],["bool"]]],[11,"eq","","",84,[[["rangeto"],["self"]],["bool"]]],[11,"ne","","",84,[[["rangeto"],["self"]],["bool"]]],[11,"eq","std::fmt","",235,[[["error"],["self"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","std::option","",91,[[["option"],["self"]],["bool"]]],[11,"ne","","",91,[[["option"],["self"]],["bool"]]],[11,"eq","std::ops","",356,[[["self"],["rangeinclusive"]],["bool"]]],[11,"eq","std::num","",464,[[["nonzerou8"],["self"]],["bool"]]],[11,"ne","","",464,[[["nonzerou8"],["self"]],["bool"]]],[11,"eq","std","",513,[[["self"],["u8"]],["bool"]]],[11,"ne","","",513,[[["self"],["u8"]],["bool"]]],[11,"eq","","",531,[[["self"]],["bool"]]],[11,"ne","","",531,[[["self"]],["bool"]]],[11,"eq","","",528,[[["f32"],["self"]],["bool"]]],[11,"ne","","",528,[[["f32"],["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",512,[[["self"],["bool"]],["bool"]]],[11,"ne","","",512,[[["self"],["bool"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","std::ptr","",362,[[["self"],["nonnull"]],["bool"]]],[11,"eq","std::ops","",85,[[["bound"],["self"]],["bool"]]],[11,"ne","","",85,[[["bound"],["self"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",508,[[["b"],["self"]],["bool"]]],[11,"ne","","",508,[[["b"],["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",509,[[["str"],["self"]],["bool"]]],[11,"ne","","",509,[[["str"],["self"]],["bool"]]],[11,"eq","","",510,[[["self"]],["bool"]]],[11,"ne","","",510,[[["self"]],["bool"]]],[11,"eq","","",531,[[["self"]],["bool"]]],[11,"ne","","",531,[[["self"]],["bool"]]],[11,"eq","std::num","",457,[[["nonzeroi64"],["self"]],["bool"]]],[11,"ne","","",457,[[["nonzeroi64"],["self"]],["bool"]]],[11,"eq","std::char","",26,[[["self"],["unicodeversion"]],["bool"]]],[11,"ne","","",26,[[["self"],["unicodeversion"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","std::alloc","",504,[[["layouterr"],["self"]],["bool"]]],[11,"ne","","",504,[[["layouterr"],["self"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",532,[[["self"]],["bool"]]],[11,"ne","","",532,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",527,[[["self"]],["bool"]]],[11,"ne","","",527,[[["self"]],["bool"]]],[11,"eq","","",531,[[["self"]],["bool"]]],[11,"ne","","",531,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","std::char","",316,[[["self"],["parsecharerror"]],["bool"]]],[11,"ne","","",316,[[["self"],["parsecharerror"]],["bool"]]],[11,"eq","std","",531,[[["self"]],["bool"]]],[11,"ne","","",531,[[["self"]],["bool"]]],[11,"eq","","",522,[[["i8"],["self"]],["bool"]]],[11,"ne","","",522,[[["i8"],["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","std::alloc","",505,[[["allocerr"],["self"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","","",508,[[["b"],["self"]],["bool"]]],[11,"ne","","",508,[[["b"],["self"]],["bool"]]],[11,"eq","std::num","",463,[[["self"],["nonzerou64"]],["bool"]]],[11,"ne","","",463,[[["self"],["nonzerou64"]],["bool"]]],[11,"eq","std","",508,[[["b"],["self"]],["bool"]]],[11,"ne","","",508,[[["b"],["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","std::convert","",319,[[["self"],["infallible"]],["bool"]]],[11,"eq","std","",531,[[["self"]],["bool"]]],[11,"ne","","",531,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","std::task","",224,[[["self"],["poll"]],["bool"]]],[11,"ne","","",224,[[["self"],["poll"]],["bool"]]],[11,"eq","std::cmp","",29,[[["ordering"],["self"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",531,[[["self"]],["bool"]]],[11,"ne","","",531,[[["self"]],["bool"]]],[11,"eq","std::num","",462,[[["self"],["nonzerou32"]],["bool"]]],[11,"ne","","",462,[[["self"],["nonzerou32"]],["bool"]]],[11,"eq","std::alloc","",503,[[["self"],["layout"]],["bool"]]],[11,"ne","","",503,[[["self"],["layout"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","std::result","",93,[[["self"],["result"]],["bool"]]],[11,"ne","","",93,[[["self"],["result"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","","",525,[[["self"]],["bool"]]],[11,"eq","","",523,[[["self"],["i32"]],["bool"]]],[11,"ne","","",523,[[["self"],["i32"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",526,[[["self"],["char"]],["bool"]]],[11,"ne","","",526,[[["self"],["char"]],["bool"]]],[11,"eq","","",527,[[["self"]],["bool"]]],[11,"ne","","",527,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",518,[[["self"],["u128"]],["bool"]]],[11,"ne","","",518,[[["self"],["u128"]],["bool"]]],[11,"eq","","",511,[[["i128"],["self"]],["bool"]]],[11,"ne","","",511,[[["i128"],["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","std::any","",300,[[["typeid"],["self"]],["bool"]]],[11,"ne","","",300,[[["typeid"],["self"]],["bool"]]],[11,"eq","std","",516,[[["u16"],["self"]],["bool"]]],[11,"ne","","",516,[[["u16"],["self"]],["bool"]]],[11,"eq","std::char","",315,[[["chartryfromerror"],["self"]],["bool"]]],[11,"ne","","",315,[[["chartryfromerror"],["self"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","std::marker","",351,[[["phantompinned"],["self"]],["bool"]]],[11,"eq","std::num","",454,[[["self"],["nonzeroi128"]],["bool"]]],[11,"ne","","",454,[[["self"],["nonzeroi128"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","","",531,[[["self"]],["bool"]]],[11,"ne","","",531,[[["self"]],["bool"]]],[11,"eq","std::str::pattern","",19,[[["searchstep"],["self"]],["bool"]]],[11,"ne","","",19,[[["searchstep"],["self"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","std::num","",459,[[["nonzeroisize"],["self"]],["bool"]]],[11,"ne","","",459,[[["nonzeroisize"],["self"]],["bool"]]],[11,"eq","std","",524,[[["self"]],["bool"]]],[11,"eq","","",524,[[["self"]],["bool"]]],[11,"eq","std::num","",460,[[["self"],["nonzerou128"]],["bool"]]],[11,"ne","","",460,[[["self"],["nonzerou128"]],["bool"]]],[11,"eq","std","",527,[[["self"]],["bool"]]],[11,"ne","","",527,[[["self"]],["bool"]]],[11,"fmt","std::task","",498,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::sync::atomic","",480,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",515,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",286,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",322,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::ascii","",367,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",510,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",348,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::char","",312,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::time","",497,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",523,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",285,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",459,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::option","",91,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::cell","",307,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::result","",93,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::char","",311,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::ops","",87,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",340,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::fmt","",4,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",531,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",324,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",512,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",526,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",330,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::any","",24,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",290,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",289,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",525,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",287,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::ops","",83,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::ptr","",362,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",531,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::char","",317,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::any","",24,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::sync::atomic","",484,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::task","",499,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::char","",314,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::slice","",251,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::sync::atomic","",489,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",327,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",529,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",517,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::fmt","",236,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::array","",302,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str::pattern","",19,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",458,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",331,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::slice","",249,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",288,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",532,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",269,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::sync::atomic","",204,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::slice","",247,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",274,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::char","",315,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",328,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::cell","",305,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::result","",365,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",281,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",531,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",338,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",531,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",332,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",511,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::sync::atomic","",486,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",341,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",530,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",521,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",346,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",323,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::ffi","",436,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::cmp","",30,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::sync::atomic","",487,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",531,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",514,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",283,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::slice","",245,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",333,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::cell","",303,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::option","",357,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::result","",364,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::alloc","",503,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::slice","",252,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",343,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::ops","",356,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::option","",359,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",457,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",531,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",451,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",520,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::sync::atomic","",488,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::any","",24,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::sync::atomic","",482,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",452,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::convert","",319,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::slice","",246,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",335,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::sync::atomic","",483,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::pin","",361,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",157,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",531,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::slice","",263,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",454,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::hash","",321,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",276,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",345,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",342,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",270,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",325,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::ops","",355,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",155,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",531,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",518,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str::pattern","",264,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",522,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",284,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",337,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",271,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",344,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::slice","",248,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",456,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",282,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::cell","",304,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::ffi","",437,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::mem","",353,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::ops","",90,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::cell","",306,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",336,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",513,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::option","",358,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",278,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",464,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",339,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",519,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",509,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::slice","",259,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::sync::atomic","",485,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::slice","",257,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::char","",313,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::task","",501,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::option","",360,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",347,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::cell","",308,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::mem","",352,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::slice","",262,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::char","",310,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::slice","",254,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",275,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::array","",301,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::slice","",250,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",256,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",531,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::char","",316,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",268,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::ops","",82,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",349,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::slice","",258,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",279,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::slice","",261,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str::pattern","",265,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::alloc","",504,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::marker","",350,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::panic","",469,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",329,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::char","",318,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::slice","",255,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",508,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",462,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::cmp","",29,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::panic","",468,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",455,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::alloc","",506,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::slice","",260,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::marker","",351,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::task","",224,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",453,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",280,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",531,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::cell","",309,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",516,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::any","",300,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::slice","",253,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::result","",363,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",156,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",527,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",531,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",334,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",465,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::ops","",84,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::alloc","",505,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",273,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::ops","",85,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",531,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",460,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::char","",26,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::task","",500,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::fmt","",235,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::alloc","",231,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::sync::atomic","",478,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",481,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",528,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",525,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::ffi","",435,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str::pattern","",267,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",508,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",463,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str","",272,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",277,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::str::pattern","",266,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::iter","",326,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",461,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::mem","",354,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::sync::atomic","",479,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",524,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::hash","",320,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"neg","std","",515,[[]]],[11,"neg","std::num","",155,[[],[["u64"],["wrapping",["u64"]]]]],[11,"neg","std","",511,[[],["i128"]]],[11,"neg","std::num","",155,[[],[["wrapping",["i32"]],["i32"]]]],[11,"neg","std","",529,[[],["f64"]]],[11,"neg","std::num","",155,[[],[["wrapping",["usize"]],["usize"]]]],[11,"neg","","",155,[[],[["i128"],["wrapping",["i128"]]]]],[11,"neg","std","",520,[[],["i64"]]],[11,"neg","std::num","",155,[[],[["wrapping",["u8"]],["u8"]]]],[11,"neg","std","",529,[[]]],[11,"neg","std::num","",155,[[],[["u32"],["wrapping",["u32"]]]]],[11,"neg","","",155,[[],[["wrapping",["i8"]],["i8"]]]],[11,"neg","","",155,[[],[["wrapping",["u16"]],["u16"]]]],[11,"neg","std","",522,[[],["i8"]]],[11,"neg","std::num","",155,[[],[["wrapping",["i16"]],["i16"]]]],[11,"neg","","",155,[[],[["wrapping",["u128"]],["u128"]]]],[11,"neg","std","",514,[[],["i16"]]],[11,"neg","","",515,[[],["isize"]]],[11,"neg","","",514,[[]]],[11,"neg","std::num","",155,[[],[["i64"],["wrapping",["i64"]]]]],[11,"neg","std","",523,[[]]],[11,"neg","","",520,[[]]],[11,"neg","","",528,[[]]],[11,"neg","","",528,[[],["f32"]]],[11,"neg","","",523,[[],["i32"]]],[11,"neg","","",522,[[]]],[11,"neg","std::num","",155,[[],[["isize"],["wrapping",["isize"]]]]],[11,"neg","std","",511,[[]]],[11,"into_iter","","",510,[[],["itermut"]]],[11,"into_iter","","",510,[[],["iter"]]],[11,"into_iter","","",527,[[],["itermut"]]],[11,"into_iter","std::result","Returns a consuming iterator over the possibly contained…",93,[[],["intoiter"]]],[11,"into_iter","std::option","Returns a consuming iterator over the possibly contained…",91,[[],["intoiter"]]],[11,"into_iter","std","",527,[[],["iter"]]],[11,"div","","",516,[[["u16"]]]],[11,"div","","",515,[[["isize"]]]],[11,"div","","",521,[[["usize"]],["usize"]]],[11,"div","","",520,[[["i64"]]]],[11,"div","std::num","",155,[[["wrapping"]]]],[11,"div","std","",518,[[["u128"]]]],[11,"div","std::num","",155,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"div","std","",520,[[["i64"]],["i64"]]],[11,"div","std::num","",155,[[["wrapping"]]]],[11,"div","","",155,[[["wrapping"]]]],[11,"div","","",155,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"div","std","",523,[[["i32"]]]],[11,"div","std::num","",155,[[["wrapping"]]]],[11,"div","","",155,[[["wrapping"]]]],[11,"div","","",155,[[["wrapping",["u128"]],["u128"]],[["wrapping",["u128"]],["u128"]]]],[11,"div","","",155,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"div","std","",516,[[["u16"]]]],[11,"div","","",517,[[["u32"]]]],[11,"div","","",515,[[["isize"]]]],[11,"div","","",521,[[["usize"]]]],[11,"div","std::num","",155,[[["wrapping"]]]],[11,"div","std","",517,[[["u32"]]]],[11,"div","","",523,[[["i32"]],["i32"]]],[11,"div","","",511,[[["i128"]]]],[11,"div","","",528,[[["f32"]],["f32"]]],[11,"div","","",521,[[["usize"]]]],[11,"div","","",523,[[["i32"]]]],[11,"div","std::num","",155,[[["wrapping"]]]],[11,"div","std","",522,[[["i8"]]]],[11,"div","std::num","",155,[[["wrapping"]]]],[11,"div","std","",511,[[["i128"]],["i128"]]],[11,"div","","",513,[[["u8"]]]],[11,"div","","",522,[[["i8"]]]],[11,"div","","",518,[[["u128"]]]],[11,"div","","",511,[[["i128"]]]],[11,"div","","",522,[[["i8"]]]],[11,"div","","",516,[[["u16"]],["u16"]]],[11,"div","","",513,[[["u8"]],["u8"]]],[11,"div","std::num","",155,[[["u64"],["wrapping",["u64"]]],[["u64"],["wrapping",["u64"]]]]],[11,"div","std","",528,[[["f32"]]]],[11,"div","std::num","",155,[[["wrapping"]]]],[11,"div","std","",518,[[["u128"]],["u128"]]],[11,"div","","",514,[[["i16"]],["i16"]]],[11,"div","std::time","",497,[[["u32"]],["duration"]]],[11,"div","std","",528,[[["f32"]]]],[11,"div","","",520,[[["i64"]]]],[11,"div","std::num","",155,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"div","std","",518,[[["u128"]]]],[11,"div","","",519,[[["u64"]],["u64"]]],[11,"div","std::num","",155,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"div","std","",528,[[["f32"]]]],[11,"div","","",529,[[["f64"]]]],[11,"div","std::num","",155,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"div","std","",515,[[["isize"]]]],[11,"div","std::num","",155,[[["u32"],["wrapping",["u32"]]],[["u32"],["wrapping",["u32"]]]]],[11,"div","std","",511,[[["i128"]]]],[11,"div","std::num","",155,[[["wrapping"]]]],[11,"div","std","",519,[[["u64"]]]],[11,"div","","",514,[[["i16"]]]],[11,"div","std::num","",155,[[["wrapping"]]]],[11,"div","std","",515,[[["isize"]],["isize"]]],[11,"div","","",519,[[["u64"]]]],[11,"div","","",519,[[["u64"]]]],[11,"div","","",513,[[["u8"]]]],[11,"div","","",529,[[["f64"]]]],[11,"div","","",517,[[["u32"]],["u32"]]],[11,"div","","",513,[[["u8"]]]],[11,"div","std::num","",155,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"div","std","",529,[[["f64"]]]],[11,"div","","",523,[[["i32"]]]],[11,"div","","",516,[[["u16"]]]],[11,"div","std::num","",155,[[["i128"],["wrapping",["i128"]]],[["i128"],["wrapping",["i128"]]]]],[11,"div","std","",521,[[["usize"]]]],[11,"div","","",529,[[["f64"]],["f64"]]],[11,"div","","",520,[[["i64"]]]],[11,"div","","",514,[[["i16"]]]],[11,"div","","",522,[[["i8"]],["i8"]]],[11,"div","","",514,[[["i16"]]]],[11,"div","","",517,[[["u32"]]]],[11,"div","std::num","",155,[[["wrapping"]]]],[11,"div","","",155,[[["wrapping",["u16"]],["u16"]],[["wrapping",["u16"]],["u16"]]]],[11,"borrow","std","",508,[[["self"]],["t"]]],[11,"borrow","","",527,[[["self"]]]],[11,"borrow","","",508,[[["self"]],["t"]]],[11,"bitand","","",515,[[["isize"]]]],[11,"bitand","","",516,[[["u16"]]]],[11,"bitand","std::num","",155,[[["wrapping"]]]],[11,"bitand","","",155,[[["i128"],["wrapping",["i128"]]],[["i128"],["wrapping",["i128"]]]]],[11,"bitand","","",155,[[["wrapping",["u128"]],["u128"]],[["wrapping",["u128"]],["u128"]]]],[11,"bitand","","",155,[[["wrapping"]]]],[11,"bitand","","",155,[[["wrapping"]]]],[11,"bitand","","",155,[[["wrapping"]]]],[11,"bitand","std","",518,[[["u128"]],["u128"]]],[11,"bitand","","",511,[[["i128"]]]],[11,"bitand","std::num","",155,[[["wrapping"]]]],[11,"bitand","","",155,[[["wrapping"]]]],[11,"bitand","","",155,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"bitand","std","",511,[[["i128"]]]],[11,"bitand","std::num","",155,[[["u32"],["wrapping",["u32"]]],[["u32"],["wrapping",["u32"]]]]],[11,"bitand","std","",517,[[["u32"]]]],[11,"bitand","","",515,[[["isize"]],["isize"]]],[11,"bitand","std::num","",155,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"bitand","std","",521,[[["usize"]]]],[11,"bitand","","",519,[[["u64"]]]],[11,"bitand","","",519,[[["u64"]]]],[11,"bitand","","",512,[[["bool"]]]],[11,"bitand","","",513,[[["u8"]],["u8"]]],[11,"bitand","","",521,[[["usize"]],["usize"]]],[11,"bitand","","",515,[[["isize"]]]],[11,"bitand","","",519,[[["u64"]],["u64"]]],[11,"bitand","","",513,[[["u8"]]]],[11,"bitand","","",520,[[["i64"]]]],[11,"bitand","","",520,[[["i64"]]]],[11,"bitand","","",512,[[["bool"]],["bool"]]],[11,"bitand","","",523,[[["i32"]],["i32"]]],[11,"bitand","","",518,[[["u128"]]]],[11,"bitand","","",514,[[["i16"]],["i16"]]],[11,"bitand","std::num","",155,[[["wrapping"]]]],[11,"bitand","std","",522,[[["i8"]]]],[11,"bitand","","",511,[[["i128"]],["i128"]]],[11,"bitand","","",515,[[["isize"]]]],[11,"bitand","","",523,[[["i32"]]]],[11,"bitand","","",512,[[["bool"]]]],[11,"bitand","","",521,[[["usize"]]]],[11,"bitand","","",513,[[["u8"]]]],[11,"bitand","std::num","",155,[[["u64"],["wrapping",["u64"]]],[["u64"],["wrapping",["u64"]]]]],[11,"bitand","std","",523,[[["i32"]]]],[11,"bitand","std::num","",155,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"bitand","std","",518,[[["u128"]]]],[11,"bitand","","",520,[[["i64"]]]],[11,"bitand","","",522,[[["i8"]]]],[11,"bitand","std::num","",155,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"bitand","std","",513,[[["u8"]]]],[11,"bitand","","",511,[[["i128"]]]],[11,"bitand","std::num","",155,[[["wrapping"]]]],[11,"bitand","std","",514,[[["i16"]]]],[11,"bitand","","",522,[[["i8"]],["i8"]]],[11,"bitand","std::num","",155,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"bitand","std","",514,[[["i16"]]]],[11,"bitand","","",518,[[["u128"]]]],[11,"bitand","std::num","",155,[[["wrapping"]]]],[11,"bitand","std","",517,[[["u32"]],["u32"]]],[11,"bitand","","",516,[[["u16"]]]],[11,"bitand","","",520,[[["i64"]],["i64"]]],[11,"bitand","","",516,[[["u16"]]]],[11,"bitand","","",517,[[["u32"]]]],[11,"bitand","","",523,[[["i32"]]]],[11,"bitand","std::num","",155,[[["wrapping"]]]],[11,"bitand","std","",522,[[["i8"]]]],[11,"bitand","std::num","",155,[[["wrapping",["u16"]],["u16"]],[["wrapping",["u16"]],["u16"]]]],[11,"bitand","","",155,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"bitand","std","",517,[[["u32"]]]],[11,"bitand","std::num","",155,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"bitand","std","",521,[[["usize"]]]],[11,"bitand","","",519,[[["u64"]]]],[11,"bitand","","",516,[[["u16"]],["u16"]]],[11,"bitand","","",512,[[["bool"]]]],[11,"bitand","std::num","",155,[[["wrapping"]]]],[11,"bitand","","",155,[[["wrapping"]]]],[11,"bitand","std","",514,[[["i16"]]]],[11,"fmt","","",528,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",529,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",508,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",508,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"poll","","",508,[[["f"],["pin"],["context"]],["poll"]]],[11,"poll","std::pin","",361,[[["pin",["pin"]],["pin"],["context"]],["poll"]]],[11,"next_back","std::iter","",332,[[["self"]],["option"]]],[11,"nth_back","","",332,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",332,[[["self"],["acc"],["f"]],["r"]]],[11,"next_back","","",322,[[["self"]],["option"]]],[11,"next_back","","",335,[[["self"]],["option"]]],[11,"nth_back","","",335,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",335,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",335,[[["acc"],["fold"]],["acc"]]],[11,"next_back","std::slice","",250,[[["self"]],["option"]]],[11,"next_back","std::str","",284,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","std::array","",302,[[["self"]],["option"]]],[11,"next_back","std::str","",290,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","std::iter","",341,[[["self"]],["option"]]],[11,"try_rfold","","",341,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",341,[[["acc"],["fold"]],["acc"]]],[11,"next_back","","",330,[[["self"]],["option"]]],[11,"try_rfold","","",330,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",330,[[["acc"],["f"]],["acc"]]],[11,"next_back","std::option","",357,[[["self"]],[["option"],["a"]]]],[11,"next_back","std::ops","",356,[[["self"]],["option"]]],[11,"nth_back","","",356,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",356,[[["self"],["b"],["f"]],["r"]]],[11,"next_back","std::iter","",333,[[["self"]],["option"]]],[11,"nth_back","","",333,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",333,[[["self"],["acc"],["f"]],["r"]]],[11,"rfold","","",333,[[["acc"],["f"]],["acc"]]],[11,"next_back","std::result","",365,[[["self"]],["option"]]],[11,"next_back","std::slice","",254,[[["self"]],["option"]]],[11,"nth_back","","",254,[[["self"],["usize"]],["option"]]],[11,"next_back","std::str","",280,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","std::iter","",329,[[["self"]],["option"]]],[11,"try_rfold","","",329,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",329,[[["acc"],["f"]],["acc"]]],[11,"next_back","","",348,[[["self"]],["option"]]],[11,"nth_back","","",348,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",348,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",348,[[["acc"],["fold"]],["acc"]]],[11,"next_back","","",337,[[["self"]],["option"]]],[11,"try_rfold","","",337,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",337,[[["acc"],["fold"]],["acc"]]],[11,"next_back","std::ops","",82,[[["self"]],["option"]]],[11,"nth_back","","",82,[[["self"],["usize"]],["option"]]],[11,"next_back","std::iter","",349,[[["self"]],["option"]]],[11,"try_rfold","","",349,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",349,[[["acc"],["fold"]],["acc"]]],[11,"next_back","std::str","",270,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","std::iter","",344,[[["self"]],["option"]]],[11,"nth_back","","",344,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",344,[[["self"],["acc"],["fold"]],["r"]]],[11,"next_back","std::result","",364,[[["self"]],[["option"],["t"]]]],[11,"next_back","std::str","",285,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","std::option","",359,[[["self"]],["option"]]],[11,"next_back","std::str","",283,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","","",282,[[["self"]],["option"]]],[11,"next_back","std::iter","",324,[[["self"]],["option"]]],[11,"next_back","","",348,[[["self"]],["option"]]],[11,"nth_back","","",348,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",348,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",348,[[["acc"],["fold"]],["acc"]]],[11,"next_back","std::slice","",245,[[["self"]],["option"]]],[11,"nth_back","","",245,[[["self"],["usize"]],["option"]]],[11,"next_back","std::option","",358,[[["self"]],[["option"],["a"]]]],[11,"next_back","std::slice","",249,[[["self"]],["option"]]],[11,"nth_back","","",249,[[["self"],["usize"]],["option"]]],[11,"next_back","","",253,[[["self"]],[["option"],["t"]]]],[11,"nth_back","","",253,[[["self"],["usize"]],[["option"],["t"]]]],[11,"next_back","std::str","",279,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","","",289,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","","",273,[[["self"]],[["option",["char"]],["char"]]]],[11,"next_back","","",272,[[["self"]],["option"]]],[11,"next_back","std::slice","",248,[[["self"]],["option"]]],[11,"nth_back","","",248,[[["self"],["usize"]],["option"]]],[11,"next_back","std::iter","",331,[[["self"]],["option"]]],[11,"try_rfold","","",331,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",331,[[["acc"],["fold"]],["acc"]]],[11,"next_back","","",325,[[["self"]],["option"]]],[11,"next_back","std::str","",281,[[["self"]],["option"]]],[11,"next_back","std::iter","",342,[[["self"]],["option"]]],[11,"try_rfold","","",342,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",342,[[["acc"],["fold"]],["acc"]]],[11,"next_back","std::ascii","",367,[[["self"]],[["u8"],["option",["u8"]]]]],[11,"next_back","std","",508,[[["self"]],["option"]]],[11,"nth_back","","",508,[[["self"],["usize"]],["option"]]],[11,"next_back","std::iter","",346,[[["self"]],["option"]]],[11,"nth_back","","",346,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",346,[[["self"],["acc"],["fold"]],["r"]]],[11,"next_back","std::str","",269,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","std::slice","",255,[[["self"]],["option"]]],[11,"nth_back","","",255,[[["self"],["usize"]],["option"]]],[11,"next_back","std::iter","",339,[[["self"]],["option"]]],[11,"nth_back","","",339,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",339,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",339,[[["acc"],["f"]],["acc"]]],[11,"rfind","","",339,[[["self"],["p"]],["option"]]],[11,"next_back","std::slice","",247,[[["self"]],["option"]]],[11,"nth_back","","",247,[[["self"],["usize"]],["option"]]],[11,"next_back","","",251,[[["self"]],["option"]]],[11,"next_back","std::str","",286,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","std::result","",363,[[["self"]],[["option"],["t"]]]],[11,"next_back","std::iter","",340,[[["self"]],["option"]]],[11,"next_back","std::slice","",246,[[["self"]],["option"]]],[11,"nth_back","","",246,[[["self"],["usize"]],["option"]]],[11,"next_back","","",256,[[["self"]],["option"]]],[11,"nth_back","","",256,[[["self"],["usize"]],["option"]]],[11,"next_back","std::iter","",326,[[["self"]],["option"]]],[11,"next_back","","",336,[[["self"]],["option"]]],[11,"try_rfold","","",336,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",336,[[["acc"],["fold"]],["acc"]]],[11,"next_back","std::slice","",252,[[["self"]],[["option"],["t"]]]],[11,"nth_back","","",252,[[["self"],["usize"]],[["option"],["t"]]]],[11,"next_back","","",258,[[["self"]],["option"]]],[11,"next_back","","",257,[[["self"]],["option"]]],[11,"nth_back","","",257,[[["self"],["usize"]],["option"]]],[11,"next_back","","",259,[[["self"]],["option"]]],[11,"next_back","std::str","",271,[[["self"]],[["u8"],["option",["u8"]]]]],[11,"nth_back","","",271,[[["self"],["usize"]],["option"]]],[11,"rfind","","",271,[[["self"],["p"]],["option"]]],[11,"next_back","std::iter","",338,[[["self"]],["option"]]],[11,"try_rfold","","",338,[[["self"],["acc"],["g"]],["r"]]],[11,"rfold","","",338,[[["acc"],["g"]],["acc"]]],[11,"fmt","std::num","",456,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",458,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",522,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",516,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",519,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",514,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",461,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",155,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",465,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",508,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",523,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",521,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",508,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",457,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",513,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",454,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",515,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",517,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",460,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",464,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",462,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",511,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",520,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",455,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",463,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",459,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",518,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"bitor_assign","std::num","",155,[[["wrapping",["u128"]],["self"],["u128"]]]],[11,"bitor_assign","std","",520,[[["i64"],["self"]]]],[11,"bitor_assign","","",519,[[["self"],["u64"]]]],[11,"bitor_assign","","",513,[[["self"],["u8"]]]],[11,"bitor_assign","","",522,[[["self"],["i8"]]]],[11,"bitor_assign","","",521,[[["self"],["usize"]]]],[11,"bitor_assign","","",514,[[["self"],["i16"]]]],[11,"bitor_assign","","",512,[[["self"],["bool"]]]],[11,"bitor_assign","std::num","",155,[[["self"],["u32"],["wrapping",["u32"]]]]],[11,"bitor_assign","std","",518,[[["self"],["u128"]]]],[11,"bitor_assign","","",520,[[["i64"],["self"]]]],[11,"bitor_assign","std::num","",155,[[["wrapping"],["self"]]]],[11,"bitor_assign","std","",517,[[["self"],["u32"]]]],[11,"bitor_assign","","",521,[[["self"],["usize"]]]],[11,"bitor_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",155,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",155,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",155,[[["self"],["u64"],["wrapping",["u64"]]]]],[11,"bitor_assign","","",155,[[["self"],["wrapping"]]]],[11,"bitor_assign","std","",515,[[["isize"],["self"]]]],[11,"bitor_assign","std::num","",155,[[["self"],["wrapping",["u8"]],["u8"]]]],[11,"bitor_assign","std","",511,[[["self"],["i128"]]]],[11,"bitor_assign","","",522,[[["self"],["i8"]]]],[11,"bitor_assign","std::num","",155,[[["wrapping"],["self"]]]],[11,"bitor_assign","","",155,[[["wrapping",["i8"]],["self"],["i8"]]]],[11,"bitor_assign","std","",523,[[["self"],["i32"]]]],[11,"bitor_assign","","",516,[[["u16"],["self"]]]],[11,"bitor_assign","","",511,[[["self"],["i128"]]]],[11,"bitor_assign","","",514,[[["self"],["i16"]]]],[11,"bitor_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",155,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",155,[[["self"],["wrapping"]]]],[11,"bitor_assign","std","",516,[[["u16"],["self"]]]],[11,"bitor_assign","","",517,[[["self"],["u32"]]]],[11,"bitor_assign","","",512,[[["self"],["bool"]]]],[11,"bitor_assign","","",518,[[["self"],["u128"]]]],[11,"bitor_assign","","",513,[[["self"],["u8"]]]],[11,"bitor_assign","","",515,[[["isize"],["self"]]]],[11,"bitor_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",155,[[["self"],["wrapping",["i32"]],["i32"]]]],[11,"bitor_assign","","",155,[[["wrapping",["usize"]],["self"],["usize"]]]],[11,"bitor_assign","","",155,[[["self"],["i128"],["wrapping",["i128"]]]]],[11,"bitor_assign","std","",523,[[["self"],["i32"]]]],[11,"bitor_assign","std::num","",155,[[["wrapping",["u16"]],["self"],["u16"]]]],[11,"bitor_assign","std","",519,[[["self"],["u64"]]]],[11,"bitor_assign","std::num","",155,[[["wrapping"],["self"]]]],[11,"bitor_assign","","",155,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"bitor_assign","","",155,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",155,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"bitor_assign","","",155,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"cmp","std","",519,[[["self"],["u64"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",522,[[["i8"],["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","std::num","",460,[[["self"],["nonzerou128"]],["ordering"]]],[11,"cmp","std","",531,[[["self"]],["ordering"]]],[11,"cmp","std::cell","Panics",304,[[["refcell"],["self"]],["ordering"]]],[11,"cmp","std","",517,[[["u32"],["self"]],["ordering"]]],[11,"cmp","","",511,[[["i128"],["self"]],["ordering"]]],[11,"cmp","std::cell","",303,[[["cell"],["self"]],["ordering"]]],[11,"cmp","std","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",531,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",523,[[["self"],["i32"]],["ordering"]]],[11,"cmp","","",532,[[["self"]],["ordering"]]],[11,"cmp","std::num","",454,[[["self"],["nonzeroi128"]],["ordering"]]],[11,"cmp","std","",527,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","std::convert","",319,[[["self"],["infallible"]],["ordering"]]],[11,"cmp","std","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","std::time","",497,[[["duration"],["self"]],["ordering"]]],[11,"cmp","std","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","std::option","",91,[[["option"],["self"]],["ordering"]]],[11,"cmp","std::num","",458,[[["nonzeroi8"],["self"]],["ordering"]]],[11,"cmp","std","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",512,[[["self"],["bool"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",510,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",531,[[["self"]],["ordering"]]],[11,"cmp","std::result","",93,[[["self"],["result"]],["ordering"]]],[11,"cmp","std","",524,[[["self"]],["ordering"]]],[11,"cmp","std::num","",455,[[["self"],["nonzeroi16"]],["ordering"]]],[11,"cmp","std","",524,[[["self"]],["ordering"]]],[11,"cmp","std::option","",360,[[["noneerror"],["self"]],["ordering"]]],[11,"cmp","std","",524,[[["self"]],["ordering"]]],[11,"cmp","","",530,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","std::num","",463,[[["self"],["nonzerou64"]],["ordering"]]],[11,"cmp","std::ops","",90,[[["generatorstate"],["self"]],["ordering"]]],[11,"cmp","std","",524,[[["self"]],["ordering"]]],[11,"cmp","std::num","",155,[[["self"],["wrapping"]],["ordering"]]],[11,"cmp","","",459,[[["nonzeroisize"],["self"]],["ordering"]]],[11,"cmp","std::mem","",353,[[["manuallydrop"],["self"]],["ordering"]]],[11,"cmp","std","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","std::num","",456,[[["nonzeroi32"],["self"]],["ordering"]]],[11,"cmp","std::fmt","",235,[[["error"],["self"]],["ordering"]]],[11,"cmp","std","",521,[[["self"],["usize"]],["ordering"]]],[11,"cmp","","",513,[[["self"],["u8"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","std::ptr","",362,[[["self"],["nonnull"]],["ordering"]]],[11,"cmp","std","",524,[[["self"]],["ordering"]]],[11,"cmp","","",531,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",514,[[["self"],["i16"]],["ordering"]]],[11,"cmp","","",525,[[["self"]],["ordering"]]],[11,"cmp","std::num","",457,[[["nonzeroi64"],["self"]],["ordering"]]],[11,"cmp","","",465,[[["self"],["nonzerousize"]],["ordering"]]],[11,"cmp","","",462,[[["self"],["nonzerou32"]],["ordering"]]],[11,"cmp","std","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",531,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",508,[[["self"],["a"]],["ordering"]]],[11,"cmp","std::num","",464,[[["nonzerou8"],["self"]],["ordering"]]],[11,"cmp","std","",531,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",508,[[["a"],["self"]],["ordering"]]],[11,"cmp","","",509,[[["str"],["self"]],["ordering"]]],[11,"cmp","","",531,[[["self"]],["ordering"]]],[11,"cmp","","",516,[[["u16"],["self"]],["ordering"]]],[11,"cmp","std::num","",461,[[["nonzerou16"],["self"]],["ordering"]]],[11,"cmp","std","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",531,[[["self"]],["ordering"]]],[11,"cmp","std::cmp","",29,[[["ordering"],["self"]],["ordering"]]],[11,"cmp","std","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","std::task","",224,[[["self"],["poll"]],["ordering"]]],[11,"cmp","std","",531,[[["self"]],["ordering"]]],[11,"cmp","","",531,[[["self"]],["ordering"]]],[11,"cmp","","",531,[[["self"]],["ordering"]]],[11,"cmp","","",515,[[["isize"],["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","std::pin","",361,[[["pin"],["self"]],["ordering"]]],[11,"cmp","std","",524,[[["self"]],["ordering"]]],[11,"cmp","std::marker","",350,[[["self"],["phantomdata"]],["ordering"]]],[11,"cmp","std","",524,[[["self"]],["ordering"]]],[11,"cmp","","",531,[[["self"]],["ordering"]]],[11,"cmp","","",526,[[["self"],["char"]],["ordering"]]],[11,"cmp","std::any","",300,[[["typeid"],["self"]],["ordering"]]],[11,"cmp","std::char","",26,[[["self"],["unicodeversion"]],["ordering"]]],[11,"cmp","std","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",518,[[["self"],["u128"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",525,[[["self"]],["ordering"]]],[11,"cmp","std::marker","",351,[[["phantompinned"],["self"]],["ordering"]]],[11,"cmp","std","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","std::cmp","",30,[[["reverse"],["self"]],["ordering"]]],[11,"cmp","std","",524,[[["self"]],["ordering"]]],[11,"cmp","","",524,[[["self"]],["ordering"]]],[11,"cmp","","",520,[[["i64"],["self"]],["ordering"]]],[11,"mul","","",522,[[["i8"]]]],[11,"mul","std::num","",155,[[["wrapping"]]]],[11,"mul","std","",516,[[["u16"]],["u16"]]],[11,"mul","","",514,[[["i16"]]]],[11,"mul","","",517,[[["u32"]]]],[11,"mul","","",516,[[["u16"]]]],[11,"mul","","",511,[[["i128"]]]],[11,"mul","","",528,[[["f32"]]]],[11,"mul","","",513,[[["u8"]]]],[11,"mul","","",514,[[["i16"]]]],[11,"mul","","",518,[[["u128"]]]],[11,"mul","","",515,[[["isize"]]]],[11,"mul","","",523,[[["i32"]],["i32"]]],[11,"mul","","",511,[[["i128"]]]],[11,"mul","","",513,[[["u8"]],["u8"]]],[11,"mul","","",522,[[["i8"]]]],[11,"mul","","",523,[[["i32"]]]],[11,"mul","","",518,[[["u128"]]]],[11,"mul","","",514,[[["i16"]],["i16"]]],[11,"mul","","",517,[[["u32"]]]],[11,"mul","","",517,[[["duration"]],["duration"]]],[11,"mul","","",521,[[["usize"]],["usize"]]],[11,"mul","std::num","",155,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"mul","std","",519,[[["u64"]],["u64"]]],[11,"mul","std::num","",155,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"mul","std","",519,[[["u64"]]]],[11,"mul","","",515,[[["isize"]],["isize"]]],[11,"mul","","",529,[[["f64"]],["f64"]]],[11,"mul","","",519,[[["u64"]]]],[11,"mul","std::num","",155,[[["u64"],["wrapping",["u64"]]],[["u64"],["wrapping",["u64"]]]]],[11,"mul","std","",521,[[["usize"]]]],[11,"mul","","",528,[[["f32"]]]],[11,"mul","","",518,[[["u128"]],["u128"]]],[11,"mul","std::num","",155,[[["wrapping"]]]],[11,"mul","","",155,[[["wrapping",["u128"]],["u128"]],[["wrapping",["u128"]],["u128"]]]],[11,"mul","std","",523,[[["i32"]]]],[11,"mul","std::num","",155,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"mul","std","",515,[[["isize"]]]],[11,"mul","std::num","",155,[[["wrapping"]]]],[11,"mul","","",155,[[["wrapping"]]]],[11,"mul","","",155,[[["wrapping"]]]],[11,"mul","","",155,[[["wrapping"]]]],[11,"mul","std","",517,[[["u32"]],["u32"]]],[11,"mul","","",517,[[["u32"]]]],[11,"mul","","",516,[[["u16"]]]],[11,"mul","","",511,[[["i128"]],["i128"]]],[11,"mul","","",529,[[["f64"]]]],[11,"mul","std::num","",155,[[["wrapping"]]]],[11,"mul","std","",520,[[["i64"]]]],[11,"mul","","",520,[[["i64"]]]],[11,"mul","","",519,[[["u64"]]]],[11,"mul","","",513,[[["u8"]]]],[11,"mul","std::num","",155,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"mul","","",155,[[["wrapping"]]]],[11,"mul","","",155,[[["wrapping"]]]],[11,"mul","std","",521,[[["usize"]]]],[11,"mul","","",522,[[["i8"]]]],[11,"mul","std::num","",155,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"mul","std","",515,[[["isize"]]]],[11,"mul","","",528,[[["f32"]]]],[11,"mul","","",523,[[["i32"]]]],[11,"mul","","",529,[[["f64"]]]],[11,"mul","","",516,[[["u16"]]]],[11,"mul","std::time","",497,[[["u32"]],["duration"]]],[11,"mul","std","",522,[[["i8"]],["i8"]]],[11,"mul","","",529,[[["f64"]]]],[11,"mul","","",520,[[["i64"]],["i64"]]],[11,"mul","std::num","",155,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"mul","","",155,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"mul","std","",511,[[["i128"]]]],[11,"mul","std::num","",155,[[["wrapping"]]]],[11,"mul","std","",528,[[["f32"]],["f32"]]],[11,"mul","","",521,[[["usize"]]]],[11,"mul","","",518,[[["u128"]]]],[11,"mul","","",513,[[["u8"]]]],[11,"mul","std::num","",155,[[["wrapping",["u16"]],["u16"]],[["wrapping",["u16"]],["u16"]]]],[11,"mul","","",155,[[["u32"],["wrapping",["u32"]]],[["u32"],["wrapping",["u32"]]]]],[11,"mul","","",155,[[["wrapping"]]]],[11,"mul","","",155,[[["i128"],["wrapping",["i128"]]],[["i128"],["wrapping",["i128"]]]]],[11,"mul","std","",514,[[["i16"]]]],[11,"mul","","",520,[[["i64"]]]],[11,"mul","std::num","",155,[[["wrapping"]]]],[11,"from_str","std","",521,[[["str"]],[["parseinterror"],["result",["usize","parseinterror"]],["usize"]]]],[11,"from_str","","",516,[[["str"]],[["u16"],["parseinterror"],["result",["u16","parseinterror"]]]]],[11,"from_str","","",517,[[["str"]],[["result",["u32","parseinterror"]],["u32"],["parseinterror"]]]],[11,"from_str","std::num","",463,[[["str"]],[["nonzerou64"],["result",["nonzerou64"]]]]],[11,"from_str","","",464,[[["str"]],[["nonzerou8"],["result",["nonzerou8"]]]]],[11,"from_str","","",454,[[["str"]],[["nonzeroi128"],["result",["nonzeroi128"]]]]],[11,"from_str","std","",511,[[["str"]],[["result",["i128","parseinterror"]],["i128"],["parseinterror"]]]],[11,"from_str","","",519,[[["str"]],[["result",["u64","parseinterror"]],["parseinterror"],["u64"]]]],[11,"from_str","std::num","",465,[[["str"]],[["result",["nonzerousize"]],["nonzerousize"]]]],[11,"from_str","std","",513,[[["str"]],[["u8"],["parseinterror"],["result",["u8","parseinterror"]]]]],[11,"from_str","","",526,[[["str"]],[["char"],["result",["char"]]]]],[11,"from_str","","",522,[[["str"]],[["i8"],["parseinterror"],["result",["i8","parseinterror"]]]]],[11,"from_str","std::num","",461,[[["str"]],[["result",["nonzerou16"]],["nonzerou16"]]]],[11,"from_str","","",458,[[["str"]],[["result",["nonzeroi8"]],["nonzeroi8"]]]],[11,"from_str","std","",523,[[["str"]],[["result",["i32","parseinterror"]],["parseinterror"],["i32"]]]],[11,"from_str","std::num","",459,[[["str"]],[["result",["nonzeroisize"]],["nonzeroisize"]]]],[11,"from_str","std","Parse a `bool` from a string.",512,[[["str"]],[["result",["bool","parseboolerror"]],["parseboolerror"],["bool"]]]],[11,"from_str","","",514,[[["str"]],[["parseinterror"],["i16"],["result",["i16","parseinterror"]]]]],[11,"from_str","std::num","",456,[[["str"]],[["nonzeroi32"],["result",["nonzeroi32"]]]]],[11,"from_str","std","Converts a string in base 10 to a float. Accepts an…",528,[[["str"]],[["result",["f32","parsefloaterror"]],["f32"],["parsefloaterror"]]]],[11,"from_str","std::num","",457,[[["str"]],[["result",["nonzeroi64"]],["nonzeroi64"]]]],[11,"from_str","std","",515,[[["str"]],[["isize"],["parseinterror"],["result",["isize","parseinterror"]]]]],[11,"from_str","","Converts a string in base 10 to a float. Accepts an…",529,[[["str"]],[["f64"],["result",["f64","parsefloaterror"]],["parsefloaterror"]]]],[11,"from_str","","",520,[[["str"]],[["i64"],["result",["i64","parseinterror"]],["parseinterror"]]]],[11,"from_str","","",518,[[["str"]],[["result",["u128","parseinterror"]],["parseinterror"],["u128"]]]],[11,"from_str","std::num","",455,[[["str"]],[["result",["nonzeroi16"]],["nonzeroi16"]]]],[11,"from_str","","",462,[[["str"]],[["result",["nonzerou32"]],["nonzerou32"]]]],[11,"from_str","","",460,[[["str"]],[["result",["nonzerou128"]],["nonzerou128"]]]],[11,"mul_assign","","",155,[[["wrapping"],["self"]]]],[11,"mul_assign","","",155,[[["self"],["wrapping"]]]],[11,"mul_assign","","",155,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"mul_assign","","",155,[[["wrapping",["u128"]],["self"],["u128"]]]],[11,"mul_assign","","",155,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"mul_assign","","",155,[[["wrapping",["i8"]],["self"],["i8"]]]],[11,"mul_assign","","",155,[[["self"],["wrapping"]]]],[11,"mul_assign","std::time","",497,[[["self"],["u32"]]]],[11,"mul_assign","std","",511,[[["self"],["i128"]]]],[11,"mul_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"mul_assign","std","",521,[[["self"],["usize"]]]],[11,"mul_assign","","",517,[[["self"],["u32"]]]],[11,"mul_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"mul_assign","","",155,[[["wrapping"],["self"]]]],[11,"mul_assign","std","",528,[[["f32"],["self"]]]],[11,"mul_assign","std::num","",155,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"mul_assign","","",155,[[["wrapping",["usize"]],["self"],["usize"]]]],[11,"mul_assign","std","",511,[[["self"],["i128"]]]],[11,"mul_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"mul_assign","std","",516,[[["u16"],["self"]]]],[11,"mul_assign","std::num","",155,[[["wrapping",["u16"]],["self"],["u16"]]]],[11,"mul_assign","std","",520,[[["i64"],["self"]]]],[11,"mul_assign","","",521,[[["self"],["usize"]]]],[11,"mul_assign","std::num","",155,[[["wrapping"],["self"]]]],[11,"mul_assign","","",155,[[["self"],["i128"],["wrapping",["i128"]]]]],[11,"mul_assign","std","",518,[[["self"],["u128"]]]],[11,"mul_assign","","",522,[[["self"],["i8"]]]],[11,"mul_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"mul_assign","std","",518,[[["self"],["u128"]]]],[11,"mul_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"mul_assign","std","",513,[[["self"],["u8"]]]],[11,"mul_assign","","",516,[[["u16"],["self"]]]],[11,"mul_assign","","",523,[[["self"],["i32"]]]],[11,"mul_assign","","",517,[[["self"],["u32"]]]],[11,"mul_assign","","",523,[[["self"],["i32"]]]],[11,"mul_assign","","",522,[[["self"],["i8"]]]],[11,"mul_assign","","",515,[[["isize"],["self"]]]],[11,"mul_assign","","",514,[[["self"],["i16"]]]],[11,"mul_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"mul_assign","","",155,[[["self"],["wrapping",["i32"]],["i32"]]]],[11,"mul_assign","","",155,[[["self"],["wrapping",["u8"]],["u8"]]]],[11,"mul_assign","std","",528,[[["f32"],["self"]]]],[11,"mul_assign","","",513,[[["self"],["u8"]]]],[11,"mul_assign","","",520,[[["i64"],["self"]]]],[11,"mul_assign","std::num","",155,[[["self"],["u64"],["wrapping",["u64"]]]]],[11,"mul_assign","std","",519,[[["self"],["u64"]]]],[11,"mul_assign","","",515,[[["isize"],["self"]]]],[11,"mul_assign","","",529,[[["self"],["f64"]]]],[11,"mul_assign","","",529,[[["self"],["f64"]]]],[11,"mul_assign","","",519,[[["self"],["u64"]]]],[11,"mul_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"mul_assign","std","",514,[[["self"],["i16"]]]],[11,"mul_assign","std::num","",155,[[["self"],["u32"],["wrapping",["u32"]]]]],[11,"deref","std::mem","",353,[[["self"]],["t"]]],[11,"deref","std","",508,[[["self"]],["t"]]],[11,"deref","","",508,[[["self"]],["t"]]],[11,"deref","std::pin","",361,[[["self"]]]],[11,"deref","std::ffi","",436,[[["self"]],["valistimpl"]]],[11,"deref","std::cell","",308,[[["self"]],["t"]]],[11,"deref","","",307,[[["self"]],["t"]]],[11,"as_ref","std","",508,[[["self"]],["u"]]],[11,"as_ref","","",527,[[["self"]]]],[11,"as_ref","std::slice","",252,[[["self"]]]],[11,"as_ref","std","",508,[[["self"]],["u"]]],[11,"as_ref","","",509,[[["self"]]]],[11,"as_ref","","",510,[[["self"]]]],[11,"as_ref","","",509,[[["self"]],["str"]]],[11,"hash","std::num","",458,[[["self"],["__h"]]]],[11,"hash","std","",524,[[["self"],["hh"]]]],[11,"hash","std::any","",300,[[["self"],["__h"]]]],[11,"hash","std","",524,[[["self"],["hh"]]]],[11,"hash","","",531,[[["s"],["self"]]]],[11,"hash","","",527,[[["self"],["h"]]]],[11,"hash","std::ops","",83,[[["self"],["__h"]]]],[11,"hash","std","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",531,[[["s"],["self"]]]],[11,"hash","std::option","",91,[[["self"],["__h"]]]],[11,"hash","std::mem","",352,[[["self"],["h"]]]],[11,"hash","std::num","",454,[[["self"],["__h"]]]],[11,"hash","std","",531,[[["s"],["self"]]]],[11,"hash","","",512,[[["self"],["h"]]]],[11,"hash","","",516,[[["self"],["h"]]]],[11,"hash_slice","","",516,[[["h"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","std::time","",497,[[["self"],["__h"]]]],[11,"hash","std","",522,[[["self"],["h"]]]],[11,"hash_slice","","",522,[[["h"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",531,[[["s"],["self"]]]],[11,"hash","std::pin","",361,[[["self"],["h"]]]],[11,"hash","std::num","",463,[[["self"],["__h"]]]],[11,"hash","std::sync::atomic","",204,[[["self"],["__h"]]]],[11,"hash","std::mem","",353,[[["self"],["__h"]]]],[11,"hash","std","",514,[[["self"],["h"]]]],[11,"hash_slice","","",514,[[["h"]]]],[11,"hash","std::ops","",84,[[["self"],["__h"]]]],[11,"hash","std","",524,[[["self"],["hh"]]]],[11,"hash","std::marker","",350,[[["self"],["h"]]]],[11,"hash","std","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","std::num","",459,[[["self"],["__h"]]]],[11,"hash","std","",524,[[["self"],["hh"]]]],[11,"hash","","",519,[[["self"],["h"]]]],[11,"hash_slice","","",519,[[["h"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",508,[[["self"],["h"]]]],[11,"hash","","",531,[[["s"],["self"]]]],[11,"hash","","",509,[[["self"],["h"]]]],[11,"hash","","",531,[[["s"],["self"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",520,[[["self"],["h"]]]],[11,"hash_slice","","",520,[[["h"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","std::num","",460,[[["self"],["__h"]]]],[11,"hash","std","",511,[[["self"],["h"]]]],[11,"hash_slice","","",511,[[["h"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",523,[[["self"],["h"]]]],[11,"hash_slice","","",523,[[["h"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",530,[[["self"],["h"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","std::option","",360,[[["self"],["__h"]]]],[11,"hash","std","",531,[[["s"],["self"]]]],[11,"hash","std::num","",465,[[["self"],["__h"]]]],[11,"hash","std","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",531,[[["s"],["self"]]]],[11,"hash","","",515,[[["self"],["h"]]]],[11,"hash_slice","","",515,[[["h"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","std::ops","",87,[[["self"],["__h"]]]],[11,"hash","std","",524,[[["self"],["hh"]]]],[11,"hash","","",525,[[["self"],["h"]]]],[11,"hash","","",518,[[["self"],["h"]]]],[11,"hash_slice","","",518,[[["h"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","std::num","",155,[[["self"],["__h"]]]],[11,"hash","std::ops","",356,[[["self"],["h"]]]],[11,"hash","std","",525,[[["self"],["h"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","std::num","",457,[[["self"],["__h"]]]],[11,"hash","std","",532,[[["self"],["h"]]]],[11,"hash","std::result","",93,[[["self"],["__h"]]]],[11,"hash","std","",531,[[["s"],["self"]]]],[11,"hash","std::task","",224,[[["self"],["__h"]]]],[11,"hash","std","",524,[[["self"],["hh"]]]],[11,"hash","","",508,[[["self"],["h"]]]],[11,"hash","std::num","",456,[[["self"],["__h"]]]],[11,"hash","std","",524,[[["self"],["hh"]]]],[11,"hash","std::marker","",351,[[["self"],["__h"]]]],[11,"hash","std","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",517,[[["self"],["h"]]]],[11,"hash_slice","","",517,[[["h"]]]],[11,"hash","std::ptr","",362,[[["self"],["h"]]]],[11,"hash","std::num","",455,[[["self"],["__h"]]]],[11,"hash","std","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",531,[[["s"],["self"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","std::num","",462,[[["self"],["__h"]]]],[11,"hash","std","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",531,[[["s"],["self"]]]],[11,"hash","std::fmt","",235,[[["self"],["__h"]]]],[11,"hash","std","",524,[[["self"],["hh"]]]],[11,"hash","std::ops","",355,[[["self"],["__h"]]]],[11,"hash","std","",513,[[["self"],["h"]]]],[11,"hash_slice","","",513,[[["h"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",521,[[["self"],["h"]]]],[11,"hash_slice","","",521,[[["h"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","std::ops","",82,[[["self"],["__h"]]]],[11,"hash","std::cmp","",29,[[["self"],["__h"]]]],[11,"hash","std","",524,[[["self"],["hh"]]]],[11,"hash","","",510,[[["self"],["h"]]]],[11,"hash","std::cmp","",30,[[["self"],["__h"]]]],[11,"hash","std","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","std::num","",464,[[["self"],["__h"]]]],[11,"hash","std","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","std::num","",461,[[["self"],["__h"]]]],[11,"hash","std::ops","",85,[[["self"],["__h"]]]],[11,"hash","std","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",526,[[["self"],["h"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","std::ops","",90,[[["self"],["__h"]]]],[11,"hash","std","",524,[[["self"],["hh"]]]],[11,"hash","","",524,[[["self"],["hh"]]]],[11,"hash","","",531,[[["s"],["self"]]]],[11,"sum","","",519,[[["i"]],["u64"]]],[11,"sum","","",528,[[["i"]],["f32"]]],[11,"sum","","",514,[[["i"]],["i16"]]],[11,"sum","","",515,[[["i"]],["isize"]]],[11,"sum","","",515,[[["i"]],["isize"]]],[11,"sum","","",521,[[["i"]],["usize"]]],[11,"sum","std::result","Takes each element in the `Iterator`: if it is an `Err`,…",93,[[["i"]],["result"]]],[11,"sum","std","",516,[[["i"]],["u16"]]],[11,"sum","","",517,[[["i"]],["u32"]]],[11,"sum","","",528,[[["i"]],["f32"]]],[11,"sum","","",513,[[["i"]],["u8"]]],[11,"sum","","",516,[[["i"]],["u16"]]],[11,"sum","","",511,[[["i"]],["i128"]]],[11,"sum","","",521,[[["i"]],["usize"]]],[11,"sum","std::num","",155,[[["i"]],[["wrapping",["i32"]],["i32"]]]],[11,"sum","std","",523,[[["i"]],["i32"]]],[11,"sum","std::time","",497,[[["i"]],["duration"]]],[11,"sum","std::num","",155,[[["i"]],[["wrapping",["u16"]],["u16"]]]],[11,"sum","std","",518,[[["i"]],["u128"]]],[11,"sum","","",529,[[["i"]],["f64"]]],[11,"sum","","",520,[[["i"]],["i64"]]],[11,"sum","","",520,[[["i"]],["i64"]]],[11,"sum","","",522,[[["i"]],["i8"]]],[11,"sum","std::num","",155,[[["i"]],[["u32"],["wrapping",["u32"]]]]],[11,"sum","","",155,[[["i"]],[["wrapping",["usize"]],["usize"]]]],[11,"sum","std","",517,[[["i"]],["u32"]]],[11,"sum","","",514,[[["i"]],["i16"]]],[11,"sum","std::num","",155,[[["i"]],[["wrapping",["usize"]],["usize"]]]],[11,"sum","","",155,[[["i"]],[["wrapping",["i16"]],["i16"]]]],[11,"sum","","",155,[[["i"]],[["wrapping",["u128"]],["u128"]]]],[11,"sum","","",155,[[["i"]],[["i64"],["wrapping",["i64"]]]]],[11,"sum","","",155,[[["i"]],[["i128"],["wrapping",["i128"]]]]],[11,"sum","","",155,[[["i"]],[["u64"],["wrapping",["u64"]]]]],[11,"sum","","",155,[[["i"]],[["wrapping",["i16"]],["i16"]]]],[11,"sum","std","",519,[[["i"]],["u64"]]],[11,"sum","std::num","",155,[[["i"]],[["wrapping",["i8"]],["i8"]]]],[11,"sum","std","",523,[[["i"]],["i32"]]],[11,"sum","","",522,[[["i"]],["i8"]]],[11,"sum","std::option","Takes each element in the `Iterator`: if it is a `None`,…",91,[[["i"]],["option"]]],[11,"sum","std::num","",155,[[["i"]],[["wrapping",["i32"]],["i32"]]]],[11,"sum","std","",518,[[["i"]],["u128"]]],[11,"sum","","",511,[[["i"]],["i128"]]],[11,"sum","std::num","",155,[[["i"]],[["wrapping",["u8"]],["u8"]]]],[11,"sum","","",155,[[["i"]],[["wrapping",["i8"]],["i8"]]]],[11,"sum","","",155,[[["i"]],[["u64"],["wrapping",["u64"]]]]],[11,"sum","","",155,[[["i"]],[["u32"],["wrapping",["u32"]]]]],[11,"sum","","",155,[[["i"]],[["isize"],["wrapping",["isize"]]]]],[11,"sum","std","",529,[[["i"]],["f64"]]],[11,"sum","std::num","",155,[[["i"]],[["wrapping",["u128"]],["u128"]]]],[11,"sum","","",155,[[["i"]],[["wrapping",["u16"]],["u16"]]]],[11,"sum","","",155,[[["i"]],[["i128"],["wrapping",["i128"]]]]],[11,"sum","std","",513,[[["i"]],["u8"]]],[11,"sum","std::num","",155,[[["i"]],[["wrapping",["u8"]],["u8"]]]],[11,"sum","","",155,[[["i"]],[["isize"],["wrapping",["isize"]]]]],[11,"sum","std::time","",497,[[["i"]],["duration"]]],[11,"sum","std::num","",155,[[["i"]],[["i64"],["wrapping",["i64"]]]]],[11,"call_once","std","",508,[[["a"]]]],[11,"call_once","","",508,[[["a"]]]],[11,"sub","std::num","",155,[[["wrapping"]]]],[11,"sub","std","",520,[[["i64"]]]],[11,"sub","","",523,[[["i32"]],["i32"]]],[11,"sub","","",511,[[["i128"]],["i128"]]],[11,"sub","","",514,[[["i16"]],["i16"]]],[11,"sub","","",528,[[["f32"]],["f32"]]],[11,"sub","","",517,[[["u32"]],["u32"]]],[11,"sub","","",513,[[["u8"]]]],[11,"sub","","",522,[[["i8"]]]],[11,"sub","","",515,[[["isize"]]]],[11,"sub","","",518,[[["u128"]]]],[11,"sub","std::num","",155,[[["wrapping",["u128"]],["u128"]],[["wrapping",["u128"]],["u128"]]]],[11,"sub","","",155,[[["wrapping"]]]],[11,"sub","std","",523,[[["i32"]]]],[11,"sub","std::num","",155,[[["wrapping"]]]],[11,"sub","","",155,[[["wrapping"]]]],[11,"sub","std","",520,[[["i64"]],["i64"]]],[11,"sub","","",518,[[["u128"]],["u128"]]],[11,"sub","","",521,[[["usize"]]]],[11,"sub","","",529,[[["f64"]]]],[11,"sub","","",518,[[["u128"]]]],[11,"sub","","",529,[[["f64"]],["f64"]]],[11,"sub","","",521,[[["usize"]]]],[11,"sub","","",514,[[["i16"]]]],[11,"sub","std::num","",155,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"sub","std","",517,[[["u32"]]]],[11,"sub","","",521,[[["usize"]],["usize"]]],[11,"sub","","",511,[[["i128"]]]],[11,"sub","","",511,[[["i128"]]]],[11,"sub","","",522,[[["i8"]],["i8"]]],[11,"sub","","",522,[[["i8"]]]],[11,"sub","","",521,[[["usize"]]]],[11,"sub","std::num","",155,[[["wrapping",["u16"]],["u16"]],[["wrapping",["u16"]],["u16"]]]],[11,"sub","std","",523,[[["i32"]]]],[11,"sub","","",516,[[["u16"]]]],[11,"sub","std::num","",155,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"sub","std","",517,[[["u32"]]]],[11,"sub","std::num","",155,[[["wrapping"]]]],[11,"sub","std","",514,[[["i16"]]]],[11,"sub","","",528,[[["f32"]]]],[11,"sub","","",513,[[["u8"]]]],[11,"sub","std::num","",155,[[["i128"],["wrapping",["i128"]]],[["i128"],["wrapping",["i128"]]]]],[11,"sub","std","",516,[[["u16"]]]],[11,"sub","std::num","",155,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"sub","std","",520,[[["i64"]]]],[11,"sub","","",518,[[["u128"]]]],[11,"sub","std::time","",497,[[["duration"]],["duration"]]],[11,"sub","std","",522,[[["i8"]]]],[11,"sub","","",529,[[["f64"]]]],[11,"sub","std::num","",155,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"sub","std","",528,[[["f32"]]]],[11,"sub","","",514,[[["i16"]]]],[11,"sub","","",519,[[["u64"]]]],[11,"sub","","",515,[[["isize"]],["isize"]]],[11,"sub","","",515,[[["isize"]]]],[11,"sub","std::num","",155,[[["wrapping"]]]],[11,"sub","std","",516,[[["u16"]]]],[11,"sub","","",528,[[["f32"]]]],[11,"sub","","",515,[[["isize"]]]],[11,"sub","","",529,[[["f64"]]]],[11,"sub","std::num","",155,[[["wrapping"]]]],[11,"sub","","",155,[[["wrapping"]]]],[11,"sub","std","",513,[[["u8"]]]],[11,"sub","std::num","",155,[[["u64"],["wrapping",["u64"]]],[["u64"],["wrapping",["u64"]]]]],[11,"sub","std","",519,[[["u64"]]]],[11,"sub","std::num","",155,[[["wrapping"]]]],[11,"sub","std","",519,[[["u64"]]]],[11,"sub","std::num","",155,[[["wrapping"]]]],[11,"sub","","",155,[[["wrapping"]]]],[11,"sub","std","",520,[[["i64"]]]],[11,"sub","","",517,[[["u32"]]]],[11,"sub","std::num","",155,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"sub","std","",513,[[["u8"]],["u8"]]],[11,"sub","std::num","",155,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"sub","std","",523,[[["i32"]]]],[11,"sub","","",519,[[["u64"]],["u64"]]],[11,"sub","std::num","",155,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"sub","std","",516,[[["u16"]],["u16"]]],[11,"sub","std::num","",155,[[["u32"],["wrapping",["u32"]]],[["u32"],["wrapping",["u32"]]]]],[11,"sub","","",155,[[["wrapping"]]]],[11,"sub","std","",511,[[["i128"]]]],[11,"fmt","std::num","",462,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",463,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",461,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",517,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",516,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",519,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",520,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",456,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",508,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",455,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",518,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",464,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",458,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",513,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",511,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",459,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",457,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",460,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",522,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",465,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",155,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",454,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",523,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",515,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",521,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",508,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",514,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"extend","","",532,[[["self"],["t"]]]],[11,"shr","","",523,[[["u64"]]]],[11,"shr","","",521,[[["u128"]],["usize"]]],[11,"shr","","",516,[[["i64"]]]],[11,"shr","","",519,[[["u128"]]]],[11,"shr","","",516,[[["i64"]]]],[11,"shr","","",516,[[["u8"]],["u16"]]],[11,"shr","","",522,[[["u128"]]]],[11,"shr","","",523,[[["u16"]]]],[11,"shr","","",518,[[["i8"]]]],[11,"shr","","",513,[[["i32"]]]],[11,"shr","","",513,[[["u128"]]]],[11,"shr","","",513,[[["isize"]]]],[11,"shr","","",515,[[["i16"]]]],[11,"shr","","",520,[[["u8"]]]],[11,"shr","","",521,[[["u16"]]]],[11,"shr","","",511,[[["u8"]]]],[11,"shr","","",514,[[["i64"]],["i16"]]],[11,"shr","","",513,[[["i16"]]]],[11,"shr","","",518,[[["i64"]]]],[11,"shr","","",523,[[["i8"]]]],[11,"shr","","",514,[[["i128"]]]],[11,"shr","","",520,[[["u32"]]]],[11,"shr","","",515,[[["u64"]]]],[11,"shr","","",515,[[["i16"]],["isize"]]],[11,"shr","","",519,[[["i64"]],["u64"]]],[11,"shr","std::num","",155,[[["usize"]]]],[11,"shr","std","",523,[[["u8"]]]],[11,"shr","","",511,[[["i128"]]]],[11,"shr","","",518,[[["u8"]],["u128"]]],[11,"shr","","",516,[[["u16"]]]],[11,"shr","","",523,[[["isize"]]]],[11,"shr","","",517,[[["i64"]]]],[11,"shr","","",521,[[["isize"]]]],[11,"shr","","",513,[[["u32"]],["u8"]]],[11,"shr","","",515,[[["isize"]]]],[11,"shr","","",513,[[["u8"]]]],[11,"shr","","",519,[[["isize"]]]],[11,"shr","","",514,[[["i8"]],["i16"]]],[11,"shr","","",515,[[["usize"]]]],[11,"shr","","",521,[[["i32"]]]],[11,"shr","","",518,[[["u64"]]]],[11,"shr","std::num","",155,[[["usize"]]]],[11,"shr","std","",514,[[["u16"]]]],[11,"shr","","",514,[[["i128"]]]],[11,"shr","","",522,[[["u16"]]]],[11,"shr","","",514,[[["isize"]]]],[11,"shr","","",517,[[["isize"]]]],[11,"shr","","",520,[[["i32"]]]],[11,"shr","","",518,[[["i8"]],["u128"]]],[11,"shr","","",521,[[["i16"]]]],[11,"shr","","",523,[[["u128"]]]],[11,"shr","","",516,[[["i8"]]]],[11,"shr","","",513,[[["i16"]],["u8"]]],[11,"shr","","",519,[[["u16"]]]],[11,"shr","","",511,[[["usize"]],["i128"]]],[11,"shr","","",513,[[["i8"]]]],[11,"shr","","",521,[[["u128"]]]],[11,"shr","","",521,[[["i8"]]]],[11,"shr","","",518,[[["i32"]]]],[11,"shr","","",515,[[["u32"]]]],[11,"shr","","",517,[[["i16"]]]],[11,"shr","","",518,[[["isize"]]]],[11,"shr","","",523,[[["u128"]]]],[11,"shr","","",522,[[["u8"]]]],[11,"shr","","",520,[[["i32"]],["i64"]]],[11,"shr","","",514,[[["u16"]]]],[11,"shr","","",520,[[["u64"]]]],[11,"shr","","",513,[[["i128"]]]],[11,"shr","","",521,[[["u8"]]]],[11,"shr","","",522,[[["i64"]]]],[11,"shr","","",521,[[["u64"]]]],[11,"shr","","",516,[[["u128"]]]],[11,"shr","","",518,[[["u16"]]]],[11,"shr","","",513,[[["u8"]],["u8"]]],[11,"shr","","",520,[[["u128"]]]],[11,"shr","","",519,[[["u16"]]]],[11,"shr","","",515,[[["i128"]]]],[11,"shr","","",518,[[["i128"]],["u128"]]],[11,"shr","","",511,[[["u16"]]]],[11,"shr","","",517,[[["i16"]]]],[11,"shr","","",516,[[["i64"]],["u16"]]],[11,"shr","","",517,[[["u64"]]]],[11,"shr","","",511,[[["i128"]]]],[11,"shr","","",519,[[["i8"]],["u64"]]],[11,"shr","","",517,[[["u128"]]]],[11,"shr","","",511,[[["isize"]],["i128"]]],[11,"shr","","",517,[[["i8"]]]],[11,"shr","","",514,[[["u8"]]]],[11,"shr","","",518,[[["i16"]]]],[11,"shr","","",522,[[["u8"]]]],[11,"shr","","",521,[[["i64"]],["usize"]]],[11,"shr","","",518,[[["i32"]]]],[11,"shr","","",518,[[["usize"]]]],[11,"shr","std::num","",155,[[["usize"]],[["i128"],["wrapping",["i128"]]]]],[11,"shr","std","",514,[[["isize"]]]],[11,"shr","","",518,[[["u8"]]]],[11,"shr","std::num","",155,[[["usize"]],[["wrapping",["i16"]],["i16"]]]],[11,"shr","std","",521,[[["u16"]],["usize"]]],[11,"shr","","",522,[[["i8"]]]],[11,"shr","","",522,[[["usize"]]]],[11,"shr","","",519,[[["u32"]],["u64"]]],[11,"shr","","",521,[[["u32"]],["usize"]]],[11,"shr","","",516,[[["isize"]]]],[11,"shr","","",515,[[["i8"]]]],[11,"shr","","",511,[[["i32"]]]],[11,"shr","","",523,[[["i128"]]]],[11,"shr","","",518,[[["u64"]]]],[11,"shr","","",514,[[["u8"]],["i16"]]],[11,"shr","","",521,[[["usize"]]]],[11,"shr","","",523,[[["i128"]]]],[11,"shr","","",511,[[["isize"]]]],[11,"shr","","",516,[[["i128"]]]],[11,"shr","","",520,[[["usize"]],["i64"]]],[11,"shr","","",517,[[["i16"]]]],[11,"shr","","",520,[[["u128"]],["i64"]]],[11,"shr","","",522,[[["i32"]]]],[11,"shr","","",523,[[["i128"]],["i32"]]],[11,"shr","","",516,[[["i8"]],["u16"]]],[11,"shr","","",522,[[["u16"]]]],[11,"shr","","",520,[[["u8"]],["i64"]]],[11,"shr","","",521,[[["usize"]]]],[11,"shr","","",511,[[["i128"]],["i128"]]],[11,"shr","","",518,[[["u128"]],["u128"]]],[11,"shr","","",519,[[["u16"]]]],[11,"shr","","",522,[[["i8"]],["i8"]]],[11,"shr","","",518,[[["u8"]]]],[11,"shr","","",523,[[["u64"]]]],[11,"shr","","",521,[[["u32"]]]],[11,"shr","","",522,[[["i128"]]]],[11,"shr","","",513,[[["usize"]]]],[11,"shr","","",518,[[["usize"]],["u128"]]],[11,"shr","","",513,[[["u128"]],["u8"]]],[11,"shr","","",519,[[["isize"]]]],[11,"shr","","",515,[[["i128"]],["isize"]]],[11,"shr","","",517,[[["u128"]]]],[11,"shr","","",522,[[["u32"]],["i8"]]],[11,"shr","","",517,[[["i8"]]]],[11,"shr","","",514,[[["usize"]],["i16"]]],[11,"shr","","",514,[[["i128"]]]],[11,"shr","std::num","",155,[[["usize"]]]],[11,"shr","std","",514,[[["u128"]]]],[11,"shr","","",516,[[["i128"]]]],[11,"shr","","",511,[[["i32"]]]],[11,"shr","","",515,[[["u32"]]]],[11,"shr","","",521,[[["u32"]]]],[11,"shr","","",517,[[["u32"]]]],[11,"shr","","",514,[[["u64"]]]],[11,"shr","","",513,[[["u8"]]]],[11,"shr","","",519,[[["usize"]]]],[11,"shr","","",518,[[["u128"]]]],[11,"shr","","",517,[[["u32"]],["u32"]]],[11,"shr","","",518,[[["i8"]]]],[11,"shr","","",522,[[["i32"]]]],[11,"shr","","",521,[[["u64"]]]],[11,"shr","","",517,[[["i128"]]]],[11,"shr","","",515,[[["u128"]]]],[11,"shr","","",511,[[["u32"]]]],[11,"shr","","",518,[[["i128"]]]],[11,"shr","","",521,[[["i64"]]]],[11,"shr","","",515,[[["isize"]]]],[11,"shr","","",523,[[["usize"]]]],[11,"shr","std::num","",155,[[["usize"]],[["wrapping",["u128"]],["u128"]]]],[11,"shr","std","",520,[[["u32"]],["i64"]]],[11,"shr","","",513,[[["isize"]]]],[11,"shr","","",517,[[["usize"]]]],[11,"shr","","",513,[[["i32"]]]],[11,"shr","","",515,[[["u16"]],["isize"]]],[11,"shr","","",516,[[["i8"]]]],[11,"shr","","",514,[[["u128"]],["i16"]]],[11,"shr","","",521,[[["u16"]]]],[11,"shr","","",522,[[["i32"]]]],[11,"shr","","",514,[[["i32"]]]],[11,"shr","","",521,[[["i8"]]]],[11,"shr","","",516,[[["i16"]]]],[11,"shr","","",514,[[["u16"]]]],[11,"shr","","",521,[[["i128"]]]],[11,"shr","","",522,[[["i64"]]]],[11,"shr","","",511,[[["u16"]]]],[11,"shr","","",514,[[["u32"]]]],[11,"shr","","",520,[[["i64"]]]],[11,"shr","","",522,[[["u8"]],["i8"]]],[11,"shr","","",522,[[["i16"]]]],[11,"shr","","",523,[[["i64"]]]],[11,"shr","","",519,[[["i128"]]]],[11,"shr","","",523,[[["u16"]],["i32"]]],[11,"shr","","",522,[[["i8"]]]],[11,"shr","","",516,[[["u64"]]]],[11,"shr","","",518,[[["i32"]],["u128"]]],[11,"shr","","",518,[[["u32"]],["u128"]]],[11,"shr","","",523,[[["i16"]]]],[11,"shr","","",511,[[["u8"]],["i128"]]],[11,"shr","","",521,[[["i32"]],["usize"]]],[11,"shr","","",522,[[["u32"]]]],[11,"shr","","",522,[[["i64"]]]],[11,"shr","","",518,[[["u128"]]]],[11,"shr","","",517,[[["isize"]]]],[11,"shr","","",519,[[["u8"]],["u64"]]],[11,"shr","","",511,[[["i128"]]]],[11,"shr","","",523,[[["i64"]]]],[11,"shr","","",511,[[["u64"]]]],[11,"shr","","",519,[[["i32"]],["u64"]]],[11,"shr","","",518,[[["isize"]]]],[11,"shr","","",523,[[["u128"]]]],[11,"shr","","",520,[[["u8"]]]],[11,"shr","","",515,[[["u64"]]]],[11,"shr","","",514,[[["isize"]]]],[11,"shr","","",519,[[["isize"]],["u64"]]],[11,"shr","","",511,[[["u32"]]]],[11,"shr","","",515,[[["u8"]]]],[11,"shr","","",516,[[["u64"]],["u16"]]],[11,"shr","","",517,[[["u8"]],["u32"]]],[11,"shr","","",519,[[["i64"]]]],[11,"shr","","",523,[[["i16"]]]],[11,"shr","","",519,[[["i128"]]]],[11,"shr","","",518,[[["u32"]]]],[11,"shr","","",522,[[["i128"]],["i8"]]],[11,"shr","","",517,[[["i64"]]]],[11,"shr","","",520,[[["isize"]]]],[11,"shr","","",519,[[["i128"]],["u64"]]],[11,"shr","","",521,[[["i64"]]]],[11,"shr","","",519,[[["i32"]]]],[11,"shr","","",521,[[["i128"]],["usize"]]],[11,"shr","","",517,[[["i32"]]]],[11,"shr","","",515,[[["i32"]]]],[11,"shr","","",515,[[["i8"]],["isize"]]],[11,"shr","","",517,[[["u32"]]]],[11,"shr","","",521,[[["i16"]]]],[11,"shr","","",517,[[["u8"]]]],[11,"shr","","",521,[[["u128"]]]],[11,"shr","","",518,[[["i64"]],["u128"]]],[11,"shr","","",518,[[["usize"]]]],[11,"shr","","",519,[[["usize"]],["u64"]]],[11,"shr","","",515,[[["u128"]]]],[11,"shr","","",518,[[["i16"]]]],[11,"shr","","",511,[[["i8"]]]],[11,"shr","","",520,[[["i8"]]]],[11,"shr","","",515,[[["u8"]]]],[11,"shr","","",513,[[["i32"]]]],[11,"shr","","",515,[[["isize"]]]],[11,"shr","","",511,[[["u32"]]]],[11,"shr","","",515,[[["u16"]]]],[11,"shr","","",522,[[["i8"]]]],[11,"shr","","",520,[[["i16"]],["i64"]]],[11,"shr","","",516,[[["i32"]],["u16"]]],[11,"shr","","",516,[[["u16"]]]],[11,"shr","std::num","",155,[[["usize"]]]],[11,"shr","std","",517,[[["i64"]],["u32"]]],[11,"shr","","",518,[[["usize"]]]],[11,"shr","","",515,[[["u16"]]]],[11,"shr","","",519,[[["u16"]],["u64"]]],[11,"shr","","",519,[[["i32"]]]],[11,"shr","","",513,[[["i64"]],["u8"]]],[11,"shr","","",521,[[["u8"]]]],[11,"shr","","",518,[[["isize"]],["u128"]]],[11,"shr","","",511,[[["i64"]]]],[11,"shr","","",520,[[["u16"]]]],[11,"shr","std::num","",155,[[["usize"]]]],[11,"shr","std","",520,[[["i128"]],["i64"]]],[11,"shr","","",513,[[["u64"]]]],[11,"shr","","",516,[[["u64"]]]],[11,"shr","","",523,[[["i64"]]]],[11,"shr","","",520,[[["isize"]]]],[11,"shr","","",523,[[["usize"]]]],[11,"shr","","",517,[[["i16"]],["u32"]]],[11,"shr","","",517,[[["u16"]]]],[11,"shr","","",519,[[["u32"]]]],[11,"shr","","",511,[[["u8"]]]],[11,"shr","","",518,[[["u32"]]]],[11,"shr","","",520,[[["u32"]]]],[11,"shr","","",522,[[["isize"]],["i8"]]],[11,"shr","","",523,[[["usize"]],["i32"]]],[11,"shr","","",519,[[["u64"]]]],[11,"shr","","",520,[[["i8"]],["i64"]]],[11,"shr","","",511,[[["u32"]],["i128"]]],[11,"shr","","",518,[[["isize"]]]],[11,"shr","","",515,[[["i16"]]]],[11,"shr","","",521,[[["isize"]]]],[11,"shr","","",523,[[["i64"]],["i32"]]],[11,"shr","","",515,[[["isize"]],["isize"]]],[11,"shr","","",521,[[["i128"]]]],[11,"shr","","",523,[[["i32"]]]],[11,"shr","","",522,[[["u128"]],["i8"]]],[11,"shr","","",523,[[["i32"]]]],[11,"shr","","",511,[[["u64"]]]],[11,"shr","","",521,[[["u8"]],["usize"]]],[11,"shr","","",511,[[["u64"]],["i128"]]],[11,"shr","","",520,[[["u64"]],["i64"]]],[11,"shr","","",516,[[["u128"]],["u16"]]],[11,"shr","","",517,[[["u16"]],["u32"]]],[11,"shr","","",513,[[["u64"]]]],[11,"shr","std::num","",155,[[["usize"]]]],[11,"shr","std","",515,[[["i8"]]]],[11,"shr","","",514,[[["usize"]]]],[11,"shr","","",522,[[["i128"]]]],[11,"shr","","",519,[[["u32"]]]],[11,"shr","","",513,[[["isize"]]]],[11,"shr","std::num","",155,[[["usize"]]]],[11,"shr","std","",523,[[["u16"]]]],[11,"shr","std::num","",155,[[["usize"]]]],[11,"shr","std","",520,[[["i32"]]]],[11,"shr","","",516,[[["u8"]]]],[11,"shr","","",516,[[["i16"]]]],[11,"shr","","",520,[[["isize"]]]],[11,"shr","","",518,[[["i128"]]]],[11,"shr","","",515,[[["u128"]]]],[11,"shr","std::num","",155,[[["usize"]]]],[11,"shr","std","",514,[[["u8"]]]],[11,"shr","","",513,[[["i8"]],["u8"]]],[11,"shr","","",515,[[["i32"]]]],[11,"shr","","",515,[[["u8"]]]],[11,"shr","","",521,[[["i16"]],["usize"]]],[11,"shr","","",516,[[["u16"]],["u16"]]],[11,"shr","","",513,[[["i8"]]]],[11,"shr","","",522,[[["u8"]]]],[11,"shr","","",518,[[["i8"]]]],[11,"shr","","",514,[[["i64"]]]],[11,"shr","","",516,[[["u32"]]]],[11,"shr","","",514,[[["u32"]]]],[11,"shr","","",522,[[["i16"]],["i8"]]],[11,"shr","","",513,[[["usize"]],["u8"]]],[11,"shr","","",521,[[["i8"]]]],[11,"shr","","",520,[[["i64"]]]],[11,"shr","","",522,[[["usize"]],["i8"]]],[11,"shr","","",515,[[["i64"]],["isize"]]],[11,"shr","","",513,[[["u128"]]]],[11,"shr","","",513,[[["u16"]]]],[11,"shr","","",520,[[["i16"]]]],[11,"shr","","",520,[[["i32"]]]],[11,"shr","","",513,[[["u16"]]]],[11,"shr","","",517,[[["usize"]],["u32"]]],[11,"shr","","",517,[[["u16"]]]],[11,"shr","","",516,[[["i16"]],["u16"]]],[11,"shr","","",516,[[["i16"]]]],[11,"shr","","",519,[[["usize"]]]],[11,"shr","","",523,[[["u8"]],["i32"]]],[11,"shr","","",519,[[["u128"]]]],[11,"shr","","",523,[[["i32"]],["i32"]]],[11,"shr","","",523,[[["i32"]]]],[11,"shr","","",511,[[["i16"]]]],[11,"shr","","",511,[[["u16"]],["i128"]]],[11,"shr","","",519,[[["u128"]]]],[11,"shr","","",515,[[["u32"]]]],[11,"shr","std::num","",155,[[["usize"]]]],[11,"shr","std","",514,[[["i64"]]]],[11,"shr","","",516,[[["u64"]]]],[11,"shr","","",514,[[["i8"]]]],[11,"shr","","",522,[[["isize"]]]],[11,"shr","","",521,[[["i32"]]]],[11,"shr","","",517,[[["u64"]],["u32"]]],[11,"shr","","",522,[[["i32"]],["i8"]]],[11,"shr","","",520,[[["usize"]]]],[11,"shr","","",520,[[["u128"]]]],[11,"shr","","",521,[[["u128"]]]],[11,"shr","","",523,[[["u32"]]]],[11,"shr","","",516,[[["u8"]]]],[11,"shr","","",511,[[["i16"]]]],[11,"shr","","",513,[[["i64"]]]],[11,"shr","","",513,[[["u32"]]]],[11,"shr","","",514,[[["i32"]],["i16"]]],[11,"shr","","",521,[[["u64"]],["usize"]]],[11,"shr","std::num","",155,[[["usize"]],[["wrapping",["u8"]],["u8"]]]],[11,"shr","std","",515,[[["u128"]],["isize"]]],[11,"shr","","",514,[[["i8"]]]],[11,"shr","","",517,[[["isize"]]]],[11,"shr","","",515,[[["u8"]],["isize"]]],[11,"shr","","",517,[[["u64"]]]],[11,"shr","","",515,[[["u64"]],["isize"]]],[11,"shr","","",514,[[["i128"]],["i16"]]],[11,"shr","","",522,[[["i64"]],["i8"]]],[11,"shr","","",523,[[["i8"]]]],[11,"shr","","",520,[[["i128"]]]],[11,"shr","","",523,[[["u64"]]]],[11,"shr","","",521,[[["i8"]],["usize"]]],[11,"shr","","",519,[[["i32"]]]],[11,"shr","","",514,[[["u16"]],["i16"]]],[11,"shr","","",517,[[["u8"]]]],[11,"shr","","",513,[[["i16"]]]],[11,"shr","","",514,[[["i8"]]]],[11,"shr","","",511,[[["i32"]]]],[11,"shr","","",511,[[["u16"]]]],[11,"shr","","",522,[[["usize"]]]],[11,"shr","","",518,[[["i128"]]]],[11,"shr","","",515,[[["i64"]]]],[11,"shr","","",513,[[["u64"]],["u8"]]],[11,"shr","","",511,[[["i32"]],["i128"]]],[11,"shr","","",516,[[["isize"]]]],[11,"shr","","",513,[[["usize"]]]],[11,"shr","","",522,[[["i128"]]]],[11,"shr","","",513,[[["u128"]]]],[11,"shr","","",511,[[["u128"]]]],[11,"shr","","",521,[[["u16"]]]],[11,"shr","","",513,[[["u8"]]]],[11,"shr","","",514,[[["u64"]]]],[11,"shr","","",511,[[["i8"]],["i128"]]],[11,"shr","","",511,[[["i16"]],["i128"]]],[11,"shr","","",522,[[["u128"]]]],[11,"shr","","",511,[[["i16"]]]],[11,"shr","","",511,[[["u128"]],["i128"]]],[11,"shr","","",522,[[["isize"]]]],[11,"shr","","",516,[[["usize"]]]],[11,"shr","","",522,[[["u32"]]]],[11,"shr","","",517,[[["i128"]]]],[11,"shr","","",521,[[["i32"]]]],[11,"shr","","",520,[[["i64"]]]],[11,"shr","","",514,[[["u32"]],["i16"]]],[11,"shr","","",514,[[["u8"]]]],[11,"shr","","",520,[[["usize"]]]],[11,"shr","","",516,[[["usize"]]]],[11,"shr","","",513,[[["i16"]]]],[11,"shr","","",518,[[["u64"]]]],[11,"shr","","",516,[[["i32"]]]],[11,"shr","","",511,[[["u64"]]]],[11,"shr","","",523,[[["i16"]],["i32"]]],[11,"shr","","",522,[[["usize"]]]],[11,"shr","","",514,[[["i32"]]]],[11,"shr","","",521,[[["isize"]]]],[11,"shr","","",514,[[["usize"]]]],[11,"shr","","",519,[[["i16"]]]],[11,"shr","","",519,[[["u64"]],["u64"]]],[11,"shr","","",517,[[["usize"]]]],[11,"shr","","",517,[[["u8"]]]],[11,"shr","","",517,[[["u32"]]]],[11,"shr","","",520,[[["i16"]]]],[11,"shr","","",523,[[["u128"]],["i32"]]],[11,"shr","","",511,[[["u128"]]]],[11,"shr","","",519,[[["i16"]]]],[11,"shr","","",511,[[["u128"]]]],[11,"shr","","",522,[[["u16"]],["i8"]]],[11,"shr","","",513,[[["u32"]]]],[11,"shr","","",518,[[["u32"]]]],[11,"shr","","",519,[[["i8"]]]],[11,"shr","","",519,[[["i8"]]]],[11,"shr","","",519,[[["u8"]]]],[11,"shr","","",514,[[["i16"]]]],[11,"shr","","",523,[[["u64"]],["i32"]]],[11,"shr","","",513,[[["i32"]],["u8"]]],[11,"shr","","",520,[[["i128"]]]],[11,"shr","","",519,[[["u128"]],["u64"]]],[11,"shr","","",514,[[["i32"]]]],[11,"shr","","",514,[[["i16"]],["i16"]]],[11,"shr","","",520,[[["i64"]],["i64"]]],[11,"shr","","",516,[[["u8"]]]],[11,"shr","","",515,[[["i64"]]]],[11,"shr","","",513,[[["i128"]]]],[11,"shr","","",517,[[["i32"]]]],[11,"shr","","",511,[[["i8"]]]],[11,"shr","","",514,[[["usize"]]]],[11,"shr","","",518,[[["i32"]]]],[11,"shr","","",511,[[["usize"]]]],[11,"shr","","",513,[[["u16"]]]],[11,"shr","","",520,[[["u64"]]]],[11,"shr","","",522,[[["i16"]]]],[11,"shr","","",521,[[["u64"]]]],[11,"shr","","",523,[[["i128"]]]],[11,"shr","","",523,[[["u8"]]]],[11,"shr","","",522,[[["u64"]],["i8"]]],[11,"shr","","",515,[[["i32"]],["isize"]]],[11,"shr","","",516,[[["u32"]]]],[11,"shr","","",520,[[["u16"]]]],[11,"shr","","",514,[[["u64"]]]],[11,"shr","","",516,[[["i32"]]]],[11,"shr","","",519,[[["i16"]]]],[11,"shr","","",511,[[["i64"]]]],[11,"shr","","",519,[[["usize"]]]],[11,"shr","","",514,[[["isize"]],["i16"]]],[11,"shr","","",516,[[["i128"]],["u16"]]],[11,"shr","","",519,[[["i128"]]]],[11,"shr","","",523,[[["u16"]]]],[11,"shr","","",515,[[["i128"]]]],[11,"shr","","",516,[[["i8"]]]],[11,"shr","","",513,[[["isize"]],["u8"]]],[11,"shr","","",514,[[["u128"]]]],[11,"shr","","",520,[[["usize"]]]],[11,"shr","","",523,[[["usize"]]]],[11,"shr","","",520,[[["u16"]]]],[11,"shr","","",520,[[["i8"]]]],[11,"shr","","",523,[[["i8"]],["i32"]]],[11,"shr","","",520,[[["i16"]]]],[11,"shr","","",517,[[["isize"]],["u32"]]],[11,"shr","","",515,[[["i128"]]]],[11,"shr","","",513,[[["usize"]]]],[11,"shr","","",511,[[["u8"]]]],[11,"shr","","",520,[[["u32"]]]],[11,"shr","","",521,[[["u8"]]]],[11,"shr","","",517,[[["i128"]],["u32"]]],[11,"shr","","",519,[[["i64"]]]],[11,"shr","","",513,[[["i64"]]]],[11,"shr","","",517,[[["u128"]]]],[11,"shr","","",518,[[["u16"]]]],[11,"shr","","",517,[[["u128"]],["u32"]]],[11,"shr","","",516,[[["isize"]]]],[11,"shr","","",511,[[["isize"]]]],[11,"shr","","",518,[[["u128"]]]],[11,"shr","","",522,[[["u128"]]]],[11,"shr","","",513,[[["u16"]],["u8"]]],[11,"shr","","",517,[[["usize"]]]],[11,"shr","","",520,[[["u64"]]]],[11,"shr","","",515,[[["u16"]]]],[11,"shr","","",516,[[["isize"]],["u16"]]],[11,"shr","","",518,[[["u16"]]]],[11,"shr","","",516,[[["u16"]]]],[11,"shr","std::num","",155,[[["usize"]],[["wrapping",["i32"]],["i32"]]]],[11,"shr","std","",518,[[["u8"]]]],[11,"shr","","",516,[[["u32"]]]],[11,"shr","","",517,[[["u16"]]]],[11,"shr","","",520,[[["isize"]],["i64"]]],[11,"shr","","",517,[[["i32"]],["u32"]]],[11,"shr","","",519,[[["u8"]]]],[11,"shr","","",516,[[["u32"]],["u16"]]],[11,"shr","","",519,[[["u64"]]]],[11,"shr","","",523,[[["u32"]]]],[11,"shr","","",513,[[["i8"]]]],[11,"shr","std::num","",155,[[["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"shr","std","",520,[[["u8"]]]],[11,"shr","","",514,[[["i64"]]]],[11,"shr","","",517,[[["i8"]],["u32"]]],[11,"shr","","",511,[[["isize"]]]],[11,"shr","","",521,[[["i64"]]]],[11,"shr","","",516,[[["u128"]]]],[11,"shr","std::num","",155,[[["usize"]],[["wrapping",["u16"]],["u16"]]]],[11,"shr","std","",519,[[["u32"]]]],[11,"shr","std::num","",155,[[["usize"]]]],[11,"shr","std","",517,[[["u64"]]]],[11,"shr","","",523,[[["isize"]]]],[11,"shr","","",521,[[["usize"]]]],[11,"shr","","",523,[[["u32"]],["i32"]]],[11,"shr","","",515,[[["usize"]]]],[11,"shr","","",520,[[["i8"]]]],[11,"shr","","",513,[[["u32"]]]],[11,"shr","","",522,[[["u64"]]]],[11,"shr","","",522,[[["u64"]]]],[11,"shr","","",517,[[["i32"]]]],[11,"shr","","",511,[[["i64"]],["i128"]]],[11,"shr","","",514,[[["u128"]]]],[11,"shr","std::num","",155,[[["usize"]]]],[11,"shr","std","",521,[[["usize"]],["usize"]]],[11,"shr","std::num","",155,[[["usize"]],[["u32"],["wrapping",["u32"]]]]],[11,"shr","std","",522,[[["u64"]]]],[11,"shr","","",513,[[["u64"]]]],[11,"shr","","",514,[[["u64"]],["i16"]]],[11,"shr","","",516,[[["usize"]]]],[11,"shr","","",522,[[["u16"]]]],[11,"shr","","",523,[[["i8"]]]],[11,"shr","","",519,[[["u8"]]]],[11,"shr","","",521,[[["isize"]],["usize"]]],[11,"shr","","",523,[[["isize"]],["i32"]]],[11,"shr","","",511,[[["usize"]]]],[11,"shr","","",514,[[["u32"]]]],[11,"shr","","",518,[[["i64"]]]],[11,"shr","","",516,[[["u128"]]]],[11,"shr","","",511,[[["i8"]]]],[11,"shr","","",516,[[["usize"]],["u16"]]],[11,"shr","","",514,[[["i16"]]]],[11,"shr","","",523,[[["i16"]]]],[11,"shr","","",514,[[["i16"]]]],[11,"shr","","",515,[[["u64"]]]],[11,"shr","","",515,[[["usize"]]]],[11,"shr","","",522,[[["isize"]]]],[11,"shr","","",520,[[["u16"]],["i64"]]],[11,"shr","","",520,[[["u128"]]]],[11,"shr","","",517,[[["i8"]]]],[11,"shr","","",515,[[["i8"]]]],[11,"shr","","",521,[[["i128"]]]],[11,"shr","","",517,[[["i128"]]]],[11,"shr","","",515,[[["i32"]]]],[11,"shr","","",521,[[["i16"]]]],[11,"shr","","",515,[[["usize"]],["isize"]]],[11,"shr","","",515,[[["i64"]]]],[11,"shr","std::num","",155,[[["usize"]],[["isize"],["wrapping",["isize"]]]]],[11,"shr","std","",511,[[["usize"]]]],[11,"shr","","",519,[[["i8"]]]],[11,"shr","std::num","",155,[[["usize"]],[["u64"],["wrapping",["u64"]]]]],[11,"shr","std","",513,[[["i64"]]]],[11,"shr","","",518,[[["i16"]],["u128"]]],[11,"shr","","",518,[[["u16"]],["u128"]]],[11,"shr","","",523,[[["u32"]]]],[11,"shr","","",511,[[["i64"]]]],[11,"shr","","",516,[[["i128"]]]],[11,"shr","","",516,[[["i32"]]]],[11,"shr","","",513,[[["i128"]],["u8"]]],[11,"shr","","",517,[[["i64"]]]],[11,"shr","","",518,[[["i16"]]]],[11,"shr","","",515,[[["i16"]]]],[11,"shr","","",520,[[["i128"]]]],[11,"shr","","",523,[[["isize"]]]],[11,"shr","","",519,[[["isize"]]]],[11,"shr","std::num","",155,[[["usize"]],[["wrapping",["i8"]],["i8"]]]],[11,"shr","std","",519,[[["u64"]]]],[11,"shr","","",521,[[["u32"]]]],[11,"shr","","",515,[[["u32"]],["isize"]]],[11,"shr","","",522,[[["u32"]]]],[11,"shr","","",513,[[["i128"]]]],[11,"shr","","",522,[[["i16"]]]],[11,"shr","","",518,[[["i64"]]]],[11,"shr","","",518,[[["u64"]],["u128"]]],[11,"shr","","",519,[[["i16"]],["u64"]]],[11,"shr","","",519,[[["i64"]]]],[11,"shr","","",523,[[["u8"]]]],[11,"shr","","",516,[[["i64"]]]],[11,"shr","std::num","",155,[[["usize"]],[["i64"],["wrapping",["i64"]]]]],[11,"add","std","",519,[[["u64"]]]],[11,"add","","",521,[[["usize"]]]],[11,"add","","",513,[[["u8"]]]],[11,"add","std::num","",155,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"add","std","",519,[[["u64"]]]],[11,"add","std::num","",155,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"add","std","",521,[[["usize"]],["usize"]]],[11,"add","std::num","",155,[[["wrapping"]]]],[11,"add","std","",516,[[["u16"]]]],[11,"add","","",519,[[["u64"]]]],[11,"add","","",513,[[["u8"]],["u8"]]],[11,"add","","",518,[[["u128"]]]],[11,"add","std::num","",155,[[["wrapping"]]]],[11,"add","std","",522,[[["i8"]]]],[11,"add","std::num","",155,[[["wrapping",["u128"]],["u128"]],[["wrapping",["u128"]],["u128"]]]],[11,"add","std","",529,[[["f64"]]]],[11,"add","std::num","",155,[[["wrapping"]]]],[11,"add","std","",511,[[["i128"]],["i128"]]],[11,"add","std::num","",155,[[["wrapping"]]]],[11,"add","","",155,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"add","","",155,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"add","","",155,[[["wrapping"]]]],[11,"add","std","",523,[[["i32"]]]],[11,"add","","",517,[[["u32"]]]],[11,"add","","",528,[[["f32"]]]],[11,"add","","",516,[[["u16"]]]],[11,"add","std::num","",155,[[["wrapping"]]]],[11,"add","std","",516,[[["u16"]],["u16"]]],[11,"add","","",521,[[["usize"]]]],[11,"add","","",521,[[["usize"]]]],[11,"add","","",522,[[["i8"]]]],[11,"add","","",517,[[["u32"]]]],[11,"add","","",516,[[["u16"]]]],[11,"add","","",518,[[["u128"]]]],[11,"add","","",520,[[["i64"]]]],[11,"add","","",514,[[["i16"]]]],[11,"add","","",529,[[["f64"]]]],[11,"add","","",518,[[["u128"]]]],[11,"add","std::num","",155,[[["wrapping"]]]],[11,"add","","",155,[[["i128"],["wrapping",["i128"]]],[["i128"],["wrapping",["i128"]]]]],[11,"add","std","",523,[[["i32"]]]],[11,"add","","",523,[[["i32"]]]],[11,"add","","",511,[[["i128"]]]],[11,"add","std::num","",155,[[["u32"],["wrapping",["u32"]]],[["u32"],["wrapping",["u32"]]]]],[11,"add","","",155,[[["wrapping"]]]],[11,"add","std","",513,[[["u8"]]]],[11,"add","","",518,[[["u128"]],["u128"]]],[11,"add","","",529,[[["f64"]],["f64"]]],[11,"add","","",528,[[["f32"]],["f32"]]],[11,"add","","",513,[[["u8"]]]],[11,"add","std::num","",155,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"add","std","",514,[[["i16"]]]],[11,"add","","",511,[[["i128"]]]],[11,"add","std::num","",155,[[["wrapping"]]]],[11,"add","std","",520,[[["i64"]]]],[11,"add","","",511,[[["i128"]]]],[11,"add","","",517,[[["u32"]],["u32"]]],[11,"add","","",520,[[["i64"]]]],[11,"add","","",528,[[["f32"]]]],[11,"add","std::num","",155,[[["u64"],["wrapping",["u64"]]],[["u64"],["wrapping",["u64"]]]]],[11,"add","std::time","",497,[[["duration"]],["duration"]]],[11,"add","std","",514,[[["i16"]],["i16"]]],[11,"add","std::num","",155,[[["wrapping"]]]],[11,"add","std","",519,[[["u64"]],["u64"]]],[11,"add","std::num","",155,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"add","std","",523,[[["i32"]],["i32"]]],[11,"add","std::num","",155,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"add","std","",515,[[["isize"]]]],[11,"add","","",520,[[["i64"]],["i64"]]],[11,"add","std::num","",155,[[["wrapping"]]]],[11,"add","std","",514,[[["i16"]]]],[11,"add","","",522,[[["i8"]]]],[11,"add","","",515,[[["isize"]]]],[11,"add","std::num","",155,[[["wrapping",["u16"]],["u16"]],[["wrapping",["u16"]],["u16"]]]],[11,"add","","",155,[[["wrapping"]]]],[11,"add","std","",529,[[["f64"]]]],[11,"add","","",517,[[["u32"]]]],[11,"add","","",515,[[["isize"]]]],[11,"add","","",522,[[["i8"]],["i8"]]],[11,"add","","",515,[[["isize"]],["isize"]]],[11,"add","","",528,[[["f32"]]]],[11,"write_str","std::fmt","",242,[[["str"],["self"]],[["error"],["result",["error"]]]]],[11,"write_char","","",242,[[["self"],["char"]],[["error"],["result",["error"]]]]],[11,"write_fmt","","",242,[[["self"],["arguments"]],[["error"],["result",["error"]]]]],[11,"write_str","std","",508,[[["str"],["self"]],[["error"],["result",["error"]]]]],[11,"write_char","","",508,[[["self"],["char"]],[["error"],["result",["error"]]]]],[11,"write_fmt","","",508,[[["self"],["arguments"]],[["error"],["result",["error"]]]]],[11,"next_back","std::str::pattern","",265,[[["self"]],["searchstep"]]],[11,"next_match_back","","",265,[[["self"]],["option"]]],[11,"next_reject_back","","",265,[[["self"]],["option"]]],[11,"next_back","","",267,[[["self"]],["searchstep"]]],[11,"next_match_back","","",267,[[["self"]],["option"]]],[11,"next_back","","",266,[[["self"]],["searchstep"]]],[11,"next_match_back","","",266,[[["self"]],["option"]]],[11,"next_reject_back","","",266,[[["self"]],["option"]]],[11,"next_back","","",264,[[["self"]],["searchstep"]]],[11,"next_match_back","","",264,[[["self"]],["option"]]],[11,"start_bound","std::ops","",82,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",82,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",83,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",83,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",84,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",84,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",355,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",355,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",356,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",356,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",356,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",356,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","std","",531,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",531,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","std::ops","",87,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",87,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",83,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",83,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","std","",531,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",531,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","std::ops","",87,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",87,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",82,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",82,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",84,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",84,[[["self"]],[["bound"],["t"]]]],[11,"index","std","",509,[[["i"],["self"]]]],[11,"index","","",510,[[["i"],["self"]]]],[11,"from","","",529,[[["u16"]],["f64"]]],[11,"from","","",511,[[["i32"]],["i128"]]],[11,"from","","",513,[[["nonzerou8"]],["u8"]]],[11,"from","","",518,[[["u16"]],["u128"]]],[11,"from","std::num","",454,[[["nonzerou64"]],["nonzeroi128"]]],[11,"from","std","",511,[[["i64"]],["i128"]]],[11,"from","std::num","",455,[[["nonzeroi8"]],["nonzeroi16"]]],[11,"from","","",460,[[["nonzerou32"]],["nonzerou128"]]],[11,"from","std::sync::atomic","Converts an `i32` into an `AtomicI32`.",484,[[["i32"]],["atomici32"]]],[11,"from","std::num","",459,[[["nonzerou8"]],["nonzeroisize"]]],[11,"from","std","",519,[[["nonzerou64"]],["u64"]]],[11,"from","std::num","",456,[[["nonzeroi8"]],["nonzeroi32"]]],[11,"from","std","",516,[[["nonzerou16"]],["u16"]]],[11,"from","std::sync::atomic","Converts an `u64` into an `AtomicU64`.",487,[[["u64"]],["atomicu64"]]],[11,"from","std","",520,[[["i32"]],["i64"]]],[11,"from","std::num","",457,[[["nonzeroi32"]],["nonzeroi64"]]],[11,"from","","",454,[[["nonzerou8"]],["nonzeroi128"]]],[11,"from","std","Converts a [`char`] into a [`u32`].",517,[[["char"]],["u32"]]],[11,"from","","",515,[[["nonzeroisize"]],["isize"]]],[11,"from","std::num","",460,[[["nonzerou8"]],["nonzerou128"]]],[11,"from","","",461,[[["nonzerou8"]],["nonzerou16"]]],[11,"from","","",462,[[["nonzerou16"]],["nonzerou32"]]],[11,"from","","",457,[[["nonzerou32"]],["nonzeroi64"]]],[11,"from","std","",511,[[["u16"]],["i128"]]],[11,"from","","",529,[[["i32"]],["f64"]]],[11,"from","std::num","",465,[[["nonzerou16"]],["nonzerousize"]]],[11,"from","std","",518,[[["u64"]],["u128"]]],[11,"from","","",528,[[["i16"]],["f32"]]],[11,"from","std::num","",459,[[["nonzeroi16"]],["nonzeroisize"]]],[11,"from","std","",522,[[["nonzeroi8"]],["i8"]]],[11,"from","","",519,[[["bool"]],["u64"]]],[11,"from","std::array","",301,[[["infallible"]],["tryfromsliceerror"]]],[11,"from","std::sync::atomic","",479,[[],["atomicptr"]]],[11,"from","","Converts an `i64` into an `AtomicI64`.",486,[[["i64"]],["atomici64"]]],[11,"from","std::num","",454,[[["nonzerou16"]],["nonzeroi128"]]],[11,"from","std::sync::atomic","Converts an `u8` into an `AtomicU8`.",481,[[["u8"]],["atomicu8"]]],[11,"from","std","",520,[[["u16"]],["i64"]]],[11,"from","std::cell","",309,[[["t"]],["unsafecell"]]],[11,"from","std::num","",456,[[["nonzerou16"]],["nonzeroi32"]]],[11,"from","std::ptr","",362,[[["unique"]],["nonnull"]]],[11,"from","std","",511,[[["i8"]],["i128"]]],[11,"from","","",529,[[["u8"]],["f64"]]],[11,"from","","",520,[[["nonzeroi64"]],["i64"]]],[11,"from","","",529,[[["f32"]],["f64"]]],[11,"from","std::ptr","",362,[[["t"]],["nonnull"]]],[11,"from","std","",514,[[["bool"]],["i16"]]],[11,"from","","",517,[[["u16"]],["u32"]]],[11,"from","std::num","",453,[[["infallible"]],["tryfrominterror"]]],[11,"from","std","",515,[[["i8"]],["isize"]]],[11,"from","","",521,[[["u8"]],["usize"]]],[11,"from","","",528,[[["u8"]],["f32"]]],[11,"from","std::num","",454,[[["nonzerou32"]],["nonzeroi128"]]],[11,"from","std","",511,[[["i16"]],["i128"]]],[11,"from","","",529,[[["i16"]],["f64"]]],[11,"from","","",516,[[["bool"]],["u16"]]],[11,"from","std::num","",454,[[["nonzeroi64"]],["nonzeroi128"]]],[11,"from","std","",515,[[["u8"]],["isize"]]],[11,"from","std::num","",463,[[["nonzerou32"]],["nonzerou64"]]],[11,"from","","",457,[[["nonzerou16"]],["nonzeroi64"]]],[11,"from","std","",523,[[["u8"]],["i32"]]],[11,"from","std::option","",91,[[["option"]],[["option"],["t"]]]],[11,"from","std","",518,[[["nonzerou128"]],["u128"]]],[11,"from","std::num","",465,[[["nonzerou8"]],["nonzerousize"]]],[11,"from","std","",516,[[["u8"]],["u16"]]],[11,"from","","",523,[[["nonzeroi32"]],["i32"]]],[11,"from","","",515,[[["bool"]],["isize"]]],[11,"from","std::sync::atomic","Converts an `isize` into an `AtomicIsize`.",488,[[["isize"]],["atomicisize"]]],[11,"from","std","",514,[[["u8"]],["i16"]]],[11,"from","std::sync::atomic","Converts an `i8` into an `AtomicI8`.",480,[[["i8"]],["atomici8"]]],[11,"from","std","",523,[[["i16"]],["i32"]]],[11,"from","","",523,[[["bool"]],["i32"]]],[11,"from","std::num","",456,[[["nonzerou8"]],["nonzeroi32"]]],[11,"from","std::sync::atomic","Converts an `u16` into an `AtomicU16`.",483,[[["u16"]],["atomicu16"]]],[11,"from","std","",528,[[["u16"]],["f32"]]],[11,"from","","",520,[[["u8"]],["i64"]]],[11,"from","","",521,[[["bool"]],["usize"]]],[11,"from","","",520,[[["i16"]],["i64"]]],[11,"from","","",529,[[["u32"]],["f64"]]],[11,"from","std::num","",463,[[["nonzerou16"]],["nonzerou64"]]],[11,"from","std","",520,[[["u32"]],["i64"]]],[11,"from","","",523,[[["i8"]],["i32"]]],[11,"from","std::sync::atomic","Converts a `bool` into an `AtomicBool`.",478,[[["bool"]],["atomicbool"]]],[11,"from","std::num","",457,[[["nonzerou8"]],["nonzeroi64"]]],[11,"from","std","",514,[[["i8"]],["i16"]]],[11,"from","std::num","",463,[[["nonzerou8"]],["nonzerou64"]]],[11,"from","","",462,[[["nonzerou8"]],["nonzerou32"]]],[11,"from","","",454,[[["nonzeroi16"]],["nonzeroi128"]]],[11,"from","std","",511,[[["u64"]],["i128"]]],[11,"from","","",529,[[["i8"]],["f64"]]],[11,"from","std::option","",91,[[["t"]],["option"]]],[11,"from","std","Converts a [`u8`] into a [`char`].",526,[[["u8"]],["char"]]],[11,"from","","",511,[[["nonzeroi128"]],["i128"]]],[11,"from","std::num","",453,[[],["tryfrominterror"]]],[11,"from","std::convert","",319,[[],["infallible"]]],[11,"from","std","",520,[[["bool"]],["i64"]]],[11,"from","std::num","",460,[[["nonzerou16"]],["nonzerou128"]]],[11,"from","std","",518,[[["bool"]],["u128"]]],[11,"from","std::task","",224,[[["t"]],["poll"]]],[11,"from","std::ptr","",362,[[["t"]],["nonnull"]]],[11,"from","std","",519,[[["u8"]],["u64"]]],[11,"from","std::num","",460,[[["nonzerou64"]],["nonzerou128"]]],[11,"from","","",457,[[["nonzeroi16"]],["nonzeroi64"]]],[11,"from","std","",521,[[["nonzerousize"]],["usize"]]],[11,"from","","",517,[[["u8"]],["u32"]]],[11,"from","","",514,[[["nonzeroi16"]],["i16"]]],[11,"from","std::sync::atomic","Converts an `i16` into an `AtomicI16`.",482,[[["i16"]],["atomici16"]]],[11,"from","std::cell","",304,[[["t"]],["refcell"]]],[11,"from","std","",518,[[["u32"]],["u128"]]],[11,"from","","",513,[[["bool"]],["u8"]]],[11,"from","","",528,[[["i8"]],["f32"]]],[11,"from","","",518,[[["u8"]],["u128"]]],[11,"from","std::num","",456,[[["nonzeroi16"]],["nonzeroi32"]]],[11,"from","std","",511,[[["bool"]],["i128"]]],[11,"from","std::sync::atomic","Converts an `u32` into an `AtomicU32`.",485,[[["u32"]],["atomicu32"]]],[11,"from","std","",523,[[["u16"]],["i32"]]],[11,"from","std::option","",91,[[["option"]],[["option"],["t"]]]],[11,"from","std","",515,[[["i16"]],["isize"]]],[11,"from","std::num","",455,[[["nonzerou8"]],["nonzeroi16"]]],[11,"from","std","",511,[[["u32"]],["i128"]]],[11,"from","","",511,[[["u8"]],["i128"]]],[11,"from","std::num","",459,[[["nonzeroi8"]],["nonzeroisize"]]],[11,"from","std","",519,[[["u16"]],["u64"]]],[11,"from","","",519,[[["u32"]],["u64"]]],[11,"from","","",517,[[["bool"]],["u32"]]],[11,"from","","",517,[[["nonzerou32"]],["u32"]]],[11,"from","std::num","",457,[[["nonzeroi8"]],["nonzeroi64"]]],[11,"from","std","",521,[[["u16"]],["usize"]]],[11,"from","std::num","",454,[[["nonzeroi32"]],["nonzeroi128"]]],[11,"from","std::cell","",303,[[["t"]],["cell"]]],[11,"from","std","",522,[[["bool"]],["i8"]]],[11,"from","","",520,[[["i8"]],["i64"]]],[11,"from","std::num","",454,[[["nonzeroi8"]],["nonzeroi128"]]],[11,"from","std::sync::atomic","Converts an `usize` into an `AtomicUsize`.",489,[[["usize"]],["atomicusize"]]],[11,"default","std","",531,[[]]],[11,"default","","",527,[[]]],[11,"default","","",527,[[]]],[11,"default","","",527,[[]]],[11,"default","","",527,[[]]],[11,"default","","",531,[[]]],[11,"default","std::sync::atomic","",488,[[],["atomicisize"]]],[11,"default","std::cmp","",30,[[],["reverse"]]],[11,"default","std","Returns the default value of `0`",513,[[],["u8"]]],[11,"default","","Returns the default value of `0`",517,[[],["u32"]]],[11,"default","","Creates a mutable empty slice.",510,[[]]],[11,"default","std::num","",155,[[],["wrapping"]]],[11,"default","std","",527,[[]]],[11,"default","","",527,[[]]],[11,"default","","",531,[[]]],[11,"default","","Returns the default value of `0`",519,[[],["u64"]]],[11,"default","","",527,[[]]],[11,"default","std::marker","",350,[[],["phantomdata"]]],[11,"default","std","Creates an empty str",509,[[],["str"]]],[11,"default","","",531,[[]]],[11,"default","","",527,[[]]],[11,"default","","Returns the default value of `()`",532,[[]]],[11,"default","","",527,[[]]],[11,"default","","",531,[[]]],[11,"default","","",527,[[]]],[11,"default","","",527,[[]]],[11,"default","","",527,[[]]],[11,"default","","Returns the default value of `\\x00`",526,[[],["char"]]],[11,"default","","",531,[[]]],[11,"default","std::sync::atomic","",482,[[],["atomici16"]]],[11,"default","std","",531,[[]]],[11,"default","std::time","",497,[[],["duration"]]],[11,"default","std","",527,[[]]],[11,"default","std::sync::atomic","",485,[[],["atomicu32"]]],[11,"default","std","",527,[[]]],[11,"default","","",527,[[]]],[11,"default","std::sync::atomic","",480,[[],["atomici8"]]],[11,"default","std","Returns the default value of `0`",522,[[],["i8"]]],[11,"default","","",527,[[]]],[11,"default","","",527,[[]]],[11,"default","","Returns the default value of `0`",515,[[],["isize"]]],[11,"default","","",527,[[]]],[11,"default","","Returns the default value of `false`",512,[[],["bool"]]],[11,"default","","Returns the default value of `0`",523,[[],["i32"]]],[11,"default","","Returns the default value of `0.0`",529,[[],["f64"]]],[11,"default","std::cell","Creates a `RefCell<T>`, with the `Default` value for T.",304,[[],["refcell"]]],[11,"default","std","",527,[[]]],[11,"default","std::hash","",320,[[],["buildhasherdefault"]]],[11,"default","std::sync::atomic","",486,[[],["atomici64"]]],[11,"default","std::cell","Creates a `Cell<T>`, with the `Default` value for T.",303,[[],["cell"]]],[11,"default","std::sync::atomic","",489,[[],["atomicusize"]]],[11,"default","std","",527,[[]]],[11,"default","","",527,[[]]],[11,"default","std::mem","",353,[[],["manuallydrop"]]],[11,"default","std","",531,[[]]],[11,"default","std::fmt","",235,[[],["error"]]],[11,"default","std","",527,[[]]],[11,"default","","",527,[[]]],[11,"default","","",527,[[]]],[11,"default","","",531,[[]]],[11,"default","","",527,[[]]],[11,"default","std::sync::atomic","",484,[[],["atomici32"]]],[11,"default","std","",531,[[]]],[11,"default","","",527,[[]]],[11,"default","","Returns the default value of `0.0`",528,[[],["f32"]]],[11,"default","","Returns the default value of `0`",514,[[],["i16"]]],[11,"default","","",527,[[]]],[11,"default","","Returns the default value of `0`",521,[[],["usize"]]],[11,"default","","Returns the default value of `0`",520,[[],["i64"]]],[11,"default","std::sync::atomic","",487,[[],["atomicu64"]]],[11,"default","std","",527,[[]]],[11,"default","std::sync::atomic","",483,[[],["atomicu16"]]],[11,"default","std::hash","",321,[[],["siphasher"]]],[11,"default","std","Returns the default value of `0`",516,[[],["u16"]]],[11,"default","","Creates an empty mutable str",509,[[],["str"]]],[11,"default","","Creates an empty slice.",510,[[]]],[11,"default","","",527,[[]]],[11,"default","","",531,[[]]],[11,"default","","",527,[[]]],[11,"default","","",527,[[]]],[11,"default","std::cell","Creates an `UnsafeCell`, with the `Default` value for T.",309,[[],["unsafecell"]]],[11,"default","std","",527,[[]]],[11,"default","","Returns the default value of `0`",511,[[],["i128"]]],[11,"default","std::sync::atomic","Creates a null `AtomicPtr<T>`.",479,[[],["atomicptr"]]],[11,"default","","",481,[[],["atomicu8"]]],[11,"default","std","",531,[[]]],[11,"default","","",527,[[]]],[11,"default","std::sync::atomic","Creates an `AtomicBool` initialized to `false`.",478,[[],["atomicbool"]]],[11,"default","std::option","Returns [`None`][Option::None].",91,[[],["option"]]],[11,"default","std","Returns the default value of `0`",518,[[],["u128"]]],[11,"default","std::iter","",322,[[],["empty"]]],[11,"fmt","std::num","",461,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",514,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",457,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",521,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",454,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",517,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",508,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",465,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",520,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",455,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",518,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",513,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",462,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",458,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",464,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",459,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",523,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",511,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",155,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",515,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",463,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",516,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",508,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",456,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",519,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",460,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",522,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"bitxor_assign","std::num","",155,[[["self"],["wrapping",["u8"]],["u8"]]]],[11,"bitxor_assign","std","",520,[[["i64"],["self"]]]],[11,"bitxor_assign","","",515,[[["isize"],["self"]]]],[11,"bitxor_assign","","",511,[[["self"],["i128"]]]],[11,"bitxor_assign","std::num","",155,[[["wrapping"],["self"]]]],[11,"bitxor_assign","std","",523,[[["self"],["i32"]]]],[11,"bitxor_assign","std::num","",155,[[["wrapping"],["self"]]]],[11,"bitxor_assign","","",155,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"bitxor_assign","","",155,[[["self"],["u32"],["wrapping",["u32"]]]]],[11,"bitxor_assign","std","",517,[[["self"],["u32"]]]],[11,"bitxor_assign","std::num","",155,[[["self"],["u64"],["wrapping",["u64"]]]]],[11,"bitxor_assign","std","",516,[[["u16"],["self"]]]],[11,"bitxor_assign","std::num","",155,[[["wrapping",["u128"]],["self"],["u128"]]]],[11,"bitxor_assign","","",155,[[["self"],["wrapping"]]]],[11,"bitxor_assign","std","",515,[[["isize"],["self"]]]],[11,"bitxor_assign","","",514,[[["self"],["i16"]]]],[11,"bitxor_assign","","",512,[[["self"],["bool"]]]],[11,"bitxor_assign","","",522,[[["self"],["i8"]]]],[11,"bitxor_assign","","",513,[[["self"],["u8"]]]],[11,"bitxor_assign","","",520,[[["i64"],["self"]]]],[11,"bitxor_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"bitxor_assign","std","",521,[[["self"],["usize"]]]],[11,"bitxor_assign","","",522,[[["self"],["i8"]]]],[11,"bitxor_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",155,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",155,[[["wrapping",["u16"]],["self"],["u16"]]]],[11,"bitxor_assign","","",155,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",155,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"bitxor_assign","","",155,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"bitxor_assign","std","",517,[[["self"],["u32"]]]],[11,"bitxor_assign","","",519,[[["self"],["u64"]]]],[11,"bitxor_assign","","",516,[[["u16"],["self"]]]],[11,"bitxor_assign","std::num","",155,[[["wrapping"],["self"]]]],[11,"bitxor_assign","","",155,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",155,[[["self"],["wrapping"]]]],[11,"bitxor_assign","std","",523,[[["self"],["i32"]]]],[11,"bitxor_assign","","",511,[[["self"],["i128"]]]],[11,"bitxor_assign","std::num","",155,[[["self"],["i128"],["wrapping",["i128"]]]]],[11,"bitxor_assign","std","",512,[[["self"],["bool"]]]],[11,"bitxor_assign","","",518,[[["self"],["u128"]]]],[11,"bitxor_assign","std::num","",155,[[["wrapping",["usize"]],["self"],["usize"]]]],[11,"bitxor_assign","std","",513,[[["self"],["u8"]]]],[11,"bitxor_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"bitxor_assign","std","",514,[[["self"],["i16"]]]],[11,"bitxor_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",155,[[["wrapping",["i8"]],["self"],["i8"]]]],[11,"bitxor_assign","std","",518,[[["self"],["u128"]]]],[11,"bitxor_assign","","",521,[[["self"],["usize"]]]],[11,"bitxor_assign","","",519,[[["self"],["u64"]]]],[11,"bitxor_assign","std::num","",155,[[["self"],["wrapping",["i32"]],["i32"]]]],[11,"call_mut","std","",508,[[["a"],["self"]]]],[11,"call_mut","","",508,[[["a"],["self"]]]],[11,"try_from","","Try to create the target number type from a source number…",513,[[["u128"]],[["result",["u8"]],["u8"]]]],[11,"try_from","","Try to create the target number type from a source number…",513,[[["i8"]],[["result",["u8"]],["u8"]]]],[11,"try_from","","Try to create the target number type from a source number…",517,[[["isize"]],[["u32"],["result",["u32"]]]]],[11,"try_from","","",527,[[],[["result",["tryfromsliceerror"]],["tryfromsliceerror"]]]],[11,"try_from","","Try to create the target number type from a source number…",518,[[["i16"]],[["result",["u128"]],["u128"]]]],[11,"try_from","","Try to create the target number type from a source number…",519,[[["isize"]],[["result",["u64"]],["u64"]]]],[11,"try_from","","Try to create the target number type from a source number…",516,[[["u128"]],[["result",["u16"]],["u16"]]]],[11,"try_from","","Try to create the target number type from a source number…",521,[[["i16"]],[["result",["usize"]],["usize"]]]],[11,"try_from","","Try to create the target number type from a source number…",518,[[["isize"]],[["result",["u128"]],["u128"]]]],[11,"try_from","","Try to create the target number type from a source number…",513,[[["usize"]],[["u8"],["result",["u8"]]]]],[11,"try_from","","Try to create the target number type from a source number…",522,[[["i128"]],[["i8"],["result",["i8"]]]]],[11,"try_from","","Try to create the target number type from a source number…",514,[[["u32"]],[["result",["i16"]],["i16"]]]],[11,"try_from","","Try to create the target number type from a source number…",517,[[["i32"]],[["result",["u32"]],["u32"]]]],[11,"try_from","","Try to create the target number type from a source number…",520,[[["isize"]],[["result",["i64"]],["i64"]]]],[11,"try_from","","Try to create the target number type from a source number…",515,[[["u128"]],[["isize"],["result",["isize"]]]]],[11,"try_from","","Try to create the target number type from a source number…",522,[[["isize"]],[["result",["i8"]],["i8"]]]],[11,"try_from","","Try to create the target number type from a source number…",513,[[["u16"]],[["result",["u8"]],["u8"]]]],[11,"try_from","","Try to create the target number type from a source number…",513,[[["i64"]],[["result",["u8"]],["u8"]]]],[11,"try_from","","Try to create the target number type from a source number…",522,[[["i64"]],[["i8"],["result",["i8"]]]]],[11,"try_from","","Try to create the target number type from a source number…",513,[[["isize"]],[["result",["u8"]],["u8"]]]],[11,"try_from","","",527,[[],[["result",["tryfromsliceerror"]],["tryfromsliceerror"]]]],[11,"try_from","","Try to create the target number type from a source number…",521,[[["i128"]],[["result",["usize"]],["usize"]]]],[11,"try_from","","Try to create the target number type from a source number…",523,[[["u128"]],[["result",["i32"]],["i32"]]]],[11,"try_from","","Try to create the target number type from a source number…",519,[[["i32"]],[["result",["u64"]],["u64"]]]],[11,"try_from","","Try to create the target number type from a source number…",514,[[["u16"]],[["result",["i16"]],["i16"]]]],[11,"try_from","","Try to create the target number type from a source number…",513,[[["i16"]],[["result",["u8"]],["u8"]]]],[11,"try_from","","Try to create the target number type from a source number…",516,[[["i16"]],[["u16"],["result",["u16"]]]]],[11,"try_from","","Try to create the target number type from a source number…",521,[[["i64"]],[["result",["usize"]],["usize"]]]],[11,"try_from","","Try to create the target number type from a source number…",519,[[["i128"]],[["result",["u64"]],["u64"]]]],[11,"try_from","","Try to create the target number type from a source number…",516,[[["isize"]],[["u16"],["result",["u16"]]]]],[11,"try_from","","Try to create the target number type from a source number…",511,[[["usize"]],[["result",["i128"]],["i128"]]]],[11,"try_from","","Try to create the target number type from a source number…",517,[[["i8"]],[["result",["u32"]],["u32"]]]],[11,"try_from","","Try to create the target number type from a source number…",511,[[["isize"]],[["i128"],["result",["i128"]]]]],[11,"try_from","","Try to create the target number type from a source number…",518,[[["i8"]],[["result",["u128"]],["u128"]]]],[11,"try_from","","Try to create the target number type from a source number…",520,[[["u64"]],[["result",["i64"]],["i64"]]]],[11,"try_from","","Try to create the target number type from a source number…",517,[[["i64"]],[["u32"],["result",["u32"]]]]],[11,"try_from","","Try to create the target number type from a source number…",522,[[["i32"]],[["i8"],["result",["i8"]]]]],[11,"try_from","","Try to create the target number type from a source number…",518,[[["i64"]],[["result",["u128"]],["u128"]]]],[11,"try_from","","Try to create the target number type from a source number…",513,[[["u64"]],[["u8"],["result",["u8"]]]]],[11,"try_from","","Try to create the target number type from a source number…",516,[[["u64"]],[["u16"],["result",["u16"]]]]],[11,"try_from","","Try to create the target number type from a source number…",514,[[["u128"]],[["result",["i16"]],["i16"]]]],[11,"try_from","","Try to create the target number type from a source number…",516,[[["usize"]],[["u16"],["result",["u16"]]]]],[11,"try_from","","Try to create the target number type from a source number…",514,[[["usize"]],[["result",["i16"]],["i16"]]]],[11,"try_from","","Try to create the target number type from a source number…",513,[[["u32"]],[["result",["u8"]],["u8"]]]],[11,"try_from","","Try to create the target number type from a source number…",515,[[["i64"]],[["isize"],["result",["isize"]]]]],[11,"try_from","","Try to create the target number type from a source number…",514,[[["i128"]],[["result",["i16"]],["i16"]]]],[11,"try_from","","Try to create the target number type from a source number…",519,[[["i8"]],[["u64"],["result",["u64"]]]]],[11,"try_from","","Try to create the target number type from a source number…",514,[[["i32"]],[["result",["i16"]],["i16"]]]],[11,"try_from","","Try to create the target number type from a source number…",519,[[["u128"]],[["result",["u64"]],["u64"]]]],[11,"try_from","","Try to create the target number type from a source number…",516,[[["i8"]],[["u16"],["result",["u16"]]]]],[11,"try_from","","Try to create the target number type from a source number…",515,[[["u16"]],[["isize"],["result",["isize"]]]]],[11,"try_from","","Try to create the target number type from a source number…",522,[[["usize"]],[["result",["i8"]],["i8"]]]],[11,"try_from","","Try to create the target number type from a source number…",516,[[["i32"]],[["result",["u16"]],["u16"]]]],[11,"try_from","","Try to create the target number type from a source number…",515,[[["u32"]],[["isize"],["result",["isize"]]]]],[11,"try_from","","Try to create the target number type from a source number…",514,[[["isize"]],[["i16"],["result",["i16"]]]]],[11,"try_from","","Try to create the target number type from a source number…",516,[[["i64"]],[["result",["u16"]],["u16"]]]],[11,"try_from","","Try to create the target number type from a source number…",521,[[["isize"]],[["usize"],["result",["usize"]]]]],[11,"try_from","","Try to create the target number type from a source number…",520,[[["u128"]],[["result",["i64"]],["i64"]]]],[11,"try_from","","Try to create the target number type from a source number…",513,[[["i128"]],[["result",["u8"]],["u8"]]]],[11,"try_from","","Try to create the target number type from a source number…",523,[[["i128"]],[["result",["i32"]],["i32"]]]],[11,"try_from","","Try to create the target number type from a source number…",516,[[["u32"]],[["u16"],["result",["u16"]]]]],[11,"try_from","","Try to create the target number type from a source number…",515,[[["i32"]],[["isize"],["result",["isize"]]]]],[11,"try_from","","Try to create the target number type from a source number…",520,[[["usize"]],[["i64"],["result",["i64"]]]]],[11,"try_from","","Try to create the target number type from a source number…",521,[[["i32"]],[["usize"],["result",["usize"]]]]],[11,"try_from","","Try to create the target number type from a source number…",517,[[["u64"]],[["result",["u32"]],["u32"]]]],[11,"try_from","","Try to create the target number type from a source number…",522,[[["u32"]],[["i8"],["result",["i8"]]]]],[11,"try_from","","Try to create the target number type from a source number…",519,[[["i64"]],[["u64"],["result",["u64"]]]]],[11,"try_from","","Try to create the target number type from a source number…",521,[[["u64"]],[["result",["usize"]],["usize"]]]],[11,"try_from","","Try to create the target number type from a source number…",517,[[["i16"]],[["u32"],["result",["u32"]]]]],[11,"try_from","","Try to create the target number type from a source number…",516,[[["i128"]],[["u16"],["result",["u16"]]]]],[11,"try_from","","Try to create the target number type from a source number…",521,[[["i8"]],[["result",["usize"]],["usize"]]]],[11,"try_from","","Try to create the target number type from a source number…",515,[[["i128"]],[["result",["isize"]],["isize"]]]],[11,"try_from","","Try to create the target number type from a source number…",522,[[["u8"]],[["result",["i8"]],["i8"]]]],[11,"try_from","","Try to create the target number type from a source number…",518,[[["i32"]],[["result",["u128"]],["u128"]]]],[11,"try_from","","Try to create the target number type from a source number…",519,[[["usize"]],[["u64"],["result",["u64"]]]]],[11,"try_from","","Try to create the target number type from a source number…",519,[[["i16"]],[["result",["u64"]],["u64"]]]],[11,"try_from","","Try to create the target number type from a source number…",518,[[["usize"]],[["result",["u128"]],["u128"]]]],[11,"try_from","","Try to create the target number type from a source number…",511,[[["u128"]],[["i128"],["result",["i128"]]]]],[11,"try_from","","Try to create the target number type from a source number…",522,[[["u16"]],[["result",["i8"]],["i8"]]]],[11,"try_from","","Try to create the target number type from a source number…",523,[[["usize"]],[["result",["i32"]],["i32"]]]],[11,"try_from","","Try to create the target number type from a source number…",523,[[["i64"]],[["result",["i32"]],["i32"]]]],[11,"try_from","","Try to create the target number type from a source number…",517,[[["usize"]],[["result",["u32"]],["u32"]]]],[11,"try_from","","",527,[[],[["tryfromsliceerror"],["result",["tryfromsliceerror"]]]]],[11,"try_from","","Try to create the target number type from a source number…",513,[[["i32"]],[["result",["u8"]],["u8"]]]],[11,"try_from","","Try to create the target number type from a source number…",521,[[["u32"]],[["result",["usize"]],["usize"]]]],[11,"try_from","","Try to create the target number type from a source number…",523,[[["u64"]],[["result",["i32"]],["i32"]]]],[11,"try_from","","Try to create the target number type from a source number…",522,[[["u128"]],[["result",["i8"]],["i8"]]]],[11,"try_from","","Try to create the target number type from a source number…",523,[[["isize"]],[["result",["i32"]],["i32"]]]],[11,"try_from","","Try to create the target number type from a source number…",515,[[["u64"]],[["isize"],["result",["isize"]]]]],[11,"try_from","","Try to create the target number type from a source number…",517,[[["i128"]],[["result",["u32"]],["u32"]]]],[11,"try_from","","Try to create the target number type from a source number…",514,[[["u64"]],[["result",["i16"]],["i16"]]]],[11,"try_from","","Try to create the target number type from a source number…",514,[[["i64"]],[["result",["i16"]],["i16"]]]],[11,"try_from","","Try to create the target number type from a source number…",523,[[["u32"]],[["result",["i32"]],["i32"]]]],[11,"try_from","","Try to create the target number type from a source number…",521,[[["u128"]],[["result",["usize"]],["usize"]]]],[11,"try_from","","Try to create the target number type from a source number…",522,[[["i16"]],[["result",["i8"]],["i8"]]]],[11,"try_from","","Try to create the target number type from a source number…",522,[[["u64"]],[["result",["i8"]],["i8"]]]],[11,"try_from","","Try to create the target number type from a source number…",515,[[["usize"]],[["isize"],["result",["isize"]]]]],[11,"try_from","","Try to create the target number type from a source number…",520,[[["i128"]],[["i64"],["result",["i64"]]]]],[11,"try_from","","Try to create the target number type from a source number…",517,[[["u128"]],[["result",["u32"]],["u32"]]]],[11,"try_from","","",526,[[["u32"]],[["result",["char"]],["char"]]]],[11,"try_from","","Try to create the target number type from a source number…",518,[[["i128"]],[["result",["u128"]],["u128"]]]],[11,"product","std::num","",155,[[["i"]],[["wrapping",["i32"]],["i32"]]]],[11,"product","std","",520,[[["i"]],["i64"]]],[11,"product","std::num","",155,[[["i"]],[["wrapping",["u128"]],["u128"]]]],[11,"product","std","",523,[[["i"]],["i32"]]],[11,"product","","",516,[[["i"]],["u16"]]],[11,"product","std::num","",155,[[["i"]],[["wrapping",["u8"]],["u8"]]]],[11,"product","","",155,[[["i"]],[["wrapping",["i8"]],["i8"]]]],[11,"product","std","",515,[[["i"]],["isize"]]],[11,"product","std::num","",155,[[["i"]],[["wrapping",["usize"]],["usize"]]]],[11,"product","std","",513,[[["i"]],["u8"]]],[11,"product","std::num","",155,[[["i"]],[["wrapping",["i32"]],["i32"]]]],[11,"product","","",155,[[["i"]],[["u32"],["wrapping",["u32"]]]]],[11,"product","std","",514,[[["i"]],["i16"]]],[11,"product","std::num","",155,[[["i"]],[["u32"],["wrapping",["u32"]]]]],[11,"product","std","",521,[[["i"]],["usize"]]],[11,"product","","",528,[[["i"]],["f32"]]],[11,"product","std::num","",155,[[["i"]],[["i64"],["wrapping",["i64"]]]]],[11,"product","std::result","Takes each element in the `Iterator`: if it is an `Err`,…",93,[[["i"]],["result"]]],[11,"product","std::option","Takes each element in the `Iterator`: if it is a `None`,…",91,[[["i"]],["option"]]],[11,"product","std","",517,[[["i"]],["u32"]]],[11,"product","","",529,[[["i"]],["f64"]]],[11,"product","std::num","",155,[[["i"]],[["wrapping",["i16"]],["i16"]]]],[11,"product","","",155,[[["i"]],[["isize"],["wrapping",["isize"]]]]],[11,"product","std","",528,[[["i"]],["f32"]]],[11,"product","std::num","",155,[[["i"]],[["i128"],["wrapping",["i128"]]]]],[11,"product","","",155,[[["i"]],[["i128"],["wrapping",["i128"]]]]],[11,"product","","",155,[[["i"]],[["wrapping",["u16"]],["u16"]]]],[11,"product","std","",518,[[["i"]],["u128"]]],[11,"product","","",529,[[["i"]],["f64"]]],[11,"product","std::num","",155,[[["i"]],[["wrapping",["usize"]],["usize"]]]],[11,"product","std","",511,[[["i"]],["i128"]]],[11,"product","","",515,[[["i"]],["isize"]]],[11,"product","","",522,[[["i"]],["i8"]]],[11,"product","","",518,[[["i"]],["u128"]]],[11,"product","std::num","",155,[[["i"]],[["isize"],["wrapping",["isize"]]]]],[11,"product","","",155,[[["i"]],[["wrapping",["u128"]],["u128"]]]],[11,"product","std","",514,[[["i"]],["i16"]]],[11,"product","","",522,[[["i"]],["i8"]]],[11,"product","std::num","",155,[[["i"]],[["wrapping",["u8"]],["u8"]]]],[11,"product","","",155,[[["i"]],[["wrapping",["i8"]],["i8"]]]],[11,"product","","",155,[[["i"]],[["i64"],["wrapping",["i64"]]]]],[11,"product","std","",519,[[["i"]],["u64"]]],[11,"product","","",513,[[["i"]],["u8"]]],[11,"product","std::num","",155,[[["i"]],[["u64"],["wrapping",["u64"]]]]],[11,"product","std","",520,[[["i"]],["i64"]]],[11,"product","std::num","",155,[[["i"]],[["wrapping",["u16"]],["u16"]]]],[11,"product","","",155,[[["i"]],[["wrapping",["i16"]],["i16"]]]],[11,"product","std","",523,[[["i"]],["i32"]]],[11,"product","","",521,[[["i"]],["usize"]]],[11,"product","","",517,[[["i"]],["u32"]]],[11,"product","std::num","",155,[[["i"]],[["u64"],["wrapping",["u64"]]]]],[11,"product","std","",519,[[["i"]],["u64"]]],[11,"product","","",516,[[["i"]],["u16"]]],[11,"product","","",511,[[["i"]],["i128"]]],[11,"div_assign","std::num","",155,[[["wrapping",["u128"]],["self"],["u128"]]]],[11,"div_assign","std","",517,[[["self"],["u32"]]]],[11,"div_assign","std::num","",155,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"div_assign","","",155,[[["self"],["wrapping"]]]],[11,"div_assign","","",155,[[["self"],["u64"],["wrapping",["u64"]]]]],[11,"div_assign","std","",522,[[["self"],["i8"]]]],[11,"div_assign","","",528,[[["f32"],["self"]]]],[11,"div_assign","","",518,[[["self"],["u128"]]]],[11,"div_assign","","",521,[[["self"],["usize"]]]],[11,"div_assign","","",519,[[["self"],["u64"]]]],[11,"div_assign","","",515,[[["isize"],["self"]]]],[11,"div_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"div_assign","std","",520,[[["i64"],["self"]]]],[11,"div_assign","","",523,[[["self"],["i32"]]]],[11,"div_assign","","",516,[[["u16"],["self"]]]],[11,"div_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"div_assign","","",155,[[["self"],["wrapping",["i32"]],["i32"]]]],[11,"div_assign","std","",519,[[["self"],["u64"]]]],[11,"div_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"div_assign","std","",517,[[["self"],["u32"]]]],[11,"div_assign","","",518,[[["self"],["u128"]]]],[11,"div_assign","","",514,[[["self"],["i16"]]]],[11,"div_assign","","",513,[[["self"],["u8"]]]],[11,"div_assign","std::num","",155,[[["wrapping",["usize"]],["self"],["usize"]]]],[11,"div_assign","std","",516,[[["u16"],["self"]]]],[11,"div_assign","std::num","",155,[[["wrapping"],["self"]]]],[11,"div_assign","","",155,[[["wrapping"],["self"]]]],[11,"div_assign","","",155,[[["wrapping",["u16"]],["self"],["u16"]]]],[11,"div_assign","","",155,[[["self"],["u32"],["wrapping",["u32"]]]]],[11,"div_assign","std","",522,[[["self"],["i8"]]]],[11,"div_assign","std::num","",155,[[["self"],["wrapping",["u8"]],["u8"]]]],[11,"div_assign","","",155,[[["self"],["i128"],["wrapping",["i128"]]]]],[11,"div_assign","","",155,[[["self"],["wrapping"]]]],[11,"div_assign","std","",515,[[["isize"],["self"]]]],[11,"div_assign","","",520,[[["i64"],["self"]]]],[11,"div_assign","std::num","",155,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"div_assign","std","",523,[[["self"],["i32"]]]],[11,"div_assign","std::num","",155,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"div_assign","","",155,[[["self"],["wrapping"]]]],[11,"div_assign","","",155,[[["self"],["wrapping"]]]],[11,"div_assign","std","",529,[[["self"],["f64"]]]],[11,"div_assign","std::time","",497,[[["self"],["u32"]]]],[11,"div_assign","std","",511,[[["self"],["i128"]]]],[11,"div_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"div_assign","std","",513,[[["self"],["u8"]]]],[11,"div_assign","","",529,[[["self"],["f64"]]]],[11,"div_assign","","",528,[[["f32"],["self"]]]],[11,"div_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"div_assign","std","",514,[[["self"],["i16"]]]],[11,"div_assign","","",511,[[["self"],["i128"]]]],[11,"div_assign","std::num","",155,[[["wrapping"],["self"]]]],[11,"div_assign","","",155,[[["wrapping",["i8"]],["self"],["i8"]]]],[11,"div_assign","std","",521,[[["self"],["usize"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",531,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",531,[[["self"]],["bool"]]],[11,"le","","",531,[[["self"]],["bool"]]],[11,"ge","","",531,[[["self"]],["bool"]]],[11,"gt","","",531,[[["self"]],["bool"]]],[11,"partial_cmp","","",515,[[["isize"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",515,[[["isize"],["self"]],["bool"]]],[11,"le","","",515,[[["isize"],["self"]],["bool"]]],[11,"ge","","",515,[[["isize"],["self"]],["bool"]]],[11,"gt","","",515,[[["isize"],["self"]],["bool"]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",527,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",527,[[["self"]],["bool"]]],[11,"le","","",527,[[["self"]],["bool"]]],[11,"ge","","",527,[[["self"]],["bool"]]],[11,"gt","","",527,[[["self"]],["bool"]]],[11,"partial_cmp","","",508,[[["b"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",508,[[["b"],["self"]],["bool"]]],[11,"le","","",508,[[["b"],["self"]],["bool"]]],[11,"gt","","",508,[[["b"],["self"]],["bool"]]],[11,"ge","","",508,[[["b"],["self"]],["bool"]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::num","",455,[[["self"],["nonzeroi16"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",455,[[["self"],["nonzeroi16"]],["bool"]]],[11,"le","","",455,[[["self"],["nonzeroi16"]],["bool"]]],[11,"gt","","",455,[[["self"],["nonzeroi16"]],["bool"]]],[11,"ge","","",455,[[["self"],["nonzeroi16"]],["bool"]]],[11,"partial_cmp","","",458,[[["nonzeroi8"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",458,[[["nonzeroi8"],["self"]],["bool"]]],[11,"le","","",458,[[["nonzeroi8"],["self"]],["bool"]]],[11,"gt","","",458,[[["nonzeroi8"],["self"]],["bool"]]],[11,"ge","","",458,[[["nonzeroi8"],["self"]],["bool"]]],[11,"partial_cmp","std","",531,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",531,[[["self"]],["bool"]]],[11,"le","","",531,[[["self"]],["bool"]]],[11,"ge","","",531,[[["self"]],["bool"]]],[11,"gt","","",531,[[["self"]],["bool"]]],[11,"partial_cmp","std::char","",26,[[["self"],["unicodeversion"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",26,[[["self"],["unicodeversion"]],["bool"]]],[11,"le","","",26,[[["self"],["unicodeversion"]],["bool"]]],[11,"gt","","",26,[[["self"],["unicodeversion"]],["bool"]]],[11,"ge","","",26,[[["self"],["unicodeversion"]],["bool"]]],[11,"partial_cmp","std","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",531,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",531,[[["self"]],["bool"]]],[11,"le","","",531,[[["self"]],["bool"]]],[11,"ge","","",531,[[["self"]],["bool"]]],[11,"gt","","",531,[[["self"]],["bool"]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::num","",462,[[["self"],["nonzerou32"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",462,[[["self"],["nonzerou32"]],["bool"]]],[11,"le","","",462,[[["self"],["nonzerou32"]],["bool"]]],[11,"gt","","",462,[[["self"],["nonzerou32"]],["bool"]]],[11,"ge","","",462,[[["self"],["nonzerou32"]],["bool"]]],[11,"partial_cmp","std","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",531,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",531,[[["self"]],["bool"]]],[11,"le","","",531,[[["self"]],["bool"]]],[11,"ge","","",531,[[["self"]],["bool"]]],[11,"gt","","",531,[[["self"]],["bool"]]],[11,"partial_cmp","std::cell","",303,[[["cell"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",303,[[["cell"],["self"]],["bool"]]],[11,"le","","",303,[[["cell"],["self"]],["bool"]]],[11,"gt","","",303,[[["cell"],["self"]],["bool"]]],[11,"ge","","",303,[[["cell"],["self"]],["bool"]]],[11,"partial_cmp","std","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",531,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",531,[[["self"]],["bool"]]],[11,"le","","",531,[[["self"]],["bool"]]],[11,"ge","","",531,[[["self"]],["bool"]]],[11,"gt","","",531,[[["self"]],["bool"]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",531,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",531,[[["self"]],["bool"]]],[11,"le","","",531,[[["self"]],["bool"]]],[11,"ge","","",531,[[["self"]],["bool"]]],[11,"gt","","",531,[[["self"]],["bool"]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::cell","Panics",304,[[["refcell"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","Panics",304,[[["refcell"],["self"]],["bool"]]],[11,"le","","Panics",304,[[["refcell"],["self"]],["bool"]]],[11,"gt","","Panics",304,[[["refcell"],["self"]],["bool"]]],[11,"ge","","Panics",304,[[["refcell"],["self"]],["bool"]]],[11,"partial_cmp","std","",519,[[["self"],["u64"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",519,[[["self"],["u64"]],["bool"]]],[11,"le","","",519,[[["self"],["u64"]],["bool"]]],[11,"ge","","",519,[[["self"],["u64"]],["bool"]]],[11,"gt","","",519,[[["self"],["u64"]],["bool"]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::cmp","",29,[[["ordering"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std","",513,[[["self"],["u8"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",513,[[["self"],["u8"]],["bool"]]],[11,"le","","",513,[[["self"],["u8"]],["bool"]]],[11,"ge","","",513,[[["self"],["u8"]],["bool"]]],[11,"gt","","",513,[[["self"],["u8"]],["bool"]]],[11,"partial_cmp","std::num","",465,[[["self"],["nonzerousize"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",465,[[["self"],["nonzerousize"]],["bool"]]],[11,"le","","",465,[[["self"],["nonzerousize"]],["bool"]]],[11,"gt","","",465,[[["self"],["nonzerousize"]],["bool"]]],[11,"ge","","",465,[[["self"],["nonzerousize"]],["bool"]]],[11,"partial_cmp","std","",521,[[["self"],["usize"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",521,[[["self"],["usize"]],["bool"]]],[11,"le","","",521,[[["self"],["usize"]],["bool"]]],[11,"ge","","",521,[[["self"],["usize"]],["bool"]]],[11,"gt","","",521,[[["self"],["usize"]],["bool"]]],[11,"partial_cmp","","",528,[[["f32"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",528,[[["f32"],["self"]],["bool"]]],[11,"le","","",528,[[["f32"],["self"]],["bool"]]],[11,"ge","","",528,[[["f32"],["self"]],["bool"]]],[11,"gt","","",528,[[["f32"],["self"]],["bool"]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",531,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",531,[[["self"]],["bool"]]],[11,"le","","",531,[[["self"]],["bool"]]],[11,"ge","","",531,[[["self"]],["bool"]]],[11,"gt","","",531,[[["self"]],["bool"]]],[11,"partial_cmp","","",514,[[["self"],["i16"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",514,[[["self"],["i16"]],["bool"]]],[11,"le","","",514,[[["self"],["i16"]],["bool"]]],[11,"ge","","",514,[[["self"],["i16"]],["bool"]]],[11,"gt","","",514,[[["self"],["i16"]],["bool"]]],[11,"partial_cmp","std::num","",460,[[["self"],["nonzerou128"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",460,[[["self"],["nonzerou128"]],["bool"]]],[11,"le","","",460,[[["self"],["nonzerou128"]],["bool"]]],[11,"gt","","",460,[[["self"],["nonzerou128"]],["bool"]]],[11,"ge","","",460,[[["self"],["nonzerou128"]],["bool"]]],[11,"partial_cmp","std","",525,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",525,[[["self"]],["bool"]]],[11,"le","","",525,[[["self"]],["bool"]]],[11,"gt","","",525,[[["self"]],["bool"]]],[11,"ge","","",525,[[["self"]],["bool"]]],[11,"partial_cmp","","",530,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::num","",464,[[["nonzerou8"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",464,[[["nonzerou8"],["self"]],["bool"]]],[11,"le","","",464,[[["nonzerou8"],["self"]],["bool"]]],[11,"gt","","",464,[[["nonzerou8"],["self"]],["bool"]]],[11,"ge","","",464,[[["nonzerou8"],["self"]],["bool"]]],[11,"partial_cmp","std","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",518,[[["self"],["u128"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",518,[[["self"],["u128"]],["bool"]]],[11,"le","","",518,[[["self"],["u128"]],["bool"]]],[11,"ge","","",518,[[["self"],["u128"]],["bool"]]],[11,"gt","","",518,[[["self"],["u128"]],["bool"]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::num","",461,[[["nonzerou16"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",461,[[["nonzerou16"],["self"]],["bool"]]],[11,"le","","",461,[[["nonzerou16"],["self"]],["bool"]]],[11,"gt","","",461,[[["nonzerou16"],["self"]],["bool"]]],[11,"ge","","",461,[[["nonzerou16"],["self"]],["bool"]]],[11,"partial_cmp","std","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",508,[[["b"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",508,[[["b"],["self"]],["bool"]]],[11,"le","","",508,[[["b"],["self"]],["bool"]]],[11,"gt","","",508,[[["b"],["self"]],["bool"]]],[11,"ge","","",508,[[["b"],["self"]],["bool"]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::any","",300,[[["typeid"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",300,[[["typeid"],["self"]],["bool"]]],[11,"le","","",300,[[["typeid"],["self"]],["bool"]]],[11,"gt","","",300,[[["typeid"],["self"]],["bool"]]],[11,"ge","","",300,[[["typeid"],["self"]],["bool"]]],[11,"partial_cmp","std","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",531,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",531,[[["self"]],["bool"]]],[11,"le","","",531,[[["self"]],["bool"]]],[11,"ge","","",531,[[["self"]],["bool"]]],[11,"gt","","",531,[[["self"]],["bool"]]],[11,"partial_cmp","std::marker","",350,[[["self"],["phantomdata"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std","",522,[[["i8"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",522,[[["i8"],["self"]],["bool"]]],[11,"le","","",522,[[["i8"],["self"]],["bool"]]],[11,"ge","","",522,[[["i8"],["self"]],["bool"]]],[11,"gt","","",522,[[["i8"],["self"]],["bool"]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::num","",456,[[["nonzeroi32"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",456,[[["nonzeroi32"],["self"]],["bool"]]],[11,"le","","",456,[[["nonzeroi32"],["self"]],["bool"]]],[11,"gt","","",456,[[["nonzeroi32"],["self"]],["bool"]]],[11,"ge","","",456,[[["nonzeroi32"],["self"]],["bool"]]],[11,"partial_cmp","","",454,[[["self"],["nonzeroi128"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",454,[[["self"],["nonzeroi128"]],["bool"]]],[11,"le","","",454,[[["self"],["nonzeroi128"]],["bool"]]],[11,"gt","","",454,[[["self"],["nonzeroi128"]],["bool"]]],[11,"ge","","",454,[[["self"],["nonzeroi128"]],["bool"]]],[11,"partial_cmp","std","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",511,[[["i128"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",511,[[["i128"],["self"]],["bool"]]],[11,"le","","",511,[[["i128"],["self"]],["bool"]]],[11,"ge","","",511,[[["i128"],["self"]],["bool"]]],[11,"gt","","",511,[[["i128"],["self"]],["bool"]]],[11,"partial_cmp","","",523,[[["self"],["i32"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",523,[[["self"],["i32"]],["bool"]]],[11,"le","","",523,[[["self"],["i32"]],["bool"]]],[11,"ge","","",523,[[["self"],["i32"]],["bool"]]],[11,"gt","","",523,[[["self"],["i32"]],["bool"]]],[11,"partial_cmp","","",510,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::num","",459,[[["nonzeroisize"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",459,[[["nonzeroisize"],["self"]],["bool"]]],[11,"le","","",459,[[["nonzeroisize"],["self"]],["bool"]]],[11,"gt","","",459,[[["nonzeroisize"],["self"]],["bool"]]],[11,"ge","","",459,[[["nonzeroisize"],["self"]],["bool"]]],[11,"partial_cmp","std","",532,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::time","",497,[[["duration"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",497,[[["duration"],["self"]],["bool"]]],[11,"le","","",497,[[["duration"],["self"]],["bool"]]],[11,"gt","","",497,[[["duration"],["self"]],["bool"]]],[11,"ge","","",497,[[["duration"],["self"]],["bool"]]],[11,"partial_cmp","std::task","",224,[[["self"],["poll"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",224,[[["self"],["poll"]],["bool"]]],[11,"le","","",224,[[["self"],["poll"]],["bool"]]],[11,"gt","","",224,[[["self"],["poll"]],["bool"]]],[11,"ge","","",224,[[["self"],["poll"]],["bool"]]],[11,"partial_cmp","std","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::convert","",319,[[["self"],["infallible"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::option","",91,[[["option"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",91,[[["option"],["self"]],["bool"]]],[11,"le","","",91,[[["option"],["self"]],["bool"]]],[11,"gt","","",91,[[["option"],["self"]],["bool"]]],[11,"ge","","",91,[[["option"],["self"]],["bool"]]],[11,"partial_cmp","std","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::ops","",90,[[["generatorstate"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",90,[[["generatorstate"],["self"]],["bool"]]],[11,"le","","",90,[[["generatorstate"],["self"]],["bool"]]],[11,"gt","","",90,[[["generatorstate"],["self"]],["bool"]]],[11,"ge","","",90,[[["generatorstate"],["self"]],["bool"]]],[11,"partial_cmp","std","",509,[[["str"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::fmt","",235,[[["error"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::num","",457,[[["nonzeroi64"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",457,[[["nonzeroi64"],["self"]],["bool"]]],[11,"le","","",457,[[["nonzeroi64"],["self"]],["bool"]]],[11,"gt","","",457,[[["nonzeroi64"],["self"]],["bool"]]],[11,"ge","","",457,[[["nonzeroi64"],["self"]],["bool"]]],[11,"partial_cmp","std","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",520,[[["i64"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",520,[[["i64"],["self"]],["bool"]]],[11,"le","","",520,[[["i64"],["self"]],["bool"]]],[11,"ge","","",520,[[["i64"],["self"]],["bool"]]],[11,"gt","","",520,[[["i64"],["self"]],["bool"]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::mem","",353,[[["manuallydrop"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",353,[[["manuallydrop"],["self"]],["bool"]]],[11,"le","","",353,[[["manuallydrop"],["self"]],["bool"]]],[11,"gt","","",353,[[["manuallydrop"],["self"]],["bool"]]],[11,"ge","","",353,[[["manuallydrop"],["self"]],["bool"]]],[11,"partial_cmp","std::num","",155,[[["self"],["wrapping"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",155,[[["self"],["wrapping"]],["bool"]]],[11,"le","","",155,[[["self"],["wrapping"]],["bool"]]],[11,"gt","","",155,[[["self"],["wrapping"]],["bool"]]],[11,"ge","","",155,[[["self"],["wrapping"]],["bool"]]],[11,"partial_cmp","std","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::num","",463,[[["self"],["nonzerou64"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",463,[[["self"],["nonzerou64"]],["bool"]]],[11,"le","","",463,[[["self"],["nonzerou64"]],["bool"]]],[11,"gt","","",463,[[["self"],["nonzerou64"]],["bool"]]],[11,"ge","","",463,[[["self"],["nonzerou64"]],["bool"]]],[11,"partial_cmp","std::option","",360,[[["noneerror"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std","",525,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",525,[[["self"]],["bool"]]],[11,"le","","",525,[[["self"]],["bool"]]],[11,"gt","","",525,[[["self"]],["bool"]]],[11,"ge","","",525,[[["self"]],["bool"]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::result","",93,[[["self"],["result"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",93,[[["self"],["result"]],["bool"]]],[11,"le","","",93,[[["self"],["result"]],["bool"]]],[11,"gt","","",93,[[["self"],["result"]],["bool"]]],[11,"ge","","",93,[[["self"],["result"]],["bool"]]],[11,"partial_cmp","std","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::pin","",361,[[["pin"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",361,[[["pin"],["self"]],["bool"]]],[11,"le","","",361,[[["pin"],["self"]],["bool"]]],[11,"gt","","",361,[[["pin"],["self"]],["bool"]]],[11,"ge","","",361,[[["pin"],["self"]],["bool"]]],[11,"partial_cmp","std","",531,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",531,[[["self"]],["bool"]]],[11,"le","","",531,[[["self"]],["bool"]]],[11,"ge","","",531,[[["self"]],["bool"]]],[11,"gt","","",531,[[["self"]],["bool"]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::marker","",351,[[["phantompinned"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std","",529,[[["f64"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",529,[[["f64"],["self"]],["bool"]]],[11,"le","","",529,[[["f64"],["self"]],["bool"]]],[11,"ge","","",529,[[["f64"],["self"]],["bool"]]],[11,"gt","","",529,[[["f64"],["self"]],["bool"]]],[11,"partial_cmp","","",531,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",531,[[["self"]],["bool"]]],[11,"le","","",531,[[["self"]],["bool"]]],[11,"ge","","",531,[[["self"]],["bool"]]],[11,"gt","","",531,[[["self"]],["bool"]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::cmp","",30,[[["reverse"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",30,[[["reverse"],["self"]],["bool"]]],[11,"le","","",30,[[["reverse"],["self"]],["bool"]]],[11,"gt","","",30,[[["reverse"],["self"]],["bool"]]],[11,"ge","","",30,[[["reverse"],["self"]],["bool"]]],[11,"partial_cmp","std","",512,[[["self"],["bool"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",531,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",531,[[["self"]],["bool"]]],[11,"le","","",531,[[["self"]],["bool"]]],[11,"ge","","",531,[[["self"]],["bool"]]],[11,"gt","","",531,[[["self"]],["bool"]]],[11,"partial_cmp","","",516,[[["u16"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",516,[[["u16"],["self"]],["bool"]]],[11,"le","","",516,[[["u16"],["self"]],["bool"]]],[11,"ge","","",516,[[["u16"],["self"]],["bool"]]],[11,"gt","","",516,[[["u16"],["self"]],["bool"]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",526,[[["self"],["char"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",526,[[["self"],["char"]],["bool"]]],[11,"le","","",526,[[["self"],["char"]],["bool"]]],[11,"ge","","",526,[[["self"],["char"]],["bool"]]],[11,"gt","","",526,[[["self"],["char"]],["bool"]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::ptr","",362,[[["self"],["nonnull"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std","",531,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",531,[[["self"]],["bool"]]],[11,"le","","",531,[[["self"]],["bool"]]],[11,"ge","","",531,[[["self"]],["bool"]]],[11,"gt","","",531,[[["self"]],["bool"]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",517,[[["u32"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",517,[[["u32"],["self"]],["bool"]]],[11,"le","","",517,[[["u32"],["self"]],["bool"]]],[11,"ge","","",517,[[["u32"],["self"]],["bool"]]],[11,"gt","","",517,[[["u32"],["self"]],["bool"]]],[11,"partial_cmp","","",524,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"steps_between","","",515,[[["isize"]],[["option",["usize"]],["usize"]]]],[11,"add_usize","","",515,[[["self"],["usize"]],[["isize"],["option",["isize"]]]]],[11,"sub_usize","","",515,[[["self"],["usize"]],[["isize"],["option",["isize"]]]]],[11,"replace_one","","",515,[[["self"]],["isize"]]],[11,"replace_zero","","",515,[[["self"]],["isize"]]],[11,"add_one","","",515,[[["self"]],["isize"]]],[11,"sub_one","","",515,[[["self"]],["isize"]]],[11,"steps_between","","",516,[[["u16"]],[["option",["usize"]],["usize"]]]],[11,"add_usize","","",516,[[["self"],["usize"]],[["u16"],["option",["u16"]]]]],[11,"sub_usize","","",516,[[["self"],["usize"]],[["u16"],["option",["u16"]]]]],[11,"replace_one","","",516,[[["self"]],["u16"]]],[11,"replace_zero","","",516,[[["self"]],["u16"]]],[11,"add_one","","",516,[[["self"]],["u16"]]],[11,"sub_one","","",516,[[["self"]],["u16"]]],[11,"steps_between","","",511,[[["i128"]],[["option",["usize"]],["usize"]]]],[11,"add_usize","","",511,[[["self"],["usize"]],[["option",["i128"]],["i128"]]]],[11,"sub_usize","","",511,[[["self"],["usize"]],[["option",["i128"]],["i128"]]]],[11,"replace_one","","",511,[[["self"]],["i128"]]],[11,"replace_zero","","",511,[[["self"]],["i128"]]],[11,"add_one","","",511,[[["self"]],["i128"]]],[11,"sub_one","","",511,[[["self"]],["i128"]]],[11,"steps_between","","",523,[[["i32"]],[["option",["usize"]],["usize"]]]],[11,"add_usize","","",523,[[["self"],["usize"]],[["option",["i32"]],["i32"]]]],[11,"sub_usize","","",523,[[["self"],["usize"]],[["option",["i32"]],["i32"]]]],[11,"replace_one","","",523,[[["self"]],["i32"]]],[11,"replace_zero","","",523,[[["self"]],["i32"]]],[11,"add_one","","",523,[[["self"]],["i32"]]],[11,"sub_one","","",523,[[["self"]],["i32"]]],[11,"steps_between","","",517,[[["u32"]],[["option",["usize"]],["usize"]]]],[11,"add_usize","","",517,[[["self"],["usize"]],[["u32"],["option",["u32"]]]]],[11,"sub_usize","","",517,[[["self"],["usize"]],[["u32"],["option",["u32"]]]]],[11,"replace_one","","",517,[[["self"]],["u32"]]],[11,"replace_zero","","",517,[[["self"]],["u32"]]],[11,"add_one","","",517,[[["self"]],["u32"]]],[11,"sub_one","","",517,[[["self"]],["u32"]]],[11,"steps_between","","",513,[[["u8"]],[["option",["usize"]],["usize"]]]],[11,"add_usize","","",513,[[["self"],["usize"]],[["u8"],["option",["u8"]]]]],[11,"sub_usize","","",513,[[["self"],["usize"]],[["u8"],["option",["u8"]]]]],[11,"replace_one","","",513,[[["self"]],["u8"]]],[11,"replace_zero","","",513,[[["self"]],["u8"]]],[11,"add_one","","",513,[[["self"]],["u8"]]],[11,"sub_one","","",513,[[["self"]],["u8"]]],[11,"steps_between","","",521,[[["usize"]],[["option",["usize"]],["usize"]]]],[11,"add_usize","","",521,[[["self"],["usize"]],[["option",["usize"]],["usize"]]]],[11,"sub_usize","","",521,[[["self"],["usize"]],[["option",["usize"]],["usize"]]]],[11,"replace_one","","",521,[[["self"]],["usize"]]],[11,"replace_zero","","",521,[[["self"]],["usize"]]],[11,"add_one","","",521,[[["self"]],["usize"]]],[11,"sub_one","","",521,[[["self"]],["usize"]]],[11,"steps_between","","",519,[[["u64"]],[["option",["usize"]],["usize"]]]],[11,"add_usize","","",519,[[["self"],["usize"]],[["u64"],["option",["u64"]]]]],[11,"sub_usize","","",519,[[["self"],["usize"]],[["u64"],["option",["u64"]]]]],[11,"replace_one","","",519,[[["self"]],["u64"]]],[11,"replace_zero","","",519,[[["self"]],["u64"]]],[11,"add_one","","",519,[[["self"]],["u64"]]],[11,"sub_one","","",519,[[["self"]],["u64"]]],[11,"steps_between","","",522,[[["i8"]],[["option",["usize"]],["usize"]]]],[11,"add_usize","","",522,[[["self"],["usize"]],[["option",["i8"]],["i8"]]]],[11,"sub_usize","","",522,[[["self"],["usize"]],[["option",["i8"]],["i8"]]]],[11,"replace_one","","",522,[[["self"]],["i8"]]],[11,"replace_zero","","",522,[[["self"]],["i8"]]],[11,"add_one","","",522,[[["self"]],["i8"]]],[11,"sub_one","","",522,[[["self"]],["i8"]]],[11,"steps_between","","",514,[[["i16"]],[["option",["usize"]],["usize"]]]],[11,"add_usize","","",514,[[["self"],["usize"]],[["option",["i16"]],["i16"]]]],[11,"sub_usize","","",514,[[["self"],["usize"]],[["option",["i16"]],["i16"]]]],[11,"replace_one","","",514,[[["self"]],["i16"]]],[11,"replace_zero","","",514,[[["self"]],["i16"]]],[11,"add_one","","",514,[[["self"]],["i16"]]],[11,"sub_one","","",514,[[["self"]],["i16"]]],[11,"steps_between","","",520,[[["i64"]],[["option",["usize"]],["usize"]]]],[11,"add_usize","","",520,[[["self"],["usize"]],[["i64"],["option",["i64"]]]]],[11,"sub_usize","","",520,[[["self"],["usize"]],[["i64"],["option",["i64"]]]]],[11,"replace_one","","",520,[[["self"]],["i64"]]],[11,"replace_zero","","",520,[[["self"]],["i64"]]],[11,"add_one","","",520,[[["self"]],["i64"]]],[11,"sub_one","","",520,[[["self"]],["i64"]]],[11,"steps_between","","",518,[[["u128"]],[["option",["usize"]],["usize"]]]],[11,"add_usize","","",518,[[["self"],["usize"]],[["u128"],["option",["u128"]]]]],[11,"sub_usize","","",518,[[["self"],["usize"]],[["u128"],["option",["u128"]]]]],[11,"replace_one","","",518,[[["self"]],["u128"]]],[11,"replace_zero","","",518,[[["self"]],["u128"]]],[11,"add_one","","",518,[[["self"]],["u128"]]],[11,"sub_one","","",518,[[["self"]],["u128"]]],[11,"rem","","",516,[[["u16"]]]],[11,"rem","std::num","",155,[[["wrapping"]]]],[11,"rem","std","",517,[[["u32"]],["u32"]]],[11,"rem","","",523,[[["i32"]],["i32"]]],[11,"rem","","",516,[[["u16"]],["u16"]]],[11,"rem","","",522,[[["i8"]]]],[11,"rem","std::num","",155,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"rem","std","",515,[[["isize"]]]],[11,"rem","","",528,[[["f32"]]]],[11,"rem","","",522,[[["i8"]]]],[11,"rem","","",523,[[["i32"]]]],[11,"rem","","",521,[[["usize"]],["usize"]]],[11,"rem","","",514,[[["i16"]]]],[11,"rem","","",520,[[["i64"]]]],[11,"rem","std::num","",155,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"rem","std","",529,[[["f64"]],["f64"]]],[11,"rem","","",519,[[["u64"]]]],[11,"rem","std::num","",155,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"rem","std","",513,[[["u8"]],["u8"]]],[11,"rem","","",513,[[["u8"]]]],[11,"rem","","",516,[[["u16"]]]],[11,"rem","","",514,[[["i16"]]]],[11,"rem","","",522,[[["i8"]]]],[11,"rem","std::num","",155,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"rem","std","",521,[[["usize"]]]],[11,"rem","std::num","",155,[[["u32"],["wrapping",["u32"]]],[["u32"],["wrapping",["u32"]]]]],[11,"rem","std","",529,[[["f64"]]]],[11,"rem","","",529,[[["f64"]]]],[11,"rem","std::num","",155,[[["wrapping"]]]],[11,"rem","std","",517,[[["u32"]]]],[11,"rem","std::num","",155,[[["wrapping"]]]],[11,"rem","std","",529,[[["f64"]]]],[11,"rem","std::num","",155,[[["wrapping"]]]],[11,"rem","std","",518,[[["u128"]]]],[11,"rem","","",523,[[["i32"]]]],[11,"rem","std::num","",155,[[["wrapping"]]]],[11,"rem","std","",521,[[["usize"]]]],[11,"rem","","",528,[[["f32"]]]],[11,"rem","","",519,[[["u64"]]]],[11,"rem","","",511,[[["i128"]]]],[11,"rem","","",523,[[["i32"]]]],[11,"rem","","",511,[[["i128"]]]],[11,"rem","std::num","",155,[[["wrapping"]]]],[11,"rem","std","",511,[[["i128"]],["i128"]]],[11,"rem","","",520,[[["i64"]]]],[11,"rem","","",520,[[["i64"]],["i64"]]],[11,"rem","","",521,[[["usize"]]]],[11,"rem","","",528,[[["f32"]],["f32"]]],[11,"rem","","",518,[[["u128"]],["u128"]]],[11,"rem","","",518,[[["u128"]]]],[11,"rem","","",515,[[["isize"]]]],[11,"rem","","",513,[[["u8"]]]],[11,"rem","","",514,[[["i16"]]]],[11,"rem","std::num","",155,[[["u64"],["wrapping",["u64"]]],[["u64"],["wrapping",["u64"]]]]],[11,"rem","std","",515,[[["isize"]],["isize"]]],[11,"rem","","",516,[[["u16"]]]],[11,"rem","std::num","",155,[[["wrapping"]]]],[11,"rem","std","",517,[[["u32"]]]],[11,"rem","std::num","",155,[[["wrapping"]]]],[11,"rem","","",155,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"rem","","",155,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"rem","std","",522,[[["i8"]],["i8"]]],[11,"rem","std::num","",155,[[["wrapping"]]]],[11,"rem","std","",517,[[["u32"]]]],[11,"rem","std::num","",155,[[["wrapping"]]]],[11,"rem","","",155,[[["i128"],["wrapping",["i128"]]],[["i128"],["wrapping",["i128"]]]]],[11,"rem","std","",519,[[["u64"]]]],[11,"rem","std::num","",155,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"rem","std","",515,[[["isize"]]]],[11,"rem","","",520,[[["i64"]]]],[11,"rem","std::num","",155,[[["wrapping"]]]],[11,"rem","std","",511,[[["i128"]]]],[11,"rem","","",528,[[["f32"]]]],[11,"rem","std::num","",155,[[["wrapping",["u16"]],["u16"]],[["wrapping",["u16"]],["u16"]]]],[11,"rem","std","",518,[[["u128"]]]],[11,"rem","","",519,[[["u64"]],["u64"]]],[11,"rem","std::num","",155,[[["wrapping"]]]],[11,"rem","","",155,[[["wrapping",["u128"]],["u128"]],[["wrapping",["u128"]],["u128"]]]],[11,"rem","std","",514,[[["i16"]],["i16"]]],[11,"rem","","",513,[[["u8"]]]],[11,"add_assign","std::num","",155,[[["wrapping",["u16"]],["self"],["u16"]]]],[11,"add_assign","std","",518,[[["self"],["u128"]]]],[11,"add_assign","","",519,[[["self"],["u64"]]]],[11,"add_assign","std::num","",155,[[["self"],["u32"],["wrapping",["u32"]]]]],[11,"add_assign","std","",511,[[["self"],["i128"]]]],[11,"add_assign","","",523,[[["self"],["i32"]]]],[11,"add_assign","std::time","",497,[[["self"],["duration"]]]],[11,"add_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"add_assign","std","",529,[[["self"],["f64"]]]],[11,"add_assign","","",522,[[["self"],["i8"]]]],[11,"add_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"add_assign","","",155,[[["self"],["wrapping",["i32"]],["i32"]]]],[11,"add_assign","std","",522,[[["self"],["i8"]]]],[11,"add_assign","std::num","",155,[[["wrapping",["i8"]],["self"],["i8"]]]],[11,"add_assign","","",155,[[["self"],["wrapping"]]]],[11,"add_assign","","",155,[[["self"],["u64"],["wrapping",["u64"]]]]],[11,"add_assign","","",155,[[["self"],["wrapping"]]]],[11,"add_assign","std","",518,[[["self"],["u128"]]]],[11,"add_assign","","",517,[[["self"],["u32"]]]],[11,"add_assign","","",520,[[["i64"],["self"]]]],[11,"add_assign","","",516,[[["u16"],["self"]]]],[11,"add_assign","std::num","",155,[[["wrapping"],["self"]]]],[11,"add_assign","std","",513,[[["self"],["u8"]]]],[11,"add_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"add_assign","std","",514,[[["self"],["i16"]]]],[11,"add_assign","","",528,[[["f32"],["self"]]]],[11,"add_assign","","",523,[[["self"],["i32"]]]],[11,"add_assign","","",519,[[["self"],["u64"]]]],[11,"add_assign","std::num","",155,[[["wrapping"],["self"]]]],[11,"add_assign","","",155,[[["wrapping"],["self"]]]],[11,"add_assign","std","",517,[[["self"],["u32"]]]],[11,"add_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"add_assign","","",155,[[["self"],["wrapping"]]]],[11,"add_assign","","",155,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"add_assign","","",155,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"add_assign","std","",520,[[["i64"],["self"]]]],[11,"add_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"add_assign","std","",513,[[["self"],["u8"]]]],[11,"add_assign","","",514,[[["self"],["i16"]]]],[11,"add_assign","","",515,[[["isize"],["self"]]]],[11,"add_assign","","",529,[[["self"],["f64"]]]],[11,"add_assign","std::num","",155,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"add_assign","std","",521,[[["self"],["usize"]]]],[11,"add_assign","std::num","",155,[[["wrapping",["usize"]],["self"],["usize"]]]],[11,"add_assign","","",155,[[["self"],["i128"],["wrapping",["i128"]]]]],[11,"add_assign","","",155,[[["wrapping",["u128"]],["self"],["u128"]]]],[11,"add_assign","std","",516,[[["u16"],["self"]]]],[11,"add_assign","","",528,[[["f32"],["self"]]]],[11,"add_assign","std::num","",155,[[["self"],["wrapping",["u8"]],["u8"]]]],[11,"add_assign","std","",511,[[["self"],["i128"]]]],[11,"add_assign","","",521,[[["self"],["usize"]]]],[11,"add_assign","","",515,[[["isize"],["self"]]]],[11,"add_assign","std::num","",155,[[["self"],["wrapping"]]]],[11,"deref_mut","std::mem","",353,[[["self"]],["t"]]],[11,"deref_mut","std","",508,[[["self"]],["t"]]],[11,"deref_mut","std::ffi","",436,[[["self"]],["valistimpl"]]],[11,"deref_mut","std::pin","",361,[[["self"]]]],[11,"deref_mut","std::cell","",308,[[["self"]],["t"]]],[11,"next","std::iter","",337,[[["self"]],["option"]]],[11,"size_hint","","",337,[[["self"]]]],[11,"try_fold","","",337,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",337,[[["acc"],["fold"]],["acc"]]],[11,"next","std::str","",269,[[["self"]],[["option",["str"]],["str"]]]],[11,"size_hint","","",269,[[["self"]]]],[11,"last","","",269,[[],[["option",["str"]],["str"]]]],[11,"next","","",282,[[["self"]],["option"]]],[11,"next","","",273,[[["self"]],[["option",["char"]],["char"]]]],[11,"count","","",273,[[],["usize"]]],[11,"size_hint","","",273,[[["self"]]]],[11,"last","","",273,[[],[["option",["char"]],["char"]]]],[11,"next","std::iter","",341,[[["self"]],["option"]]],[11,"size_hint","","",341,[[["self"]]]],[11,"try_fold","","",341,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",341,[[["acc"],["fold"]],["acc"]]],[11,"next","std::ops","",356,[[["self"]],["option"]]],[11,"size_hint","","",356,[[["self"]]]],[11,"nth","","",356,[[["self"],["usize"]],["option"]]],[11,"try_fold","","",356,[[["self"],["b"],["f"]],["r"]]],[11,"last","","",356,[[],["option"]]],[11,"min","","",356,[[],["option"]]],[11,"max","","",356,[[],["option"]]],[11,"next","std::str","",275,[[["self"]],[["option",["char"]],["char"]]]],[11,"size_hint","","",275,[[["self"]]]],[11,"try_fold","","",275,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",275,[[["acc"],["fold"]],["acc"]]],[11,"next","std::char","",310,[[["self"]],[["option",["char"]],["char"]]]],[11,"size_hint","","",310,[[["self"]]]],[11,"count","","",310,[[],["usize"]]],[11,"last","","",310,[[],[["option",["char"]],["char"]]]],[11,"next","std::str","",272,[[["self"]],["option"]]],[11,"count","","",272,[[],["usize"]]],[11,"size_hint","","",272,[[["self"]]]],[11,"last","","",272,[[],["option"]]],[11,"next","std::iter","",349,[[["self"]],["option"]]],[11,"size_hint","","",349,[[["self"]]]],[11,"try_fold","","",349,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",349,[[["acc"],["fold"]],["acc"]]],[11,"next","std::slice","",261,[[["self"]],["option"]]],[11,"size_hint","","",261,[[["self"]]]],[11,"next","std::iter","",345,[[["self"]],["option"]]],[11,"size_hint","","",345,[[["self"]]]],[11,"try_fold","","",345,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",345,[[["acc"],["fold"]],["acc"]]],[11,"next","std::str","",276,[[["self"]],[["option",["char"]],["char"]]]],[11,"size_hint","","",276,[[["self"]]]],[11,"try_fold","","",276,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",276,[[["acc"],["fold"]],["acc"]]],[11,"next","std::iter","",336,[[["self"]],["option"]]],[11,"size_hint","","",336,[[["self"]]]],[11,"count","","",336,[[],["usize"]]],[11,"try_fold","","",336,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",336,[[["acc"],["fold"]],["acc"]]],[11,"next","std::char","",311,[[["self"]],[["option",["char"]],["char"]]]],[11,"size_hint","","",311,[[["self"]]]],[11,"count","","",311,[[],["usize"]]],[11,"nth","","",311,[[["self"],["usize"]],[["option",["char"]],["char"]]]],[11,"last","","",311,[[],[["option",["char"]],["char"]]]],[11,"next","std::slice","",254,[[["self"]],["option"]]],[11,"size_hint","","",254,[[["self"]]]],[11,"count","","",254,[[],["usize"]]],[11,"nth","","",254,[[["self"],["usize"]],["option"]]],[11,"last","","",254,[[],["option"]]],[11,"next","std::result","",363,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",363,[[["self"]]]],[11,"next","std::iter","",348,[[["self"]],["option"]]],[11,"nth","","",348,[[["self"],["usize"]],["option"]]],[11,"last","","",348,[[],["option"]]],[11,"count","","",348,[[],["usize"]]],[11,"size_hint","","",348,[[["self"]]]],[11,"try_fold","","",348,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",348,[[["acc"],["fold"]],["acc"]]],[11,"next","","",323,[[["self"]],["option"]]],[11,"next","std::slice","",253,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",253,[[["self"]]]],[11,"count","","",253,[[],["usize"]]],[11,"nth","","",253,[[["self"],["usize"]],[["option"],["t"]]]],[11,"last","","",253,[[],[["option"],["t"]]]],[11,"position","","",253,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"rposition","","",253,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"next","std::str","",288,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","","",277,[[["self"]],[["option",["char"]],["char"]]]],[11,"size_hint","","",277,[[["self"]]]],[11,"try_fold","","",277,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",277,[[["acc"],["fold"]],["acc"]]],[11,"next","","",286,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","std::array","",302,[[["self"]],["option"]]],[11,"size_hint","","",302,[[["self"]]]],[11,"count","","",302,[[],["usize"]]],[11,"last","","",302,[[],["option"]]],[11,"next","std::iter","",328,[[["self"]],["option"]]],[11,"size_hint","","",328,[[["self"]]]],[11,"next","std::str","",268,[[["self"]],[["u16"],["option",["u16"]]]]],[11,"size_hint","","",268,[[["self"]]]],[11,"next","std::result","",365,[[["self"]],["option"]]],[11,"size_hint","","",365,[[["self"]]]],[11,"next","std::str","",280,[[["self"]],[["option",["str"]],["str"]]]],[11,"size_hint","","",280,[[["self"]]]],[11,"next","std::slice","",263,[[["self"]],["option"]]],[11,"size_hint","","",263,[[["self"]]]],[11,"next","std::str","",284,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","std::slice","",258,[[["self"]],["option"]]],[11,"size_hint","","",258,[[["self"]]]],[11,"next","std::char","",317,[[["self"]],[["result",["char","decodeutf16error"]],["option",["result"]]]]],[11,"size_hint","","",317,[[["self"]]]],[11,"next","std::str","",270,[[["self"]],[["option",["str"]],["str"]]]],[11,"size_hint","","",270,[[["self"]]]],[11,"last","","",270,[[],[["option",["str"]],["str"]]]],[11,"next","std::iter","",333,[[["self"]],["option"]]],[11,"count","","",333,[[],["usize"]]],[11,"try_fold","","",333,[[["self"],["acc"],["f"]],["r"]]],[11,"fold","","",333,[[["acc"],["f"]],["acc"]]],[11,"nth","","",333,[[["self"],["usize"]],["option"]]],[11,"find","","",333,[[["self"],["p"]],["option"]]],[11,"last","","",333,[[],["option"]]],[11,"size_hint","","",333,[[["self"]]]],[11,"next","","",338,[[["self"]],["option"]]],[11,"size_hint","","",338,[[["self"]]]],[11,"try_fold","","",338,[[["self"],["acc"],["g"]],["r"]]],[11,"fold","","",338,[[["acc"],["g"]],["acc"]]],[11,"next","std::slice","",245,[[["self"]],["option"]]],[11,"size_hint","","",245,[[["self"]]]],[11,"count","","",245,[[],["usize"]]],[11,"nth","","",245,[[["self"],["usize"]],["option"]]],[11,"last","","",245,[[],["option"]]],[11,"next","","",257,[[["self"]],["option"]]],[11,"size_hint","","",257,[[["self"]]]],[11,"count","","",257,[[],["usize"]]],[11,"nth","","",257,[[["self"],["usize"]],["option"]]],[11,"last","","",257,[[],["option"]]],[11,"next","std::iter","",339,[[["self"]],["option"]]],[11,"size_hint","","",339,[[["self"]]]],[11,"nth","","",339,[[["self"],["usize"]],["option"]]],[11,"try_fold","","",339,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",339,[[["acc"],["f"]],["acc"]]],[11,"find","","",339,[[["self"],["p"]],["option"]]],[11,"next","","",322,[[["self"]],["option"]]],[11,"size_hint","","",322,[[["self"]]]],[11,"next","","",346,[[["self"]],["option"]]],[11,"nth","","",346,[[["self"],["usize"]],["option"]]],[11,"size_hint","","",346,[[["self"]]]],[11,"try_fold","","",346,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","","",331,[[["self"]],["option"]]],[11,"size_hint","","",331,[[["self"]]]],[11,"try_fold","","",331,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",331,[[["acc"],["fold"]],["acc"]]],[11,"next","std::slice","",262,[[["self"]],["option"]]],[11,"size_hint","","",262,[[["self"]]]],[11,"next","","",260,[[["self"]],["option"]]],[11,"size_hint","","",260,[[["self"]]]],[11,"next","std::char","",314,[[["self"]],[["option",["char"]],["char"]]]],[11,"size_hint","","",314,[[["self"]]]],[11,"next","std::slice","",251,[[["self"]],["option"]]],[11,"size_hint","","",251,[[["self"]]]],[11,"next","std::str","",287,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","std::ops","",83,[[["self"]],["option"]]],[11,"size_hint","","",83,[[["self"]]]],[11,"nth","","",83,[[["self"],["usize"]],["option"]]],[11,"next","std::iter","",329,[[["self"]],["option"]]],[11,"size_hint","","",329,[[["self"]]]],[11,"try_fold","","",329,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",329,[[["acc"],["f"]],["acc"]]],[11,"next","","",334,[[["self"]],["option"]]],[11,"size_hint","","",334,[[["self"]]]],[11,"try_fold","","",334,[[["self"],["acc"],["f"]],["r"]]],[11,"next","std::ascii","",367,[[["self"]],[["u8"],["option",["u8"]]]]],[11,"size_hint","","",367,[[["self"]]]],[11,"last","","",367,[[],[["u8"],["option",["u8"]]]]],[11,"next","std::slice","",248,[[["self"]],["option"]]],[11,"size_hint","","",248,[[["self"]]]],[11,"count","","",248,[[],["usize"]]],[11,"nth","","",248,[[["self"],["usize"]],["option"]]],[11,"last","","",248,[[],["option"]]],[11,"next","std::str","",290,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","std::slice","",246,[[["self"]],["option"]]],[11,"size_hint","","",246,[[["self"]]]],[11,"count","","",246,[[],["usize"]]],[11,"nth","","",246,[[["self"],["usize"]],["option"]]],[11,"last","","",246,[[],["option"]]],[11,"next","std::iter","",330,[[["self"]],["option"]]],[11,"size_hint","","",330,[[["self"]]]],[11,"try_fold","","",330,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",330,[[["acc"],["f"]],["acc"]]],[11,"next","","",343,[[["self"]],["option"]]],[11,"size_hint","","",343,[[["self"]]]],[11,"try_fold","","",343,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","std::str","",289,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","","",281,[[["self"]],["option"]]],[11,"next","std::iter","",325,[[["self"]],["option"]]],[11,"size_hint","","",325,[[["self"]]]],[11,"next","std::str","",279,[[["self"]],[["option",["str"]],["str"]]]],[11,"size_hint","","",279,[[["self"]]]],[11,"last","","",279,[[],[["option",["str"]],["str"]]]],[11,"next","std::option","",359,[[["self"]],["option"]]],[11,"size_hint","","",359,[[["self"]]]],[11,"next","std::slice","",252,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",252,[[["self"]]]],[11,"count","","",252,[[],["usize"]]],[11,"nth","","",252,[[["self"],["usize"]],[["option"],["t"]]]],[11,"last","","",252,[[],[["option"],["t"]]]],[11,"position","","",252,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"rposition","","",252,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"is_sorted_by","","",252,[[["f"]],["bool"]]],[11,"next","","",249,[[["self"]],["option"]]],[11,"size_hint","","",249,[[["self"]]]],[11,"count","","",249,[[],["usize"]]],[11,"nth","","",249,[[["self"],["usize"]],["option"]]],[11,"last","","",249,[[],["option"]]],[11,"next","std","",508,[[["self"]],["option"]]],[11,"size_hint","","",508,[[["self"]]]],[11,"nth","","",508,[[["self"],["usize"]],["option"]]],[11,"next","std::result","",364,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",364,[[["self"]]]],[11,"next","std::str","",283,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","std::slice","",259,[[["self"]],["option"]]],[11,"size_hint","","",259,[[["self"]]]],[11,"next","std::option","",357,[[["self"]],[["option"],["a"]]]],[11,"size_hint","","",357,[[["self"]]]],[11,"next","std::char","",312,[[["self"]],[["option",["char"]],["char"]]]],[11,"size_hint","","",312,[[["self"]]]],[11,"next","std::option","",358,[[["self"]],[["option"],["a"]]]],[11,"size_hint","","",358,[[["self"]]]],[11,"next","std::iter","",347,[[["self"]],["option"]]],[11,"size_hint","","",347,[[["self"]]]],[11,"try_fold","","",347,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","","Overflow Behavior",335,[[["self"]],["option"]]],[11,"size_hint","","",335,[[["self"]]]],[11,"nth","","",335,[[["self"],["usize"]],["option"]]],[11,"count","","",335,[[],["usize"]]],[11,"try_fold","","",335,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",335,[[["acc"],["fold"]],["acc"]]],[11,"next","","",327,[[["self"]],["option"]]],[11,"size_hint","","",327,[[["self"]]]],[11,"next","","",342,[[["self"]],["option"]]],[11,"count","","",342,[[],["usize"]]],[11,"nth","","",342,[[["self"],["usize"]],["option"]]],[11,"last","","",342,[[],["option"]]],[11,"size_hint","","",342,[[["self"]]]],[11,"try_fold","","",342,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",342,[[["acc"],["fold"]],["acc"]]],[11,"next","","",344,[[["self"]],["option"]]],[11,"nth","","",344,[[["self"],["usize"]],["option"]]],[11,"count","","",344,[[],["usize"]]],[11,"last","","",344,[[],["option"]]],[11,"size_hint","","",344,[[["self"]]]],[11,"try_fold","","",344,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",344,[[["acc"],["fold"]],["acc"]]],[11,"next","std::str","",271,[[["self"]],[["u8"],["option",["u8"]]]]],[11,"size_hint","","",271,[[["self"]]]],[11,"count","","",271,[[],["usize"]]],[11,"last","","",271,[[],["option"]]],[11,"nth","","",271,[[["self"],["usize"]],["option"]]],[11,"all","","",271,[[["self"],["f"]],["bool"]]],[11,"any","","",271,[[["self"],["f"]],["bool"]]],[11,"find","","",271,[[["self"],["p"]],["option"]]],[11,"position","","",271,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"rposition","","",271,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"next","std::iter","",340,[[["self"]],["option"]]],[11,"size_hint","","",340,[[["self"]]]],[11,"nth","","",340,[[["self"],["usize"]],["option"]]],[11,"next","std::slice","",256,[[["self"]],["option"]]],[11,"size_hint","","",256,[[["self"]]]],[11,"count","","",256,[[],["usize"]]],[11,"nth","","",256,[[["self"],["usize"]],["option"]]],[11,"last","","",256,[[],["option"]]],[11,"next","std::iter","",332,[[["self"]],["option"]]],[11,"size_hint","","",332,[[["self"]]]],[11,"nth","","",332,[[["self"],["usize"]],["option"]]],[11,"try_fold","","",332,[[["self"],["acc"],["f"]],["r"]]],[11,"next","std::slice","",255,[[["self"]],["option"]]],[11,"size_hint","","",255,[[["self"]]]],[11,"count","","",255,[[],["usize"]]],[11,"nth","","",255,[[["self"],["usize"]],["option"]]],[11,"last","","",255,[[],["option"]]],[11,"next","std::ops","",82,[[["self"]],["option"]]],[11,"size_hint","","",82,[[["self"]]]],[11,"nth","","",82,[[["self"],["usize"]],["option"]]],[11,"last","","",82,[[],["option"]]],[11,"min","","",82,[[],["option"]]],[11,"max","","",82,[[],["option"]]],[11,"next","std::iter","",326,[[["self"]],["option"]]],[11,"size_hint","","",326,[[["self"]]]],[11,"next","","",348,[[["self"]],["option"]]],[11,"nth","","",348,[[["self"],["usize"]],["option"]]],[11,"last","","",348,[[],["option"]]],[11,"count","","",348,[[],["usize"]]],[11,"size_hint","","",348,[[["self"]]]],[11,"try_fold","","",348,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",348,[[["acc"],["fold"]],["acc"]]],[11,"next","","",324,[[["self"]],["option"]]],[11,"size_hint","","",324,[[["self"]]]],[11,"next","std::char","",313,[[["self"]],[["option",["char"]],["char"]]]],[11,"size_hint","","",313,[[["self"]]]],[11,"next","std::str","",285,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","std::slice","",250,[[["self"]],["option"]]],[11,"size_hint","","",250,[[["self"]]]],[11,"next","","",247,[[["self"]],["option"]]],[11,"size_hint","","",247,[[["self"]]]],[11,"count","","",247,[[],["usize"]]],[11,"nth","","",247,[[["self"],["usize"]],["option"]]],[11,"last","","",247,[[],["option"]]],[11,"fmt","std::num","",462,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",455,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",515,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",464,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",518,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",516,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",461,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",456,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",460,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",514,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",519,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",523,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",508,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",522,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",463,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",155,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",465,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",511,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",513,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",517,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",454,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",508,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",521,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::num","",457,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",458,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",459,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std","",520,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"into_result","std::option","",91,[[],[["noneerror"],["result",["noneerror"]]]]],[11,"from_ok","","",91,[[["t"]],["option"]]],[11,"from_error","","",91,[[["noneerror"]],["option"]]],[11,"into_result","std::task","",224,[[],["result"]]],[11,"from_error","","",224,[[],[["poll",["result"]],["result"]]]],[11,"from_ok","","",224,[[],[["poll",["result"]],["result"]]]],[11,"into_result","","",224,[[],["result"]]],[11,"from_error","","",224,[[],[["option",["result"]],["poll",["option"]]]]],[11,"from_ok","","",224,[[],[["option",["result"]],["poll",["option"]]]]],[11,"into_result","std::result","",93,[[],["result"]]],[11,"from_ok","","",93,[[["t"]],["result"]]],[11,"from_error","","",93,[[["e"]],["result"]]],[11,"get","std::ops","",82,[[],["option"]]],[11,"get_mut","","",82,[[],["option"]]],[11,"get_unchecked","","",82,[[]]],[11,"get_unchecked_mut","","",82,[[]]],[11,"index","","",82,[[]]],[11,"index_mut","","",82,[[]]],[11,"get","","",355,[[["str"]],["option"]]],[11,"get_mut","","",355,[[["str"]],["option"]]],[11,"get_unchecked","","",355,[[["str"]]]],[11,"get_unchecked_mut","","",355,[[["str"]]]],[11,"index","","",355,[[["str"]]]],[11,"index_mut","","",355,[[["str"]]]],[11,"get","","",87,[[["str"]],["option"]]],[11,"get_mut","","",87,[[["str"]],["option"]]],[11,"get_unchecked","","",87,[[["str"]]]],[11,"get_unchecked_mut","","",87,[[["str"]]]],[11,"index","","",87,[[["str"]]]],[11,"index_mut","","",87,[[["str"]]]],[11,"get","std","",521,[[],[["option"],["t"]]]],[11,"get_mut","","",521,[[],[["option"],["t"]]]],[11,"get_unchecked","","",521,[[],["t"]]],[11,"get_unchecked_mut","","",521,[[],["t"]]],[11,"index","","",521,[[],["t"]]],[11,"index_mut","","",521,[[],["t"]]],[11,"get","std::ops","",87,[[],["option"]]],[11,"get_mut","","",87,[[],["option"]]],[11,"get_unchecked","","",87,[[]]],[11,"get_unchecked_mut","","",87,[[]]],[11,"index","","",87,[[]]],[11,"index_mut","","",87,[[]]],[11,"get","","",355,[[],["option"]]],[11,"get_mut","","",355,[[],["option"]]],[11,"get_unchecked","","",355,[[]]],[11,"get_unchecked_mut","","",355,[[]]],[11,"index","","",355,[[]]],[11,"index_mut","","",355,[[]]],[11,"get","","",356,[[],["option"]]],[11,"get_mut","","",356,[[],["option"]]],[11,"get_unchecked","","",356,[[]]],[11,"get_unchecked_mut","","",356,[[]]],[11,"index","","",356,[[]]],[11,"index_mut","","",356,[[]]],[11,"get","","",82,[[["str"]],["option"]]],[11,"get_mut","","",82,[[["str"]],["option"]]],[11,"get_unchecked","","",82,[[["str"]]]],[11,"get_unchecked_mut","","",82,[[["str"]]]],[11,"index","","",82,[[["str"]]]],[11,"index_mut","","",82,[[["str"]]]],[11,"get","","",83,[[],["option"]]],[11,"get_mut","","",83,[[],["option"]]],[11,"get_unchecked","","",83,[[]]],[11,"get_unchecked_mut","","",83,[[]]],[11,"index","","",83,[[]]],[11,"index_mut","","",83,[[]]],[11,"get","","",356,[[["str"]],["option"]]],[11,"get_mut","","",356,[[["str"]],["option"]]],[11,"get_unchecked","","",356,[[["str"]]]],[11,"get_unchecked_mut","","",356,[[["str"]]]],[11,"index","","",356,[[["str"]]]],[11,"index_mut","","",356,[[["str"]]]],[11,"get","","",84,[[["str"]],["option"]]],[11,"get_mut","","",84,[[["str"]],["option"]]],[11,"get_unchecked","","",84,[[["str"]]]],[11,"get_unchecked_mut","","",84,[[["str"]]]],[11,"index","","",84,[[["str"]]]],[11,"index_mut","","",84,[[["str"]]]],[11,"get","","",83,[[["str"]],["option"]]],[11,"get_mut","","",83,[[["str"]],["option"]]],[11,"get_unchecked","","",83,[[["str"]]]],[11,"get_unchecked_mut","","",83,[[["str"]]]],[11,"index","","",83,[[["str"]]]],[11,"index_mut","","",83,[[["str"]]]],[11,"get","","",84,[[],["option"]]],[11,"get_mut","","",84,[[],["option"]]],[11,"get_unchecked","","",84,[[]]],[11,"get_unchecked_mut","","",84,[[]]],[11,"index","","",84,[[]]],[11,"index_mut","","",84,[[]]],[11,"resume","std::pin","",361,[[["pin",["pin"]],["pin"]],["generatorstate"]]],[11,"resume","std","",508,[[["pin"],["g"]],["generatorstate"]]],[11,"shr_assign","","",520,[[["self"],["i32"]]]],[11,"shr_assign","","",513,[[["self"],["i8"]]]],[11,"shr_assign","","",518,[[["u16"],["self"]]]],[11,"shr_assign","","",516,[[["i64"],["self"]]]],[11,"shr_assign","","",513,[[["self"],["u32"]]]],[11,"shr_assign","","",515,[[["self"],["usize"]]]],[11,"shr_assign","","",520,[[["self"],["i128"]]]],[11,"shr_assign","","",515,[[["self"],["i8"]]]],[11,"shr_assign","","",513,[[["self"],["i32"]]]],[11,"shr_assign","","",521,[[["self"],["u128"]]]],[11,"shr_assign","","",517,[[["self"],["usize"]]]],[11,"shr_assign","","",521,[[["self"],["i32"]]]],[11,"shr_assign","","",523,[[["u16"],["self"]]]],[11,"shr_assign","","",520,[[["self"],["usize"]]]],[11,"shr_assign","","",516,[[["isize"],["self"]]]],[11,"shr_assign","","",511,[[["self"],["u8"]]]],[11,"shr_assign","","",515,[[["i64"],["self"]]]],[11,"shr_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shr_assign","std","",517,[[["self"],["u128"]]]],[11,"shr_assign","","",518,[[["self"],["i16"]]]],[11,"shr_assign","","",523,[[["self"],["i32"]]]],[11,"shr_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shr_assign","std","",516,[[["self"],["u128"]]]],[11,"shr_assign","","",520,[[["u16"],["self"]]]],[11,"shr_assign","","",520,[[["i64"],["self"]]]],[11,"shr_assign","","",516,[[["self"],["usize"]]]],[11,"shr_assign","","",515,[[["u16"],["self"]]]],[11,"shr_assign","","",522,[[["self"],["usize"]]]],[11,"shr_assign","","",517,[[["self"],["u32"]]]],[11,"shr_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shr_assign","","",155,[[["self"],["usize"]]]],[11,"shr_assign","std","",514,[[["self"],["u128"]]]],[11,"shr_assign","","",513,[[["self"],["usize"]]]],[11,"shr_assign","","",516,[[["self"],["u64"]]]],[11,"shr_assign","","",516,[[["self"],["i16"]]]],[11,"shr_assign","","",516,[[["u16"],["self"]]]],[11,"shr_assign","","",516,[[["self"],["i32"]]]],[11,"shr_assign","","",521,[[["self"],["i8"]]]],[11,"shr_assign","","",519,[[["i64"],["self"]]]],[11,"shr_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shr_assign","","",155,[[["self"],["usize"]]]],[11,"shr_assign","std","",514,[[["self"],["i16"]]]],[11,"shr_assign","","",521,[[["self"],["i16"]]]],[11,"shr_assign","","",519,[[["self"],["u128"]]]],[11,"shr_assign","","",515,[[["self"],["i8"]]]],[11,"shr_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shr_assign","std","",511,[[["isize"],["self"]]]],[11,"shr_assign","","",517,[[["isize"],["self"]]]],[11,"shr_assign","","",518,[[["self"],["u32"]]]],[11,"shr_assign","","",517,[[["self"],["u32"]]]],[11,"shr_assign","","",523,[[["self"],["usize"]]]],[11,"shr_assign","","",511,[[["i64"],["self"]]]],[11,"shr_assign","","",521,[[["self"],["u32"]]]],[11,"shr_assign","","",513,[[["self"],["i128"]]]],[11,"shr_assign","","",516,[[["self"],["u32"]]]],[11,"shr_assign","","",519,[[["i64"],["self"]]]],[11,"shr_assign","","",518,[[["self"],["u32"]]]],[11,"shr_assign","","",519,[[["self"],["u32"]]]],[11,"shr_assign","","",520,[[["self"],["u64"]]]],[11,"shr_assign","","",521,[[["isize"],["self"]]]],[11,"shr_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shr_assign","","",155,[[["self"],["usize"]]]],[11,"shr_assign","std","",518,[[["self"],["u128"]]]],[11,"shr_assign","","",520,[[["self"],["u32"]]]],[11,"shr_assign","","",513,[[["self"],["u64"]]]],[11,"shr_assign","","",516,[[["self"],["u64"]]]],[11,"shr_assign","","",519,[[["self"],["u64"]]]],[11,"shr_assign","","",523,[[["self"],["u32"]]]],[11,"shr_assign","","",514,[[["self"],["i128"]]]],[11,"shr_assign","","",521,[[["self"],["usize"]]]],[11,"shr_assign","","",511,[[["isize"],["self"]]]],[11,"shr_assign","","",521,[[["i64"],["self"]]]],[11,"shr_assign","","",517,[[["i64"],["self"]]]],[11,"shr_assign","","",513,[[["self"],["usize"]]]],[11,"shr_assign","","",514,[[["self"],["u64"]]]],[11,"shr_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shr_assign","std","",515,[[["self"],["i128"]]]],[11,"shr_assign","","",521,[[["self"],["i32"]]]],[11,"shr_assign","","",515,[[["isize"],["self"]]]],[11,"shr_assign","","",520,[[["self"],["i16"]]]],[11,"shr_assign","","",518,[[["isize"],["self"]]]],[11,"shr_assign","","",522,[[["isize"],["self"]]]],[11,"shr_assign","","",519,[[["self"],["i32"]]]],[11,"shr_assign","","",522,[[["i64"],["self"]]]],[11,"shr_assign","","",514,[[["self"],["i16"]]]],[11,"shr_assign","","",521,[[["u16"],["self"]]]],[11,"shr_assign","","",518,[[["self"],["u8"]]]],[11,"shr_assign","","",513,[[["self"],["i8"]]]],[11,"shr_assign","","",523,[[["i64"],["self"]]]],[11,"shr_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shr_assign","std","",521,[[["self"],["i8"]]]],[11,"shr_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shr_assign","std","",516,[[["self"],["i8"]]]],[11,"shr_assign","","",511,[[["self"],["u128"]]]],[11,"shr_assign","","",522,[[["self"],["u32"]]]],[11,"shr_assign","","",513,[[["self"],["i128"]]]],[11,"shr_assign","","",511,[[["self"],["u64"]]]],[11,"shr_assign","","",511,[[["self"],["usize"]]]],[11,"shr_assign","","",522,[[["self"],["u128"]]]],[11,"shr_assign","","",522,[[["self"],["i16"]]]],[11,"shr_assign","","",513,[[["i64"],["self"]]]],[11,"shr_assign","","",514,[[["u16"],["self"]]]],[11,"shr_assign","","",522,[[["self"],["u64"]]]],[11,"shr_assign","","",514,[[["self"],["u8"]]]],[11,"shr_assign","","",520,[[["isize"],["self"]]]],[11,"shr_assign","","",519,[[["self"],["i16"]]]],[11,"shr_assign","","",517,[[["self"],["i32"]]]],[11,"shr_assign","","",517,[[["self"],["u8"]]]],[11,"shr_assign","","",515,[[["self"],["u8"]]]],[11,"shr_assign","","",513,[[["self"],["u8"]]]],[11,"shr_assign","","",515,[[["self"],["u32"]]]],[11,"shr_assign","","",513,[[["self"],["u128"]]]],[11,"shr_assign","","",516,[[["self"],["i128"]]]],[11,"shr_assign","","",520,[[["self"],["i128"]]]],[11,"shr_assign","","",523,[[["self"],["i16"]]]],[11,"shr_assign","","",515,[[["self"],["u64"]]]],[11,"shr_assign","","",511,[[["self"],["u8"]]]],[11,"shr_assign","","",511,[[["self"],["usize"]]]],[11,"shr_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shr_assign","std","",520,[[["self"],["i32"]]]],[11,"shr_assign","","",511,[[["self"],["u64"]]]],[11,"shr_assign","","",517,[[["u16"],["self"]]]],[11,"shr_assign","","",515,[[["self"],["u64"]]]],[11,"shr_assign","","",522,[[["self"],["i128"]]]],[11,"shr_assign","","",519,[[["self"],["i16"]]]],[11,"shr_assign","","",523,[[["self"],["i8"]]]],[11,"shr_assign","","",511,[[["self"],["i8"]]]],[11,"shr_assign","","",520,[[["self"],["u128"]]]],[11,"shr_assign","","",520,[[["self"],["usize"]]]],[11,"shr_assign","","",523,[[["self"],["u8"]]]],[11,"shr_assign","","",522,[[["self"],["u8"]]]],[11,"shr_assign","","",517,[[["self"],["i128"]]]],[11,"shr_assign","","",523,[[["isize"],["self"]]]],[11,"shr_assign","","",523,[[["self"],["i8"]]]],[11,"shr_assign","","",517,[[["u16"],["self"]]]],[11,"shr_assign","","",517,[[["self"],["i8"]]]],[11,"shr_assign","","",522,[[["self"],["u32"]]]],[11,"shr_assign","","",522,[[["self"],["i128"]]]],[11,"shr_assign","","",515,[[["u16"],["self"]]]],[11,"shr_assign","","",515,[[["self"],["u128"]]]],[11,"shr_assign","","",520,[[["self"],["i8"]]]],[11,"shr_assign","","",519,[[["u16"],["self"]]]],[11,"shr_assign","","",520,[[["self"],["i16"]]]],[11,"shr_assign","","",511,[[["self"],["i32"]]]],[11,"shr_assign","","",517,[[["self"],["usize"]]]],[11,"shr_assign","","",515,[[["self"],["i16"]]]],[11,"shr_assign","","",518,[[["self"],["i128"]]]],[11,"shr_assign","","",521,[[["self"],["i128"]]]],[11,"shr_assign","","",514,[[["self"],["i32"]]]],[11,"shr_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shr_assign","std","",514,[[["isize"],["self"]]]],[11,"shr_assign","","",514,[[["self"],["u32"]]]],[11,"shr_assign","","",518,[[["self"],["i8"]]]],[11,"shr_assign","","",518,[[["self"],["u64"]]]],[11,"shr_assign","","",514,[[["self"],["i32"]]]],[11,"shr_assign","","",517,[[["self"],["i128"]]]],[11,"shr_assign","","",519,[[["u16"],["self"]]]],[11,"shr_assign","","",511,[[["u16"],["self"]]]],[11,"shr_assign","","",518,[[["self"],["u8"]]]],[11,"shr_assign","","",521,[[["self"],["u64"]]]],[11,"shr_assign","","",519,[[["self"],["usize"]]]],[11,"shr_assign","","",514,[[["self"],["i8"]]]],[11,"shr_assign","","",523,[[["self"],["i16"]]]],[11,"shr_assign","","",522,[[["self"],["usize"]]]],[11,"shr_assign","","",515,[[["self"],["u128"]]]],[11,"shr_assign","","",516,[[["self"],["i32"]]]],[11,"shr_assign","","",517,[[["self"],["i32"]]]],[11,"shr_assign","","",515,[[["self"],["i32"]]]],[11,"shr_assign","","",522,[[["self"],["u128"]]]],[11,"shr_assign","","",523,[[["self"],["u32"]]]],[11,"shr_assign","","",513,[[["self"],["i32"]]]],[11,"shr_assign","","",518,[[["self"],["usize"]]]],[11,"shr_assign","","",511,[[["i64"],["self"]]]],[11,"shr_assign","","",515,[[["self"],["i128"]]]],[11,"shr_assign","","",513,[[["isize"],["self"]]]],[11,"shr_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shr_assign","std","",515,[[["self"],["i16"]]]],[11,"shr_assign","","",522,[[["self"],["i32"]]]],[11,"shr_assign","","",521,[[["self"],["i128"]]]],[11,"shr_assign","","",518,[[["self"],["u128"]]]],[11,"shr_assign","","",514,[[["i64"],["self"]]]],[11,"shr_assign","","",514,[[["self"],["u8"]]]],[11,"shr_assign","","",519,[[["self"],["u8"]]]],[11,"shr_assign","","",513,[[["i64"],["self"]]]],[11,"shr_assign","","",519,[[["self"],["u8"]]]],[11,"shr_assign","","",513,[[["self"],["u8"]]]],[11,"shr_assign","","",520,[[["self"],["u32"]]]],[11,"shr_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shr_assign","std","",516,[[["self"],["u32"]]]],[11,"shr_assign","","",514,[[["i64"],["self"]]]],[11,"shr_assign","","",519,[[["self"],["i8"]]]],[11,"shr_assign","","",514,[[["self"],["u32"]]]],[11,"shr_assign","","",511,[[["self"],["i16"]]]],[11,"shr_assign","","",513,[[["u16"],["self"]]]],[11,"shr_assign","","",516,[[["u16"],["self"]]]],[11,"shr_assign","","",519,[[["self"],["u64"]]]],[11,"shr_assign","","",514,[[["self"],["i128"]]]],[11,"shr_assign","","",511,[[["self"],["i128"]]]],[11,"shr_assign","","",520,[[["self"],["u128"]]]],[11,"shr_assign","","",520,[[["i64"],["self"]]]],[11,"shr_assign","","",519,[[["self"],["i128"]]]],[11,"shr_assign","","",521,[[["isize"],["self"]]]],[11,"shr_assign","","",518,[[["self"],["usize"]]]],[11,"shr_assign","","",523,[[["self"],["u64"]]]],[11,"shr_assign","","",523,[[["self"],["u64"]]]],[11,"shr_assign","","",519,[[["self"],["i32"]]]],[11,"shr_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shr_assign","std","",523,[[["self"],["u8"]]]],[11,"shr_assign","","",513,[[["self"],["i16"]]]],[11,"shr_assign","","",518,[[["isize"],["self"]]]],[11,"shr_assign","","",519,[[["self"],["u32"]]]],[11,"shr_assign","","",522,[[["self"],["u8"]]]],[11,"shr_assign","","",522,[[["self"],["i16"]]]],[11,"shr_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shr_assign","std","",520,[[["u16"],["self"]]]],[11,"shr_assign","","",518,[[["self"],["i8"]]]],[11,"shr_assign","","",517,[[["self"],["u128"]]]],[11,"shr_assign","","",514,[[["self"],["u128"]]]],[11,"shr_assign","","",515,[[["self"],["usize"]]]],[11,"shr_assign","","",518,[[["self"],["u64"]]]],[11,"shr_assign","","",519,[[["self"],["usize"]]]],[11,"shr_assign","","",511,[[["self"],["i8"]]]],[11,"shr_assign","","",520,[[["self"],["u8"]]]],[11,"shr_assign","","",523,[[["self"],["i128"]]]],[11,"shr_assign","","",514,[[["self"],["u64"]]]],[11,"shr_assign","","",517,[[["self"],["u64"]]]],[11,"shr_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shr_assign","std","",518,[[["u16"],["self"]]]],[11,"shr_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shr_assign","std","",516,[[["self"],["u8"]]]],[11,"shr_assign","","",517,[[["self"],["i16"]]]],[11,"shr_assign","","",521,[[["i64"],["self"]]]],[11,"shr_assign","","",522,[[["self"],["u64"]]]],[11,"shr_assign","","",518,[[["self"],["i32"]]]],[11,"shr_assign","","",522,[[["i64"],["self"]]]],[11,"shr_assign","","",515,[[["self"],["i32"]]]],[11,"shr_assign","","",516,[[["isize"],["self"]]]],[11,"shr_assign","","",511,[[["self"],["u32"]]]],[11,"shr_assign","","",523,[[["self"],["u128"]]]],[11,"shr_assign","","",521,[[["self"],["usize"]]]],[11,"shr_assign","","",521,[[["self"],["u8"]]]],[11,"shr_assign","","",513,[[["u16"],["self"]]]],[11,"shr_assign","","",518,[[["self"],["i128"]]]],[11,"shr_assign","","",513,[[["self"],["u64"]]]],[11,"shr_assign","","",516,[[["self"],["u8"]]]],[11,"shr_assign","","",517,[[["isize"],["self"]]]],[11,"shr_assign","","",516,[[["self"],["i16"]]]],[11,"shr_assign","","",519,[[["isize"],["self"]]]],[11,"shr_assign","","",523,[[["self"],["i128"]]]],[11,"shr_assign","","",514,[[["self"],["i8"]]]],[11,"shr_assign","","",516,[[["self"],["i128"]]]],[11,"shr_assign","","",521,[[["self"],["u8"]]]],[11,"shr_assign","","",517,[[["self"],["u64"]]]],[11,"shr_assign","","",520,[[["self"],["u64"]]]],[11,"shr_assign","","",520,[[["self"],["u8"]]]],[11,"shr_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shr_assign","std","",511,[[["self"],["u32"]]]],[11,"shr_assign","","",517,[[["self"],["i8"]]]],[11,"shr_assign","","",523,[[["isize"],["self"]]]],[11,"shr_assign","","",519,[[["self"],["i8"]]]],[11,"shr_assign","","",514,[[["u16"],["self"]]]],[11,"shr_assign","","",511,[[["self"],["i32"]]]],[11,"shr_assign","","",514,[[["self"],["usize"]]]],[11,"shr_assign","","",522,[[["self"],["i8"]]]],[11,"shr_assign","","",513,[[["self"],["u32"]]]],[11,"shr_assign","","",521,[[["self"],["i16"]]]],[11,"shr_assign","","",520,[[["isize"],["self"]]]],[11,"shr_assign","","",518,[[["i64"],["self"]]]],[11,"shr_assign","","",513,[[["isize"],["self"]]]],[11,"shr_assign","","",516,[[["i64"],["self"]]]],[11,"shr_assign","","",516,[[["self"],["usize"]]]],[11,"shr_assign","","",522,[[["u16"],["self"]]]],[11,"shr_assign","","",522,[[["u16"],["self"]]]],[11,"shr_assign","","",519,[[["isize"],["self"]]]],[11,"shr_assign","","",511,[[["self"],["u128"]]]],[11,"shr_assign","","",515,[[["self"],["u8"]]]],[11,"shr_assign","","",518,[[["self"],["i32"]]]],[11,"shr_assign","","",513,[[["self"],["i16"]]]],[11,"shr_assign","","",518,[[["i64"],["self"]]]],[11,"shr_assign","","",522,[[["self"],["i32"]]]],[11,"shr_assign","","",514,[[["isize"],["self"]]]],[11,"shr_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shr_assign","std","",519,[[["self"],["u128"]]]],[11,"shr_assign","","",521,[[["u16"],["self"]]]],[11,"shr_assign","","",511,[[["self"],["i16"]]]],[11,"shr_assign","","",517,[[["self"],["u8"]]]],[11,"shr_assign","","",515,[[["isize"],["self"]]]],[11,"shr_assign","","",513,[[["self"],["u128"]]]],[11,"shr_assign","","",515,[[["self"],["u32"]]]],[11,"shr_assign","","",516,[[["self"],["i8"]]]],[11,"shr_assign","","",523,[[["self"],["u128"]]]],[11,"shr_assign","","",515,[[["i64"],["self"]]]],[11,"shr_assign","","",511,[[["u16"],["self"]]]],[11,"shr_assign","","",521,[[["self"],["u32"]]]],[11,"shr_assign","","",520,[[["self"],["i8"]]]],[11,"shr_assign","","",523,[[["i64"],["self"]]]],[11,"shr_assign","","",518,[[["self"],["i16"]]]],[11,"shr_assign","","",523,[[["self"],["usize"]]]],[11,"shr_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shr_assign","std","",519,[[["self"],["i128"]]]],[11,"shr_assign","","",522,[[["self"],["i8"]]]],[11,"shr_assign","","",523,[[["self"],["i32"]]]],[11,"shr_assign","","",514,[[["self"],["usize"]]]],[11,"shr_assign","","",521,[[["self"],["u64"]]]],[11,"shr_assign","","",516,[[["self"],["u128"]]]],[11,"shr_assign","","",522,[[["isize"],["self"]]]],[11,"shr_assign","std::num","",155,[[["self"],["usize"]]]],[11,"shr_assign","std","",523,[[["u16"],["self"]]]],[11,"shr_assign","","",517,[[["self"],["i16"]]]],[11,"shr_assign","","",511,[[["self"],["i128"]]]],[11,"shr_assign","","",517,[[["i64"],["self"]]]],[11,"shr_assign","","",521,[[["self"],["u128"]]]],[11,"from_iter","","",532,[[["i"]]]],[11,"from_iter","std::option","Takes each element in the [`Iterator`]: if it is…",91,[[["i"]],["option"]]],[11,"from_iter","std::result","Takes each element in the `Iterator`: if it is an `Err`,…",93,[[["i"]],["result"]]],[11,"join","std","",510,[[],["vec"]]],[11,"join","","",510,[[["t"]],["vec"]]],[11,"join","","",510,[[["str"]],["string"]]],[11,"from_str","std::string","",291,[[["str"]],[["string"],["result",["string","infallible"]],["infallible"]]]],[11,"index","","",291,[[["usize"],["self"],["range",["usize"]]],["str"]]],[11,"index","","",291,[[["usize"],["self"],["rangefrom",["usize"]]],["str"]]],[11,"index","std::collections","Returns a reference to the value corresponding to the…",375,[[["self"],["q"]],["v"]]],[11,"index","std::vec","",295,[[["i"],["self"]]]],[11,"index","std::string","",291,[[["rangeinclusive",["usize"]],["self"],["usize"]],["str"]]],[11,"index","std::collections","",401,[[["self"],["usize"]],["a"]]],[11,"index","std::string","",291,[[["self"],["rangefull"]],["str"]]],[11,"index","","",291,[[["usize"],["self"],["rangeto",["usize"]]],["str"]]],[11,"index","","",291,[[["rangetoinclusive",["usize"]],["self"],["usize"]],["str"]]],[11,"default","std::collections","Makes an empty `BTreeSet<T>` with a reasonable choice of B.",391,[[],["btreeset"]]],[11,"default","std::boxed","",234,[[],[["str"],["box",["str"]]]]],[11,"default","std::collections","Creates an empty `LinkedList<T>`.",394,[[],["linkedlist"]]],[11,"default","","Creates an empty `BinaryHeap<T>`.",368,[[],["binaryheap"]]],[11,"default","std::borrow","Creates an owned Cow<'a, B> with the default value for the…",1,[[],["cow"]]],[11,"default","std::alloc","",502,[[],["global"]]],[11,"default","std::rc","Creates a new `Rc<T>`, with the `Default` value for `T`.",243,[[],["rc"]]],[11,"default","std::string","Creates an empty `String`.",291,[[],["string"]]],[11,"default","std::collections","Creates an empty `BTreeMap<K, V>`.",375,[[],["btreemap"]]],[11,"default","std::sync","Creates a new `Arc<T>`, with the `Default` value for `T`.",476,[[],["arc"]]],[11,"default","std::boxed","Creates a `Box<T>`, with the `Default` value for T.",234,[[],["box"]]],[11,"default","","",234,[[],["box"]]],[11,"default","std::rc","Constructs a new `Weak<T>`, allocating memory for `T`…",244,[[],["weak"]]],[11,"default","std::collections","Creates an empty `VecDeque<T>`.",401,[[],["vecdeque"]]],[11,"default","std::sync","Constructs a new `Weak<T>`, without allocating memory.…",477,[[],["weak"]]],[11,"default","std::vec","Creates an empty `Vec<T>`.",295,[[],["vec"]]],[11,"to_string","std::string","",291,[[["self"]],["string"]]],[11,"to_string","std::borrow","",1,[[["self"]],["string"]]],[11,"to_string","std","",509,[[["self"]],["string"]]],[11,"fmt","std::boxed","",234,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::rc","",243,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::sync","",476,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"to_owned","std","",510,[[["self"]],["vec"]]],[11,"clone_into","","",510,[[["vec"],["self"]]]],[11,"to_owned","","",509,[[["self"]],["string"]]],[11,"clone_into","","",509,[[["string"],["self"]]]],[11,"call_once","std::boxed","",234,[[["a"]]]],[11,"from_iter","std::borrow","",1,[[["i"]],["cow"]]],[11,"from_iter","std::boxed","",234,[[["t"]],["box"]]],[11,"from_iter","std::sync","Takes each element in the `Iterator` and collects it into…",476,[[["i"]],["arc"]]],[11,"from_iter","std::collections","",368,[[["i"]],["binaryheap"]]],[11,"from_iter","std::rc","Takes each element in the `Iterator` and collects it into…",243,[[["i"]],["rc"]]],[11,"from_iter","std::borrow","",1,[[["i"]],[["str"],["cow",["str"]]]]],[11,"from_iter","std::collections","",391,[[["i"]],["btreeset"]]],[11,"from_iter","std::string","",291,[[["i"]],["string"]]],[11,"from_iter","std::vec","",295,[[["i"]],["vec"]]],[11,"from_iter","std::collections","",375,[[["t"]],["btreemap"]]],[11,"from_iter","","",394,[[["i"]],["linkedlist"]]],[11,"from_iter","std::string","",291,[[["i"]],["string"]]],[11,"from_iter","","",291,[[["i"]],["string"]]],[11,"from_iter","std::borrow","",1,[[["i"]],[["str"],["cow",["str"]]]]],[11,"from_iter","","",1,[[["i"]],[["str"],["cow",["str"]]]]],[11,"from_iter","std::string","",291,[[["i"]],["string"]]],[11,"from_iter","","",291,[[["i"]],["string"]]],[11,"from_iter","std::collections","",401,[[["t"]],["vecdeque"]]],[11,"try_from","std::sync","",476,[[["arc"]],[["result",["arc"]],["arc"]]]],[11,"try_from","std::boxed","",234,[[["box"]],[["result",["box"]],["box"]]]],[11,"try_from","std::rc","",243,[[["rc"]],[["result",["rc"]],["rc"]]]],[11,"alloc","std::alloc","",502,[[["self"],["layout"]],[["allocerr"],["result",["nonnull","allocerr"]],["nonnull",["u8"]]]]],[11,"dealloc","","",502,[[["layout"],["self"],["nonnull",["u8"]],["u8"]]]],[11,"realloc","","",502,[[["layout"],["usize"],["self"],["nonnull",["u8"]],["u8"]],[["allocerr"],["result",["nonnull","allocerr"]],["nonnull",["u8"]]]]],[11,"alloc_zeroed","","",502,[[["self"],["layout"]],[["allocerr"],["result",["nonnull","allocerr"]],["nonnull",["u8"]]]]],[11,"drop","std::string","",294,[[["self"]]]],[11,"drop","std::vec","",296,[[["self"]]]],[11,"drop","std::collections::linked_list","",400,[[["self"]]]],[11,"drop","std::vec","",298,[[["self"]]]],[11,"drop","","",295,[[["self"]]]],[11,"drop","std::collections::btree_map","",378,[[["self"]]]],[11,"drop","std::rc","Drops the `Rc`.",243,[[["self"]]]],[11,"drop","std::sync","Drops the `Weak` pointer.",477,[[["self"]]]],[11,"drop","","Drops the `Arc`.",476,[[["self"]]]],[11,"drop","std::collections::binary_heap","",369,[[["self"]]]],[11,"drop","std::collections::vec_deque","",405,[[["self"]]]],[11,"drop","std::rc","Drops the `Weak` pointer.",244,[[["self"]]]],[11,"drop","std::collections","",401,[[["self"]]]],[11,"drop","std::collections::binary_heap","Removes heap elements in heap order.",374,[[["self"]]]],[11,"drop","std::boxed","",234,[[["self"]]]],[11,"drop","std::vec","",297,[[["self"]]]],[11,"drop","std::collections","",375,[[["self"]]]],[11,"drop","","",394,[[["self"]]]],[11,"drop","std::vec","",299,[[["self"]]]],[11,"add","std::borrow","",1,[[["str"],["cow",["str"]]]]],[11,"add","","",1,[[["str"]]]],[11,"add","std::string","",291,[[["str"]],["string"]]],[11,"resume","std::pin","",361,[[["pin"],["pin",["pin"]]],["generatorstate"]]],[11,"resume","std::boxed","",234,[[["pin",["box"]],["box"]],["generatorstate"]]],[11,"extend","std::collections","",401,[[["self"],["i"]]]],[11,"extend","","",375,[[["self"],["t"]]]],[11,"extend","","",375,[[["self"],["i"]]]],[11,"extend","std::string","",291,[[["self"],["i"]]]],[11,"extend","std::collections","",394,[[["self"],["i"]]]],[11,"extend","std::string","",291,[[["self"],["i"]]]],[11,"extend","std::collections","",391,[[["self"],["i"]]]],[11,"extend","","",368,[[["self"],["i"]]]],[11,"extend","std::string","",291,[[["self"],["i"]]]],[11,"extend","std::collections","",401,[[["self"],["t"]]]],[11,"extend","std::vec","",295,[[["self"],["i"]]]],[11,"extend","std::string","",291,[[["self"],["i"]]]],[11,"extend","std::collections","",394,[[["self"],["i"]]]],[11,"extend","std::vec","",295,[[["self"],["i"]]]],[11,"extend","std::collections","",368,[[["self"],["i"]]]],[11,"extend","std::string","",291,[[["self"],["i"]]]],[11,"extend","std::collections","",391,[[["self"],["iter"]]]],[11,"borrow_mut","std::vec","",295,[[["self"]]]],[11,"borrow_mut","std::boxed","",234,[[["self"]],["t"]]],[11,"borrow_mut","std::string","",291,[[["self"]],["str"]]],[11,"len","std::collections::btree_map","",377,[[["self"]],["usize"]]],[11,"len","std::collections::btree_set","",392,[[["self"]],["usize"]]],[11,"len","std::boxed","",234,[[["self"]],["usize"]]],[11,"is_empty","","",234,[[["self"]],["bool"]]],[11,"len","std::collections::btree_map","",376,[[["self"]],["usize"]]],[11,"is_empty","std::vec","",297,[[["self"]],["bool"]]],[11,"is_empty","std::collections::binary_heap","",371,[[["self"]],["bool"]]],[11,"len","std::collections::btree_set","",386,[[["self"]],["usize"]]],[11,"len","std::collections::btree_map","",378,[[["self"]],["usize"]]],[11,"len","","",379,[[["self"]],["usize"]]],[11,"is_empty","std::collections::vec_deque","",403,[[["self"]],["bool"]]],[11,"is_empty","std::collections::binary_heap","",373,[[["self"]],["bool"]]],[11,"len","std::collections::btree_map","",384,[[["self"]],["usize"]]],[11,"is_empty","std::collections::vec_deque","",404,[[["self"]],["bool"]]],[11,"is_empty","std::vec","",296,[[["self"]],["bool"]]],[11,"len","std::collections::btree_map","",385,[[["self"]],["usize"]]],[11,"is_empty","std::collections::vec_deque","",402,[[["self"]],["bool"]]],[11,"is_empty","std::collections::binary_heap","",370,[[["self"]],["bool"]]],[11,"cmp","std::collections","",401,[[["vecdeque"],["self"]],["ordering"]]],[11,"cmp","","",391,[[["self"],["btreeset"]],["ordering"]]],[11,"cmp","","",375,[[["self"],["btreemap"]],["ordering"]]],[11,"cmp","std::boxed","",234,[[["box"],["self"]],["ordering"]]],[11,"cmp","std::vec","",295,[[["self"],["vec"]],["ordering"]]],[11,"cmp","std::rc","Comparison for two `Rc`s.",243,[[["rc"],["self"]],["ordering"]]],[11,"cmp","std::string","",291,[[["self"],["string"]],["ordering"]]],[11,"cmp","std::borrow","",1,[[["self"],["cow"]],["ordering"]]],[11,"cmp","std::collections","",394,[[["linkedlist"],["self"]],["ordering"]]],[11,"cmp","std::sync","Comparison for two `Arc`s.",476,[[["arc"],["self"]],["ordering"]]],[11,"concat","std","",510,[[],["string"]]],[11,"concat","","",510,[[],["vec"]]],[11,"deref_mut","std::collections::binary_heap","",369,[[["self"]],["t"]]],[11,"deref_mut","std::string","",291,[[["self"]],["str"]]],[11,"deref_mut","std::boxed","",234,[[["self"]],["t"]]],[11,"deref_mut","std::vec","",295,[[["self"]]]],[11,"next_back","std::collections::linked_list","",395,[[["self"]],[["option"],["t"]]]],[11,"next_back","std::boxed","",234,[[["self"]],["option"]]],[11,"nth_back","","",234,[[["self"],["usize"]],["option"]]],[11,"next_back","std::collections::binary_heap","",371,[[["self"]],["option"]]],[11,"next_back","std::collections::btree_map","",384,[[["self"]],["option"]]],[11,"next_back","","",381,[[["self"]],["option"]]],[11,"next_back","std::collections::vec_deque","",402,[[["self"]],[["option"],["t"]]]],[11,"rfold","","",402,[[["acc"],["f"]],["acc"]]],[11,"try_rfold","","",402,[[["self"],["b"],["f"]],["r"]]],[11,"next_back","std::vec","",298,[[["self"]],["option"]]],[11,"next_back","std::collections::linked_list","",396,[[["self"]],[["option"],["t"]]]],[11,"next_back","std::collections::btree_set","",393,[[["self"]],[["option"],["t"]]]],[11,"next_back","std::collections::binary_heap","",370,[[["self"]],[["option"],["t"]]]],[11,"next_back","std::collections::btree_set","",392,[[["self"]],["option"]]],[11,"next_back","std::collections::vec_deque","",405,[[["self"]],["option"]]],[11,"next_back","","",403,[[["self"]],[["option"],["t"]]]],[11,"rfold","","",403,[[["acc"],["f"]],["acc"]]],[11,"next_back","std::collections::btree_set","",386,[[["self"]],[["option"],["t"]]]],[11,"next_back","std::collections::vec_deque","",404,[[["self"]],["option"]]],[11,"next_back","std::collections::btree_map","",377,[[["self"]],["option"]]],[11,"next_back","std::collections::binary_heap","",373,[[["self"]],["option"]]],[11,"next_back","std::string","",294,[[["self"]],[["option",["char"]],["char"]]]],[11,"next_back","std::collections::btree_map","",380,[[["self"]],["option"]]],[11,"next_back","std::collections::linked_list","",397,[[["self"]],["option"]]],[11,"next_back","std::vec","",296,[[["self"]],["option"]]],[11,"next_back","std::collections::btree_map","",376,[[["self"]],[["option"],["k"]]]],[11,"next_back","std::vec","",297,[[["self"]],["option"]]],[11,"next_back","std::collections::btree_map","",379,[[["self"]],[["option"],["v"]]]],[11,"next_back","","",378,[[["self"]],["option"]]],[11,"next_back","","",385,[[["self"]],[["option"],["v"]]]],[11,"next","","",378,[[["self"]],["option"]]],[11,"size_hint","","",378,[[["self"]]]],[11,"next","std::collections::btree_set","",387,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",387,[[["self"]]]],[11,"next","std::collections::vec_deque","",403,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",403,[[["self"]]]],[11,"fold","","",403,[[["acc"],["f"]],["acc"]]],[11,"nth","","",403,[[["self"],["usize"]],["option"]]],[11,"last","","",403,[[],[["option"],["t"]]]],[11,"next","std::vec","",296,[[["self"]],["option"]]],[11,"size_hint","","",296,[[["self"]]]],[11,"count","","",296,[[],["usize"]]],[11,"next","std::collections::btree_set","",388,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",388,[[["self"]]]],[11,"next","std::collections::btree_map","",380,[[["self"]],["option"]]],[11,"last","","",380,[[],["option"]]],[11,"next","std::collections::btree_set","",392,[[["self"]],["option"]]],[11,"size_hint","","",392,[[["self"]]]],[11,"next","std::collections::linked_list","",396,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",396,[[["self"]]]],[11,"last","","",396,[[],[["option"],["t"]]]],[11,"next","std::vec","",299,[[["self"]],["option"]]],[11,"size_hint","","",299,[[["self"]]]],[11,"next","","",297,[[["self"]],["option"]]],[11,"size_hint","","",297,[[["self"]]]],[11,"next","std::collections::vec_deque","",405,[[["self"]],["option"]]],[11,"size_hint","","",405,[[["self"]]]],[11,"next","std::collections::btree_map","",381,[[["self"]],["option"]]],[11,"last","","",381,[[],["option"]]],[11,"next","std::collections::binary_heap","",372,[[["self"]],["option"]]],[11,"size_hint","","",372,[[["self"]]]],[11,"next","","",370,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",370,[[["self"]]]],[11,"last","","",370,[[],[["option"],["t"]]]],[11,"next","std::collections::linked_list","",400,[[["self"]],["option"]]],[11,"size_hint","","",400,[[["self"]]]],[11,"next","std::collections::btree_map","",384,[[["self"]],["option"]]],[11,"size_hint","","",384,[[["self"]]]],[11,"last","","",384,[[],["option"]]],[11,"next","std::collections::btree_set","",390,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",390,[[["self"]]]],[11,"next","std::collections::btree_map","",377,[[["self"]],["option"]]],[11,"size_hint","","",377,[[["self"]]]],[11,"last","","",377,[[],["option"]]],[11,"next","std::collections::linked_list","",397,[[["self"]],["option"]]],[11,"size_hint","","",397,[[["self"]]]],[11,"next","std::collections::btree_set","",389,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",389,[[["self"]]]],[11,"next","std::collections::btree_map","",379,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",379,[[["self"]]]],[11,"last","","",379,[[],[["option"],["v"]]]],[11,"next","std::collections::vec_deque","",404,[[["self"]],["option"]]],[11,"size_hint","","",404,[[["self"]]]],[11,"next","std::collections::btree_set","",393,[[["self"]],[["option"],["t"]]]],[11,"last","","",393,[[],[["option"],["t"]]]],[11,"next","std::collections::binary_heap","",374,[[["self"]],["option"]]],[11,"size_hint","","",374,[[["self"]]]],[11,"next","std::string","",294,[[["self"]],[["option",["char"]],["char"]]]],[11,"size_hint","","",294,[[["self"]]]],[11,"last","","",294,[[],[["option",["char"]],["char"]]]],[11,"next","std::boxed","",234,[[["self"]],["option"]]],[11,"size_hint","","",234,[[["self"]]]],[11,"nth","","",234,[[["self"],["usize"]],["option"]]],[11,"last","","",234,[[],["option"]]],[11,"next","std::collections::btree_map","",376,[[["self"]],[["option"],["k"]]]],[11,"size_hint","","",376,[[["self"]]]],[11,"last","","",376,[[],[["option"],["k"]]]],[11,"next","","",385,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",385,[[["self"]]]],[11,"last","","",385,[[],[["option"],["v"]]]],[11,"next","std::collections::vec_deque","",402,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",402,[[["self"]]]],[11,"fold","","",402,[[["acc"],["f"]],["acc"]]],[11,"try_fold","","",402,[[["self"],["b"],["f"]],["r"]]],[11,"nth","","",402,[[["self"],["usize"]],["option"]]],[11,"last","","",402,[[],[["option"],["t"]]]],[11,"next","std::vec","",298,[[["self"]],["option"]]],[11,"size_hint","","",298,[[["self"]]]],[11,"next","std::collections::binary_heap","",371,[[["self"]],["option"]]],[11,"size_hint","","",371,[[["self"]]]],[11,"next","std::collections::btree_set","",386,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",386,[[["self"]]]],[11,"last","","",386,[[],[["option"],["t"]]]],[11,"next","std::collections::linked_list","",395,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",395,[[["self"]]]],[11,"last","","",395,[[],[["option"],["t"]]]],[11,"next","std::collections::binary_heap","",373,[[["self"]],["option"]]],[11,"size_hint","","",373,[[["self"]]]],[11,"poll","std::boxed","",234,[[["context"],["pin",["box"]],["box"]],["poll"]]],[11,"as_mut","std::vec","",295,[[["self"]]]],[11,"as_mut","","",295,[[["self"]],["vec"]]],[11,"as_mut","std::boxed","",234,[[["self"]],["t"]]],[11,"into_iter","std::collections","Consumes the list into an iterator yielding elements by…",394,[[],["intoiter"]]],[11,"into_iter","","",375,[[],["intoiter"]]],[11,"into_iter","","Consumes the `VecDeque` into a front-to-back iterator…",401,[[],["intoiter"]]],[11,"into_iter","","Gets an iterator for moving out the `BTreeSet`'s contents.",391,[[],["intoiter"]]],[11,"into_iter","std::vec","Creates a consuming iterator, that is, one that moves each…",295,[[],["intoiter"]]],[11,"into_iter","std::collections","Creates a consuming iterator, that is, one that moves each…",368,[[],["intoiter"]]],[11,"hash","","",394,[[["self"],["h"]]]],[11,"hash","std::vec","",295,[[["self"],["h"]]]],[11,"hash","std::string","",291,[[["self"],["h"]]]],[11,"hash","std::collections","",375,[[["self"],["h"]]]],[11,"hash","","",401,[[["self"],["h"]]]],[11,"hash","std::sync","",476,[[["self"],["h"]]]],[11,"hash","std::boxed","",234,[[["self"],["h"]]]],[11,"hash","std::borrow","",1,[[["self"],["h"]]]],[11,"hash","std::collections","",391,[[["self"],["__h"]]]],[11,"hash","std::rc","",243,[[["self"],["h"]]]],[11,"borrow","","",243,[[["self"]],["t"]]],[11,"borrow","std::sync","",476,[[["self"]],["t"]]],[11,"borrow","std::string","",291,[[["self"]],["str"]]],[11,"borrow","std::boxed","",234,[[["self"]],["t"]]],[11,"borrow","std::vec","",295,[[["self"]]]],[11,"borrow","std::borrow","",1,[[["self"]],["b"]]],[11,"write_str","std::string","",291,[[["str"],["self"]],[["error"],["result",["error"]]]]],[11,"write_char","","",291,[[["self"],["char"]],[["error"],["result",["error"]]]]],[11,"len","std","Returns the length of `self`.",509,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if `self` has a length of zero bytes.",509,[[["self"]],["bool"]]],[11,"is_char_boundary","","Checks that `index`-th byte lies at the start and/or end…",509,[[["self"],["usize"]],["bool"]]],[11,"as_bytes","","Converts a string slice to a byte slice. To convert the…",509,[[["self"]]]],[11,"as_bytes_mut","","Converts a mutable string slice to a mutable byte slice.…",509,[[["self"]]]],[11,"as_ptr","","Converts a string slice to a raw pointer.",509,[[["self"]]]],[11,"as_mut_ptr","","Converts a mutable string slice to a raw pointer.",509,[[["self"]]]],[11,"get","","Returns a subslice of `str`.",509,[[["i"],["self"]],["option"]]],[11,"get_mut","","Returns a mutable subslice of `str`.",509,[[["self"],["i"]],["option"]]],[11,"get_unchecked","","Returns an unchecked subslice of `str`.",509,[[["i"],["self"]]]],[11,"get_unchecked_mut","","Returns a mutable, unchecked subslice of `str`.",509,[[["self"],["i"]]]],[11,"slice_unchecked","","Creates a string slice from another string slice,…",509,[[["self"],["usize"]],["str"]]],[11,"slice_mut_unchecked","","Creates a string slice from another string slice,…",509,[[["self"],["usize"]],["str"]]],[11,"split_at","","Divide one string slice into two at an index.",509,[[["self"],["usize"]]]],[11,"split_at_mut","","Divide one mutable string slice into two at an index.",509,[[["self"],["usize"]]]],[11,"chars","","Returns an iterator over the [`char`]s of a string slice.",509,[[["self"]],["chars"]]],[11,"char_indices","","Returns an iterator over the [`char`]s of a string slice,…",509,[[["self"]],["charindices"]]],[11,"bytes","","An iterator over the bytes of a string slice.",509,[[["self"]],["bytes"]]],[11,"split_whitespace","","Splits a string slice by whitespace.",509,[[["self"]],["splitwhitespace"]]],[11,"split_ascii_whitespace","","Splits a string slice by ASCII whitespace.",509,[[["self"]],["splitasciiwhitespace"]]],[11,"lines","","An iterator over the lines of a string, as string slices.",509,[[["self"]],["lines"]]],[11,"lines_any","","An iterator over the lines of a string.",509,[[["self"]],["linesany"]]],[11,"encode_utf16","","Returns an iterator of `u16` over the string encoded as…",509,[[["self"]],["encodeutf16"]]],[11,"contains","","Returns `true` if the given pattern matches a sub-slice of…",509,[[["self"],["p"]],["bool"]]],[11,"starts_with","","Returns `true` if the given pattern matches a prefix of…",509,[[["self"],["p"]],["bool"]]],[11,"ends_with","","Returns `true` if the given pattern matches a suffix of…",509,[[["self"],["p"]],["bool"]]],[11,"find","","Returns the byte index of the first character of this…",509,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"rfind","","Returns the byte index of the last character of this…",509,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"split","","An iterator over substrings of this string slice,…",509,[[["self"],["p"]],["split"]]],[11,"rsplit","","An iterator over substrings of the given string slice,…",509,[[["self"],["p"]],["rsplit"]]],[11,"split_terminator","","An iterator over substrings of the given string slice,…",509,[[["self"],["p"]],["splitterminator"]]],[11,"rsplit_terminator","","An iterator over substrings of `self`, separated by…",509,[[["self"],["p"]],["rsplitterminator"]]],[11,"splitn","","An iterator over substrings of the given string slice,…",509,[[["p"],["self"],["usize"]],["splitn"]]],[11,"rsplitn","","An iterator over substrings of this string slice,…",509,[[["p"],["self"],["usize"]],["rsplitn"]]],[11,"matches","","An iterator over the disjoint matches of a pattern within…",509,[[["self"],["p"]],["matches"]]],[11,"rmatches","","An iterator over the disjoint matches of a pattern within…",509,[[["self"],["p"]],["rmatches"]]],[11,"match_indices","","An iterator over the disjoint matches of a pattern within…",509,[[["self"],["p"]],["matchindices"]]],[11,"rmatch_indices","","An iterator over the disjoint matches of a pattern within…",509,[[["self"],["p"]],["rmatchindices"]]],[11,"trim","","Returns a string slice with leading and trailing…",509,[[["self"]],["str"]]],[11,"trim_start","","Returns a string slice with leading whitespace removed.",509,[[["self"]],["str"]]],[11,"trim_end","","Returns a string slice with trailing whitespace removed.",509,[[["self"]],["str"]]],[11,"trim_left","","Returns a string slice with leading whitespace removed.",509,[[["self"]],["str"]]],[11,"trim_right","","Returns a string slice with trailing whitespace removed.",509,[[["self"]],["str"]]],[11,"trim_matches","","Returns a string slice with all prefixes and suffixes that…",509,[[["self"],["p"]],["str"]]],[11,"trim_start_matches","","Returns a string slice with all prefixes that match a…",509,[[["self"],["p"]],["str"]]],[11,"strip_prefix","","Returns a string slice with the prefix removed.",509,[[["self"],["p"]],[["option",["str"]],["str"]]]],[11,"strip_suffix","","Returns a string slice with the suffix removed.",509,[[["self"],["p"]],[["option",["str"]],["str"]]]],[11,"trim_end_matches","","Returns a string slice with all suffixes that match a…",509,[[["self"],["p"]],["str"]]],[11,"trim_left_matches","","Returns a string slice with all prefixes that match a…",509,[[["self"],["p"]],["str"]]],[11,"trim_right_matches","","Returns a string slice with all suffixes that match a…",509,[[["self"],["p"]],["str"]]],[11,"parse","","Parses this string slice into another type.",509,[[["self"]],["result"]]],[11,"is_ascii","","Checks if all characters in this string are within the…",509,[[["self"]],["bool"]]],[11,"eq_ignore_ascii_case","","Checks that two strings are an ASCII case-insensitive match.",509,[[["str"],["self"]],["bool"]]],[11,"make_ascii_uppercase","","Converts this string to its ASCII upper case equivalent…",509,[[["self"]]]],[11,"make_ascii_lowercase","","Converts this string to its ASCII lower case equivalent…",509,[[["self"]]]],[11,"escape_debug","","Return an iterator that escapes each char in `self` with…",509,[[["self"]],["escapedebug"]]],[11,"escape_default","","Return an iterator that escapes each char in `self` with…",509,[[["self"]],["escapedefault"]]],[11,"escape_unicode","","Return an iterator that escapes each char in `self` with…",509,[[["self"]],["escapeunicode"]]],[11,"deref","std::string","",291,[[["self"]],["str"]]],[11,"deref","std::boxed","",234,[[["self"]],["t"]]],[11,"len","std","Returns the number of elements in the slice.",510,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the slice has a length of 0.",510,[[["self"]],["bool"]]],[11,"first","","Returns the first element of the slice, or `None` if it is…",510,[[["self"]],[["option"],["t"]]]],[11,"first_mut","","Returns a mutable pointer to the first element of the…",510,[[["self"]],[["option"],["t"]]]],[11,"split_first","","Returns the first and all the rest of the elements of the…",510,[[["self"]],["option"]]],[11,"split_first_mut","","Returns the first and all the rest of the elements of the…",510,[[["self"]],["option"]]],[11,"split_last","","Returns the last and all the rest of the elements of the…",510,[[["self"]],["option"]]],[11,"split_last_mut","","Returns the last and all the rest of the elements of the…",510,[[["self"]],["option"]]],[11,"last","","Returns the last element of the slice, or `None` if it is…",510,[[["self"]],[["option"],["t"]]]],[11,"last_mut","","Returns a mutable pointer to the last item in the slice.",510,[[["self"]],[["option"],["t"]]]],[11,"get","","Returns a reference to an element or subslice depending on…",510,[[["i"],["self"]],["option"]]],[11,"get_mut","","Returns a mutable reference to an element or subslice…",510,[[["self"],["i"]],["option"]]],[11,"get_unchecked","","Returns a reference to an element or subslice, without…",510,[[["i"],["self"]]]],[11,"get_unchecked_mut","","Returns a mutable reference to an element or subslice,…",510,[[["self"],["i"]]]],[11,"as_ptr","","Returns a raw pointer to the slice's buffer.",510,[[["self"]]]],[11,"as_mut_ptr","","Returns an unsafe mutable pointer to the slice's buffer.",510,[[["self"]]]],[11,"as_ptr_range","","Returns the two raw pointers spanning the slice.",510,[[["self"]],["range"]]],[11,"as_mut_ptr_range","","Returns the two unsafe mutable pointers spanning the slice.",510,[[["self"]],["range"]]],[11,"swap","","Swaps two elements in the slice.",510,[[["self"],["usize"]]]],[11,"reverse","","Reverses the order of elements in the slice, in place.",510,[[["self"]]]],[11,"iter","","Returns an iterator over the slice.",510,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator that allows modifying each value.",510,[[["self"]],["itermut"]]],[11,"windows","","Returns an iterator over all contiguous windows of length…",510,[[["self"],["usize"]],["windows"]]],[11,"chunks","","Returns an iterator over `chunk_size` elements of the…",510,[[["self"],["usize"]],["chunks"]]],[11,"chunks_mut","","Returns an iterator over `chunk_size` elements of the…",510,[[["self"],["usize"]],["chunksmut"]]],[11,"chunks_exact","","Returns an iterator over `chunk_size` elements of the…",510,[[["self"],["usize"]],["chunksexact"]]],[11,"chunks_exact_mut","","Returns an iterator over `chunk_size` elements of the…",510,[[["self"],["usize"]],["chunksexactmut"]]],[11,"rchunks","","Returns an iterator over `chunk_size` elements of the…",510,[[["self"],["usize"]],["rchunks"]]],[11,"rchunks_mut","","Returns an iterator over `chunk_size` elements of the…",510,[[["self"],["usize"]],["rchunksmut"]]],[11,"rchunks_exact","","Returns an iterator over `chunk_size` elements of the…",510,[[["self"],["usize"]],["rchunksexact"]]],[11,"rchunks_exact_mut","","Returns an iterator over `chunk_size` elements of the…",510,[[["self"],["usize"]],["rchunksexactmut"]]],[11,"split_at","","Divides one slice into two at an index.",510,[[["self"],["usize"]]]],[11,"split_at_mut","","Divides one mutable slice into two at an index.",510,[[["self"],["usize"]]]],[11,"split","","Returns an iterator over subslices separated by elements…",510,[[["self"],["f"]],["split"]]],[11,"split_mut","","Returns an iterator over mutable subslices separated by…",510,[[["self"],["f"]],["splitmut"]]],[11,"rsplit","","Returns an iterator over subslices separated by elements…",510,[[["self"],["f"]],["rsplit"]]],[11,"rsplit_mut","","Returns an iterator over mutable subslices separated by…",510,[[["self"],["f"]],["rsplitmut"]]],[11,"splitn","","Returns an iterator over subslices separated by elements…",510,[[["f"],["self"],["usize"]],["splitn"]]],[11,"splitn_mut","","Returns an iterator over subslices separated by elements…",510,[[["self"],["usize"],["f"]],["splitnmut"]]],[11,"rsplitn","","Returns an iterator over subslices separated by elements…",510,[[["f"],["self"],["usize"]],["rsplitn"]]],[11,"rsplitn_mut","","Returns an iterator over subslices separated by elements…",510,[[["self"],["usize"],["f"]],["rsplitnmut"]]],[11,"contains","","Returns `true` if the slice contains an element with the…",510,[[["t"],["self"]],["bool"]]],[11,"starts_with","","Returns `true` if `needle` is a prefix of the slice.",510,[[["self"]],["bool"]]],[11,"ends_with","","Returns `true` if `needle` is a suffix of the slice.",510,[[["self"]],["bool"]]],[11,"binary_search","","Binary searches this sorted slice for a given element.",510,[[["t"],["self"]],[["result",["usize","usize"]],["usize"]]]],[11,"binary_search_by","","Binary searches this sorted slice with a comparator…",510,[[["self"],["f"]],[["result",["usize","usize"]],["usize"]]]],[11,"binary_search_by_key","","Binary searches this sorted slice with a key extraction…",510,[[["b"],["self"],["f"]],[["result",["usize","usize"]],["usize"]]]],[11,"sort_unstable","","Sorts the slice, but may not preserve the order of equal…",510,[[["self"]]]],[11,"sort_unstable_by","","Sorts the slice with a comparator function, but may not…",510,[[["self"],["f"]]]],[11,"sort_unstable_by_key","","Sorts the slice with a key extraction function, but may…",510,[[["self"],["f"]]]],[11,"partition_at_index","","Reorder the slice such that the element at `index` is at…",510,[[["self"],["usize"]]]],[11,"partition_at_index_by","","Reorder the slice with a comparator function such that the…",510,[[["self"],["usize"],["f"]]]],[11,"partition_at_index_by_key","","Reorder the slice with a key extraction function such that…",510,[[["self"],["usize"],["f"]]]],[11,"partition_dedup","","Moves all consecutive repeated elements to the end of the…",510,[[["self"]]]],[11,"partition_dedup_by","","Moves all but the first of consecutive elements to the end…",510,[[["self"],["f"]]]],[11,"partition_dedup_by_key","","Moves all but the first of consecutive elements to the end…",510,[[["self"],["f"]]]],[11,"rotate_left","","Rotates the slice in-place such that the first `mid`…",510,[[["self"],["usize"]]]],[11,"rotate_right","","Rotates the slice in-place such that the first `self.len()…",510,[[["self"],["usize"]]]],[11,"clone_from_slice","","Copies the elements from `src` into `self`.",510,[[["self"]]]],[11,"copy_from_slice","","Copies all elements from `src` into `self`, using a memcpy.",510,[[["self"]]]],[11,"copy_within","","Copies elements from one part of the slice to another part…",510,[[["self"],["usize"],["r"]]]],[11,"swap_with_slice","","Swaps all elements in `self` with those in `other`.",510,[[["self"]]]],[11,"align_to","","Transmute the slice to a slice of another type, ensuring…",510,[[["self"]]]],[11,"align_to_mut","","Transmute the slice to a slice of another type, ensuring…",510,[[["self"]]]],[11,"is_sorted","","Checks if the elements of this slice are sorted.",510,[[["self"]],["bool"]]],[11,"is_sorted_by","","Checks if the elements of this slice are sorted using the…",510,[[["self"],["f"]],["bool"]]],[11,"is_sorted_by_key","","Checks if the elements of this slice are sorted using the…",510,[[["self"],["f"]],["bool"]]],[11,"deref","std::vec","",295,[[["self"]]]],[11,"deref","std::rc","",243,[[["self"]],["t"]]],[11,"deref","std::borrow","",1,[[["self"]],["b"]]],[11,"deref","std::collections::binary_heap","",369,[[["self"]],["t"]]],[11,"deref","std::sync","",476,[[["self"]],["t"]]],[11,"as_ref","","",476,[[["self"]],["t"]]],[11,"as_ref","std::vec","",295,[[["self"]]]],[11,"as_ref","","",295,[[["self"]],["vec"]]],[11,"as_ref","std::borrow","",1,[[["self"]],["t"]]],[11,"as_ref","std::rc","",243,[[["self"]],["t"]]],[11,"as_ref","std::string","",291,[[["self"]],["str"]]],[11,"as_ref","","",291,[[["self"]]]],[11,"as_ref","std::boxed","",234,[[["self"]],["t"]]],[11,"call_mut","","",234,[[["a"],["self"]]]],[11,"index_mut","std::string","",291,[[["self"],["rangeto",["usize"]],["usize"]],["str"]]],[11,"index_mut","","",291,[[["self"],["rangefrom",["usize"]],["usize"]],["str"]]],[11,"index_mut","","",291,[[["self"],["usize"],["rangetoinclusive",["usize"]]],["str"]]],[11,"index_mut","","",291,[[["rangeinclusive",["usize"]],["self"],["usize"]],["str"]]],[11,"index_mut","","",291,[[["self"],["range",["usize"]],["usize"]],["str"]]],[11,"index_mut","","",291,[[["self"],["rangefull"]],["str"]]],[11,"index_mut","std::vec","",295,[[["self"],["i"]]]],[11,"index_mut","std::collections","",401,[[["self"],["usize"]],["a"]]],[11,"from","std::vec","",295,[[["box"]],["vec"]]],[11,"from","std::boxed","Converts the given `String` to a boxed `str` slice that is…",234,[[["string"]],[["str"],["box",["str"]]]]],[11,"from","std::vec","",295,[[["str"]],[["u8"],["vec",["u8"]]]]],[11,"from","std::string","",291,[[["str"],["cow",["str"]]],["string"]]],[11,"from","std::vec","",295,[[],["vec"]]],[11,"from","std::collections","Converts a `Vec<T>` into a `BinaryHeap<T>`.",368,[[["vec"]],["binaryheap"]]],[11,"from","std::rc","",243,[[],["rc"]]],[11,"from","std::collections","Turn a [`Vec<T>`] into a [`VecDeque<T>`].",401,[[["vec"]],["vecdeque"]]],[11,"from","std::vec","",295,[[["cow"]],["vec"]]],[11,"from","std::sync","",476,[[["string"]],[["str"],["arc",["str"]]]]],[11,"from","std::borrow","",1,[[],["cow"]]],[11,"from","","",1,[[["string"]],[["str"],["cow",["str"]]]]],[11,"from","std::string","",291,[[["string"]],["string"]]],[11,"from","std::rc","",243,[[["string"]],[["rc",["str"]],["str"]]]],[11,"from","std::sync","",476,[[],["arc"]]],[11,"from","std::boxed","Converts a generic type `T` into a `Box<T>`",234,[[["t"]],["box"]]],[11,"from","std::rc","",243,[[["t"]],["rc"]]],[11,"from","std::boxed","Converts a `&[T]` into a `Box<[T]>`",234,[[],["box"]]],[11,"from","std::borrow","",1,[[["vec"]],["cow"]]],[11,"from","","",1,[[["string"]],[["str"],["cow",["str"]]]]],[11,"from","std::vec","",295,[[],["vec"]]],[11,"from","std::boxed","Converts a `&str` into a `Box<str>`",234,[[["str"]],[["str"],["box",["str"]]]]],[11,"from","std::sync","",476,[[["t"]],["arc"]]],[11,"from","std::rc","",243,[[["vec"]],["rc"]]],[11,"from","std::vec","Turn a [`VecDeque<T>`] into a [`Vec<T>`].",295,[[["vecdeque"]],["vec"]]],[11,"from","std::string","",291,[[["str"]],["string"]]],[11,"from","std::borrow","",1,[[["str"]],[["str"],["cow",["str"]]]]],[11,"from","std::sync","",476,[[["box"]],["arc"]]],[11,"from","","",476,[[["str"]],[["str"],["arc",["str"]]]]],[11,"from","std::collections","",103,[[["layouterr"]],["tryreserveerror"]]],[11,"from","std::string","Converts the given boxed `str` slice to a `String`. It is…",291,[[["str"],["box",["str"]]],["string"]]],[11,"from","std::pin","Converts a `Box<T>` into a `Pin<Box<T>>`",361,[[["box"]],[["box"],["pin",["box"]]]]],[11,"from","std::vec","",295,[[["binaryheap"]],["vec"]]],[11,"from","std::rc","",243,[[["str"]],[["rc",["str"]],["str"]]]],[11,"from","std::vec","Converts the given `String` to a vector `Vec` that holds…",295,[[["string"]],[["u8"],["vec",["u8"]]]]],[11,"from","std::rc","",243,[[["box"]],["rc"]]],[11,"from","std::boxed","Converts a `Box<str>>` into a `Box<[u8]>`",234,[[["str"],["box",["str"]]],["box"]]],[11,"from","","",234,[[["vec"]],["box"]]],[11,"from","std::borrow","",1,[[["vec"]],["cow"]]],[11,"from","std::sync","",476,[[["vec"]],["arc"]]],[11,"fmt","std::boxed","",234,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::string","",291,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",293,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::borrow","",1,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::string","",292,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::sync","",476,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::rc","",243,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::linked_list","",397,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::binary_heap","",372,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::btree_set","",387,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::btree_map","",102,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::vec","",296,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::borrow","",1,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::vec","",295,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::btree_set","",389,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::vec_deque","",403,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::binary_heap","",374,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::sync","",477,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::linked_list","",400,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::btree_map","",379,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::string","",292,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::sync","",476,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::vec_deque","",405,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::binary_heap","",373,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections","",401,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::string","",293,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::vec","",297,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::btree_set","",390,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::btree_map","",384,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::btree_set","",393,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::btree_map","",380,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections","",391,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::btree_set","",388,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::linked_list","",396,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::btree_map","",382,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections","",375,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::linked_list","",398,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::btree_map","",378,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::rc","",244,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::vec_deque","",404,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::binary_heap","",371,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::alloc","",502,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::linked_list","",395,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::btree_map","",381,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::rc","",243,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::btree_set","",392,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::string","",291,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::binary_heap","",370,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::vec","",298,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::boxed","",234,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::btree_map","",377,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::btree_set","",386,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::btree_map","",376,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::vec","",299,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::vec_deque","",402,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections","",103,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::binary_heap","",369,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::btree_map","",385,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections","",368,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::string","",294,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::btree_map","",383,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections::linked_list","",399,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","std::collections","",394,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"partial_cmp","std::vec","",295,[[["self"],["vec"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::borrow","",1,[[["self"],["cow"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::collections","",391,[[["self"],["btreeset"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",391,[[["self"],["btreeset"]],["bool"]]],[11,"le","","",391,[[["self"],["btreeset"]],["bool"]]],[11,"gt","","",391,[[["self"],["btreeset"]],["bool"]]],[11,"ge","","",391,[[["self"],["btreeset"]],["bool"]]],[11,"partial_cmp","std::boxed","",234,[[["box"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",234,[[["box"],["self"]],["bool"]]],[11,"le","","",234,[[["box"],["self"]],["bool"]]],[11,"ge","","",234,[[["box"],["self"]],["bool"]]],[11,"gt","","",234,[[["box"],["self"]],["bool"]]],[11,"partial_cmp","std::string","",291,[[["self"],["string"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",291,[[["self"],["string"]],["bool"]]],[11,"le","","",291,[[["self"],["string"]],["bool"]]],[11,"gt","","",291,[[["self"],["string"]],["bool"]]],[11,"ge","","",291,[[["self"],["string"]],["bool"]]],[11,"partial_cmp","std::sync","Partial comparison for two `Arc`s.",476,[[["arc"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","Less-than comparison for two `Arc`s.",476,[[["arc"],["self"]],["bool"]]],[11,"le","","'Less than or equal to' comparison for two `Arc`s.",476,[[["arc"],["self"]],["bool"]]],[11,"gt","","Greater-than comparison for two `Arc`s.",476,[[["arc"],["self"]],["bool"]]],[11,"ge","","'Greater than or equal to' comparison for two `Arc`s.",476,[[["arc"],["self"]],["bool"]]],[11,"partial_cmp","std::collections","",394,[[["linkedlist"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",401,[[["vecdeque"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",375,[[["self"],["btreemap"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::rc","Partial comparison for two `Rc`s.",243,[[["rc"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","Less-than comparison for two `Rc`s.",243,[[["rc"],["self"]],["bool"]]],[11,"le","","'Less than or equal to' comparison for two `Rc`s.",243,[[["rc"],["self"]],["bool"]]],[11,"gt","","Greater-than comparison for two `Rc`s.",243,[[["rc"],["self"]],["bool"]]],[11,"ge","","'Greater than or equal to' comparison for two `Rc`s.",243,[[["rc"],["self"]],["bool"]]],[11,"call","std::boxed","",234,[[["a"],["self"]]]],[11,"clone","std::collections","",103,[[["self"]],["tryreserveerror"]]],[11,"clone","std::borrow","",1,[[["self"]],["cow"]]],[11,"clone_from","","",1,[[["self"],["cow"]]]],[11,"clone","std::string","",291,[[["self"]],["string"]]],[11,"clone_from","","",291,[[["self"],["string"]]]],[11,"clone","std::collections","",391,[[["self"]],["btreeset"]]],[11,"clone","std::boxed","",234,[[["self"]],[["str"],["box",["str"]]]]],[11,"clone","std::collections::btree_map","",376,[[["self"]],["keys"]]],[11,"clone","std::collections::btree_set","",386,[[["self"]],["iter"]]],[11,"clone","","",387,[[["self"]],["difference"]]],[11,"clone","std::collections::binary_heap","",370,[[["self"]],["iter"]]],[11,"clone","std::collections::vec_deque","",402,[[["self"]],["iter"]]],[11,"clone","std::collections::binary_heap","",371,[[["self"]],["intoiter"]]],[11,"clone","std::sync","Makes a clone of the `Arc` pointer.",476,[[["self"]],["arc"]]],[11,"clone","std::collections::binary_heap","",372,[[["self"]],["intoitersorted"]]],[11,"clone","std::collections::btree_set","",390,[[["self"]],["union"]]],[11,"clone","std::alloc","",502,[[["self"]],["global"]]],[11,"clone","std::vec","",295,[[["self"]],["vec"]]],[11,"clone_from","","",295,[[["self"],["vec"]]]],[11,"clone","std::collections::btree_set","",393,[[["self"]],["range"]]],[11,"clone","std::boxed","",234,[[["self"]],["box"]]],[11,"clone","std::collections::btree_set","",389,[[["self"]],["intersection"]]],[11,"clone","std::rc","Makes a clone of the `Weak` pointer that points to the…",244,[[["self"]],["weak"]]],[11,"clone","std::boxed","Returns a new box with a `clone()` of this box's contents.",234,[[["self"]],["box"]]],[11,"clone_from","","Copies `source`'s contents into `self` without creating a…",234,[[["box"],["self"]]]],[11,"clone","std::collections::btree_map","",379,[[["self"]],["values"]]],[11,"clone","std::vec","",296,[[["self"]],["intoiter"]]],[11,"clone","std::collections::linked_list","",397,[[["self"]],["intoiter"]]],[11,"clone","std::collections::btree_set","",388,[[["self"]],["symmetricdifference"]]],[11,"clone","std::collections","",368,[[["self"]],["binaryheap"]]],[11,"clone_from","","",368,[[["self"],["binaryheap"]]]],[11,"clone","std::collections::btree_map","",380,[[["self"]],["range"]]],[11,"clone","std::sync","Makes a clone of the `Weak` pointer that points to the…",477,[[["self"]],["weak"]]],[11,"clone","std::collections","",394,[[["self"]],["linkedlist"]]],[11,"clone_from","","",394,[[["self"],["linkedlist"]]]],[11,"clone","std::collections::btree_map","",377,[[["self"]],["iter"]]],[11,"clone","std::rc","Makes a clone of the `Rc` pointer.",243,[[["self"]],["rc"]]],[11,"clone","std::collections","",401,[[["self"]],["vecdeque"]]],[11,"clone_from","","",401,[[["self"],["vecdeque"]]]],[11,"clone","std::collections::linked_list","",395,[[["self"]],["iter"]]],[11,"clone","std::collections","",375,[[["self"]],["btreemap"]]],[11,"clone","std::collections::vec_deque","",404,[[["self"]],["intoiter"]]],[11,"add_assign","std::borrow","",1,[[["self"],["str"]]]],[11,"add_assign","std::string","",291,[[["str"],["self"]]]],[11,"add_assign","std::borrow","",1,[[["str"],["self"],["cow",["str"]]]]],[11,"eq","std::collections","",375,[[["self"],["btreemap"]],["bool"]]],[11,"eq","std::boxed","",234,[[["box"],["self"]],["bool"]]],[11,"ne","","",234,[[["box"],["self"]],["bool"]]],[11,"eq","std::borrow","",1,[[["str"],["self"]],["bool"]]],[11,"ne","","",1,[[["str"],["self"]],["bool"]]],[11,"eq","std::collections","",401,[[["self"]],["bool"]]],[11,"eq","std","",509,[[["self"],["cow"]],["bool"]]],[11,"ne","","",509,[[["self"],["cow"]],["bool"]]],[11,"eq","std::sync","Equality for two `Arc`s.",476,[[["arc"],["self"]],["bool"]]],[11,"ne","","Inequality for two `Arc`s.",476,[[["arc"],["self"]],["bool"]]],[11,"eq","std::borrow","",1,[[["self"],["string"]],["bool"]]],[11,"ne","","",1,[[["self"],["string"]],["bool"]]],[11,"eq","std::vec","",295,[[["self"]],["bool"]]],[11,"ne","","",295,[[["self"]],["bool"]]],[11,"eq","std::string","",291,[[["self"],["cow"]],["bool"]]],[11,"ne","","",291,[[["self"],["cow"]],["bool"]]],[11,"eq","std::collections","",401,[[["self"]],["bool"]]],[11,"eq","","",394,[[["linkedlist"],["self"]],["bool"]]],[11,"ne","","",394,[[["linkedlist"],["self"]],["bool"]]],[11,"eq","std::borrow","",1,[[["self"]],["bool"]]],[11,"ne","","",1,[[["self"]],["bool"]]],[11,"eq","std::collections","",401,[[["self"]],["bool"]]],[11,"eq","","",401,[[["self"]],["bool"]]],[11,"eq","std::vec","",295,[[["self"]],["bool"]]],[11,"ne","","",295,[[["self"]],["bool"]]],[11,"eq","","",295,[[["self"]],["bool"]]],[11,"ne","","",295,[[["self"]],["bool"]]],[11,"eq","std::collections","",401,[[["self"],["vec"]],["bool"]]],[11,"eq","","",103,[[["self"],["tryreserveerror"]],["bool"]]],[11,"ne","","",103,[[["self"],["tryreserveerror"]],["bool"]]],[11,"eq","","",401,[[["vecdeque"],["self"]],["bool"]]],[11,"eq","std::string","",291,[[["str"],["self"]],["bool"]]],[11,"ne","","",291,[[["str"],["self"]],["bool"]]],[11,"eq","std","",509,[[["self"],["string"]],["bool"]]],[11,"ne","","",509,[[["self"],["string"]],["bool"]]],[11,"eq","std::collections","",401,[[["self"]],["bool"]]],[11,"eq","std","",509,[[["self"],["string"]],["bool"]]],[11,"ne","","",509,[[["self"],["string"]],["bool"]]],[11,"eq","std::borrow","",1,[[["cow"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"]],["bool"]]],[11,"ne","","",1,[[["self"]],["bool"]]],[11,"eq","","",1,[[["str"],["self"]],["bool"]]],[11,"ne","","",1,[[["str"],["self"]],["bool"]]],[11,"eq","std::collections","",391,[[["self"],["btreeset"]],["bool"]]],[11,"ne","","",391,[[["self"],["btreeset"]],["bool"]]],[11,"eq","std::rc","Equality for two `Rc`s.",243,[[["rc"],["self"]],["bool"]]],[11,"ne","","Inequality for two `Rc`s.",243,[[["rc"],["self"]],["bool"]]],[11,"eq","std","",509,[[["self"],["cow"]],["bool"]]],[11,"ne","","",509,[[["self"],["cow"]],["bool"]]],[11,"eq","std::borrow","",1,[[["self"],["vec"]],["bool"]]],[11,"ne","","",1,[[["self"],["vec"]],["bool"]]],[11,"eq","std::vec","",295,[[["self"],["vec"]],["bool"]]],[11,"ne","","",295,[[["self"],["vec"]],["bool"]]],[11,"eq","std::string","",291,[[["str"],["self"]],["bool"]]],[11,"ne","","",291,[[["str"],["self"]],["bool"]]],[11,"eq","","",291,[[["self"],["string"]],["bool"]]],[11,"ne","","",291,[[["self"],["string"]],["bool"]]],[11,"eq","std::vec","",295,[[["self"]],["bool"]]],[11,"ne","","",295,[[["self"]],["bool"]]],[11,"finish","std::boxed","",234,[[["self"]],["u64"]]],[11,"write","","",234,[[["self"]]]],[11,"write_u8","","",234,[[["self"],["u8"]]]],[11,"write_u16","","",234,[[["u16"],["self"]]]],[11,"write_u32","","",234,[[["self"],["u32"]]]],[11,"write_u64","","",234,[[["self"],["u64"]]]],[11,"write_u128","","",234,[[["self"],["u128"]]]],[11,"write_usize","","",234,[[["self"],["usize"]]]],[11,"write_i8","","",234,[[["self"],["i8"]]]],[11,"write_i16","","",234,[[["self"],["i16"]]]],[11,"write_i32","","",234,[[["self"],["i32"]]]],[11,"write_i64","","",234,[[["i64"],["self"]]]],[11,"write_i128","","",234,[[["self"],["i128"]]]],[11,"write_isize","","",234,[[["isize"],["self"]]]],[11,"min_value","std","Returns the smallest value that can be represented by this…",515,[[],["isize"]]],[11,"max_value","","Returns the largest value that can be represented by this…",515,[[],["isize"]]],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",515,[[["str"],["u32"]],[["isize"],["parseinterror"],["result",["isize","parseinterror"]]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",515,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",515,[[],["u32"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",515,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",515,[[],["u32"]]],[11,"leading_ones","","Returns the number of leading ones in the binary…",515,[[],["u32"]]],[11,"trailing_ones","","Returns the number of trailing ones in the binary…",515,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",515,[[["u32"]],["isize"]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",515,[[["u32"]],["isize"]]],[11,"swap_bytes","","Reverses the byte order of the integer.",515,[[],["isize"]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",515,[[],["isize"]]],[11,"from_be","","Converts an integer from big endian to the target's…",515,[[["isize"]],["isize"]]],[11,"from_le","","Converts an integer from little endian to the target's…",515,[[["isize"]],["isize"]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",515,[[],["isize"]]],[11,"to_le","","Converts `self` to little endian from the target's…",515,[[],["isize"]]],[11,"checked_add","","Checked integer addition. Computes `self + rhs`, returning…",515,[[["isize"]],[["isize"],["option",["isize"]]]]],[11,"checked_sub","","Checked integer subtraction. Computes `self - rhs`,…",515,[[["isize"]],[["isize"],["option",["isize"]]]]],[11,"checked_mul","","Checked integer multiplication. Computes `self * rhs`,…",515,[[["isize"]],[["isize"],["option",["isize"]]]]],[11,"checked_div","","Checked integer division. Computes `self / rhs`, returning…",515,[[["isize"]],[["isize"],["option",["isize"]]]]],[11,"checked_div_euclid","","Checked Euclidean division. Computes…",515,[[["isize"]],[["isize"],["option",["isize"]]]]],[11,"checked_rem","","Checked integer remainder. Computes `self % rhs`,…",515,[[["isize"]],[["isize"],["option",["isize"]]]]],[11,"checked_rem_euclid","","Checked Euclidean remainder. Computes…",515,[[["isize"]],[["isize"],["option",["isize"]]]]],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if…",515,[[],[["isize"],["option",["isize"]]]]],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",515,[[["u32"]],[["isize"],["option",["isize"]]]]],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",515,[[["u32"]],[["isize"],["option",["isize"]]]]],[11,"checked_abs","","Checked absolute value. Computes `self.abs()`, returning…",515,[[],[["isize"],["option",["isize"]]]]],[11,"checked_pow","","Checked exponentiation. Computes `self.pow(exp)`,…",515,[[["u32"]],[["isize"],["option",["isize"]]]]],[11,"saturating_add","","Saturating integer addition. Computes `self + rhs`,…",515,[[["isize"]],["isize"]]],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - rhs`,…",515,[[["isize"]],["isize"]]],[11,"saturating_neg","","Saturating integer negation. Computes `-self`, returning…",515,[[],["isize"]]],[11,"saturating_abs","","Saturating absolute value. Computes `self.abs()`,…",515,[[],["isize"]]],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * rhs`,…",515,[[["isize"]],["isize"]]],[11,"saturating_pow","","Saturating integer exponentiation. Computes…",515,[[["u32"]],["isize"]]],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + rhs`,…",515,[[["isize"]],["isize"]]],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - rhs`,…",515,[[["isize"]],["isize"]]],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * rhs`,…",515,[[["isize"]],["isize"]]],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / rhs`,…",515,[[["isize"]],["isize"]]],[11,"wrapping_div_euclid","","Wrapping Euclidean division. Computes…",515,[[["isize"]],["isize"]]],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % rhs`,…",515,[[["isize"]],["isize"]]],[11,"wrapping_rem_euclid","","Wrapping Euclidean remainder. Computes…",515,[[["isize"]],["isize"]]],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping…",515,[[],["isize"]]],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",515,[[["u32"]],["isize"]]],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",515,[[["u32"]],["isize"]]],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes `self.abs()`,…",515,[[],["isize"]]],[11,"wrapping_pow","","Wrapping (modular) exponentiation. Computes…",515,[[["u32"]],["isize"]]],[11,"overflowing_add","","Calculates `self` + `rhs`",515,[[["isize"]]]],[11,"overflowing_sub","","Calculates `self` - `rhs`",515,[[["isize"]]]],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",515,[[["isize"]]]],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",515,[[["isize"]]]],[11,"overflowing_div_euclid","","Calculates the quotient of Euclidean division…",515,[[["isize"]]]],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",515,[[["isize"]]]],[11,"overflowing_rem_euclid","","Overflowing Euclidean remainder. Calculates…",515,[[["isize"]]]],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum…",515,[[]]],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",515,[[["u32"]]]],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",515,[[["u32"]]]],[11,"overflowing_abs","","Computes the absolute value of `self`.",515,[[]]],[11,"overflowing_pow","","Raises self to the power of `exp`, using exponentiation by…",515,[[["u32"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",515,[[["u32"]],["isize"]]],[11,"div_euclid","","Calculates the quotient of Euclidean division of `self` by…",515,[[["isize"]],["isize"]]],[11,"rem_euclid","","Calculates the least nonnegative remainder of `self (mod…",515,[[["isize"]],["isize"]]],[11,"abs","","Computes the absolute value of `self`.",515,[[],["isize"]]],[11,"signum","","Returns a number representing sign of `self`.",515,[[],["isize"]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",515,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",515,[[],["bool"]]],[11,"to_be_bytes","","Return the memory representation of this integer as a byte…",515,[[]]],[11,"to_le_bytes","","Return the memory representation of this integer as a byte…",515,[[]]],[11,"to_ne_bytes","","Return the memory representation of this integer as a byte…",515,[[]]],[11,"from_be_bytes","","Create an integer value from its representation as a byte…",515,[[],["isize"]]],[11,"from_le_bytes","","Create an integer value from its representation as a byte…",515,[[],["isize"]]],[11,"from_ne_bytes","","Create an integer value from its memory representation as…",515,[[],["isize"]]],[11,"from","","",515,[[["t"]],["t"]]],[11,"try_from","","",515,[[["u"]],["result"]]],[11,"into","","",515,[[],["u"]]],[11,"try_into","","",515,[[],["result"]]],[11,"borrow","","",515,[[["self"]],["t"]]],[11,"borrow_mut","","",515,[[["self"]],["t"]]],[11,"type_id","","",515,[[["self"]],["typeid"]]],[11,"to_owned","","",515,[[["self"]],["t"]]],[11,"clone_into","","",515,[[["self"],["t"]]]],[11,"to_string","","",515,[[["self"]],["string"]]],[11,"min_value","","Returns the smallest value that can be represented by this…",522,[[],["i8"]]],[11,"max_value","","Returns the largest value that can be represented by this…",522,[[],["i8"]]],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",522,[[["str"],["u32"]],[["i8"],["parseinterror"],["result",["i8","parseinterror"]]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",522,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",522,[[],["u32"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",522,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",522,[[],["u32"]]],[11,"leading_ones","","Returns the number of leading ones in the binary…",522,[[],["u32"]]],[11,"trailing_ones","","Returns the number of trailing ones in the binary…",522,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",522,[[["u32"]],["i8"]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",522,[[["u32"]],["i8"]]],[11,"swap_bytes","","Reverses the byte order of the integer.",522,[[],["i8"]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",522,[[],["i8"]]],[11,"from_be","","Converts an integer from big endian to the target's…",522,[[["i8"]],["i8"]]],[11,"from_le","","Converts an integer from little endian to the target's…",522,[[["i8"]],["i8"]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",522,[[],["i8"]]],[11,"to_le","","Converts `self` to little endian from the target's…",522,[[],["i8"]]],[11,"checked_add","","Checked integer addition. Computes `self + rhs`, returning…",522,[[["i8"]],[["option",["i8"]],["i8"]]]],[11,"checked_sub","","Checked integer subtraction. Computes `self - rhs`,…",522,[[["i8"]],[["option",["i8"]],["i8"]]]],[11,"checked_mul","","Checked integer multiplication. Computes `self * rhs`,…",522,[[["i8"]],[["option",["i8"]],["i8"]]]],[11,"checked_div","","Checked integer division. Computes `self / rhs`, returning…",522,[[["i8"]],[["option",["i8"]],["i8"]]]],[11,"checked_div_euclid","","Checked Euclidean division. Computes…",522,[[["i8"]],[["option",["i8"]],["i8"]]]],[11,"checked_rem","","Checked integer remainder. Computes `self % rhs`,…",522,[[["i8"]],[["option",["i8"]],["i8"]]]],[11,"checked_rem_euclid","","Checked Euclidean remainder. Computes…",522,[[["i8"]],[["option",["i8"]],["i8"]]]],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if…",522,[[],[["option",["i8"]],["i8"]]]],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",522,[[["u32"]],[["option",["i8"]],["i8"]]]],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",522,[[["u32"]],[["option",["i8"]],["i8"]]]],[11,"checked_abs","","Checked absolute value. Computes `self.abs()`, returning…",522,[[],[["option",["i8"]],["i8"]]]],[11,"checked_pow","","Checked exponentiation. Computes `self.pow(exp)`,…",522,[[["u32"]],[["option",["i8"]],["i8"]]]],[11,"saturating_add","","Saturating integer addition. Computes `self + rhs`,…",522,[[["i8"]],["i8"]]],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - rhs`,…",522,[[["i8"]],["i8"]]],[11,"saturating_neg","","Saturating integer negation. Computes `-self`, returning…",522,[[],["i8"]]],[11,"saturating_abs","","Saturating absolute value. Computes `self.abs()`,…",522,[[],["i8"]]],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * rhs`,…",522,[[["i8"]],["i8"]]],[11,"saturating_pow","","Saturating integer exponentiation. Computes…",522,[[["u32"]],["i8"]]],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + rhs`,…",522,[[["i8"]],["i8"]]],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - rhs`,…",522,[[["i8"]],["i8"]]],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * rhs`,…",522,[[["i8"]],["i8"]]],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / rhs`,…",522,[[["i8"]],["i8"]]],[11,"wrapping_div_euclid","","Wrapping Euclidean division. Computes…",522,[[["i8"]],["i8"]]],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % rhs`,…",522,[[["i8"]],["i8"]]],[11,"wrapping_rem_euclid","","Wrapping Euclidean remainder. Computes…",522,[[["i8"]],["i8"]]],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping…",522,[[],["i8"]]],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",522,[[["u32"]],["i8"]]],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",522,[[["u32"]],["i8"]]],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes `self.abs()`,…",522,[[],["i8"]]],[11,"wrapping_pow","","Wrapping (modular) exponentiation. Computes…",522,[[["u32"]],["i8"]]],[11,"overflowing_add","","Calculates `self` + `rhs`",522,[[["i8"]]]],[11,"overflowing_sub","","Calculates `self` - `rhs`",522,[[["i8"]]]],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",522,[[["i8"]]]],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",522,[[["i8"]]]],[11,"overflowing_div_euclid","","Calculates the quotient of Euclidean division…",522,[[["i8"]]]],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",522,[[["i8"]]]],[11,"overflowing_rem_euclid","","Overflowing Euclidean remainder. Calculates…",522,[[["i8"]]]],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum…",522,[[]]],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",522,[[["u32"]]]],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",522,[[["u32"]]]],[11,"overflowing_abs","","Computes the absolute value of `self`.",522,[[]]],[11,"overflowing_pow","","Raises self to the power of `exp`, using exponentiation by…",522,[[["u32"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",522,[[["u32"]],["i8"]]],[11,"div_euclid","","Calculates the quotient of Euclidean division of `self` by…",522,[[["i8"]],["i8"]]],[11,"rem_euclid","","Calculates the least nonnegative remainder of `self (mod…",522,[[["i8"]],["i8"]]],[11,"abs","","Computes the absolute value of `self`.",522,[[],["i8"]]],[11,"signum","","Returns a number representing sign of `self`.",522,[[],["i8"]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",522,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",522,[[],["bool"]]],[11,"to_be_bytes","","Return the memory representation of this integer as a byte…",522,[[]]],[11,"to_le_bytes","","Return the memory representation of this integer as a byte…",522,[[]]],[11,"to_ne_bytes","","Return the memory representation of this integer as a byte…",522,[[]]],[11,"from_be_bytes","","Create an integer value from its representation as a byte…",522,[[],["i8"]]],[11,"from_le_bytes","","Create an integer value from its representation as a byte…",522,[[],["i8"]]],[11,"from_ne_bytes","","Create an integer value from its memory representation as…",522,[[],["i8"]]],[11,"from","","",522,[[["t"]],["t"]]],[11,"try_from","","",522,[[["u"]],["result"]]],[11,"into","","",522,[[],["u"]]],[11,"try_into","","",522,[[],["result"]]],[11,"borrow","","",522,[[["self"]],["t"]]],[11,"borrow_mut","","",522,[[["self"]],["t"]]],[11,"type_id","","",522,[[["self"]],["typeid"]]],[11,"to_owned","","",522,[[["self"]],["t"]]],[11,"clone_into","","",522,[[["self"],["t"]]]],[11,"to_string","","",522,[[["self"]],["string"]]],[11,"min_value","","Returns the smallest value that can be represented by this…",514,[[],["i16"]]],[11,"max_value","","Returns the largest value that can be represented by this…",514,[[],["i16"]]],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",514,[[["str"],["u32"]],[["parseinterror"],["i16"],["result",["i16","parseinterror"]]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",514,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",514,[[],["u32"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",514,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",514,[[],["u32"]]],[11,"leading_ones","","Returns the number of leading ones in the binary…",514,[[],["u32"]]],[11,"trailing_ones","","Returns the number of trailing ones in the binary…",514,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",514,[[["u32"]],["i16"]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",514,[[["u32"]],["i16"]]],[11,"swap_bytes","","Reverses the byte order of the integer.",514,[[],["i16"]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",514,[[],["i16"]]],[11,"from_be","","Converts an integer from big endian to the target's…",514,[[["i16"]],["i16"]]],[11,"from_le","","Converts an integer from little endian to the target's…",514,[[["i16"]],["i16"]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",514,[[],["i16"]]],[11,"to_le","","Converts `self` to little endian from the target's…",514,[[],["i16"]]],[11,"checked_add","","Checked integer addition. Computes `self + rhs`, returning…",514,[[["i16"]],[["option",["i16"]],["i16"]]]],[11,"checked_sub","","Checked integer subtraction. Computes `self - rhs`,…",514,[[["i16"]],[["option",["i16"]],["i16"]]]],[11,"checked_mul","","Checked integer multiplication. Computes `self * rhs`,…",514,[[["i16"]],[["option",["i16"]],["i16"]]]],[11,"checked_div","","Checked integer division. Computes `self / rhs`, returning…",514,[[["i16"]],[["option",["i16"]],["i16"]]]],[11,"checked_div_euclid","","Checked Euclidean division. Computes…",514,[[["i16"]],[["option",["i16"]],["i16"]]]],[11,"checked_rem","","Checked integer remainder. Computes `self % rhs`,…",514,[[["i16"]],[["option",["i16"]],["i16"]]]],[11,"checked_rem_euclid","","Checked Euclidean remainder. Computes…",514,[[["i16"]],[["option",["i16"]],["i16"]]]],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if…",514,[[],[["option",["i16"]],["i16"]]]],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",514,[[["u32"]],[["option",["i16"]],["i16"]]]],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",514,[[["u32"]],[["option",["i16"]],["i16"]]]],[11,"checked_abs","","Checked absolute value. Computes `self.abs()`, returning…",514,[[],[["option",["i16"]],["i16"]]]],[11,"checked_pow","","Checked exponentiation. Computes `self.pow(exp)`,…",514,[[["u32"]],[["option",["i16"]],["i16"]]]],[11,"saturating_add","","Saturating integer addition. Computes `self + rhs`,…",514,[[["i16"]],["i16"]]],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - rhs`,…",514,[[["i16"]],["i16"]]],[11,"saturating_neg","","Saturating integer negation. Computes `-self`, returning…",514,[[],["i16"]]],[11,"saturating_abs","","Saturating absolute value. Computes `self.abs()`,…",514,[[],["i16"]]],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * rhs`,…",514,[[["i16"]],["i16"]]],[11,"saturating_pow","","Saturating integer exponentiation. Computes…",514,[[["u32"]],["i16"]]],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + rhs`,…",514,[[["i16"]],["i16"]]],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - rhs`,…",514,[[["i16"]],["i16"]]],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * rhs`,…",514,[[["i16"]],["i16"]]],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / rhs`,…",514,[[["i16"]],["i16"]]],[11,"wrapping_div_euclid","","Wrapping Euclidean division. Computes…",514,[[["i16"]],["i16"]]],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % rhs`,…",514,[[["i16"]],["i16"]]],[11,"wrapping_rem_euclid","","Wrapping Euclidean remainder. Computes…",514,[[["i16"]],["i16"]]],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping…",514,[[],["i16"]]],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",514,[[["u32"]],["i16"]]],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",514,[[["u32"]],["i16"]]],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes `self.abs()`,…",514,[[],["i16"]]],[11,"wrapping_pow","","Wrapping (modular) exponentiation. Computes…",514,[[["u32"]],["i16"]]],[11,"overflowing_add","","Calculates `self` + `rhs`",514,[[["i16"]]]],[11,"overflowing_sub","","Calculates `self` - `rhs`",514,[[["i16"]]]],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",514,[[["i16"]]]],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",514,[[["i16"]]]],[11,"overflowing_div_euclid","","Calculates the quotient of Euclidean division…",514,[[["i16"]]]],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",514,[[["i16"]]]],[11,"overflowing_rem_euclid","","Overflowing Euclidean remainder. Calculates…",514,[[["i16"]]]],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum…",514,[[]]],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",514,[[["u32"]]]],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",514,[[["u32"]]]],[11,"overflowing_abs","","Computes the absolute value of `self`.",514,[[]]],[11,"overflowing_pow","","Raises self to the power of `exp`, using exponentiation by…",514,[[["u32"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",514,[[["u32"]],["i16"]]],[11,"div_euclid","","Calculates the quotient of Euclidean division of `self` by…",514,[[["i16"]],["i16"]]],[11,"rem_euclid","","Calculates the least nonnegative remainder of `self (mod…",514,[[["i16"]],["i16"]]],[11,"abs","","Computes the absolute value of `self`.",514,[[],["i16"]]],[11,"signum","","Returns a number representing sign of `self`.",514,[[],["i16"]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",514,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",514,[[],["bool"]]],[11,"to_be_bytes","","Return the memory representation of this integer as a byte…",514,[[]]],[11,"to_le_bytes","","Return the memory representation of this integer as a byte…",514,[[]]],[11,"to_ne_bytes","","Return the memory representation of this integer as a byte…",514,[[]]],[11,"from_be_bytes","","Create an integer value from its representation as a byte…",514,[[],["i16"]]],[11,"from_le_bytes","","Create an integer value from its representation as a byte…",514,[[],["i16"]]],[11,"from_ne_bytes","","Create an integer value from its memory representation as…",514,[[],["i16"]]],[11,"from","","",514,[[["t"]],["t"]]],[11,"try_from","","",514,[[["u"]],["result"]]],[11,"into","","",514,[[],["u"]]],[11,"try_into","","",514,[[],["result"]]],[11,"borrow","","",514,[[["self"]],["t"]]],[11,"borrow_mut","","",514,[[["self"]],["t"]]],[11,"type_id","","",514,[[["self"]],["typeid"]]],[11,"to_owned","","",514,[[["self"]],["t"]]],[11,"clone_into","","",514,[[["self"],["t"]]]],[11,"to_string","","",514,[[["self"]],["string"]]],[11,"min_value","","Returns the smallest value that can be represented by this…",523,[[],["i32"]]],[11,"max_value","","Returns the largest value that can be represented by this…",523,[[],["i32"]]],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",523,[[["str"],["u32"]],[["result",["i32","parseinterror"]],["parseinterror"],["i32"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",523,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",523,[[],["u32"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",523,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",523,[[],["u32"]]],[11,"leading_ones","","Returns the number of leading ones in the binary…",523,[[],["u32"]]],[11,"trailing_ones","","Returns the number of trailing ones in the binary…",523,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",523,[[["u32"]],["i32"]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",523,[[["u32"]],["i32"]]],[11,"swap_bytes","","Reverses the byte order of the integer.",523,[[],["i32"]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",523,[[],["i32"]]],[11,"from_be","","Converts an integer from big endian to the target's…",523,[[["i32"]],["i32"]]],[11,"from_le","","Converts an integer from little endian to the target's…",523,[[["i32"]],["i32"]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",523,[[],["i32"]]],[11,"to_le","","Converts `self` to little endian from the target's…",523,[[],["i32"]]],[11,"checked_add","","Checked integer addition. Computes `self + rhs`, returning…",523,[[["i32"]],[["option",["i32"]],["i32"]]]],[11,"checked_sub","","Checked integer subtraction. Computes `self - rhs`,…",523,[[["i32"]],[["option",["i32"]],["i32"]]]],[11,"checked_mul","","Checked integer multiplication. Computes `self * rhs`,…",523,[[["i32"]],[["option",["i32"]],["i32"]]]],[11,"checked_div","","Checked integer division. Computes `self / rhs`, returning…",523,[[["i32"]],[["option",["i32"]],["i32"]]]],[11,"checked_div_euclid","","Checked Euclidean division. Computes…",523,[[["i32"]],[["option",["i32"]],["i32"]]]],[11,"checked_rem","","Checked integer remainder. Computes `self % rhs`,…",523,[[["i32"]],[["option",["i32"]],["i32"]]]],[11,"checked_rem_euclid","","Checked Euclidean remainder. Computes…",523,[[["i32"]],[["option",["i32"]],["i32"]]]],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if…",523,[[],[["option",["i32"]],["i32"]]]],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",523,[[["u32"]],[["option",["i32"]],["i32"]]]],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",523,[[["u32"]],[["option",["i32"]],["i32"]]]],[11,"checked_abs","","Checked absolute value. Computes `self.abs()`, returning…",523,[[],[["option",["i32"]],["i32"]]]],[11,"checked_pow","","Checked exponentiation. Computes `self.pow(exp)`,…",523,[[["u32"]],[["option",["i32"]],["i32"]]]],[11,"saturating_add","","Saturating integer addition. Computes `self + rhs`,…",523,[[["i32"]],["i32"]]],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - rhs`,…",523,[[["i32"]],["i32"]]],[11,"saturating_neg","","Saturating integer negation. Computes `-self`, returning…",523,[[],["i32"]]],[11,"saturating_abs","","Saturating absolute value. Computes `self.abs()`,…",523,[[],["i32"]]],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * rhs`,…",523,[[["i32"]],["i32"]]],[11,"saturating_pow","","Saturating integer exponentiation. Computes…",523,[[["u32"]],["i32"]]],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + rhs`,…",523,[[["i32"]],["i32"]]],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - rhs`,…",523,[[["i32"]],["i32"]]],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * rhs`,…",523,[[["i32"]],["i32"]]],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / rhs`,…",523,[[["i32"]],["i32"]]],[11,"wrapping_div_euclid","","Wrapping Euclidean division. Computes…",523,[[["i32"]],["i32"]]],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % rhs`,…",523,[[["i32"]],["i32"]]],[11,"wrapping_rem_euclid","","Wrapping Euclidean remainder. Computes…",523,[[["i32"]],["i32"]]],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping…",523,[[],["i32"]]],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",523,[[["u32"]],["i32"]]],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",523,[[["u32"]],["i32"]]],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes `self.abs()`,…",523,[[],["i32"]]],[11,"wrapping_pow","","Wrapping (modular) exponentiation. Computes…",523,[[["u32"]],["i32"]]],[11,"overflowing_add","","Calculates `self` + `rhs`",523,[[["i32"]]]],[11,"overflowing_sub","","Calculates `self` - `rhs`",523,[[["i32"]]]],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",523,[[["i32"]]]],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",523,[[["i32"]]]],[11,"overflowing_div_euclid","","Calculates the quotient of Euclidean division…",523,[[["i32"]]]],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",523,[[["i32"]]]],[11,"overflowing_rem_euclid","","Overflowing Euclidean remainder. Calculates…",523,[[["i32"]]]],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum…",523,[[]]],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",523,[[["u32"]]]],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",523,[[["u32"]]]],[11,"overflowing_abs","","Computes the absolute value of `self`.",523,[[]]],[11,"overflowing_pow","","Raises self to the power of `exp`, using exponentiation by…",523,[[["u32"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",523,[[["u32"]],["i32"]]],[11,"div_euclid","","Calculates the quotient of Euclidean division of `self` by…",523,[[["i32"]],["i32"]]],[11,"rem_euclid","","Calculates the least nonnegative remainder of `self (mod…",523,[[["i32"]],["i32"]]],[11,"abs","","Computes the absolute value of `self`.",523,[[],["i32"]]],[11,"signum","","Returns a number representing sign of `self`.",523,[[],["i32"]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",523,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",523,[[],["bool"]]],[11,"to_be_bytes","","Return the memory representation of this integer as a byte…",523,[[]]],[11,"to_le_bytes","","Return the memory representation of this integer as a byte…",523,[[]]],[11,"to_ne_bytes","","Return the memory representation of this integer as a byte…",523,[[]]],[11,"from_be_bytes","","Create an integer value from its representation as a byte…",523,[[],["i32"]]],[11,"from_le_bytes","","Create an integer value from its representation as a byte…",523,[[],["i32"]]],[11,"from_ne_bytes","","Create an integer value from its memory representation as…",523,[[],["i32"]]],[11,"from","","",523,[[["t"]],["t"]]],[11,"try_from","","",523,[[["u"]],["result"]]],[11,"into","","",523,[[],["u"]]],[11,"try_into","","",523,[[],["result"]]],[11,"borrow","","",523,[[["self"]],["t"]]],[11,"borrow_mut","","",523,[[["self"]],["t"]]],[11,"type_id","","",523,[[["self"]],["typeid"]]],[11,"to_owned","","",523,[[["self"]],["t"]]],[11,"clone_into","","",523,[[["self"],["t"]]]],[11,"to_string","","",523,[[["self"]],["string"]]],[11,"min_value","","Returns the smallest value that can be represented by this…",520,[[],["i64"]]],[11,"max_value","","Returns the largest value that can be represented by this…",520,[[],["i64"]]],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",520,[[["str"],["u32"]],[["i64"],["result",["i64","parseinterror"]],["parseinterror"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",520,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",520,[[],["u32"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",520,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",520,[[],["u32"]]],[11,"leading_ones","","Returns the number of leading ones in the binary…",520,[[],["u32"]]],[11,"trailing_ones","","Returns the number of trailing ones in the binary…",520,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",520,[[["u32"]],["i64"]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",520,[[["u32"]],["i64"]]],[11,"swap_bytes","","Reverses the byte order of the integer.",520,[[],["i64"]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",520,[[],["i64"]]],[11,"from_be","","Converts an integer from big endian to the target's…",520,[[["i64"]],["i64"]]],[11,"from_le","","Converts an integer from little endian to the target's…",520,[[["i64"]],["i64"]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",520,[[],["i64"]]],[11,"to_le","","Converts `self` to little endian from the target's…",520,[[],["i64"]]],[11,"checked_add","","Checked integer addition. Computes `self + rhs`, returning…",520,[[["i64"]],[["i64"],["option",["i64"]]]]],[11,"checked_sub","","Checked integer subtraction. Computes `self - rhs`,…",520,[[["i64"]],[["i64"],["option",["i64"]]]]],[11,"checked_mul","","Checked integer multiplication. Computes `self * rhs`,…",520,[[["i64"]],[["i64"],["option",["i64"]]]]],[11,"checked_div","","Checked integer division. Computes `self / rhs`, returning…",520,[[["i64"]],[["i64"],["option",["i64"]]]]],[11,"checked_div_euclid","","Checked Euclidean division. Computes…",520,[[["i64"]],[["i64"],["option",["i64"]]]]],[11,"checked_rem","","Checked integer remainder. Computes `self % rhs`,…",520,[[["i64"]],[["i64"],["option",["i64"]]]]],[11,"checked_rem_euclid","","Checked Euclidean remainder. Computes…",520,[[["i64"]],[["i64"],["option",["i64"]]]]],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if…",520,[[],[["i64"],["option",["i64"]]]]],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",520,[[["u32"]],[["i64"],["option",["i64"]]]]],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",520,[[["u32"]],[["i64"],["option",["i64"]]]]],[11,"checked_abs","","Checked absolute value. Computes `self.abs()`, returning…",520,[[],[["i64"],["option",["i64"]]]]],[11,"checked_pow","","Checked exponentiation. Computes `self.pow(exp)`,…",520,[[["u32"]],[["i64"],["option",["i64"]]]]],[11,"saturating_add","","Saturating integer addition. Computes `self + rhs`,…",520,[[["i64"]],["i64"]]],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - rhs`,…",520,[[["i64"]],["i64"]]],[11,"saturating_neg","","Saturating integer negation. Computes `-self`, returning…",520,[[],["i64"]]],[11,"saturating_abs","","Saturating absolute value. Computes `self.abs()`,…",520,[[],["i64"]]],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * rhs`,…",520,[[["i64"]],["i64"]]],[11,"saturating_pow","","Saturating integer exponentiation. Computes…",520,[[["u32"]],["i64"]]],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + rhs`,…",520,[[["i64"]],["i64"]]],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - rhs`,…",520,[[["i64"]],["i64"]]],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * rhs`,…",520,[[["i64"]],["i64"]]],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / rhs`,…",520,[[["i64"]],["i64"]]],[11,"wrapping_div_euclid","","Wrapping Euclidean division. Computes…",520,[[["i64"]],["i64"]]],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % rhs`,…",520,[[["i64"]],["i64"]]],[11,"wrapping_rem_euclid","","Wrapping Euclidean remainder. Computes…",520,[[["i64"]],["i64"]]],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping…",520,[[],["i64"]]],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",520,[[["u32"]],["i64"]]],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",520,[[["u32"]],["i64"]]],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes `self.abs()`,…",520,[[],["i64"]]],[11,"wrapping_pow","","Wrapping (modular) exponentiation. Computes…",520,[[["u32"]],["i64"]]],[11,"overflowing_add","","Calculates `self` + `rhs`",520,[[["i64"]]]],[11,"overflowing_sub","","Calculates `self` - `rhs`",520,[[["i64"]]]],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",520,[[["i64"]]]],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",520,[[["i64"]]]],[11,"overflowing_div_euclid","","Calculates the quotient of Euclidean division…",520,[[["i64"]]]],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",520,[[["i64"]]]],[11,"overflowing_rem_euclid","","Overflowing Euclidean remainder. Calculates…",520,[[["i64"]]]],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum…",520,[[]]],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",520,[[["u32"]]]],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",520,[[["u32"]]]],[11,"overflowing_abs","","Computes the absolute value of `self`.",520,[[]]],[11,"overflowing_pow","","Raises self to the power of `exp`, using exponentiation by…",520,[[["u32"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",520,[[["u32"]],["i64"]]],[11,"div_euclid","","Calculates the quotient of Euclidean division of `self` by…",520,[[["i64"]],["i64"]]],[11,"rem_euclid","","Calculates the least nonnegative remainder of `self (mod…",520,[[["i64"]],["i64"]]],[11,"abs","","Computes the absolute value of `self`.",520,[[],["i64"]]],[11,"signum","","Returns a number representing sign of `self`.",520,[[],["i64"]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",520,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",520,[[],["bool"]]],[11,"to_be_bytes","","Return the memory representation of this integer as a byte…",520,[[]]],[11,"to_le_bytes","","Return the memory representation of this integer as a byte…",520,[[]]],[11,"to_ne_bytes","","Return the memory representation of this integer as a byte…",520,[[]]],[11,"from_be_bytes","","Create an integer value from its representation as a byte…",520,[[],["i64"]]],[11,"from_le_bytes","","Create an integer value from its representation as a byte…",520,[[],["i64"]]],[11,"from_ne_bytes","","Create an integer value from its memory representation as…",520,[[],["i64"]]],[11,"from","","",520,[[["t"]],["t"]]],[11,"try_from","","",520,[[["u"]],["result"]]],[11,"into","","",520,[[],["u"]]],[11,"try_into","","",520,[[],["result"]]],[11,"borrow","","",520,[[["self"]],["t"]]],[11,"borrow_mut","","",520,[[["self"]],["t"]]],[11,"type_id","","",520,[[["self"]],["typeid"]]],[11,"to_owned","","",520,[[["self"]],["t"]]],[11,"clone_into","","",520,[[["self"],["t"]]]],[11,"to_string","","",520,[[["self"]],["string"]]],[11,"min_value","","Returns the smallest value that can be represented by this…",511,[[],["i128"]]],[11,"max_value","","Returns the largest value that can be represented by this…",511,[[],["i128"]]],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",511,[[["str"],["u32"]],[["result",["i128","parseinterror"]],["i128"],["parseinterror"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",511,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",511,[[],["u32"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",511,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",511,[[],["u32"]]],[11,"leading_ones","","Returns the number of leading ones in the binary…",511,[[],["u32"]]],[11,"trailing_ones","","Returns the number of trailing ones in the binary…",511,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",511,[[["u32"]],["i128"]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",511,[[["u32"]],["i128"]]],[11,"swap_bytes","","Reverses the byte order of the integer.",511,[[],["i128"]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",511,[[],["i128"]]],[11,"from_be","","Converts an integer from big endian to the target's…",511,[[["i128"]],["i128"]]],[11,"from_le","","Converts an integer from little endian to the target's…",511,[[["i128"]],["i128"]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",511,[[],["i128"]]],[11,"to_le","","Converts `self` to little endian from the target's…",511,[[],["i128"]]],[11,"checked_add","","Checked integer addition. Computes `self + rhs`, returning…",511,[[["i128"]],[["option",["i128"]],["i128"]]]],[11,"checked_sub","","Checked integer subtraction. Computes `self - rhs`,…",511,[[["i128"]],[["option",["i128"]],["i128"]]]],[11,"checked_mul","","Checked integer multiplication. Computes `self * rhs`,…",511,[[["i128"]],[["option",["i128"]],["i128"]]]],[11,"checked_div","","Checked integer division. Computes `self / rhs`, returning…",511,[[["i128"]],[["option",["i128"]],["i128"]]]],[11,"checked_div_euclid","","Checked Euclidean division. Computes…",511,[[["i128"]],[["option",["i128"]],["i128"]]]],[11,"checked_rem","","Checked integer remainder. Computes `self % rhs`,…",511,[[["i128"]],[["option",["i128"]],["i128"]]]],[11,"checked_rem_euclid","","Checked Euclidean remainder. Computes…",511,[[["i128"]],[["option",["i128"]],["i128"]]]],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if…",511,[[],[["option",["i128"]],["i128"]]]],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",511,[[["u32"]],[["option",["i128"]],["i128"]]]],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",511,[[["u32"]],[["option",["i128"]],["i128"]]]],[11,"checked_abs","","Checked absolute value. Computes `self.abs()`, returning…",511,[[],[["option",["i128"]],["i128"]]]],[11,"checked_pow","","Checked exponentiation. Computes `self.pow(exp)`,…",511,[[["u32"]],[["option",["i128"]],["i128"]]]],[11,"saturating_add","","Saturating integer addition. Computes `self + rhs`,…",511,[[["i128"]],["i128"]]],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - rhs`,…",511,[[["i128"]],["i128"]]],[11,"saturating_neg","","Saturating integer negation. Computes `-self`, returning…",511,[[],["i128"]]],[11,"saturating_abs","","Saturating absolute value. Computes `self.abs()`,…",511,[[],["i128"]]],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * rhs`,…",511,[[["i128"]],["i128"]]],[11,"saturating_pow","","Saturating integer exponentiation. Computes…",511,[[["u32"]],["i128"]]],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + rhs`,…",511,[[["i128"]],["i128"]]],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - rhs`,…",511,[[["i128"]],["i128"]]],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * rhs`,…",511,[[["i128"]],["i128"]]],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / rhs`,…",511,[[["i128"]],["i128"]]],[11,"wrapping_div_euclid","","Wrapping Euclidean division. Computes…",511,[[["i128"]],["i128"]]],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % rhs`,…",511,[[["i128"]],["i128"]]],[11,"wrapping_rem_euclid","","Wrapping Euclidean remainder. Computes…",511,[[["i128"]],["i128"]]],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping…",511,[[],["i128"]]],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",511,[[["u32"]],["i128"]]],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",511,[[["u32"]],["i128"]]],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes `self.abs()`,…",511,[[],["i128"]]],[11,"wrapping_pow","","Wrapping (modular) exponentiation. Computes…",511,[[["u32"]],["i128"]]],[11,"overflowing_add","","Calculates `self` + `rhs`",511,[[["i128"]]]],[11,"overflowing_sub","","Calculates `self` - `rhs`",511,[[["i128"]]]],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",511,[[["i128"]]]],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",511,[[["i128"]]]],[11,"overflowing_div_euclid","","Calculates the quotient of Euclidean division…",511,[[["i128"]]]],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",511,[[["i128"]]]],[11,"overflowing_rem_euclid","","Overflowing Euclidean remainder. Calculates…",511,[[["i128"]]]],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum…",511,[[]]],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",511,[[["u32"]]]],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",511,[[["u32"]]]],[11,"overflowing_abs","","Computes the absolute value of `self`.",511,[[]]],[11,"overflowing_pow","","Raises self to the power of `exp`, using exponentiation by…",511,[[["u32"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",511,[[["u32"]],["i128"]]],[11,"div_euclid","","Calculates the quotient of Euclidean division of `self` by…",511,[[["i128"]],["i128"]]],[11,"rem_euclid","","Calculates the least nonnegative remainder of `self (mod…",511,[[["i128"]],["i128"]]],[11,"abs","","Computes the absolute value of `self`.",511,[[],["i128"]]],[11,"signum","","Returns a number representing sign of `self`.",511,[[],["i128"]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",511,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",511,[[],["bool"]]],[11,"to_be_bytes","","Return the memory representation of this integer as a byte…",511,[[]]],[11,"to_le_bytes","","Return the memory representation of this integer as a byte…",511,[[]]],[11,"to_ne_bytes","","Return the memory representation of this integer as a byte…",511,[[]]],[11,"from_be_bytes","","Create an integer value from its representation as a byte…",511,[[],["i128"]]],[11,"from_le_bytes","","Create an integer value from its representation as a byte…",511,[[],["i128"]]],[11,"from_ne_bytes","","Create an integer value from its memory representation as…",511,[[],["i128"]]],[11,"from","","",511,[[["t"]],["t"]]],[11,"try_from","","",511,[[["u"]],["result"]]],[11,"into","","",511,[[],["u"]]],[11,"try_into","","",511,[[],["result"]]],[11,"borrow","","",511,[[["self"]],["t"]]],[11,"borrow_mut","","",511,[[["self"]],["t"]]],[11,"type_id","","",511,[[["self"]],["typeid"]]],[11,"to_owned","","",511,[[["self"]],["t"]]],[11,"clone_into","","",511,[[["self"],["t"]]]],[11,"to_string","","",511,[[["self"]],["string"]]],[11,"min_value","","Returns the smallest value that can be represented by this…",521,[[],["usize"]]],[11,"max_value","","Returns the largest value that can be represented by this…",521,[[],["usize"]]],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",521,[[["str"],["u32"]],[["parseinterror"],["result",["usize","parseinterror"]],["usize"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",521,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",521,[[],["u32"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",521,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",521,[[],["u32"]]],[11,"leading_ones","","Returns the number of leading ones in the binary…",521,[[],["u32"]]],[11,"trailing_ones","","Returns the number of trailing ones in the binary…",521,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",521,[[["u32"]],["usize"]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",521,[[["u32"]],["usize"]]],[11,"swap_bytes","","Reverses the byte order of the integer.",521,[[],["usize"]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",521,[[],["usize"]]],[11,"from_be","","Converts an integer from big endian to the target's…",521,[[["usize"]],["usize"]]],[11,"from_le","","Converts an integer from little endian to the target's…",521,[[["usize"]],["usize"]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",521,[[],["usize"]]],[11,"to_le","","Converts `self` to little endian from the target's…",521,[[],["usize"]]],[11,"checked_add","","Checked integer addition. Computes `self + rhs`, returning…",521,[[["usize"]],[["option",["usize"]],["usize"]]]],[11,"checked_sub","","Checked integer subtraction. Computes `self - rhs`,…",521,[[["usize"]],[["option",["usize"]],["usize"]]]],[11,"checked_mul","","Checked integer multiplication. Computes `self * rhs`,…",521,[[["usize"]],[["option",["usize"]],["usize"]]]],[11,"checked_div","","Checked integer division. Computes `self / rhs`, returning…",521,[[["usize"]],[["option",["usize"]],["usize"]]]],[11,"checked_div_euclid","","Checked Euclidean division. Computes…",521,[[["usize"]],[["option",["usize"]],["usize"]]]],[11,"checked_rem","","Checked integer remainder. Computes `self % rhs`,…",521,[[["usize"]],[["option",["usize"]],["usize"]]]],[11,"checked_rem_euclid","","Checked Euclidean modulo. Computes `self.rem_euclid(rhs)`,…",521,[[["usize"]],[["option",["usize"]],["usize"]]]],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None`…",521,[[],[["option",["usize"]],["usize"]]]],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",521,[[["u32"]],[["option",["usize"]],["usize"]]]],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",521,[[["u32"]],[["option",["usize"]],["usize"]]]],[11,"checked_pow","","Checked exponentiation. Computes `self.pow(exp)`,…",521,[[["u32"]],[["option",["usize"]],["usize"]]]],[11,"saturating_add","","Saturating integer addition. Computes `self + rhs`,…",521,[[["usize"]],["usize"]]],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - rhs`,…",521,[[["usize"]],["usize"]]],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * rhs`,…",521,[[["usize"]],["usize"]]],[11,"saturating_pow","","Saturating integer exponentiation. Computes…",521,[[["u32"]],["usize"]]],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + rhs`,…",521,[[["usize"]],["usize"]]],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - rhs`,…",521,[[["usize"]],["usize"]]],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * rhs`,…",521,[[["usize"]],["usize"]]],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / rhs`.…",521,[[["usize"]],["usize"]]],[11,"wrapping_div_euclid","","Wrapping Euclidean division. Computes…",521,[[["usize"]],["usize"]]],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % rhs`.…",521,[[["usize"]],["usize"]]],[11,"wrapping_rem_euclid","","Wrapping Euclidean modulo. Computes…",521,[[["usize"]],["usize"]]],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping…",521,[[],["usize"]]],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",521,[[["u32"]],["usize"]]],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",521,[[["u32"]],["usize"]]],[11,"wrapping_pow","","Wrapping (modular) exponentiation. Computes…",521,[[["u32"]],["usize"]]],[11,"overflowing_add","","Calculates `self` + `rhs`",521,[[["usize"]]]],[11,"overflowing_sub","","Calculates `self` - `rhs`",521,[[["usize"]]]],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",521,[[["usize"]]]],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",521,[[["usize"]]]],[11,"overflowing_div_euclid","","Calculates the quotient of Euclidean division…",521,[[["usize"]]]],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",521,[[["usize"]]]],[11,"overflowing_rem_euclid","","Calculates the remainder `self.rem_euclid(rhs)` as if by…",521,[[["usize"]]]],[11,"overflowing_neg","","Negates self in an overflowing fashion.",521,[[]]],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",521,[[["u32"]]]],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",521,[[["u32"]]]],[11,"overflowing_pow","","Raises self to the power of `exp`, using exponentiation by…",521,[[["u32"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",521,[[["u32"]],["usize"]]],[11,"div_euclid","","Performs Euclidean division.",521,[[["usize"]],["usize"]]],[11,"rem_euclid","","Calculates the least remainder of `self (mod rhs)`.",521,[[["usize"]],["usize"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",521,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",521,[[],["usize"]]],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to…",521,[[],[["option",["usize"]],["usize"]]]],[11,"wrapping_next_power_of_two","","Returns the smallest power of two greater than or equal to…",521,[[],["usize"]]],[11,"to_be_bytes","","Return the memory representation of this integer as a byte…",521,[[]]],[11,"to_le_bytes","","Return the memory representation of this integer as a byte…",521,[[]]],[11,"to_ne_bytes","","Return the memory representation of this integer as a byte…",521,[[]]],[11,"from_be_bytes","","Create an integer value from its representation as a byte…",521,[[],["usize"]]],[11,"from_le_bytes","","Create an integer value from its representation as a byte…",521,[[],["usize"]]],[11,"from_ne_bytes","","Create an integer value from its memory representation as…",521,[[],["usize"]]],[11,"from","","",521,[[["t"]],["t"]]],[11,"try_from","","",521,[[["u"]],["result"]]],[11,"into","","",521,[[],["u"]]],[11,"try_into","","",521,[[],["result"]]],[11,"borrow","","",521,[[["self"]],["t"]]],[11,"borrow_mut","","",521,[[["self"]],["t"]]],[11,"type_id","","",521,[[["self"]],["typeid"]]],[11,"to_owned","","",521,[[["self"]],["t"]]],[11,"clone_into","","",521,[[["self"],["t"]]]],[11,"to_string","","",521,[[["self"]],["string"]]],[11,"min_value","","Returns the smallest value that can be represented by this…",513,[[],["u8"]]],[11,"max_value","","Returns the largest value that can be represented by this…",513,[[],["u8"]]],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",513,[[["str"],["u32"]],[["u8"],["parseinterror"],["result",["u8","parseinterror"]]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",513,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",513,[[],["u32"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",513,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",513,[[],["u32"]]],[11,"leading_ones","","Returns the number of leading ones in the binary…",513,[[],["u32"]]],[11,"trailing_ones","","Returns the number of trailing ones in the binary…",513,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",513,[[["u32"]],["u8"]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",513,[[["u32"]],["u8"]]],[11,"swap_bytes","","Reverses the byte order of the integer.",513,[[],["u8"]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",513,[[],["u8"]]],[11,"from_be","","Converts an integer from big endian to the target's…",513,[[["u8"]],["u8"]]],[11,"from_le","","Converts an integer from little endian to the target's…",513,[[["u8"]],["u8"]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",513,[[],["u8"]]],[11,"to_le","","Converts `self` to little endian from the target's…",513,[[],["u8"]]],[11,"checked_add","","Checked integer addition. Computes `self + rhs`, returning…",513,[[["u8"]],[["u8"],["option",["u8"]]]]],[11,"checked_sub","","Checked integer subtraction. Computes `self - rhs`,…",513,[[["u8"]],[["u8"],["option",["u8"]]]]],[11,"checked_mul","","Checked integer multiplication. Computes `self * rhs`,…",513,[[["u8"]],[["u8"],["option",["u8"]]]]],[11,"checked_div","","Checked integer division. Computes `self / rhs`, returning…",513,[[["u8"]],[["u8"],["option",["u8"]]]]],[11,"checked_div_euclid","","Checked Euclidean division. Computes…",513,[[["u8"]],[["u8"],["option",["u8"]]]]],[11,"checked_rem","","Checked integer remainder. Computes `self % rhs`,…",513,[[["u8"]],[["u8"],["option",["u8"]]]]],[11,"checked_rem_euclid","","Checked Euclidean modulo. Computes `self.rem_euclid(rhs)`,…",513,[[["u8"]],[["u8"],["option",["u8"]]]]],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None`…",513,[[],[["u8"],["option",["u8"]]]]],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",513,[[["u32"]],[["u8"],["option",["u8"]]]]],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",513,[[["u32"]],[["u8"],["option",["u8"]]]]],[11,"checked_pow","","Checked exponentiation. Computes `self.pow(exp)`,…",513,[[["u32"]],[["u8"],["option",["u8"]]]]],[11,"saturating_add","","Saturating integer addition. Computes `self + rhs`,…",513,[[["u8"]],["u8"]]],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - rhs`,…",513,[[["u8"]],["u8"]]],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * rhs`,…",513,[[["u8"]],["u8"]]],[11,"saturating_pow","","Saturating integer exponentiation. Computes…",513,[[["u32"]],["u8"]]],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + rhs`,…",513,[[["u8"]],["u8"]]],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - rhs`,…",513,[[["u8"]],["u8"]]],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * rhs`,…",513,[[["u8"]],["u8"]]],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / rhs`.…",513,[[["u8"]],["u8"]]],[11,"wrapping_div_euclid","","Wrapping Euclidean division. Computes…",513,[[["u8"]],["u8"]]],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % rhs`.…",513,[[["u8"]],["u8"]]],[11,"wrapping_rem_euclid","","Wrapping Euclidean modulo. Computes…",513,[[["u8"]],["u8"]]],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping…",513,[[],["u8"]]],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",513,[[["u32"]],["u8"]]],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",513,[[["u32"]],["u8"]]],[11,"wrapping_pow","","Wrapping (modular) exponentiation. Computes…",513,[[["u32"]],["u8"]]],[11,"overflowing_add","","Calculates `self` + `rhs`",513,[[["u8"]]]],[11,"overflowing_sub","","Calculates `self` - `rhs`",513,[[["u8"]]]],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",513,[[["u8"]]]],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",513,[[["u8"]]]],[11,"overflowing_div_euclid","","Calculates the quotient of Euclidean division…",513,[[["u8"]]]],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",513,[[["u8"]]]],[11,"overflowing_rem_euclid","","Calculates the remainder `self.rem_euclid(rhs)` as if by…",513,[[["u8"]]]],[11,"overflowing_neg","","Negates self in an overflowing fashion.",513,[[]]],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",513,[[["u32"]]]],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",513,[[["u32"]]]],[11,"overflowing_pow","","Raises self to the power of `exp`, using exponentiation by…",513,[[["u32"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",513,[[["u32"]],["u8"]]],[11,"div_euclid","","Performs Euclidean division.",513,[[["u8"]],["u8"]]],[11,"rem_euclid","","Calculates the least remainder of `self (mod rhs)`.",513,[[["u8"]],["u8"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",513,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",513,[[],["u8"]]],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to…",513,[[],[["u8"],["option",["u8"]]]]],[11,"wrapping_next_power_of_two","","Returns the smallest power of two greater than or equal to…",513,[[],["u8"]]],[11,"to_be_bytes","","Return the memory representation of this integer as a byte…",513,[[]]],[11,"to_le_bytes","","Return the memory representation of this integer as a byte…",513,[[]]],[11,"to_ne_bytes","","Return the memory representation of this integer as a byte…",513,[[]]],[11,"from_be_bytes","","Create an integer value from its representation as a byte…",513,[[],["u8"]]],[11,"from_le_bytes","","Create an integer value from its representation as a byte…",513,[[],["u8"]]],[11,"from_ne_bytes","","Create an integer value from its memory representation as…",513,[[],["u8"]]],[11,"is_ascii","","Checks if the value is within the ASCII range.",513,[[["self"]],["bool"]]],[11,"to_ascii_uppercase","","Makes a copy of the value in its ASCII upper case…",513,[[["self"]],["u8"]]],[11,"to_ascii_lowercase","","Makes a copy of the value in its ASCII lower case…",513,[[["self"]],["u8"]]],[11,"eq_ignore_ascii_case","","Checks that two values are an ASCII case-insensitive match.",513,[[["self"],["u8"]],["bool"]]],[11,"make_ascii_uppercase","","Converts this value to its ASCII upper case equivalent…",513,[[["self"]]]],[11,"make_ascii_lowercase","","Converts this value to its ASCII lower case equivalent…",513,[[["self"]]]],[11,"is_ascii_alphabetic","","Checks if the value is an ASCII alphabetic character:",513,[[["self"]],["bool"]]],[11,"is_ascii_uppercase","","Checks if the value is an ASCII uppercase character:…",513,[[["self"]],["bool"]]],[11,"is_ascii_lowercase","","Checks if the value is an ASCII lowercase character:…",513,[[["self"]],["bool"]]],[11,"is_ascii_alphanumeric","","Checks if the value is an ASCII alphanumeric character:",513,[[["self"]],["bool"]]],[11,"is_ascii_digit","","Checks if the value is an ASCII decimal digit: U+0030 '0'…",513,[[["self"]],["bool"]]],[11,"is_ascii_hexdigit","","Checks if the value is an ASCII hexadecimal digit:",513,[[["self"]],["bool"]]],[11,"is_ascii_punctuation","","Checks if the value is an ASCII punctuation character:",513,[[["self"]],["bool"]]],[11,"is_ascii_graphic","","Checks if the value is an ASCII graphic character: U+0021…",513,[[["self"]],["bool"]]],[11,"is_ascii_whitespace","","Checks if the value is an ASCII whitespace character:…",513,[[["self"]],["bool"]]],[11,"is_ascii_control","","Checks if the value is an ASCII control character: U+0000…",513,[[["self"]],["bool"]]],[11,"from","","",513,[[["t"]],["t"]]],[11,"try_from","","",513,[[["u"]],["result"]]],[11,"into","","",513,[[],["u"]]],[11,"try_into","","",513,[[],["result"]]],[11,"borrow","","",513,[[["self"]],["t"]]],[11,"borrow_mut","","",513,[[["self"]],["t"]]],[11,"type_id","","",513,[[["self"]],["typeid"]]],[11,"to_owned","","",513,[[["self"]],["t"]]],[11,"clone_into","","",513,[[["self"],["t"]]]],[11,"to_string","","",513,[[["self"]],["string"]]],[11,"min_value","","Returns the smallest value that can be represented by this…",516,[[],["u16"]]],[11,"max_value","","Returns the largest value that can be represented by this…",516,[[],["u16"]]],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",516,[[["str"],["u32"]],[["u16"],["parseinterror"],["result",["u16","parseinterror"]]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",516,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",516,[[],["u32"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",516,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",516,[[],["u32"]]],[11,"leading_ones","","Returns the number of leading ones in the binary…",516,[[],["u32"]]],[11,"trailing_ones","","Returns the number of trailing ones in the binary…",516,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",516,[[["u32"]],["u16"]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",516,[[["u32"]],["u16"]]],[11,"swap_bytes","","Reverses the byte order of the integer.",516,[[],["u16"]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",516,[[],["u16"]]],[11,"from_be","","Converts an integer from big endian to the target's…",516,[[["u16"]],["u16"]]],[11,"from_le","","Converts an integer from little endian to the target's…",516,[[["u16"]],["u16"]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",516,[[],["u16"]]],[11,"to_le","","Converts `self` to little endian from the target's…",516,[[],["u16"]]],[11,"checked_add","","Checked integer addition. Computes `self + rhs`, returning…",516,[[["u16"]],[["u16"],["option",["u16"]]]]],[11,"checked_sub","","Checked integer subtraction. Computes `self - rhs`,…",516,[[["u16"]],[["u16"],["option",["u16"]]]]],[11,"checked_mul","","Checked integer multiplication. Computes `self * rhs`,…",516,[[["u16"]],[["u16"],["option",["u16"]]]]],[11,"checked_div","","Checked integer division. Computes `self / rhs`, returning…",516,[[["u16"]],[["u16"],["option",["u16"]]]]],[11,"checked_div_euclid","","Checked Euclidean division. Computes…",516,[[["u16"]],[["u16"],["option",["u16"]]]]],[11,"checked_rem","","Checked integer remainder. Computes `self % rhs`,…",516,[[["u16"]],[["u16"],["option",["u16"]]]]],[11,"checked_rem_euclid","","Checked Euclidean modulo. Computes `self.rem_euclid(rhs)`,…",516,[[["u16"]],[["u16"],["option",["u16"]]]]],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None`…",516,[[],[["u16"],["option",["u16"]]]]],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",516,[[["u32"]],[["u16"],["option",["u16"]]]]],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",516,[[["u32"]],[["u16"],["option",["u16"]]]]],[11,"checked_pow","","Checked exponentiation. Computes `self.pow(exp)`,…",516,[[["u32"]],[["u16"],["option",["u16"]]]]],[11,"saturating_add","","Saturating integer addition. Computes `self + rhs`,…",516,[[["u16"]],["u16"]]],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - rhs`,…",516,[[["u16"]],["u16"]]],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * rhs`,…",516,[[["u16"]],["u16"]]],[11,"saturating_pow","","Saturating integer exponentiation. Computes…",516,[[["u32"]],["u16"]]],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + rhs`,…",516,[[["u16"]],["u16"]]],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - rhs`,…",516,[[["u16"]],["u16"]]],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * rhs`,…",516,[[["u16"]],["u16"]]],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / rhs`.…",516,[[["u16"]],["u16"]]],[11,"wrapping_div_euclid","","Wrapping Euclidean division. Computes…",516,[[["u16"]],["u16"]]],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % rhs`.…",516,[[["u16"]],["u16"]]],[11,"wrapping_rem_euclid","","Wrapping Euclidean modulo. Computes…",516,[[["u16"]],["u16"]]],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping…",516,[[],["u16"]]],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",516,[[["u32"]],["u16"]]],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",516,[[["u32"]],["u16"]]],[11,"wrapping_pow","","Wrapping (modular) exponentiation. Computes…",516,[[["u32"]],["u16"]]],[11,"overflowing_add","","Calculates `self` + `rhs`",516,[[["u16"]]]],[11,"overflowing_sub","","Calculates `self` - `rhs`",516,[[["u16"]]]],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",516,[[["u16"]]]],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",516,[[["u16"]]]],[11,"overflowing_div_euclid","","Calculates the quotient of Euclidean division…",516,[[["u16"]]]],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",516,[[["u16"]]]],[11,"overflowing_rem_euclid","","Calculates the remainder `self.rem_euclid(rhs)` as if by…",516,[[["u16"]]]],[11,"overflowing_neg","","Negates self in an overflowing fashion.",516,[[]]],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",516,[[["u32"]]]],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",516,[[["u32"]]]],[11,"overflowing_pow","","Raises self to the power of `exp`, using exponentiation by…",516,[[["u32"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",516,[[["u32"]],["u16"]]],[11,"div_euclid","","Performs Euclidean division.",516,[[["u16"]],["u16"]]],[11,"rem_euclid","","Calculates the least remainder of `self (mod rhs)`.",516,[[["u16"]],["u16"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",516,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",516,[[],["u16"]]],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to…",516,[[],[["u16"],["option",["u16"]]]]],[11,"wrapping_next_power_of_two","","Returns the smallest power of two greater than or equal to…",516,[[],["u16"]]],[11,"to_be_bytes","","Return the memory representation of this integer as a byte…",516,[[]]],[11,"to_le_bytes","","Return the memory representation of this integer as a byte…",516,[[]]],[11,"to_ne_bytes","","Return the memory representation of this integer as a byte…",516,[[]]],[11,"from_be_bytes","","Create an integer value from its representation as a byte…",516,[[],["u16"]]],[11,"from_le_bytes","","Create an integer value from its representation as a byte…",516,[[],["u16"]]],[11,"from_ne_bytes","","Create an integer value from its memory representation as…",516,[[],["u16"]]],[11,"from","","",516,[[["t"]],["t"]]],[11,"try_from","","",516,[[["u"]],["result"]]],[11,"into","","",516,[[],["u"]]],[11,"try_into","","",516,[[],["result"]]],[11,"borrow","","",516,[[["self"]],["t"]]],[11,"borrow_mut","","",516,[[["self"]],["t"]]],[11,"type_id","","",516,[[["self"]],["typeid"]]],[11,"to_owned","","",516,[[["self"]],["t"]]],[11,"clone_into","","",516,[[["self"],["t"]]]],[11,"to_string","","",516,[[["self"]],["string"]]],[11,"min_value","","Returns the smallest value that can be represented by this…",517,[[],["u32"]]],[11,"max_value","","Returns the largest value that can be represented by this…",517,[[],["u32"]]],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",517,[[["str"],["u32"]],[["result",["u32","parseinterror"]],["u32"],["parseinterror"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",517,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",517,[[],["u32"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",517,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",517,[[],["u32"]]],[11,"leading_ones","","Returns the number of leading ones in the binary…",517,[[],["u32"]]],[11,"trailing_ones","","Returns the number of trailing ones in the binary…",517,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",517,[[["u32"]],["u32"]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",517,[[["u32"]],["u32"]]],[11,"swap_bytes","","Reverses the byte order of the integer.",517,[[],["u32"]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",517,[[],["u32"]]],[11,"from_be","","Converts an integer from big endian to the target's…",517,[[["u32"]],["u32"]]],[11,"from_le","","Converts an integer from little endian to the target's…",517,[[["u32"]],["u32"]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",517,[[],["u32"]]],[11,"to_le","","Converts `self` to little endian from the target's…",517,[[],["u32"]]],[11,"checked_add","","Checked integer addition. Computes `self + rhs`, returning…",517,[[["u32"]],[["u32"],["option",["u32"]]]]],[11,"checked_sub","","Checked integer subtraction. Computes `self - rhs`,…",517,[[["u32"]],[["u32"],["option",["u32"]]]]],[11,"checked_mul","","Checked integer multiplication. Computes `self * rhs`,…",517,[[["u32"]],[["u32"],["option",["u32"]]]]],[11,"checked_div","","Checked integer division. Computes `self / rhs`, returning…",517,[[["u32"]],[["u32"],["option",["u32"]]]]],[11,"checked_div_euclid","","Checked Euclidean division. Computes…",517,[[["u32"]],[["u32"],["option",["u32"]]]]],[11,"checked_rem","","Checked integer remainder. Computes `self % rhs`,…",517,[[["u32"]],[["u32"],["option",["u32"]]]]],[11,"checked_rem_euclid","","Checked Euclidean modulo. Computes `self.rem_euclid(rhs)`,…",517,[[["u32"]],[["u32"],["option",["u32"]]]]],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None`…",517,[[],[["u32"],["option",["u32"]]]]],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",517,[[["u32"]],[["u32"],["option",["u32"]]]]],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",517,[[["u32"]],[["u32"],["option",["u32"]]]]],[11,"checked_pow","","Checked exponentiation. Computes `self.pow(exp)`,…",517,[[["u32"]],[["u32"],["option",["u32"]]]]],[11,"saturating_add","","Saturating integer addition. Computes `self + rhs`,…",517,[[["u32"]],["u32"]]],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - rhs`,…",517,[[["u32"]],["u32"]]],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * rhs`,…",517,[[["u32"]],["u32"]]],[11,"saturating_pow","","Saturating integer exponentiation. Computes…",517,[[["u32"]],["u32"]]],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + rhs`,…",517,[[["u32"]],["u32"]]],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - rhs`,…",517,[[["u32"]],["u32"]]],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * rhs`,…",517,[[["u32"]],["u32"]]],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / rhs`.…",517,[[["u32"]],["u32"]]],[11,"wrapping_div_euclid","","Wrapping Euclidean division. Computes…",517,[[["u32"]],["u32"]]],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % rhs`.…",517,[[["u32"]],["u32"]]],[11,"wrapping_rem_euclid","","Wrapping Euclidean modulo. Computes…",517,[[["u32"]],["u32"]]],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping…",517,[[],["u32"]]],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",517,[[["u32"]],["u32"]]],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",517,[[["u32"]],["u32"]]],[11,"wrapping_pow","","Wrapping (modular) exponentiation. Computes…",517,[[["u32"]],["u32"]]],[11,"overflowing_add","","Calculates `self` + `rhs`",517,[[["u32"]]]],[11,"overflowing_sub","","Calculates `self` - `rhs`",517,[[["u32"]]]],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",517,[[["u32"]]]],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",517,[[["u32"]]]],[11,"overflowing_div_euclid","","Calculates the quotient of Euclidean division…",517,[[["u32"]]]],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",517,[[["u32"]]]],[11,"overflowing_rem_euclid","","Calculates the remainder `self.rem_euclid(rhs)` as if by…",517,[[["u32"]]]],[11,"overflowing_neg","","Negates self in an overflowing fashion.",517,[[]]],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",517,[[["u32"]]]],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",517,[[["u32"]]]],[11,"overflowing_pow","","Raises self to the power of `exp`, using exponentiation by…",517,[[["u32"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",517,[[["u32"]],["u32"]]],[11,"div_euclid","","Performs Euclidean division.",517,[[["u32"]],["u32"]]],[11,"rem_euclid","","Calculates the least remainder of `self (mod rhs)`.",517,[[["u32"]],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",517,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",517,[[],["u32"]]],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to…",517,[[],[["u32"],["option",["u32"]]]]],[11,"wrapping_next_power_of_two","","Returns the smallest power of two greater than or equal to…",517,[[],["u32"]]],[11,"to_be_bytes","","Return the memory representation of this integer as a byte…",517,[[]]],[11,"to_le_bytes","","Return the memory representation of this integer as a byte…",517,[[]]],[11,"to_ne_bytes","","Return the memory representation of this integer as a byte…",517,[[]]],[11,"from_be_bytes","","Create an integer value from its representation as a byte…",517,[[],["u32"]]],[11,"from_le_bytes","","Create an integer value from its representation as a byte…",517,[[],["u32"]]],[11,"from_ne_bytes","","Create an integer value from its memory representation as…",517,[[],["u32"]]],[11,"from","","",517,[[["t"]],["t"]]],[11,"try_from","","",517,[[["u"]],["result"]]],[11,"into","","",517,[[],["u"]]],[11,"try_into","","",517,[[],["result"]]],[11,"borrow","","",517,[[["self"]],["t"]]],[11,"borrow_mut","","",517,[[["self"]],["t"]]],[11,"type_id","","",517,[[["self"]],["typeid"]]],[11,"to_owned","","",517,[[["self"]],["t"]]],[11,"clone_into","","",517,[[["self"],["t"]]]],[11,"to_string","","",517,[[["self"]],["string"]]],[11,"min_value","","Returns the smallest value that can be represented by this…",519,[[],["u64"]]],[11,"max_value","","Returns the largest value that can be represented by this…",519,[[],["u64"]]],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",519,[[["str"],["u32"]],[["result",["u64","parseinterror"]],["parseinterror"],["u64"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",519,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",519,[[],["u32"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",519,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",519,[[],["u32"]]],[11,"leading_ones","","Returns the number of leading ones in the binary…",519,[[],["u32"]]],[11,"trailing_ones","","Returns the number of trailing ones in the binary…",519,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",519,[[["u32"]],["u64"]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",519,[[["u32"]],["u64"]]],[11,"swap_bytes","","Reverses the byte order of the integer.",519,[[],["u64"]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",519,[[],["u64"]]],[11,"from_be","","Converts an integer from big endian to the target's…",519,[[["u64"]],["u64"]]],[11,"from_le","","Converts an integer from little endian to the target's…",519,[[["u64"]],["u64"]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",519,[[],["u64"]]],[11,"to_le","","Converts `self` to little endian from the target's…",519,[[],["u64"]]],[11,"checked_add","","Checked integer addition. Computes `self + rhs`, returning…",519,[[["u64"]],[["u64"],["option",["u64"]]]]],[11,"checked_sub","","Checked integer subtraction. Computes `self - rhs`,…",519,[[["u64"]],[["u64"],["option",["u64"]]]]],[11,"checked_mul","","Checked integer multiplication. Computes `self * rhs`,…",519,[[["u64"]],[["u64"],["option",["u64"]]]]],[11,"checked_div","","Checked integer division. Computes `self / rhs`, returning…",519,[[["u64"]],[["u64"],["option",["u64"]]]]],[11,"checked_div_euclid","","Checked Euclidean division. Computes…",519,[[["u64"]],[["u64"],["option",["u64"]]]]],[11,"checked_rem","","Checked integer remainder. Computes `self % rhs`,…",519,[[["u64"]],[["u64"],["option",["u64"]]]]],[11,"checked_rem_euclid","","Checked Euclidean modulo. Computes `self.rem_euclid(rhs)`,…",519,[[["u64"]],[["u64"],["option",["u64"]]]]],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None`…",519,[[],[["u64"],["option",["u64"]]]]],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",519,[[["u32"]],[["u64"],["option",["u64"]]]]],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",519,[[["u32"]],[["u64"],["option",["u64"]]]]],[11,"checked_pow","","Checked exponentiation. Computes `self.pow(exp)`,…",519,[[["u32"]],[["u64"],["option",["u64"]]]]],[11,"saturating_add","","Saturating integer addition. Computes `self + rhs`,…",519,[[["u64"]],["u64"]]],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - rhs`,…",519,[[["u64"]],["u64"]]],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * rhs`,…",519,[[["u64"]],["u64"]]],[11,"saturating_pow","","Saturating integer exponentiation. Computes…",519,[[["u32"]],["u64"]]],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + rhs`,…",519,[[["u64"]],["u64"]]],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - rhs`,…",519,[[["u64"]],["u64"]]],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * rhs`,…",519,[[["u64"]],["u64"]]],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / rhs`.…",519,[[["u64"]],["u64"]]],[11,"wrapping_div_euclid","","Wrapping Euclidean division. Computes…",519,[[["u64"]],["u64"]]],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % rhs`.…",519,[[["u64"]],["u64"]]],[11,"wrapping_rem_euclid","","Wrapping Euclidean modulo. Computes…",519,[[["u64"]],["u64"]]],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping…",519,[[],["u64"]]],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",519,[[["u32"]],["u64"]]],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",519,[[["u32"]],["u64"]]],[11,"wrapping_pow","","Wrapping (modular) exponentiation. Computes…",519,[[["u32"]],["u64"]]],[11,"overflowing_add","","Calculates `self` + `rhs`",519,[[["u64"]]]],[11,"overflowing_sub","","Calculates `self` - `rhs`",519,[[["u64"]]]],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",519,[[["u64"]]]],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",519,[[["u64"]]]],[11,"overflowing_div_euclid","","Calculates the quotient of Euclidean division…",519,[[["u64"]]]],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",519,[[["u64"]]]],[11,"overflowing_rem_euclid","","Calculates the remainder `self.rem_euclid(rhs)` as if by…",519,[[["u64"]]]],[11,"overflowing_neg","","Negates self in an overflowing fashion.",519,[[]]],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",519,[[["u32"]]]],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",519,[[["u32"]]]],[11,"overflowing_pow","","Raises self to the power of `exp`, using exponentiation by…",519,[[["u32"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",519,[[["u32"]],["u64"]]],[11,"div_euclid","","Performs Euclidean division.",519,[[["u64"]],["u64"]]],[11,"rem_euclid","","Calculates the least remainder of `self (mod rhs)`.",519,[[["u64"]],["u64"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",519,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",519,[[],["u64"]]],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to…",519,[[],[["u64"],["option",["u64"]]]]],[11,"wrapping_next_power_of_two","","Returns the smallest power of two greater than or equal to…",519,[[],["u64"]]],[11,"to_be_bytes","","Return the memory representation of this integer as a byte…",519,[[]]],[11,"to_le_bytes","","Return the memory representation of this integer as a byte…",519,[[]]],[11,"to_ne_bytes","","Return the memory representation of this integer as a byte…",519,[[]]],[11,"from_be_bytes","","Create an integer value from its representation as a byte…",519,[[],["u64"]]],[11,"from_le_bytes","","Create an integer value from its representation as a byte…",519,[[],["u64"]]],[11,"from_ne_bytes","","Create an integer value from its memory representation as…",519,[[],["u64"]]],[11,"from","","",519,[[["t"]],["t"]]],[11,"try_from","","",519,[[["u"]],["result"]]],[11,"into","","",519,[[],["u"]]],[11,"try_into","","",519,[[],["result"]]],[11,"borrow","","",519,[[["self"]],["t"]]],[11,"borrow_mut","","",519,[[["self"]],["t"]]],[11,"type_id","","",519,[[["self"]],["typeid"]]],[11,"to_owned","","",519,[[["self"]],["t"]]],[11,"clone_into","","",519,[[["self"],["t"]]]],[11,"to_string","","",519,[[["self"]],["string"]]],[11,"min_value","","Returns the smallest value that can be represented by this…",518,[[],["u128"]]],[11,"max_value","","Returns the largest value that can be represented by this…",518,[[],["u128"]]],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",518,[[["str"],["u32"]],[["result",["u128","parseinterror"]],["parseinterror"],["u128"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",518,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",518,[[],["u32"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",518,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",518,[[],["u32"]]],[11,"leading_ones","","Returns the number of leading ones in the binary…",518,[[],["u32"]]],[11,"trailing_ones","","Returns the number of trailing ones in the binary…",518,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",518,[[["u32"]],["u128"]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",518,[[["u32"]],["u128"]]],[11,"swap_bytes","","Reverses the byte order of the integer.",518,[[],["u128"]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",518,[[],["u128"]]],[11,"from_be","","Converts an integer from big endian to the target's…",518,[[["u128"]],["u128"]]],[11,"from_le","","Converts an integer from little endian to the target's…",518,[[["u128"]],["u128"]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",518,[[],["u128"]]],[11,"to_le","","Converts `self` to little endian from the target's…",518,[[],["u128"]]],[11,"checked_add","","Checked integer addition. Computes `self + rhs`, returning…",518,[[["u128"]],[["u128"],["option",["u128"]]]]],[11,"checked_sub","","Checked integer subtraction. Computes `self - rhs`,…",518,[[["u128"]],[["u128"],["option",["u128"]]]]],[11,"checked_mul","","Checked integer multiplication. Computes `self * rhs`,…",518,[[["u128"]],[["u128"],["option",["u128"]]]]],[11,"checked_div","","Checked integer division. Computes `self / rhs`, returning…",518,[[["u128"]],[["u128"],["option",["u128"]]]]],[11,"checked_div_euclid","","Checked Euclidean division. Computes…",518,[[["u128"]],[["u128"],["option",["u128"]]]]],[11,"checked_rem","","Checked integer remainder. Computes `self % rhs`,…",518,[[["u128"]],[["u128"],["option",["u128"]]]]],[11,"checked_rem_euclid","","Checked Euclidean modulo. Computes `self.rem_euclid(rhs)`,…",518,[[["u128"]],[["u128"],["option",["u128"]]]]],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None`…",518,[[],[["u128"],["option",["u128"]]]]],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",518,[[["u32"]],[["u128"],["option",["u128"]]]]],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",518,[[["u32"]],[["u128"],["option",["u128"]]]]],[11,"checked_pow","","Checked exponentiation. Computes `self.pow(exp)`,…",518,[[["u32"]],[["u128"],["option",["u128"]]]]],[11,"saturating_add","","Saturating integer addition. Computes `self + rhs`,…",518,[[["u128"]],["u128"]]],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - rhs`,…",518,[[["u128"]],["u128"]]],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * rhs`,…",518,[[["u128"]],["u128"]]],[11,"saturating_pow","","Saturating integer exponentiation. Computes…",518,[[["u32"]],["u128"]]],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + rhs`,…",518,[[["u128"]],["u128"]]],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - rhs`,…",518,[[["u128"]],["u128"]]],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * rhs`,…",518,[[["u128"]],["u128"]]],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / rhs`.…",518,[[["u128"]],["u128"]]],[11,"wrapping_div_euclid","","Wrapping Euclidean division. Computes…",518,[[["u128"]],["u128"]]],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % rhs`.…",518,[[["u128"]],["u128"]]],[11,"wrapping_rem_euclid","","Wrapping Euclidean modulo. Computes…",518,[[["u128"]],["u128"]]],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping…",518,[[],["u128"]]],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",518,[[["u32"]],["u128"]]],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",518,[[["u32"]],["u128"]]],[11,"wrapping_pow","","Wrapping (modular) exponentiation. Computes…",518,[[["u32"]],["u128"]]],[11,"overflowing_add","","Calculates `self` + `rhs`",518,[[["u128"]]]],[11,"overflowing_sub","","Calculates `self` - `rhs`",518,[[["u128"]]]],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",518,[[["u128"]]]],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",518,[[["u128"]]]],[11,"overflowing_div_euclid","","Calculates the quotient of Euclidean division…",518,[[["u128"]]]],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",518,[[["u128"]]]],[11,"overflowing_rem_euclid","","Calculates the remainder `self.rem_euclid(rhs)` as if by…",518,[[["u128"]]]],[11,"overflowing_neg","","Negates self in an overflowing fashion.",518,[[]]],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",518,[[["u32"]]]],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",518,[[["u32"]]]],[11,"overflowing_pow","","Raises self to the power of `exp`, using exponentiation by…",518,[[["u32"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",518,[[["u32"]],["u128"]]],[11,"div_euclid","","Performs Euclidean division.",518,[[["u128"]],["u128"]]],[11,"rem_euclid","","Calculates the least remainder of `self (mod rhs)`.",518,[[["u128"]],["u128"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",518,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",518,[[],["u128"]]],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to…",518,[[],[["u128"],["option",["u128"]]]]],[11,"wrapping_next_power_of_two","","Returns the smallest power of two greater than or equal to…",518,[[],["u128"]]],[11,"to_be_bytes","","Return the memory representation of this integer as a byte…",518,[[]]],[11,"to_le_bytes","","Return the memory representation of this integer as a byte…",518,[[]]],[11,"to_ne_bytes","","Return the memory representation of this integer as a byte…",518,[[]]],[11,"from_be_bytes","","Create an integer value from its representation as a byte…",518,[[],["u128"]]],[11,"from_le_bytes","","Create an integer value from its representation as a byte…",518,[[],["u128"]]],[11,"from_ne_bytes","","Create an integer value from its memory representation as…",518,[[],["u128"]]],[11,"from","","",518,[[["t"]],["t"]]],[11,"try_from","","",518,[[["u"]],["result"]]],[11,"into","","",518,[[],["u"]]],[11,"try_into","","",518,[[],["result"]]],[11,"borrow","","",518,[[["self"]],["t"]]],[11,"borrow_mut","","",518,[[["self"]],["t"]]],[11,"type_id","","",518,[[["self"]],["typeid"]]],[11,"to_owned","","",518,[[["self"]],["t"]]],[11,"clone_into","","",518,[[["self"],["t"]]]],[11,"to_string","","",518,[[["self"]],["string"]]],[11,"is_nan","","Returns `true` if this value is `NaN`.",528,[[],["bool"]]],[11,"is_infinite","","Returns `true` if this value is positive infinity or…",528,[[],["bool"]]],[11,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",528,[[],["bool"]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite,…",528,[[],["bool"]]],[11,"classify","","Returns the floating point category of the number. If only…",528,[[],["fpcategory"]]],[11,"is_sign_positive","","Returns `true` if `self` has a positive sign, including…",528,[[],["bool"]]],[11,"is_sign_negative","","Returns `true` if `self` has a negative sign, including…",528,[[],["bool"]]],[11,"recip","","Takes the reciprocal (inverse) of a number, `1/x`.",528,[[],["f32"]]],[11,"to_degrees","","Converts radians to degrees.",528,[[],["f32"]]],[11,"to_radians","","Converts degrees to radians.",528,[[],["f32"]]],[11,"max","","Returns the maximum of the two numbers.",528,[[["f32"]],["f32"]]],[11,"min","","Returns the minimum of the two numbers.",528,[[["f32"]],["f32"]]],[11,"approx_unchecked_to","","Rounds toward zero and converts to any primitive integer…",528,[[],["int"]]],[11,"to_bits","","Raw transmutation to `u32`.",528,[[],["u32"]]],[11,"from_bits","","Raw transmutation from `u32`.",528,[[["u32"]],["f32"]]],[11,"to_be_bytes","","Return the memory representation of this floating point…",528,[[]]],[11,"to_le_bytes","","Return the memory representation of this floating point…",528,[[]]],[11,"to_ne_bytes","","Return the memory representation of this floating point…",528,[[]]],[11,"from_be_bytes","","Create a floating point value from its representation as a…",528,[[],["f32"]]],[11,"from_le_bytes","","Create a floating point value from its representation as a…",528,[[],["f32"]]],[11,"from_ne_bytes","","Create a floating point value from its representation as a…",528,[[],["f32"]]],[11,"from","","",528,[[["t"]],["t"]]],[11,"try_from","","",528,[[["u"]],["result"]]],[11,"into","","",528,[[],["u"]]],[11,"try_into","","",528,[[],["result"]]],[11,"borrow","","",528,[[["self"]],["t"]]],[11,"borrow_mut","","",528,[[["self"]],["t"]]],[11,"type_id","","",528,[[["self"]],["typeid"]]],[11,"to_owned","","",528,[[["self"]],["t"]]],[11,"clone_into","","",528,[[["self"],["t"]]]],[11,"to_string","","",528,[[["self"]],["string"]]],[11,"is_nan","","Returns `true` if this value is `NaN`.",529,[[],["bool"]]],[11,"is_infinite","","Returns `true` if this value is positive infinity or…",529,[[],["bool"]]],[11,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",529,[[],["bool"]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite,…",529,[[],["bool"]]],[11,"classify","","Returns the floating point category of the number. If only…",529,[[],["fpcategory"]]],[11,"is_sign_positive","","Returns `true` if `self` has a positive sign, including…",529,[[],["bool"]]],[11,"is_sign_negative","","Returns `true` if `self` has a negative sign, including…",529,[[],["bool"]]],[11,"recip","","Takes the reciprocal (inverse) of a number, `1/x`.",529,[[],["f64"]]],[11,"to_degrees","","Converts radians to degrees.",529,[[],["f64"]]],[11,"to_radians","","Converts degrees to radians.",529,[[],["f64"]]],[11,"max","","Returns the maximum of the two numbers.",529,[[["f64"]],["f64"]]],[11,"min","","Returns the minimum of the two numbers.",529,[[["f64"]],["f64"]]],[11,"approx_unchecked_to","","Rounds toward zero and converts to any primitive integer…",529,[[],["int"]]],[11,"to_bits","","Raw transmutation to `u64`.",529,[[],["u64"]]],[11,"from_bits","","Raw transmutation from `u64`.",529,[[["u64"]],["f64"]]],[11,"to_be_bytes","","Return the memory representation of this floating point…",529,[[]]],[11,"to_le_bytes","","Return the memory representation of this floating point…",529,[[]]],[11,"to_ne_bytes","","Return the memory representation of this floating point…",529,[[]]],[11,"from_be_bytes","","Create a floating point value from its representation as a…",529,[[],["f64"]]],[11,"from_le_bytes","","Create a floating point value from its representation as a…",529,[[],["f64"]]],[11,"from_ne_bytes","","Create a floating point value from its representation as a…",529,[[],["f64"]]],[11,"from","","",529,[[["t"]],["t"]]],[11,"try_from","","",529,[[["u"]],["result"]]],[11,"into","","",529,[[],["u"]]],[11,"try_into","","",529,[[],["result"]]],[11,"borrow","","",529,[[["self"]],["t"]]],[11,"borrow_mut","","",529,[[["self"]],["t"]]],[11,"type_id","","",529,[[["self"]],["typeid"]]],[11,"to_owned","","",529,[[["self"]],["t"]]],[11,"clone_into","","",529,[[["self"],["t"]]]],[11,"to_string","","",529,[[["self"]],["string"]]],[11,"then_some","","Returns `Some(t)` if the `bool` is `true`, or `None`…",512,[[["t"]],["option"]]],[11,"then","","Returns `Some(f())` if the `bool` is `true`, or `None`…",512,[[["f"]],["option"]]],[11,"from","","",512,[[["t"]],["t"]]],[11,"try_from","","",512,[[["u"]],["result"]]],[11,"into","","",512,[[],["u"]]],[11,"try_into","","",512,[[],["result"]]],[11,"borrow","","",512,[[["self"]],["t"]]],[11,"borrow_mut","","",512,[[["self"]],["t"]]],[11,"type_id","","",512,[[["self"]],["typeid"]]],[11,"to_owned","","",512,[[["self"]],["t"]]],[11,"clone_into","","",512,[[["self"],["t"]]]],[11,"to_string","","",512,[[["self"]],["string"]]],[11,"is_digit","","Checks if a `char` is a digit in the given radix.",526,[[["u32"]],["bool"]]],[11,"to_digit","","Converts a `char` to a digit in the given radix.",526,[[["u32"]],[["u32"],["option",["u32"]]]]],[11,"escape_unicode","","Returns an iterator that yields the hexadecimal Unicode…",526,[[],["escapeunicode"]]],[11,"escape_debug","","Returns an iterator that yields the literal escape code of…",526,[[],["escapedebug"]]],[11,"escape_default","","Returns an iterator that yields the literal escape code of…",526,[[],["escapedefault"]]],[11,"len_utf8","","Returns the number of bytes this `char` would need if…",526,[[],["usize"]]],[11,"len_utf16","","Returns the number of 16-bit code units this `char` would…",526,[[],["usize"]]],[11,"encode_utf8","","Encodes this character as UTF-8 into the provided byte…",526,[[],["str"]]],[11,"encode_utf16","","Encodes this character as UTF-16 into the provided `u16`…",526,[[]]],[11,"is_alphabetic","","Returns `true` if this `char` has the `Alphabetic` property.",526,[[],["bool"]]],[11,"is_lowercase","","Returns `true` if this `char` has the `Lowercase` property.",526,[[],["bool"]]],[11,"is_uppercase","","Returns `true` if this `char` has the `Uppercase` property.",526,[[],["bool"]]],[11,"is_whitespace","","Returns `true` if this `char` has the `White_Space`…",526,[[],["bool"]]],[11,"is_alphanumeric","","Returns `true` if this `char` satisfies either…",526,[[],["bool"]]],[11,"is_control","","Returns `true` if this `char` has the general category for…",526,[[],["bool"]]],[11,"is_numeric","","Returns `true` if this `char` has one of the general…",526,[[],["bool"]]],[11,"to_lowercase","","Returns an iterator that yields the lowercase mapping of…",526,[[],["tolowercase"]]],[11,"to_uppercase","","Returns an iterator that yields the uppercase mapping of…",526,[[],["touppercase"]]],[11,"is_ascii","","Checks if the value is within the ASCII range.",526,[[["self"]],["bool"]]],[11,"to_ascii_uppercase","","Makes a copy of the value in its ASCII upper case…",526,[[["self"]],["char"]]],[11,"to_ascii_lowercase","","Makes a copy of the value in its ASCII lower case…",526,[[["self"]],["char"]]],[11,"eq_ignore_ascii_case","","Checks that two values are an ASCII case-insensitive match.",526,[[["self"],["char"]],["bool"]]],[11,"make_ascii_uppercase","","Converts this type to its ASCII upper case equivalent…",526,[[["self"]]]],[11,"make_ascii_lowercase","","Converts this type to its ASCII lower case equivalent…",526,[[["self"]]]],[11,"is_ascii_alphabetic","","Checks if the value is an ASCII alphabetic character:",526,[[["self"]],["bool"]]],[11,"is_ascii_uppercase","","Checks if the value is an ASCII uppercase character:…",526,[[["self"]],["bool"]]],[11,"is_ascii_lowercase","","Checks if the value is an ASCII lowercase character:…",526,[[["self"]],["bool"]]],[11,"is_ascii_alphanumeric","","Checks if the value is an ASCII alphanumeric character:",526,[[["self"]],["bool"]]],[11,"is_ascii_digit","","Checks if the value is an ASCII decimal digit: U+0030 '0'…",526,[[["self"]],["bool"]]],[11,"is_ascii_hexdigit","","Checks if the value is an ASCII hexadecimal digit:",526,[[["self"]],["bool"]]],[11,"is_ascii_punctuation","","Checks if the value is an ASCII punctuation character:",526,[[["self"]],["bool"]]],[11,"is_ascii_graphic","","Checks if the value is an ASCII graphic character: U+0021…",526,[[["self"]],["bool"]]],[11,"is_ascii_whitespace","","Checks if the value is an ASCII whitespace character:…",526,[[["self"]],["bool"]]],[11,"is_ascii_control","","Checks if the value is an ASCII control character: U+0000…",526,[[["self"]],["bool"]]],[11,"from","","",526,[[["t"]],["t"]]],[11,"into_searcher","","",526,[[["str"]],["charpredicatesearcher"]]],[11,"is_contained_in","","",526,[[["str"]],["bool"]]],[11,"is_prefix_of","","",526,[[["str"]],["bool"]]],[11,"is_suffix_of","","",526,[[["str"]],["bool"]]],[11,"try_from","","",526,[[["u"]],["result"]]],[11,"into","","",526,[[],["u"]]],[11,"try_into","","",526,[[],["result"]]],[11,"borrow","","",526,[[["self"]],["t"]]],[11,"borrow_mut","","",526,[[["self"]],["t"]]],[11,"type_id","","",526,[[["self"]],["typeid"]]],[11,"to_owned","","",526,[[["self"]],["t"]]],[11,"clone_into","","",526,[[["self"],["t"]]]],[11,"to_string","","",526,[[["self"]],["string"]]],[11,"borrow","","",509,[[["self"]],["t"]]],[11,"borrow_mut","","",509,[[["self"]],["t"]]],[11,"type_id","","",509,[[["self"]],["typeid"]]],[11,"to_owned","","",509,[[["self"]],["t"]]],[11,"clone_into","","",509,[[["self"],["t"]]]],[11,"to_string","","",509,[[["self"]],["string"]]],[11,"borrow","","",510,[[["self"]],["t"]]],[11,"borrow_mut","","",510,[[["self"]],["t"]]],[11,"type_id","","",510,[[["self"]],["typeid"]]],[11,"to_owned","","",510,[[["self"]],["t"]]],[11,"clone_into","","",510,[[["self"],["t"]]]],[11,"is_ascii","","Checks if all bytes in this slice are within the ASCII…",510,[[["self"]],["bool"]]],[11,"eq_ignore_ascii_case","","Checks that two slices are an ASCII case-insensitive match.",510,[[["self"]],["bool"]]],[11,"make_ascii_uppercase","","Converts this slice to its ASCII upper case equivalent…",510,[[["self"]]]],[11,"make_ascii_lowercase","","Converts this slice to its ASCII lower case equivalent…",510,[[["self"]]]],[11,"borrow","","",510,[[["self"]],["t"]]],[11,"borrow_mut","","",510,[[["self"]],["t"]]],[11,"type_id","","",510,[[["self"]],["typeid"]]],[11,"to_owned","","",510,[[["self"]],["t"]]],[11,"clone_into","","",510,[[["self"],["t"]]]],[11,"into_boxed_bytes","","Converts a `Box<str>` into a `Box<[u8]>` without copying…",509,[[["str"],["box",["str"]]],["box"]]],[11,"replace","","Replaces all matches of a pattern with another string.",509,[[["str"],["self"],["p"]],["string"]]],[11,"replacen","","Replaces first N matches of a pattern with another string.",509,[[["str"],["usize"],["p"],["self"]],["string"]]],[11,"to_lowercase","","Returns the lowercase equivalent of this string slice, as…",509,[[["self"]],["string"]]],[11,"to_uppercase","","Returns the uppercase equivalent of this string slice, as…",509,[[["self"]],["string"]]],[11,"into_string","","Converts a [`Box<str>`] into a [`String`] without copying…",509,[[["str"],["box",["str"]]],["string"]]],[11,"repeat","","Creates a new [`String`] by repeating a string `n` times.",509,[[["self"],["usize"]],["string"]]],[11,"to_ascii_uppercase","","Returns a copy of this string where each character is…",509,[[["self"]],["string"]]],[11,"to_ascii_lowercase","","Returns a copy of this string where each character is…",509,[[["self"]],["string"]]],[11,"sort","","Sorts the slice.",510,[[["self"]]]],[11,"sort_by","","Sorts the slice with a comparator function.",510,[[["self"],["f"]]]],[11,"sort_by_key","","Sorts the slice with a key extraction function.",510,[[["self"],["f"]]]],[11,"sort_by_cached_key","","Sorts the slice with a key extraction function.",510,[[["self"],["f"]]]],[11,"to_vec","","Copies `self` into a new `Vec`.",510,[[["self"]],["vec"]]],[11,"into_vec","","Converts `self` into a vector without clones or allocation.",510,[[["box"]],["vec"]]],[11,"repeat","","Creates a vector by repeating a slice `n` times.",510,[[["self"],["usize"]],["vec"]]],[11,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",510,[[["self"]]]],[11,"join","","Flattens a slice of `T` into a single value…",510,[[["self"],["separator"]]]],[11,"connect","","Flattens a slice of `T` into a single value…",510,[[["self"],["separator"]]]],[11,"to_ascii_uppercase","","Returns a vector containing a copy of this slice where…",510,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"to_ascii_lowercase","","Returns a vector containing a copy of this slice where…",510,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"is_null","","Returns `true` if the pointer is null.",525,[[],["bool"]]],[11,"cast","","Casts to a pointer of another type.",525,[[]]],[11,"as_ref","","Returns `None` if the pointer is null, or else returns a…",525,[[],[["option"],["t"]]]],[11,"offset","","Calculates the offset from a pointer.",525,[[["isize"]]]],[11,"wrapping_offset","","Calculates the offset from a pointer using wrapping…",525,[[["isize"]]]],[11,"offset_from","","Calculates the distance between two pointers. The returned…",525,[[],["isize"]]],[11,"wrapping_offset_from","","Calculates the distance between two pointers. The returned…",525,[[],["isize"]]],[11,"add","","Calculates the offset from a pointer (convenience for…",525,[[["usize"]]]],[11,"sub","","Calculates the offset from a pointer (convenience for…",525,[[["usize"]]]],[11,"wrapping_add","","Calculates the offset from a pointer using wrapping…",525,[[["usize"]]]],[11,"wrapping_sub","","Calculates the offset from a pointer using wrapping…",525,[[["usize"]]]],[11,"read","","Reads the value from `self` without moving it. This leaves…",525,[[],["t"]]],[11,"read_volatile","","Performs a volatile read of the value from `self` without…",525,[[],["t"]]],[11,"read_unaligned","","Reads the value from `self` without moving it. This leaves…",525,[[],["t"]]],[11,"copy_to","","Copies `count * size_of<T>` bytes from `self` to `dest`.…",525,[[["usize"]]]],[11,"copy_to_nonoverlapping","","Copies `count * size_of<T>` bytes from `self` to `dest`.…",525,[[["usize"]]]],[11,"align_offset","","Computes the offset that needs to be applied to the…",525,[[["usize"]],["usize"]]],[11,"from","","",525,[[["t"]],["t"]]],[11,"try_from","","",525,[[["u"]],["result"]]],[11,"into","","",525,[[],["u"]]],[11,"try_into","","",525,[[],["result"]]],[11,"borrow","","",525,[[["self"]],["t"]]],[11,"borrow_mut","","",525,[[["self"]],["t"]]],[11,"type_id","","",525,[[["self"]],["typeid"]]],[11,"to_owned","","",525,[[["self"]],["t"]]],[11,"clone_into","","",525,[[["self"],["t"]]]],[11,"is_null","","Returns `true` if the pointer is null.",525,[[],["bool"]]],[11,"cast","","Casts to a pointer of another type.",525,[[]]],[11,"as_ref","","Returns `None` if the pointer is null, or else returns a…",525,[[],[["option"],["t"]]]],[11,"offset","","Calculates the offset from a pointer.",525,[[["isize"]]]],[11,"wrapping_offset","","Calculates the offset from a pointer using wrapping…",525,[[["isize"]]]],[11,"as_mut","","Returns `None` if the pointer is null, or else returns a…",525,[[],[["option"],["t"]]]],[11,"offset_from","","Calculates the distance between two pointers. The returned…",525,[[],["isize"]]],[11,"wrapping_offset_from","","Calculates the distance between two pointers. The returned…",525,[[],["isize"]]],[11,"add","","Calculates the offset from a pointer (convenience for…",525,[[["usize"]]]],[11,"sub","","Calculates the offset from a pointer (convenience for…",525,[[["usize"]]]],[11,"wrapping_add","","Calculates the offset from a pointer using wrapping…",525,[[["usize"]]]],[11,"wrapping_sub","","Calculates the offset from a pointer using wrapping…",525,[[["usize"]]]],[11,"read","","Reads the value from `self` without moving it. This leaves…",525,[[],["t"]]],[11,"read_volatile","","Performs a volatile read of the value from `self` without…",525,[[],["t"]]],[11,"read_unaligned","","Reads the value from `self` without moving it. This leaves…",525,[[],["t"]]],[11,"copy_to","","Copies `count * size_of<T>` bytes from `self` to `dest`.…",525,[[["usize"]]]],[11,"copy_to_nonoverlapping","","Copies `count * size_of<T>` bytes from `self` to `dest`.…",525,[[["usize"]]]],[11,"copy_from","","Copies `count * size_of<T>` bytes from `src` to `self`.…",525,[[["usize"]]]],[11,"copy_from_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `self`.…",525,[[["usize"]]]],[11,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",525,[[]]],[11,"write","","Overwrites a memory location with the given value without…",525,[[["t"]]]],[11,"write_bytes","","Invokes memset on the specified pointer, setting `count *…",525,[[["usize"],["u8"]]]],[11,"write_volatile","","Performs a volatile write of a memory location with the…",525,[[["t"]]]],[11,"write_unaligned","","Overwrites a memory location with the given value without…",525,[[["t"]]]],[11,"replace","","Replaces the value at `self` with `src`, returning the old…",525,[[["t"]],["t"]]],[11,"swap","","Swaps the values at two mutable locations of the same…",525,[[]]],[11,"align_offset","","Computes the offset that needs to be applied to the…",525,[[["usize"]],["usize"]]],[11,"from","","",525,[[["t"]],["t"]]],[11,"try_from","","",525,[[["u"]],["result"]]],[11,"into","","",525,[[],["u"]]],[11,"try_into","","",525,[[],["result"]]],[11,"borrow","","",525,[[["self"]],["t"]]],[11,"borrow_mut","","",525,[[["self"]],["t"]]],[11,"type_id","","",525,[[["self"]],["typeid"]]],[11,"to_owned","","",525,[[["self"]],["t"]]],[11,"clone_into","","",525,[[["self"],["t"]]]],[11,"is_ascii","","",513,[[["self"]],["bool"]]],[11,"to_ascii_uppercase","","",513,[[["self"]]]],[11,"to_ascii_lowercase","","",513,[[["self"]]]],[11,"eq_ignore_ascii_case","","",513,[[["self"]],["bool"]]],[11,"make_ascii_uppercase","","",513,[[["self"]]]],[11,"make_ascii_lowercase","","",513,[[["self"]]]],[11,"is_ascii","","",526,[[["self"]],["bool"]]],[11,"to_ascii_uppercase","","",526,[[["self"]]]],[11,"to_ascii_lowercase","","",526,[[["self"]]]],[11,"eq_ignore_ascii_case","","",526,[[["self"]],["bool"]]],[11,"make_ascii_uppercase","","",526,[[["self"]]]],[11,"make_ascii_lowercase","","",526,[[["self"]]]],[11,"is_ascii","","",510,[[["self"]],["bool"]]],[11,"to_ascii_uppercase","","",510,[[["self"]]]],[11,"to_ascii_lowercase","","",510,[[["self"]]]],[11,"eq_ignore_ascii_case","","",510,[[["self"]],["bool"]]],[11,"make_ascii_uppercase","","",510,[[["self"]]]],[11,"make_ascii_lowercase","","",510,[[["self"]]]],[11,"is_ascii","","",509,[[["self"]],["bool"]]],[11,"to_ascii_uppercase","","",509,[[["self"]]]],[11,"to_ascii_lowercase","","",509,[[["self"]]]],[11,"eq_ignore_ascii_case","","",509,[[["self"]],["bool"]]],[11,"make_ascii_uppercase","","",509,[[["self"]]]],[11,"make_ascii_lowercase","","",509,[[["self"]]]],[11,"description","std::env","",108,[[["self"]],["str"]]],[11,"description","","",431,[[["self"]],["str"]]],[11,"description","std::str","",274,[[["self"]],["str"]]],[11,"description","","",278,[[["self"]],["str"]]],[11,"description","std::num","",452,[[["self"]],["str"]]],[11,"description","","",453,[[["self"]],["str"]]],[11,"description","std::array","",301,[[["self"]],["str"]]],[11,"description","std::num","",451,[[["self"]],["str"]]],[11,"description","std::string","",292,[[["self"]],["str"]]],[11,"description","","",293,[[["self"]],["str"]]],[11,"description","std","",533,[[["self"]],["str"]]],[11,"description","std::char","",318,[[["self"]],["str"]]],[11,"description","std::boxed","",234,[[["self"]],["str"]]],[11,"cause","","",234,[[["self"]],[["error"],["option",["error"]]]]],[11,"source","","",234,[[["self"]],[["option",["error"]],["error"]]]],[11,"description","std::fmt","",235,[[["self"]],["str"]]],[11,"description","std::cell","",305,[[["self"]],["str"]]],[11,"description","","",306,[[["self"]],["str"]]],[11,"description","std::char","",315,[[["self"]],["str"]]],[11,"description","","",316,[[["self"]],["str"]]],[11,"description","std::ffi","",111,[[["self"]],["str"]]],[11,"description","","",438,[[["self"]],["str"]]],[11,"description","","",112,[[["self"]],["str"]]],[11,"source","","",112,[[["self"]],[["option",["error"]],["error"]]]],[11,"description","std::io","",127,[[["self"]],["str"]]],[11,"description","","",130,[[["self"]],["str"]]],[11,"cause","","",130,[[["self"]],[["option",["error"]],["error"]]]],[11,"source","","",130,[[["self"]],[["error"],["option",["error"]]]]],[11,"description","std::net","",449,[[["self"]],["str"]]],[11,"description","std::path","",471,[[["self"]],["str"]]],[11,"description","std::sync::mpsc","",206,[[["self"]],["str"]]],[11,"description","","",209,[[["self"]],["str"]]],[11,"description","","",496,[[["self"]],["str"]]],[11,"description","","",207,[[["self"]],["str"]]],[11,"description","","",208,[[["self"]],["str"]]],[11,"description","std::time","",223,[[["self"]],["str"]]],[11,"description","std::sync","",226,[[["self"]],["str"]]],[11,"description","","",205,[[["self"]],["str"]]],[11,"cause","","",205,[[["self"]],[["error"],["option",["error"]]]]],[11,"read","std::fs","",116,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"read_vectored","","",116,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"initializer","","",116,[[["self"]],["initializer"]]],[11,"read","std::io","",125,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"read_vectored","","",125,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"initializer","","",125,[[["self"]],["initializer"]]],[11,"read","","",129,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"read_vectored","","",129,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"read_exact","","",129,[[["self"]],["result"]]],[11,"initializer","","",129,[[["self"]],["initializer"]]],[11,"read","std","",508,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"read_vectored","","",508,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"initializer","","",508,[[["self"]],["initializer"]]],[11,"read_to_end","","",508,[[["self"],["vec"]],[["result",["usize"]],["usize"]]]],[11,"read_to_string","","",508,[[["string"],["self"]],[["result",["usize"]],["usize"]]]],[11,"read_exact","","",508,[[["self"]],["result"]]],[11,"read","std::boxed","",234,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"read_vectored","","",234,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"initializer","","",234,[[["self"]],["initializer"]]],[11,"read_to_end","","",234,[[["self"],["vec"]],[["result",["usize"]],["usize"]]]],[11,"read_to_string","","",234,[[["string"],["self"]],[["result",["usize"]],["usize"]]]],[11,"read_exact","","",234,[[["self"]],["result"]]],[11,"read","std","",510,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"read_vectored","","",510,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"initializer","","",510,[[["self"]],["initializer"]]],[11,"read_exact","","",510,[[["self"]],["result"]]],[11,"read_to_end","","",510,[[["self"],["vec"]],[["result",["usize"]],["usize"]]]],[11,"read","std::io","",131,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"read_vectored","","",131,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"initializer","","",131,[[["self"]],["initializer"]]],[11,"read_to_end","","",131,[[["self"],["vec"]],[["result",["usize"]],["usize"]]]],[11,"read_to_string","","",131,[[["string"],["self"]],[["result",["usize"]],["usize"]]]],[11,"read_exact","","",131,[[["self"]],["result"]]],[11,"read","","",441,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"read_vectored","","",441,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"initializer","","",441,[[["self"]],["initializer"]]],[11,"read","","",443,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"initializer","","",443,[[["self"]],["initializer"]]],[11,"read","","",444,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"read_vectored","","",444,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"initializer","","",444,[[["self"]],["initializer"]]],[11,"read","","",141,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"read_vectored","","",141,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"initializer","","",141,[[["self"]],["initializer"]]],[11,"read","","",142,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"initializer","","",142,[[["self"]],["initializer"]]],[11,"read_to_end","","",142,[[["self"],["vec"]],[["result",["usize"]],["usize"]]]],[11,"read","std::net","",151,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"read_vectored","","",151,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"initializer","","",151,[[["self"]],["initializer"]]],[11,"read","std::process","",474,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"read_vectored","","",474,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"initializer","","",474,[[["self"]],["initializer"]]],[11,"read","","",475,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"read_vectored","","",475,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"initializer","","",475,[[["self"]],["initializer"]]],[11,"read","std::os::unix::net","",228,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"read_vectored","","",228,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"initializer","","",228,[[["self"]],["initializer"]]],[11,"write","std::fs","",116,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_vectored","","",116,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",116,[[["self"]],["result"]]],[11,"write","std::io","",126,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_vectored","","",126,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",126,[[["self"]],["result"]]],[11,"write","","",128,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_vectored","","",128,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",128,[[["self"]],["result"]]],[11,"write","","",129,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_vectored","","",129,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",129,[[["self"]],["result"]]],[11,"write","","",129,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_vectored","","",129,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",129,[[["self"]],["result"]]],[11,"write","","",129,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_vectored","","",129,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",129,[[["self"]],["result"]]],[11,"write","","",129,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_vectored","","",129,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",129,[[["self"]],["result"]]],[11,"write","std","",508,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_vectored","","",508,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",508,[[["self"]],["result"]]],[11,"write_all","","",508,[[["self"]],["result"]]],[11,"write_fmt","","",508,[[["self"],["arguments"]],["result"]]],[11,"write","std::boxed","",234,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_vectored","","",234,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",234,[[["self"]],["result"]]],[11,"write_all","","",234,[[["self"]],["result"]]],[11,"write_fmt","","",234,[[["self"],["arguments"]],["result"]]],[11,"write","std","",510,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_vectored","","",510,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_all","","",510,[[["self"]],["result"]]],[11,"flush","","",510,[[["self"]],["result"]]],[11,"write","std::vec","",295,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_vectored","","",295,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_all","","",295,[[["self"]],["result"]]],[11,"flush","","",295,[[["self"]],["result"]]],[11,"write","std::io","",132,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_vectored","","",132,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",132,[[["self"]],["result"]]],[11,"write_all","","",132,[[["self"]],["result"]]],[11,"write_fmt","","",132,[[["self"],["arguments"]],["result"]]],[11,"write","","",442,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_vectored","","",442,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",442,[[["self"]],["result"]]],[11,"write","","",133,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_vectored","","",133,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",133,[[["self"]],["result"]]],[11,"write_all","","",133,[[["self"]],["result"]]],[11,"write_fmt","","",133,[[["self"],["arguments"]],["result"]]],[11,"write","","",440,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_vectored","","",440,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",440,[[["self"]],["result"]]],[11,"write","","",445,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_vectored","","",445,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",445,[[["self"]],["result"]]],[11,"write","std::net","",151,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_vectored","","",151,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",151,[[["self"]],["result"]]],[11,"write","std::process","",473,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_vectored","","",473,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",473,[[["self"]],["result"]]],[11,"write","std::os::unix::net","",228,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_vectored","","",228,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",228,[[["self"]],["result"]]],[11,"seek","std::fs","",116,[[["self"],["seekfrom"]],[["u64"],["result",["u64"]]]]],[11,"seek","std::io","Seek to an offset, in bytes, in the underlying reader.",125,[[["self"],["seekfrom"]],[["u64"],["result",["u64"]]]]],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",126,[[["self"],["seekfrom"]],[["u64"],["result",["u64"]]]]],[11,"seek","","",129,[[["self"],["seekfrom"]],[["u64"],["result",["u64"]]]]],[11,"stream_len","","",129,[[["self"]],[["u64"],["result",["u64"]]]]],[11,"stream_position","","",129,[[["self"]],[["u64"],["result",["u64"]]]]],[11,"seek","std","",508,[[["self"],["seekfrom"]],[["u64"],["result",["u64"]]]]],[11,"seek","std::boxed","",234,[[["self"],["seekfrom"]],[["u64"],["result",["u64"]]]]],[11,"fill_buf","std::io","",125,[[["self"]],["result"]]],[11,"consume","","",125,[[["self"],["usize"]]]],[11,"fill_buf","","",129,[[["self"]],["result"]]],[11,"consume","","",129,[[["self"],["usize"]]]],[11,"fill_buf","std","",508,[[["self"]],["result"]]],[11,"consume","","",508,[[["self"],["usize"]]]],[11,"read_until","","",508,[[["vec"],["self"],["u8"]],[["result",["usize"]],["usize"]]]],[11,"read_line","","",508,[[["string"],["self"]],[["result",["usize"]],["usize"]]]],[11,"fill_buf","std::boxed","",234,[[["self"]],["result"]]],[11,"consume","","",234,[[["self"],["usize"]]]],[11,"read_until","","",234,[[["vec"],["self"],["u8"]],[["result",["usize"]],["usize"]]]],[11,"read_line","","",234,[[["string"],["self"]],[["result",["usize"]],["usize"]]]],[11,"fill_buf","std","",510,[[["self"]],["result"]]],[11,"consume","","",510,[[["self"],["usize"]]]],[11,"fill_buf","std::io","",441,[[["self"]],["result"]]],[11,"consume","","",441,[[["self"],["usize"]]]],[11,"fill_buf","","",443,[[["self"]],["result"]]],[11,"consume","","",443,[[["self"],["usize"]]]],[11,"fill_buf","","",141,[[["self"]],["result"]]],[11,"consume","","",141,[[["self"],["usize"]]]],[11,"fill_buf","","",142,[[["self"]],["result"]]],[11,"consume","","",142,[[["self"],["usize"]]]],[11,"to_socket_addrs","std::net","",143,[[["self"]],[["result",["intoiter"]],["intoiter",["socketaddr"]]]]],[11,"to_socket_addrs","","",147,[[["self"]],[["result",["intoiter"]],["intoiter",["socketaddr"]]]]],[11,"to_socket_addrs","","",148,[[["self"]],[["result",["intoiter"]],["intoiter",["socketaddr"]]]]],[11,"to_socket_addrs","std","",531,[[["self"]],[["result",["intoiter"]],["intoiter",["socketaddr"]]]]],[11,"to_socket_addrs","","",531,[[["self"]],[["result",["intoiter"]],["intoiter",["socketaddr"]]]]],[11,"to_socket_addrs","","",531,[[["self"]],[["result",["intoiter"]],["intoiter",["socketaddr"]]]]],[11,"to_socket_addrs","","",531,[[["self"]],[["intoiter",["socketaddr"]],["result",["intoiter"]]]]],[11,"to_socket_addrs","","",509,[[["self"]],[["intoiter",["socketaddr"]],["result",["intoiter"]]]]],[11,"to_socket_addrs","","",510,[[["self"]],["result"]]],[11,"to_socket_addrs","","",508,[[["self"]],["result"]]],[11,"to_socket_addrs","std::string","",291,[[["self"]],[["intoiter",["socketaddr"]],["result",["intoiter"]]]]],[11,"report","std","",532,[[],["i32"]]],[11,"report","std::result","",93,[[],["i32"]]],[11,"report","std","",530,[[],["i32"]]],[11,"report","std::result","",93,[[],["i32"]]],[11,"report","std::process","",203,[[],["i32"]]],[11,"from_vec","std::ffi","",114,[[["vec",["u8"]],["u8"]],["osstring"]]],[11,"into_vec","","",114,[[],[["vec",["u8"]],["u8"]]]],[11,"from_bytes","","",115,[[],["osstr"]]],[11,"as_bytes","","",115,[[["self"]]]],[11,"as_raw_stat","std::fs","",118,[[["self"]],["stat"]]],[11,"st_dev","","",118,[[["self"]],["u64"]]],[11,"st_ino","","",118,[[["self"]],["u64"]]],[11,"st_mode","","",118,[[["self"]],["u32"]]],[11,"st_nlink","","",118,[[["self"]],["u64"]]],[11,"st_uid","","",118,[[["self"]],["u32"]]],[11,"st_gid","","",118,[[["self"]],["u32"]]],[11,"st_rdev","","",118,[[["self"]],["u64"]]],[11,"st_size","","",118,[[["self"]],["u64"]]],[11,"st_atime","","",118,[[["self"]],["i64"]]],[11,"st_atime_nsec","","",118,[[["self"]],["i64"]]],[11,"st_mtime","","",118,[[["self"]],["i64"]]],[11,"st_mtime_nsec","","",118,[[["self"]],["i64"]]],[11,"st_ctime","","",118,[[["self"]],["i64"]]],[11,"st_ctime_nsec","","",118,[[["self"]],["i64"]]],[11,"st_blksize","","",118,[[["self"]],["u64"]]],[11,"st_blocks","","",118,[[["self"]],["u64"]]],[11,"read_at","","",116,[[["u64"],["self"]],[["result",["usize"]],["usize"]]]],[11,"write_at","","",116,[[["self"],["u64"]],[["result",["usize"]],["usize"]]]],[11,"mode","","",119,[[["self"]],["u32"]]],[11,"set_mode","","",119,[[["self"],["u32"]]]],[11,"from_mode","","",119,[[["u32"]],["permissions"]]],[11,"mode","","",117,[[["self"],["u32"]],["openoptions"]]],[11,"custom_flags","","",117,[[["self"],["i32"]],["openoptions"]]],[11,"dev","","",118,[[["self"]],["u64"]]],[11,"ino","","",118,[[["self"]],["u64"]]],[11,"mode","","",118,[[["self"]],["u32"]]],[11,"nlink","","",118,[[["self"]],["u64"]]],[11,"uid","","",118,[[["self"]],["u32"]]],[11,"gid","","",118,[[["self"]],["u32"]]],[11,"rdev","","",118,[[["self"]],["u64"]]],[11,"size","","",118,[[["self"]],["u64"]]],[11,"atime","","",118,[[["self"]],["i64"]]],[11,"atime_nsec","","",118,[[["self"]],["i64"]]],[11,"mtime","","",118,[[["self"]],["i64"]]],[11,"mtime_nsec","","",118,[[["self"]],["i64"]]],[11,"ctime","","",118,[[["self"]],["i64"]]],[11,"ctime_nsec","","",118,[[["self"]],["i64"]]],[11,"blksize","","",118,[[["self"]],["u64"]]],[11,"blocks","","",118,[[["self"]],["u64"]]],[11,"is_block_device","","",120,[[["self"]],["bool"]]],[11,"is_char_device","","",120,[[["self"]],["bool"]]],[11,"is_fifo","","",120,[[["self"]],["bool"]]],[11,"is_socket","","",120,[[["self"]],["bool"]]],[11,"ino","","",121,[[["self"]],["u64"]]],[11,"mode","","",122,[[["self"],["u32"]],["dirbuilder"]]],[11,"as_raw_fd","","",116,[[["self"]],["rawfd"]]],[11,"as_raw_fd","std::io","",131,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",132,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",133,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",441,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",442,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",440,[[["self"]],["rawfd"]]],[11,"as_raw_fd","std::os::unix::net","",228,[[["self"]],["rawfd"]]],[11,"as_raw_fd","std::net","",151,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",152,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",153,[[["self"]],["rawfd"]]],[11,"as_raw_fd","std::os::unix::net","",229,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",230,[[["self"]],["rawfd"]]],[11,"as_raw_fd","std::process","",473,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",474,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",475,[[["self"]],["rawfd"]]],[11,"from_raw_fd","std::fs","",116,[[["rawfd"]],["file"]]],[11,"from_raw_fd","std::os::unix::net","",228,[[["rawfd"]],["unixstream"]]],[11,"from_raw_fd","std::net","",151,[[["rawfd"]],["tcpstream"]]],[11,"from_raw_fd","","",152,[[["rawfd"]],["tcplistener"]]],[11,"from_raw_fd","","",153,[[["rawfd"]],["udpsocket"]]],[11,"from_raw_fd","std::os::unix::net","",229,[[["rawfd"]],["unixlistener"]]],[11,"from_raw_fd","","",230,[[["rawfd"]],["unixdatagram"]]],[11,"from_raw_fd","std::process","",201,[[["rawfd"]],["stdio"]]],[11,"into_raw_fd","std::fs","",116,[[],["rawfd"]]],[11,"into_raw_fd","std::os::unix::net","",228,[[],["rawfd"]]],[11,"into_raw_fd","std::net","",151,[[],["rawfd"]]],[11,"into_raw_fd","","",152,[[],["rawfd"]]],[11,"into_raw_fd","","",153,[[],["rawfd"]]],[11,"into_raw_fd","std::os::unix::net","",229,[[],["rawfd"]]],[11,"into_raw_fd","","",230,[[],["rawfd"]]],[11,"into_raw_fd","std::process","",473,[[],["rawfd"]]],[11,"into_raw_fd","","",474,[[],["rawfd"]]],[11,"into_raw_fd","","",475,[[],["rawfd"]]],[11,"uid","","",200,[[["self"],["u32"]],["command"]]],[11,"gid","","",200,[[["self"],["u32"]],["command"]]],[11,"pre_exec","","",200,[[["self"],["f"]],["command"]]],[11,"exec","","",200,[[["self"]],["error"]]],[11,"arg0","","",200,[[["self"],["s"]],["command"]]],[11,"from_raw","","",202,[[["i32"]],["self"]]],[11,"signal","","",202,[[["self"]],[["option",["i32"]],["i32"]]]],[11,"as_pthread_t","std::thread","",98,[[["self"]],["rawpthread"]]],[11,"into_pthread_t","","",98,[[],["rawpthread"]]],[11,"from_wide","std::ffi","",114,[[],["osstring"]]],[11,"encode_wide","","",115,[[["self"]],["encodewide"]]],[11,"seek_read","std::fs","",116,[[["u64"],["self"]],[["result",["usize"]],["usize"]]]],[11,"seek_write","","",116,[[["self"],["u64"]],[["result",["usize"]],["usize"]]]],[11,"access_mode","","",117,[[["self"],["u32"]],["openoptions"]]],[11,"share_mode","","",117,[[["self"],["u32"]],["openoptions"]]],[11,"custom_flags","","",117,[[["self"],["u32"]],["openoptions"]]],[11,"attributes","","",117,[[["self"],["u32"]],["openoptions"]]],[11,"security_qos_flags","","",117,[[["self"],["u32"]],["openoptions"]]],[11,"file_attributes","","",118,[[["self"]],["u32"]]],[11,"creation_time","","",118,[[["self"]],["u64"]]],[11,"last_access_time","","",118,[[["self"]],["u64"]]],[11,"last_write_time","","",118,[[["self"]],["u64"]]],[11,"file_size","","",118,[[["self"]],["u64"]]],[11,"volume_serial_number","","",118,[[["self"]],[["u32"],["option",["u32"]]]]],[11,"number_of_links","","",118,[[["self"]],[["u32"],["option",["u32"]]]]],[11,"file_index","","",118,[[["self"]],[["u64"],["option",["u64"]]]]],[11,"is_symlink_dir","","",120,[[["self"]],["bool"]]],[11,"is_symlink_file","","",120,[[["self"]],["bool"]]],[11,"as_raw_handle","","",116,[[["self"]],["rawhandle"]]],[11,"as_raw_handle","std::io","",131,[[["self"]],["rawhandle"]]],[11,"as_raw_handle","","",132,[[["self"]],["rawhandle"]]],[11,"as_raw_handle","","",133,[[["self"]],["rawhandle"]]],[11,"as_raw_handle","","",441,[[["self"]],["rawhandle"]]],[11,"as_raw_handle","","",442,[[["self"]],["rawhandle"]]],[11,"as_raw_handle","","",440,[[["self"]],["rawhandle"]]],[11,"as_raw_handle","std::process","",197,[[["self"]],["rawhandle"]]],[11,"as_raw_handle","","",473,[[["self"]],["rawhandle"]]],[11,"as_raw_handle","","",474,[[["self"]],["rawhandle"]]],[11,"as_raw_handle","","",475,[[["self"]],["rawhandle"]]],[11,"as_raw_handle","std::thread","",98,[[["self"]],["rawhandle"]]],[11,"from_raw_handle","std::fs","",116,[[["rawhandle"]],["file"]]],[11,"from_raw_handle","std::process","",201,[[["rawhandle"]],["stdio"]]],[11,"into_raw_handle","std::fs","",116,[[],["rawhandle"]]],[11,"into_raw_handle","std::process","",197,[[],["rawhandle"]]],[11,"into_raw_handle","","",473,[[],["rawhandle"]]],[11,"into_raw_handle","","",474,[[],["rawhandle"]]],[11,"into_raw_handle","","",475,[[],["rawhandle"]]],[11,"into_raw_handle","std::thread","",98,[[],["rawhandle"]]],[11,"as_raw_socket","std::net","",151,[[["self"]],["rawsocket"]]],[11,"as_raw_socket","","",152,[[["self"]],["rawsocket"]]],[11,"as_raw_socket","","",153,[[["self"]],["rawsocket"]]],[11,"from_raw_socket","","",151,[[["rawsocket"]],["tcpstream"]]],[11,"from_raw_socket","","",152,[[["rawsocket"]],["tcplistener"]]],[11,"from_raw_socket","","",153,[[["rawsocket"]],["udpsocket"]]],[11,"into_raw_socket","","",151,[[],["rawsocket"]]],[11,"into_raw_socket","","",152,[[],["rawsocket"]]],[11,"into_raw_socket","","",153,[[],["rawsocket"]]],[11,"from_raw","std::process","",202,[[["u32"]],["self"]]],[11,"creation_flags","","",200,[[["self"],["u32"]],["command"]]],[11,"deref","std::ffi","",110,[[["self"]],["cstr"]]],[11,"deref","","",114,[[["self"]],["osstr"]]],[11,"deref","std::io","",138,[[["self"]]]],[11,"deref","","",139,[[["self"]]]],[11,"deref","std::panic","",189,[[["self"]],["t"]]],[11,"deref","std::path","",195,[[["self"]],["path"]]],[11,"deref","std::sync","",490,[[["self"]],["t"]]],[11,"deref","","",491,[[["self"]],["t"]]],[11,"deref","","",492,[[["self"]],["t"]]],[11,"deref_mut","std::io","",138,[[["self"]]]],[11,"deref_mut","std::panic","",189,[[["self"]],["t"]]],[11,"deref_mut","std::sync","",490,[[["self"]],["t"]]],[11,"deref_mut","","",492,[[["self"]],["t"]]],[11,"from","std::boxed","Converts a type of [`Error`] into a box of dyn [`Error`].",234,[[["e"]],[["error"],["box",["error"]]]]],[11,"from","","Converts a type of [`Error`] + [`Send`] + [`Sync`] into a…",234,[[["e"]],[["box",["error"]],["error"]]]],[11,"from","","Converts a [`String`] into a box of dyn [`Error`] +…",234,[[["string"]],[["error"],["box",["error"]]]]],[11,"from","","Converts a [`String`] into a box of dyn [`Error`].",234,[[["string"]],[["box",["error"]],["error"]]]],[11,"from","","Converts a [`str`] into a box of dyn [`Error`] + [`Send`]…",234,[[["str"]],[["box",["error"]],["error"]]]],[11,"from","","Converts a [`str`] into a box of dyn [`Error`].",234,[[["str"]],[["box",["error"]],["error"]]]],[11,"from","","Converts a [`Cow`] into a box of dyn [`Error`] + [`Send`]…",234,[[["str"],["cow",["str"]]],[["box",["error"]],["error"]]]],[11,"from","","Converts a [`Cow`] into a box of dyn [`Error`].",234,[[["str"],["cow",["str"]]],[["box",["error"]],["error"]]]],[11,"from","std::vec","Converts a [`CString`] into a [`Vec`]`<u8>`.",295,[[["cstring"]],[["vec",["u8"]],["u8"]]]],[11,"from","std::ffi","",110,[[["cow",["cstr"]],["cstr"]],["self"]]],[11,"from","std::boxed","",234,[[["cstr"]],[["box",["cstr"]],["cstr"]]]],[11,"from","std::ffi","Converts a [`Box`]`<CStr>` into a [`CString`] without…",110,[[["box",["cstr"]],["cstr"]],["cstring"]]],[11,"from","std::boxed","Converts a [`CString`] into a [`Box`]`<CStr>` without…",234,[[["cstring"]],[["box",["cstr"]],["cstr"]]]],[11,"from","std::borrow","",1,[[["cstring"]],[["cow",["cstr"]],["cstr"]]]],[11,"from","","",1,[[["cstr"]],[["cow",["cstr"]],["cstr"]]]],[11,"from","","",1,[[["cstring"]],[["cow",["cstr"]],["cstr"]]]],[11,"from","std::sync","Converts a [`CString`] into a [`Arc`]`<CStr>` without…",476,[[["cstring"]],[["arc",["cstr"]],["cstr"]]]],[11,"from","","",476,[[["cstr"]],[["arc",["cstr"]],["cstr"]]]],[11,"from","std::rc","Converts a [`CString`] into a [`Rc`]`<CStr>` without…",243,[[["cstring"]],[["cstr"],["rc",["cstr"]]]]],[11,"from","","",243,[[["cstr"]],[["cstr"],["rc",["cstr"]]]]],[11,"from","std::io","Converts a [`NulError`] into a [`io::Error`].",130,[[["nulerror"]],["error"]]],[11,"from","std::ffi","",110,[[["cstr"]],["cstring"]]],[11,"from","","Converts a [`String`] into a [`OsString`].",114,[[["string"]],["osstring"]]],[11,"from","","",114,[[["t"]],["osstring"]]],[11,"from","std::boxed","",234,[[["osstr"]],[["osstr"],["box",["osstr"]]]]],[11,"from","std::ffi","Converts a [`Box`]`<`[`OsStr`]`>` into a `OsString`…",114,[[["osstr"],["box",["osstr"]]],["osstring"]]],[11,"from","std::boxed","Converts a [`OsString`] into a [`Box`]`<OsStr>` without…",234,[[["osstring"]],[["osstr"],["box",["osstr"]]]]],[11,"from","std::sync","Converts a [`OsString`] into a [`Arc`]`<OsStr>` without…",476,[[["osstring"]],[["osstr"],["arc",["osstr"]]]]],[11,"from","","",476,[[["osstr"]],[["osstr"],["arc",["osstr"]]]]],[11,"from","std::rc","Converts a [`OsString`] into a [`Rc`]`<OsStr>` without…",243,[[["osstring"]],[["osstr"],["rc",["osstr"]]]]],[11,"from","","",243,[[["osstr"]],[["osstr"],["rc",["osstr"]]]]],[11,"from","std::borrow","",1,[[["osstring"]],[["cow",["osstr"]],["osstr"]]]],[11,"from","","",1,[[["osstr"]],[["cow",["osstr"]],["osstr"]]]],[11,"from","","",1,[[["osstring"]],[["cow",["osstr"]],["osstr"]]]],[11,"from","std::ffi","",114,[[["cow",["osstr"]],["osstr"]],["self"]]],[11,"from","std::io","",130,[[["intoinnererror"]],["error"]]],[11,"from","","Converts an [`ErrorKind`] into an [`Error`].",130,[[["errorkind"]],["error"]]],[11,"from","std::net","Converts a [`SocketAddrV4`] into a [`SocketAddr::V4`].",143,[[["socketaddrv4"]],["socketaddr"]]],[11,"from","","Converts a [`SocketAddrV6`] into a [`SocketAddr::V6`].",143,[[["socketaddrv6"]],["socketaddr"]]],[11,"from","","Converts a tuple struct (Into<[`IpAddr`]>, `u16`) into a…",143,[[],["socketaddr"]]],[11,"from","","",144,[[["ipv4addr"]],["ipaddr"]]],[11,"from","","",144,[[["ipv6addr"]],["ipaddr"]]],[11,"from","std","Converts an `Ipv4Addr` into a host byte order `u32`.",517,[[["ipv4addr"]],["u32"]]],[11,"from","std::net","Converts a host byte order `u32` into an `Ipv4Addr`.",149,[[["u32"]],["ipv4addr"]]],[11,"from","","Examples",149,[[],["ipv4addr"]]],[11,"from","","Creates an `IpAddr::V4` from a four element byte array.",144,[[],["ipaddr"]]],[11,"from","std","Convert an `Ipv6Addr` into a host byte order `u128`.",518,[[["ipv6addr"]],["u128"]]],[11,"from","std::net","Convert a host byte order `u128` into an `Ipv6Addr`.",150,[[["u128"]],["ipv6addr"]]],[11,"from","","",150,[[],["ipv6addr"]]],[11,"from","","",150,[[],["ipv6addr"]]],[11,"from","","Creates an `IpAddr::V6` from a sixteen element byte array.",144,[[],["ipaddr"]]],[11,"from","","Creates an `IpAddr::V6` from an eight element 16-bit array.",144,[[],["ipaddr"]]],[11,"from","std::boxed","",234,[[["path"]],[["box",["path"]],["path"]]]],[11,"from","std::path","Converts a `Box<Path>` into a `PathBuf`",195,[[["box",["path"]],["path"]],["pathbuf"]]],[11,"from","std::boxed","Converts a `PathBuf` into a `Box<Path>`",234,[[["pathbuf"]],[["box",["path"]],["path"]]]],[11,"from","std::path","",195,[[["t"]],["pathbuf"]]],[11,"from","","Converts a `OsString` into a `PathBuf`",195,[[["osstring"]],["pathbuf"]]],[11,"from","std::ffi","Converts a `PathBuf` into a `OsString`",114,[[["pathbuf"]],["osstring"]]],[11,"from","std::path","Converts a `String` into a `PathBuf`",195,[[["string"]],["pathbuf"]]],[11,"from","std::borrow","",1,[[["path"]],[["path"],["cow",["path"]]]]],[11,"from","","",1,[[["pathbuf"]],[["path"],["cow",["path"]]]]],[11,"from","","",1,[[["pathbuf"]],[["path"],["cow",["path"]]]]],[11,"from","std::path","",195,[[["path"],["cow",["path"]]],["self"]]],[11,"from","std::sync","Converts a `PathBuf` into an `Arc` by moving the `PathBuf`…",476,[[["pathbuf"]],[["path"],["arc",["path"]]]]],[11,"from","","Converts a `Path` into an `Arc` by copying the `Path` data…",476,[[["path"]],[["path"],["arc",["path"]]]]],[11,"from","std::rc","Converts a `PathBuf` into an `Rc` by moving the `PathBuf`…",243,[[["pathbuf"]],[["path"],["rc",["path"]]]]],[11,"from","","Converts a `Path` into an `Rc` by copying the `Path` data…",243,[[["path"]],[["path"],["rc",["path"]]]]],[11,"from","std::process","Converts a `ChildStdin` into a `Stdio`",201,[[["childstdin"]],["stdio"]]],[11,"from","","Converts a `ChildStdout` into a `Stdio`",201,[[["childstdout"]],["stdio"]]],[11,"from","","Converts a `ChildStderr` into a `Stdio`",201,[[["childstderr"]],["stdio"]]],[11,"from","","Converts a `File` into a `Stdio`",201,[[["file"]],["stdio"]]],[11,"from","std::sync::mpsc","",209,[[["senderror"]],["trysenderror"]]],[11,"from","","",207,[[["recverror"]],["tryrecverror"]]],[11,"from","","",208,[[["recverror"]],["recvtimeouterror"]]],[11,"from","std::sync","Creates a new mutex in an unlocked state ready for use.…",217,[[["t"]],["self"]]],[11,"from","","Creates a new instance of an `RwLock<T>` which is…",220,[[["t"]],["self"]]],[11,"from","","",205,[[["poisonerror"]],["trylockerror"]]],[11,"fmt","std::thread","",94,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",366,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",95,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",96,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::backtrace","",100,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::collections","",104,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::collections::hash_map","",406,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",409,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",410,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",413,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",414,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",415,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",416,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",417,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",418,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",407,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",408,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",412,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",411,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",420,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",419,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::collections","",105,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::collections::hash_set","",421,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",422,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",423,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",424,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",425,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",426,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",427,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::env","",428,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",429,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",108,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",430,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",431,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",432,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",433,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::error","",434,[[["formatter"],["self"]],["result"]]],[11,"fmt","std::ffi","",111,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",438,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",112,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::fs","",439,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",117,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",119,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",120,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",122,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::io","",125,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",127,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",129,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",123,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",441,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",442,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",440,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",443,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",444,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",445,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",140,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",124,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",142,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",446,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",447,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",448,[[["formatter"],["self"]],["result"]]],[11,"fmt","std::net","",143,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",148,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",144,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",145,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",449,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",450,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",153,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",146,[[["formatter"],["self"]],["result"]]],[11,"fmt","std::panic","",189,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::path","",190,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",192,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",191,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",193,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",194,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",470,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",195,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",471,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",196,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",472,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::process","",197,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",473,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",474,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",475,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Format the program and arguments of a Command for display.…",200,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",198,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",201,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",202,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",203,[[["formatter"],["self"]],["result"]]],[11,"fmt","std::sync::mpsc","",493,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",494,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",495,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",496,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",207,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",208,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",210,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",211,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",212,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",206,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",209,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::sync","",213,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",214,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",215,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",216,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",217,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",490,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",219,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",218,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",220,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",491,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",492,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::time","",223,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",221,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",222,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::sync","",226,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",205,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::os::unix::net","",227,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",228,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",229,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",466,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",230,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::alloc","",507,[[["formatter"],["self"]],["result"]]],[11,"fmt","std::thread","",366,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::backtrace","",101,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::env","",108,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",431,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::ffi","",111,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",438,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::io","",127,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::net","",143,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",148,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",449,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::path","",472,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",471,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::process","",202,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::sync::mpsc","",206,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",209,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",496,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",207,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",208,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::sync","",490,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",491,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",492,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::time","",223,[[["self"],["formatter"]],["result"]]],[11,"fmt","std::sync","",226,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",205,[[["self"],["formatter"]],["result"]]],[11,"sub","std::time","",221,[[["duration"]],["instant"]]],[11,"sub","","",221,[[["instant"]],["duration"]]],[11,"sub","","",222,[[["duration"]],["systemtime"]]],[11,"eq","std::thread","",366,[[["self"],["accesserror"]],["bool"]]],[11,"ne","","",366,[[["self"],["accesserror"]],["bool"]]],[11,"eq","","",96,[[["threadid"],["self"]],["bool"]]],[11,"ne","","",96,[[["threadid"],["self"]],["bool"]]],[11,"eq","std::backtrace","",100,[[["self"],["backtracestatus"]],["bool"]]],[11,"eq","std::collections","",104,[[["hashmap"],["self"]],["bool"]]],[11,"eq","","",105,[[["hashset"],["self"]],["bool"]]],[11,"eq","std::env","",108,[[["self"],["varerror"]],["bool"]]],[11,"ne","","",108,[[["self"],["varerror"]],["bool"]]],[11,"eq","std::ffi","",110,[[["self"],["cstring"]],["bool"]]],[11,"ne","","",110,[[["self"],["cstring"]],["bool"]]],[11,"eq","","",111,[[["self"],["nulerror"]],["bool"]]],[11,"ne","","",111,[[["self"],["nulerror"]],["bool"]]],[11,"eq","","",438,[[["frombyteswithnulerror"],["self"]],["bool"]]],[11,"ne","","",438,[[["frombyteswithnulerror"],["self"]],["bool"]]],[11,"eq","","",112,[[["intostringerror"],["self"]],["bool"]]],[11,"ne","","",112,[[["intostringerror"],["self"]],["bool"]]],[11,"eq","","",113,[[["cstr"],["self"]],["bool"]]],[11,"eq","","",114,[[["self"],["osstring"]],["bool"]]],[11,"eq","","",114,[[["str"],["self"]],["bool"]]],[11,"eq","std","",509,[[["self"],["osstring"]],["bool"]]],[11,"eq","std::ffi","",114,[[["self"],["str"]],["bool"]]],[11,"eq","std","",509,[[["self"],["osstring"]],["bool"]]],[11,"eq","std::ffi","",115,[[["osstr"],["self"]],["bool"]]],[11,"eq","","",115,[[["str"],["self"]],["bool"]]],[11,"eq","std","",509,[[["osstr"],["self"]],["bool"]]],[11,"eq","std::ffi","",114,[[["osstr"],["self"]],["bool"]]],[11,"eq","","",115,[[["self"],["osstring"]],["bool"]]],[11,"eq","","",114,[[["osstr"],["self"]],["bool"]]],[11,"eq","std::borrow","",1,[[["osstr"],["self"]],["bool"]]],[11,"eq","std::ffi","",115,[[["cow"],["self"]],["bool"]]],[11,"eq","std::borrow","",1,[[["self"],["osstr"]],["bool"]]],[11,"eq","","",1,[[["self"],["osstring"]],["bool"]]],[11,"eq","std::ffi","",114,[[["cow"],["self"]],["bool"]]],[11,"eq","std::fs","",119,[[["permissions"],["self"]],["bool"]]],[11,"ne","","",119,[[["permissions"],["self"]],["bool"]]],[11,"eq","","",120,[[["self"],["filetype"]],["bool"]]],[11,"ne","","",120,[[["self"],["filetype"]],["bool"]]],[11,"eq","std::io","",129,[[["self"],["cursor"]],["bool"]]],[11,"ne","","",129,[[["self"],["cursor"]],["bool"]]],[11,"eq","","",123,[[["errorkind"],["self"]],["bool"]]],[11,"eq","","",124,[[["seekfrom"],["self"]],["bool"]]],[11,"ne","","",124,[[["seekfrom"],["self"]],["bool"]]],[11,"eq","std::net","",143,[[["self"],["socketaddr"]],["bool"]]],[11,"ne","","",143,[[["self"],["socketaddr"]],["bool"]]],[11,"eq","","",147,[[["socketaddrv4"],["self"]],["bool"]]],[11,"eq","","",148,[[["self"],["socketaddrv6"]],["bool"]]],[11,"eq","","",144,[[["self"],["ipaddr"]],["bool"]]],[11,"ne","","",144,[[["self"],["ipaddr"]],["bool"]]],[11,"eq","","",145,[[["ipv6multicastscope"],["self"]],["bool"]]],[11,"eq","","",149,[[["ipv4addr"],["self"]],["bool"]]],[11,"eq","","",144,[[["ipv4addr"],["self"]],["bool"]]],[11,"eq","","",149,[[["self"],["ipaddr"]],["bool"]]],[11,"eq","","",150,[[["self"],["ipv6addr"]],["bool"]]],[11,"eq","","",150,[[["self"],["ipaddr"]],["bool"]]],[11,"eq","","",144,[[["self"],["ipv6addr"]],["bool"]]],[11,"eq","","",449,[[["self"],["addrparseerror"]],["bool"]]],[11,"ne","","",449,[[["self"],["addrparseerror"]],["bool"]]],[11,"eq","","",146,[[["shutdown"],["self"]],["bool"]]],[11,"eq","std::path","",190,[[["self"],["prefix"]],["bool"]]],[11,"ne","","",190,[[["self"],["prefix"]],["bool"]]],[11,"eq","","",192,[[["prefixcomponent"],["self"]],["bool"]]],[11,"eq","","",191,[[["component"],["self"]],["bool"]]],[11,"ne","","",191,[[["component"],["self"]],["bool"]]],[11,"eq","","",193,[[["components"],["self"]],["bool"]]],[11,"eq","","",195,[[["pathbuf"],["self"]],["bool"]]],[11,"eq","","",471,[[["self"],["stripprefixerror"]],["bool"]]],[11,"ne","","",471,[[["self"],["stripprefixerror"]],["bool"]]],[11,"eq","","",196,[[["self"],["path"]],["bool"]]],[11,"eq","","",195,[[["self"],["path"]],["bool"]]],[11,"eq","","",196,[[["pathbuf"],["self"]],["bool"]]],[11,"eq","","",195,[[["self"],["path"]],["bool"]]],[11,"eq","std::borrow","",1,[[["self"],["path"]],["bool"]]],[11,"eq","std::path","",196,[[["self"],["cow"]],["bool"]]],[11,"eq","std::borrow","",1,[[["path"],["self"]],["bool"]]],[11,"eq","","",1,[[["pathbuf"],["self"]],["bool"]]],[11,"eq","std::path","",195,[[["self"],["cow"]],["bool"]]],[11,"eq","","",195,[[["osstr"],["self"]],["bool"]]],[11,"eq","std::ffi","",115,[[["pathbuf"],["self"]],["bool"]]],[11,"eq","std::path","",195,[[["osstr"],["self"]],["bool"]]],[11,"eq","","",195,[[["cow"],["self"]],["bool"]]],[11,"eq","std::borrow","",1,[[["pathbuf"],["self"]],["bool"]]],[11,"eq","std::path","",195,[[["self"],["osstring"]],["bool"]]],[11,"eq","std::ffi","",114,[[["pathbuf"],["self"]],["bool"]]],[11,"eq","std::path","",196,[[["osstr"],["self"]],["bool"]]],[11,"eq","std::ffi","",115,[[["self"],["path"]],["bool"]]],[11,"eq","std::path","",196,[[["osstr"],["self"]],["bool"]]],[11,"eq","","",196,[[["cow"],["self"]],["bool"]]],[11,"eq","std::borrow","",1,[[["self"],["path"]],["bool"]]],[11,"eq","std::path","",196,[[["self"],["osstring"]],["bool"]]],[11,"eq","std::ffi","",114,[[["self"],["path"]],["bool"]]],[11,"eq","","",115,[[["self"],["path"]],["bool"]]],[11,"eq","std::borrow","",1,[[["self"],["path"]],["bool"]]],[11,"eq","std::ffi","",114,[[["self"],["path"]],["bool"]]],[11,"eq","std::borrow","",1,[[["osstr"],["self"]],["bool"]]],[11,"eq","std::ffi","",115,[[["self"],["cow"]],["bool"]]],[11,"eq","std::borrow","",1,[[["self"],["osstr"]],["bool"]]],[11,"eq","","",1,[[["self"],["osstring"]],["bool"]]],[11,"eq","std::ffi","",114,[[["self"],["cow"]],["bool"]]],[11,"eq","std::process","",198,[[["self"],["output"]],["bool"]]],[11,"ne","","",198,[[["self"],["output"]],["bool"]]],[11,"eq","","",202,[[["self"],["exitstatus"]],["bool"]]],[11,"ne","","",202,[[["self"],["exitstatus"]],["bool"]]],[11,"eq","std::sync::mpsc","",206,[[["senderror"],["self"]],["bool"]]],[11,"ne","","",206,[[["senderror"],["self"]],["bool"]]],[11,"eq","","",496,[[["recverror"],["self"]],["bool"]]],[11,"eq","","",207,[[["tryrecverror"],["self"]],["bool"]]],[11,"eq","","",208,[[["recvtimeouterror"],["self"]],["bool"]]],[11,"eq","","",209,[[["trysenderror"],["self"]],["bool"]]],[11,"ne","","",209,[[["trysenderror"],["self"]],["bool"]]],[11,"eq","std::sync","",215,[[["waittimeoutresult"],["self"]],["bool"]]],[11,"ne","","",215,[[["waittimeoutresult"],["self"]],["bool"]]],[11,"eq","std::time","",221,[[["instant"],["self"]],["bool"]]],[11,"ne","","",221,[[["instant"],["self"]],["bool"]]],[11,"eq","","",222,[[["systemtime"],["self"]],["bool"]]],[11,"ne","","",222,[[["systemtime"],["self"]],["bool"]]],[11,"cmp","std::ffi","",110,[[["self"],["cstring"]],["ordering"]]],[11,"cmp","","",113,[[["cstr"],["self"]],["ordering"]]],[11,"cmp","","",114,[[["self"],["osstring"]],["ordering"]]],[11,"cmp","","",115,[[["osstr"],["self"]],["ordering"]]],[11,"cmp","std::io","",123,[[["errorkind"],["self"]],["ordering"]]],[11,"cmp","std::net","",144,[[["self"],["ipaddr"]],["ordering"]]],[11,"cmp","","",149,[[["ipv4addr"],["self"]],["ordering"]]],[11,"cmp","","",150,[[["self"],["ipv6addr"]],["ordering"]]],[11,"cmp","std::path","",190,[[["self"],["prefix"]],["ordering"]]],[11,"cmp","","",192,[[["self"]],["ordering"]]],[11,"cmp","","",191,[[["component"],["self"]],["ordering"]]],[11,"cmp","","",193,[[["self"]],["ordering"]]],[11,"cmp","","",195,[[["pathbuf"],["self"]],["ordering"]]],[11,"cmp","","",196,[[["self"],["path"]],["ordering"]]],[11,"cmp","std::time","",221,[[["instant"],["self"]],["ordering"]]],[11,"cmp","","",222,[[["systemtime"],["self"]],["ordering"]]],[11,"partial_cmp","std::ffi","",110,[[["self"],["cstring"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",110,[[["self"],["cstring"]],["bool"]]],[11,"le","","",110,[[["self"],["cstring"]],["bool"]]],[11,"gt","","",110,[[["self"],["cstring"]],["bool"]]],[11,"ge","","",110,[[["self"],["cstring"]],["bool"]]],[11,"partial_cmp","","",113,[[["cstr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",114,[[["self"],["osstring"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",114,[[["self"],["osstring"]],["bool"]]],[11,"le","","",114,[[["self"],["osstring"]],["bool"]]],[11,"gt","","",114,[[["self"],["osstring"]],["bool"]]],[11,"ge","","",114,[[["self"],["osstring"]],["bool"]]],[11,"partial_cmp","","",114,[[["str"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",115,[[["osstr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",115,[[["osstr"],["self"]],["bool"]]],[11,"le","","",115,[[["osstr"],["self"]],["bool"]]],[11,"gt","","",115,[[["osstr"],["self"]],["bool"]]],[11,"ge","","",115,[[["osstr"],["self"]],["bool"]]],[11,"partial_cmp","","",115,[[["str"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",114,[[["osstr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",115,[[["self"],["osstring"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",114,[[["osstr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::borrow","",1,[[["osstr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::ffi","",115,[[["cow"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::borrow","",1,[[["self"],["osstr"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",1,[[["self"],["osstring"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::ffi","",114,[[["cow"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::io","",123,[[["errorkind"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","std::net","",144,[[["self"],["ipaddr"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",144,[[["self"],["ipaddr"]],["bool"]]],[11,"le","","",144,[[["self"],["ipaddr"]],["bool"]]],[11,"gt","","",144,[[["self"],["ipaddr"]],["bool"]]],[11,"ge","","",144,[[["self"],["ipaddr"]],["bool"]]],[11,"partial_cmp","","",149,[[["ipv4addr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",144,[[["ipv4addr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",149,[[["self"],["ipaddr"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",150,[[["self"],["ipv6addr"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",144,[[["self"],["ipv6addr"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",150,[[["self"],["ipaddr"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::path","",190,[[["self"],["prefix"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",190,[[["self"],["prefix"]],["bool"]]],[11,"le","","",190,[[["self"],["prefix"]],["bool"]]],[11,"gt","","",190,[[["self"],["prefix"]],["bool"]]],[11,"ge","","",190,[[["self"],["prefix"]],["bool"]]],[11,"partial_cmp","","",192,[[["prefixcomponent"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",191,[[["component"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",191,[[["component"],["self"]],["bool"]]],[11,"le","","",191,[[["component"],["self"]],["bool"]]],[11,"gt","","",191,[[["component"],["self"]],["bool"]]],[11,"ge","","",191,[[["component"],["self"]],["bool"]]],[11,"partial_cmp","","",193,[[["components"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",195,[[["pathbuf"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",196,[[["self"],["path"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",195,[[["self"],["path"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",196,[[["pathbuf"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",195,[[["self"],["path"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::borrow","",1,[[["self"],["path"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::path","",196,[[["self"],["cow"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::borrow","",1,[[["path"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",1,[[["pathbuf"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::path","",195,[[["self"],["cow"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",195,[[["osstr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::ffi","",115,[[["pathbuf"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::path","",195,[[["osstr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",195,[[["cow"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::borrow","",1,[[["pathbuf"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::path","",195,[[["self"],["osstring"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::ffi","",114,[[["pathbuf"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::path","",196,[[["osstr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::ffi","",115,[[["self"],["path"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::path","",196,[[["osstr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",196,[[["cow"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::borrow","",1,[[["self"],["path"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::path","",196,[[["self"],["osstring"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::ffi","",114,[[["self"],["path"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",115,[[["self"],["path"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::borrow","",1,[[["self"],["path"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::ffi","",114,[[["self"],["path"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::borrow","",1,[[["osstr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::ffi","",115,[[["self"],["cow"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::borrow","",1,[[["self"],["osstr"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",1,[[["self"],["osstring"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::ffi","",114,[[["self"],["cow"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","std::time","",221,[[["instant"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",221,[[["instant"],["self"]],["bool"]]],[11,"le","","",221,[[["instant"],["self"]],["bool"]]],[11,"gt","","",221,[[["instant"],["self"]],["bool"]]],[11,"ge","","",221,[[["instant"],["self"]],["bool"]]],[11,"partial_cmp","","",222,[[["systemtime"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",222,[[["systemtime"],["self"]],["bool"]]],[11,"le","","",222,[[["systemtime"],["self"]],["bool"]]],[11,"gt","","",222,[[["systemtime"],["self"]],["bool"]]],[11,"ge","","",222,[[["systemtime"],["self"]],["bool"]]],[11,"add","","Panics",221,[[["duration"]],["instant"]]],[11,"add","","Panics",222,[[["duration"]],["systemtime"]]],[11,"add_assign","","",221,[[["self"],["duration"]]]],[11,"add_assign","","",222,[[["self"],["duration"]]]],[11,"sub_assign","","",221,[[["self"],["duration"]]]],[11,"sub_assign","","",222,[[["self"],["duration"]]]],[11,"drop","std::ffi","",110,[[["self"]]]],[11,"drop","std::io","",126,[[["self"]]]],[11,"drop","std::sync::mpsc","",210,[[["self"]]]],[11,"drop","","",211,[[["self"]]]],[11,"drop","","",212,[[["self"]]]],[11,"drop","std::sync","",216,[[["self"]]]],[11,"drop","","",217,[[["self"]]]],[11,"drop","","",490,[[["self"]]]],[11,"drop","","",220,[[["self"]]]],[11,"drop","","",491,[[["self"]]]],[11,"drop","","",492,[[["self"]]]],[11,"call_once","std::panic","",189,[[],["r"]]],[11,"index","std::collections","Returns a reference to the value corresponding to the…",104,[[["self"],["q"]],["v"]]],[11,"index","std::ffi","",110,[[["self"],["rangefull"]],["cstr"]]],[11,"index","","",114,[[["self"],["rangefull"]],["osstr"]]],[11,"hash","std::thread","",96,[[["self"],["__h"]]]],[11,"hash","std::ffi","",110,[[["self"],["__h"]]]],[11,"hash","","",113,[[["self"],["__h"]]]],[11,"hash","","",114,[[["self"],["h"]]]],[11,"hash","","",115,[[["self"],["h"]]]],[11,"hash","std::fs","",120,[[["self"],["__h"]]]],[11,"hash","std::io","",123,[[["self"],["__h"]]]],[11,"hash","std::net","",143,[[["self"],["__h"]]]],[11,"hash","","",147,[[["self"],["h"]]]],[11,"hash","","",148,[[["self"],["h"]]]],[11,"hash","","",144,[[["self"],["__h"]]]],[11,"hash","","",145,[[["self"],["__h"]]]],[11,"hash","","",149,[[["self"],["h"]]]],[11,"hash","","",150,[[["self"],["h"]]]],[11,"hash","std::path","",190,[[["self"],["__h"]]]],[11,"hash","","",192,[[["self"],["h"]]]],[11,"hash","","",191,[[["self"],["__h"]]]],[11,"hash","","",195,[[["self"],["h"]]]],[11,"hash","","",196,[[["self"],["h"]]]],[11,"hash","std::time","",221,[[["self"],["__h"]]]],[11,"hash","","",222,[[["self"],["__h"]]]],[11,"write","std::collections::hash_map","",420,[[["self"]]]],[11,"finish","","",420,[[["self"]],["u64"]]],[11,"next","","",406,[[["self"]],["option"]]],[11,"size_hint","","",406,[[["self"]]]],[11,"next","","",407,[[["self"]],["option"]]],[11,"size_hint","","",407,[[["self"]]]],[11,"next","","",408,[[["self"]],["option"]]],[11,"size_hint","","",408,[[["self"]]]],[11,"next","","",409,[[["self"]],[["k"],["option"]]]],[11,"size_hint","","",409,[[["self"]]]],[11,"next","","",410,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",410,[[["self"]]]],[11,"next","","",412,[[["self"]],[["v"],["option"]]]],[11,"size_hint","","",412,[[["self"]]]],[11,"next","","",411,[[["self"]],["option"]]],[11,"size_hint","","",411,[[["self"]]]],[11,"next","std::collections::hash_set","",421,[[["self"]],[["k"],["option"]]]],[11,"size_hint","","",421,[[["self"]]]],[11,"next","","",422,[[["self"]],["option"]]],[11,"size_hint","","",422,[[["self"]]]],[11,"next","","",423,[[["self"]],["option"]]],[11,"size_hint","","",423,[[["self"]]]],[11,"next","","",424,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",424,[[["self"]]]],[11,"next","","",425,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",425,[[["self"]]]],[11,"next","","",426,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",426,[[["self"]]]],[11,"next","","",427,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",427,[[["self"]]]],[11,"next","std::env","",428,[[["self"]],["option"]]],[11,"size_hint","","",428,[[["self"]]]],[11,"next","","",429,[[["self"]],["option"]]],[11,"size_hint","","",429,[[["self"]]]],[11,"next","","",430,[[["self"]],[["option",["pathbuf"]],["pathbuf"]]]],[11,"size_hint","","",430,[[["self"]]]],[11,"next","","",432,[[["self"]],[["option",["string"]],["string"]]]],[11,"size_hint","","",432,[[["self"]]]],[11,"next","","",433,[[["self"]],[["option",["osstring"]],["osstring"]]]],[11,"size_hint","","",433,[[["self"]]]],[11,"next","std::error","",434,[[["self"]],["option"]]],[11,"next","std::fs","",439,[[["self"]],[["option",["result"]],["result",["direntry"]]]]],[11,"next","std::io","",446,[[["self"]],[["option",["result"]],["result",["u8"]]]]],[11,"next","","",447,[[["self"]],[["result",["vec"]],["option",["result"]]]]],[11,"next","","",448,[[["self"]],[["option",["result"]],["result",["string"]]]]],[11,"next","std::net","",450,[[["self"]],[["result",["tcpstream"]],["option",["result"]]]]],[11,"next","std::path","",194,[[["self"]],[["osstr"],["option",["osstr"]]]]],[11,"next","","",193,[[["self"]],[["option",["component"]],["component"]]]],[11,"next","","",470,[[["self"]],["option"]]],[11,"next","std::sync::mpsc","",493,[[["self"]],["option"]]],[11,"next","","",494,[[["self"]],["option"]]],[11,"next","","",495,[[["self"]],["option"]]],[11,"next","std::os::windows::ffi","",467,[[["self"]],[["u16"],["option",["u16"]]]]],[11,"size_hint","","",467,[[["self"]]]],[11,"next","std::os::unix::net","",466,[[["self"]],[["result",["unixstream"]],["option",["result"]]]]],[11,"size_hint","","",466,[[["self"]]]],[11,"next_back","std::env","",432,[[["self"]],[["option",["string"]],["string"]]]],[11,"next_back","","",433,[[["self"]],[["option",["osstring"]],["osstring"]]]],[11,"next_back","std::path","",194,[[["self"]],[["osstr"],["option",["osstr"]]]]],[11,"next_back","","",193,[[["self"]],[["option",["component"]],["component"]]]],[11,"extend","std::collections","",104,[[["self"],["intoiterator"]]]],[11,"extend","","",104,[[["self"],["intoiterator"]]]],[11,"extend","","",105,[[["self"],["intoiterator"]]]],[11,"extend","","",105,[[["self"],["intoiterator"]]]],[11,"extend","std::path","",195,[[["self"],["intoiterator"]]]],[11,"from_iter","std::collections","",104,[[["intoiterator"]],["hashmap"]]],[11,"from_iter","","",105,[[["intoiterator"]],["hashset"]]],[11,"from_iter","std::path","",195,[[["intoiterator"]],["pathbuf"]]],[11,"into_iter","std::collections","Creates a consuming iterator, that is, one that moves each…",104,[[],["intoiter"]]],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each…",105,[[],["intoiter"]]],[11,"into_iter","std::sync::mpsc","",212,[[],["intoiter"]]],[11,"len","std::collections::hash_map","",406,[[["self"]],["usize"]]],[11,"len","","",407,[[["self"]],["usize"]]],[11,"len","","",408,[[["self"]],["usize"]]],[11,"len","","",409,[[["self"]],["usize"]]],[11,"len","","",410,[[["self"]],["usize"]]],[11,"len","","",412,[[["self"]],["usize"]]],[11,"len","","",411,[[["self"]],["usize"]]],[11,"len","std::collections::hash_set","",421,[[["self"]],["usize"]]],[11,"len","","",422,[[["self"]],["usize"]]],[11,"len","","",423,[[["self"]],["usize"]]],[11,"len","std::env","",432,[[["self"]],["usize"]]],[11,"is_empty","","",432,[[["self"]],["bool"]]],[11,"len","","",433,[[["self"]],["usize"]]],[11,"is_empty","","",433,[[["self"]],["bool"]]],[11,"from_str","std::net","",144,[[["str"]],[["addrparseerror"],["result",["ipaddr","addrparseerror"]],["ipaddr"]]]],[11,"from_str","","",149,[[["str"]],[["result",["ipv4addr","addrparseerror"]],["addrparseerror"],["ipv4addr"]]]],[11,"from_str","","",150,[[["str"]],[["result",["ipv6addr","addrparseerror"]],["ipv6addr"],["addrparseerror"]]]],[11,"from_str","","",147,[[["str"]],[["socketaddrv4"],["addrparseerror"],["result",["socketaddrv4","addrparseerror"]]]]],[11,"from_str","","",148,[[["str"]],[["socketaddrv6"],["result",["socketaddrv6","addrparseerror"]],["addrparseerror"]]]],[11,"from_str","","",143,[[["str"]],[["addrparseerror"],["socketaddr"],["result",["socketaddr","addrparseerror"]]]]],[11,"from_str","std::path","",195,[[["str"]],["result"]]],[11,"as_ref","std::ffi","",113,[[["self"]],["cstr"]]],[11,"as_ref","","",110,[[["self"]],["cstr"]]],[11,"as_ref","","",115,[[["self"]],["osstr"]]],[11,"as_ref","","",114,[[["self"]],["osstr"]]],[11,"as_ref","std","",509,[[["self"]],["osstr"]]],[11,"as_ref","std::string","",291,[[["self"]],["osstr"]]],[11,"as_ref","std::path","",191,[[["self"]],["osstr"]]],[11,"as_ref","","",191,[[["self"]],["path"]]],[11,"as_ref","","",193,[[["self"]],["path"]]],[11,"as_ref","","",193,[[["self"]],["osstr"]]],[11,"as_ref","","",194,[[["self"]],["path"]]],[11,"as_ref","","",194,[[["self"]],["osstr"]]],[11,"as_ref","","",195,[[["self"]],["osstr"]]],[11,"as_ref","","",196,[[["self"]],["osstr"]]],[11,"as_ref","","",196,[[["self"]],["path"]]],[11,"as_ref","std::ffi","",115,[[["self"]],["path"]]],[11,"as_ref","std::borrow","",1,[[["self"]],["path"]]],[11,"as_ref","std::ffi","",114,[[["self"]],["path"]]],[11,"as_ref","std","",509,[[["self"]],["path"]]],[11,"as_ref","std::string","",291,[[["self"]],["path"]]],[11,"as_ref","std::path","",195,[[["self"]],["path"]]],[11,"build_hasher","std::collections::hash_map","",419,[[["self"]],["defaulthasher"]]],[11,"clone","std::thread","",366,[[["self"]],["accesserror"]]],[11,"clone","","",96,[[["self"]],["threadid"]]],[11,"clone","","",97,[[["self"]],["thread"]]],[11,"clone","std::collections","",104,[[["self"]],["hashmap"]]],[11,"clone","std::collections::hash_map","",406,[[["self"]],["self"]]],[11,"clone","","",409,[[["self"]],["self"]]],[11,"clone","","",410,[[["self"]],["self"]]],[11,"clone","","",419,[[["self"]],["randomstate"]]],[11,"clone","","",420,[[["self"]],["defaulthasher"]]],[11,"clone","std::collections","",105,[[["self"]],["hashset"]]],[11,"clone","std::collections::hash_set","",421,[[["self"]],["self"]]],[11,"clone","","",424,[[["self"]],["self"]]],[11,"clone","","",425,[[["self"]],["self"]]],[11,"clone","","",426,[[["self"]],["self"]]],[11,"clone","","",427,[[["self"]],["self"]]],[11,"clone","std::env","",108,[[["self"]],["varerror"]]],[11,"clone","std::error","",434,[[["self"]],["chain"]]],[11,"clone","std::ffi","",110,[[["self"]],["cstring"]]],[11,"clone","","",111,[[["self"]],["nulerror"]]],[11,"clone","","",438,[[["self"]],["frombyteswithnulerror"]]],[11,"clone","","",112,[[["self"]],["intostringerror"]]],[11,"clone","std::boxed","",234,[[["self"]],["self"]]],[11,"clone","std::ffi","",114,[[["self"]],["osstring"]]],[11,"clone","std::boxed","",234,[[["self"]],["self"]]],[11,"clone","std::fs","",118,[[["self"]],["metadata"]]],[11,"clone","","",117,[[["self"]],["openoptions"]]],[11,"clone","","",119,[[["self"]],["permissions"]]],[11,"clone","","",120,[[["self"]],["filetype"]]],[11,"clone","std::io","",129,[[["self"]],["cursor"]]],[11,"clone","","",123,[[["self"]],["errorkind"]]],[11,"clone","","",124,[[["self"]],["seekfrom"]]],[11,"clone","std::net","",143,[[["self"]],["socketaddr"]]],[11,"clone","","",147,[[["self"]],["socketaddrv4"]]],[11,"clone","","",148,[[["self"]],["socketaddrv6"]]],[11,"clone","","",144,[[["self"]],["ipaddr"]]],[11,"clone","","",145,[[["self"]],["ipv6multicastscope"]]],[11,"clone","","",149,[[["self"]],["ipv4addr"]]],[11,"clone","","",150,[[["self"]],["ipv6addr"]]],[11,"clone","","",449,[[["self"]],["addrparseerror"]]],[11,"clone","","",146,[[["self"]],["shutdown"]]],[11,"clone","std::os::linux::raw","",188,[[["self"]],["stat"]]],[11,"clone","std::path","",190,[[["self"]],["prefix"]]],[11,"clone","","",192,[[["self"]],["prefixcomponent"]]],[11,"clone","","",191,[[["self"]],["component"]]],[11,"clone","","",193,[[["self"]],["components"]]],[11,"clone","","",194,[[["self"]],["iter"]]],[11,"clone","","",470,[[["self"]],["ancestors"]]],[11,"clone","","",195,[[["self"]],["pathbuf"]]],[11,"clone","std::boxed","",234,[[["self"]],["self"]]],[11,"clone","std::path","",471,[[["self"]],["stripprefixerror"]]],[11,"clone","std::process","",198,[[["self"]],["output"]]],[11,"clone","","",202,[[["self"]],["exitstatus"]]],[11,"clone","","",203,[[["self"]],["exitcode"]]],[11,"clone","std::sync::mpsc","",206,[[["self"]],["senderror"]]],[11,"clone","","",496,[[["self"]],["recverror"]]],[11,"clone","","",207,[[["self"]],["tryrecverror"]]],[11,"clone","","",208,[[["self"]],["recvtimeouterror"]]],[11,"clone","","",209,[[["self"]],["trysenderror"]]],[11,"clone","","",210,[[["self"]],["sender"]]],[11,"clone","","",211,[[["self"]],["syncsender"]]],[11,"clone","std::sync","",215,[[["self"]],["waittimeoutresult"]]],[11,"clone","std::time","",221,[[["self"]],["instant"]]],[11,"clone","","",222,[[["self"]],["systemtime"]]],[11,"clone","","",223,[[["self"]],["systemtimeerror"]]],[11,"clone","std::os::windows::ffi","",467,[[["self"]],["encodewide"]]],[11,"clone","std::os::unix::net","",227,[[["self"]],["socketaddr"]]],[11,"clone","std::alloc","",507,[[["self"]],["system"]]],[11,"default","std::collections","Creates an empty `HashMap<K, V, S>`, with the `Default`…",104,[[],["hashmap"]]],[11,"default","std::collections::hash_map","Creates a new `DefaultHasher` using `new`. See its…",420,[[],["defaulthasher"]]],[11,"default","","Constructs a new `RandomState`.",419,[[],["randomstate"]]],[11,"default","std::collections","Creates an empty `HashSet<T, S>` with the `Default` value…",105,[[],["hashset"]]],[11,"default","std::ffi","Creates an empty `CString`.",110,[[],["cstring"]]],[11,"default","std::boxed","",234,[[],[["box",["cstr"]],["cstr"]]]],[11,"default","std::ffi","Constructs an empty `OsString`.",114,[[],["osstring"]]],[11,"default","std::boxed","",234,[[],[["osstr"],["box",["osstr"]]]]],[11,"default","std::io","",129,[[],["cursor"]]],[11,"default","std::path","",195,[[],["self"]]],[11,"default","std::sync","Creates a `Condvar` which is ready to be waited on and…",216,[[],["condvar"]]],[11,"default","","Creates a `Mutex<T>`, with the `Default` value for T.",217,[[],["mutex"]]],[11,"default","","Creates a new `RwLock<T>`, with the `Default` value for T.",220,[[],["rwlock"]]],[11,"default","std::alloc","",507,[[],["system"]]],[11,"borrow","std::ffi","",110,[[["self"]],["cstr"]]],[11,"borrow","","",114,[[["self"]],["osstr"]]],[11,"borrow","std::path","",195,[[["self"]],["path"]]],[11,"poll","std::panic","",189,[[["context"],["self"],["pin"]],["poll"]]],[11,"alloc","std::alloc","",507,[[["self"],["layout"]]]],[11,"alloc_zeroed","","",507,[[["self"],["layout"]]]],[11,"dealloc","","",507,[[["self"],["layout"]]]],[11,"realloc","","",507,[[["usize"],["layout"],["self"]]]],[11,"alloc","","",507,[[["self"],["layout"]],[["nonnull",["u8"]],["allocerr"],["result",["nonnull","allocerr"]]]]],[11,"alloc_zeroed","","",507,[[["self"],["layout"]],[["nonnull",["u8"]],["allocerr"],["result",["nonnull","allocerr"]]]]],[11,"dealloc","","",507,[[["layout"],["nonnull",["u8"]],["self"],["u8"]]]],[11,"realloc","","",507,[[["usize"],["layout"],["nonnull",["u8"]],["self"],["u8"]],[["nonnull",["u8"]],["allocerr"],["result",["nonnull","allocerr"]]]]],[11,"to_owned","std::ffi","",113,[[["self"]],["cstring"]]],[11,"to_owned","","",115,[[["self"]],["osstring"]]],[11,"clone_into","","",115,[[["osstring"],["self"]]]],[11,"to_owned","std::path","",196,[[["self"]],["pathbuf"]]],[11,"clone_into","","",196,[[["self"],["pathbuf"]]]],[11,"is_borrowed","std::borrow","Returns true if the data is borrowed, i.e. if `to_mut`…",1,[[["self"]],["bool"]]],[11,"is_owned","","Returns true if the data is owned, i.e. if `to_mut` would…",1,[[["self"]],["bool"]]],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",1,[[["self"]]]],[11,"into_owned","","Extracts the owned data.",1,[[]]],[11,"new","std::boxed","Allocates memory on the heap and then places `x` into it.",234,[[["t"]],["box"]]],[11,"new_uninit","","Constructs a new box with uninitialized contents.",234,[[],[["box",["maybeuninit"]],["maybeuninit"]]]],[11,"new_zeroed","","Constructs a new `Box` with uninitialized contents, with…",234,[[],[["box",["maybeuninit"]],["maybeuninit"]]]],[11,"pin","","Constructs a new `Pin<Box<T>>`. If `T` does not implement…",234,[[["t"]],[["box"],["pin",["box"]]]]],[11,"new_uninit_slice","","Constructs a new boxed slice with uninitialized contents.",234,[[["usize"]],["box"]]],[11,"assume_init","","Converts to `Box<T>`.",234,[[],["box"]]],[11,"assume_init","","Converts to `Box<[T]>`.",234,[[],["box"]]],[11,"from_raw","","Constructs a box from a raw pointer.",234,[[],["box"]]],[11,"into_raw","","Consumes the `Box`, returning a wrapped raw pointer.",234,[[["box"]]]],[11,"into_raw_non_null","","Consumes the `Box`, returning the wrapped pointer as…",234,[[["box"]],["nonnull"]]],[11,"leak","","Consumes and leaks the `Box`, returning a mutable…",234,[[["box"]],["t"]]],[11,"into_pin","","Converts a `Box<T>` into a `Pin<Box<T>>`",234,[[["box"]],[["box"],["pin",["box"]]]]],[11,"downcast","","Attempt to downcast the box to a concrete type.",234,[[],[["box"],["box",["any"]],["result",["box","box"]]]]],[11,"downcast","","Attempt to downcast the box to a concrete type.",234,[[],[["box"],["box",["any"]],["result",["box","box"]]]]],[11,"entry","std::fmt","Adds a new entry to the list output.",237,[[["self"],["debug"]],["debuglist"]]],[11,"entries","","Adds the contents of an iterator of entries to the list…",237,[[["self"],["i"]],["debuglist"]]],[11,"finish","","Finishes output and returns any error encountered.",237,[[["self"]],[["error"],["result",["error"]]]]],[11,"entry","","Adds a new entry to the map output.",238,[[["self"],["debug"]],["debugmap"]]],[11,"key","","Adds the key part of a new entry to the map output.",238,[[["self"],["debug"]],["debugmap"]]],[11,"value","","Adds the value part of a new entry to the map output.",238,[[["self"],["debug"]],["debugmap"]]],[11,"entries","","Adds the contents of an iterator of entries to the map…",238,[[["self"],["i"]],["debugmap"]]],[11,"finish","","Finishes output and returns any error encountered.",238,[[["self"]],[["error"],["result",["error"]]]]],[11,"entry","","Adds a new entry to the set output.",239,[[["self"],["debug"]],["debugset"]]],[11,"entries","","Adds the contents of an iterator of entries to the set…",239,[[["self"],["i"]],["debugset"]]],[11,"finish","","Finishes output and returns any error encountered.",239,[[["self"]],[["error"],["result",["error"]]]]],[11,"field","","Adds a new field to the generated struct output.",240,[[["str"],["self"],["debug"]],["debugstruct"]]],[11,"finish_non_exhaustive","","Marks the struct as non-exhaustive, indicating to the…",240,[[["self"]],[["error"],["result",["error"]]]]],[11,"finish","","Finishes output and returns any error encountered.",240,[[["self"]],[["error"],["result",["error"]]]]],[11,"field","","Adds a new field to the generated tuple struct output.",241,[[["self"],["debug"]],["debugtuple"]]],[11,"finish","","Finishes output and returns any error encountered.",241,[[["self"]],[["error"],["result",["error"]]]]],[11,"pad_integral","","Performs the correct padding for an integer which has…",242,[[["str"],["self"],["bool"]],[["error"],["result",["error"]]]]],[11,"pad","","This function takes a string slice and emits it to the…",242,[[["str"],["self"]],[["error"],["result",["error"]]]]],[11,"write_str","","Writes some data to the underlying buffer contained within…",242,[[["str"],["self"]],[["error"],["result",["error"]]]]],[11,"write_fmt","","Writes some formatted information into this instance.",242,[[["self"],["arguments"]],[["error"],["result",["error"]]]]],[11,"flags","","Flags for formatting",242,[[["self"]],["u32"]]],[11,"fill","","Character used as 'fill' whenever there is alignment.",242,[[["self"]],["char"]]],[11,"align","","Flag indicating what form of alignment was requested.",242,[[["self"]],[["option",["alignment"]],["alignment"]]]],[11,"width","","Optionally specified integer width that the output should…",242,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"precision","","Optionally specified precision for numeric types.",242,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"sign_plus","","Determines if the `+` flag was specified.",242,[[["self"]],["bool"]]],[11,"sign_minus","","Determines if the `-` flag was specified.",242,[[["self"]],["bool"]]],[11,"alternate","","Determines if the `#` flag was specified.",242,[[["self"]],["bool"]]],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",242,[[["self"]],["bool"]]],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with…",242,[[["self"],["str"]],["debugstruct"]]],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with…",242,[[["self"],["str"]],["debugtuple"]]],[11,"debug_list","","Creates a `DebugList` builder designed to assist with…",242,[[["self"]],["debuglist"]]],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with…",242,[[["self"]],["debugset"]]],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with…",242,[[["self"]],["debugmap"]]],[11,"new","std::rc","Constructs a new `Rc<T>`.",243,[[["t"]],["rc"]]],[11,"new_uninit","","Constructs a new `Rc` with uninitialized contents.",243,[[],[["rc",["maybeuninit"]],["maybeuninit"]]]],[11,"new_zeroed","","Constructs a new `Rc` with uninitialized contents, with…",243,[[],[["rc",["maybeuninit"]],["maybeuninit"]]]],[11,"pin","","Constructs a new `Pin<Rc<T>>`. If `T` does not implement…",243,[[["t"]],[["pin",["rc"]],["rc"]]]],[11,"try_unwrap","","Returns the inner value, if the `Rc` has exactly one…",243,[[["rc"]],[["result",["rc"]],["rc"]]]],[11,"new_uninit_slice","","Constructs a new reference-counted slice with…",243,[[["usize"]],["rc"]]],[11,"assume_init","","Converts to `Rc<T>`.",243,[[],["rc"]]],[11,"assume_init","","Converts to `Rc<[T]>`.",243,[[],["rc"]]],[11,"into_raw","","Consumes the `Rc`, returning the wrapped pointer.",243,[[["rc"]]]],[11,"from_raw","","Constructs an `Rc` from a raw pointer.",243,[[],["rc"]]],[11,"into_raw_non_null","","Consumes the `Rc`, returning the wrapped pointer as…",243,[[["rc"]],["nonnull"]]],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this allocation.",243,[[["rc"]],["weak"]]],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this…",243,[[["rc"]],["usize"]]],[11,"strong_count","","Gets the number of strong (`Rc`) pointers to this…",243,[[["rc"]],["usize"]]],[11,"get_mut","","Returns a mutable reference into the given `Rc`, if there…",243,[[["rc"]],[["option"],["t"]]]],[11,"get_mut_unchecked","","Returns a mutable reference into the given `Rc`, without…",243,[[["rc"]],["t"]]],[11,"ptr_eq","","Returns `true` if the two `Rc`s point to the same…",243,[[["rc"]],["bool"]]],[11,"make_mut","","Makes a mutable reference into the given `Rc`.",243,[[["rc"]],["t"]]],[11,"downcast","","Attempt to downcast the `Rc<dyn Any>` to a concrete type.",243,[[],[["result",["rc","rc"]],["rc"],["rc",["any"]]]]],[11,"new","","Constructs a new `Weak<T>`, without allocating any memory.…",244,[[],["weak"]]],[11,"as_raw","","Returns a raw pointer to the object `T` pointed to by this…",244,[[["self"]]]],[11,"into_raw","","Consumes the `Weak<T>` and turns it into a raw pointer.",244,[[]]],[11,"from_raw","","Converts a raw pointer previously created by [`into_raw`]…",244,[[],["weak"]]],[11,"upgrade","","Attempts to upgrade the `Weak` pointer to an [`Rc`],…",244,[[["self"]],[["option",["rc"]],["rc"]]]],[11,"strong_count","","Gets the number of strong (`Rc`) pointers pointing to this…",244,[[["self"]],["usize"]]],[11,"weak_count","","Gets the number of `Weak` pointers pointing to this…",244,[[["self"]],["usize"]]],[11,"ptr_eq","","Returns `true` if the two `Weak`s point to the same…",244,[[["self"],["weak"]],["bool"]]],[11,"remainder","std::slice","Returns the remainder of the original slice that is not…",247,[[["self"]]]],[11,"into_remainder","","Returns the remainder of the original slice that is not…",248,[[]]],[11,"as_slice","","Views the underlying data as a subslice of the original…",252,[[["self"]]]],[11,"into_slice","","Views the underlying data as a subslice of the original…",253,[[]]],[11,"as_slice","","Views the underlying data as a subslice of the original…",253,[[["self"]]]],[11,"remainder","","Returns the remainder of the original slice that is not…",255,[[["self"]]]],[11,"into_remainder","","Returns the remainder of the original slice that is not…",256,[[]]],[11,"as_str","std::str","Views the underlying data as a subslice of the original…",272,[[["self"]],["str"]]],[11,"as_str","","Views the underlying data as a subslice of the original…",273,[[["self"]],["str"]]],[11,"valid_up_to","","Returns the index in the given string up to which valid…",278,[[["self"]],["usize"]]],[11,"error_len","","Provides more information about the failure:",278,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"new","std::string","Creates a new empty `String`.",291,[[],["string"]]],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",291,[[["usize"]],["string"]]],[11,"from_utf8","","Converts a vector of bytes to a `String`.",291,[[["vec",["u8"]],["u8"]],[["string"],["result",["string","fromutf8error"]],["fromutf8error"]]]],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid…",291,[[],[["str"],["cow",["str"]]]]],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`,…",291,[[],[["result",["string","fromutf16error"]],["string"],["fromutf16error"]]]],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice `v` into a `String`,…",291,[[],["string"]]],[11,"into_raw_parts","","Decomposes a `String` into its raw components.",291,[[]]],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",291,[[["usize"]],["string"]]],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking…",291,[[["vec",["u8"]],["u8"]],["string"]]],[11,"into_bytes","","Converts a `String` into a byte vector.",291,[[],[["u8"],["vec",["u8"]]]]],[11,"as_str","","Extracts a string slice containing the entire `String`.",291,[[["self"]],["str"]]],[11,"as_mut_str","","Converts a `String` into a mutable string slice.",291,[[["self"]],["str"]]],[11,"push_str","","Appends a given string slice onto the end of this `String`.",291,[[["str"],["self"]]]],[11,"capacity","","Returns this `String`'s capacity, in bytes.",291,[[["self"]],["usize"]]],[11,"reserve","","Ensures that this `String`'s capacity is at least…",291,[[["self"],["usize"]]]],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional`…",291,[[["self"],["usize"]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",291,[[["self"],["usize"]],[["tryreserveerror"],["result",["tryreserveerror"]]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly…",291,[[["self"],["usize"]],[["tryreserveerror"],["result",["tryreserveerror"]]]]],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",291,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of this `String` with a lower bound.",291,[[["self"],["usize"]]]],[11,"push","","Appends the given [`char`] to the end of this `String`.",291,[[["self"],["char"]]]],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",291,[[["self"]]]],[11,"truncate","","Shortens this `String` to the specified length.",291,[[["self"],["usize"]]]],[11,"pop","","Removes the last character from the string buffer and…",291,[[["self"]],[["option",["char"]],["char"]]]],[11,"remove","","Removes a [`char`] from this `String` at a byte position…",291,[[["self"],["usize"]],["char"]]],[11,"retain","","Retains only the characters specified by the predicate.",291,[[["self"],["f"]]]],[11,"insert","","Inserts a character into this `String` at a byte position.",291,[[["self"],["usize"],["char"]]]],[11,"insert_str","","Inserts a string slice into this `String` at a byte…",291,[[["str"],["self"],["usize"]]]],[11,"as_mut_vec","","Returns a mutable reference to the contents of this…",291,[[["self"]],["vec"]]],[11,"len","","Returns the length of this `String`, in bytes, not…",291,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if this `String` has a length of zero, and…",291,[[["self"]],["bool"]]],[11,"split_off","","Splits the string into two at the given index.",291,[[["self"],["usize"]],["string"]]],[11,"clear","","Truncates this `String`, removing all contents.",291,[[["self"]]]],[11,"drain","","Creates a draining iterator that removes the specified…",291,[[["self"],["r"]],["drain"]]],[11,"replace_range","","Removes the specified range in the string, and replaces it…",291,[[["str"],["self"],["r"]]]],[11,"into_boxed_str","","Converts this `String` into a [`Box`]`<`[`str`]`>`.",291,[[],[["str"],["box",["str"]]]]],[11,"as_bytes","","Returns a slice of [`u8`]s bytes that were attempted to…",292,[[["self"]]]],[11,"into_bytes","","Returns the bytes that were attempted to convert to a…",292,[[],[["u8"],["vec",["u8"]]]]],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the…",292,[[["self"]],["utf8error"]]],[11,"new","std::vec","Constructs a new, empty `Vec<T>`.",295,[[],["vec"]]],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified…",295,[[["usize"]],["vec"]]],[11,"into_raw_parts","","Decomposes a `Vec<T>` into its raw components.",295,[[]]],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of…",295,[[["usize"]],["vec"]]],[11,"capacity","","Returns the number of elements the vector can hold without…",295,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",295,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional`…",295,[[["self"],["usize"]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",295,[[["self"],["usize"]],[["tryreserveerror"],["result",["tryreserveerror"]]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly…",295,[[["self"],["usize"]],[["tryreserveerror"],["result",["tryreserveerror"]]]]],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",295,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of the vector with a lower bound.",295,[[["self"],["usize"]]]],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",295,[[],["box"]]],[11,"truncate","","Shortens the vector, keeping the first `len` elements and…",295,[[["self"],["usize"]]]],[11,"as_slice","","Extracts a slice containing the entire vector.",295,[[["self"]]]],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",295,[[["self"]]]],[11,"as_ptr","","Returns a raw pointer to the vector's buffer.",295,[[["self"]]]],[11,"as_mut_ptr","","Returns an unsafe mutable pointer to the vector's buffer.",295,[[["self"]]]],[11,"set_len","","Forces the length of the vector to `new_len`.",295,[[["self"],["usize"]]]],[11,"swap_remove","","Removes an element from the vector and returns it.",295,[[["self"],["usize"]],["t"]]],[11,"insert","","Inserts an element at position `index` within the vector,…",295,[[["self"],["usize"],["t"]]]],[11,"remove","","Removes and returns the element at position `index` within…",295,[[["self"],["usize"]],["t"]]],[11,"retain","","Retains only the elements specified by the predicate.",295,[[["self"],["f"]]]],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the…",295,[[["self"],["f"]]]],[11,"dedup_by","","Removes all but the first of consecutive elements in the…",295,[[["self"],["f"]]]],[11,"push","","Appends an element to the back of a collection.",295,[[["self"],["t"]]]],[11,"pop","","Removes the last element from a vector and returns it, or…",295,[[["self"]],["option"]]],[11,"append","","Moves all the elements of `other` into `Self`, leaving…",295,[[["self"],["vec"]]]],[11,"drain","","Creates a draining iterator that removes the specified…",295,[[["self"],["r"]],["drain"]]],[11,"clear","","Clears the vector, removing all values.",295,[[["self"]]]],[11,"len","","Returns the number of elements in the vector, also…",295,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the vector contains no elements.",295,[[["self"]],["bool"]]],[11,"split_off","","Splits the collection into two at the given index.",295,[[["self"],["usize"]],["vec"]]],[11,"resize_with","","Resizes the `Vec` in-place so that `len` is equal to…",295,[[["self"],["usize"],["f"]]]],[11,"leak","","Consumes and leaks the `Vec`, returning a mutable…",295,[[["vec"]]]],[11,"resize","","Resizes the `Vec` in-place so that `len` is equal to…",295,[[["self"],["usize"],["t"]]]],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",295,[[["self"]]]],[11,"resize_default","","Resizes the `Vec` in-place so that `len` is equal to…",295,[[["self"],["usize"]]]],[11,"dedup","","Removes consecutive repeated elements in the vector…",295,[[["self"]]]],[11,"remove_item","","Removes the first instance of `item` from the vector if…",295,[[["self"],["v"]],["option"]]],[11,"splice","","Creates a splicing iterator that replaces the specified…",295,[[["self"],["i"],["r"]],["splice"]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if…",295,[[["self"],["f"]],["drainfilter"]]],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",296,[[["self"]]]],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable…",296,[[["self"]]]],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",297,[[["self"]]]],[11,"is","std::any","Returns `true` if the boxed type is the same as `T`.",24,[[["self"]],["bool"]]],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type…",24,[[["self"]],[["option"],["t"]]]],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is…",24,[[["self"]],[["option"],["t"]]]],[11,"is","","Forwards to the method defined on the type `Any`.",24,[[["self"]],["bool"]]],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",24,[[["self"]],[["option"],["t"]]]],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",24,[[["self"]],[["option"],["t"]]]],[11,"is","","Forwards to the method defined on the type `Any`.",24,[[["self"]],["bool"]]],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",24,[[["self"]],[["option"],["t"]]]],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",24,[[["self"]],[["option"],["t"]]]],[11,"of","","Returns the `TypeId` of the type this generic function has…",300,[[],["typeid"]]],[11,"new","std::array","Creates a new iterator over the given `array`.",302,[[],["intoiter"]]],[11,"new","std::cell","Creates a new `Cell` containing the given value.",303,[[["t"]],["cell"]]],[11,"set","","Sets the contained value.",303,[[["self"],["t"]]]],[11,"swap","","Swaps the values of two Cells. Difference with…",303,[[["cell"],["self"]]]],[11,"replace","","Replaces the contained value, and returns it.",303,[[["self"],["t"]],["t"]]],[11,"into_inner","","Unwraps the value.",303,[[],["t"]]],[11,"get","","Returns a copy of the contained value.",303,[[["self"]],["t"]]],[11,"update","","Updates the contained value using a function and returns…",303,[[["self"],["f"]],["t"]]],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",303,[[["self"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",303,[[["self"]],["t"]]],[11,"from_mut","","Returns a `&Cell<T>` from a `&mut T`",303,[[["t"]],["cell"]]],[11,"take","","Takes the value of the cell, leaving `Default::default()`…",303,[[["self"]],["t"]]],[11,"as_slice_of_cells","","Returns a `&[Cell<T>]` from a `&Cell<[T]>`",303,[[["self"]]]],[11,"new","","Creates a new `RefCell` containing `value`.",304,[[["t"]],["refcell"]]],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",304,[[],["t"]]],[11,"replace","","Replaces the wrapped value with a new one, returning the…",304,[[["self"],["t"]],["t"]]],[11,"replace_with","","Replaces the wrapped value with a new one computed from…",304,[[["self"],["f"]],["t"]]],[11,"swap","","Swaps the wrapped value of `self` with the wrapped value…",304,[[["refcell"],["self"]]]],[11,"borrow","","Immutably borrows the wrapped value.",304,[[["self"]],["ref"]]],[11,"try_borrow","","Immutably borrows the wrapped value, returning an error if…",304,[[["self"]],[["borrowerror"],["result",["ref","borrowerror"]],["ref"]]]],[11,"borrow_mut","","Mutably borrows the wrapped value.",304,[[["self"]],["refmut"]]],[11,"try_borrow_mut","","Mutably borrows the wrapped value, returning an error if…",304,[[["self"]],[["refmut"],["result",["refmut","borrowmuterror"]],["borrowmuterror"]]]],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",304,[[["self"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",304,[[["self"]],["t"]]],[11,"try_borrow_unguarded","","Immutably borrows the wrapped value, returning an error if…",304,[[["self"]],[["result",["borrowerror"]],["t"],["borrowerror"]]]],[11,"clone","","Copies a `Ref`.",307,[[["ref"]],["ref"]]],[11,"map","","Makes a new `Ref` for a component of the borrowed data.",307,[[["ref"],["f"]],["ref"]]],[11,"map_split","","Splits a `Ref` into multiple `Ref`s for different…",307,[[["ref"],["f"]]]],[11,"map","","Makes a new `RefMut` for a component of the borrowed data,…",308,[[["refmut"],["f"]],["refmut"]]],[11,"map_split","","Splits a `RefMut` into multiple `RefMut`s for different…",308,[[["refmut"],["f"]]]],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap…",309,[[["t"]],["unsafecell"]]],[11,"into_inner","","Unwraps the value.",309,[[],["t"]]],[11,"get","","Gets a mutable pointer to the wrapped value.",309,[[["self"]]]],[11,"raw_get","","Gets a mutable pointer to the wrapped value. The…",309,[[]]],[11,"unpaired_surrogate","std::char","Returns the unpaired surrogate which caused this error.",318,[[["self"]],["u16"]]],[11,"reverse","std::cmp","Reverses the `Ordering`.",29,[[],["ordering"]]],[11,"then","","Chains two orderings.",29,[[["ordering"]],["ordering"]]],[11,"then_with","","Chains the ordering with the given function.",29,[[["f"]],["ordering"]]],[11,"new","std::hash","Creates a new `SipHasher` with the two initial keys set to…",321,[[],["siphasher"]]],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",321,[[["u64"]],["siphasher"]]],[11,"peek","std::iter","Returns a reference to the next() value without advancing…",342,[[["self"]],["option"]]],[11,"new","std::mem","Wrap a value to be manually dropped.",353,[[["t"]],["manuallydrop"]]],[11,"into_inner","","Extracts the value from the `ManuallyDrop` container.",353,[[["manuallydrop"]],["t"]]],[11,"take","","Takes the value from the `ManuallyDrop<T>` container out.",353,[[["manuallydrop"]],["t"]]],[11,"drop","","Manually drops the contained value.",353,[[["manuallydrop"]]]],[11,"new","","Creates a new `MaybeUninit<T>` initialized with the given…",354,[[["t"]],["maybeuninit"]]],[11,"uninit","","Creates a new `MaybeUninit<T>` in an uninitialized state.",354,[[],["maybeuninit"]]],[11,"uninit_array","","Create a new array of `MaybeUninit<T>` items, in an…",354,[[]]],[18,"UNINIT","","A promotable constant, equivalent to `uninit()`.",354,null],[11,"zeroed","","Creates a new `MaybeUninit<T>` in an uninitialized state,…",354,[[],["maybeuninit"]]],[11,"write","","Sets the value of the `MaybeUninit<T>`. This overwrites…",354,[[["self"],["t"]],["t"]]],[11,"as_ptr","","Gets a pointer to the contained value. Reading from this…",354,[[["self"]]]],[11,"as_mut_ptr","","Gets a mutable pointer to the contained value. Reading…",354,[[["self"]]]],[11,"assume_init","","Extracts the value from the `MaybeUninit<T>` container.…",354,[[],["t"]]],[11,"read","","Reads the value from the `MaybeUninit<T>` container. The…",354,[[["self"]],["t"]]],[11,"get_ref","","Gets a shared reference to the contained value.",354,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable (unique) reference to the contained value.",354,[[["self"]],["t"]]],[11,"slice_get_ref","","Assuming all the elements are initialized, get a slice to…",354,[[]]],[11,"slice_get_mut","","Assuming all the elements are initialized, get a mutable…",354,[[]]],[11,"first_ptr","","Gets a pointer to the first element of the array.",354,[[]]],[11,"first_ptr_mut","","Gets a mutable pointer to the first element of the array.",354,[[]]],[11,"contains","std::ops","Returns `true` if `item` is contained in the range.",82,[[["self"],["u"]],["bool"]]],[11,"is_empty","","Returns `true` if the range contains no items.",82,[[["self"]],["bool"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",83,[[["self"],["u"]],["bool"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",84,[[["self"],["u"]],["bool"]]],[11,"cloned","","Map a `Bound<&T>` to a `Bound<T>` by cloning the contents…",85,[[],["bound"]]],[11,"new","","Creates a new inclusive range. Equivalent to writing…",356,[[["idx"]],["rangeinclusive"]]],[11,"start","","Returns the lower bound of the range (inclusive).",356,[[["self"]],["idx"]]],[11,"end","","Returns the upper bound of the range (inclusive).",356,[[["self"]],["idx"]]],[11,"into_inner","","Destructures the `RangeInclusive` into (lower bound, upper…",356,[[]]],[11,"contains","","Returns `true` if `item` is contained in the range.",356,[[["self"],["u"]],["bool"]]],[11,"is_empty","","Returns `true` if the range contains no items.",356,[[["self"]],["bool"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",87,[[["self"],["u"]],["bool"]]],[11,"is_some","std::option","Returns `true` if the option is a [`Some`] value.",91,[[["self"]],["bool"]]],[11,"is_none","","Returns `true` if the option is a [`None`] value.",91,[[["self"]],["bool"]]],[11,"contains","","Returns `true` if the option is a [`Some`] value…",91,[[["self"],["u"]],["bool"]]],[11,"as_ref","","Converts from `&Option<T>` to `Option<&T>`.",91,[[["self"]],[["option"],["t"]]]],[11,"as_mut","","Converts from `&mut Option<T>` to `Option<&mut T>`.",91,[[["self"]],[["option"],["t"]]]],[11,"as_pin_ref","","Converts from [`Pin`]`<&Option<T>>` to…",91,[[["option"],["pin",["option"]]],[["option",["pin"]],["pin"]]]],[11,"as_pin_mut","","Converts from [`Pin`]`<&mut Option<T>>` to…",91,[[["pin",["option"]],["option"]],[["option",["pin"]],["pin"]]]],[11,"expect","","Unwraps an option, yielding the content of a [`Some`].",91,[[["str"]],["t"]]],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is…",91,[[],["t"]]],[11,"unwrap_or","","Returns the contained value or a default.",91,[[["t"]],["t"]]],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",91,[[["f"]],["t"]]],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function…",91,[[["f"]],["option"]]],[11,"map_or","","Applies a function to the contained value (if any), or…",91,[[["u"],["f"]],["u"]]],[11,"map_or_else","","Applies a function to the contained value (if any), or…",91,[[["d"],["f"]],["u"]]],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`],…",91,[[["e"]],["result"]]],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`],…",91,[[["f"]],["result"]]],[11,"iter","","Returns an iterator over the possibly contained value.",91,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a mutable iterator over the possibly contained…",91,[[["self"]],["itermut"]]],[11,"and","","Returns [`None`] if the option is [`None`], otherwise…",91,[[["option"]],["option"]]],[11,"and_then","","Returns [`None`] if the option is [`None`], otherwise…",91,[[["f"]],["option"]]],[11,"filter","","Returns [`None`] if the option is [`None`], otherwise…",91,[[["p"]],["option"]]],[11,"or","","Returns the option if it contains a value, otherwise…",91,[[["option"]],["option"]]],[11,"or_else","","Returns the option if it contains a value, otherwise calls…",91,[[["f"]],["option"]]],[11,"xor","","Returns [`Some`] if exactly one of `self`, `optb` is…",91,[[["option"]],["option"]]],[11,"get_or_insert","","Inserts `v` into the option if it is [`None`], then…",91,[[["self"],["t"]],["t"]]],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is…",91,[[["self"],["f"]],["t"]]],[11,"take","","Takes the value out of the option, leaving a [`None`] in…",91,[[["self"]],["option"]]],[11,"replace","","Replaces the actual value in the option by the value given…",91,[[["self"],["t"]],["option"]]],[11,"copied","","Maps an `Option<&T>` to an `Option<T>` by copying the…",91,[[],["option"]]],[11,"copied","","Maps an `Option<&mut T>` to an `Option<T>` by copying the…",91,[[],["option"]]],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the…",91,[[],["option"]]],[11,"cloned","","Maps an `Option<&mut T>` to an `Option<T>` by cloning the…",91,[[],["option"]]],[11,"expect_none","","Unwraps an option, expecting [`None`] and returning nothing.",91,[[["str"]]]],[11,"unwrap_none","","Unwraps an option, expecting [`None`] and returning nothing.",91,[[]]],[11,"unwrap_or_default","","Returns the contained value or a default",91,[[],["t"]]],[11,"as_deref","","Converts from `Option<T>` (or `&Option<T>`) to…",91,[[["self"]],["option"]]],[11,"as_deref_mut","","Converts from `Option<T>` (or `&mut Option<T>`) to…",91,[[["self"]],["option"]]],[11,"transpose","","Transposes an `Option` of a [`Result`] into a [`Result`]…",91,[[],[["result",["option"]],["option"]]]],[11,"flatten","","Converts from `Option<Option<T>>` to `Option<T>`",91,[[],["option"]]],[11,"new","std::pin","Construct a new `Pin<P>` around a pointer to some data of…",361,[[["p"]],["pin"]]],[11,"into_inner","","Unwraps this `Pin<P>` returning the underlying pointer.",361,[[["pin"]],["p"]]],[11,"new_unchecked","","Construct a new `Pin<P>` around a reference to some data…",361,[[["p"]],["pin"]]],[11,"as_ref","","Gets a pinned shared reference from this pinned pointer.",361,[[["self"]],["pin"]]],[11,"into_inner_unchecked","","Unwraps this `Pin<P>` returning the underlying pointer.",361,[[["pin"]],["p"]]],[11,"as_mut","","Gets a pinned mutable reference from this pinned pointer.",361,[[["self"]],["pin"]]],[11,"set","","Assigns a new value to the memory behind the pinned…",361,[[["self"]]]],[11,"map_unchecked","","Constructs a new pin by mapping the interior value.",361,[[["f"]],[["u"],["pin"]]]],[11,"get_ref","","Gets a shared reference out of a pin.",361,[[],["t"]]],[11,"into_ref","","Converts this `Pin<&mut T>` into a `Pin<&T>` with the same…",361,[[],[["t"],["pin"]]]],[11,"get_mut","","Gets a mutable reference to the data inside of this `Pin`.",361,[[],["t"]]],[11,"get_unchecked_mut","","Gets a mutable reference to the data inside of this `Pin`.",361,[[],["t"]]],[11,"map_unchecked_mut","","Construct a new pin by mapping the interior value.",361,[[["f"]],[["pin"],["u"]]]],[11,"dangling","std::ptr","Creates a new `NonNull` that is dangling, but well-aligned.",362,[[],["nonnull"]]],[11,"new_unchecked","","Creates a new `NonNull`.",362,[[],["nonnull"]]],[11,"new","","Creates a new `NonNull` if `ptr` is non-null.",362,[[],[["option",["nonnull"]],["nonnull"]]]],[11,"as_ptr","","Acquires the underlying `*mut` pointer.",362,[[]]],[11,"as_ref","","Dereferences the content.",362,[[["self"]],["t"]]],[11,"as_mut","","Mutably dereferences the content.",362,[[["self"]],["t"]]],[11,"cast","","Casts to a pointer of another type.",362,[[],["nonnull"]]],[11,"is_ok","std::result","Returns `true` if the result is [`Ok`].",93,[[["self"]],["bool"]]],[11,"is_err","","Returns `true` if the result is [`Err`].",93,[[["self"]],["bool"]]],[11,"contains","","Returns `true` if the result is an [`Ok`] value containing…",93,[[["self"],["u"]],["bool"]]],[11,"contains_err","","Returns `true` if the result is an [`Err`] value…",93,[[["f"],["self"]],["bool"]]],[11,"ok","","Converts from `Result<T, E>` to [`Option<T>`].",93,[[],["option"]]],[11,"err","","Converts from `Result<T, E>` to [`Option<E>`].",93,[[],["option"]]],[11,"as_ref","","Converts from `&Result<T, E>` to `Result<&T, &E>`.",93,[[["self"]],[["t"],["e"],["result"]]]],[11,"as_mut","","Converts from `&mut Result<T, E>` to `Result<&mut T, &mut…",93,[[["self"]],[["e"],["t"],["result"]]]],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a…",93,[[["f"]],["result"]]],[11,"map_or","","Applies a function to the contained value (if any), or…",93,[[["u"],["f"]],["u"]]],[11,"map_or_else","","Maps a `Result<T, E>` to `U` by applying a function to a…",93,[[["d"],["f"]],["u"]]],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a…",93,[[["o"]],["result"]]],[11,"iter","","Returns an iterator over the possibly contained value.",93,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a mutable iterator over the possibly contained…",93,[[["self"]],["itermut"]]],[11,"and","","Returns `res` if the result is [`Ok`], otherwise returns…",93,[[["result"]],["result"]]],[11,"and_then","","Calls `op` if the result is [`Ok`], otherwise returns the…",93,[[["f"]],["result"]]],[11,"or","","Returns `res` if the result is [`Err`], otherwise returns…",93,[[["result"]],["result"]]],[11,"or_else","","Calls `op` if the result is [`Err`], otherwise returns the…",93,[[["o"]],["result"]]],[11,"unwrap_or","","Unwraps a result, yielding the content of an [`Ok`]. Else,…",93,[[["t"]],["t"]]],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an [`Ok`]. If…",93,[[["f"]],["t"]]],[11,"copied","","Maps a `Result<&T, E>` to a `Result<T, E>` by copying the…",93,[[],["result"]]],[11,"copied","","Maps a `Result<&mut T, E>` to a `Result<T, E>` by copying…",93,[[],["result"]]],[11,"cloned","","Maps a `Result<&T, E>` to a `Result<T, E>` by cloning the…",93,[[],["result"]]],[11,"cloned","","Maps a `Result<&mut T, E>` to a `Result<T, E>` by cloning…",93,[[],["result"]]],[11,"unwrap","","Unwraps a result, yielding the content of an [`Ok`].",93,[[],["t"]]],[11,"expect","","Unwraps a result, yielding the content of an [`Ok`].",93,[[["str"]],["t"]]],[11,"unwrap_err","","Unwraps a result, yielding the content of an [`Err`].",93,[[],["e"]]],[11,"expect_err","","Unwraps a result, yielding the content of an [`Err`].",93,[[["str"]],["e"]]],[11,"unwrap_or_default","","Returns the contained value or a default",93,[[],["t"]]],[11,"into_ok","","Unwraps a result that can never be an [`Err`], yielding…",93,[[],["t"]]],[11,"as_deref","","Converts from `Result<T, E>` (or `&Result<T, E>`) to…",93,[[["self"]],[["result"],["e"]]]],[11,"as_deref_err","","Converts from `Result<T, E>` (or `&Result<T, E>`) to…",93,[[["self"]],[["t"],["result"]]]],[11,"as_deref_mut","","Converts from `Result<T, E>` (or `&mut Result<T, E>`) to…",93,[[["self"]],[["e"],["result"]]]],[11,"as_deref_mut_err","","Converts from `Result<T, E>` (or `&mut Result<T, E>`) to…",93,[[["self"]],[["result"],["t"]]]],[11,"transpose","","Transposes a `Result` of an `Option` into an `Option` of a…",93,[[],[["option",["result"]],["result"]]]],[11,"floor","std","Returns the largest integer less than or equal to a number.",528,[[],["f32"]]],[11,"ceil","","Returns the smallest integer greater than or equal to a…",528,[[],["f32"]]],[11,"round","","Returns the nearest integer to a number. Round half-way…",528,[[],["f32"]]],[11,"trunc","","Returns the integer part of a number.",528,[[],["f32"]]],[11,"fract","","Returns the fractional part of a number.",528,[[],["f32"]]],[11,"abs","","Computes the absolute value of `self`. Returns `NAN` if…",528,[[],["f32"]]],[11,"signum","","Returns a number that represents the sign of `self`.",528,[[],["f32"]]],[11,"copysign","","Returns a number composed of the magnitude of `self` and…",528,[[["f32"]],["f32"]]],[11,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",528,[[["f32"]],["f32"]]],[11,"div_euclid","","Calculates Euclidean division, the matching method for…",528,[[["f32"]],["f32"]]],[11,"rem_euclid","","Calculates the least nonnegative remainder of `self (mod…",528,[[["f32"]],["f32"]]],[11,"powi","","Raises a number to an integer power.",528,[[["i32"]],["f32"]]],[11,"powf","","Raises a number to a floating point power.",528,[[["f32"]],["f32"]]],[11,"sqrt","","Returns the square root of a number.",528,[[],["f32"]]],[11,"exp","","Returns `e^(self)`, (the exponential function).",528,[[],["f32"]]],[11,"exp2","","Returns `2^(self)`.",528,[[],["f32"]]],[11,"ln","","Returns the natural logarithm of the number.",528,[[],["f32"]]],[11,"log","","Returns the logarithm of the number with respect to an…",528,[[["f32"]],["f32"]]],[11,"log2","","Returns the base 2 logarithm of the number.",528,[[],["f32"]]],[11,"log10","","Returns the base 10 logarithm of the number.",528,[[],["f32"]]],[11,"abs_sub","","The positive difference of two numbers.",528,[[["f32"]],["f32"]]],[11,"cbrt","","Returns the cubic root of a number.",528,[[],["f32"]]],[11,"hypot","","Calculates the length of the hypotenuse of a right-angle…",528,[[["f32"]],["f32"]]],[11,"sin","","Computes the sine of a number (in radians).",528,[[],["f32"]]],[11,"cos","","Computes the cosine of a number (in radians).",528,[[],["f32"]]],[11,"tan","","Computes the tangent of a number (in radians).",528,[[],["f32"]]],[11,"asin","","Computes the arcsine of a number. Return value is in…",528,[[],["f32"]]],[11,"acos","","Computes the arccosine of a number. Return value is in…",528,[[],["f32"]]],[11,"atan","","Computes the arctangent of a number. Return value is in…",528,[[],["f32"]]],[11,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",528,[[["f32"]],["f32"]]],[11,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",528,[[]]],[11,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",528,[[],["f32"]]],[11,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",528,[[],["f32"]]],[11,"sinh","","Hyperbolic sine function.",528,[[],["f32"]]],[11,"cosh","","Hyperbolic cosine function.",528,[[],["f32"]]],[11,"tanh","","Hyperbolic tangent function.",528,[[],["f32"]]],[11,"asinh","","Inverse hyperbolic sine function.",528,[[],["f32"]]],[11,"acosh","","Inverse hyperbolic cosine function.",528,[[],["f32"]]],[11,"atanh","","Inverse hyperbolic tangent function.",528,[[],["f32"]]],[11,"clamp","","Restrict a value to a certain interval unless it is NaN.",528,[[["f32"]],["f32"]]],[11,"floor","","Returns the largest integer less than or equal to a number.",529,[[],["f64"]]],[11,"ceil","","Returns the smallest integer greater than or equal to a…",529,[[],["f64"]]],[11,"round","","Returns the nearest integer to a number. Round half-way…",529,[[],["f64"]]],[11,"trunc","","Returns the integer part of a number.",529,[[],["f64"]]],[11,"fract","","Returns the fractional part of a number.",529,[[],["f64"]]],[11,"abs","","Computes the absolute value of `self`. Returns `NAN` if…",529,[[],["f64"]]],[11,"signum","","Returns a number that represents the sign of `self`.",529,[[],["f64"]]],[11,"copysign","","Returns a number composed of the magnitude of `self` and…",529,[[["f64"]],["f64"]]],[11,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",529,[[["f64"]],["f64"]]],[11,"div_euclid","","Calculates Euclidean division, the matching method for…",529,[[["f64"]],["f64"]]],[11,"rem_euclid","","Calculates the least nonnegative remainder of `self (mod…",529,[[["f64"]],["f64"]]],[11,"powi","","Raises a number to an integer power.",529,[[["i32"]],["f64"]]],[11,"powf","","Raises a number to a floating point power.",529,[[["f64"]],["f64"]]],[11,"sqrt","","Returns the square root of a number.",529,[[],["f64"]]],[11,"exp","","Returns `e^(self)`, (the exponential function).",529,[[],["f64"]]],[11,"exp2","","Returns `2^(self)`.",529,[[],["f64"]]],[11,"ln","","Returns the natural logarithm of the number.",529,[[],["f64"]]],[11,"log","","Returns the logarithm of the number with respect to an…",529,[[["f64"]],["f64"]]],[11,"log2","","Returns the base 2 logarithm of the number.",529,[[],["f64"]]],[11,"log10","","Returns the base 10 logarithm of the number.",529,[[],["f64"]]],[11,"abs_sub","","The positive difference of two numbers.",529,[[["f64"]],["f64"]]],[11,"cbrt","","Returns the cubic root of a number.",529,[[],["f64"]]],[11,"hypot","","Calculates the length of the hypotenuse of a right-angle…",529,[[["f64"]],["f64"]]],[11,"sin","","Computes the sine of a number (in radians).",529,[[],["f64"]]],[11,"cos","","Computes the cosine of a number (in radians).",529,[[],["f64"]]],[11,"tan","","Computes the tangent of a number (in radians).",529,[[],["f64"]]],[11,"asin","","Computes the arcsine of a number. Return value is in…",529,[[],["f64"]]],[11,"acos","","Computes the arccosine of a number. Return value is in…",529,[[],["f64"]]],[11,"atan","","Computes the arctangent of a number. Return value is in…",529,[[],["f64"]]],[11,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",529,[[["f64"]],["f64"]]],[11,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",529,[[]]],[11,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",529,[[],["f64"]]],[11,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",529,[[],["f64"]]],[11,"sinh","","Hyperbolic sine function.",529,[[],["f64"]]],[11,"cosh","","Hyperbolic cosine function.",529,[[],["f64"]]],[11,"tanh","","Hyperbolic tangent function.",529,[[],["f64"]]],[11,"asinh","","Inverse hyperbolic sine function.",529,[[],["f64"]]],[11,"acosh","","Inverse hyperbolic cosine function.",529,[[],["f64"]]],[11,"atanh","","Inverse hyperbolic tangent function.",529,[[],["f64"]]],[11,"clamp","","Restrict a value to a certain interval unless it is NaN.",529,[[["f64"]],["f64"]]],[11,"new","std::collections","Creates an empty `BinaryHeap` as a max-heap.",368,[[],["binaryheap"]]],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.…",368,[[["usize"]],["binaryheap"]]],[11,"peek_mut","","Returns a mutable reference to the greatest item in the…",368,[[["self"]],[["peekmut"],["option",["peekmut"]]]]],[11,"pop","","Removes the greatest item from the binary heap and returns…",368,[[["self"]],["option"]]],[11,"push","","Pushes an item onto the binary heap.",368,[[["self"],["t"]]]],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted…",368,[[],["vec"]]],[11,"append","","Moves all the elements of `other` into `self`, leaving…",368,[[["self"],["binaryheap"]]]],[11,"drain_sorted","","Returns an iterator which retrieves elements in heap…",368,[[["self"]],["drainsorted"]]],[11,"iter","","Returns an iterator visiting all values in the underlying…",368,[[["self"]],["iter"]]],[11,"into_iter_sorted","","Returns an iterator which retrieves elements in heap…",368,[[],["intoitersorted"]]],[11,"peek","","Returns the greatest item in the binary heap, or `None` if…",368,[[["self"]],[["option"],["t"]]]],[11,"capacity","","Returns the number of elements the binary heap can hold…",368,[[["self"]],["usize"]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional`…",368,[[["self"],["usize"]]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",368,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",368,[[["self"]]]],[11,"shrink_to","","Discards capacity with a lower bound.",368,[[["self"],["usize"]]]],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying…",368,[[],["vec"]]],[11,"len","","Returns the length of the binary heap.",368,[[["self"]],["usize"]]],[11,"is_empty","","Checks if the binary heap is empty.",368,[[["self"]],["bool"]]],[11,"drain","","Clears the binary heap, returning an iterator over the…",368,[[["self"]],["drain"]]],[11,"clear","","Drops all items from the binary heap.",368,[[["self"]]]],[11,"pop","std::collections::binary_heap","Removes the peeked value from the heap and returns it.",369,[[["peekmut"]],["t"]]],[11,"new","std::collections","Makes a new empty BTreeMap with a reasonable choice for B.",375,[[],["btreemap"]]],[11,"clear","","Clears the map, removing all elements.",375,[[["self"]]]],[11,"get","","Returns a reference to the value corresponding to the key.",375,[[["self"],["q"]],[["v"],["option"]]]],[11,"get_key_value","","Returns the key-value pair corresponding to the supplied…",375,[[["self"],["q"]],["option"]]],[11,"first_key_value","","Returns the first key-value pair in the map. The key in…",375,[[["self"]],["option"]]],[11,"first_entry","","Returns the first entry in the map for in-place…",375,[[["self"]],[["occupiedentry"],["option",["occupiedentry"]]]]],[11,"last_key_value","","Returns the last key-value pair in the map. The key in…",375,[[["self"]],["option"]]],[11,"last_entry","","Returns the last entry in the map for in-place…",375,[[["self"]],[["occupiedentry"],["option",["occupiedentry"]]]]],[11,"contains_key","","Returns `true` if the map contains a value for the…",375,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to…",375,[[["self"],["q"]],[["v"],["option"]]]],[11,"insert","","Inserts a key-value pair into the map.",375,[[["self"],["k"],["v"]],["option"]]],[11,"remove","","Removes a key from the map, returning the value at the key…",375,[[["self"],["q"]],["option"]]],[11,"append","","Moves all elements from `other` into `Self`, leaving…",375,[[["self"],["btreemap"]]]],[11,"range","","Constructs a double-ended iterator over a sub-range of…",375,[[["self"],["r"]],["range"]]],[11,"range_mut","","Constructs a mutable double-ended iterator over a…",375,[[["self"],["r"]],["rangemut"]]],[11,"entry","","Gets the given key's corresponding entry in the map for…",375,[[["self"],["k"]],["entry"]]],[11,"split_off","","Splits the collection into two at the given key. Returns…",375,[[["self"],["q"]],["btreemap"]]],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",375,[[["self"]],["iter"]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map,…",375,[[["self"]],["itermut"]]],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",375,[[["self"]],["keys"]]],[11,"values","","Gets an iterator over the values of the map, in order by…",375,[[["self"]],["values"]]],[11,"values_mut","","Gets a mutable iterator over the values of the map, in…",375,[[["self"]],["valuesmut"]]],[11,"len","","Returns the number of elements in the map.",375,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the map contains no elements.",375,[[["self"]],["bool"]]],[11,"or_insert","std::collections::btree_map","Ensures a value is in the entry by inserting the default…",102,[[["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of…",102,[[["f"]],["v"]]],[11,"key","","Returns a reference to this entry's key.",102,[[["self"]],["k"]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry…",102,[[["f"]],["entry"]]],[11,"or_default","","Ensures a value is in the entry by inserting the default…",102,[[],["v"]]],[11,"key","","Gets a reference to the key that would be used when…",382,[[["self"]],["k"]]],[11,"into_key","","Take ownership of the key.",382,[[],["k"]]],[11,"insert","","Sets the value of the entry with the `VacantEntry`'s key,…",382,[[["v"]],["v"]]],[11,"key","","Gets a reference to the key in the entry.",383,[[["self"]],["k"]]],[11,"remove_entry","","Take ownership of the key and value from the map.",383,[[]]],[11,"get","","Gets a reference to the value in the entry.",383,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",383,[[["self"]],["v"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",383,[[],["v"]]],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s…",383,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",383,[[],["v"]]],[11,"new","std::collections","Makes a new `BTreeSet` with a reasonable choice of B.",391,[[],["btreeset"]]],[11,"range","","Constructs a double-ended iterator over a sub-range of…",391,[[["self"],["r"]],["range"]]],[11,"difference","","Visits the values representing the difference, i.e., the…",391,[[["self"],["btreeset"]],["difference"]]],[11,"symmetric_difference","","Visits the values representing the symmetric difference,…",391,[[["self"],["btreeset"]],["symmetricdifference"]]],[11,"intersection","","Visits the values representing the intersection, i.e., the…",391,[[["self"],["btreeset"]],["intersection"]]],[11,"union","","Visits the values representing the union, i.e., all the…",391,[[["self"],["btreeset"]],["union"]]],[11,"clear","","Clears the set, removing all values.",391,[[["self"]]]],[11,"contains","","Returns `true` if the set contains a value.",391,[[["self"],["q"]],["bool"]]],[11,"get","","Returns a reference to the value in the set, if any, that…",391,[[["self"],["q"]],[["option"],["t"]]]],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with…",391,[[["self"],["btreeset"]],["bool"]]],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e.,…",391,[[["self"],["btreeset"]],["bool"]]],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e.,…",391,[[["self"],["btreeset"]],["bool"]]],[11,"first","","Returns a reference to the first value in the set, if any.…",391,[[["self"]],[["option"],["t"]]]],[11,"last","","Returns a reference to the last value in the set, if any.…",391,[[["self"]],[["option"],["t"]]]],[11,"pop_first","","Removes the first value from the set and returns it, if…",391,[[["self"]],["option"]]],[11,"pop_last","","Removes the last value from the set and returns it, if…",391,[[["self"]],["option"]]],[11,"insert","","Adds a value to the set.",391,[[["self"],["t"]],["bool"]]],[11,"replace","","Adds a value to the set, replacing the existing value, if…",391,[[["self"],["t"]],["option"]]],[11,"remove","","Removes a value from the set. Returns whether the value…",391,[[["self"],["q"]],["bool"]]],[11,"take","","Removes and returns the value in the set, if any, that is…",391,[[["self"],["q"]],["option"]]],[11,"append","","Moves all elements from `other` into `Self`, leaving…",391,[[["btreeset"],["self"]]]],[11,"split_off","","Splits the collection into two at the given key. Returns…",391,[[["self"],["q"]],["btreeset"]]],[11,"iter","","Gets an iterator that visits the values in the `BTreeSet`…",391,[[["self"]],["iter"]]],[11,"len","","Returns the number of elements in the set.",391,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no elements.",391,[[["self"]],["bool"]]],[11,"new","","Creates an empty `LinkedList`.",394,[[],["linkedlist"]]],[11,"append","","Moves all elements from `other` to the end of the list.",394,[[["self"],["linkedlist"]]]],[11,"prepend","","Moves all elements from `other` to the begin of the list.",394,[[["self"],["linkedlist"]]]],[11,"iter","","Provides a forward iterator.",394,[[["self"]],["iter"]]],[11,"iter_mut","","Provides a forward iterator with mutable references.",394,[[["self"]],["itermut"]]],[11,"cursor_front","","Provides a cursor at the front element.",394,[[["self"]],["cursor"]]],[11,"cursor_front_mut","","Provides a cursor with editing operations at the front…",394,[[["self"]],["cursormut"]]],[11,"cursor_back","","Provides a cursor at the back element.",394,[[["self"]],["cursor"]]],[11,"cursor_back_mut","","Provides a cursor with editing operations at the back…",394,[[["self"]],["cursormut"]]],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",394,[[["self"]],["bool"]]],[11,"len","","Returns the length of the `LinkedList`.",394,[[["self"]],["usize"]]],[11,"clear","","Removes all elements from the `LinkedList`.",394,[[["self"]]]],[11,"contains","","Returns `true` if the `LinkedList` contains an element…",394,[[["t"],["self"]],["bool"]]],[11,"front","","Provides a reference to the front element, or `None` if…",394,[[["self"]],[["option"],["t"]]]],[11,"front_mut","","Provides a mutable reference to the front element, or…",394,[[["self"]],[["option"],["t"]]]],[11,"back","","Provides a reference to the back element, or `None` if the…",394,[[["self"]],[["option"],["t"]]]],[11,"back_mut","","Provides a mutable reference to the back element, or…",394,[[["self"]],[["option"],["t"]]]],[11,"push_front","","Adds an element first in the list.",394,[[["self"],["t"]]]],[11,"pop_front","","Removes the first element and returns it, or `None` if the…",394,[[["self"]],["option"]]],[11,"push_back","","Appends an element to the back of a list.",394,[[["self"],["t"]]]],[11,"pop_back","","Removes the last element from a list and returns it, or…",394,[[["self"]],["option"]]],[11,"split_off","","Splits the list into two at the given index. Returns…",394,[[["self"],["usize"]],["linkedlist"]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if…",394,[[["self"],["f"]],["drainfilter"]]],[11,"insert_next","std::collections::linked_list","Inserts the given element just after the element most…",396,[[["self"],["t"]]]],[11,"peek_next","","Provides a reference to the next element, without changing…",396,[[["self"]],[["option"],["t"]]]],[11,"index","","Returns the cursor position index within the `LinkedList`.",398,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"move_next","","Moves the cursor to the next element of the `LinkedList`.",398,[[["self"]]]],[11,"move_prev","","Moves the cursor to the previous element of the…",398,[[["self"]]]],[11,"current","","Returns a reference to the element that the cursor is…",398,[[["self"]],[["option"],["t"]]]],[11,"peek_next","","Returns a reference to the next element.",398,[[["self"]],[["option"],["t"]]]],[11,"peek_prev","","Returns a reference to the previous element.",398,[[["self"]],[["option"],["t"]]]],[11,"index","","Returns the cursor position index within the `LinkedList`.",399,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"move_next","","Moves the cursor to the next element of the `LinkedList`.",399,[[["self"]]]],[11,"move_prev","","Moves the cursor to the previous element of the…",399,[[["self"]]]],[11,"current","","Returns a reference to the element that the cursor is…",399,[[["self"]],[["option"],["t"]]]],[11,"peek_next","","Returns a reference to the next element.",399,[[["self"]],[["option"],["t"]]]],[11,"peek_prev","","Returns a reference to the previous element.",399,[[["self"]],[["option"],["t"]]]],[11,"as_cursor","","Returns a read-only cursor pointing to the current element.",399,[[["self"]],["cursor"]]],[11,"insert_after","","Inserts a new element into the `LinkedList` after the…",399,[[["self"],["t"]]]],[11,"insert_before","","Inserts a new element into the `LinkedList` before the…",399,[[["self"],["t"]]]],[11,"remove_current","","Removes the current element from the `LinkedList`.",399,[[["self"]],["option"]]],[11,"splice_after","","Inserts the elements from the given `LinkedList` after the…",399,[[["self"],["linkedlist"]]]],[11,"splice_before","","Inserts the elements from the given `LinkedList` before…",399,[[["self"],["linkedlist"]]]],[11,"split_after","","Splits the list into two after the current element. This…",399,[[["self"]],["linkedlist"]]],[11,"split_before","","Splits the list into two before the current element. This…",399,[[["self"]],["linkedlist"]]],[11,"new","std::collections","Creates an empty `VecDeque`.",401,[[],["vecdeque"]]],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least…",401,[[["usize"]],["vecdeque"]]],[11,"get","","Retrieves an element in the `VecDeque` by index.",401,[[["self"],["usize"]],[["option"],["t"]]]],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",401,[[["self"],["usize"]],[["option"],["t"]]]],[11,"swap","","Swaps elements at indices `i` and `j`.",401,[[["self"],["usize"]]]],[11,"capacity","","Returns the number of elements the `VecDeque` can hold…",401,[[["self"]],["usize"]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional`…",401,[[["self"],["usize"]]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",401,[[["self"],["usize"]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly…",401,[[["self"],["usize"]],[["tryreserveerror"],["result",["tryreserveerror"]]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",401,[[["self"],["usize"]],[["tryreserveerror"],["result",["tryreserveerror"]]]]],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",401,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of the `VecDeque` with a lower bound.",401,[[["self"],["usize"]]]],[11,"truncate","","Shortens the `VecDeque`, keeping the first `len` elements…",401,[[["self"],["usize"]]]],[11,"iter","","Returns a front-to-back iterator.",401,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable…",401,[[["self"]],["itermut"]]],[11,"as_slices","","Returns a pair of slices which contain, in order, the…",401,[[["self"]]]],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the…",401,[[["self"]]]],[11,"len","","Returns the number of elements in the `VecDeque`.",401,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the `VecDeque` is empty.",401,[[["self"]],["bool"]]],[11,"drain","","Creates a draining iterator that removes the specified…",401,[[["self"],["r"]],["drain"]]],[11,"clear","","Clears the `VecDeque`, removing all values.",401,[[["self"]]]],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal…",401,[[["t"],["self"]],["bool"]]],[11,"front","","Provides a reference to the front element, or `None` if…",401,[[["self"]],[["option"],["t"]]]],[11,"front_mut","","Provides a mutable reference to the front element, or…",401,[[["self"]],[["option"],["t"]]]],[11,"back","","Provides a reference to the back element, or `None` if the…",401,[[["self"]],[["option"],["t"]]]],[11,"back_mut","","Provides a mutable reference to the back element, or…",401,[[["self"]],[["option"],["t"]]]],[11,"pop_front","","Removes the first element and returns it, or `None` if the…",401,[[["self"]],["option"]]],[11,"pop_back","","Removes the last element from the `VecDeque` and returns…",401,[[["self"]],["option"]]],[11,"push_front","","Prepends an element to the `VecDeque`.",401,[[["self"],["t"]]]],[11,"push_back","","Appends an element to the back of the `VecDeque`.",401,[[["self"],["t"]]]],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and…",401,[[["self"],["usize"]],["option"]]],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and…",401,[[["self"],["usize"]],["option"]]],[11,"insert","","Inserts an element at `index` within the `VecDeque`,…",401,[[["self"],["usize"],["t"]]]],[11,"remove","","Removes and returns the element at `index` from the…",401,[[["self"],["usize"]],["option"]]],[11,"split_off","","Splits the `VecDeque` into two at the given index.",401,[[["self"],["usize"]],["vecdeque"]]],[11,"append","","Moves all the elements of `other` into `self`, leaving…",401,[[["self"],["vecdeque"]]]],[11,"retain","","Retains only the elements specified by the predicate.",401,[[["self"],["f"]]]],[11,"resize_with","","Modifies the `VecDeque` in-place so that `len()` is equal…",401,[[["self"],["usize"]]]],[11,"rotate_left","","Rotates the double-ended queue `mid` places to the left.",401,[[["self"],["usize"]]]],[11,"rotate_right","","Rotates the double-ended queue `k` places to the right.",401,[[["self"],["usize"]]]],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal…",401,[[["self"],["usize"],["t"]]]],[11,"from_key","std::collections::hash_map","Creates a `RawEntryMut` from the given key.",413,[[["q"]],["rawentrymut"]]],[11,"from_key_hashed_nocheck","","Creates a `RawEntryMut` from the given key and its hash.",413,[[["u64"],["q"]],["rawentrymut"]]],[11,"from_hash","","Creates a `RawEntryMut` from the given hash.",413,[[["u64"],["f"]],["rawentrymut"]]],[11,"from_key","","Access an entry by key.",416,[[["q"]],["option"]]],[11,"from_key_hashed_nocheck","","Access an entry by a key and its hash.",416,[[["u64"],["q"]],["option"]]],[11,"from_hash","","Access an entry by hash.",416,[[["u64"],["f"]],["option"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default…",106,[[["k"],["v"]]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of…",106,[[["f"]]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry…",106,[[["f"]],["self"]]],[11,"key","","Gets a reference to the key in the entry.",414,[[["self"]],["k"]]],[11,"key_mut","","Gets a mutable reference to the key in the entry.",414,[[["self"]],["k"]]],[11,"into_key","","Converts the entry into a mutable reference to the key in…",414,[[],["k"]]],[11,"get","","Gets a reference to the value in the entry.",414,[[["self"]],["v"]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the…",414,[[],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",414,[[["self"]],["v"]]],[11,"get_key_value","","Gets a reference to the key and value in the entry.",414,[[["self"]]]],[11,"get_key_value_mut","","Gets a mutable reference to the key and value in the entry.",414,[[["self"]]]],[11,"into_key_value","","Converts the OccupiedEntry into a mutable reference to the…",414,[[]]],[11,"insert","","Sets the value of the entry, and returns the entry's old…",414,[[["self"],["v"]],["v"]]],[11,"insert_key","","Sets the value of the entry, and returns the entry's old…",414,[[["self"],["k"]],["k"]]],[11,"remove","","Takes the value out of the entry, and returns it.",414,[[],["v"]]],[11,"remove_entry","","Take the ownership of the key and value from the map.",414,[[]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key,…",415,[[["k"],["v"]]]],[11,"insert_hashed_nocheck","","Sets the value of the entry with the VacantEntry's key,…",415,[[["v"],["u64"],["k"]]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default…",107,[[["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of…",107,[[["fnonce"]],["v"]]],[11,"key","","Returns a reference to this entry's key.",107,[[["self"]],["k"]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry…",107,[[["f"]],["self"]]],[11,"insert","","Sets the value of the entry, and returns an OccupiedEntry.",107,[[["v"]],["occupiedentry"]]],[11,"or_default","","Ensures a value is in the entry by inserting the default…",107,[[],["v"]]],[11,"key","","Gets a reference to the key in the entry.",417,[[["self"]],["k"]]],[11,"remove_entry","","Take the ownership of the key and value from the map.",417,[[]]],[11,"get","","Gets a reference to the value in the entry.",417,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",417,[[["self"]],["v"]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the…",417,[[],["v"]]],[11,"insert","","Sets the value of the entry, and returns the entry's old…",417,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value out of the entry, and returns it.",417,[[],["v"]]],[11,"replace_entry","","Replaces the entry, returning the old key and value. The…",417,[[["v"]]]],[11,"replace_key","","Replaces the key in the hash map with the key used to…",417,[[],["k"]]],[11,"key","","Gets a reference to the key that would be used when…",418,[[["self"]],["k"]]],[11,"into_key","","Take ownership of the key.",418,[[],["k"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key,…",418,[[["v"]],["v"]]],[11,"new","","Constructs a new `RandomState` that is initialized with…",419,[[],["randomstate"]]],[11,"new","","Creates a new `DefaultHasher`.",420,[[],["defaulthasher"]]],[11,"as_va_list","std::ffi","Convert a `VaListImpl` into a `VaList` that is…",437,[[["self"]],["valist"]]],[11,"arg","","Advance to the next arg.",437,[[["self"]],["t"]]],[11,"with_copy","","Copies the `va_list` at the current location.",437,[[["self"],["f"]],["r"]]],[11,"min_value","std::num","Returns the smallest value that can be represented by this…",155,[[],[["wrapping",["usize"]],["usize"]]]],[11,"max_value","","Returns the largest value that can be represented by this…",155,[[],[["wrapping",["usize"]],["usize"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",155,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",155,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",155,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",155,[[["u32"]],[["wrapping",["usize"]],["usize"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",155,[[["u32"]],[["wrapping",["usize"]],["usize"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",155,[[],[["wrapping",["usize"]],["usize"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",155,[[],[["wrapping",["usize"]],["usize"]]]],[11,"from_be","","Converts an integer from big endian to the target's…",155,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"from_le","","Converts an integer from little endian to the target's…",155,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",155,[[],[["wrapping",["usize"]],["usize"]]]],[11,"to_le","","Converts `self` to little endian from the target's…",155,[[],[["wrapping",["usize"]],["usize"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",155,[[["u32"]],[["wrapping",["usize"]],["usize"]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",155,[[],[["wrapping",["u8"]],["u8"]]]],[11,"max_value","","Returns the largest value that can be represented by this…",155,[[],[["wrapping",["u8"]],["u8"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",155,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",155,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",155,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",155,[[["u32"]],[["wrapping",["u8"]],["u8"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",155,[[["u32"]],[["wrapping",["u8"]],["u8"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",155,[[],[["wrapping",["u8"]],["u8"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",155,[[],[["wrapping",["u8"]],["u8"]]]],[11,"from_be","","Converts an integer from big endian to the target's…",155,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"from_le","","Converts an integer from little endian to the target's…",155,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",155,[[],[["wrapping",["u8"]],["u8"]]]],[11,"to_le","","Converts `self` to little endian from the target's…",155,[[],[["wrapping",["u8"]],["u8"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",155,[[["u32"]],[["wrapping",["u8"]],["u8"]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",155,[[],[["wrapping",["u16"]],["u16"]]]],[11,"max_value","","Returns the largest value that can be represented by this…",155,[[],[["wrapping",["u16"]],["u16"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",155,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",155,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",155,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",155,[[["u32"]],[["wrapping",["u16"]],["u16"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",155,[[["u32"]],[["wrapping",["u16"]],["u16"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",155,[[],[["wrapping",["u16"]],["u16"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",155,[[],[["wrapping",["u16"]],["u16"]]]],[11,"from_be","","Converts an integer from big endian to the target's…",155,[[["wrapping",["u16"]],["u16"]],[["wrapping",["u16"]],["u16"]]]],[11,"from_le","","Converts an integer from little endian to the target's…",155,[[["wrapping",["u16"]],["u16"]],[["wrapping",["u16"]],["u16"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",155,[[],[["wrapping",["u16"]],["u16"]]]],[11,"to_le","","Converts `self` to little endian from the target's…",155,[[],[["wrapping",["u16"]],["u16"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",155,[[["u32"]],[["wrapping",["u16"]],["u16"]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",155,[[],[["u32"],["wrapping",["u32"]]]]],[11,"max_value","","Returns the largest value that can be represented by this…",155,[[],[["u32"],["wrapping",["u32"]]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",155,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",155,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",155,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",155,[[["u32"]],[["u32"],["wrapping",["u32"]]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",155,[[["u32"]],[["u32"],["wrapping",["u32"]]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",155,[[],[["u32"],["wrapping",["u32"]]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",155,[[],[["u32"],["wrapping",["u32"]]]]],[11,"from_be","","Converts an integer from big endian to the target's…",155,[[["u32"],["wrapping",["u32"]]],[["u32"],["wrapping",["u32"]]]]],[11,"from_le","","Converts an integer from little endian to the target's…",155,[[["u32"],["wrapping",["u32"]]],[["u32"],["wrapping",["u32"]]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",155,[[],[["u32"],["wrapping",["u32"]]]]],[11,"to_le","","Converts `self` to little endian from the target's…",155,[[],[["u32"],["wrapping",["u32"]]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",155,[[["u32"]],[["u32"],["wrapping",["u32"]]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",155,[[],[["u64"],["wrapping",["u64"]]]]],[11,"max_value","","Returns the largest value that can be represented by this…",155,[[],[["u64"],["wrapping",["u64"]]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",155,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",155,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",155,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",155,[[["u32"]],[["u64"],["wrapping",["u64"]]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",155,[[["u32"]],[["u64"],["wrapping",["u64"]]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",155,[[],[["u64"],["wrapping",["u64"]]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",155,[[],[["u64"],["wrapping",["u64"]]]]],[11,"from_be","","Converts an integer from big endian to the target's…",155,[[["u64"],["wrapping",["u64"]]],[["u64"],["wrapping",["u64"]]]]],[11,"from_le","","Converts an integer from little endian to the target's…",155,[[["u64"],["wrapping",["u64"]]],[["u64"],["wrapping",["u64"]]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",155,[[],[["u64"],["wrapping",["u64"]]]]],[11,"to_le","","Converts `self` to little endian from the target's…",155,[[],[["u64"],["wrapping",["u64"]]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",155,[[["u32"]],[["u64"],["wrapping",["u64"]]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",155,[[],[["wrapping",["u128"]],["u128"]]]],[11,"max_value","","Returns the largest value that can be represented by this…",155,[[],[["wrapping",["u128"]],["u128"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",155,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",155,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",155,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",155,[[["u32"]],[["wrapping",["u128"]],["u128"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",155,[[["u32"]],[["wrapping",["u128"]],["u128"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",155,[[],[["wrapping",["u128"]],["u128"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",155,[[],[["wrapping",["u128"]],["u128"]]]],[11,"from_be","","Converts an integer from big endian to the target's…",155,[[["wrapping",["u128"]],["u128"]],[["wrapping",["u128"]],["u128"]]]],[11,"from_le","","Converts an integer from little endian to the target's…",155,[[["wrapping",["u128"]],["u128"]],[["wrapping",["u128"]],["u128"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",155,[[],[["wrapping",["u128"]],["u128"]]]],[11,"to_le","","Converts `self` to little endian from the target's…",155,[[],[["wrapping",["u128"]],["u128"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",155,[[["u32"]],[["wrapping",["u128"]],["u128"]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",155,[[],[["isize"],["wrapping",["isize"]]]]],[11,"max_value","","Returns the largest value that can be represented by this…",155,[[],[["isize"],["wrapping",["isize"]]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",155,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",155,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",155,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",155,[[["u32"]],[["isize"],["wrapping",["isize"]]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",155,[[["u32"]],[["isize"],["wrapping",["isize"]]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",155,[[],[["isize"],["wrapping",["isize"]]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",155,[[],[["isize"],["wrapping",["isize"]]]]],[11,"from_be","","Converts an integer from big endian to the target's…",155,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"from_le","","Converts an integer from little endian to the target's…",155,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",155,[[],[["isize"],["wrapping",["isize"]]]]],[11,"to_le","","Converts `self` to little endian from the target's…",155,[[],[["isize"],["wrapping",["isize"]]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",155,[[["u32"]],[["isize"],["wrapping",["isize"]]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",155,[[],[["wrapping",["i8"]],["i8"]]]],[11,"max_value","","Returns the largest value that can be represented by this…",155,[[],[["wrapping",["i8"]],["i8"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",155,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",155,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",155,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",155,[[["u32"]],[["wrapping",["i8"]],["i8"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",155,[[["u32"]],[["wrapping",["i8"]],["i8"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",155,[[],[["wrapping",["i8"]],["i8"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",155,[[],[["wrapping",["i8"]],["i8"]]]],[11,"from_be","","Converts an integer from big endian to the target's…",155,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"from_le","","Converts an integer from little endian to the target's…",155,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",155,[[],[["wrapping",["i8"]],["i8"]]]],[11,"to_le","","Converts `self` to little endian from the target's…",155,[[],[["wrapping",["i8"]],["i8"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",155,[[["u32"]],[["wrapping",["i8"]],["i8"]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",155,[[],[["wrapping",["i16"]],["i16"]]]],[11,"max_value","","Returns the largest value that can be represented by this…",155,[[],[["wrapping",["i16"]],["i16"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",155,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",155,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",155,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",155,[[["u32"]],[["wrapping",["i16"]],["i16"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",155,[[["u32"]],[["wrapping",["i16"]],["i16"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",155,[[],[["wrapping",["i16"]],["i16"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",155,[[],[["wrapping",["i16"]],["i16"]]]],[11,"from_be","","Converts an integer from big endian to the target's…",155,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"from_le","","Converts an integer from little endian to the target's…",155,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",155,[[],[["wrapping",["i16"]],["i16"]]]],[11,"to_le","","Converts `self` to little endian from the target's…",155,[[],[["wrapping",["i16"]],["i16"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",155,[[["u32"]],[["wrapping",["i16"]],["i16"]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",155,[[],[["wrapping",["i32"]],["i32"]]]],[11,"max_value","","Returns the largest value that can be represented by this…",155,[[],[["wrapping",["i32"]],["i32"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",155,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",155,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",155,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",155,[[["u32"]],[["wrapping",["i32"]],["i32"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",155,[[["u32"]],[["wrapping",["i32"]],["i32"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",155,[[],[["wrapping",["i32"]],["i32"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",155,[[],[["wrapping",["i32"]],["i32"]]]],[11,"from_be","","Converts an integer from big endian to the target's…",155,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"from_le","","Converts an integer from little endian to the target's…",155,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",155,[[],[["wrapping",["i32"]],["i32"]]]],[11,"to_le","","Converts `self` to little endian from the target's…",155,[[],[["wrapping",["i32"]],["i32"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",155,[[["u32"]],[["wrapping",["i32"]],["i32"]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",155,[[],[["i64"],["wrapping",["i64"]]]]],[11,"max_value","","Returns the largest value that can be represented by this…",155,[[],[["i64"],["wrapping",["i64"]]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",155,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",155,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",155,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",155,[[["u32"]],[["i64"],["wrapping",["i64"]]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",155,[[["u32"]],[["i64"],["wrapping",["i64"]]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",155,[[],[["i64"],["wrapping",["i64"]]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",155,[[],[["i64"],["wrapping",["i64"]]]]],[11,"from_be","","Converts an integer from big endian to the target's…",155,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"from_le","","Converts an integer from little endian to the target's…",155,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",155,[[],[["i64"],["wrapping",["i64"]]]]],[11,"to_le","","Converts `self` to little endian from the target's…",155,[[],[["i64"],["wrapping",["i64"]]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",155,[[["u32"]],[["i64"],["wrapping",["i64"]]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",155,[[],[["i128"],["wrapping",["i128"]]]]],[11,"max_value","","Returns the largest value that can be represented by this…",155,[[],[["i128"],["wrapping",["i128"]]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",155,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",155,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",155,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",155,[[["u32"]],[["i128"],["wrapping",["i128"]]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",155,[[["u32"]],[["i128"],["wrapping",["i128"]]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",155,[[],[["i128"],["wrapping",["i128"]]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",155,[[],[["i128"],["wrapping",["i128"]]]]],[11,"from_be","","Converts an integer from big endian to the target's…",155,[[["i128"],["wrapping",["i128"]]],[["i128"],["wrapping",["i128"]]]]],[11,"from_le","","Converts an integer from little endian to the target's…",155,[[["i128"],["wrapping",["i128"]]],[["i128"],["wrapping",["i128"]]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",155,[[],[["i128"],["wrapping",["i128"]]]]],[11,"to_le","","Converts `self` to little endian from the target's…",155,[[],[["i128"],["wrapping",["i128"]]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",155,[[["u32"]],[["i128"],["wrapping",["i128"]]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",155,[[],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at…",155,[[],[["isize"],["wrapping",["isize"]]]]],[11,"signum","","Returns a number representing sign of `self`.",155,[[],[["isize"],["wrapping",["isize"]]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",155,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",155,[[],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",155,[[],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at…",155,[[],[["wrapping",["i8"]],["i8"]]]],[11,"signum","","Returns a number representing sign of `self`.",155,[[],[["wrapping",["i8"]],["i8"]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",155,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",155,[[],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",155,[[],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at…",155,[[],[["wrapping",["i16"]],["i16"]]]],[11,"signum","","Returns a number representing sign of `self`.",155,[[],[["wrapping",["i16"]],["i16"]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",155,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",155,[[],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",155,[[],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at…",155,[[],[["wrapping",["i32"]],["i32"]]]],[11,"signum","","Returns a number representing sign of `self`.",155,[[],[["wrapping",["i32"]],["i32"]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",155,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",155,[[],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",155,[[],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at…",155,[[],[["i64"],["wrapping",["i64"]]]]],[11,"signum","","Returns a number representing sign of `self`.",155,[[],[["i64"],["wrapping",["i64"]]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",155,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",155,[[],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",155,[[],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at…",155,[[],[["i128"],["wrapping",["i128"]]]]],[11,"signum","","Returns a number representing sign of `self`.",155,[[],[["i128"],["wrapping",["i128"]]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",155,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",155,[[],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",155,[[],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",155,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",155,[[],[["wrapping",["usize"]],["usize"]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",155,[[],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",155,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",155,[[],[["wrapping",["u8"]],["u8"]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",155,[[],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",155,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",155,[[],[["wrapping",["u16"]],["u16"]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",155,[[],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",155,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",155,[[],[["u32"],["wrapping",["u32"]]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",155,[[],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",155,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",155,[[],[["u64"],["wrapping",["u64"]]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",155,[[],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",155,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",155,[[],[["wrapping",["u128"]],["u128"]]]],[11,"kind","","Outputs the detailed cause of parsing an integer failing.",452,[[["self"]],["interrorkind"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",454,[[["i128"]],["nonzeroi128"]]],[11,"new","","Creates a non-zero if the given value is not zero.",454,[[["i128"]],[["option",["nonzeroi128"]],["nonzeroi128"]]]],[11,"get","","Returns the value as a primitive type.",454,[[],["i128"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",455,[[["i16"]],["nonzeroi16"]]],[11,"new","","Creates a non-zero if the given value is not zero.",455,[[["i16"]],[["option",["nonzeroi16"]],["nonzeroi16"]]]],[11,"get","","Returns the value as a primitive type.",455,[[],["i16"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",456,[[["i32"]],["nonzeroi32"]]],[11,"new","","Creates a non-zero if the given value is not zero.",456,[[["i32"]],[["nonzeroi32"],["option",["nonzeroi32"]]]]],[11,"get","","Returns the value as a primitive type.",456,[[],["i32"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",457,[[["i64"]],["nonzeroi64"]]],[11,"new","","Creates a non-zero if the given value is not zero.",457,[[["i64"]],[["nonzeroi64"],["option",["nonzeroi64"]]]]],[11,"get","","Returns the value as a primitive type.",457,[[],["i64"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",458,[[["i8"]],["nonzeroi8"]]],[11,"new","","Creates a non-zero if the given value is not zero.",458,[[["i8"]],[["option",["nonzeroi8"]],["nonzeroi8"]]]],[11,"get","","Returns the value as a primitive type.",458,[[],["i8"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",459,[[["isize"]],["nonzeroisize"]]],[11,"new","","Creates a non-zero if the given value is not zero.",459,[[["isize"]],[["option",["nonzeroisize"]],["nonzeroisize"]]]],[11,"get","","Returns the value as a primitive type.",459,[[],["isize"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",460,[[["u128"]],["nonzerou128"]]],[11,"new","","Creates a non-zero if the given value is not zero.",460,[[["u128"]],[["option",["nonzerou128"]],["nonzerou128"]]]],[11,"get","","Returns the value as a primitive type.",460,[[],["u128"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",461,[[["u16"]],["nonzerou16"]]],[11,"new","","Creates a non-zero if the given value is not zero.",461,[[["u16"]],[["option",["nonzerou16"]],["nonzerou16"]]]],[11,"get","","Returns the value as a primitive type.",461,[[],["u16"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",462,[[["u32"]],["nonzerou32"]]],[11,"new","","Creates a non-zero if the given value is not zero.",462,[[["u32"]],[["option",["nonzerou32"]],["nonzerou32"]]]],[11,"get","","Returns the value as a primitive type.",462,[[],["u32"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",463,[[["u64"]],["nonzerou64"]]],[11,"new","","Creates a non-zero if the given value is not zero.",463,[[["u64"]],[["option",["nonzerou64"]],["nonzerou64"]]]],[11,"get","","Returns the value as a primitive type.",463,[[],["u64"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",464,[[["u8"]],["nonzerou8"]]],[11,"new","","Creates a non-zero if the given value is not zero.",464,[[["u8"]],[["option",["nonzerou8"]],["nonzerou8"]]]],[11,"get","","Returns the value as a primitive type.",464,[[],["u8"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",465,[[["usize"]],["nonzerousize"]]],[11,"new","","Creates a non-zero if the given value is not zero.",465,[[["usize"]],[["nonzerousize"],["option",["nonzerousize"]]]]],[11,"get","","Returns the value as a primitive type.",465,[[],["usize"]]],[11,"caller","std::panic","Returns the source location of the caller of this…",468,[[],["location"]]],[11,"file","","Returns the name of the source file from which the panic…",468,[[["self"]],["str"]]],[11,"line","","Returns the line number from which the panic originated.",468,[[["self"]],["u32"]]],[11,"column","","Returns the column from which the panic originated.",468,[[["self"]],["u32"]]],[11,"payload","","Returns the payload associated with the panic.",469,[[["self"]],["any"]]],[11,"message","","If the `panic!` macro from the `core` crate (not from…",469,[[["self"]],[["arguments"],["option",["arguments"]]]]],[11,"location","","Returns information about the location from which the…",469,[[["self"]],[["option",["location"]],["location"]]]],[11,"new","std::sync","Constructs a new `Arc<T>`.",476,[[["t"]],["arc"]]],[11,"new_uninit","","Constructs a new `Arc` with uninitialized contents.",476,[[],[["arc",["maybeuninit"]],["maybeuninit"]]]],[11,"new_zeroed","","Constructs a new `Arc` with uninitialized contents, with…",476,[[],[["arc",["maybeuninit"]],["maybeuninit"]]]],[11,"pin","","Constructs a new `Pin<Arc<T>>`. If `T` does not implement…",476,[[["t"]],[["pin",["arc"]],["arc"]]]],[11,"try_unwrap","","Returns the inner value, if the `Arc` has exactly one…",476,[[["arc"]],[["result",["arc"]],["arc"]]]],[11,"new_uninit_slice","","Constructs a new reference-counted slice with…",476,[[["usize"]],["arc"]]],[11,"assume_init","","Converts to `Arc<T>`.",476,[[],["arc"]]],[11,"assume_init","","Converts to `Arc<[T]>`.",476,[[],["arc"]]],[11,"into_raw","","Consumes the `Arc`, returning the wrapped pointer.",476,[[["arc"]]]],[11,"from_raw","","Constructs an `Arc` from a raw pointer.",476,[[],["arc"]]],[11,"into_raw_non_null","","Consumes the `Arc`, returning the wrapped pointer as…",476,[[["arc"]],["nonnull"]]],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this allocation.",476,[[["arc"]],["weak"]]],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this…",476,[[["arc"]],["usize"]]],[11,"strong_count","","Gets the number of strong (`Arc`) pointers to this…",476,[[["arc"]],["usize"]]],[11,"ptr_eq","","Returns `true` if the two `Arc`s point to the same…",476,[[["arc"]],["bool"]]],[11,"make_mut","","Makes a mutable reference into the given `Arc`.",476,[[["arc"]],["t"]]],[11,"get_mut","","Returns a mutable reference into the given `Arc`, if there…",476,[[["arc"]],[["option"],["t"]]]],[11,"get_mut_unchecked","","Returns a mutable reference into the given `Arc`, without…",476,[[["arc"]],["t"]]],[11,"downcast","","Attempt to downcast the `Arc<dyn Any + Send + Sync>` to a…",476,[[],[["result",["arc","arc"]],["arc",["any"]],["arc"]]]],[11,"new","","Constructs a new `Weak<T>`, without allocating any memory.…",477,[[],["weak"]]],[11,"as_raw","","Returns a raw pointer to the object `T` pointed to by this…",477,[[["self"]]]],[11,"into_raw","","Consumes the `Weak<T>` and turns it into a raw pointer.",477,[[]]],[11,"from_raw","","Converts a raw pointer previously created by [`into_raw`]…",477,[[],["weak"]]],[11,"upgrade","","Attempts to upgrade the `Weak` pointer to an [`Arc`],…",477,[[["self"]],[["option",["arc"]],["arc"]]]],[11,"strong_count","","Gets the number of strong (`Arc`) pointers pointing to…",477,[[["self"]],["usize"]]],[11,"weak_count","","Gets an approximation of the number of `Weak` pointers…",477,[[["self"]],["usize"]]],[11,"ptr_eq","","Returns `true` if the two `Weak`s point to the same…",477,[[["self"],["weak"]],["bool"]]],[11,"new","std::sync::atomic","Creates a new `AtomicBool`.",478,[[["bool"]],["atomicbool"]]],[11,"get_mut","","Returns a mutable reference to the underlying [`bool`].",478,[[["self"]],["bool"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",478,[[],["bool"]]],[11,"load","","Loads a value from the bool.",478,[[["ordering"],["self"]],["bool"]]],[11,"store","","Stores a value into the bool.",478,[[["ordering"],["self"],["bool"]]]],[11,"swap","","Stores a value into the bool, returning the previous value.",478,[[["ordering"],["self"],["bool"]],["bool"]]],[11,"compare_and_swap","","Stores a value into the [`bool`] if the current value is…",478,[[["ordering"],["self"],["bool"]],["bool"]]],[11,"compare_exchange","","Stores a value into the [`bool`] if the current value is…",478,[[["ordering"],["self"],["bool"]],[["bool"],["result",["bool","bool"]]]]],[11,"compare_exchange_weak","","Stores a value into the [`bool`] if the current value is…",478,[[["ordering"],["self"],["bool"]],[["bool"],["result",["bool","bool"]]]]],[11,"fetch_and","","Logical \"and\" with a boolean value.",478,[[["ordering"],["self"],["bool"]],["bool"]]],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",478,[[["ordering"],["self"],["bool"]],["bool"]]],[11,"fetch_or","","Logical \"or\" with a boolean value.",478,[[["ordering"],["self"],["bool"]],["bool"]]],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",478,[[["ordering"],["self"],["bool"]],["bool"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying [`bool`].",478,[[["self"]]]],[11,"new","","Creates a new `AtomicPtr`.",479,[[],["atomicptr"]]],[11,"get_mut","","Returns a mutable reference to the underlying pointer.",479,[[["self"]]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",479,[[]]],[11,"load","","Loads a value from the pointer.",479,[[["ordering"],["self"]]]],[11,"store","","Stores a value into the pointer.",479,[[["ordering"],["self"]]]],[11,"swap","","Stores a value into the pointer, returning the previous…",479,[[["ordering"],["self"]]]],[11,"compare_and_swap","","Stores a value into the pointer if the current value is…",479,[[["ordering"],["self"]]]],[11,"compare_exchange","","Stores a value into the pointer if the current value is…",479,[[["ordering"],["self"]],["result"]]],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is…",479,[[["ordering"],["self"]],["result"]]],[11,"new","","Creates a new atomic integer.",480,[[["i8"]],["atomici8"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",480,[[["self"]],["i8"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",480,[[],["i8"]]],[11,"load","","Loads a value from the atomic integer.",480,[[["ordering"],["self"]],["i8"]]],[11,"store","","Stores a value into the atomic integer.",480,[[["i8"],["self"],["ordering"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",480,[[["i8"],["self"],["ordering"]],["i8"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",480,[[["i8"],["self"],["ordering"]],["i8"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",480,[[["i8"],["ordering"],["self"]],[["result",["i8","i8"]],["i8"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",480,[[["i8"],["ordering"],["self"]],[["result",["i8","i8"]],["i8"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",480,[[["i8"],["self"],["ordering"]],["i8"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",480,[[["i8"],["self"],["ordering"]],["i8"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",480,[[["i8"],["self"],["ordering"]],["i8"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",480,[[["i8"],["self"],["ordering"]],["i8"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",480,[[["i8"],["self"],["ordering"]],["i8"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",480,[[["i8"],["self"],["ordering"]],["i8"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",480,[[["ordering"],["self"],["f"]],[["result",["i8","i8"]],["i8"]]]],[11,"fetch_max","","Maximum with the current value.",480,[[["i8"],["self"],["ordering"]],["i8"]]],[11,"fetch_min","","Minimum with the current value.",480,[[["i8"],["self"],["ordering"]],["i8"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",480,[[["self"]]]],[11,"new","","Creates a new atomic integer.",481,[[["u8"]],["atomicu8"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",481,[[["self"]],["u8"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",481,[[],["u8"]]],[11,"load","","Loads a value from the atomic integer.",481,[[["ordering"],["self"]],["u8"]]],[11,"store","","Stores a value into the atomic integer.",481,[[["ordering"],["self"],["u8"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",481,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",481,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",481,[[["ordering"],["self"],["u8"]],[["result",["u8","u8"]],["u8"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",481,[[["ordering"],["self"],["u8"]],[["result",["u8","u8"]],["u8"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",481,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",481,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",481,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",481,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",481,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",481,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",481,[[["ordering"],["self"],["f"]],[["result",["u8","u8"]],["u8"]]]],[11,"fetch_max","","Maximum with the current value.",481,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"fetch_min","","Minimum with the current value.",481,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",481,[[["self"]]]],[11,"new","","Creates a new atomic integer.",482,[[["i16"]],["atomici16"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",482,[[["self"]],["i16"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",482,[[],["i16"]]],[11,"load","","Loads a value from the atomic integer.",482,[[["ordering"],["self"]],["i16"]]],[11,"store","","Stores a value into the atomic integer.",482,[[["ordering"],["self"],["i16"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",482,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",482,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",482,[[["ordering"],["self"],["i16"]],[["i16"],["result",["i16","i16"]]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",482,[[["ordering"],["self"],["i16"]],[["i16"],["result",["i16","i16"]]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",482,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",482,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",482,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",482,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",482,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",482,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",482,[[["ordering"],["self"],["f"]],[["i16"],["result",["i16","i16"]]]]],[11,"fetch_max","","Maximum with the current value.",482,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"fetch_min","","Minimum with the current value.",482,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",482,[[["self"]]]],[11,"new","","Creates a new atomic integer.",483,[[["u16"]],["atomicu16"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",483,[[["self"]],["u16"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",483,[[],["u16"]]],[11,"load","","Loads a value from the atomic integer.",483,[[["ordering"],["self"]],["u16"]]],[11,"store","","Stores a value into the atomic integer.",483,[[["u16"],["ordering"],["self"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",483,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",483,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",483,[[["u16"],["ordering"],["self"]],[["u16"],["result",["u16","u16"]]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",483,[[["u16"],["ordering"],["self"]],[["u16"],["result",["u16","u16"]]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",483,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",483,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",483,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",483,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",483,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",483,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",483,[[["ordering"],["self"],["f"]],[["u16"],["result",["u16","u16"]]]]],[11,"fetch_max","","Maximum with the current value.",483,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"fetch_min","","Minimum with the current value.",483,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",483,[[["self"]]]],[11,"new","","Creates a new atomic integer.",484,[[["i32"]],["atomici32"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",484,[[["self"]],["i32"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",484,[[],["i32"]]],[11,"load","","Loads a value from the atomic integer.",484,[[["ordering"],["self"]],["i32"]]],[11,"store","","Stores a value into the atomic integer.",484,[[["ordering"],["self"],["i32"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",484,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",484,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",484,[[["i32"],["ordering"],["self"]],[["result",["i32","i32"]],["i32"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",484,[[["i32"],["ordering"],["self"]],[["result",["i32","i32"]],["i32"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",484,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",484,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",484,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",484,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",484,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",484,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",484,[[["ordering"],["self"],["f"]],[["result",["i32","i32"]],["i32"]]]],[11,"fetch_max","","Maximum with the current value.",484,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"fetch_min","","Minimum with the current value.",484,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",484,[[["self"]]]],[11,"new","","Creates a new atomic integer.",485,[[["u32"]],["atomicu32"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",485,[[["self"]],["u32"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",485,[[],["u32"]]],[11,"load","","Loads a value from the atomic integer.",485,[[["ordering"],["self"]],["u32"]]],[11,"store","","Stores a value into the atomic integer.",485,[[["u32"],["self"],["ordering"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",485,[[["u32"],["self"],["ordering"]],["u32"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",485,[[["u32"],["self"],["ordering"]],["u32"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",485,[[["u32"],["ordering"],["self"]],[["result",["u32","u32"]],["u32"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",485,[[["u32"],["ordering"],["self"]],[["result",["u32","u32"]],["u32"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",485,[[["u32"],["self"],["ordering"]],["u32"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",485,[[["u32"],["self"],["ordering"]],["u32"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",485,[[["u32"],["self"],["ordering"]],["u32"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",485,[[["u32"],["self"],["ordering"]],["u32"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",485,[[["u32"],["self"],["ordering"]],["u32"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",485,[[["u32"],["self"],["ordering"]],["u32"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",485,[[["ordering"],["self"],["f"]],[["result",["u32","u32"]],["u32"]]]],[11,"fetch_max","","Maximum with the current value.",485,[[["u32"],["self"],["ordering"]],["u32"]]],[11,"fetch_min","","Minimum with the current value.",485,[[["u32"],["self"],["ordering"]],["u32"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",485,[[["self"]]]],[11,"new","","Creates a new atomic integer.",486,[[["i64"]],["atomici64"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",486,[[["self"]],["i64"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",486,[[],["i64"]]],[11,"load","","Loads a value from the atomic integer.",486,[[["ordering"],["self"]],["i64"]]],[11,"store","","Stores a value into the atomic integer.",486,[[["i64"],["ordering"],["self"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",486,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",486,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",486,[[["i64"],["ordering"],["self"]],[["i64"],["result",["i64","i64"]]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",486,[[["i64"],["ordering"],["self"]],[["i64"],["result",["i64","i64"]]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",486,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",486,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",486,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",486,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",486,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",486,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",486,[[["ordering"],["self"],["f"]],[["i64"],["result",["i64","i64"]]]]],[11,"fetch_max","","Maximum with the current value.",486,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"fetch_min","","Minimum with the current value.",486,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",486,[[["self"]]]],[11,"new","","Creates a new atomic integer.",487,[[["u64"]],["atomicu64"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",487,[[["self"]],["u64"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",487,[[],["u64"]]],[11,"load","","Loads a value from the atomic integer.",487,[[["ordering"],["self"]],["u64"]]],[11,"store","","Stores a value into the atomic integer.",487,[[["ordering"],["self"],["u64"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",487,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",487,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",487,[[["ordering"],["self"],["u64"]],[["u64"],["result",["u64","u64"]]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",487,[[["ordering"],["self"],["u64"]],[["u64"],["result",["u64","u64"]]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",487,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",487,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",487,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",487,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",487,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",487,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",487,[[["ordering"],["self"],["f"]],[["u64"],["result",["u64","u64"]]]]],[11,"fetch_max","","Maximum with the current value.",487,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"fetch_min","","Minimum with the current value.",487,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",487,[[["self"]]]],[11,"new","","Creates a new atomic integer.",488,[[["isize"]],["atomicisize"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",488,[[["self"]],["isize"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",488,[[],["isize"]]],[11,"load","","Loads a value from the atomic integer.",488,[[["ordering"],["self"]],["isize"]]],[11,"store","","Stores a value into the atomic integer.",488,[[["isize"],["ordering"],["self"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",488,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",488,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",488,[[["isize"],["ordering"],["self"]],[["isize"],["result",["isize","isize"]]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",488,[[["isize"],["ordering"],["self"]],[["isize"],["result",["isize","isize"]]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",488,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",488,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",488,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",488,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",488,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",488,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",488,[[["ordering"],["self"],["f"]],[["isize"],["result",["isize","isize"]]]]],[11,"fetch_max","","Maximum with the current value.",488,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"fetch_min","","Minimum with the current value.",488,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",488,[[["self"]]]],[11,"new","","Creates a new atomic integer.",489,[[["usize"]],["atomicusize"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",489,[[["self"]],["usize"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",489,[[],["usize"]]],[11,"load","","Loads a value from the atomic integer.",489,[[["ordering"],["self"]],["usize"]]],[11,"store","","Stores a value into the atomic integer.",489,[[["ordering"],["self"],["usize"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",489,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",489,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",489,[[["usize"],["ordering"],["self"]],[["result",["usize","usize"]],["usize"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",489,[[["usize"],["ordering"],["self"]],[["result",["usize","usize"]],["usize"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",489,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",489,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",489,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",489,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",489,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",489,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",489,[[["ordering"],["self"],["f"]],[["result",["usize","usize"]],["usize"]]]],[11,"fetch_max","","Maximum with the current value.",489,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"fetch_min","","Minimum with the current value.",489,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",489,[[["self"]]]],[18,"SECOND","std::time","The duration of one second.",497,null],[18,"MILLISECOND","","The duration of one millisecond.",497,null],[18,"MICROSECOND","","The duration of one microsecond.",497,null],[18,"NANOSECOND","","The duration of one nanosecond.",497,null],[11,"new","","Creates a new `Duration` from the specified number of…",497,[[["u32"],["u64"]],["duration"]]],[11,"from_secs","","Creates a new `Duration` from the specified number of…",497,[[["u64"]],["duration"]]],[11,"from_millis","","Creates a new `Duration` from the specified number of…",497,[[["u64"]],["duration"]]],[11,"from_micros","","Creates a new `Duration` from the specified number of…",497,[[["u64"]],["duration"]]],[11,"from_nanos","","Creates a new `Duration` from the specified number of…",497,[[["u64"]],["duration"]]],[11,"as_secs","","Returns the number of whole seconds contained by this…",497,[[["self"]],["u64"]]],[11,"subsec_millis","","Returns the fractional part of this `Duration`, in whole…",497,[[["self"]],["u32"]]],[11,"subsec_micros","","Returns the fractional part of this `Duration`, in whole…",497,[[["self"]],["u32"]]],[11,"subsec_nanos","","Returns the fractional part of this `Duration`, in…",497,[[["self"]],["u32"]]],[11,"as_millis","","Returns the total number of whole milliseconds contained…",497,[[["self"]],["u128"]]],[11,"as_micros","","Returns the total number of whole microseconds contained…",497,[[["self"]],["u128"]]],[11,"as_nanos","","Returns the total number of nanoseconds contained by this…",497,[[["self"]],["u128"]]],[11,"checked_add","","Checked `Duration` addition. Computes `self + other`,…",497,[[["duration"]],[["option",["duration"]],["duration"]]]],[11,"checked_sub","","Checked `Duration` subtraction. Computes `self - other`,…",497,[[["duration"]],[["option",["duration"]],["duration"]]]],[11,"checked_mul","","Checked `Duration` multiplication. Computes `self *…",497,[[["u32"]],[["option",["duration"]],["duration"]]]],[11,"checked_div","","Checked `Duration` division. Computes `self / other`,…",497,[[["u32"]],[["option",["duration"]],["duration"]]]],[11,"as_secs_f64","","Returns the number of seconds contained by this `Duration`…",497,[[["self"]],["f64"]]],[11,"as_secs_f32","","Returns the number of seconds contained by this `Duration`…",497,[[["self"]],["f32"]]],[11,"from_secs_f64","","Creates a new `Duration` from the specified number of…",497,[[["f64"]],["duration"]]],[11,"from_secs_f32","","Creates a new `Duration` from the specified number of…",497,[[["f32"]],["duration"]]],[11,"mul_f64","","Multiplies `Duration` by `f64`.",497,[[["f64"]],["duration"]]],[11,"mul_f32","","Multiplies `Duration` by `f32`.",497,[[["f32"]],["duration"]]],[11,"div_f64","","Divide `Duration` by `f64`.",497,[[["f64"]],["duration"]]],[11,"div_f32","","Divide `Duration` by `f32`.",497,[[["f32"]],["duration"]]],[11,"div_duration_f64","","Divide `Duration` by `Duration` and return `f64`.",497,[[["duration"]],["f64"]]],[11,"div_duration_f32","","Divide `Duration` by `Duration` and return `f32`.",497,[[["duration"]],["f32"]]],[11,"map","std::task","Changes the ready value of this `Poll` with the closure…",224,[[["f"]],["poll"]]],[11,"is_ready","","Returns `true` if this is `Poll::Ready`",224,[[["self"]],["bool"]]],[11,"is_pending","","Returns `true` if this is `Poll::Pending`",224,[[["self"]],["bool"]]],[11,"map_ok","","Changes the success value of this `Poll` with the closure…",224,[[["f"]],[["result"],["poll",["result"]]]]],[11,"map_err","","Changes the error value of this `Poll` with the closure…",224,[[["f"]],[["poll",["result"]],["result"]]]],[11,"map_ok","","Changes the success value of this `Poll` with the closure…",224,[[["f"]],[["option",["result"]],["poll",["option"]]]]],[11,"map_err","","Changes the error value of this `Poll` with the closure…",224,[[["f"]],[["option",["result"]],["poll",["option"]]]]],[11,"from_waker","","Create a new `Context` from a `&Waker`.",498,[[["waker"]],["context"]]],[11,"waker","","Returns a reference to the `Waker` for the current task.",498,[[["self"]],["waker"]]],[11,"new","","Creates a new `RawWaker` from the provided `data` pointer…",499,[[["rawwakervtable"]],["rawwaker"]]],[11,"new","","Creates a new `RawWakerVTable` from the provided `clone`,…",500,[[],["rawwakervtable"]]],[11,"wake","","Wake up the task associated with this `Waker`.",501,[[]]],[11,"wake_by_ref","","Wake up the task associated with this `Waker` without…",501,[[["self"]]]],[11,"will_wake","","Returns `true` if this `Waker` and another `Waker` have…",501,[[["waker"],["self"]],["bool"]]],[11,"from_raw","","Creates a new `Waker` from [`RawWaker`].",501,[[["rawwaker"]],["waker"]]],[11,"from_size_align","std::alloc","Constructs a `Layout` from a given `size` and `align`, or…",503,[[["usize"]],[["result",["layout","layouterr"]],["layout"],["layouterr"]]]],[11,"from_size_align_unchecked","","Creates a layout, bypassing all checks.",503,[[["usize"]],["layout"]]],[11,"size","","The minimum size in bytes for a memory block of this layout.",503,[[["self"]],["usize"]]],[11,"align","","The minimum byte alignment for a memory block of this…",503,[[["self"]],["usize"]]],[11,"new","","Constructs a `Layout` suitable for holding a value of type…",503,[[],["layout"]]],[11,"for_value","","Produces layout describing a record that could be used to…",503,[[["t"]],["layout"]]],[11,"align_to","","Creates a layout describing the record that can hold a…",503,[[["self"],["usize"]],[["result",["layout","layouterr"]],["layout"],["layouterr"]]]],[11,"padding_needed_for","","Returns the amount of padding we must insert after `self`…",503,[[["self"],["usize"]],["usize"]]],[11,"pad_to_align","","Creates a layout by rounding the size of this layout up to…",503,[[["self"]],["layout"]]],[11,"repeat","","Creates a layout describing the record for `n` instances…",503,[[["self"],["usize"]],[["result",["layouterr"]],["layouterr"]]]],[11,"extend","","Creates a layout describing the record for `self` followed…",503,[[["self"],["layout"]],[["result",["layouterr"]],["layouterr"]]]],[11,"repeat_packed","","Creates a layout describing the record for `n` instances…",503,[[["self"],["usize"]],[["result",["layout","layouterr"]],["layout"],["layouterr"]]]],[11,"extend_packed","","Creates a layout describing the record for `self` followed…",503,[[["self"],["layout"]],[["result",["layout","layouterr"]],["layout"],["layouterr"]]]],[11,"array","","Creates a layout describing the record for a `[T; n]`.",503,[[["usize"]],[["result",["layout","layouterr"]],["layout"],["layouterr"]]]],[11,"description","","",506,[[["self"]],["str"]]]],"p":[[8,"ToOwned"],[4,"Cow"],[8,"Borrow"],[8,"BorrowMut"],[4,"Alignment"],[8,"Binary"],[8,"Octal"],[8,"Debug"],[8,"Display"],[8,"Write"],[8,"LowerExp"],[8,"UpperExp"],[8,"LowerHex"],[8,"Pointer"],[8,"UpperHex"],[8,"Concat"],[8,"Join"],[8,"SliceIndex"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"FromStr"],[8,"ToString"],[8,"Any"],[8,"FixedSizeArray"],[3,"UnicodeVersion"],[8,"Clone"],[8,"PartialEq"],[4,"Ordering"],[3,"Reverse"],[8,"Ord"],[8,"PartialOrd"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"TryInto"],[8,"TryFrom"],[8,"Default"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"Iterator"],[8,"Step"],[8,"DoubleEndedIterator"],[8,"Extend"],[8,"FromIterator"],[8,"IntoIterator"],[8,"ExactSizeIterator"],[8,"Product"],[8,"Sum"],[8,"Add"],[8,"Div"],[8,"Mul"],[8,"Neg"],[8,"Rem"],[8,"Sub"],[8,"AddAssign"],[8,"DivAssign"],[8,"MulAssign"],[8,"RemAssign"],[8,"SubAssign"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Not"],[8,"Shl"],[8,"Shr"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Deref"],[8,"DerefMut"],[8,"Drop"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Index"],[8,"IndexMut"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Bound"],[8,"RangeBounds"],[3,"RangeToInclusive"],[8,"Try"],[8,"Generator"],[4,"GeneratorState"],[4,"Option"],[3,"TraitObject"],[4,"Result"],[3,"LocalKey"],[3,"Builder"],[3,"ThreadId"],[3,"Thread"],[3,"JoinHandle"],[8,"AsciiExt"],[4,"BacktraceStatus"],[3,"Backtrace"],[4,"Entry"],[4,"TryReserveError"],[3,"HashMap"],[3,"HashSet"],[4,"RawEntryMut"],[4,"Entry"],[4,"VarError"],[8,"Error"],[3,"CString"],[3,"NulError"],[3,"IntoStringError"],[3,"CStr"],[3,"OsString"],[3,"OsStr"],[3,"File"],[3,"OpenOptions"],[3,"Metadata"],[3,"Permissions"],[3,"FileType"],[3,"DirEntry"],[3,"DirBuilder"],[4,"ErrorKind"],[4,"SeekFrom"],[3,"BufReader"],[3,"BufWriter"],[3,"IntoInnerError"],[3,"LineWriter"],[3,"Cursor"],[3,"Error"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"],[8,"Read"],[8,"Write"],[8,"Seek"],[8,"BufRead"],[3,"IoSliceMut"],[3,"IoSlice"],[3,"Initializer"],[3,"Chain"],[3,"Take"],[4,"SocketAddr"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[4,"Shutdown"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[8,"ToSocketAddrs"],[3,"Wrapping"],[4,"FpCategory"],[4,"IntErrorKind"],[8,"OsStringExt"],[8,"OsStrExt"],[8,"FileExt"],[8,"PermissionsExt"],[8,"OpenOptionsExt"],[8,"MetadataExt"],[8,"FileTypeExt"],[8,"DirEntryExt"],[8,"DirBuilderExt"],[8,"AsRawFd"],[8,"FromRawFd"],[8,"IntoRawFd"],[8,"CommandExt"],[8,"ExitStatusExt"],[8,"JoinHandleExt"],[8,"OsStringExt"],[8,"OsStrExt"],[8,"FileExt"],[8,"OpenOptionsExt"],[8,"MetadataExt"],[8,"FileTypeExt"],[8,"AsRawHandle"],[8,"FromRawHandle"],[8,"IntoRawHandle"],[8,"AsRawSocket"],[8,"FromRawSocket"],[8,"IntoRawSocket"],[8,"ExitStatusExt"],[8,"CommandExt"],[8,"MetadataExt"],[3,"stat"],[3,"AssertUnwindSafe"],[4,"Prefix"],[4,"Component"],[3,"PrefixComponent"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[3,"Child"],[3,"Output"],[8,"Termination"],[3,"Command"],[3,"Stdio"],[3,"ExitStatus"],[3,"ExitCode"],[4,"Ordering"],[4,"TryLockError"],[3,"SendError"],[4,"TryRecvError"],[4,"RecvTimeoutError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"Mutex"],[3,"Once"],[3,"OnceState"],[3,"RwLock"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[4,"Poll"],[8,"Future"],[3,"PoisonError"],[3,"SocketAddr"],[3,"UnixStream"],[3,"UnixListener"],[3,"UnixDatagram"],[3,"Excess"],[8,"GlobalAlloc"],[8,"Alloc"],[3,"Box"],[3,"Error"],[3,"Arguments"],[3,"DebugList"],[3,"DebugMap"],[3,"DebugSet"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"Formatter"],[3,"Rc"],[3,"Weak"],[3,"Chunks"],[3,"Windows"],[3,"ChunksExact"],[3,"ChunksExactMut"],[3,"ChunksMut"],[3,"Split"],[3,"SplitMut"],[3,"Iter"],[3,"IterMut"],[3,"RChunks"],[3,"RChunksExact"],[3,"RChunksExactMut"],[3,"RChunksMut"],[3,"RSplit"],[3,"RSplitMut"],[3,"RSplitN"],[3,"RSplitNMut"],[3,"SplitN"],[3,"SplitNMut"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"EncodeUtf16"],[3,"SplitAsciiWhitespace"],[3,"SplitWhitespace"],[3,"Bytes"],[3,"CharIndices"],[3,"Chars"],[3,"ParseBoolError"],[3,"EscapeDebug"],[3,"EscapeDefault"],[3,"EscapeUnicode"],[3,"Utf8Error"],[3,"Lines"],[3,"LinesAny"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"RSplit"],[3,"Split"],[3,"RSplitN"],[3,"SplitN"],[3,"RSplitTerminator"],[3,"SplitTerminator"],[3,"String"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[3,"Drain"],[3,"Vec"],[3,"IntoIter"],[3,"Drain"],[3,"Splice"],[3,"DrainFilter"],[3,"TypeId"],[3,"TryFromSliceError"],[3,"IntoIter"],[3,"Cell"],[3,"RefCell"],[3,"BorrowError"],[3,"BorrowMutError"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EscapeDebug"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"CharTryFromError"],[3,"ParseCharError"],[3,"DecodeUtf16"],[3,"DecodeUtf16Error"],[4,"Infallible"],[3,"BuildHasherDefault"],[3,"SipHasher"],[3,"Empty"],[3,"FromFn"],[3,"Once"],[3,"OnceWith"],[3,"Repeat"],[3,"RepeatWith"],[3,"Successors"],[3,"Cloned"],[3,"Copied"],[3,"Flatten"],[3,"StepBy"],[3,"Chain"],[3,"Cycle"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"Map"],[3,"Rev"],[3,"Zip"],[3,"FlatMap"],[3,"Peekable"],[3,"Scan"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Fuse"],[3,"Inspect"],[3,"PhantomData"],[3,"PhantomPinned"],[3,"Discriminant"],[3,"ManuallyDrop"],[19,"MaybeUninit"],[3,"RangeFull"],[3,"RangeInclusive"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"NoneError"],[3,"Pin"],[3,"NonNull"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"AccessError"],[3,"EscapeDefault"],[3,"BinaryHeap"],[3,"PeekMut"],[3,"Iter"],[3,"IntoIter"],[3,"IntoIterSorted"],[3,"Drain"],[3,"DrainSorted"],[3,"BTreeMap"],[3,"Keys"],[3,"Iter"],[3,"IntoIter"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"IterMut"],[3,"ValuesMut"],[3,"Iter"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"BTreeSet"],[3,"IntoIter"],[3,"Range"],[3,"LinkedList"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Cursor"],[3,"CursorMut"],[3,"DrainFilter"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"ValuesMut"],[3,"RawEntryBuilderMut"],[3,"RawOccupiedEntryMut"],[3,"RawVacantEntryMut"],[3,"RawEntryBuilder"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"DefaultHasher"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"Vars"],[3,"VarsOs"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"Chain"],[4,"c_void"],[3,"VaList"],[3,"VaListImpl"],[3,"FromBytesWithNulError"],[3,"ReadDir"],[3,"StderrLock"],[3,"StdinLock"],[3,"StdoutLock"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"Bytes"],[3,"Split"],[3,"Lines"],[3,"AddrParseError"],[3,"Incoming"],[3,"ParseFloatError"],[3,"ParseIntError"],[3,"TryFromIntError"],[3,"NonZeroI128"],[3,"NonZeroI16"],[3,"NonZeroI32"],[3,"NonZeroI64"],[3,"NonZeroI8"],[3,"NonZeroIsize"],[3,"NonZeroU128"],[3,"NonZeroU16"],[3,"NonZeroU32"],[3,"NonZeroU64"],[3,"NonZeroU8"],[3,"NonZeroUsize"],[3,"Incoming"],[3,"EncodeWide"],[3,"Location"],[3,"PanicInfo"],[3,"Ancestors"],[3,"StripPrefixError"],[3,"Display"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"Arc"],[3,"Weak"],[3,"AtomicBool"],[3,"AtomicPtr"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"MutexGuard"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Iter"],[3,"TryIter"],[3,"IntoIter"],[3,"RecvError"],[3,"Duration"],[3,"Context"],[3,"RawWaker"],[3,"RawWakerVTable"],[3,"Waker"],[3,"Global"],[3,"Layout"],[3,"LayoutErr"],[3,"AllocErr"],[3,"CannotReallocInPlace"],[3,"System"],[15,"reference"],[15,"str"],[15,"slice"],[15,"i128"],[15,"bool"],[15,"u8"],[15,"i16"],[15,"isize"],[15,"u16"],[15,"u32"],[15,"u128"],[15,"u64"],[15,"i64"],[15,"usize"],[15,"i8"],[15,"i32"],[15,"fn"],[15,"pointer"],[15,"char"],[15,"array"],[15,"f32"],[15,"f64"],[15,"never"],[15,"tuple"],[15,"unit"],[6,"ParseError"]]};
searchIndex["test"] = {"doc":"Support code for rustc's built in unit-test and…","i":[[5,"black_box","test","An identity function that hints to the compiler to be…",null,[[["t"]],["t"]]],[3,"Options","","Options for the test run defined by the caller (instead of…",null,null],[12,"display_output","","",0,null],[12,"panic_abort","","",0,null],[3,"TestDesc","","",null,null],[12,"name","","",1,null],[12,"ignore","","",1,null],[12,"should_panic","","",1,null],[12,"allow_fail","","",1,null],[12,"test_type","","",1,null],[3,"TestDescAndFn","","",null,null],[12,"desc","","",2,null],[12,"testfn","","",2,null],[3,"TestOpts","","",null,null],[12,"list","","",3,null],[12,"filter","","",3,null],[12,"filter_exact","","",3,null],[12,"force_run_in_process","","",3,null],[12,"exclude_should_panic","","",3,null],[12,"run_ignored","","",3,null],[12,"run_tests","","",3,null],[12,"bench_benchmarks","","",3,null],[12,"logfile","","",3,null],[12,"nocapture","","",3,null],[12,"color","","",3,null],[12,"format","","",3,null],[12,"test_threads","","",3,null],[12,"skip","","",3,null],[12,"time_options","","",3,null],[12,"options","","",3,null],[4,"ColorConfig","","Whether should console output be colored or not",null,null],[13,"AutoColor","","",4,null],[13,"AlwaysColor","","",4,null],[13,"NeverColor","","",4,null],[4,"OutputFormat","","Format of the test results output",null,null],[13,"Pretty","","Verbose output",5,null],[13,"Terse","","Quiet output",5,null],[13,"Json","","JSON output",5,null],[4,"RunIgnored","","Whether ignored test should be runned or not",null,null],[13,"Yes","","",6,null],[13,"No","","",6,null],[13,"Only","","Run only ignored tests",6,null],[4,"ShouldPanic","","Whether test is expected to panic or not",null,null],[13,"No","","",7,null],[13,"Yes","","",7,null],[13,"YesWithMessage","","",7,null],[4,"TestType","","Type of the test according to the rust book conventions.",null,null],[13,"UnitTest","","Unit-tests are expected to be in the `src` folder of the…",8,null],[13,"IntegrationTest","","Integration-style tests are expected to be in the `tests`…",8,null],[13,"DocTest","","Doctests are created by the `librustdoc` manually, so it's…",8,null],[13,"Unknown","","Tests for the sources that don't follow the project layout…",8,null],[4,"NamePadding","","",null,null],[13,"PadNone","","",9,null],[13,"PadOnRight","","",9,null],[4,"TestName","","",null,null],[13,"StaticTestName","","",10,null],[13,"DynTestName","","",10,null],[13,"AlignedTestName","","",10,null],[4,"TestFn","","",null,null],[13,"StaticTestFn","","",11,null],[13,"StaticBenchFn","","",11,null],[13,"DynTestFn","","",11,null],[13,"DynBenchFn","","",11,null],[5,"run_tests_console","","A simple console test runner. Runs provided tests…",null,[[["testopts"],["vec",["testdescandfn"]],["testdescandfn"]],[["result",["bool"]],["bool"]]]],[5,"test_main","","",null,[[["option",["options"]],["vec",["testdescandfn"]],["options"],["testdescandfn"]]]],[5,"test_main_static","","A variant optimized for invocation with a static test…",null,[[]]],[5,"test_main_static_abort","","A variant optimized for invocation with a static test…",null,[[]]],[5,"assert_test_result","","Invoked when unit tests terminate. Should panic if the…",null,[[["termination"]]]],[5,"run_tests","","",null,[[["testopts"],["vec",["testdescandfn"]],["testdescandfn"],["f"]],["result"]]],[5,"filter_tests","","",null,[[["testopts"],["vec",["testdescandfn"]],["testdescandfn"]],[["vec",["testdescandfn"]],["testdescandfn"]]]],[5,"convert_benchmarks_to_tests","","",null,[[["vec",["testdescandfn"]],["testdescandfn"]],[["vec",["testdescandfn"]],["testdescandfn"]]]],[5,"run_test","","",null,[[["testopts"],["runstrategy"],["testdescandfn"],["sender",["completedtest"]],["completedtest"],["concurrent"],["bool"]]]],[0,"test","","",null,null],[3,"TestOpts","test::test","",null,null],[12,"list","","",3,null],[12,"filter","","",3,null],[12,"filter_exact","","",3,null],[12,"force_run_in_process","","",3,null],[12,"exclude_should_panic","","",3,null],[12,"run_ignored","","",3,null],[12,"run_tests","","",3,null],[12,"bench_benchmarks","","",3,null],[12,"logfile","","",3,null],[12,"nocapture","","",3,null],[12,"color","","",3,null],[12,"format","","",3,null],[12,"test_threads","","",3,null],[12,"skip","","",3,null],[12,"time_options","","",3,null],[12,"options","","",3,null],[3,"Metric","","",null,null],[3,"MetricMap","","",null,null],[3,"Options","","Options for the test run defined by the caller (instead of…",null,null],[12,"display_output","","",0,null],[12,"panic_abort","","",0,null],[3,"TestExecTime","","The meassured execution time of a unit test.",null,null],[12,"0","","",12,null],[3,"TestTimeOptions","","Structure with parameters for calculating test execution…",null,null],[12,"error_on_excess","","Denotes if the test critical execution time limit excess…",13,null],[12,"colored","","",13,null],[12,"unit_threshold","","",13,null],[12,"integration_threshold","","",13,null],[12,"doctest_threshold","","",13,null],[3,"TestDesc","","",null,null],[12,"name","","",1,null],[12,"ignore","","",1,null],[12,"should_panic","","",1,null],[12,"allow_fail","","",1,null],[12,"test_type","","",1,null],[3,"TestDescAndFn","","",null,null],[12,"desc","","",2,null],[12,"testfn","","",2,null],[4,"RunIgnored","","Whether ignored test should be runned or not",null,null],[13,"Yes","","",6,null],[13,"No","","",6,null],[13,"Only","","Run only ignored tests",6,null],[4,"RunStrategy","","",null,null],[13,"InProcess","","Runs the test in the current process, and sends the result…",14,null],[13,"SpawnPrimary","","Spawns a subprocess to run the test, and sends the result…",14,null],[4,"ShouldPanic","","Whether test is expected to panic or not",null,null],[13,"No","","",7,null],[13,"Yes","","",7,null],[13,"YesWithMessage","","",7,null],[4,"TestResult","","",null,null],[13,"TrOk","","",15,null],[13,"TrFailed","","",15,null],[13,"TrFailedMsg","","",15,null],[13,"TrIgnored","","",15,null],[13,"TrAllowedFail","","",15,null],[13,"TrBench","","",15,null],[13,"TrTimedFail","","",15,null],[4,"TestName","","",null,null],[13,"StaticTestName","","",10,null],[13,"DynTestName","","",10,null],[13,"AlignedTestName","","",10,null],[4,"TestType","","Type of the test according to the rust book conventions.",null,null],[13,"UnitTest","","Unit-tests are expected to be in the `src` folder of the…",8,null],[13,"IntegrationTest","","Integration-style tests are expected to be in the `tests`…",8,null],[13,"DocTest","","Doctests are created by the `librustdoc` manually, so it's…",8,null],[13,"Unknown","","Tests for the sources that don't follow the project layout…",8,null],[5,"parse_opts","","Parses command line arguments into test options. Returns…",null,[[],[["option",["result"]],["result",["testopts","string"]]]]],[0,"bench","test","Benchmarking module.",null,null],[5,"black_box","test::bench","An identity function that hints to the compiler to be…",null,[[["t"]],["t"]]],[3,"Bencher","","Manager of the benchmarking runs.",null,null],[12,"bytes","","",16,null],[3,"BenchSamples","","",null,null],[12,"ns_iter_summ","","",17,null],[12,"mb_s","","",17,null],[5,"fmt_bench_samples","","",null,[[["benchsamples"]],["string"]]],[5,"iter","","",null,[[["f"]],["summary"]]],[5,"benchmark","","",null,[[["bool"],["sender",["completedtest"]],["completedtest"],["f"],["testdesc"]]]],[5,"run_once","","",null,[[["f"]]]],[11,"iter","","Callback for benchmark functions to run in their body.",16,[[["self"],["f"]]]],[11,"bench","","",16,[[["self"],["f"]],[["summary"],["option",["summary"]]]]],[11,"use_color","test","",3,[[["self"]],["bool"]]],[11,"new","test::test","",18,[[["f64"]],["metric"]]],[11,"new","","",19,[[],["metricmap"]]],[11,"insert_metric","","Insert a named `value` (+/- `noise`) metric into the map.…",19,[[["str"],["self"],["f64"]]]],[11,"fmt_metrics","","",19,[[["self"]],["string"]]],[11,"new","test","",0,[[],["options"]]],[11,"display_output","","",0,[[["bool"]],["options"]]],[11,"panic_abort","","",0,[[["bool"]],["options"]]],[0,"stats","","",null,null],[3,"Summary","test::stats","Extracted collection of all the summary statistics of a…",null,null],[12,"sum","","",20,null],[12,"min","","",20,null],[12,"max","","",20,null],[12,"mean","","",20,null],[12,"median","","",20,null],[12,"var","","",20,null],[12,"std_dev","","",20,null],[12,"std_dev_pct","","",20,null],[12,"median_abs_dev","","",20,null],[12,"median_abs_dev_pct","","",20,null],[12,"quartiles","","",20,null],[12,"iqr","","",20,null],[5,"winsorize","","Winsorize a set of samples, replacing values above the…",null,[[["f64"]]]],[8,"Stats","","Trait that provides simple descriptive statistics on a…",null,null],[10,"sum","","Sum of the samples.",21,[[["self"]],["f64"]]],[10,"min","","Minimum value of the samples.",21,[[["self"]],["f64"]]],[10,"max","","Maximum value of the samples.",21,[[["self"]],["f64"]]],[10,"mean","","Arithmetic mean (average) of the samples: sum divided by…",21,[[["self"]],["f64"]]],[10,"median","","Median of the samples: value separating the lower half of…",21,[[["self"]],["f64"]]],[10,"var","","Variance of the samples: bias-corrected mean of the…",21,[[["self"]],["f64"]]],[10,"std_dev","","Standard deviation: the square root of the sample variance.",21,[[["self"]],["f64"]]],[10,"std_dev_pct","","Standard deviation as a percent of the mean value. See…",21,[[["self"]],["f64"]]],[10,"median_abs_dev","","Scaled median of the absolute deviations of each sample…",21,[[["self"]],["f64"]]],[10,"median_abs_dev_pct","","Median absolute deviation as a percent of the median. See…",21,[[["self"]],["f64"]]],[10,"percentile","","Percentile: the value below which `pct` percent of the…",21,[[["f64"],["self"]],["f64"]]],[10,"quartiles","","Quartiles of the sample: three values that divide the…",21,[[["self"]]]],[10,"iqr","","Inter-quartile range: the difference between the 25th…",21,[[["self"]],["f64"]]],[11,"new","","Construct a new summary of a sample set.",20,[[],["summary"]]],[11,"new_from_env","test::test","",13,[[["bool"]],["self"]]],[11,"is_warn","","",13,[[["testdesc"],["testexectime"],["self"]],["bool"]]],[11,"is_critical","","",13,[[["testdesc"],["testexectime"],["self"]],["bool"]]],[11,"as_slice","test","",10,[[["self"]],["str"]]],[11,"padding","","",10,[[["self"]],["namepadding"]]],[11,"with_padding","","",10,[[["self"],["namepadding"]],["testname"]]],[11,"padding","","",11,[[["self"]],["namepadding"]]],[11,"padded_name","","",1,[[["namepadding"],["self"],["usize"]],["string"]]],[8,"TDynBenchFn","","Represents a benchmark function.",null,null],[10,"run","","",22,[[["self"],["bencher"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","test::test","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","test::bench","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","test::stats","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"clone","test::bench","",16,[[["self"]],["bencher"]]],[11,"clone","","",17,[[["self"]],["benchsamples"]]],[11,"clone","test::test","",18,[[["self"]],["metric"]]],[11,"clone","","",19,[[["self"]],["metricmap"]]],[11,"clone","test","",7,[[["self"]],["shouldpanic"]]],[11,"clone","","",4,[[["self"]],["colorconfig"]]],[11,"clone","","",5,[[["self"]],["outputformat"]]],[11,"clone","","",6,[[["self"]],["runignored"]]],[11,"clone","test::test","",14,[[["self"]],["runstrategy"]]],[11,"clone","test","",0,[[["self"]],["options"]]],[11,"clone","test::stats","",20,[[["self"]],["summary"]]],[11,"clone","test::test","",15,[[["self"]],["testresult"]]],[11,"clone","","",12,[[["self"]],["testexectime"]]],[11,"clone","","",13,[[["self"]],["testtimeoptions"]]],[11,"clone","test","",8,[[["self"]],["testtype"]]],[11,"clone","","",9,[[["self"]],["namepadding"]]],[11,"clone","","",10,[[["self"]],["testname"]]],[11,"clone","","",1,[[["self"]],["testdesc"]]],[11,"default","test::test","",13,[[],["testtimeoptions"]]],[11,"eq","test::bench","",17,[[["self"],["benchsamples"]],["bool"]]],[11,"ne","","",17,[[["self"],["benchsamples"]],["bool"]]],[11,"eq","test::test","",18,[[["metric"],["self"]],["bool"]]],[11,"ne","","",18,[[["metric"],["self"]],["bool"]]],[11,"eq","","",19,[[["metricmap"],["self"]],["bool"]]],[11,"ne","","",19,[[["metricmap"],["self"]],["bool"]]],[11,"eq","test","",7,[[["self"],["shouldpanic"]],["bool"]]],[11,"ne","","",7,[[["self"],["shouldpanic"]],["bool"]]],[11,"eq","","",5,[[["outputformat"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["runignored"]],["bool"]]],[11,"eq","test::stats","",20,[[["self"],["summary"]],["bool"]]],[11,"ne","","",20,[[["self"],["summary"]],["bool"]]],[11,"eq","test::test","",15,[[["self"],["testresult"]],["bool"]]],[11,"ne","","",15,[[["self"],["testresult"]],["bool"]]],[11,"eq","","",12,[[["testexectime"],["self"]],["bool"]]],[11,"ne","","",12,[[["testexectime"],["self"]],["bool"]]],[11,"eq","","",13,[[["self"],["testtimeoptions"]],["bool"]]],[11,"ne","","",13,[[["self"],["testtimeoptions"]],["bool"]]],[11,"eq","test","",8,[[["self"],["testtype"]],["bool"]]],[11,"eq","","",9,[[["self"],["namepadding"]],["bool"]]],[11,"eq","","",10,[[["self"],["testname"]],["bool"]]],[11,"ne","","",10,[[["self"],["testname"]],["bool"]]],[11,"eq","","",1,[[["testdesc"],["self"]],["bool"]]],[11,"ne","","",1,[[["testdesc"],["self"]],["bool"]]],[11,"fmt","test::bench","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","test","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","test::test","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","test","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","test::stats","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","test::test","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","test","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","test::test","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","test","",10,[[["formatter"],["self"]],["result"]]],[11,"hash","","",7,[[["self"],["__h"]]]],[11,"hash","","",8,[[["self"],["__h"]]]],[11,"hash","","",9,[[["self"],["__h"]]]],[11,"hash","","",10,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]]],"p":[[3,"Options"],[3,"TestDesc"],[3,"TestDescAndFn"],[3,"TestOpts"],[4,"ColorConfig"],[4,"OutputFormat"],[4,"RunIgnored"],[4,"ShouldPanic"],[4,"TestType"],[4,"NamePadding"],[4,"TestName"],[4,"TestFn"],[3,"TestExecTime"],[3,"TestTimeOptions"],[4,"RunStrategy"],[4,"TestResult"],[3,"Bencher"],[3,"BenchSamples"],[3,"Metric"],[3,"MetricMap"],[3,"Summary"],[8,"Stats"],[8,"TDynBenchFn"]]};
//addSearchOptions(searchIndex);initSearch(searchIndex);
module.exports = searchIndex;