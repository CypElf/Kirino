var searchIndex = JSON.parse('{\
"alloc":{"doc":"The Rust core allocation and collections libraryThis …","i":[[0,"alloc","alloc","Memory allocation APIs",null,null],[3,"AllocError","alloc::alloc","The <code>AllocError</code> error indicates an allocation failure that …",null,null],[8,"Allocator","","An implementation of <code>Allocator</code> can allocate, grow, …",null,null],[10,"allocate","","Attempts to allocate a block of memory.",0,[[["layout",3]],[["allocerror",3],["result",4],["nonnull",3]]]],[11,"allocate_zeroed","","Behaves like <code>allocate</code>, but also ensures that the returned …",0,[[["layout",3]],[["allocerror",3],["result",4],["nonnull",3]]]],[10,"deallocate","","Deallocates the memory referenced by <code>ptr</code>.",0,[[["nonnull",3],["layout",3]]]],[11,"grow","","Attempts to extend the memory block.",0,[[["nonnull",3],["layout",3]],[["allocerror",3],["result",4],["nonnull",3]]]],[11,"grow_zeroed","","Behaves like <code>grow</code>, but also ensures that the new contents …",0,[[["nonnull",3],["layout",3]],[["allocerror",3],["result",4],["nonnull",3]]]],[11,"shrink","","Attempts to shrink the memory block.",0,[[["nonnull",3],["layout",3]],[["allocerror",3],["result",4],["nonnull",3]]]],[11,"by_ref","","Creates a \\\"by reference\\\" adaptor for this instance of …",0,[[]]],[8,"GlobalAlloc","","A memory allocator that can be registered as the standard …",null,null],[10,"alloc","","Allocate memory as described by the given <code>layout</code>.",1,[[["layout",3]]]],[10,"dealloc","","Deallocate the block of memory at the given <code>ptr</code> pointer …",1,[[["layout",3]]]],[11,"alloc_zeroed","","Behaves like <code>alloc</code>, but also ensures that the contents …",1,[[["layout",3]]]],[11,"realloc","","Shrink or grow a block of memory to the given <code>new_size</code>. …",1,[[["layout",3]]]],[3,"Layout","","Layout of a block of memory.",null,null],[6,"LayoutErr","","",null,null],[3,"LayoutError","","The parameters given to <code>Layout::from_size_align</code> or some …",null,null],[3,"Global","","The global memory allocator.",null,null],[5,"alloc","","Allocate memory with the global allocator.",null,[[["layout",3]]]],[5,"dealloc","","Deallocate memory with the global allocator.",null,[[["layout",3]]]],[5,"realloc","","Reallocate memory with the global allocator.",null,[[["layout",3]]]],[5,"alloc_zeroed","","Allocate zero-initialized memory with the global …",null,[[["layout",3]]]],[5,"handle_alloc_error","","Abort on memory allocation error or failure.",null,[[["layout",3]]]],[0,"boxed","alloc","A pointer type for heap allocation.",null,null],[3,"Box","alloc::boxed","A pointer type for heap allocation.",null,null],[11,"new","","Allocates memory on the heap and then places <code>x</code> into it.",2,[[]]],[11,"new_uninit","","Constructs a new box with uninitialized contents.",2,[[],[["box",3],["maybeuninit",19]]]],[11,"new_zeroed","","Constructs a new <code>Box</code> with uninitialized contents, with …",2,[[],[["box",3],["maybeuninit",19]]]],[11,"pin","","Constructs a new <code>Pin<Box<T>></code>. If <code>T</code> does not implement …",2,[[],[["box",3],["pin",3]]]],[11,"new_in","","Allocates memory in the given allocator then places <code>x</code> …",2,[[]]],[11,"new_uninit_in","","Constructs a new box with uninitialized contents in the …",2,[[],[["maybeuninit",19],["box",3]]]],[11,"new_zeroed_in","","Constructs a new <code>Box</code> with uninitialized contents, with …",2,[[],[["maybeuninit",19],["box",3]]]],[11,"pin_in","","Constructs a new <code>Pin<Box<T, A>></code>. If <code>T</code> does not implement …",2,[[],["pin",3]]],[11,"into_boxed_slice","","Converts a <code>Box<T></code> into a <code>Box<[T]></code>",2,[[],["box",3]]],[11,"new_uninit_slice","","Constructs a new boxed slice with uninitialized contents.",2,[[],["box",3]]],[11,"new_zeroed_slice","","Constructs a new boxed slice with uninitialized contents, …",2,[[],["box",3]]],[11,"new_uninit_slice_in","","Constructs a new boxed slice with uninitialized contents …",2,[[],["box",3]]],[11,"new_zeroed_slice_in","","Constructs a new boxed slice with uninitialized contents …",2,[[],["box",3]]],[11,"assume_init","","Converts to <code>Box<T, A></code>.",2,[[],["box",3]]],[11,"assume_init","","Converts to <code>Box<[T], A></code>.",2,[[],["box",3]]],[11,"from_raw","","Constructs a box from a raw pointer.",2,[[]]],[11,"from_raw_in","","Constructs a box from a raw pointer in the given …",2,[[]]],[11,"into_raw","","Consumes the <code>Box</code>, returning a wrapped raw pointer.",2,[[]]],[11,"into_raw_with_allocator","","Consumes the <code>Box</code>, returning a wrapped raw pointer and the …",2,[[]]],[11,"allocator","","Returns a reference to the underlying allocator.",2,[[]]],[11,"leak","","Consumes and leaks the <code>Box</code>, returning a mutable reference,…",2,[[]]],[11,"into_pin","","Converts a <code>Box<T></code> into a <code>Pin<Box<T>></code>",2,[[],["pin",3]]],[11,"downcast","","Attempt to downcast the box to a concrete type.",2,[[],[["result",4],["box",3]]]],[11,"downcast","","Attempt to downcast the box to a concrete type.",2,[[],[["result",4],["box",3]]]],[0,"borrow","alloc","A module for working with borrowed data.",null,null],[8,"Borrow","alloc::borrow","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",3,[[]]],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",4,[[]]],[8,"ToOwned","","A generalization of <code>Clone</code> to borrowed data.",null,null],[16,"Owned","","The resulting type after obtaining ownership.",5,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",5,[[]]],[11,"clone_into","","Uses borrowed data to replace owned data, usually by …",5,[[]]],[4,"Cow","","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",6,null],[13,"Owned","","Owned data.",6,null],[11,"is_borrowed","","Returns true if the data is borrowed, i.e. if <code>to_mut</code> …",6,[[]]],[11,"is_owned","","Returns true if the data is owned, i.e. if <code>to_mut</code> would …",6,[[]]],[11,"to_mut","","Acquires a mutable reference to the owned form of the …",6,[[]]],[11,"into_owned","","Extracts the owned data.",6,[[]]],[0,"collections","alloc","Collection types.",null,null],[0,"binary_heap","alloc::collections","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","alloc::collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[3,"PeekMut","","Structure wrapping a mutable reference to the greatest …",null,null],[11,"pop","","Removes the peeked value from the heap and returns it.",7,[[["peekmut",3]]]],[11,"new","","Creates an empty <code>BinaryHeap</code> as a max-heap.",8,[[],["binaryheap",3]]],[11,"with_capacity","","Creates an empty <code>BinaryHeap</code> with a specific capacity. …",8,[[],["binaryheap",3]]],[11,"peek_mut","","Returns a mutable reference to the greatest item in the …",8,[[],[["option",4],["peekmut",3]]]],[11,"pop","","Removes the greatest item from the binary heap and …",8,[[],["option",4]]],[11,"push","","Pushes an item onto the binary heap.",8,[[]]],[11,"into_sorted_vec","","Consumes the <code>BinaryHeap</code> and returns a vector in sorted …",8,[[],["vec",3]]],[11,"append","","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …",8,[[]]],[11,"drain_sorted","","Returns an iterator which retrieves elements in heap …",8,[[],["drainsorted",3]]],[11,"retain","","Retains only the elements specified by the predicate.",8,[[]]],[11,"iter","","Returns an iterator visiting all values in the underlying …",8,[[],["iter",3]]],[11,"into_iter_sorted","","Returns an iterator which retrieves elements in heap …",8,[[],["intoitersorted",3]]],[11,"peek","","Returns the greatest item in the binary heap, or <code>None</code> if …",8,[[],["option",4]]],[11,"capacity","","Returns the number of elements the binary heap can hold …",8,[[]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly <code>additional</code> more …",8,[[]]],[11,"reserve","","Reserves capacity for at least <code>additional</code> more elements …",8,[[]]],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",8,[[]]],[11,"shrink_to","","Discards capacity with a lower bound.",8,[[]]],[11,"into_vec","","Consumes the <code>BinaryHeap</code> and returns the underlying vector …",8,[[],["vec",3]]],[11,"len","","Returns the length of the binary heap.",8,[[]]],[11,"is_empty","","Checks if the binary heap is empty.",8,[[]]],[11,"drain","","Clears the binary heap, returning an iterator over the …",8,[[],["drain",3]]],[11,"clear","","Drops all items from the binary heap.",8,[[]]],[3,"Iter","","An iterator over the elements of a <code>BinaryHeap</code>.",null,null],[3,"IntoIter","","An owning iterator over the elements of a <code>BinaryHeap</code>.",null,null],[3,"IntoIterSorted","","",null,null],[3,"Drain","","A draining iterator over the elements of a <code>BinaryHeap</code>.",null,null],[3,"DrainSorted","","A draining iterator over the elements of a <code>BinaryHeap</code>.",null,null],[0,"linked_list","alloc::collections","A doubly-linked list with owned nodes.",null,null],[3,"LinkedList","alloc::collections::linked_list","A doubly-linked list with owned nodes.",null,null],[3,"Iter","","An iterator over the elements of a <code>LinkedList</code>.",null,null],[3,"IterMut","","A mutable iterator over the elements of a <code>LinkedList</code>.",null,null],[3,"IntoIter","","An owning iterator over the elements of a <code>LinkedList</code>.",null,null],[11,"new","","Creates an empty <code>LinkedList</code>.",9,[[]]],[11,"append","","Moves all elements from <code>other</code> to the end of the list.",9,[[]]],[11,"prepend","","Moves all elements from <code>other</code> to the begin of the list.",9,[[]]],[11,"iter","","Provides a forward iterator.",9,[[],["iter",3]]],[11,"iter_mut","","Provides a forward iterator with mutable references.",9,[[],["itermut",3]]],[11,"cursor_front","","Provides a cursor at the front element.",9,[[],["cursor",3]]],[11,"cursor_front_mut","","Provides a cursor with editing operations at the front …",9,[[],["cursormut",3]]],[11,"cursor_back","","Provides a cursor at the back element.",9,[[],["cursor",3]]],[11,"cursor_back_mut","","Provides a cursor with editing operations at the back …",9,[[],["cursormut",3]]],[11,"is_empty","","Returns <code>true</code> if the <code>LinkedList</code> is empty.",9,[[]]],[11,"len","","Returns the length of the <code>LinkedList</code>.",9,[[]]],[11,"clear","","Removes all elements from the <code>LinkedList</code>.",9,[[]]],[11,"contains","","Returns <code>true</code> if the <code>LinkedList</code> contains an element equal …",9,[[]]],[11,"front","","Provides a reference to the front element, or <code>None</code> if the …",9,[[],["option",4]]],[11,"front_mut","","Provides a mutable reference to the front element, or <code>None</code>…",9,[[],["option",4]]],[11,"back","","Provides a reference to the back element, or <code>None</code> if the …",9,[[],["option",4]]],[11,"back_mut","","Provides a mutable reference to the back element, or <code>None</code> …",9,[[],["option",4]]],[11,"push_front","","Adds an element first in the list.",9,[[]]],[11,"pop_front","","Removes the first element and returns it, or <code>None</code> if the …",9,[[],["option",4]]],[11,"push_back","","Appends an element to the back of a list.",9,[[]]],[11,"pop_back","","Removes the last element from a list and returns it, or …",9,[[],["option",4]]],[11,"split_off","","Splits the list into two at the given index. Returns …",9,[[],["linkedlist",3]]],[11,"remove","","Removes the element at the given index and returns it.",9,[[]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if …",9,[[],["drainfilter",3]]],[3,"Cursor","","A cursor over a <code>LinkedList</code>.",null,null],[3,"CursorMut","","A cursor over a <code>LinkedList</code> with editing operations.",null,null],[11,"index","","Returns the cursor position index within the <code>LinkedList</code>.",10,[[],["option",4]]],[11,"move_next","","Moves the cursor to the next element of the <code>LinkedList</code>.",10,[[]]],[11,"move_prev","","Moves the cursor to the previous element of the <code>LinkedList</code>…",10,[[]]],[11,"current","","Returns a reference to the element that the cursor is …",10,[[],["option",4]]],[11,"peek_next","","Returns a reference to the next element.",10,[[],["option",4]]],[11,"peek_prev","","Returns a reference to the previous element.",10,[[],["option",4]]],[11,"index","","Returns the cursor position index within the <code>LinkedList</code>.",11,[[],["option",4]]],[11,"move_next","","Moves the cursor to the next element of the <code>LinkedList</code>.",11,[[]]],[11,"move_prev","","Moves the cursor to the previous element of the <code>LinkedList</code>…",11,[[]]],[11,"current","","Returns a reference to the element that the cursor is …",11,[[],["option",4]]],[11,"peek_next","","Returns a reference to the next element.",11,[[],["option",4]]],[11,"peek_prev","","Returns a reference to the previous element.",11,[[],["option",4]]],[11,"as_cursor","","Returns a read-only cursor pointing to the current …",11,[[],["cursor",3]]],[11,"insert_after","","Inserts a new element into the <code>LinkedList</code> after the …",11,[[]]],[11,"insert_before","","Inserts a new element into the <code>LinkedList</code> before the …",11,[[]]],[11,"remove_current","","Removes the current element from the <code>LinkedList</code>.",11,[[],["option",4]]],[11,"remove_current_as_list","","Removes the current element from the <code>LinkedList</code> without …",11,[[],[["linkedlist",3],["option",4]]]],[11,"splice_after","","Inserts the elements from the given <code>LinkedList</code> after the …",11,[[["linkedlist",3]]]],[11,"splice_before","","Inserts the elements from the given <code>LinkedList</code> before the …",11,[[["linkedlist",3]]]],[11,"split_after","","Splits the list into two after the current element. This …",11,[[],["linkedlist",3]]],[11,"split_before","","Splits the list into two before the current element. This …",11,[[],["linkedlist",3]]],[3,"DrainFilter","","An iterator produced by calling <code>drain_filter</code> on …",null,null],[0,"vec_deque","alloc::collections","A double-ended queue implemented with a growable ring …",null,null],[3,"Drain","alloc::collections::vec_deque","A draining iterator over the elements of a <code>VecDeque</code>.",null,null],[3,"IterMut","","A mutable iterator over the elements of a <code>VecDeque</code>.",null,null],[3,"IntoIter","","An owning iterator over the elements of a <code>VecDeque</code>.",null,null],[3,"Iter","","An iterator over the elements of a <code>VecDeque</code>.",null,null],[3,"VecDeque","","A double-ended queue implemented with a growable ring …",null,null],[11,"new","","Creates an empty <code>VecDeque</code>.",12,[[],["vecdeque",3]]],[11,"with_capacity","","Creates an empty <code>VecDeque</code> with space for at least <code>capacity</code>…",12,[[],["vecdeque",3]]],[11,"get","","Provides a reference to the element at the given index.",12,[[],["option",4]]],[11,"get_mut","","Provides a mutable reference to the element at the given …",12,[[],["option",4]]],[11,"swap","","Swaps elements at indices <code>i</code> and <code>j</code>.",12,[[]]],[11,"capacity","","Returns the number of elements the <code>VecDeque</code> can hold …",12,[[]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly <code>additional</code> more …",12,[[]]],[11,"reserve","","Reserves capacity for at least <code>additional</code> more elements …",12,[[]]],[11,"try_reserve_exact","","Tries to reserve the minimum capacity for exactly …",12,[[],[["result",4],["tryreserveerror",4]]]],[11,"try_reserve","","Tries to reserve capacity for at least <code>additional</code> more …",12,[[],[["result",4],["tryreserveerror",4]]]],[11,"shrink_to_fit","","Shrinks the capacity of the <code>VecDeque</code> as much as possible.",12,[[]]],[11,"shrink_to","","Shrinks the capacity of the <code>VecDeque</code> with a lower bound.",12,[[]]],[11,"truncate","","Shortens the <code>VecDeque</code>, keeping the first <code>len</code> elements and …",12,[[]]],[11,"iter","","Returns a front-to-back iterator.",12,[[],["iter",3]]],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable …",12,[[],["itermut",3]]],[11,"as_slices","","Returns a pair of slices which contain, in order, the …",12,[[]]],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the …",12,[[]]],[11,"len","","Returns the number of elements in the <code>VecDeque</code>.",12,[[]]],[11,"is_empty","","Returns <code>true</code> if the <code>VecDeque</code> is empty.",12,[[]]],[11,"range","","Creates an iterator that covers the specified range in …",12,[[],["iter",3]]],[11,"range_mut","","Creates an iterator that covers the specified mutable …",12,[[],["itermut",3]]],[11,"drain","","Creates a draining iterator that removes the specified …",12,[[],["drain",3]]],[11,"clear","","Clears the <code>VecDeque</code>, removing all values.",12,[[]]],[11,"contains","","Returns <code>true</code> if the <code>VecDeque</code> contains an element equal to …",12,[[]]],[11,"front","","Provides a reference to the front element, or <code>None</code> if the …",12,[[],["option",4]]],[11,"front_mut","","Provides a mutable reference to the front element, or <code>None</code>…",12,[[],["option",4]]],[11,"back","","Provides a reference to the back element, or <code>None</code> if the …",12,[[],["option",4]]],[11,"back_mut","","Provides a mutable reference to the back element, or <code>None</code> …",12,[[],["option",4]]],[11,"pop_front","","Removes the first element and returns it, or <code>None</code> if the …",12,[[],["option",4]]],[11,"pop_back","","Removes the last element from the <code>VecDeque</code> and returns …",12,[[],["option",4]]],[11,"push_front","","Prepends an element to the <code>VecDeque</code>.",12,[[]]],[11,"push_back","","Appends an element to the back of the <code>VecDeque</code>.",12,[[]]],[11,"swap_remove_front","","Removes an element from anywhere in the <code>VecDeque</code> and …",12,[[],["option",4]]],[11,"swap_remove_back","","Removes an element from anywhere in the <code>VecDeque</code> and …",12,[[],["option",4]]],[11,"insert","","Inserts an element at <code>index</code> within the <code>VecDeque</code>, shifting …",12,[[]]],[11,"remove","","Removes and returns the element at <code>index</code> from the <code>VecDeque</code>…",12,[[],["option",4]]],[11,"split_off","","Splits the <code>VecDeque</code> into two at the given index.",12,[[]]],[11,"append","","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …",12,[[]]],[11,"retain","","Retains only the elements specified by the predicate.",12,[[]]],[11,"resize_with","","Modifies the <code>VecDeque</code> in-place so that <code>len()</code> is equal to …",12,[[]]],[11,"make_contiguous","","Rearranges the internal storage of this deque so it is …",12,[[]]],[11,"rotate_left","","Rotates the double-ended queue <code>mid</code> places to the left.",12,[[]]],[11,"rotate_right","","Rotates the double-ended queue <code>k</code> places to the right.",12,[[]]],[11,"binary_search","","Binary searches this sorted <code>VecDeque</code> for a given element.",12,[[],["result",4]]],[11,"binary_search_by","","Binary searches this sorted <code>VecDeque</code> with a comparator …",12,[[],["result",4]]],[11,"binary_search_by_key","","Binary searches this sorted <code>VecDeque</code> with a key …",12,[[],["result",4]]],[11,"resize","","Modifies the <code>VecDeque</code> in-place so that <code>len()</code> is equal to …",12,[[]]],[0,"btree_map","alloc::collections","A map based on a B-Tree.",null,null],[4,"Entry","alloc::collections::btree_map","A view into a single entry in a map, which may either be …",null,null],[13,"Vacant","","A vacant entry.",13,null],[13,"Occupied","","An occupied entry.",13,null],[3,"OccupiedEntry","","A view into an occupied entry in a <code>BTreeMap</code>. It is part …",null,null],[3,"VacantEntry","","A view into a vacant entry in a <code>BTreeMap</code>. It is part of …",null,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[3,"Iter","","An iterator over the entries of a <code>BTreeMap</code>.",null,null],[3,"IterMut","","A mutable iterator over the entries of a <code>BTreeMap</code>.",null,null],[3,"IntoIter","","An owning iterator over the entries of a <code>BTreeMap</code>.",null,null],[3,"Keys","","An iterator over the keys of a <code>BTreeMap</code>.",null,null],[3,"Values","","An iterator over the values of a <code>BTreeMap</code>.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a <code>BTreeMap</code>.",null,null],[3,"IntoKeys","","An owning iterator over the keys of a <code>BTreeMap</code>.",null,null],[3,"IntoValues","","An owning iterator over the values of a <code>BTreeMap</code>.",null,null],[3,"Range","","An iterator over a sub-range of entries in a <code>BTreeMap</code>.",null,null],[3,"RangeMut","","A mutable iterator over a sub-range of entries in a …",null,null],[3,"DrainFilter","","An iterator produced by calling <code>drain_filter</code> on BTreeMap.",null,null],[0,"btree_set","alloc::collections","A set based on a B-Tree.",null,null],[3,"BTreeSet","alloc::collections::btree_set","A set based on a B-Tree.",null,null],[3,"Iter","","An iterator over the items of a <code>BTreeSet</code>.",null,null],[3,"IntoIter","","An owning iterator over the items of a <code>BTreeSet</code>.",null,null],[3,"Range","","An iterator over a sub-range of items in a <code>BTreeSet</code>.",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of …",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric …",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of …",null,null],[3,"Union","","A lazy iterator producing elements in the union of …",null,null],[3,"DrainFilter","","An iterator produced by calling <code>drain_filter</code> on BTreeSet.",null,null],[4,"TryReserveError","alloc::collections","The error type for <code>try_reserve</code> methods.",null,null],[13,"CapacityOverflow","","Error due to the computed capacity exceeding the …",14,null],[13,"AllocError","","The memory allocator returned an error",14,null],[12,"layout","alloc::collections::TryReserveError","The layout of allocation request that failed",15,null],[0,"fmt","alloc","Utilities for formatting and printing <code>String</code>s.",null,null],[4,"Alignment","alloc::fmt","Possible alignments returned by <code>Formatter::align</code>",null,null],[13,"Left","","Indication that contents should be left-aligned.",16,null],[13,"Right","","Indication that contents should be right-aligned.",16,null],[13,"Center","","Indication that contents should be center-aligned.",16,null],[3,"Error","","The error type which is returned from formatting a …",null,null],[5,"write","","The <code>write</code> function takes an output stream, and an …",null,[[["arguments",3],["write",8]],[["result",4],["error",3]]]],[3,"Arguments","","This structure represents a safely precompiled version of …",null,null],[8,"Binary","","<code>b</code> formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",17,[[["formatter",3]],[["result",4],["error",3]]]],[8,"Octal","","<code>o</code> formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",18,[[["formatter",3]],[["result",4],["error",3]]]],[8,"Debug","","<code>?</code> formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",19,[[["formatter",3]],[["result",4],["error",3]]]],[14,"Debug","","Derive macro generating an impl of the trait <code>Debug</code>.",null,null],[8,"Display","","Format trait for an empty format, <code>{}</code>.",null,null],[10,"fmt","","Formats the value using the given formatter.",20,[[["formatter",3]],[["result",4],["error",3]]]],[3,"DebugList","","A struct to help with <code>fmt::Debug</code> implementations.",null,null],[3,"DebugMap","","A struct to help with <code>fmt::Debug</code> implementations.",null,null],[3,"DebugSet","","A struct to help with <code>fmt::Debug</code> implementations.",null,null],[3,"DebugStruct","","A struct to help with <code>fmt::Debug</code> implementations.",null,null],[3,"DebugTuple","","A struct to help with <code>fmt::Debug</code> implementations.",null,null],[3,"Formatter","","Configuration for formatting.",null,null],[6,"Result","","The type returned by formatter methods.",null,null],[8,"Write","","A trait for writing or formatting into Unicode-accepting …",null,null],[10,"write_str","","Writes a string slice into this writer, returning whether …",21,[[],[["result",4],["error",3]]]],[11,"write_char","","Writes a [<code>char</code>] into this writer, returning whether the …",21,[[],[["result",4],["error",3]]]],[11,"write_fmt","","Glue for usage of the [<code>write!</code>] macro with implementors of …",21,[[["arguments",3]],[["result",4],["error",3]]]],[8,"LowerExp","","<code>e</code> formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",22,[[["formatter",3]],[["result",4],["error",3]]]],[8,"UpperExp","","<code>E</code> formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",23,[[["formatter",3]],[["result",4],["error",3]]]],[8,"LowerHex","","<code>x</code> formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",24,[[["formatter",3]],[["result",4],["error",3]]]],[8,"Pointer","","<code>p</code> formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",25,[[["formatter",3]],[["result",4],["error",3]]]],[8,"UpperHex","","<code>X</code> formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",26,[[["formatter",3]],[["result",4],["error",3]]]],[5,"format","","The <code>format</code> function takes an [<code>Arguments</code>] struct and …",null,[[["arguments",3]],["string",3]]],[0,"prelude","alloc","The alloc Prelude",null,null],[0,"v1","alloc::prelude","The first version of the prelude of <code>alloc</code> crate.",null,null],[0,"rc","alloc","Single-threaded reference-counting pointers. \'Rc\' stands …",null,null],[3,"Rc","alloc::rc","A single-threaded reference-counting pointer. \'Rc\' stands …",null,null],[11,"new","","Constructs a new <code>Rc<T></code>.",27,[[],["rc",3]]],[11,"new_cyclic","","Constructs a new <code>Rc<T></code> using a weak reference to itself. …",27,[[],["rc",3]]],[11,"new_uninit","","Constructs a new <code>Rc</code> with uninitialized contents.",27,[[],[["rc",3],["maybeuninit",19]]]],[11,"new_zeroed","","Constructs a new <code>Rc</code> with uninitialized contents, with the …",27,[[],[["rc",3],["maybeuninit",19]]]],[11,"pin","","Constructs a new <code>Pin<Rc<T>></code>. If <code>T</code> does not implement <code>Unpin</code>…",27,[[],[["pin",3],["rc",3]]]],[11,"try_unwrap","","Returns the inner value, if the <code>Rc</code> has exactly one strong …",27,[[],["result",4]]],[11,"new_uninit_slice","","Constructs a new reference-counted slice with …",27,[[],["rc",3]]],[11,"new_zeroed_slice","","Constructs a new reference-counted slice with …",27,[[],["rc",3]]],[11,"assume_init","","Converts to <code>Rc<T></code>.",27,[[],["rc",3]]],[11,"assume_init","","Converts to <code>Rc<[T]></code>.",27,[[],["rc",3]]],[11,"into_raw","","Consumes the <code>Rc</code>, returning the wrapped pointer.",27,[[]]],[11,"as_ptr","","Provides a raw pointer to the data.",27,[[]]],[11,"from_raw","","Constructs an <code>Rc<T></code> from a raw pointer.",27,[[]]],[11,"downgrade","","Creates a new [<code>Weak</code>] pointer to this allocation.",27,[[],["weak",3]]],[11,"weak_count","","Gets the number of [<code>Weak</code>] pointers to this allocation.",27,[[]]],[11,"strong_count","","Gets the number of strong (<code>Rc</code>) pointers to this …",27,[[]]],[11,"get_mut","","Returns a mutable reference into the given <code>Rc</code>, if there …",27,[[],["option",4]]],[11,"get_mut_unchecked","","Returns a mutable reference into the given <code>Rc</code>, without …",27,[[]]],[11,"ptr_eq","","Returns <code>true</code> if the two <code>Rc</code>s point to the same allocation …",27,[[]]],[11,"make_mut","","Makes a mutable reference into the given <code>Rc</code>.",27,[[]]],[11,"downcast","","Attempt to downcast the <code>Rc<dyn Any></code> to a concrete type.",27,[[],[["rc",3],["rc",3],["result",4]]]],[3,"Weak","","<code>Weak</code> is a version of [<code>Rc</code>] that holds a non-owning …",null,null],[11,"new","","Constructs a new <code>Weak<T></code>, without allocating any memory. …",28,[[],["weak",3]]],[11,"as_ptr","","Returns a raw pointer to the object <code>T</code> pointed to by this …",28,[[]]],[11,"into_raw","","Consumes the <code>Weak<T></code> and turns it into a raw pointer.",28,[[]]],[11,"from_raw","","Converts a raw pointer previously created by <code>into_raw</code> …",28,[[]]],[11,"upgrade","","Attempts to upgrade the <code>Weak</code> pointer to an [<code>Rc</code>], delaying …",28,[[],[["option",4],["rc",3]]]],[11,"strong_count","","Gets the number of strong (<code>Rc</code>) pointers pointing to this …",28,[[]]],[11,"weak_count","","Gets the number of <code>Weak</code> pointers pointing to this …",28,[[]]],[11,"ptr_eq","","Returns <code>true</code> if the two <code>Weak</code>s point to the same …",28,[[]]],[0,"slice","alloc","A dynamically-sized view into a contiguous sequence, <code>[T]</code>.",null,null],[3,"ArrayChunks","alloc::slice","An iterator over a slice in (non-overlapping) chunks (<code>N</code> …",null,null],[3,"ArrayChunksMut","","An iterator over a slice in (non-overlapping) mutable …",null,null],[3,"ArrayWindows","","A windowed iterator over a slice in overlapping chunks (<code>N</code> …",null,null],[8,"SliceIndex","","A helper trait used for indexing operations.",null,null],[16,"Output","","The output type returned by methods.",29,null],[10,"get","","Returns a shared reference to the output at this …",29,[[],["option",4]]],[10,"get_mut","","Returns a mutable reference to the output at this …",29,[[],["option",4]]],[10,"get_unchecked","","Returns a shared reference to the output at this …",29,[[]]],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this …",29,[[]]],[10,"index","","Returns a shared reference to the output at this …",29,[[]]],[10,"index_mut","","Returns a mutable reference to the output at this …",29,[[]]],[5,"from_mut","","Converts a reference to T into a slice of length 1 …",null,[[]]],[5,"from_ref","","Converts a reference to T into a slice of length 1 …",null,[[]]],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,[[]]],[5,"from_raw_parts_mut","","Performs the same functionality as [<code>from_raw_parts</code>], …",null,[[]]],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (…",null,null],[3,"Windows","","An iterator over overlapping subslices of length <code>size</code>.",null,null],[3,"ChunksExact","","An iterator over a slice in (non-overlapping) chunks (…",null,null],[3,"ChunksExactMut","","An iterator over a slice in (non-overlapping) mutable …",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable …",null,null],[3,"Split","","An iterator over subslices separated by elements that …",null,null],[3,"SplitMut","","An iterator over the mutable subslices of the vector …",null,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"RChunks","","An iterator over a slice in (non-overlapping) chunks (…",null,null],[3,"RChunksExact","","An iterator over a slice in (non-overlapping) chunks (…",null,null],[3,"RChunksExactMut","","An iterator over a slice in (non-overlapping) mutable …",null,null],[3,"RChunksMut","","An iterator over a slice in (non-overlapping) mutable …",null,null],[3,"RSplit","","An iterator over subslices separated by elements that …",null,null],[3,"RSplitMut","","An iterator over the subslices of the vector which are …",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that …",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that …",null,null],[3,"SplitN","","An iterator over subslices separated by elements that …",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that …",null,null],[8,"Concat","","Helper trait for <code>[T]::concat</code>.",null,null],[16,"Output","","The resulting type after concatenation",30,null],[10,"concat","","Implementation of <code>[T]::concat</code>",30,[[]]],[8,"Join","","Helper trait for <code>[T]::join</code>",null,null],[16,"Output","","The resulting type after concatenation",31,null],[10,"join","","Implementation of <code>[T]::join</code>",31,[[]]],[0,"str","alloc","Unicode string slices.",null,null],[0,"pattern","alloc::str","The string Pattern API.",null,null],[8,"Pattern","alloc::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",32,null],[10,"into_searcher","","Constructs the associated searcher from <code>self</code> and the …",32,[[]]],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the …",32,[[]]],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the …",32,[[]]],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the …",32,[[]]],[11,"strip_prefix_of","","Removes the pattern from the front of haystack, if it …",32,[[],["option",4]]],[11,"strip_suffix_of","","Removes the pattern from the back of haystack, if it …",32,[[],["option",4]]],[4,"SearchStep","","Result of calling [<code>Searcher::next()</code>] or […",null,null],[13,"Match","","Expresses that a match of the pattern has been found at …",33,null],[13,"Reject","","Expresses that <code>haystack[a..b]</code> has been rejected as a …",33,null],[13,"Done","","Expresses that every byte of the haystack has been …",33,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlying string to be searched in",34,[[]]],[10,"next","","Performs the next search step starting from the front.",34,[[],["searchstep",4]]],[11,"next_match","","Finds the next [<code>Match</code>][SearchStep::Match] result. See […",34,[[],["option",4]]],[11,"next_reject","","Finds the next [<code>Reject</code>][SearchStep::Reject] result. See […",34,[[],["option",4]]],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",35,[[],["searchstep",4]]],[11,"next_match_back","","Finds the next [<code>Match</code>][SearchStep::Match] result. See […",35,[[],["option",4]]],[11,"next_reject_back","","Finds the next [<code>Reject</code>][SearchStep::Reject] result. See […",35,[[],["option",4]]],[8,"DoubleEndedSearcher","","A marker trait to express that a [<code>ReverseSearcher</code>] can be …",null,null],[3,"CharSearcher","","Associated type for <code><char as Pattern<\'a>>::Searcher</code>.",null,null],[3,"CharSliceSearcher","","Associated type for <code><&[char] as Pattern<\'a>>::Searcher</code>.",null,null],[3,"CharPredicateSearcher","","Associated type for <code><F as Pattern<\'a>>::Searcher</code>.",null,null],[3,"StrSearcher","","Associated type for <code><&str as Pattern<\'a>>::Searcher</code>.",null,null],[3,"EncodeUtf16","alloc::str","An iterator of [<code>u16</code>] over the string encoded as UTF-16.",null,null],[3,"SplitAsciiWhitespace","","An iterator over the non-ASCII-whitespace substrings of a …",null,null],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a …",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,[[],[["result",4],["utf8error",3]]]],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string …",null,[[],[["utf8error",3],["result",4]]]],[3,"Bytes","","An iterator over the bytes of a string slice.",null,null],[3,"CharIndices","","An iterator over the <code>char</code>s of a string slice, and their …",null,null],[3,"Chars","","An iterator over the <code>char</code>s of a string slice.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without …",null,[[]]],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without …",null,[[]]],[3,"ParseBoolError","","An error returned when parsing a <code>bool</code> using <code>from_str</code> fails",null,null],[3,"EscapeDebug","","The return type of [<code>str::escape_debug</code>].",null,null],[3,"EscapeDefault","","The return type of [<code>str::escape_default</code>].",null,null],[3,"EscapeUnicode","","The return type of [<code>str::escape_unicode</code>].",null,null],[8,"FromStr","","Parse a value from a string",null,null],[16,"Err","","The associated error which can be returned from parsing.",36,null],[10,"from_str","","Parses a string <code>s</code> to return a value of this type.",36,[[],["result",4]]],[3,"Utf8Error","","Errors which can occur when attempting to interpret a …",null,null],[3,"Lines","","An iterator over the lines of a string, as string slices.",null,null],[3,"LinesAny","","Created with the method <code>lines_any</code>.",null,null],[3,"MatchIndices","","Created with the method <code>match_indices</code>.",null,null],[3,"RMatchIndices","","Created with the method <code>rmatch_indices</code>.",null,null],[3,"Matches","","Created with the method <code>matches</code>.",null,null],[3,"RMatches","","Created with the method <code>rmatches</code>.",null,null],[3,"RSplit","","Created with the method <code>rsplit</code>.",null,null],[3,"Split","","Created with the method <code>split</code>.",null,null],[3,"RSplitN","","Created with the method <code>rsplitn</code>.",null,null],[3,"SplitN","","Created with the method <code>splitn</code>.",null,null],[3,"RSplitTerminator","","Created with the method <code>rsplit_terminator</code>.",null,null],[3,"SplitTerminator","","Created with the method <code>split_terminator</code>.",null,null],[5,"from_boxed_utf8_unchecked","","Converts a boxed slice of bytes to a boxed string slice …",null,[[["box",3]],["box",3]]],[0,"string","alloc","A UTF-8–encoded, growable string.",null,null],[3,"String","alloc::string","A UTF-8–encoded, growable string.",null,null],[3,"FromUtf8Error","","A possible error value when converting a <code>String</code> from a …",null,null],[3,"FromUtf16Error","","A possible error value when converting a <code>String</code> from a …",null,null],[11,"new","","Creates a new empty <code>String</code>.",37,[[],["string",3]]],[11,"with_capacity","","Creates a new empty <code>String</code> with a particular capacity.",37,[[],["string",3]]],[11,"from_utf8","","Converts a vector of bytes to a <code>String</code>.",37,[[["vec",3]],[["result",4],["fromutf8error",3],["string",3]]]],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid …",37,[[],["cow",4]]],[11,"from_utf16","","Decode a UTF-16–encoded vector <code>v</code> into a <code>String</code>, …",37,[[],[["result",4],["fromutf16error",3],["string",3]]]],[11,"from_utf16_lossy","","Decode a UTF-16–encoded slice <code>v</code> into a <code>String</code>, replacing…",37,[[],["string",3]]],[11,"into_raw_parts","","Decomposes a <code>String</code> into its raw components.",37,[[]]],[11,"from_raw_parts","","Creates a new <code>String</code> from a length, capacity, and pointer.",37,[[],["string",3]]],[11,"from_utf8_unchecked","","Converts a vector of bytes to a <code>String</code> without checking …",37,[[["vec",3]],["string",3]]],[11,"into_bytes","","Converts a <code>String</code> into a byte vector.",37,[[],["vec",3]]],[11,"as_str","","Extracts a string slice containing the entire <code>String</code>.",37,[[]]],[11,"as_mut_str","","Converts a <code>String</code> into a mutable string slice.",37,[[]]],[11,"push_str","","Appends a given string slice onto the end of this <code>String</code>.",37,[[]]],[11,"capacity","","Returns this <code>String</code>\'s capacity, in bytes.",37,[[]]],[11,"reserve","","Ensures that this <code>String</code>\'s capacity is at least <code>additional</code>…",37,[[]]],[11,"reserve_exact","","Ensures that this <code>String</code>\'s capacity is <code>additional</code> bytes …",37,[[]]],[11,"try_reserve","","Tries to reserve capacity for at least <code>additional</code> more …",37,[[],[["result",4],["tryreserveerror",4]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly …",37,[[],[["result",4],["tryreserveerror",4]]]],[11,"shrink_to_fit","","Shrinks the capacity of this <code>String</code> to match its length.",37,[[]]],[11,"shrink_to","","Shrinks the capacity of this <code>String</code> with a lower bound.",37,[[]]],[11,"push","","Appends the given [<code>char</code>] to the end of this <code>String</code>.",37,[[]]],[11,"as_bytes","","Returns a byte slice of this <code>String</code>\'s contents.",37,[[]]],[11,"truncate","","Shortens this <code>String</code> to the specified length.",37,[[]]],[11,"pop","","Removes the last character from the string buffer and …",37,[[],["option",4]]],[11,"remove","","Removes a [<code>char</code>] from this <code>String</code> at a byte position and …",37,[[]]],[11,"retain","","Retains only the characters specified by the predicate.",37,[[]]],[11,"insert","","Inserts a character into this <code>String</code> at a byte position.",37,[[]]],[11,"insert_str","","Inserts a string slice into this <code>String</code> at a byte …",37,[[]]],[11,"as_mut_vec","","Returns a mutable reference to the contents of this <code>String</code>…",37,[[],["vec",3]]],[11,"len","","Returns the length of this <code>String</code>, in bytes, not [<code>char</code>]s …",37,[[]]],[11,"is_empty","","Returns <code>true</code> if this <code>String</code> has a length of zero, and …",37,[[]]],[11,"split_off","","Splits the string into two at the given byte index.",37,[[],["string",3]]],[11,"clear","","Truncates this <code>String</code>, removing all contents.",37,[[]]],[11,"drain","","Creates a draining iterator that removes the specified …",37,[[],["drain",3]]],[11,"replace_range","","Removes the specified range in the string, and replaces …",37,[[]]],[11,"into_boxed_str","","Converts this <code>String</code> into a [<code>Box</code>]<code><</code><code>str</code><code>></code>.",37,[[],["box",3]]],[11,"as_bytes","","Returns a slice of [<code>u8</code>]s bytes that were attempted to …",38,[[]]],[11,"into_bytes","","Returns the bytes that were attempted to convert to a …",38,[[],["vec",3]]],[11,"utf8_error","","Fetch a <code>Utf8Error</code> to get more details about the …",38,[[],["utf8error",3]]],[6,"ParseError","","A type alias for <code>Infallible</code>.",null,null],[8,"ToString","","A trait for converting a value to a <code>String</code>.",null,null],[10,"to_string","","Converts the given value to a <code>String</code>.",39,[[],["string",3]]],[3,"Drain","","A draining iterator for <code>String</code>.",null,null],[11,"as_str","","Returns the remaining (sub)string of this iterator as a …",40,[[]]],[0,"sync","alloc","Thread-safe reference-counting pointers.",null,null],[3,"Arc","alloc::sync","A thread-safe reference-counting pointer. \'Arc\' stands …",null,null],[3,"Weak","","<code>Weak</code> is a version of [<code>Arc</code>] that holds a non-owning …",null,null],[11,"new","","Constructs a new <code>Arc<T></code>.",41,[[],["arc",3]]],[11,"new_cyclic","","Constructs a new <code>Arc<T></code> using a weak reference to itself. …",41,[[],["arc",3]]],[11,"new_uninit","","Constructs a new <code>Arc</code> with uninitialized contents.",41,[[],[["maybeuninit",19],["arc",3]]]],[11,"new_zeroed","","Constructs a new <code>Arc</code> with uninitialized contents, with …",41,[[],[["maybeuninit",19],["arc",3]]]],[11,"pin","","Constructs a new <code>Pin<Arc<T>></code>. If <code>T</code> does not implement …",41,[[],[["pin",3],["arc",3]]]],[11,"try_unwrap","","Returns the inner value, if the <code>Arc</code> has exactly one …",41,[[],["result",4]]],[11,"new_uninit_slice","","Constructs a new atomically reference-counted slice with …",41,[[],["arc",3]]],[11,"new_zeroed_slice","","Constructs a new atomically reference-counted slice with …",41,[[],["arc",3]]],[11,"assume_init","","Converts to <code>Arc<T></code>.",41,[[],["arc",3]]],[11,"assume_init","","Converts to <code>Arc<[T]></code>.",41,[[],["arc",3]]],[11,"into_raw","","Consumes the <code>Arc</code>, returning the wrapped pointer.",41,[[]]],[11,"as_ptr","","Provides a raw pointer to the data.",41,[[]]],[11,"from_raw","","Constructs an <code>Arc<T></code> from a raw pointer.",41,[[]]],[11,"downgrade","","Creates a new [<code>Weak</code>] pointer to this allocation.",41,[[],["weak",3]]],[11,"weak_count","","Gets the number of [<code>Weak</code>] pointers to this allocation.",41,[[]]],[11,"strong_count","","Gets the number of strong (<code>Arc</code>) pointers to this …",41,[[]]],[11,"incr_strong_count","","Increments the strong reference count on the <code>Arc<T></code> …",41,[[]]],[11,"decr_strong_count","","Decrements the strong reference count on the <code>Arc<T></code> …",41,[[]]],[11,"ptr_eq","","Returns <code>true</code> if the two <code>Arc</code>s point to the same allocation …",41,[[]]],[11,"make_mut","","Makes a mutable reference into the given <code>Arc</code>.",41,[[]]],[11,"get_mut","","Returns a mutable reference into the given <code>Arc</code>, if there …",41,[[],["option",4]]],[11,"get_mut_unchecked","","Returns a mutable reference into the given <code>Arc</code>, without …",41,[[]]],[11,"downcast","","Attempt to downcast the <code>Arc<dyn Any + Send + Sync></code> to a …",41,[[],[["result",4],["arc",3]]]],[11,"new","","Constructs a new <code>Weak<T></code>, without allocating any memory. …",42,[[],["weak",3]]],[11,"as_ptr","","Returns a raw pointer to the object <code>T</code> pointed to by this …",42,[[]]],[11,"into_raw","","Consumes the <code>Weak<T></code> and turns it into a raw pointer.",42,[[]]],[11,"from_raw","","Converts a raw pointer previously created by <code>into_raw</code> …",42,[[]]],[11,"upgrade","","Attempts to upgrade the <code>Weak</code> pointer to an [<code>Arc</code>], delaying…",42,[[],[["option",4],["arc",3]]]],[11,"strong_count","","Gets the number of strong (<code>Arc</code>) pointers pointing to this …",42,[[]]],[11,"weak_count","","Gets an approximation of the number of <code>Weak</code> pointers …",42,[[]]],[11,"ptr_eq","","Returns <code>true</code> if the two <code>Weak</code>s point to the same …",42,[[]]],[0,"task","alloc","Types and Traits for working with asynchronous tasks.",null,null],[8,"Wake","alloc::task","The implementation of waking a task on an executor.",null,null],[10,"wake","","Wake this task.",43,[[["arc",3]]]],[11,"wake_by_ref","","Wake this task without consuming the waker.",43,[[["arc",3]]]],[0,"vec","alloc","A contiguous growable array type with heap-allocated …",null,null],[3,"Vec","alloc::vec","A contiguous growable array type, written <code>Vec<T></code> but …",null,null],[11,"new","","Constructs a new, empty <code>Vec<T></code>.",44,[[]]],[11,"with_capacity","","Constructs a new, empty <code>Vec<T></code> with the specified …",44,[[]]],[11,"from_raw_parts","","Creates a <code>Vec<T></code> directly from the raw components of …",44,[[]]],[11,"new_in","","Constructs a new, empty <code>Vec<T, A></code>.",44,[[]]],[11,"with_capacity_in","","Constructs a new, empty <code>Vec<T, A></code> with the specified …",44,[[]]],[11,"from_raw_parts_in","","Creates a <code>Vec<T, A></code> directly from the raw components of …",44,[[]]],[11,"into_raw_parts","","Decomposes a <code>Vec<T></code> into its raw components.",44,[[]]],[11,"into_raw_parts_with_alloc","","Decomposes a <code>Vec<T></code> into its raw components.",44,[[]]],[11,"capacity","","Returns the number of elements the vector can hold without…",44,[[]]],[11,"reserve","","Reserves capacity for at least <code>additional</code> more elements …",44,[[]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly <code>additional</code> more …",44,[[]]],[11,"try_reserve","","Tries to reserve capacity for at least <code>additional</code> more …",44,[[],[["result",4],["tryreserveerror",4]]]],[11,"try_reserve_exact","","Tries to reserve the minimum capacity for exactly …",44,[[],[["result",4],["tryreserveerror",4]]]],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",44,[[]]],[11,"shrink_to","","Shrinks the capacity of the vector with a lower bound.",44,[[]]],[11,"into_boxed_slice","","Converts the vector into <code>Box<[T]></code>.",44,[[],["box",3]]],[11,"truncate","","Shortens the vector, keeping the first <code>len</code> elements and …",44,[[]]],[11,"as_slice","","Extracts a slice containing the entire vector.",44,[[]]],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",44,[[]]],[11,"as_ptr","","Returns a raw pointer to the vector\'s buffer.",44,[[]]],[11,"as_mut_ptr","","Returns an unsafe mutable pointer to the vector\'s buffer.",44,[[]]],[11,"allocator","","Returns a reference to the underlying allocator.",44,[[]]],[11,"set_len","","Forces the length of the vector to <code>new_len</code>.",44,[[]]],[11,"swap_remove","","Removes an element from the vector and returns it.",44,[[]]],[11,"insert","","Inserts an element at position <code>index</code> within the vector, …",44,[[]]],[11,"remove","","Removes and returns the element at position <code>index</code> within …",44,[[]]],[11,"retain","","Retains only the elements specified by the predicate.",44,[[]]],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the …",44,[[]]],[11,"dedup_by","","Removes all but the first of consecutive elements in the …",44,[[]]],[11,"push","","Appends an element to the back of a collection.",44,[[]]],[11,"pop","","Removes the last element from a vector and returns it, or …",44,[[],["option",4]]],[11,"append","","Moves all the elements of <code>other</code> into <code>Self</code>, leaving <code>other</code> …",44,[[]]],[11,"drain","","Creates a draining iterator that removes the specified …",44,[[],["drain",3]]],[11,"clear","","Clears the vector, removing all values.",44,[[]]],[11,"len","","Returns the number of elements in the vector, also …",44,[[]]],[11,"is_empty","","Returns <code>true</code> if the vector contains no elements.",44,[[]]],[11,"split_off","","Splits the collection into two at the given index.",44,[[]]],[11,"resize_with","","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.",44,[[]]],[11,"leak","","Consumes and leaks the <code>Vec</code>, returning a mutable reference …",44,[[]]],[11,"spare_capacity_mut","","Returns the remaining spare capacity of the vector as a …",44,[[]]],[11,"resize","","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.",44,[[]]],[11,"extend_from_slice","","Clones and appends all elements in a slice to the <code>Vec</code>.",44,[[]]],[11,"dedup","","Removes consecutive repeated elements in the vector …",44,[[]]],[11,"remove_item","","Removes the first instance of <code>item</code> from the vector if the …",44,[[],["option",4]]],[11,"splice","","Creates a splicing iterator that replaces the specified …",44,[[],["splice",3]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if …",44,[[],["drainfilter",3]]],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",45,[[]]],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable …",45,[[]]],[11,"allocator","","Returns a reference to the underlying allocator.",45,[[]]],[3,"Drain","","A draining iterator for <code>Vec<T></code>.",null,null],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",46,[[]]],[11,"allocator","","Returns a reference to the underlying allocator.",46,[[]]],[3,"Splice","","A splicing iterator for <code>Vec</code>.",null,null],[3,"DrainFilter","","An iterator which uses a closure to determine if an …",null,null],[11,"allocator","","Returns a reference to the underlying allocator.",47,[[]]],[14,"vec","alloc","Creates a <code>Vec</code> containing the arguments.",null,null],[14,"format","","Creates a <code>String</code> using interpolation of runtime …",null,null],[11,"to_owned","alloc::alloc","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"to_string","","",48,[[],["string",3]]],[11,"from","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"into","","",48,[[]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"from","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"into","","",49,[[]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"to_string","","",50,[[],["string",3]]],[11,"from","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"into","","",50,[[]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"from","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"into","","",51,[[]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"to_owned","alloc::boxed","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"into_searcher","","",2,[[],["charpredicatesearcher",3]]],[11,"is_contained_in","","",2,[[]]],[11,"is_prefix_of","","",2,[[]]],[11,"strip_prefix_of","","",2,[[],["option",4]]],[11,"is_suffix_of","","",2,[[]]],[11,"strip_suffix_of","","",2,[[],["option",4]]],[11,"into_iter","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"into_future","","",2,[[]]],[11,"to_owned","alloc::borrow","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"to_owned","alloc::collections::binary_heap","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"from","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"into","","",52,[[]]],[11,"try_into","","",52,[[],["result",4]]],[11,"into_iter","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"from","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"into","","",53,[[]]],[11,"try_into","","",53,[[],["result",4]]],[11,"into_iter","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"from","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"into","","",54,[[]]],[11,"try_into","","",54,[[],["result",4]]],[11,"into_iter","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"into","","",55,[[]]],[11,"try_into","","",55,[[],["result",4]]],[11,"into_iter","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"into","","",56,[[]]],[11,"try_into","","",56,[[],["result",4]]],[11,"into_iter","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","alloc::collections::btree_map","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"into","","",57,[[]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"into","","",58,[[]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"from","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"into","","",59,[[]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"from","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"into","","",60,[[]]],[11,"try_into","","",60,[[],["result",4]]],[11,"into_iter","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"into","","",61,[[]]],[11,"try_into","","",61,[[],["result",4]]],[11,"into_iter","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"into","","",62,[[]]],[11,"try_into","","",62,[[],["result",4]]],[11,"into_iter","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"from","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"into","","",63,[[]]],[11,"try_into","","",63,[[],["result",4]]],[11,"into_iter","","",63,[[]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"from","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"into","","",64,[[]]],[11,"try_into","","",64,[[],["result",4]]],[11,"into_iter","","",64,[[]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"from","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"into","","",65,[[]]],[11,"try_into","","",65,[[],["result",4]]],[11,"into_iter","","",65,[[]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"from","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"into","","",66,[[]]],[11,"try_into","","",66,[[],["result",4]]],[11,"into_iter","","",66,[[]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"from","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"into","","",67,[[]]],[11,"try_into","","",67,[[],["result",4]]],[11,"into_iter","","",67,[[]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"from","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"into","","",68,[[]]],[11,"try_into","","",68,[[],["result",4]]],[11,"into_iter","","",68,[[]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"from","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"into","","",69,[[]]],[11,"try_into","","",69,[[],["result",4]]],[11,"into_iter","","",69,[[]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"from","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"into","","",70,[[]]],[11,"try_into","","",70,[[],["result",4]]],[11,"into_iter","","",70,[[]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"to_owned","alloc::collections::btree_set","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"from","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"into","","",71,[[]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"from","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"into","","",72,[[]]],[11,"try_into","","",72,[[],["result",4]]],[11,"into_iter","","",72,[[]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"from","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"into","","",73,[[]]],[11,"try_into","","",73,[[],["result",4]]],[11,"into_iter","","",73,[[]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"from","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"into","","",74,[[]]],[11,"try_into","","",74,[[],["result",4]]],[11,"into_iter","","",74,[[]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"from","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"into","","",75,[[]]],[11,"try_into","","",75,[[],["result",4]]],[11,"into_iter","","",75,[[]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"to_owned","","",76,[[]]],[11,"clone_into","","",76,[[]]],[11,"from","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"into","","",76,[[]]],[11,"try_into","","",76,[[],["result",4]]],[11,"into_iter","","",76,[[]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"from","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"into","","",77,[[]]],[11,"try_into","","",77,[[],["result",4]]],[11,"into_iter","","",77,[[]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"from","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"into","","",78,[[]]],[11,"try_into","","",78,[[],["result",4]]],[11,"into_iter","","",78,[[]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"from","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"into","","",79,[[]]],[11,"try_into","","",79,[[],["result",4]]],[11,"into_iter","","",79,[[]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"to_owned","alloc::collections::linked_list","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"from","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"into","","",80,[[]]],[11,"try_into","","",80,[[],["result",4]]],[11,"into_iter","","",80,[[]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"into","","",81,[[]]],[11,"try_into","","",81,[[],["result",4]]],[11,"into_iter","","",81,[[]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"from","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"into","","",82,[[]]],[11,"try_into","","",82,[[],["result",4]]],[11,"into_iter","","",82,[[]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"into","","",83,[[]]],[11,"try_into","","",83,[[],["result",4]]],[11,"into_iter","","",83,[[]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"from","alloc::collections::vec_deque","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"into","","",84,[[]]],[11,"try_into","","",84,[[],["result",4]]],[11,"into_iter","","",84,[[]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"from","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"into","","",85,[[]]],[11,"try_into","","",85,[[],["result",4]]],[11,"into_iter","","",85,[[]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"from","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"into","","",86,[[]]],[11,"try_into","","",86,[[],["result",4]]],[11,"into_iter","","",86,[[]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"to_owned","","",87,[[]]],[11,"clone_into","","",87,[[]]],[11,"from","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"into","","",87,[[]]],[11,"try_into","","",87,[[],["result",4]]],[11,"into_iter","","",87,[[]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"from","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"to_owned","alloc::collections","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"to_string","","",14,[[],["string",3]]],[11,"from","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","alloc::fmt","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"to_string","","",88,[[],["string",3]]],[11,"from","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"into","","",88,[[]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"to_string","","",89,[[],["string",3]]],[11,"from","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"into","","",89,[[]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"from","","",90,[[]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"into","","",90,[[]]],[11,"try_into","","",90,[[],["result",4]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"from","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"into","","",91,[[]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"from","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"into","","",92,[[]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"from","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"into","","",93,[[]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"from","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"into","","",94,[[]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"from","","",95,[[]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"into","","",95,[[]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"to_owned","alloc::rc","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"to_string","","",27,[[],["string",3]]],[11,"from","","",27,[[]]],[11,"from","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"from","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"into","","",28,[[]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"to_owned","alloc::slice","",96,[[]]],[11,"clone_into","","",96,[[]]],[11,"from","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"into","","",96,[[]]],[11,"try_into","","",96,[[],["result",4]]],[11,"into_iter","","",96,[[]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"from","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"into","","",97,[[]]],[11,"try_into","","",97,[[],["result",4]]],[11,"into_iter","","",97,[[]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"to_owned","","",98,[[]]],[11,"clone_into","","",98,[[]]],[11,"from","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"into","","",98,[[]]],[11,"try_into","","",98,[[],["result",4]]],[11,"into_iter","","",98,[[]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"to_owned","","",99,[[]]],[11,"clone_into","","",99,[[]]],[11,"from","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"into","","",99,[[]]],[11,"try_into","","",99,[[],["result",4]]],[11,"into_iter","","",99,[[]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"to_owned","","",100,[[]]],[11,"clone_into","","",100,[[]]],[11,"from","","",100,[[]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"into","","",100,[[]]],[11,"try_into","","",100,[[],["result",4]]],[11,"into_iter","","",100,[[]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"to_owned","","",101,[[]]],[11,"clone_into","","",101,[[]]],[11,"from","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"into","","",101,[[]]],[11,"try_into","","",101,[[],["result",4]]],[11,"into_iter","","",101,[[]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"from","","",102,[[]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"into","","",102,[[]]],[11,"try_into","","",102,[[],["result",4]]],[11,"into_iter","","",102,[[]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"from","","",103,[[]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"into","","",103,[[]]],[11,"try_into","","",103,[[],["result",4]]],[11,"into_iter","","",103,[[]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"to_owned","","",104,[[]]],[11,"clone_into","","",104,[[]]],[11,"from","","",104,[[]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"into","","",104,[[]]],[11,"try_into","","",104,[[],["result",4]]],[11,"into_iter","","",104,[[]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"from","","",105,[[]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"into","","",105,[[]]],[11,"try_into","","",105,[[],["result",4]]],[11,"into_iter","","",105,[[]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"to_owned","","",106,[[]]],[11,"clone_into","","",106,[[]]],[11,"from","","",106,[[]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"into","","",106,[[]]],[11,"try_into","","",106,[[],["result",4]]],[11,"into_iter","","",106,[[]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"from","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"into","","",107,[[]]],[11,"try_into","","",107,[[],["result",4]]],[11,"into_iter","","",107,[[]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"to_owned","","",108,[[]]],[11,"clone_into","","",108,[[]]],[11,"from","","",108,[[]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"into","","",108,[[]]],[11,"try_into","","",108,[[],["result",4]]],[11,"into_iter","","",108,[[]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"to_owned","","",109,[[]]],[11,"clone_into","","",109,[[]]],[11,"from","","",109,[[]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"into","","",109,[[]]],[11,"try_into","","",109,[[],["result",4]]],[11,"into_iter","","",109,[[]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"from","","",110,[[]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"into","","",110,[[]]],[11,"try_into","","",110,[[],["result",4]]],[11,"into_iter","","",110,[[]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"from","","",111,[[]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"into","","",111,[[]]],[11,"try_into","","",111,[[],["result",4]]],[11,"into_iter","","",111,[[]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"to_owned","","",112,[[]]],[11,"clone_into","","",112,[[]]],[11,"from","","",112,[[]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"into","","",112,[[]]],[11,"try_into","","",112,[[],["result",4]]],[11,"into_iter","","",112,[[]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"from","","",113,[[]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"into","","",113,[[]]],[11,"try_into","","",113,[[],["result",4]]],[11,"into_iter","","",113,[[]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"from","","",114,[[]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"into","","",114,[[]]],[11,"try_into","","",114,[[],["result",4]]],[11,"into_iter","","",114,[[]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"from","","",115,[[]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"into","","",115,[[]]],[11,"try_into","","",115,[[],["result",4]]],[11,"into_iter","","",115,[[]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"from","","",116,[[]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"into","","",116,[[]]],[11,"try_into","","",116,[[],["result",4]]],[11,"into_iter","","",116,[[]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"from","","",117,[[]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"into","","",117,[[]]],[11,"try_into","","",117,[[],["result",4]]],[11,"into_iter","","",117,[[]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"to_owned","alloc::str::pattern","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"from","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"into","","",33,[[]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"to_owned","","",118,[[]]],[11,"clone_into","","",118,[[]]],[11,"from","","",118,[[]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"into","","",118,[[]]],[11,"try_into","","",118,[[],["result",4]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"to_owned","","",119,[[]]],[11,"clone_into","","",119,[[]]],[11,"from","","",119,[[]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"into","","",119,[[]]],[11,"try_into","","",119,[[],["result",4]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"to_owned","","",120,[[]]],[11,"clone_into","","",120,[[]]],[11,"from","","",120,[[]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"into","","",120,[[]]],[11,"try_into","","",120,[[],["result",4]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"to_owned","","",121,[[]]],[11,"clone_into","","",121,[[]]],[11,"from","","",121,[[]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"into","","",121,[[]]],[11,"try_into","","",121,[[],["result",4]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"to_owned","alloc::str","",122,[[]]],[11,"clone_into","","",122,[[]]],[11,"from","","",122,[[]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"into","","",122,[[]]],[11,"try_into","","",122,[[],["result",4]]],[11,"into_iter","","",122,[[]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"to_owned","","",123,[[]]],[11,"clone_into","","",123,[[]]],[11,"from","","",123,[[]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"into","","",123,[[]]],[11,"try_into","","",123,[[],["result",4]]],[11,"into_iter","","",123,[[]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"to_owned","","",124,[[]]],[11,"clone_into","","",124,[[]]],[11,"from","","",124,[[]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"into","","",124,[[]]],[11,"try_into","","",124,[[],["result",4]]],[11,"into_iter","","",124,[[]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"to_owned","","",125,[[]]],[11,"clone_into","","",125,[[]]],[11,"from","","",125,[[]]],[11,"borrow","","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"into","","",125,[[]]],[11,"try_into","","",125,[[],["result",4]]],[11,"into_iter","","",125,[[]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"to_owned","","",126,[[]]],[11,"clone_into","","",126,[[]]],[11,"from","","",126,[[]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"into","","",126,[[]]],[11,"try_into","","",126,[[],["result",4]]],[11,"into_iter","","",126,[[]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"to_owned","","",127,[[]]],[11,"clone_into","","",127,[[]]],[11,"from","","",127,[[]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"into","","",127,[[]]],[11,"try_into","","",127,[[],["result",4]]],[11,"into_iter","","",127,[[]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"to_owned","","",128,[[]]],[11,"clone_into","","",128,[[]]],[11,"to_string","","",128,[[],["string",3]]],[11,"from","","",128,[[]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"into","","",128,[[]]],[11,"try_into","","",128,[[],["result",4]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"to_owned","","",129,[[]]],[11,"clone_into","","",129,[[]]],[11,"to_string","","",129,[[],["string",3]]],[11,"from","","",129,[[]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"try_from","","",129,[[],["result",4]]],[11,"into","","",129,[[]]],[11,"try_into","","",129,[[],["result",4]]],[11,"into_iter","","",129,[[]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"to_owned","","",130,[[]]],[11,"clone_into","","",130,[[]]],[11,"to_string","","",130,[[],["string",3]]],[11,"from","","",130,[[]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"try_from","","",130,[[],["result",4]]],[11,"into","","",130,[[]]],[11,"try_into","","",130,[[],["result",4]]],[11,"into_iter","","",130,[[]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"to_owned","","",131,[[]]],[11,"clone_into","","",131,[[]]],[11,"to_string","","",131,[[],["string",3]]],[11,"from","","",131,[[]]],[11,"borrow","","",131,[[]]],[11,"borrow_mut","","",131,[[]]],[11,"try_from","","",131,[[],["result",4]]],[11,"into","","",131,[[]]],[11,"try_into","","",131,[[],["result",4]]],[11,"into_iter","","",131,[[]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"to_owned","","",132,[[]]],[11,"clone_into","","",132,[[]]],[11,"to_string","","",132,[[],["string",3]]],[11,"from","","",132,[[]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"try_from","","",132,[[],["result",4]]],[11,"into","","",132,[[]]],[11,"try_into","","",132,[[],["result",4]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"to_owned","","",133,[[]]],[11,"clone_into","","",133,[[]]],[11,"from","","",133,[[]]],[11,"borrow","","",133,[[]]],[11,"borrow_mut","","",133,[[]]],[11,"try_from","","",133,[[],["result",4]]],[11,"into","","",133,[[]]],[11,"try_into","","",133,[[],["result",4]]],[11,"into_iter","","",133,[[]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"to_owned","","",134,[[]]],[11,"clone_into","","",134,[[]]],[11,"from","","",134,[[]]],[11,"borrow","","",134,[[]]],[11,"borrow_mut","","",134,[[]]],[11,"try_from","","",134,[[],["result",4]]],[11,"into","","",134,[[]]],[11,"try_into","","",134,[[],["result",4]]],[11,"into_iter","","",134,[[]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"to_owned","","",135,[[]]],[11,"clone_into","","",135,[[]]],[11,"from","","",135,[[]]],[11,"borrow","","",135,[[]]],[11,"borrow_mut","","",135,[[]]],[11,"try_from","","",135,[[],["result",4]]],[11,"into","","",135,[[]]],[11,"try_into","","",135,[[],["result",4]]],[11,"into_iter","","",135,[[]]],[11,"type_id","","",135,[[],["typeid",3]]],[11,"to_owned","","",136,[[]]],[11,"clone_into","","",136,[[]]],[11,"from","","",136,[[]]],[11,"borrow","","",136,[[]]],[11,"borrow_mut","","",136,[[]]],[11,"try_from","","",136,[[],["result",4]]],[11,"into","","",136,[[]]],[11,"try_into","","",136,[[],["result",4]]],[11,"into_iter","","",136,[[]]],[11,"type_id","","",136,[[],["typeid",3]]],[11,"to_owned","","",137,[[]]],[11,"clone_into","","",137,[[]]],[11,"from","","",137,[[]]],[11,"borrow","","",137,[[]]],[11,"borrow_mut","","",137,[[]]],[11,"try_from","","",137,[[],["result",4]]],[11,"into","","",137,[[]]],[11,"try_into","","",137,[[],["result",4]]],[11,"into_iter","","",137,[[]]],[11,"type_id","","",137,[[],["typeid",3]]],[11,"to_owned","","",138,[[]]],[11,"clone_into","","",138,[[]]],[11,"from","","",138,[[]]],[11,"borrow","","",138,[[]]],[11,"borrow_mut","","",138,[[]]],[11,"try_from","","",138,[[],["result",4]]],[11,"into","","",138,[[]]],[11,"try_into","","",138,[[],["result",4]]],[11,"into_iter","","",138,[[]]],[11,"type_id","","",138,[[],["typeid",3]]],[11,"to_owned","","",139,[[]]],[11,"clone_into","","",139,[[]]],[11,"from","","",139,[[]]],[11,"borrow","","",139,[[]]],[11,"borrow_mut","","",139,[[]]],[11,"try_from","","",139,[[],["result",4]]],[11,"into","","",139,[[]]],[11,"try_into","","",139,[[],["result",4]]],[11,"into_iter","","",139,[[]]],[11,"type_id","","",139,[[],["typeid",3]]],[11,"to_owned","","",140,[[]]],[11,"clone_into","","",140,[[]]],[11,"from","","",140,[[]]],[11,"borrow","","",140,[[]]],[11,"borrow_mut","","",140,[[]]],[11,"try_from","","",140,[[],["result",4]]],[11,"into","","",140,[[]]],[11,"try_into","","",140,[[],["result",4]]],[11,"into_iter","","",140,[[]]],[11,"type_id","","",140,[[],["typeid",3]]],[11,"to_owned","","",141,[[]]],[11,"clone_into","","",141,[[]]],[11,"from","","",141,[[]]],[11,"borrow","","",141,[[]]],[11,"borrow_mut","","",141,[[]]],[11,"try_from","","",141,[[],["result",4]]],[11,"into","","",141,[[]]],[11,"try_into","","",141,[[],["result",4]]],[11,"into_iter","","",141,[[]]],[11,"type_id","","",141,[[],["typeid",3]]],[11,"to_owned","","",142,[[]]],[11,"clone_into","","",142,[[]]],[11,"from","","",142,[[]]],[11,"borrow","","",142,[[]]],[11,"borrow_mut","","",142,[[]]],[11,"try_from","","",142,[[],["result",4]]],[11,"into","","",142,[[]]],[11,"try_into","","",142,[[],["result",4]]],[11,"into_iter","","",142,[[]]],[11,"type_id","","",142,[[],["typeid",3]]],[11,"to_owned","","",143,[[]]],[11,"clone_into","","",143,[[]]],[11,"from","","",143,[[]]],[11,"borrow","","",143,[[]]],[11,"borrow_mut","","",143,[[]]],[11,"try_from","","",143,[[],["result",4]]],[11,"into","","",143,[[]]],[11,"try_into","","",143,[[],["result",4]]],[11,"into_iter","","",143,[[]]],[11,"type_id","","",143,[[],["typeid",3]]],[11,"to_owned","","",144,[[]]],[11,"clone_into","","",144,[[]]],[11,"from","","",144,[[]]],[11,"borrow","","",144,[[]]],[11,"borrow_mut","","",144,[[]]],[11,"try_from","","",144,[[],["result",4]]],[11,"into","","",144,[[]]],[11,"try_into","","",144,[[],["result",4]]],[11,"into_iter","","",144,[[]]],[11,"type_id","","",144,[[],["typeid",3]]],[11,"to_owned","alloc::string","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"to_string","","",37,[[],["string",3]]],[11,"from","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"into","","",37,[[]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"to_string","","",38,[[],["string",3]]],[11,"from","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"into","","",38,[[]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"to_string","","",145,[[],["string",3]]],[11,"from","","",145,[[]]],[11,"borrow","","",145,[[]]],[11,"borrow_mut","","",145,[[]]],[11,"try_from","","",145,[[],["result",4]]],[11,"into","","",145,[[]]],[11,"try_into","","",145,[[],["result",4]]],[11,"type_id","","",145,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"into","","",40,[[]]],[11,"try_into","","",40,[[],["result",4]]],[11,"into_iter","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"to_owned","alloc::sync","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"to_string","","",41,[[],["string",3]]],[11,"from","","",41,[[]]],[11,"from","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"into","","",41,[[]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"from","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"into","","",42,[[]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"to_owned","alloc::vec","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"from","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"into","","",44,[[]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"from","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"into","","",45,[[]]],[11,"try_into","","",45,[[],["result",4]]],[11,"into_iter","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"into","","",46,[[]]],[11,"try_into","","",46,[[],["result",4]]],[11,"into_iter","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","","",146,[[]]],[11,"borrow","","",146,[[]]],[11,"borrow_mut","","",146,[[]]],[11,"try_from","","",146,[[],["result",4]]],[11,"into","","",146,[[]]],[11,"try_into","","",146,[[],["result",4]]],[11,"into_iter","","",146,[[]]],[11,"type_id","","",146,[[],["typeid",3]]],[11,"from","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"into","","",47,[[]]],[11,"try_into","","",47,[[],["result",4]]],[11,"into_iter","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"next","alloc::slice","",112,[[],["option",4]]],[11,"size_hint","","",112,[[]]],[11,"next","","",103,[[],["option",4]]],[11,"size_hint","","",103,[[]]],[11,"count","","",103,[[]]],[11,"nth","","",103,[[],["option",4]]],[11,"last","","",103,[[],["option",4]]],[11,"next","alloc::str","",124,[[],["option",4]]],[11,"size_hint","","",124,[[]]],[11,"last","","",124,[[],["option",4]]],[11,"next","alloc::slice","",102,[[],["option",4]]],[11,"size_hint","","",102,[[]]],[11,"count","","",102,[[]]],[11,"nth","","",102,[[],["option",4]]],[11,"last","","",102,[[],["option",4]]],[11,"next","alloc::str","",135,[[],["option",4]]],[11,"next","alloc::slice","",100,[[],["option",4]]],[11,"size_hint","","",100,[[]]],[11,"count","","",100,[[]]],[11,"nth","","",100,[[],["option",4]]],[11,"last","","",100,[[],["option",4]]],[11,"next","","",116,[[],["option",4]]],[11,"size_hint","","",116,[[]]],[11,"next","","",98,[[],["option",4]]],[11,"size_hint","","",98,[[]]],[11,"count","","",98,[[]]],[11,"nth","","",98,[[],["option",4]]],[11,"last","","",98,[[],["option",4]]],[11,"next","alloc::str","",127,[[],["option",4]]],[11,"count","","",127,[[]]],[11,"size_hint","","",127,[[]]],[11,"last","","",127,[[],["option",4]]],[11,"next","alloc::slice","",104,[[],["option",4]]],[11,"size_hint","","",104,[[]]],[11,"next","alloc::str","",123,[[],["option",4]]],[11,"size_hint","","",123,[[]]],[11,"last","","",123,[[],["option",4]]],[11,"next","alloc::slice","",111,[[],["option",4]]],[11,"size_hint","","",111,[[]]],[11,"count","","",111,[[]]],[11,"nth","","",111,[[],["option",4]]],[11,"last","","",111,[[],["option",4]]],[11,"next","alloc::str","",126,[[],["option",4]]],[11,"count","","",126,[[]]],[11,"size_hint","","",126,[[]]],[11,"last","","",126,[[],["option",4]]],[11,"next","alloc::slice","",113,[[],["option",4]]],[11,"size_hint","","",113,[[]]],[11,"next","alloc::str","",136,[[],["option",4]]],[11,"next","","",129,[[],["option",4]]],[11,"size_hint","","",129,[[]]],[11,"try_fold","","",129,[[]]],[11,"fold","","",129,[[]]],[11,"next","","",134,[[],["option",4]]],[11,"size_hint","","",134,[[]]],[11,"next","alloc::slice","",97,[[],["option",4]]],[11,"size_hint","","",97,[[]]],[11,"count","","",97,[[]]],[11,"nth","","",97,[[],["option",4]]],[11,"last","","",97,[[],["option",4]]],[11,"__iterator_get_unchecked","","",97,[[]]],[11,"next","alloc::str","",141,[[],["option",4]]],[11,"next","alloc::slice","",101,[[],["option",4]]],[11,"size_hint","","",101,[[]]],[11,"count","","",101,[[]]],[11,"nth","","",101,[[],["option",4]]],[11,"last","","",101,[[],["option",4]]],[11,"next","alloc::str","",142,[[],["option",4]]],[11,"next","alloc::slice","",107,[[],["option",4]]],[11,"size_hint","","",107,[[]]],[11,"count","","",107,[[]]],[11,"nth","","",107,[[],["option",4]]],[11,"last","","",107,[[],["option",4]]],[11,"for_each","","",107,[[]]],[11,"all","","",107,[[]]],[11,"any","","",107,[[]]],[11,"find","","",107,[[],["option",4]]],[11,"find_map","","",107,[[],["option",4]]],[11,"position","","",107,[[],["option",4]]],[11,"rposition","","",107,[[],["option",4]]],[11,"next","alloc::str","",131,[[],["option",4]]],[11,"size_hint","","",131,[[]]],[11,"try_fold","","",131,[[]]],[11,"fold","","",131,[[]]],[11,"next","alloc::slice","",106,[[],["option",4]]],[11,"size_hint","","",106,[[]]],[11,"count","","",106,[[]]],[11,"nth","","",106,[[],["option",4]]],[11,"last","","",106,[[],["option",4]]],[11,"for_each","","",106,[[]]],[11,"all","","",106,[[]]],[11,"any","","",106,[[]]],[11,"find","","",106,[[],["option",4]]],[11,"find_map","","",106,[[],["option",4]]],[11,"position","","",106,[[],["option",4]]],[11,"rposition","","",106,[[],["option",4]]],[11,"is_sorted_by","","",106,[[]]],[11,"next","alloc::str","",139,[[],["option",4]]],[11,"next","alloc::slice","",108,[[],["option",4]]],[11,"size_hint","","",108,[[]]],[11,"count","","",108,[[]]],[11,"nth","","",108,[[],["option",4]]],[11,"last","","",108,[[],["option",4]]],[11,"next","alloc::str","",122,[[],["option",4]]],[11,"size_hint","","",122,[[]]],[11,"next","","",138,[[],["option",4]]],[11,"next","","",137,[[],["option",4]]],[11,"next","","",130,[[],["option",4]]],[11,"size_hint","","",130,[[]]],[11,"try_fold","","",130,[[]]],[11,"fold","","",130,[[]]],[11,"next","","",140,[[],["option",4]]],[11,"next","","",125,[[],["option",4]]],[11,"size_hint","","",125,[[]]],[11,"count","","",125,[[]]],[11,"last","","",125,[[],["option",4]]],[11,"nth","","",125,[[],["option",4]]],[11,"all","","",125,[[]]],[11,"any","","",125,[[]]],[11,"find","","",125,[[],["option",4]]],[11,"position","","",125,[[],["option",4]]],[11,"rposition","","",125,[[],["option",4]]],[11,"__iterator_get_unchecked","","",125,[[]]],[11,"next","alloc::slice","",110,[[],["option",4]]],[11,"size_hint","","",110,[[]]],[11,"count","","",110,[[]]],[11,"nth","","",110,[[],["option",4]]],[11,"last","","",110,[[],["option",4]]],[11,"next","","",114,[[],["option",4]]],[11,"size_hint","","",114,[[]]],[11,"next","","",109,[[],["option",4]]],[11,"size_hint","","",109,[[]]],[11,"count","","",109,[[]]],[11,"nth","","",109,[[],["option",4]]],[11,"last","","",109,[[],["option",4]]],[11,"next","alloc::str","",143,[[],["option",4]]],[11,"next","","",144,[[],["option",4]]],[11,"next","alloc::slice","",96,[[],["option",4]]],[11,"size_hint","","",96,[[]]],[11,"count","","",96,[[]]],[11,"nth","","",96,[[],["option",4]]],[11,"last","","",96,[[],["option",4]]],[11,"__iterator_get_unchecked","","",96,[[]]],[11,"next","","",115,[[],["option",4]]],[11,"size_hint","","",115,[[]]],[11,"next","","",99,[[],["option",4]]],[11,"size_hint","","",99,[[]]],[11,"count","","",99,[[]]],[11,"nth","","",99,[[],["option",4]]],[11,"last","","",99,[[],["option",4]]],[11,"next","","",117,[[],["option",4]]],[11,"size_hint","","",117,[[]]],[11,"next","alloc::str","",133,[[],["option",4]]],[11,"size_hint","","",133,[[]]],[11,"last","","",133,[[],["option",4]]],[11,"next","alloc::slice","",105,[[],["option",4]]],[11,"size_hint","","",105,[[]]],[11,"next_back","alloc::str::pattern","",118,[[],["searchstep",4]]],[11,"next_match_back","","",118,[[],["option",4]]],[11,"next_back","","",121,[[],["searchstep",4]]],[11,"next_match_back","","",121,[[],["option",4]]],[11,"next_back","","",119,[[],["searchstep",4]]],[11,"next_match_back","","",119,[[],["option",4]]],[11,"next_reject_back","","",119,[[],["option",4]]],[11,"next_back","","",120,[[],["searchstep",4]]],[11,"next_match_back","","",120,[[],["option",4]]],[11,"next_reject_back","","",120,[[],["option",4]]],[11,"hash","alloc::fmt","",88,[[]]],[11,"is_empty","alloc::slice","",109,[[]]],[11,"is_empty","","",110,[[]]],[11,"len","","",106,[[]]],[11,"is_empty","","",106,[[]]],[11,"len","alloc::str","",125,[[]]],[11,"is_empty","","",125,[[]]],[11,"is_empty","alloc::slice","",102,[[]]],[11,"is_empty","","",97,[[]]],[11,"len","","",107,[[]]],[11,"is_empty","","",107,[[]]],[11,"is_empty","","",96,[[]]],[11,"is_empty","","",98,[[]]],[11,"is_empty","","",101,[[]]],[11,"default","alloc::fmt","",88,[[],["error",3]]],[11,"write_str","","",95,[[],[["result",4],["error",3]]]],[11,"write_char","","",95,[[],[["result",4],["error",3]]]],[11,"write_fmt","","",95,[[["arguments",3]],[["result",4],["error",3]]]],[11,"as_ref","alloc::slice","",106,[[]]],[11,"cmp","alloc::fmt","",88,[[["error",3]],["ordering",4]]],[11,"clone","","",89,[[],["arguments",3]]],[11,"clone","alloc::str","",133,[[],["lines",3]]],[11,"clone","","",123,[[],["splitasciiwhitespace",3]]],[11,"clone","","",129,[[],["escapedebug",3]]],[11,"clone","","",131,[[],["escapeunicode",3]]],[11,"clone","alloc::slice","",108,[[],["rchunks",3]]],[11,"clone","alloc::str","",136,[[],["rmatchindices",3]]],[11,"clone","","",135,[[],["matchindices",3]]],[11,"clone","","",132,[[],["utf8error",3]]],[11,"clone","","",124,[[],["splitwhitespace",3]]],[11,"clone","","",142,[[],["splitn",3]]],[11,"clone","","",127,[[],["chars",3]]],[11,"clone","","",141,[[],["rsplitn",3]]],[11,"clone","","",138,[[],["rmatches",3]]],[11,"clone","alloc::slice","",109,[[],["rchunksexact",3]]],[11,"clone","","",99,[[],["chunks",3]]],[11,"clone","","",101,[[],["chunksexact",3]]],[11,"clone","alloc::str::pattern","",118,[[],["charsearcher",3]]],[11,"clone","alloc::str","",130,[[],["escapedefault",3]]],[11,"clone","","",140,[[],["split",3]]],[11,"clone","","",122,[[],["encodeutf16",3]]],[11,"clone","alloc::str::pattern","",33,[[],["searchstep",4]]],[11,"clone","alloc::slice","",98,[[],["arraywindows",3]]],[11,"clone","","",104,[[],["split",3]]],[11,"clone","alloc::str::pattern","",119,[[],["charslicesearcher",3]]],[11,"clone","alloc::alloc","",50,[[],["layouterror",3]]],[11,"clone","alloc::slice","",106,[[],["iter",3]]],[11,"clone","alloc::str::pattern","",121,[[],["strsearcher",3]]],[11,"clone","alloc::alloc","",48,[[],["allocerror",3]]],[11,"clone","alloc::str","",137,[[],["matches",3]]],[11,"clone","","",128,[[],["parseboolerror",3]]],[11,"clone","","",144,[[],["splitterminator",3]]],[11,"clone","","",134,[[],["linesany",3]]],[11,"clone","alloc::fmt","",88,[[],["error",3]]],[11,"clone","alloc::alloc","",49,[[],["layout",3]]],[11,"clone","alloc::slice","",112,[[],["rsplit",3]]],[11,"clone","alloc::str","",125,[[],["bytes",3]]],[11,"clone","","",126,[[],["charindices",3]]],[11,"clone","","",139,[[],["rsplit",3]]],[11,"clone","alloc::slice","",100,[[],["windows",3]]],[11,"clone","alloc::str::pattern","",120,[[],["charpredicatesearcher",3]]],[11,"clone","alloc::slice","",96,[[],["arraychunks",3]]],[11,"clone","alloc::str","",143,[[],["rsplitterminator",3]]],[11,"haystack","alloc::str::pattern","",121,[[]]],[11,"next","","",121,[[],["searchstep",4]]],[11,"next_match","","",121,[[],["option",4]]],[11,"haystack","","",118,[[]]],[11,"next","","",118,[[],["searchstep",4]]],[11,"next_match","","",118,[[],["option",4]]],[11,"haystack","","",120,[[]]],[11,"next","","",120,[[],["searchstep",4]]],[11,"next_match","","",120,[[],["option",4]]],[11,"next_reject","","",120,[[],["option",4]]],[11,"haystack","","",119,[[]]],[11,"next","","",119,[[],["searchstep",4]]],[11,"next_match","","",119,[[],["option",4]]],[11,"next_reject","","",119,[[],["option",4]]],[11,"fmt","alloc::str","",132,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::alloc","",50,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::str","",130,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",131,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::alloc","",48,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::fmt","",89,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",88,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::str","",129,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",128,[[["formatter",3]],[["result",4],["error",3]]]],[11,"next_back","alloc::slice","",109,[[],["option",4]]],[11,"nth_back","","",109,[[],["option",4]]],[11,"next_back","","",112,[[],["option",4]]],[11,"next_back","","",97,[[],["option",4]]],[11,"nth_back","","",97,[[],["option",4]]],[11,"next_back","","",104,[[],["option",4]]],[11,"next_back","alloc::str","",133,[[],["option",4]]],[11,"next_back","alloc::slice","",102,[[],["option",4]]],[11,"nth_back","","",102,[[],["option",4]]],[11,"next_back","","",103,[[],["option",4]]],[11,"nth_back","","",103,[[],["option",4]]],[11,"next_back","","",100,[[],["option",4]]],[11,"nth_back","","",100,[[],["option",4]]],[11,"next_back","alloc::str","",123,[[],["option",4]]],[11,"next_back","","",136,[[],["option",4]]],[11,"next_back","","",140,[[],["option",4]]],[11,"next_back","alloc::slice","",108,[[],["option",4]]],[11,"nth_back","","",108,[[],["option",4]]],[11,"next_back","alloc::str","",124,[[],["option",4]]],[11,"next_back","","",139,[[],["option",4]]],[11,"next_back","alloc::slice","",111,[[],["option",4]]],[11,"nth_back","","",111,[[],["option",4]]],[11,"next_back","alloc::str","",125,[[],["option",4]]],[11,"nth_back","","",125,[[],["option",4]]],[11,"rfind","","",125,[[],["option",4]]],[11,"next_back","","",138,[[],["option",4]]],[11,"next_back","","",137,[[],["option",4]]],[11,"next_back","","",144,[[],["option",4]]],[11,"next_back","alloc::slice","",110,[[],["option",4]]],[11,"nth_back","","",110,[[],["option",4]]],[11,"next_back","alloc::str","",134,[[],["option",4]]],[11,"next_back","","",143,[[],["option",4]]],[11,"next_back","alloc::slice","",96,[[],["option",4]]],[11,"nth_back","","",96,[[],["option",4]]],[11,"next_back","","",98,[[],["option",4]]],[11,"nth_back","","",98,[[],["option",4]]],[11,"next_back","alloc::str","",126,[[],["option",4]]],[11,"next_back","alloc::slice","",101,[[],["option",4]]],[11,"nth_back","","",101,[[],["option",4]]],[11,"next_back","","",106,[[],["option",4]]],[11,"nth_back","","",106,[[],["option",4]]],[11,"next_back","alloc::str","",127,[[],["option",4]]],[11,"next_back","alloc::slice","",107,[[],["option",4]]],[11,"nth_back","","",107,[[],["option",4]]],[11,"next_back","alloc::str","",135,[[],["option",4]]],[11,"next_back","alloc::slice","",99,[[],["option",4]]],[11,"nth_back","","",99,[[],["option",4]]],[11,"next_back","","",113,[[],["option",4]]],[11,"next_back","","",105,[[],["option",4]]],[11,"eq","alloc::str","",128,[[["parseboolerror",3]]]],[11,"ne","","",128,[[["parseboolerror",3]]]],[11,"eq","alloc::alloc","",50,[[["layouterror",3]]]],[11,"ne","","",50,[[["layouterror",3]]]],[11,"eq","alloc::fmt","",88,[[["error",3]]]],[11,"eq","alloc::alloc","",48,[[["allocerror",3]]]],[11,"eq","","",49,[[["layout",3]]]],[11,"ne","","",49,[[["layout",3]]]],[11,"eq","alloc::str","",132,[[["utf8error",3]]]],[11,"ne","","",132,[[["utf8error",3]]]],[11,"eq","alloc::str::pattern","",33,[[["searchstep",4]]]],[11,"ne","","",33,[[["searchstep",4]]]],[11,"fmt","alloc::slice","",116,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",101,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",107,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::str","",126,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::slice","",111,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::str::pattern","",120,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::slice","",108,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::str","",140,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::fmt","",89,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::str","",136,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",130,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",124,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::slice","",97,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",114,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::str","",127,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",138,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::slice","",99,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",106,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::str::pattern","",121,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::str","",129,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::slice","",117,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",109,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",105,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",96,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::str","",142,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",133,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::slice","",113,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::str","",125,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",141,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::str::pattern","",118,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::fmt","",16,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::alloc","",48,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::str","",132,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::str::pattern","",33,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::slice","",100,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::str","",128,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::slice","",98,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::str","",137,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::slice","",115,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::alloc","",50,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::str","",131,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::alloc","",49,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::slice","",112,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::str","",134,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",123,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::slice","",104,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::str","",135,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::fmt","",88,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::str::pattern","",119,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::slice","",102,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::str","",143,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",122,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::slice","",103,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",110,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::str","",139,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",144,[[["formatter",3]],[["result",4],["error",3]]]],[11,"partial_cmp","alloc::fmt","",88,[[["error",3]],[["ordering",4],["option",4]]]],[11,"to_string","alloc::borrow","",6,[[],["string",3]]],[11,"to_string","alloc::string","",37,[[],["string",3]]],[11,"deref","alloc::boxed","",2,[[]]],[11,"deref","alloc::borrow","",6,[[]]],[11,"deref","alloc::collections::binary_heap","",7,[[]]],[11,"deref","alloc::rc","",27,[[]]],[11,"deref","alloc::string","",37,[[]]],[11,"deref","alloc::sync","",41,[[]]],[11,"deref","alloc::vec","",44,[[]]],[11,"deref_mut","alloc::boxed","",2,[[]]],[11,"deref_mut","alloc::collections::binary_heap","",7,[[]]],[11,"deref_mut","alloc::string","",37,[[]]],[11,"deref_mut","alloc::vec","",44,[[]]],[11,"from","alloc::boxed","Converts a generic type <code>T</code> into a <code>Box<T></code>",2,[[]]],[11,"from","","Converts a <code>&[T]</code> into a <code>Box<[T]></code>",2,[[],["box",3]]],[11,"from","","",2,[[["cow",4]],["box",3]]],[11,"from","","Converts a <code>&str</code> into a <code>Box<str></code>",2,[[],["box",3]]],[11,"from","","",2,[[["cow",4]],["box",3]]],[11,"from","","Converts a <code>Box<str></code> into a <code>Box<[u8]></code>",2,[[["box",3]]]],[11,"from","","Converts a <code>[T; N]</code> into a <code>Box<[T]></code>",2,[[],["box",3]]],[11,"from","alloc::collections::binary_heap","Converts a <code>Vec<T></code> into a <code>BinaryHeap<T></code>.",8,[[["vec",3]],["binaryheap",3]]],[11,"from","alloc::vec","Converts a <code>BinaryHeap<T></code> into a <code>Vec<T></code>.",44,[[["binaryheap",3]],["vec",3]]],[11,"from","alloc::collections::vec_deque","Turn a <code>Vec<T></code> into a <code>VecDeque<T></code>.",12,[[["vec",3]]]],[11,"from","alloc::vec","Turn a <code>VecDeque<T></code> into a <code>Vec<T></code>.",44,[[["vecdeque",3]]]],[11,"from","alloc::collections","",14,[[["layouterror",3]]]],[11,"from","alloc::rc","",27,[[]]],[11,"from","","",27,[[],["rc",3]]],[11,"from","","",27,[[],["rc",3]]],[11,"from","","",27,[[["string",3]],["rc",3]]],[11,"from","","",27,[[["box",3]],["rc",3]]],[11,"from","","",27,[[["vec",3]],["rc",3]]],[11,"from","","",27,[[["cow",4]],["rc",3]]],[11,"from","alloc::string","",37,[[],["string",3]]],[11,"from","","Converts a <code>&mut str</code> into a <code>String</code>.",37,[[],["string",3]]],[11,"from","","",37,[[["string",3]],["string",3]]],[11,"from","","Converts the given boxed <code>str</code> slice to a <code>String</code>. It is …",37,[[["box",3]],["string",3]]],[11,"from","alloc::boxed","Converts the given <code>String</code> to a boxed <code>str</code> slice that is …",2,[[["string",3]],["box",3]]],[11,"from","alloc::string","",37,[[["cow",4]],["string",3]]],[11,"from","alloc::borrow","",6,[[],["cow",4]]],[11,"from","","",6,[[["string",3]],["cow",4]]],[11,"from","","",6,[[["string",3]],["cow",4]]],[11,"from","alloc::vec","Converts the given <code>String</code> to a vector <code>Vec</code> that holds …",44,[[["string",3]],["vec",3]]],[11,"from","alloc::string","",37,[[]]],[11,"from","alloc::sync","",41,[[]]],[11,"from","","",41,[[],["arc",3]]],[11,"from","","",41,[[],["arc",3]]],[11,"from","","",41,[[["string",3]],["arc",3]]],[11,"from","","",41,[[["box",3]],["arc",3]]],[11,"from","","",41,[[["vec",3]],["arc",3]]],[11,"from","","",41,[[["cow",4]],["arc",3]]],[11,"from","alloc::vec","",44,[[],["vec",3]]],[11,"from","","",44,[[],["vec",3]]],[11,"from","","",44,[[],["vec",3]]],[11,"from","","",44,[[["cow",4]],["vec",3]]],[11,"from","","",44,[[["box",3]]]],[11,"from","alloc::boxed","",2,[[["vec",3]]]],[11,"from","alloc::vec","",44,[[],["vec",3]]],[11,"from","alloc::borrow","",6,[[],["cow",4]]],[11,"from","","",6,[[["vec",3]],["cow",4]]],[11,"from","","",6,[[["vec",3]],["cow",4]]],[11,"fmt","alloc::alloc","",51,[[["formatter",3]],["result",6]]],[11,"fmt","alloc::boxed","",2,[[["formatter",3]],["result",6]]],[11,"fmt","alloc::borrow","",6,[[["formatter",3]],["result",6]]],[11,"fmt","alloc::collections::binary_heap","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","alloc::collections::btree_map","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",67,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",69,[[["formatter",3]],["result",6]]],[11,"fmt","","",70,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","alloc::collections::btree_set","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",73,[[["formatter",3]],["result",6]]],[11,"fmt","","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",75,[[["formatter",3]],["result",6]]],[11,"fmt","","",76,[[["formatter",3]],["result",6]]],[11,"fmt","","",77,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","alloc::collections::linked_list","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",83,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","alloc::collections::vec_deque","",84,[[["formatter",3]],["result",6]]],[11,"fmt","","",85,[[["formatter",3]],["result",6]]],[11,"fmt","","",86,[[["formatter",3]],["result",6]]],[11,"fmt","","",87,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","alloc::collections","",14,[[["formatter",3]],["result",6]]],[11,"fmt","alloc::rc","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","alloc::string","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",145,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","alloc::sync","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","alloc::vec","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",146,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","alloc::boxed","",2,[[["formatter",3]],["result",6]]],[11,"fmt","alloc::borrow","",6,[[["formatter",3]],["result",6]]],[11,"fmt","alloc::collections","",14,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","alloc::rc","",27,[[["formatter",3]],["result",6]]],[11,"fmt","alloc::string","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",145,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","alloc::sync","",41,[[["formatter",3]],["result",6]]],[11,"eq","alloc::boxed","",2,[[]]],[11,"ne","","",2,[[]]],[11,"eq","alloc::borrow","",6,[[["cow",4]]]],[11,"eq","alloc::collections::btree_map","",59,[[["btreemap",3]]]],[11,"eq","alloc::collections::btree_set","",71,[[["btreeset",3]]]],[11,"ne","","",71,[[["btreeset",3]]]],[11,"eq","alloc::collections::linked_list","",9,[[]]],[11,"ne","","",9,[[]]],[11,"eq","alloc::collections::vec_deque","",12,[[["vecdeque",3]]]],[11,"eq","","",12,[[["vec",3]]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"eq","alloc::collections","",14,[[["tryreserveerror",4]]]],[11,"ne","","",14,[[["tryreserveerror",4]]]],[11,"eq","alloc::rc","Equality for two <code>Rc</code>s.",27,[[["rc",3]]]],[11,"ne","","Inequality for two <code>Rc</code>s.",27,[[["rc",3]]]],[11,"eq","alloc::string","",38,[[["fromutf8error",3]]]],[11,"ne","","",38,[[["fromutf8error",3]]]],[11,"eq","","",37,[[["string",3]]]],[11,"ne","","",37,[[["string",3]]]],[11,"eq","","",37,[[]]],[11,"ne","","",37,[[]]],[11,"eq","","",37,[[]]],[11,"ne","","",37,[[]]],[11,"eq","alloc::borrow","",6,[[]]],[11,"ne","","",6,[[]]],[11,"eq","","",6,[[]]],[11,"ne","","",6,[[]]],[11,"eq","","",6,[[["string",3]]]],[11,"ne","","",6,[[["string",3]]]],[11,"eq","alloc::string","",37,[[["cow",4]]]],[11,"ne","","",37,[[["cow",4]]]],[11,"eq","alloc::sync","Equality for two <code>Arc</code>s.",41,[[["arc",3]]]],[11,"ne","","Inequality for two <code>Arc</code>s.",41,[[["arc",3]]]],[11,"eq","alloc::vec","",44,[[["vec",3]]]],[11,"ne","","",44,[[["vec",3]]]],[11,"eq","","",44,[[]]],[11,"ne","","",44,[[]]],[11,"eq","","",44,[[]]],[11,"ne","","",44,[[]]],[11,"eq","","",44,[[]]],[11,"ne","","",44,[[]]],[11,"eq","alloc::borrow","",6,[[["vec",3]]]],[11,"ne","","",6,[[["vec",3]]]],[11,"eq","","",6,[[]]],[11,"ne","","",6,[[]]],[11,"eq","","",6,[[]]],[11,"ne","","",6,[[]]],[11,"eq","alloc::vec","",44,[[]]],[11,"ne","","",44,[[]]],[11,"eq","","",44,[[]]],[11,"ne","","",44,[[]]],[11,"cmp","alloc::boxed","",2,[[],["ordering",4]]],[11,"cmp","alloc::borrow","",6,[[],["ordering",4]]],[11,"cmp","alloc::collections::btree_map","",59,[[["btreemap",3]],["ordering",4]]],[11,"cmp","alloc::collections::btree_set","",71,[[["btreeset",3]],["ordering",4]]],[11,"cmp","alloc::collections::linked_list","",9,[[],["ordering",4]]],[11,"cmp","alloc::collections::vec_deque","",12,[[["vecdeque",3]],["ordering",4]]],[11,"cmp","alloc::rc","Comparison for two <code>Rc</code>s.",27,[[["rc",3]],["ordering",4]]],[11,"cmp","alloc::string","",37,[[["string",3]],["ordering",4]]],[11,"cmp","alloc::sync","Comparison for two <code>Arc</code>s.",41,[[["arc",3]],["ordering",4]]],[11,"cmp","alloc::vec","",44,[[],["ordering",4]]],[11,"partial_cmp","alloc::boxed","",2,[[],[["ordering",4],["option",4]]]],[11,"lt","","",2,[[]]],[11,"le","","",2,[[]]],[11,"ge","","",2,[[]]],[11,"gt","","",2,[[]]],[11,"partial_cmp","alloc::borrow","",6,[[["cow",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","alloc::collections::btree_map","",59,[[["btreemap",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","alloc::collections::btree_set","",71,[[["btreeset",3]],[["option",4],["ordering",4]]]],[11,"lt","","",71,[[["btreeset",3]]]],[11,"le","","",71,[[["btreeset",3]]]],[11,"gt","","",71,[[["btreeset",3]]]],[11,"ge","","",71,[[["btreeset",3]]]],[11,"partial_cmp","alloc::collections::linked_list","",9,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","alloc::collections::vec_deque","",12,[[["vecdeque",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","alloc::rc","Partial comparison for two <code>Rc</code>s.",27,[[["rc",3]],[["ordering",4],["option",4]]]],[11,"lt","","Less-than comparison for two <code>Rc</code>s.",27,[[["rc",3]]]],[11,"le","","\'Less than or equal to\' comparison for two <code>Rc</code>s.",27,[[["rc",3]]]],[11,"gt","","Greater-than comparison for two <code>Rc</code>s.",27,[[["rc",3]]]],[11,"ge","","\'Greater than or equal to\' comparison for two <code>Rc</code>s.",27,[[["rc",3]]]],[11,"partial_cmp","alloc::string","",37,[[["string",3]],[["option",4],["ordering",4]]]],[11,"lt","","",37,[[["string",3]]]],[11,"le","","",37,[[["string",3]]]],[11,"gt","","",37,[[["string",3]]]],[11,"ge","","",37,[[["string",3]]]],[11,"partial_cmp","alloc::sync","Partial comparison for two <code>Arc</code>s.",41,[[["arc",3]],[["ordering",4],["option",4]]]],[11,"lt","","Less-than comparison for two <code>Arc</code>s.",41,[[["arc",3]]]],[11,"le","","\'Less than or equal to\' comparison for two <code>Arc</code>s.",41,[[["arc",3]]]],[11,"gt","","Greater-than comparison for two <code>Arc</code>s.",41,[[["arc",3]]]],[11,"ge","","\'Greater than or equal to\' comparison for two <code>Arc</code>s.",41,[[["arc",3]]]],[11,"partial_cmp","alloc::vec","",44,[[],[["ordering",4],["option",4]]]],[11,"add","alloc::borrow","",6,[[]]],[11,"add","","",6,[[["cow",4]]]],[11,"add","alloc::string","",37,[[],["string",3]]],[11,"add_assign","alloc::borrow","",6,[[]]],[11,"add_assign","","",6,[[["cow",4]]]],[11,"add_assign","alloc::string","",37,[[]]],[11,"drop","alloc::boxed","",2,[[]]],[11,"drop","alloc::collections::binary_heap","",7,[[]]],[11,"drop","","Removes heap elements in heap order.",56,[[]]],[11,"drop","alloc::collections::btree_map","",59,[[]]],[11,"drop","","",62,[[]]],[11,"drop","","",70,[[]]],[11,"drop","alloc::collections::btree_set","",79,[[]]],[11,"drop","alloc::collections::linked_list","",9,[[]]],[11,"drop","","",83,[[]]],[11,"drop","alloc::collections::vec_deque","",84,[[]]],[11,"drop","","",12,[[]]],[11,"drop","alloc::rc","Drops the <code>Rc</code>.",27,[[]]],[11,"drop","","Drops the <code>Weak</code> pointer.",28,[[]]],[11,"drop","alloc::string","",40,[[]]],[11,"drop","alloc::sync","Drops the <code>Arc</code>.",41,[[]]],[11,"drop","","Drops the <code>Weak</code> pointer.",42,[[]]],[11,"drop","alloc::vec","",44,[[]]],[11,"drop","","",45,[[]]],[11,"drop","","",46,[[]]],[11,"drop","","",146,[[]]],[11,"drop","","",47,[[]]],[11,"call","alloc::boxed","",2,[[]]],[11,"call_mut","","",2,[[]]],[11,"call_once","","",2,[[]]],[11,"resume","","",2,[[["pin",3]],["generatorstate",4]]],[11,"index","alloc::collections::btree_map","Returns a reference to the value corresponding to the …",59,[[]]],[11,"index","alloc::collections::vec_deque","",12,[[]]],[11,"index","alloc::string","",37,[[["range",3]]]],[11,"index","","",37,[[["rangeto",3]]]],[11,"index","","",37,[[["rangefrom",3]]]],[11,"index","","",37,[[["rangefull",3]]]],[11,"index","","",37,[[["rangeinclusive",3]]]],[11,"index","","",37,[[["rangetoinclusive",3]]]],[11,"index","alloc::vec","",44,[[]]],[11,"index_mut","alloc::collections::vec_deque","",12,[[]]],[11,"index_mut","alloc::string","",37,[[["range",3]]]],[11,"index_mut","","",37,[[["rangeto",3]]]],[11,"index_mut","","",37,[[["rangefrom",3]]]],[11,"index_mut","","",37,[[["rangefull",3]]]],[11,"index_mut","","",37,[[["rangeinclusive",3]]]],[11,"index_mut","","",37,[[["rangetoinclusive",3]]]],[11,"index_mut","alloc::vec","",44,[[]]],[11,"hash","alloc::boxed","",2,[[]]],[11,"hash","alloc::borrow","",6,[[]]],[11,"hash","alloc::collections::btree_map","",59,[[]]],[11,"hash","alloc::collections::btree_set","",71,[[]]],[11,"hash","alloc::collections::linked_list","",9,[[]]],[11,"hash","alloc::collections::vec_deque","",12,[[]]],[11,"hash","alloc::rc","",27,[[]]],[11,"hash","alloc::string","",37,[[]]],[11,"hash","alloc::sync","",41,[[]]],[11,"hash","alloc::vec","",44,[[]]],[11,"len","alloc::boxed","",2,[[]]],[11,"is_empty","","",2,[[]]],[11,"is_empty","alloc::collections::binary_heap","",52,[[]]],[11,"is_empty","","",53,[[]]],[11,"is_empty","","",55,[[]]],[11,"len","alloc::collections::btree_map","",60,[[]]],[11,"len","","",61,[[]]],[11,"len","","",62,[[]]],[11,"len","","",63,[[]]],[11,"len","","",64,[[]]],[11,"len","","",65,[[]]],[11,"len","","",66,[[]]],[11,"len","","",67,[[]]],[11,"len","alloc::collections::btree_set","",72,[[]]],[11,"len","","",73,[[]]],[11,"is_empty","alloc::collections::vec_deque","",85,[[]]],[11,"is_empty","","",86,[[]]],[11,"is_empty","","",87,[[]]],[11,"is_empty","alloc::vec","",45,[[]]],[11,"is_empty","","",46,[[]]],[11,"borrow","alloc::boxed","",2,[[]]],[11,"borrow","alloc::borrow","",6,[[]]],[11,"borrow","alloc::rc","",27,[[]]],[11,"borrow","alloc::vec","",44,[[]]],[11,"borrow","alloc::string","",37,[[]]],[11,"borrow","alloc::sync","",41,[[]]],[11,"borrow_mut","alloc::boxed","",2,[[]]],[11,"borrow_mut","alloc::vec","",44,[[]]],[11,"borrow_mut","alloc::string","",37,[[]]],[11,"try_from","alloc::boxed","",2,[[["box",3]],["result",4]]],[11,"try_from","alloc::rc","",27,[[["rc",3]],["result",4]]],[11,"try_from","alloc::sync","",41,[[["arc",3]],["result",4]]],[11,"finish","alloc::boxed","",2,[[]]],[11,"write","","",2,[[]]],[11,"write_u8","","",2,[[]]],[11,"write_u16","","",2,[[]]],[11,"write_u32","","",2,[[]]],[11,"write_u64","","",2,[[]]],[11,"write_u128","","",2,[[]]],[11,"write_usize","","",2,[[]]],[11,"write_i8","","",2,[[]]],[11,"write_i16","","",2,[[]]],[11,"write_i32","","",2,[[]]],[11,"write_i64","","",2,[[]]],[11,"write_i128","","",2,[[]]],[11,"write_isize","","",2,[[]]],[11,"from_str","alloc::string","",37,[[],[["result",4],["string",3]]]],[11,"write_str","","",37,[[],["result",6]]],[11,"write_char","","",37,[[],["result",6]]],[11,"from_iter","alloc::boxed","",2,[[["intoiterator",8]]]],[11,"from_iter","alloc::collections::binary_heap","",8,[[["intoiterator",8]],["binaryheap",3]]],[11,"from_iter","alloc::collections::btree_map","",59,[[["intoiterator",8]],["btreemap",3]]],[11,"from_iter","alloc::collections::btree_set","",71,[[["intoiterator",8]],["btreeset",3]]],[11,"from_iter","alloc::collections::linked_list","",9,[[["intoiterator",8]]]],[11,"from_iter","alloc::collections::vec_deque","",12,[[["intoiterator",8]],["vecdeque",3]]],[11,"from_iter","alloc::rc","Takes each element in the <code>Iterator</code> and collects it into …",27,[[["intoiterator",8]]]],[11,"from_iter","alloc::string","",37,[[["intoiterator",8]],["string",3]]],[11,"from_iter","","",37,[[["intoiterator",8]],["string",3]]],[11,"from_iter","","",37,[[["intoiterator",8]],["string",3]]],[11,"from_iter","","",37,[[["intoiterator",8]],["string",3]]],[11,"from_iter","","",37,[[["intoiterator",8]],["string",3]]],[11,"from_iter","","",37,[[["intoiterator",8]],["string",3]]],[11,"from_iter","alloc::borrow","",6,[[["intoiterator",8]],["cow",4]]],[11,"from_iter","","",6,[[["intoiterator",8]],["cow",4]]],[11,"from_iter","","",6,[[["intoiterator",8]],["cow",4]]],[11,"from_iter","alloc::sync","Takes each element in the <code>Iterator</code> and collects it into …",41,[[["intoiterator",8]]]],[11,"from_iter","alloc::vec","",44,[[["intoiterator",8]],["vec",3]]],[11,"from_iter","alloc::borrow","",6,[[["intoiterator",8]],["cow",4]]],[11,"as_ref","alloc::boxed","",2,[[]]],[11,"as_ref","alloc::borrow","",6,[[]]],[11,"as_ref","alloc::rc","",27,[[]]],[11,"as_ref","alloc::string","",37,[[]]],[11,"as_ref","","",37,[[]]],[11,"as_ref","alloc::sync","",41,[[]]],[11,"as_ref","alloc::vec","",44,[[],["vec",3]]],[11,"as_ref","","",44,[[]]],[11,"as_ref","","",45,[[]]],[11,"as_ref","","",46,[[]]],[11,"as_mut","alloc::boxed","",2,[[]]],[11,"as_mut","alloc::string","",37,[[]]],[11,"as_mut","alloc::vec","",44,[[],["vec",3]]],[11,"as_mut","","",44,[[]]],[11,"fmt","alloc::boxed","",2,[[["formatter",3]],["result",6]]],[11,"fmt","alloc::rc","",27,[[["formatter",3]],["result",6]]],[11,"fmt","alloc::sync","",41,[[["formatter",3]],["result",6]]],[11,"next_back","alloc::boxed","",2,[[],["option",4]]],[11,"nth_back","","",2,[[],["option",4]]],[11,"next_back","alloc::collections::binary_heap","",52,[[],["option",4]]],[11,"next_back","","",53,[[],["option",4]]],[11,"next_back","","",55,[[],["option",4]]],[11,"next_back","alloc::collections::btree_map","",60,[[],["option",4]]],[11,"next_back","","",61,[[],["option",4]]],[11,"next_back","","",62,[[],["option",4]]],[11,"next_back","","",63,[[],["option",4]]],[11,"next_back","","",64,[[],["option",4]]],[11,"next_back","","",65,[[],["option",4]]],[11,"next_back","","",66,[[],["option",4]]],[11,"next_back","","",67,[[],["option",4]]],[11,"next_back","","",68,[[],["option",4]]],[11,"next_back","","",69,[[],["option",4]]],[11,"next_back","alloc::collections::btree_set","",72,[[],["option",4]]],[11,"next_back","","",73,[[],["option",4]]],[11,"next_back","","",74,[[],["option",4]]],[11,"next_back","alloc::collections::linked_list","",80,[[],["option",4]]],[11,"next_back","","",81,[[],["option",4]]],[11,"next_back","","",82,[[],["option",4]]],[11,"next_back","alloc::collections::vec_deque","",84,[[],["option",4]]],[11,"next_back","","",85,[[],["option",4]]],[11,"rfold","","",85,[[]]],[11,"next_back","","",86,[[],["option",4]]],[11,"next_back","","",87,[[],["option",4]]],[11,"rfold","","",87,[[]]],[11,"try_rfold","","",87,[[]]],[11,"next_back","alloc::string","",40,[[],["option",4]]],[11,"next_back","alloc::vec","",45,[[],["option",4]]],[11,"next_back","","",46,[[],["option",4]]],[11,"next_back","","",146,[[],["option",4]]],[11,"next","alloc::boxed","",2,[[],["option",4]]],[11,"size_hint","","",2,[[]]],[11,"nth","","",2,[[],["option",4]]],[11,"last","","",2,[[],["option",4]]],[11,"next","alloc::collections::binary_heap","",52,[[],["option",4]]],[11,"size_hint","","",52,[[]]],[11,"last","","",52,[[],["option",4]]],[11,"next","","",53,[[],["option",4]]],[11,"size_hint","","",53,[[]]],[11,"next","","",54,[[],["option",4]]],[11,"size_hint","","",54,[[]]],[11,"next","","",55,[[],["option",4]]],[11,"size_hint","","",55,[[]]],[11,"next","","",56,[[],["option",4]]],[11,"size_hint","","",56,[[]]],[11,"next","alloc::collections::btree_map","",60,[[],["option",4]]],[11,"size_hint","","",60,[[]]],[11,"last","","",60,[[],["option",4]]],[11,"min","","",60,[[],["option",4]]],[11,"max","","",60,[[],["option",4]]],[11,"next","","",61,[[],["option",4]]],[11,"size_hint","","",61,[[]]],[11,"last","","",61,[[],["option",4]]],[11,"min","","",61,[[],["option",4]]],[11,"max","","",61,[[],["option",4]]],[11,"next","","",62,[[],["option",4]]],[11,"size_hint","","",62,[[]]],[11,"next","","",63,[[],["option",4]]],[11,"size_hint","","",63,[[]]],[11,"last","","",63,[[],["option",4]]],[11,"min","","",63,[[],["option",4]]],[11,"max","","",63,[[],["option",4]]],[11,"next","","",64,[[],["option",4]]],[11,"size_hint","","",64,[[]]],[11,"last","","",64,[[],["option",4]]],[11,"next","","",70,[[],["option",4]]],[11,"size_hint","","",70,[[]]],[11,"next","","",68,[[],["option",4]]],[11,"last","","",68,[[],["option",4]]],[11,"min","","",68,[[],["option",4]]],[11,"max","","",68,[[],["option",4]]],[11,"next","","",65,[[],["option",4]]],[11,"size_hint","","",65,[[]]],[11,"last","","",65,[[],["option",4]]],[11,"next","","",66,[[],["option",4]]],[11,"size_hint","","",66,[[]]],[11,"last","","",66,[[],["option",4]]],[11,"min","","",66,[[],["option",4]]],[11,"max","","",66,[[],["option",4]]],[11,"next","","",67,[[],["option",4]]],[11,"size_hint","","",67,[[]]],[11,"last","","",67,[[],["option",4]]],[11,"next","","",69,[[],["option",4]]],[11,"last","","",69,[[],["option",4]]],[11,"min","","",69,[[],["option",4]]],[11,"max","","",69,[[],["option",4]]],[11,"next","alloc::collections::btree_set","",79,[[],["option",4]]],[11,"size_hint","","",79,[[]]],[11,"next","","",72,[[],["option",4]]],[11,"size_hint","","",72,[[]]],[11,"last","","",72,[[],["option",4]]],[11,"min","","",72,[[],["option",4]]],[11,"max","","",72,[[],["option",4]]],[11,"next","","",73,[[],["option",4]]],[11,"size_hint","","",73,[[]]],[11,"next","","",74,[[],["option",4]]],[11,"last","","",74,[[],["option",4]]],[11,"min","","",74,[[],["option",4]]],[11,"max","","",74,[[],["option",4]]],[11,"next","","",75,[[],["option",4]]],[11,"size_hint","","",75,[[]]],[11,"min","","",75,[[],["option",4]]],[11,"next","","",76,[[],["option",4]]],[11,"size_hint","","",76,[[]]],[11,"min","","",76,[[],["option",4]]],[11,"next","","",77,[[],["option",4]]],[11,"size_hint","","",77,[[]]],[11,"min","","",77,[[],["option",4]]],[11,"next","","",78,[[],["option",4]]],[11,"size_hint","","",78,[[]]],[11,"min","","",78,[[],["option",4]]],[11,"next","alloc::collections::linked_list","",80,[[],["option",4]]],[11,"size_hint","","",80,[[]]],[11,"last","","",80,[[],["option",4]]],[11,"next","","",81,[[],["option",4]]],[11,"size_hint","","",81,[[]]],[11,"last","","",81,[[],["option",4]]],[11,"next","","",83,[[],["option",4]]],[11,"size_hint","","",83,[[]]],[11,"next","","",82,[[],["option",4]]],[11,"size_hint","","",82,[[]]],[11,"next","alloc::collections::vec_deque","",84,[[],["option",4]]],[11,"size_hint","","",84,[[]]],[11,"next","","",85,[[],["option",4]]],[11,"size_hint","","",85,[[]]],[11,"fold","","",85,[[]]],[11,"nth","","",85,[[],["option",4]]],[11,"last","","",85,[[],["option",4]]],[11,"next","","",86,[[],["option",4]]],[11,"size_hint","","",86,[[]]],[11,"next","","",87,[[],["option",4]]],[11,"size_hint","","",87,[[]]],[11,"fold","","",87,[[]]],[11,"try_fold","","",87,[[]]],[11,"nth","","",87,[[],["option",4]]],[11,"last","","",87,[[],["option",4]]],[11,"next","alloc::string","",40,[[],["option",4]]],[11,"size_hint","","",40,[[]]],[11,"last","","",40,[[],["option",4]]],[11,"next","alloc::vec","",45,[[],["option",4]]],[11,"size_hint","","",45,[[]]],[11,"count","","",45,[[]]],[11,"__iterator_get_unchecked","","",45,[[]]],[11,"next","","",46,[[],["option",4]]],[11,"size_hint","","",46,[[]]],[11,"next","","",146,[[],["option",4]]],[11,"size_hint","","",146,[[]]],[11,"next","","",47,[[],["option",4]]],[11,"size_hint","","",47,[[]]],[11,"as_inner","alloc::collections::binary_heap","",53,[[]]],[11,"as_inner","alloc::vec","",45,[[]]],[11,"into_iter","alloc::collections::binary_heap","Creates a consuming iterator, that is, one that moves …",8,[[],["intoiter",3]]],[11,"into_iter","alloc::collections::btree_map","",59,[[],["intoiter",3]]],[11,"into_iter","alloc::collections::btree_set","Gets an iterator for moving out the <code>BTreeSet</code>\'s contents.",71,[[],["intoiter",3]]],[11,"into_iter","alloc::collections::linked_list","Consumes the list into an iterator yielding elements by …",9,[[],["intoiter",3]]],[11,"into_iter","alloc::collections::vec_deque","Consumes the <code>VecDeque</code> into a front-to-back iterator …",12,[[],["intoiter",3]]],[11,"into_iter","alloc::vec","Creates a consuming iterator, that is, one that moves …",44,[[],["intoiter",3]]],[11,"extend","alloc::collections::binary_heap","",8,[[["intoiterator",8]]]],[11,"extend_one","","",8,[[]]],[11,"extend_reserve","","",8,[[]]],[11,"extend","","",8,[[["intoiterator",8]]]],[11,"extend_one","","",8,[[]]],[11,"extend_reserve","","",8,[[]]],[11,"extend","alloc::collections::btree_map","",59,[[["intoiterator",8]]]],[11,"extend_one","","",59,[[]]],[11,"extend","","",59,[[["intoiterator",8]]]],[11,"extend_one","","",59,[[]]],[11,"extend","alloc::collections::btree_set","",71,[[["intoiterator",8]]]],[11,"extend_one","","",71,[[]]],[11,"extend","","",71,[[["intoiterator",8]]]],[11,"extend_one","","",71,[[]]],[11,"extend","alloc::collections::linked_list","",9,[[["intoiterator",8]]]],[11,"extend_one","","",9,[[]]],[11,"extend","","",9,[[["intoiterator",8]]]],[11,"extend_one","","",9,[[]]],[11,"extend","alloc::collections::vec_deque","",12,[[["intoiterator",8]]]],[11,"extend_one","","",12,[[]]],[11,"extend_reserve","","",12,[[]]],[11,"extend","","",12,[[["intoiterator",8]]]],[11,"extend_one","","",12,[[]]],[11,"extend_reserve","","",12,[[]]],[11,"extend","alloc::string","",37,[[["intoiterator",8]]]],[11,"extend_one","","",37,[[]]],[11,"extend_reserve","","",37,[[]]],[11,"extend","","",37,[[["intoiterator",8]]]],[11,"extend_one","","",37,[[]]],[11,"extend_reserve","","",37,[[]]],[11,"extend","","",37,[[["intoiterator",8]]]],[11,"extend_one","","",37,[[]]],[11,"extend","","",37,[[["intoiterator",8]]]],[11,"extend","","",37,[[["intoiterator",8]]]],[11,"extend_one","","",37,[[["string",3]]]],[11,"extend","","",37,[[["intoiterator",8]]]],[11,"extend_one","","",37,[[["cow",4]]]],[11,"extend","alloc::vec","",44,[[["intoiterator",8]]]],[11,"extend_one","","",44,[[]]],[11,"extend_reserve","","",44,[[]]],[11,"extend","","",44,[[["intoiterator",8]]]],[11,"extend_one","","",44,[[]]],[11,"extend_reserve","","",44,[[]]],[11,"clone","alloc::alloc","",51,[[],["global",3]]],[11,"clone","alloc::boxed","Returns a new box with a <code>clone()</code> of this box\'s contents.",2,[[]]],[11,"clone_from","","Copies <code>source</code>\'s contents into <code>self</code> without creating a new …",2,[[]]],[11,"clone","","",2,[[]]],[11,"clone","","",2,[[]]],[11,"clone_from","","",2,[[]]],[11,"clone","alloc::borrow","",6,[[]]],[11,"clone_from","","",6,[[]]],[11,"clone","alloc::collections::binary_heap","",8,[[]]],[11,"clone_from","","",8,[[]]],[11,"clone","","",52,[[]]],[11,"clone","","",53,[[],["intoiter",3]]],[11,"clone","","",54,[[],["intoitersorted",3]]],[11,"clone","alloc::collections::btree_map","",59,[[],["btreemap",3]]],[11,"clone","","",60,[[]]],[11,"clone","","",63,[[]]],[11,"clone","","",64,[[]]],[11,"clone","","",68,[[]]],[11,"clone","alloc::collections::btree_set","",71,[[]]],[11,"clone_from","","",71,[[]]],[11,"clone","","",72,[[]]],[11,"clone","","",74,[[]]],[11,"clone","","",75,[[]]],[11,"clone","","",76,[[]]],[11,"clone","","",77,[[]]],[11,"clone","","",78,[[]]],[11,"clone","alloc::collections::linked_list","",80,[[]]],[11,"clone","","",82,[[],["intoiter",3]]],[11,"clone","","",10,[[]]],[11,"clone","","",9,[[]]],[11,"clone_from","","",9,[[]]],[11,"clone","alloc::collections::vec_deque","",86,[[],["intoiter",3]]],[11,"clone","","",87,[[]]],[11,"clone","","",12,[[],["vecdeque",3]]],[11,"clone_from","","",12,[[]]],[11,"clone","alloc::collections","",14,[[],["tryreserveerror",4]]],[11,"clone","alloc::rc","Makes a clone of the <code>Rc</code> pointer.",27,[[],["rc",3]]],[11,"clone","","Makes a clone of the <code>Weak</code> pointer that points to the same …",28,[[],["weak",3]]],[11,"clone","alloc::string","",38,[[],["fromutf8error",3]]],[11,"clone","","",37,[[]]],[11,"clone_from","","",37,[[]]],[11,"clone","alloc::sync","Makes a clone of the <code>Arc</code> pointer.",41,[[],["arc",3]]],[11,"clone","","Makes a clone of the <code>Weak</code> pointer that points to the same …",42,[[],["weak",3]]],[11,"clone","alloc::vec","",44,[[]]],[11,"clone_from","","",44,[[]]],[11,"clone","","",45,[[]]],[11,"default","alloc::alloc","",51,[[],["global",3]]],[11,"default","alloc::boxed","Creates a <code>Box<T></code>, with the <code>Default</code> value for T.",2,[[]]],[11,"default","","",2,[[]]],[11,"default","","",2,[[]]],[11,"default","alloc::borrow","Creates an owned Cow<\'a, B> with the default value for …",6,[[]]],[11,"default","alloc::collections::binary_heap","Creates an empty <code>BinaryHeap<T></code>.",8,[[],["binaryheap",3]]],[11,"default","alloc::collections::btree_map","Creates an empty <code>BTreeMap</code>.",59,[[],["btreemap",3]]],[11,"default","alloc::collections::btree_set","Creates an empty <code>BTreeSet</code>.",71,[[],["btreeset",3]]],[11,"default","alloc::collections::linked_list","Creates an empty <code>LinkedList<T></code>.",9,[[]]],[11,"default","alloc::collections::vec_deque","Creates an empty <code>VecDeque<T></code>.",12,[[],["vecdeque",3]]],[11,"default","alloc::rc","Creates a new <code>Rc<T></code>, with the <code>Default</code> value for <code>T</code>.",27,[[],["rc",3]]],[11,"default","","Constructs a new <code>Weak<T></code>, allocating memory for <code>T</code> without …",28,[[],["weak",3]]],[11,"default","alloc::string","Creates an empty <code>String</code>.",37,[[],["string",3]]],[11,"default","alloc::sync","Constructs a new <code>Weak<T></code>, without allocating memory. …",42,[[],["weak",3]]],[11,"default","","Creates a new <code>Arc<T></code>, with the <code>Default</code> value for <code>T</code>.",41,[[],["arc",3]]],[11,"default","alloc::vec","Creates an empty <code>Vec<T></code>.",44,[[],["vec",3]]],[11,"poll","alloc::boxed","",2,[[["pin",3],["context",3]],["poll",4]]],[11,"allocate","alloc::alloc","",51,[[["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"allocate_zeroed","","",51,[[["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"deallocate","","",51,[[["nonnull",3],["layout",3]]]],[11,"grow","","",51,[[["nonnull",3],["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"grow_zeroed","","",51,[[["nonnull",3],["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"shrink","","",51,[[["nonnull",3],["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"from_size_align","","Constructs a <code>Layout</code> from a given <code>size</code> and <code>align</code>, or …",49,[[],[["layouterror",3],["result",4],["layout",3]]]],[11,"from_size_align_unchecked","","Creates a layout, bypassing all checks.",49,[[],["layout",3]]],[11,"size","","The minimum size in bytes for a memory block of this …",49,[[]]],[11,"align","","The minimum byte alignment for a memory block of this …",49,[[]]],[11,"new","","Constructs a <code>Layout</code> suitable for holding a value of type <code>T</code>…",49,[[],["layout",3]]],[11,"for_value","","Produces layout describing a record that could be used to …",49,[[],["layout",3]]],[11,"for_value_raw","","Produces layout describing a record that could be used to …",49,[[],["layout",3]]],[11,"dangling","","Creates a <code>NonNull</code> that is dangling, but well-aligned for …",49,[[],["nonnull",3]]],[11,"align_to","","Creates a layout describing the record that can hold a …",49,[[],[["layouterror",3],["result",4],["layout",3]]]],[11,"padding_needed_for","","Returns the amount of padding we must insert after <code>self</code> …",49,[[]]],[11,"pad_to_align","","Creates a layout by rounding the size of this layout up …",49,[[],["layout",3]]],[11,"repeat","","Creates a layout describing the record for <code>n</code> instances of …",49,[[],[["result",4],["layouterror",3]]]],[11,"extend","","Creates a layout describing the record for <code>self</code> followed …",49,[[["layout",3]],[["result",4],["layouterror",3]]]],[11,"repeat_packed","","Creates a layout describing the record for <code>n</code> instances of …",49,[[],[["layouterror",3],["result",4],["layout",3]]]],[11,"extend_packed","","Creates a layout describing the record for <code>self</code> followed …",49,[[["layout",3]],[["layouterror",3],["result",4],["layout",3]]]],[11,"array","","Creates a layout describing the record for a <code>[T; n]</code>.",49,[[],[["layouterror",3],["result",4],["layout",3]]]],[11,"or_insert","alloc::collections::btree_map","Ensures a value is in the entry by inserting the default …",13,[[]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result …",13,[[["fnonce",8]]]],[11,"or_insert_with_key","","Ensures a value is in the entry by inserting, if empty, …",13,[[["fnonce",8]]]],[11,"key","","Returns a reference to this entry\'s key.",13,[[]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry …",13,[[]]],[11,"or_default","","Ensures a value is in the entry by inserting the default …",13,[[]]],[11,"key","","Gets a reference to the key that would be used when …",57,[[]]],[11,"into_key","","Take ownership of the key.",57,[[]]],[11,"insert","","Sets the value of the entry with the <code>VacantEntry</code>\'s key, …",57,[[]]],[11,"key","","Gets a reference to the key in the entry.",58,[[]]],[11,"remove_entry","","Take ownership of the key and value from the map.",58,[[]]],[11,"get","","Gets a reference to the value in the entry.",58,[[]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",58,[[]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",58,[[]]],[11,"insert","","Sets the value of the entry with the <code>OccupiedEntry</code>\'s key, …",58,[[]]],[11,"remove","","Takes the value of the entry out of the map, and returns …",58,[[]]],[11,"new","","Makes a new, empty <code>BTreeMap</code>.",59,[[],["btreemap",3]]],[11,"clear","","Clears the map, removing all elements.",59,[[]]],[11,"get","","Returns a reference to the value corresponding to the key.",59,[[],["option",4]]],[11,"get_key_value","","Returns the key-value pair corresponding to the supplied …",59,[[],["option",4]]],[11,"first_key_value","","Returns the first key-value pair in the map. The key in …",59,[[],["option",4]]],[11,"first_entry","","Returns the first entry in the map for in-place …",59,[[],[["occupiedentry",3],["option",4]]]],[11,"pop_first","","Removes and returns the first element in the map. The key …",59,[[],["option",4]]],[11,"last_key_value","","Returns the last key-value pair in the map. The key in …",59,[[],["option",4]]],[11,"last_entry","","Returns the last entry in the map for in-place …",59,[[],[["occupiedentry",3],["option",4]]]],[11,"pop_last","","Removes and returns the last element in the map. The key …",59,[[],["option",4]]],[11,"contains_key","","Returns <code>true</code> if the map contains a value for the …",59,[[]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to …",59,[[],["option",4]]],[11,"insert","","Inserts a key-value pair into the map.",59,[[],["option",4]]],[11,"remove","","Removes a key from the map, returning the value at the …",59,[[],["option",4]]],[11,"remove_entry","","Removes a key from the map, returning the stored key and …",59,[[],["option",4]]],[11,"retain","","Retains only the elements specified by the predicate.",59,[[]]],[11,"append","","Moves all elements from <code>other</code> into <code>Self</code>, leaving <code>other</code> …",59,[[]]],[11,"range","","Constructs a double-ended iterator over a sub-range of …",59,[[],["range",3]]],[11,"range_mut","","Constructs a mutable double-ended iterator over a …",59,[[],["rangemut",3]]],[11,"entry","","Gets the given key\'s corresponding entry in the map for …",59,[[],["entry",4]]],[11,"split_off","","Splits the collection into two at the given key. Returns …",59,[[]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if …",59,[[],["drainfilter",3]]],[11,"into_keys","","Creates a consuming iterator visiting all the keys, in …",59,[[],["intokeys",3]]],[11,"into_values","","Creates a consuming iterator visiting all the values, in …",59,[[],["intovalues",3]]],[11,"iter","","Gets an iterator over the entries of the map, sorted by …",59,[[],["iter",3]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, …",59,[[],["itermut",3]]],[11,"keys","","Gets an iterator over the keys of the map, in sorted …",59,[[],["keys",3]]],[11,"values","","Gets an iterator over the values of the map, in order by …",59,[[],["values",3]]],[11,"values_mut","","Gets a mutable iterator over the values of the map, in …",59,[[],["valuesmut",3]]],[11,"len","","Returns the number of elements in the map.",59,[[]]],[11,"is_empty","","Returns <code>true</code> if the map contains no elements.",59,[[]]],[11,"new","alloc::collections::btree_set","Makes a new, empty <code>BTreeSet</code>.",71,[[],["btreeset",3]]],[11,"range","","Constructs a double-ended iterator over a sub-range of …",71,[[],["range",3]]],[11,"difference","","Visits the values representing the difference, i.e., the …",71,[[["btreeset",3]],["difference",3]]],[11,"symmetric_difference","","Visits the values representing the symmetric difference, …",71,[[["btreeset",3]],["symmetricdifference",3]]],[11,"intersection","","Visits the values representing the intersection, i.e., …",71,[[["btreeset",3]],["intersection",3]]],[11,"union","","Visits the values representing the union, i.e., all the …",71,[[["btreeset",3]],["union",3]]],[11,"clear","","Clears the set, removing all values.",71,[[]]],[11,"contains","","Returns <code>true</code> if the set contains a value.",71,[[]]],[11,"get","","Returns a reference to the value in the set, if any, that …",71,[[],["option",4]]],[11,"is_disjoint","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.…",71,[[["btreeset",3]]]],[11,"is_subset","","Returns <code>true</code> if the set is a subset of another, i.e., …",71,[[["btreeset",3]]]],[11,"is_superset","","Returns <code>true</code> if the set is a superset of another, i.e., …",71,[[["btreeset",3]]]],[11,"first","","Returns a reference to the first value in the set, if any.…",71,[[],["option",4]]],[11,"last","","Returns a reference to the last value in the set, if any. …",71,[[],["option",4]]],[11,"pop_first","","Removes the first value from the set and returns it, if …",71,[[],["option",4]]],[11,"pop_last","","Removes the last value from the set and returns it, if …",71,[[],["option",4]]],[11,"insert","","Adds a value to the set.",71,[[]]],[11,"replace","","Adds a value to the set, replacing the existing value, if …",71,[[],["option",4]]],[11,"remove","","Removes a value from the set. Returns whether the value …",71,[[]]],[11,"take","","Removes and returns the value in the set, if any, that is …",71,[[],["option",4]]],[11,"retain","","Retains only the elements specified by the predicate.",71,[[]]],[11,"append","","Moves all elements from <code>other</code> into <code>Self</code>, leaving <code>other</code> …",71,[[]]],[11,"split_off","","Splits the collection into two at the given key. Returns …",71,[[]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if …",71,[[],["drainfilter",3]]],[11,"iter","","Gets an iterator that visits the values in the <code>BTreeSet</code> …",71,[[],["iter",3]]],[11,"len","","Returns the number of elements in the set.",71,[[]]],[11,"is_empty","","Returns <code>true</code> if the set contains no elements.",71,[[]]],[11,"as_str","alloc::fmt","Get the formatted string, if it has no arguments to be …",89,[[],["option",4]]],[11,"entry","","Adds a new entry to the list output.",90,[[["debug",8]],["debuglist",3]]],[11,"entries","","Adds the contents of an iterator of entries to the list …",90,[[],["debuglist",3]]],[11,"finish","","Finishes output and returns any error encountered.",90,[[],[["result",4],["error",3]]]],[11,"entry","","Adds a new entry to the map output.",91,[[["debug",8]],["debugmap",3]]],[11,"key","","Adds the key part of a new entry to the map output.",91,[[["debug",8]],["debugmap",3]]],[11,"value","","Adds the value part of a new entry to the map output.",91,[[["debug",8]],["debugmap",3]]],[11,"entries","","Adds the contents of an iterator of entries to the map …",91,[[],["debugmap",3]]],[11,"finish","","Finishes output and returns any error encountered.",91,[[],[["result",4],["error",3]]]],[11,"entry","","Adds a new entry to the set output.",92,[[["debug",8]],["debugset",3]]],[11,"entries","","Adds the contents of an iterator of entries to the set …",92,[[],["debugset",3]]],[11,"finish","","Finishes output and returns any error encountered.",92,[[],[["result",4],["error",3]]]],[11,"field","","Adds a new field to the generated struct output.",93,[[["debug",8]],["debugstruct",3]]],[11,"finish_non_exhaustive","","Marks the struct as non-exhaustive, indicating to the …",93,[[],[["result",4],["error",3]]]],[11,"finish","","Finishes output and returns any error encountered.",93,[[],[["result",4],["error",3]]]],[11,"field","","Adds a new field to the generated tuple struct output.",94,[[["debug",8]],["debugtuple",3]]],[11,"finish","","Finishes output and returns any error encountered.",94,[[],[["result",4],["error",3]]]],[11,"pad_integral","","Performs the correct padding for an integer which has …",95,[[],[["result",4],["error",3]]]],[11,"pad","","This function takes a string slice and emits it to the …",95,[[],[["result",4],["error",3]]]],[11,"write_str","","Writes some data to the underlying buffer contained …",95,[[],[["result",4],["error",3]]]],[11,"write_fmt","","Writes some formatted information into this instance.",95,[[["arguments",3]],[["result",4],["error",3]]]],[11,"flags","","Flags for formatting",95,[[]]],[11,"fill","","Character used as \'fill\' whenever there is alignment.",95,[[]]],[11,"align","","Flag indicating what form of alignment was requested.",95,[[],[["option",4],["alignment",4]]]],[11,"width","","Optionally specified integer width that the output should …",95,[[],["option",4]]],[11,"precision","","Optionally specified precision for numeric types. …",95,[[],["option",4]]],[11,"sign_plus","","Determines if the <code>+</code> flag was specified.",95,[[]]],[11,"sign_minus","","Determines if the <code>-</code> flag was specified.",95,[[]]],[11,"alternate","","Determines if the <code>#</code> flag was specified.",95,[[]]],[11,"sign_aware_zero_pad","","Determines if the <code>0</code> flag was specified.",95,[[]]],[11,"debug_struct","","Creates a [<code>DebugStruct</code>] builder designed to assist with …",95,[[],["debugstruct",3]]],[11,"debug_tuple","","Creates a <code>DebugTuple</code> builder designed to assist with …",95,[[],["debugtuple",3]]],[11,"debug_list","","Creates a <code>DebugList</code> builder designed to assist with …",95,[[],["debuglist",3]]],[11,"debug_set","","Creates a <code>DebugSet</code> builder designed to assist with …",95,[[],["debugset",3]]],[11,"debug_map","","Creates a <code>DebugMap</code> builder designed to assist with …",95,[[],["debugmap",3]]],[11,"remainder","alloc::slice","Returns the remainder of the original slice that is not …",96,[[]]],[11,"into_remainder","","Returns the remainder of the original slice that is not …",97,[[]]],[11,"remainder","","Returns the remainder of the original slice that is not …",101,[[]]],[11,"into_remainder","","Returns the remainder of the original slice that is not …",102,[[]]],[11,"as_slice","","Views the underlying data as a subslice of the original …",106,[[]]],[11,"into_slice","","Views the underlying data as a subslice of the original …",107,[[]]],[11,"as_slice","","Views the underlying data as a subslice of the original …",107,[[]]],[11,"remainder","","Returns the remainder of the original slice that is not …",109,[[]]],[11,"into_remainder","","Returns the remainder of the original slice that is not …",110,[[]]],[11,"as_str","alloc::str","Views the underlying data as a subslice of the original …",126,[[]]],[11,"as_str","","Views the underlying data as a subslice of the original …",127,[[]]],[11,"valid_up_to","","Returns the index in the given string up to which valid …",132,[[]]],[11,"error_len","","Provides more information about the failure:",132,[[],["option",4]]],[11,"as_str","","Returns remainder of the splitted string",139,[[]]],[11,"as_str","","Returns remainder of the splitted string",140,[[]]],[11,"as_str","","Returns remainder of the splitted string",141,[[]]],[11,"as_str","","Returns remainder of the splitted string",142,[[]]],[11,"as_str","","Returns remainder of the splitted string",143,[[]]],[11,"as_str","","Returns remainder of the splitted string",144,[[]]]],"p":[[8,"Allocator"],[8,"GlobalAlloc"],[3,"Box"],[8,"Borrow"],[8,"BorrowMut"],[8,"ToOwned"],[4,"Cow"],[3,"PeekMut"],[3,"BinaryHeap"],[3,"LinkedList"],[3,"Cursor"],[3,"CursorMut"],[3,"VecDeque"],[4,"Entry"],[4,"TryReserveError"],[13,"AllocError"],[4,"Alignment"],[8,"Binary"],[8,"Octal"],[8,"Debug"],[8,"Display"],[8,"Write"],[8,"LowerExp"],[8,"UpperExp"],[8,"LowerHex"],[8,"Pointer"],[8,"UpperHex"],[3,"Rc"],[3,"Weak"],[8,"SliceIndex"],[8,"Concat"],[8,"Join"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"FromStr"],[3,"String"],[3,"FromUtf8Error"],[8,"ToString"],[3,"Drain"],[3,"Arc"],[3,"Weak"],[8,"Wake"],[3,"Vec"],[3,"IntoIter"],[3,"Drain"],[3,"DrainFilter"],[3,"AllocError"],[3,"Layout"],[3,"LayoutError"],[3,"Global"],[3,"Iter"],[3,"IntoIter"],[3,"IntoIterSorted"],[3,"Drain"],[3,"DrainSorted"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"IntoKeys"],[3,"IntoValues"],[3,"Range"],[3,"RangeMut"],[3,"DrainFilter"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"DrainFilter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"DrainFilter"],[3,"Drain"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"Error"],[3,"Arguments"],[3,"DebugList"],[3,"DebugMap"],[3,"DebugSet"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"Formatter"],[3,"ArrayChunks"],[3,"ArrayChunksMut"],[3,"ArrayWindows"],[3,"Chunks"],[3,"Windows"],[3,"ChunksExact"],[3,"ChunksExactMut"],[3,"ChunksMut"],[3,"Split"],[3,"SplitMut"],[3,"Iter"],[3,"IterMut"],[3,"RChunks"],[3,"RChunksExact"],[3,"RChunksExactMut"],[3,"RChunksMut"],[3,"RSplit"],[3,"RSplitMut"],[3,"RSplitN"],[3,"RSplitNMut"],[3,"SplitN"],[3,"SplitNMut"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"EncodeUtf16"],[3,"SplitAsciiWhitespace"],[3,"SplitWhitespace"],[3,"Bytes"],[3,"CharIndices"],[3,"Chars"],[3,"ParseBoolError"],[3,"EscapeDebug"],[3,"EscapeDefault"],[3,"EscapeUnicode"],[3,"Utf8Error"],[3,"Lines"],[3,"LinesAny"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"RSplit"],[3,"Split"],[3,"RSplitN"],[3,"SplitN"],[3,"RSplitTerminator"],[3,"SplitTerminator"],[3,"FromUtf16Error"],[3,"Splice"]],"a":{"{:?}":[248],"{}":[251]}},\
"core":{"doc":"The Rust Core LibraryThe Rust Core Library is the …","i":[[0,"i128","core","The 128-bit signed integer type.",null,null],[17,"MIN","core::i128","The smallest value that can be represented by this …",null,null],[17,"MAX","","The largest value that can be represented by this integer …",null,null],[0,"i16","core","The 16-bit signed integer type.",null,null],[17,"MIN","core::i16","The smallest value that can be represented by this …",null,null],[17,"MAX","","The largest value that can be represented by this integer …",null,null],[0,"i32","core","The 32-bit signed integer type.",null,null],[17,"MIN","core::i32","The smallest value that can be represented by this …",null,null],[17,"MAX","","The largest value that can be represented by this integer …",null,null],[0,"i64","core","The 64-bit signed integer type.",null,null],[17,"MIN","core::i64","The smallest value that can be represented by this …",null,null],[17,"MAX","","The largest value that can be represented by this integer …",null,null],[0,"i8","core","The 8-bit signed integer type.",null,null],[17,"MIN","core::i8","The smallest value that can be represented by this …",null,null],[17,"MAX","","The largest value that can be represented by this integer …",null,null],[0,"isize","core","The pointer-sized signed integer type.",null,null],[17,"MIN","core::isize","The smallest value that can be represented by this …",null,null],[17,"MAX","","The largest value that can be represented by this integer …",null,null],[0,"u128","core","The 128-bit unsigned integer type.",null,null],[17,"MIN","core::u128","The smallest value that can be represented by this …",null,null],[17,"MAX","","The largest value that can be represented by this integer …",null,null],[0,"u16","core","The 16-bit unsigned integer type.",null,null],[17,"MIN","core::u16","The smallest value that can be represented by this …",null,null],[17,"MAX","","The largest value that can be represented by this integer …",null,null],[0,"u32","core","The 32-bit unsigned integer type.",null,null],[17,"MIN","core::u32","The smallest value that can be represented by this …",null,null],[17,"MAX","","The largest value that can be represented by this integer …",null,null],[0,"u64","core","The 64-bit unsigned integer type.",null,null],[17,"MIN","core::u64","The smallest value that can be represented by this …",null,null],[17,"MAX","","The largest value that can be represented by this integer …",null,null],[0,"u8","core","The 8-bit unsigned integer type.",null,null],[17,"MIN","core::u8","The smallest value that can be represented by this …",null,null],[17,"MAX","","The largest value that can be represented by this integer …",null,null],[0,"usize","core","The pointer-sized unsigned integer type.",null,null],[17,"MIN","core::usize","The smallest value that can be represented by this …",null,null],[17,"MAX","","The largest value that can be represented by this integer …",null,null],[0,"f32","core","This module provides constants which are specific to the …",null,null],[0,"consts","core::f32","Basic mathematical constants.",null,null],[17,"PI","core::f32::consts","Archimedes\' constant (π)",null,null],[17,"TAU","","The full circle constant (τ)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler\'s number (e)",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG2_10","","log2(10)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LOG10_2","","log10(2)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[17,"RADIX","core::f32","The radix or base of the internal representation of <code>f32</code>. …",null,null],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2. Use …",null,null],[17,"DIGITS","","Approximate number of significant digits in base 10. Use …",null,null],[17,"EPSILON","","Machine epsilon value for <code>f32</code>. Use <code>f32::EPSILON</code> instead.",null,null],[17,"MIN","","Smallest finite <code>f32</code> value. Use <code>f32::MIN</code> instead.",null,null],[17,"MIN_POSITIVE","","Smallest positive normal <code>f32</code> value. Use <code>f32::MIN_POSITIVE</code> …",null,null],[17,"MAX","","Largest finite <code>f32</code> value. Use <code>f32::MAX</code> instead.",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 …",null,null],[17,"MAX_EXP","","Maximum possible power of 2 exponent. Use <code>f32::MAX_EXP</code> …",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent. Use …",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent. Use <code>f32::MAX_10_EXP</code>…",null,null],[17,"NAN","","Not a Number (NaN). Use <code>f32::NAN</code> instead.",null,null],[17,"INFINITY","","Infinity (∞). Use <code>f32::INFINITY</code> instead.",null,null],[17,"NEG_INFINITY","","Negative infinity (−∞). Use <code>f32::NEG_INFINITY</code> instead.",null,null],[0,"f64","core","This module provides constants which are specific to the …",null,null],[0,"consts","core::f64","Basic mathematical constants.",null,null],[17,"PI","core::f64::consts","Archimedes\' constant (π)",null,null],[17,"TAU","","The full circle constant (τ)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler\'s number (e)",null,null],[17,"LOG2_10","","log2(10)",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_2","","log10(2)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[17,"RADIX","core::f64","The radix or base of the internal representation of <code>f64</code>. …",null,null],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2. Use …",null,null],[17,"DIGITS","","Approximate number of significant digits in base 10. Use …",null,null],[17,"EPSILON","","Machine epsilon value for <code>f64</code>. Use <code>f64::EPSILON</code> instead.",null,null],[17,"MIN","","Smallest finite <code>f64</code> value. Use <code>f64::MIN</code> instead.",null,null],[17,"MIN_POSITIVE","","Smallest positive normal <code>f64</code> value. Use <code>f64::MIN_POSITIVE</code> …",null,null],[17,"MAX","","Largest finite <code>f64</code> value. Use <code>f64::MAX</code> instead.",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 …",null,null],[17,"MAX_EXP","","Maximum possible power of 2 exponent. Use <code>f64::MAX_EXP</code> …",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent. Use …",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent. Use <code>f64::MAX_10_EXP</code>…",null,null],[17,"NAN","","Not a Number (NaN). Use <code>f64::NAN</code> instead.",null,null],[17,"INFINITY","","Infinity (∞). Use <code>f64::INFINITY</code> instead.",null,null],[17,"NEG_INFINITY","","Negative infinity (−∞). Use <code>f64::NEG_INFINITY</code> instead.",null,null],[0,"num","core","Numeric traits and functions for the built-in numeric …",null,null],[3,"Wrapping","core::num","Provides intentionally-wrapped arithmetic on <code>T</code>.",null,null],[12,"0","","",0,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[3,"NonZeroU128","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU16","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU32","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU64","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU8","","An integer that is known not to equal zero.",null,null],[3,"NonZeroUsize","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI128","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI16","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI32","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI64","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI8","","An integer that is known not to equal zero.",null,null],[3,"NonZeroIsize","","An integer that is known not to equal zero.",null,null],[3,"TryFromIntError","","The error type returned when a checked integral type …",null,null],[4,"IntErrorKind","","Enum to store the various types of errors that can cause …",null,null],[13,"Empty","","Value being parsed is empty.",1,null],[13,"InvalidDigit","","Contains an invalid digit in its context.",1,null],[13,"PosOverflow","","Integer is too large to store in target integer type.",1,null],[13,"NegOverflow","","Integer is too small to store in target integer type.",1,null],[13,"Zero","","Value was Zero",1,null],[4,"FpCategory","","A classification of floating point numbers.",null,null],[13,"Nan","","\\\"Not a Number\\\", often obtained by dividing by zero.",2,null],[13,"Infinite","","Positive or negative infinity.",2,null],[13,"Zero","","Positive or negative zero.",2,null],[13,"Subnormal","","De-normalized floating point representation (less precise …",2,null],[13,"Normal","","A regular floating point number.",2,null],[0,"prelude","core","The libcore prelude",null,null],[0,"v1","core::prelude","The core prelude",null,null],[0,"hint","core","Hints to compiler that affects how code should be emitted …",null,null],[5,"unreachable_unchecked","core::hint","Informs the compiler that this point in the code is not …",null,[[]]],[5,"spin_loop","","Emits a machine instruction to signal the processor that …",null,[[]]],[5,"black_box","","An identity function that <em><strong>hints</strong></em> to the compiler to be …",null,[[]]],[0,"intrinsics","core","Compiler intrinsics.",null,null],[5,"atomic_cxchg","core::intrinsics","Stores a value if the current value is the same as the <code>old</code>…",null,null],[5,"atomic_cxchg_acq","","Stores a value if the current value is the same as the <code>old</code>…",null,null],[5,"atomic_cxchg_rel","","Stores a value if the current value is the same as the <code>old</code>…",null,null],[5,"atomic_cxchg_acqrel","","Stores a value if the current value is the same as the <code>old</code>…",null,null],[5,"atomic_cxchg_relaxed","","Stores a value if the current value is the same as the <code>old</code>…",null,null],[5,"atomic_cxchg_failrelaxed","","Stores a value if the current value is the same as the <code>old</code>…",null,null],[5,"atomic_cxchg_failacq","","Stores a value if the current value is the same as the <code>old</code>…",null,null],[5,"atomic_cxchg_acq_failrelaxed","","Stores a value if the current value is the same as the <code>old</code>…",null,null],[5,"atomic_cxchg_acqrel_failrelaxed","","Stores a value if the current value is the same as the <code>old</code>…",null,null],[5,"atomic_cxchgweak","","Stores a value if the current value is the same as the <code>old</code>…",null,null],[5,"atomic_cxchgweak_acq","","Stores a value if the current value is the same as the <code>old</code>…",null,null],[5,"atomic_cxchgweak_rel","","Stores a value if the current value is the same as the <code>old</code>…",null,null],[5,"atomic_cxchgweak_acqrel","","Stores a value if the current value is the same as the <code>old</code>…",null,null],[5,"atomic_cxchgweak_relaxed","","Stores a value if the current value is the same as the <code>old</code>…",null,null],[5,"atomic_cxchgweak_failrelaxed","","Stores a value if the current value is the same as the <code>old</code>…",null,null],[5,"atomic_cxchgweak_failacq","","Stores a value if the current value is the same as the <code>old</code>…",null,null],[5,"atomic_cxchgweak_acq_failrelaxed","","Stores a value if the current value is the same as the <code>old</code>…",null,null],[5,"atomic_cxchgweak_acqrel_failrelaxed","","Stores a value if the current value is the same as the <code>old</code>…",null,null],[5,"atomic_load","","Loads the current value of the pointer.",null,null],[5,"atomic_load_acq","","Loads the current value of the pointer.",null,null],[5,"atomic_load_relaxed","","Loads the current value of the pointer.",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","Stores the value at the specified memory location.",null,null],[5,"atomic_store_rel","","Stores the value at the specified memory location.",null,null],[5,"atomic_store_relaxed","","Stores the value at the specified memory location.",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","Stores the value at the specified memory location, …",null,null],[5,"atomic_xchg_acq","","Stores the value at the specified memory location, …",null,null],[5,"atomic_xchg_rel","","Stores the value at the specified memory location, …",null,null],[5,"atomic_xchg_acqrel","","Stores the value at the specified memory location, …",null,null],[5,"atomic_xchg_relaxed","","Stores the value at the specified memory location, …",null,null],[5,"atomic_xadd","","Adds to the current value, returning the previous value.",null,null],[5,"atomic_xadd_acq","","Adds to the current value, returning the previous value.",null,null],[5,"atomic_xadd_rel","","Adds to the current value, returning the previous value.",null,null],[5,"atomic_xadd_acqrel","","Adds to the current value, returning the previous value.",null,null],[5,"atomic_xadd_relaxed","","Adds to the current value, returning the previous value.",null,null],[5,"atomic_xsub","","Subtract from the current value, returning the previous …",null,null],[5,"atomic_xsub_acq","","Subtract from the current value, returning the previous …",null,null],[5,"atomic_xsub_rel","","Subtract from the current value, returning the previous …",null,null],[5,"atomic_xsub_acqrel","","Subtract from the current value, returning the previous …",null,null],[5,"atomic_xsub_relaxed","","Subtract from the current value, returning the previous …",null,null],[5,"atomic_and","","Bitwise and with the current value, returning the …",null,null],[5,"atomic_and_acq","","Bitwise and with the current value, returning the …",null,null],[5,"atomic_and_rel","","Bitwise and with the current value, returning the …",null,null],[5,"atomic_and_acqrel","","Bitwise and with the current value, returning the …",null,null],[5,"atomic_and_relaxed","","Bitwise and with the current value, returning the …",null,null],[5,"atomic_nand","","Bitwise nand with the current value, returning the …",null,null],[5,"atomic_nand_acq","","Bitwise nand with the current value, returning the …",null,null],[5,"atomic_nand_rel","","Bitwise nand with the current value, returning the …",null,null],[5,"atomic_nand_acqrel","","Bitwise nand with the current value, returning the …",null,null],[5,"atomic_nand_relaxed","","Bitwise nand with the current value, returning the …",null,null],[5,"atomic_or","","Bitwise or with the current value, returning the previous …",null,null],[5,"atomic_or_acq","","Bitwise or with the current value, returning the previous …",null,null],[5,"atomic_or_rel","","Bitwise or with the current value, returning the previous …",null,null],[5,"atomic_or_acqrel","","Bitwise or with the current value, returning the previous …",null,null],[5,"atomic_or_relaxed","","Bitwise or with the current value, returning the previous …",null,null],[5,"atomic_xor","","Bitwise xor with the current value, returning the …",null,null],[5,"atomic_xor_acq","","Bitwise xor with the current value, returning the …",null,null],[5,"atomic_xor_rel","","Bitwise xor with the current value, returning the …",null,null],[5,"atomic_xor_acqrel","","Bitwise xor with the current value, returning the …",null,null],[5,"atomic_xor_relaxed","","Bitwise xor with the current value, returning the …",null,null],[5,"atomic_max","","Maximum with the current value using a signed comparison.",null,null],[5,"atomic_max_acq","","Maximum with the current value using a signed comparison.",null,null],[5,"atomic_max_rel","","Maximum with the current value using a signed comparison.",null,null],[5,"atomic_max_acqrel","","Maximum with the current value using a signed comparison.",null,null],[5,"atomic_max_relaxed","","Maximum with the current value.",null,null],[5,"atomic_min","","Minimum with the current value using a signed comparison.",null,null],[5,"atomic_min_acq","","Minimum with the current value using a signed comparison.",null,null],[5,"atomic_min_rel","","Minimum with the current value using a signed comparison.",null,null],[5,"atomic_min_acqrel","","Minimum with the current value using a signed comparison.",null,null],[5,"atomic_min_relaxed","","Minimum with the current value using a signed comparison.",null,null],[5,"atomic_umin","","Minimum with the current value using an unsigned …",null,null],[5,"atomic_umin_acq","","Minimum with the current value using an unsigned …",null,null],[5,"atomic_umin_rel","","Minimum with the current value using an unsigned …",null,null],[5,"atomic_umin_acqrel","","Minimum with the current value using an unsigned …",null,null],[5,"atomic_umin_relaxed","","Minimum with the current value using an unsigned …",null,null],[5,"atomic_umax","","Maximum with the current value using an unsigned …",null,null],[5,"atomic_umax_acq","","Maximum with the current value using an unsigned …",null,null],[5,"atomic_umax_rel","","Maximum with the current value using an unsigned …",null,null],[5,"atomic_umax_acqrel","","Maximum with the current value using an unsigned …",null,null],[5,"atomic_umax_relaxed","","Maximum with the current value using an unsigned …",null,null],[5,"prefetch_read_data","","The <code>prefetch</code> intrinsic is a hint to the code generator to …",null,null],[5,"prefetch_write_data","","The <code>prefetch</code> intrinsic is a hint to the code generator to …",null,null],[5,"prefetch_read_instruction","","The <code>prefetch</code> intrinsic is a hint to the code generator to …",null,null],[5,"prefetch_write_instruction","","The <code>prefetch</code> intrinsic is a hint to the code generator to …",null,null],[5,"atomic_fence","","An atomic fence.",null,null],[5,"atomic_fence_acq","","An atomic fence.",null,null],[5,"atomic_fence_rel","","An atomic fence.",null,null],[5,"atomic_fence_acqrel","","An atomic fence.",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_rel","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acqrel","","A compiler-only memory barrier.",null,null],[5,"rustc_peek","","Magic intrinsic that derives its meaning from attributes …",null,null],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable, …",null,null],[5,"assume","","Informs the optimizer that a condition is always true. If …",null,null],[5,"likely","","Hints to the compiler that branch condition is likely to …",null,null],[5,"unlikely","","Hints to the compiler that branch condition is likely to …",null,null],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,null],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","The minimum alignment of a type.",null,null],[5,"pref_align_of","","The preferred alignment of a type.",null,null],[5,"size_of_val","","The size of the referenced value in bytes.",null,null],[5,"min_align_of_val","","The required alignment of the referenced value.",null,null],[5,"type_name","","Gets a static string slice containing the name of a type.",null,null],[5,"type_id","","Gets an identifier which is globally unique to the …",null,null],[5,"assert_inhabited","","A guard for unsafe functions that cannot ever be executed …",null,null],[5,"assert_zero_valid","","A guard for unsafe functions that cannot ever be executed …",null,null],[5,"assert_uninit_valid","","A guard for unsafe functions that cannot ever be executed …",null,null],[5,"caller_location","","Gets a reference to a static <code>Location</code> indicating where it …",null,null],[5,"forget","","Moves a value out of scope without running drop glue.",null,null],[5,"transmute","","Reinterprets the bits of a value of one type as another …",null,null],[5,"needs_drop","","Returns <code>true</code> if the actual type given as <code>T</code> requires drop …",null,null],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially …",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate <code>llvm.memcpy.p0i8.0i8.*</code> …",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate <code>llvm.memmove.p0i8.0i8.*</code> …",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate <code>llvm.memset.p0i8.*</code> …",null,null],[5,"volatile_load","","Performs a volatile load from the <code>src</code> pointer.",null,null],[5,"volatile_store","","Performs a volatile store to the <code>dst</code> pointer.",null,null],[5,"unaligned_volatile_load","","Performs a volatile load from the <code>src</code> pointer The pointer …",null,null],[5,"unaligned_volatile_store","","Performs a volatile store to the <code>dst</code> pointer. The pointer …",null,null],[5,"sqrtf32","","Returns the square root of an <code>f32</code>",null,null],[5,"sqrtf64","","Returns the square root of an <code>f64</code>",null,null],[5,"powif32","","Raises an <code>f32</code> to an integer power.",null,null],[5,"powif64","","Raises an <code>f64</code> to an integer power.",null,null],[5,"sinf32","","Returns the sine of an <code>f32</code>.",null,null],[5,"sinf64","","Returns the sine of an <code>f64</code>.",null,null],[5,"cosf32","","Returns the cosine of an <code>f32</code>.",null,null],[5,"cosf64","","Returns the cosine of an <code>f64</code>.",null,null],[5,"powf32","","Raises an <code>f32</code> to an <code>f32</code> power.",null,null],[5,"powf64","","Raises an <code>f64</code> to an <code>f64</code> power.",null,null],[5,"expf32","","Returns the exponential of an <code>f32</code>.",null,null],[5,"expf64","","Returns the exponential of an <code>f64</code>.",null,null],[5,"exp2f32","","Returns 2 raised to the power of an <code>f32</code>.",null,null],[5,"exp2f64","","Returns 2 raised to the power of an <code>f64</code>.",null,null],[5,"logf32","","Returns the natural logarithm of an <code>f32</code>.",null,null],[5,"logf64","","Returns the natural logarithm of an <code>f64</code>.",null,null],[5,"log10f32","","Returns the base 10 logarithm of an <code>f32</code>.",null,null],[5,"log10f64","","Returns the base 10 logarithm of an <code>f64</code>.",null,null],[5,"log2f32","","Returns the base 2 logarithm of an <code>f32</code>.",null,null],[5,"log2f64","","Returns the base 2 logarithm of an <code>f64</code>.",null,null],[5,"fmaf32","","Returns <code>a * b + c</code> for <code>f32</code> values.",null,null],[5,"fmaf64","","Returns <code>a * b + c</code> for <code>f64</code> values.",null,null],[5,"fabsf32","","Returns the absolute value of an <code>f32</code>.",null,null],[5,"fabsf64","","Returns the absolute value of an <code>f64</code>.",null,null],[5,"minnumf32","","Returns the minimum of two <code>f32</code> values.",null,null],[5,"minnumf64","","Returns the minimum of two <code>f64</code> values.",null,null],[5,"maxnumf32","","Returns the maximum of two <code>f32</code> values.",null,null],[5,"maxnumf64","","Returns the maximum of two <code>f64</code> values.",null,null],[5,"copysignf32","","Copies the sign from <code>y</code> to <code>x</code> for <code>f32</code> values.",null,null],[5,"copysignf64","","Copies the sign from <code>y</code> to <code>x</code> for <code>f64</code> values.",null,null],[5,"floorf32","","Returns the largest integer less than or equal to an <code>f32</code>.",null,null],[5,"floorf64","","Returns the largest integer less than or equal to an <code>f64</code>.",null,null],[5,"ceilf32","","Returns the smallest integer greater than or equal to an …",null,null],[5,"ceilf64","","Returns the smallest integer greater than or equal to an …",null,null],[5,"truncf32","","Returns the integer part of an <code>f32</code>.",null,null],[5,"truncf64","","Returns the integer part of an <code>f64</code>.",null,null],[5,"rintf32","","Returns the nearest integer to an <code>f32</code>. May raise an …",null,null],[5,"rintf64","","Returns the nearest integer to an <code>f64</code>. May raise an …",null,null],[5,"nearbyintf32","","Returns the nearest integer to an <code>f32</code>.",null,null],[5,"nearbyintf64","","Returns the nearest integer to an <code>f64</code>.",null,null],[5,"roundf32","","Returns the nearest integer to an <code>f32</code>. Rounds half-way …",null,null],[5,"roundf64","","Returns the nearest integer to an <code>f64</code>. Rounds half-way …",null,null],[5,"fadd_fast","","Float addition that allows optimizations based on …",null,null],[5,"fsub_fast","","Float subtraction that allows optimizations based on …",null,null],[5,"fmul_fast","","Float multiplication that allows optimizations based on …",null,null],[5,"fdiv_fast","","Float division that allows optimizations based on …",null,null],[5,"frem_fast","","Float remainder that allows optimizations based on …",null,null],[5,"float_to_int_unchecked","","Convert with LLVM’s fptoui/fptosi, which may return …",null,null],[5,"ctpop","","Returns the number of bits set in an integer type <code>T</code>",null,null],[5,"ctlz","","Returns the number of leading unset bits (zeroes) in an …",null,null],[5,"ctlz_nonzero","","Like <code>ctlz</code>, but extra-unsafe as it returns <code>undef</code> when …",null,null],[5,"cttz","","Returns the number of trailing unset bits (zeroes) in an …",null,null],[5,"cttz_nonzero","","Like <code>cttz</code>, but extra-unsafe as it returns <code>undef</code> when …",null,null],[5,"bswap","","Reverses the bytes in an integer type <code>T</code>.",null,null],[5,"bitreverse","","Reverses the bits in an integer type <code>T</code>.",null,null],[5,"add_with_overflow","","Performs checked integer addition.",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication",null,null],[5,"exact_div","","Performs an exact division, resulting in undefined …",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined …",null,null],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting …",null,null],[5,"unchecked_shl","","Performs an unchecked left shift, resulting in undefined …",null,null],[5,"unchecked_shr","","Performs an unchecked right shift, resulting in undefined …",null,null],[5,"unchecked_add","","Returns the result of an unchecked addition, resulting in …",null,null],[5,"unchecked_sub","","Returns the result of an unchecked subtraction, resulting …",null,null],[5,"unchecked_mul","","Returns the result of an unchecked multiplication, …",null,null],[5,"rotate_left","","Performs rotate left.",null,null],[5,"rotate_right","","Performs rotate right.",null,null],[5,"wrapping_add","","Returns (a + b) mod 2N, where N is the width of T in bits.",null,null],[5,"wrapping_sub","","Returns (a - b) mod 2N, where N is the width of T in bits.",null,null],[5,"wrapping_mul","","Returns (a * b) mod 2N, where N is the width of T in bits.",null,null],[5,"saturating_add","","Computes <code>a + b</code>, while saturating at numeric bounds.",null,null],[5,"saturating_sub","","Computes <code>a - b</code>, while saturating at numeric bounds.",null,null],[5,"discriminant_value","","Returns the value of the discriminant for the variant in …",null,null],[5,"variant_count","","Returns the number of variants of the type <code>T</code> cast to a …",null,null],[5,"try","","Rust\'s \\\"try catch\\\" construct which invokes the function …",null,null],[5,"nontemporal_store","","Emits a <code>!nontemporal</code> store according to LLVM (see their …",null,null],[5,"ptr_offset_from","","See documentation of <code><*const T>::offset_from</code> for details.",null,null],[5,"ptr_guaranteed_eq","","See documentation of <code><*const T>::guaranteed_eq</code> for …",null,null],[5,"ptr_guaranteed_ne","","See documentation of <code><*const T>::guaranteed_ne</code> for …",null,null],[5,"const_allocate","","Allocate at compile time. Should not be called at runtime.",null,null],[5,"copy_nonoverlapping","","Copies <code>count * size_of::<T>()</code> bytes from <code>src</code> to <code>dst</code>. The …",null,[[]]],[5,"copy","","Copies <code>count * size_of::<T>()</code> bytes from <code>src</code> to <code>dst</code>. The …",null,[[]]],[5,"write_bytes","","Sets <code>count * size_of::<T>()</code> bytes of memory starting at …",null,[[]]],[0,"mem","core","Basic functions for dealing with memory.",null,null],[5,"transmute","core::mem","Reinterprets the bits of a value of one type as another …",null,null],[3,"ManuallyDrop","","A wrapper to inhibit compiler from automatically calling <code>T</code>…",null,null],[19,"MaybeUninit","","A wrapper type to construct uninitialized instances of <code>T</code>.",null,null],[5,"forget","","Takes ownership and \\\"forgets\\\" about the value <strong>without …",null,[[]]],[5,"forget_unsized","","Like [<code>forget</code>], but also accepts unsized values.",null,[[["sized",8]]]],[5,"size_of","","Returns the size of a type in bytes.",null,[[]]],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",null,[[]]],[5,"size_of_val_raw","","Returns the size of the pointed-to value in bytes.",null,[[]]],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type.",null,[[]]],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of …",null,[[]]],[5,"align_of","","Returns the ABI-required minimum alignment of a type.",null,[[]]],[5,"align_of_val","","Returns the ABI-required minimum alignment of the type of …",null,[[]]],[5,"align_of_val_raw","","Returns the ABI-required minimum alignment of the type of …",null,[[]]],[5,"needs_drop","","Returns <code>true</code> if dropping values of type <code>T</code> matters.",null,[[]]],[5,"zeroed","","Returns the value of type <code>T</code> represented by the all-zero …",null,[[]]],[5,"uninitialized","","Bypasses Rust\'s normal memory-initialization checks by …",null,[[]]],[5,"swap","","Swaps the values at two mutable locations, without …",null,[[]]],[5,"take","","Replaces <code>dest</code> with the default value of <code>T</code>, returning the …",null,[[],["default",8]]],[5,"replace","","Moves <code>src</code> into the referenced <code>dest</code>, returning the …",null,[[]]],[5,"drop","","Disposes of a value.",null,[[]]],[5,"transmute_copy","","Interprets <code>src</code> as having type <code>&U</code>, and then reads <code>src</code> …",null,[[]]],[3,"Discriminant","","Opaque type representing the discriminant of an enum.",null,null],[5,"discriminant","","Returns a value uniquely identifying the enum variant in <code>v</code>…",null,[[],["discriminant",3]]],[5,"variant_count","","Returns the number of variants in the enum type <code>T</code>.",null,[[]]],[0,"ptr","core","Manually manage memory through raw pointers.",null,null],[5,"copy_nonoverlapping","core::ptr","Copies <code>count * size_of::<T>()</code> bytes from <code>src</code> to <code>dst</code>. The …",null,[[]]],[5,"copy","","Copies <code>count * size_of::<T>()</code> bytes from <code>src</code> to <code>dst</code>. The …",null,[[]]],[5,"write_bytes","","Sets <code>count * size_of::<T>()</code> bytes of memory starting at …",null,[[]]],[3,"NonNull","","<code>*mut T</code> but non-zero and covariant.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,[[]]],[5,"null","","Creates a null raw pointer.",null,[[]]],[5,"null_mut","","Creates a null mutable raw pointer.",null,[[]]],[5,"slice_from_raw_parts","","Forms a raw slice from a pointer and a length.",null,[[]]],[5,"slice_from_raw_parts_mut","","Performs the same functionality as [<code>slice_from_raw_parts</code>]…",null,[[]]],[5,"swap","","Swaps the values at two mutable locations of the same …",null,[[]]],[5,"swap_nonoverlapping","","Swaps <code>count * size_of::<T>()</code> bytes between the two …",null,[[]]],[5,"replace","","Moves <code>src</code> into the pointed <code>dst</code>, returning the previous <code>dst</code>…",null,[[]]],[5,"read","","Reads the value from <code>src</code> without moving it. This leaves …",null,[[]]],[5,"read_unaligned","","Reads the value from <code>src</code> without moving it. This leaves …",null,[[]]],[5,"write","","Overwrites a memory location with the given value without …",null,[[]]],[5,"write_unaligned","","Overwrites a memory location with the given value without …",null,[[]]],[5,"read_volatile","","Performs a volatile read of the value from <code>src</code> without …",null,[[]]],[5,"write_volatile","","Performs a volatile write of a memory location with the …",null,[[]]],[5,"eq","","Compares raw pointers for equality.",null,[[]]],[5,"hash","","Hash a raw pointer.",null,[[]]],[0,"borrow","core","A module for working with borrowed data.",null,null],[8,"Borrow","core::borrow","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",3,[[]]],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",4,[[]]],[0,"clone","core","The <code>Clone</code> trait for types that cannot be \'implicitly …",null,null],[8,"Clone","core::clone","A common trait for the ability to explicitly duplicate an …",null,null],[10,"clone","","Returns a copy of the value.",5,[[]]],[11,"clone_from","","Performs copy-assignment from <code>source</code>.",5,[[]]],[0,"cmp","core","Functionality for ordering and comparison.",null,null],[8,"PartialEq","core::cmp","Trait for equality comparisons which are partial …",null,null],[10,"eq","","This method tests for <code>self</code> and <code>other</code> values to be equal, …",6,[[]]],[11,"ne","","This method tests for <code>!=</code>.",6,[[]]],[8,"Eq","","Trait for equality comparisons which are equivalence …",null,null],[4,"Ordering","","An <code>Ordering</code> is the result of a comparison between two …",null,null],[13,"Less","","An ordering where a compared value is less than another.",7,null],[13,"Equal","","An ordering where a compared value is equal to another.",7,null],[13,"Greater","","An ordering where a compared value is greater than …",7,null],[11,"is_eq","","Returns <code>true</code> if the ordering is the <code>Equal</code> variant.",7,[[]]],[11,"is_ne","","Returns <code>true</code> if the ordering is not the <code>Equal</code> variant.",7,[[]]],[11,"is_lt","","Returns <code>true</code> if the ordering is the <code>Less</code> variant.",7,[[]]],[11,"is_gt","","Returns <code>true</code> if the ordering is the <code>Greater</code> variant.",7,[[]]],[11,"is_le","","Returns <code>true</code> if the ordering is either the <code>Less</code> or <code>Equal</code> …",7,[[]]],[11,"is_ge","","Returns <code>true</code> if the ordering is either the <code>Greater</code> or …",7,[[]]],[11,"reverse","","Reverses the <code>Ordering</code>.",7,[[],["ordering",4]]],[11,"then","","Chains two orderings.",7,[[["ordering",4]],["ordering",4]]],[11,"then_with","","Chains the ordering with the given function.",7,[[["fnonce",8]],["ordering",4]]],[3,"Reverse","","A helper struct for reverse ordering.",null,null],[12,"0","","",8,null],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an [<code>Ordering</code>] between <code>self</code> and <code>other</code>.",9,[[],["ordering",4]]],[11,"max","","Compares and returns the maximum of two values.",9,[[]]],[11,"min","","Compares and returns the minimum of two values.",9,[[]]],[11,"clamp","","Restrict a value to a certain interval.",9,[[]]],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between <code>self</code> and <code>other</code> …",10,[[],[["option",4],["ordering",4]]]],[11,"lt","","This method tests less than (for <code>self</code> and <code>other</code>) and is …",10,[[]]],[11,"le","","This method tests less than or equal to (for <code>self</code> and …",10,[[]]],[11,"gt","","This method tests greater than (for <code>self</code> and <code>other</code>) and …",10,[[]]],[11,"ge","","This method tests greater than or equal to (for <code>self</code> and …",10,[[]]],[5,"min","","Compares and returns the minimum of two values.",null,[[["ord",8]],["ord",8]]],[5,"min_by","","Returns the minimum of two values with respect to the …",null,[[["fnonce",8]]]],[5,"min_by_key","","Returns the element that gives the minimum value from the …",null,[[["fnmut",8]]]],[5,"max","","Compares and returns the maximum of two values.",null,[[["ord",8]],["ord",8]]],[5,"max_by","","Returns the maximum of two values with respect to the …",null,[[["fnonce",8]]]],[5,"max_by_key","","Returns the element that gives the maximum value from the …",null,[[["fnmut",8]]]],[0,"convert","core","Traits for conversions between types.",null,null],[8,"FloatToInt","core::convert","Supporting trait for inherent methods of <code>f32</code> and <code>f64</code> such …",null,null],[5,"identity","","The identity function.",null,[[]]],[8,"AsRef","","Used to do a cheap reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",11,[[]]],[8,"AsMut","","Used to do a cheap mutable-to-mutable reference …",null,null],[10,"as_mut","","Performs the conversion.",12,[[]]],[8,"Into","","A value-to-value conversion that consumes the input …",null,null],[10,"into","","Performs the conversion.",13,[[]]],[8,"From","","Used to do value-to-value conversions while consuming the …",null,null],[10,"from","","Performs the conversion.",14,[[]]],[8,"TryInto","","An attempted conversion that consumes <code>self</code>, which may or …",null,null],[16,"Error","","The type returned in the event of a conversion error.",15,null],[10,"try_into","","Performs the conversion.",15,[[],["result",4]]],[8,"TryFrom","","Simple and safe type conversions that may fail in a …",null,null],[16,"Error","","The type returned in the event of a conversion error.",16,null],[10,"try_from","","Performs the conversion.",16,[[],["result",4]]],[4,"Infallible","","The error type for errors that can never happen.",null,null],[0,"default","core","The <code>Default</code> trait for types which may have meaningful …",null,null],[8,"Default","core::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \\\"default value\\\" for a type.",17,[[]]],[5,"default","","Return the default value of a type according to the …",null,[[],["default",8]]],[0,"marker","core","Primitive traits and types representing basic properties …",null,null],[8,"Send","core::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile time.",null,null],[8,"Unsize","","Types that can be \\\"unsized\\\" to a dynamically-sized type.",null,null],[8,"StructuralPartialEq","","Required trait for constants used in pattern matches.",null,null],[8,"StructuralEq","","Required trait for constants used in pattern matches.",null,null],[8,"Copy","","Types whose values can be duplicated simply by copying …",null,null],[8,"Sync","","Types for which it is safe to share references between …",null,null],[3,"PhantomData","","Zero-sized type used to mark things that \\\"act like\\\" they …",null,null],[8,"DiscriminantKind","","Compiler-internal trait used to indicate the type of enum …",null,null],[16,"Discriminant","","The type of the discriminant, which must satisfy the trait…",18,null],[8,"Unpin","","Types that can be safely moved after being pinned.",null,null],[3,"PhantomPinned","","A marker type which does not implement <code>Unpin</code>.",null,null],[0,"ops","core","Overloadable operators.",null,null],[8,"Add","core::ops","The addition operator <code>+</code>.",null,null],[16,"Output","","The resulting type after applying the <code>+</code> operator.",19,null],[10,"add","","Performs the <code>+</code> operation.",19,[[]]],[8,"Div","","The division operator <code>/</code>.",null,null],[16,"Output","","The resulting type after applying the <code>/</code> operator.",20,null],[10,"div","","Performs the <code>/</code> operation.",20,[[]]],[8,"Mul","","The multiplication operator <code>*</code>.",null,null],[16,"Output","","The resulting type after applying the <code>*</code> operator.",21,null],[10,"mul","","Performs the <code>*</code> operation.",21,[[]]],[8,"Neg","","The unary negation operator <code>-</code>.",null,null],[16,"Output","","The resulting type after applying the <code>-</code> operator.",22,null],[10,"neg","","Performs the unary <code>-</code> operation.",22,[[]]],[8,"Rem","","The remainder operator <code>%</code>.",null,null],[16,"Output","","The resulting type after applying the <code>%</code> operator.",23,null],[10,"rem","","Performs the <code>%</code> operation.",23,[[]]],[8,"Sub","","The subtraction operator <code>-</code>.",null,null],[16,"Output","","The resulting type after applying the <code>-</code> operator.",24,null],[10,"sub","","Performs the <code>-</code> operation.",24,[[]]],[8,"AddAssign","","The addition assignment operator <code>+=</code>.",null,null],[10,"add_assign","","Performs the <code>+=</code> operation.",25,[[]]],[8,"DivAssign","","The division assignment operator <code>/=</code>.",null,null],[10,"div_assign","","Performs the <code>/=</code> operation.",26,[[]]],[8,"MulAssign","","The multiplication assignment operator <code>*=</code>.",null,null],[10,"mul_assign","","Performs the <code>*=</code> operation.",27,[[]]],[8,"RemAssign","","The remainder assignment operator <code>%=</code>.",null,null],[10,"rem_assign","","Performs the <code>%=</code> operation.",28,[[]]],[8,"SubAssign","","The subtraction assignment operator <code>-=</code>.",null,null],[10,"sub_assign","","Performs the <code>-=</code> operation.",29,[[]]],[8,"BitAnd","","The bitwise AND operator <code>&</code>.",null,null],[16,"Output","","The resulting type after applying the <code>&</code> operator.",30,null],[10,"bitand","","Performs the <code>&</code> operation.",30,[[]]],[8,"BitOr","","The bitwise OR operator <code>|</code>.",null,null],[16,"Output","","The resulting type after applying the <code>|</code> operator.",31,null],[10,"bitor","","Performs the <code>|</code> operation.",31,[[]]],[8,"BitXor","","The bitwise XOR operator <code>^</code>.",null,null],[16,"Output","","The resulting type after applying the <code>^</code> operator.",32,null],[10,"bitxor","","Performs the <code>^</code> operation.",32,[[]]],[8,"Not","","The unary logical negation operator <code>!</code>.",null,null],[16,"Output","","The resulting type after applying the <code>!</code> operator.",33,null],[10,"not","","Performs the unary <code>!</code> operation.",33,[[]]],[8,"Shl","","The left shift operator <code><<</code>. Note that because this trait …",null,null],[16,"Output","","The resulting type after applying the <code><<</code> operator.",34,null],[10,"shl","","Performs the <code><<</code> operation.",34,[[]]],[8,"Shr","","The right shift operator <code>>></code>. Note that because this trait …",null,null],[16,"Output","","The resulting type after applying the <code>>></code> operator.",35,null],[10,"shr","","Performs the <code>>></code> operation.",35,[[]]],[8,"BitAndAssign","","The bitwise AND assignment operator <code>&=</code>.",null,null],[10,"bitand_assign","","Performs the <code>&=</code> operation.",36,[[]]],[8,"BitOrAssign","","The bitwise OR assignment operator <code>|=</code>.",null,null],[10,"bitor_assign","","Performs the <code>|=</code> operation.",37,[[]]],[8,"BitXorAssign","","The bitwise XOR assignment operator <code>^=</code>.",null,null],[10,"bitxor_assign","","Performs the <code>^=</code> operation.",38,[[]]],[8,"ShlAssign","","The left shift assignment operator <code><<=</code>.",null,null],[10,"shl_assign","","Performs the <code><<=</code> operation.",39,[[]]],[8,"ShrAssign","","The right shift assignment operator <code>>>=</code>.",null,null],[10,"shr_assign","","Performs the <code>>>=</code> operation.",40,[[]]],[8,"Deref","","Used for immutable dereferencing operations, like <code>*v</code>.",null,null],[16,"Target","","The resulting type after dereferencing.",41,null],[10,"deref","","Dereferences the value.",41,[[]]],[8,"DerefMut","","Used for mutable dereferencing operations, like in <code>*v = 1;</code>…",null,null],[10,"deref_mut","","Mutably dereferences the value.",42,[[]]],[8,"Drop","","Custom code within the destructor.",null,null],[10,"drop","","Executes the destructor for this type.",43,[[]]],[8,"Fn","","The version of the call operator that takes an immutable …",null,null],[10,"call","","Performs the call operation.",44,[[]]],[8,"FnMut","","The version of the call operator that takes a mutable …",null,null],[10,"call_mut","","Performs the call operation.",45,[[]]],[8,"FnOnce","","The version of the call operator that takes a by-value …",null,null],[16,"Output","","The returned type after the call operator is used.",46,null],[10,"call_once","","Performs the call operation.",46,[[]]],[8,"Index","","Used for indexing operations (<code>container[index]</code>) in …",null,null],[16,"Output","","The returned type after indexing.",47,null],[10,"index","","Performs the indexing (<code>container[index]</code>) operation.",47,[[]]],[8,"IndexMut","","Used for indexing operations (<code>container[index]</code>) in …",null,null],[10,"index_mut","","Performs the mutable indexing (<code>container[index]</code>) …",48,[[]]],[3,"Range","","A (half-open) range bounded inclusively below and …",null,null],[12,"start","","The lower bound of the range (inclusive).",49,null],[12,"end","","The upper bound of the range (exclusive).",49,null],[3,"RangeFrom","","A range only bounded inclusively below (<code>start..</code>).",null,null],[12,"start","","The lower bound of the range (inclusive).",50,null],[3,"RangeFull","","An unbounded range (<code>..</code>).",null,null],[3,"RangeTo","","A range only bounded exclusively above (<code>..end</code>).",null,null],[12,"end","","The upper bound of the range (exclusive).",51,null],[4,"Bound","","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",52,null],[13,"Excluded","","An exclusive bound.",52,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in …",52,null],[8,"RangeBounds","","<code>RangeBounds</code> is implemented by Rust\'s built-in range …",null,null],[10,"start_bound","","Start index bound.",53,[[],["bound",4]]],[10,"end_bound","","End index bound.",53,[[],["bound",4]]],[11,"assert_len","","Performs bounds-checking of this range.",53,[[],["range",3]]],[11,"contains","","Returns <code>true</code> if <code>item</code> is contained in the range.",53,[[]]],[3,"RangeInclusive","","A range bounded inclusively below and above (<code>start..=end</code>).",null,null],[3,"RangeToInclusive","","A range only bounded inclusively above (<code>..=end</code>).",null,null],[12,"end","","The upper bound of the range (inclusive)",54,null],[8,"Try","","A trait for customizing the behavior of the <code>?</code> operator.",null,null],[16,"Ok","","The type of this value when viewed as successful.",55,null],[16,"Error","","The type of this value when viewed as failed.",55,null],[10,"into_result","","Applies the \\\"?\\\" operator. A return of <code>Ok(t)</code> means that the…",55,[[],["result",4]]],[10,"from_error","","Wrap an error value to construct the composite result. …",55,[[]]],[10,"from_ok","","Wrap an OK value to construct the composite result. For …",55,[[]]],[8,"Generator","","The trait implemented by builtin generator types.",null,null],[16,"Yield","","The type of value this generator yields.",56,null],[16,"Return","","The type of value this generator returns.",56,null],[10,"resume","","Resumes the execution of this generator.",56,[[["pin",3]],["generatorstate",4]]],[4,"GeneratorState","","The result of a generator resumption.",null,null],[13,"Yielded","","The generator suspended with a value.",57,null],[13,"Complete","","The generator completed with a return value.",57,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper …",null,null],[8,"DispatchFromDyn","","This is used for object safety, to check that a method\'s …",null,null],[4,"ControlFlow","","Used to make try_fold closures more like normal loops",null,null],[13,"Continue","","Continue in the loop, using the given value for the next …",58,null],[13,"Break","","Exit the loop, yielding the given value",58,null],[0,"any","core","This module implements the <code>Any</code> trait, which enables …",null,null],[8,"Any","core::any","A trait to emulate dynamic typing.",null,null],[10,"type_id","","Gets the <code>TypeId</code> of <code>self</code>.",59,[[],["typeid",3]]],[11,"is","","Returns <code>true</code> if the boxed type is the same as <code>T</code>.",59,[[]]],[11,"downcast_ref","","Returns some reference to the boxed value if it is of …",59,[[],["option",4]]],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it …",59,[[],["option",4]]],[11,"is","","Forwards to the method defined on the type <code>Any</code>.",59,[[]]],[11,"downcast_ref","","Forwards to the method defined on the type <code>Any</code>.",59,[[],["option",4]]],[11,"downcast_mut","","Forwards to the method defined on the type <code>Any</code>.",59,[[],["option",4]]],[11,"is","","Forwards to the method defined on the type <code>Any</code>.",59,[[]]],[11,"downcast_ref","","Forwards to the method defined on the type <code>Any</code>.",59,[[],["option",4]]],[11,"downcast_mut","","Forwards to the method defined on the type <code>Any</code>.",59,[[],["option",4]]],[3,"TypeId","","A <code>TypeId</code> represents a globally unique identifier for a …",null,null],[11,"of","","Returns the <code>TypeId</code> of the type this generic function has …",60,[[],["typeid",3]]],[5,"type_name","","Returns the name of a type as a string slice.",null,[[]]],[5,"type_name_of_val","","Returns the name of the type of the pointed-to value as a …",null,[[]]],[0,"array","core","Implementations of things like <code>Eq</code> for fixed-length arrays …",null,null],[3,"IntoIter","core::array","A by-value array iterator.",null,null],[5,"from_ref","","Converts a reference to <code>T</code> into a reference to an array of …",null,[[]]],[5,"from_mut","","Converts a mutable reference to <code>T</code> into a mutable …",null,[[]]],[8,"FixedSizeArray","","Utility trait implemented only on arrays of fixed size",null,null],[10,"as_slice","","Converts the array to immutable slice",61,[[]]],[10,"as_mut_slice","","Converts the array to mutable slice",61,[[]]],[3,"TryFromSliceError","","The error type returned when a conversion from a slice to …",null,null],[0,"ascii","core","Operations on ASCII strings and characters.",null,null],[3,"EscapeDefault","core::ascii","An iterator over the escaped version of a byte.",null,null],[5,"escape_default","","Returns an iterator that produces an escaped version of a …",null,[[],["escapedefault",3]]],[0,"cell","core","Shareable mutable containers.",null,null],[3,"Cell","core::cell","A mutable memory location.",null,null],[11,"new","","Creates a new <code>Cell</code> containing the given value.",62,[[],["cell",3]]],[11,"set","","Sets the contained value.",62,[[]]],[11,"swap","","Swaps the values of two Cells. Difference with …",62,[[]]],[11,"replace","","Replaces the contained value, and returns it.",62,[[]]],[11,"into_inner","","Unwraps the value.",62,[[]]],[11,"get","","Returns a copy of the contained value.",62,[[]]],[11,"update","","Updates the contained value using a function and returns …",62,[[]]],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",62,[[]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",62,[[]]],[11,"from_mut","","Returns a <code>&Cell<T></code> from a <code>&mut T</code>",62,[[],["cell",3]]],[11,"take","","Takes the value of the cell, leaving <code>Default::default()</code> …",62,[[]]],[11,"as_slice_of_cells","","Returns a <code>&[Cell<T>]</code> from a <code>&Cell<[T]></code>",62,[[]]],[3,"RefCell","","A mutable memory location with dynamically checked borrow …",null,null],[3,"BorrowError","","An error returned by [<code>RefCell::try_borrow</code>].",null,null],[3,"BorrowMutError","","An error returned by [<code>RefCell::try_borrow_mut</code>].",null,null],[11,"new","","Creates a new <code>RefCell</code> containing <code>value</code>.",63,[[],["refcell",3]]],[11,"into_inner","","Consumes the <code>RefCell</code>, returning the wrapped value.",63,[[]]],[11,"replace","","Replaces the wrapped value with a new one, returning the …",63,[[]]],[11,"replace_with","","Replaces the wrapped value with a new one computed from <code>f</code>…",63,[[["fnonce",8]]]],[11,"swap","","Swaps the wrapped value of <code>self</code> with the wrapped value of …",63,[[]]],[11,"borrow","","Immutably borrows the wrapped value.",63,[[],["ref",3]]],[11,"try_borrow","","Immutably borrows the wrapped value, returning an error …",63,[[],[["borrowerror",3],["result",4],["ref",3]]]],[11,"borrow_mut","","Mutably borrows the wrapped value.",63,[[],["refmut",3]]],[11,"try_borrow_mut","","Mutably borrows the wrapped value, returning an error if …",63,[[],[["borrowmuterror",3],["result",4],["refmut",3]]]],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",63,[[]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",63,[[]]],[11,"undo_leak","","Undo the effect of leaked guards on the borrow state of …",63,[[]]],[11,"try_borrow_unguarded","","Immutably borrows the wrapped value, returning an error …",63,[[],[["result",4],["borrowerror",3]]]],[11,"take","","Takes the wrapped value, leaving <code>Default::default()</code> in …",63,[[]]],[3,"Ref","","Wraps a borrowed reference to a value in a <code>RefCell</code> box. A …",null,null],[11,"clone","","Copies a <code>Ref</code>.",64,[[["ref",3]],["ref",3]]],[11,"map","","Makes a new <code>Ref</code> for a component of the borrowed data.",64,[[["ref",3]],[["sized",8],["ref",3]]]],[11,"map_split","","Splits a <code>Ref</code> into multiple <code>Ref</code>s for different components …",64,[[["ref",3]]]],[11,"leak","","Convert into a reference to the underlying data.",64,[[["ref",3]]]],[3,"RefMut","","A wrapper type for a mutably borrowed value from a …",null,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[11,"new","","Constructs a new instance of <code>UnsafeCell</code> which will wrap …",65,[[],["unsafecell",3]]],[11,"into_inner","","Unwraps the value.",65,[[]]],[11,"get","","Gets a mutable pointer to the wrapped value.",65,[[]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",65,[[]]],[11,"raw_get","","Gets a mutable pointer to the wrapped value. The …",65,[[]]],[0,"char","core","A character type.",null,null],[5,"from_u32_unchecked","core::char","Converts a <code>u32</code> to a <code>char</code>, ignoring validity.",null,[[]]],[3,"CharTryFromError","","The error type returned when a conversion from u32 to …",null,null],[3,"ParseCharError","","An error which can be returned when parsing a char.",null,null],[5,"from_digit","","Converts a digit in the given radix to a <code>char</code>.",null,[[],["option",4]]],[5,"from_u32","","Converts a <code>u32</code> to a <code>char</code>.",null,[[],["option",4]]],[5,"decode_utf16","","Creates an iterator over the UTF-16 encoded code points …",null,[[["intoiterator",8]],["decodeutf16",3]]],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from …",null,null],[3,"DecodeUtf16Error","","An error that can be returned when decoding UTF-16 code …",null,null],[17,"MAX","","The highest valid code point a <code>char</code> can have.",null,null],[17,"REPLACEMENT_CHARACTER","","<code>U+FFFD REPLACEMENT CHARACTER</code> (�) is used in Unicode to …",null,null],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode …",null,null],[3,"EscapeDefault","","An iterator that yields the literal escape code of a <code>char</code>.",null,null],[3,"EscapeDebug","","An iterator that yields the literal escape code of a <code>char</code>.",null,null],[3,"ToLowercase","","Returns an iterator that yields the lowercase equivalent …",null,null],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent …",null,null],[0,"ffi","core","Utilities related to foreign function interface (FFI) …",null,null],[4,"c_void","core::ffi","Equivalent to C\'s <code>void</code> type when used as a pointer.",null,null],[3,"VaListImpl","","x86_64 ABI implementation of a <code>va_list</code>.",null,null],[3,"VaList","","A wrapper for a <code>va_list</code>",null,null],[11,"as_va_list","","Convert a <code>VaListImpl</code> into a <code>VaList</code> that is …",66,[[],["valist",3]]],[11,"arg","","Advance to the next arg.",66,[[],["vaargsafe",8]]],[11,"with_copy","","Copies the <code>va_list</code> at the current location.",66,[[]]],[0,"iter","core","Composable external iteration.",null,null],[8,"Iterator","core::iter","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",67,null],[10,"next","","Advances the iterator and returns the next value.",67,[[],["option",4]]],[11,"size_hint","","Returns the bounds on the remaining length of the …",67,[[]]],[11,"count","","Consumes the iterator, counting the number of iterations …",67,[[]]],[11,"last","","Consumes the iterator, returning the last element.",67,[[],["option",4]]],[11,"advance_by","","Advances the iterator by <code>n</code> elements.",67,[[],["result",4]]],[11,"nth","","Returns the <code>n</code>th element of the iterator.",67,[[],["option",4]]],[11,"step_by","","Creates an iterator starting at the same point, but …",67,[[],["stepby",3]]],[11,"chain","","Takes two iterators and creates a new iterator over both …",67,[[],["chain",3]]],[11,"zip","","\'Zips up\' two iterators into a single iterator of pairs.",67,[[],["zip",3]]],[11,"map","","Takes a closure and creates an iterator which calls that …",67,[[],["map",3]]],[11,"for_each","","Calls a closure on each element of an iterator.",67,[[]]],[11,"filter","","Creates an iterator which uses a closure to determine if …",67,[[],["filter",3]]],[11,"filter_map","","Creates an iterator that both filters and maps.",67,[[],["filtermap",3]]],[11,"enumerate","","Creates an iterator which gives the current iteration …",67,[[],["enumerate",3]]],[11,"peekable","","Creates an iterator which can use <code>peek</code> to look at the …",67,[[],["peekable",3]]],[11,"skip_while","","Creates an iterator that <code>skip</code>s elements based on a …",67,[[],["skipwhile",3]]],[11,"take_while","","Creates an iterator that yields elements based on a …",67,[[],["takewhile",3]]],[11,"map_while","","Creates an iterator that both yields elements based on a …",67,[[],["mapwhile",3]]],[11,"skip","","Creates an iterator that skips the first <code>n</code> elements.",67,[[],["skip",3]]],[11,"take","","Creates an iterator that yields its first <code>n</code> elements.",67,[[],["take",3]]],[11,"scan","","An iterator adaptor similar to <code>fold</code> that holds internal …",67,[[],["scan",3]]],[11,"flat_map","","Creates an iterator that works like map, but flattens …",67,[[],["flatmap",3]]],[11,"flatten","","Creates an iterator that flattens nested structure.",67,[[],["flatten",3]]],[11,"fuse","","Creates an iterator which ends after the first [<code>None</code>].",67,[[],["fuse",3]]],[11,"inspect","","Does something with each element of an iterator, passing …",67,[[],["inspect",3]]],[11,"by_ref","","Borrows an iterator, rather than consuming it.",67,[[]]],[11,"collect","","Transforms an iterator into a collection.",67,[[],["fromiterator",8]]],[11,"partition","","Consumes an iterator, creating two collections from it.",67,[[]]],[11,"partition_in_place","","Reorders the elements of this iterator <em>in-place</em> according …",67,[[]]],[11,"is_partitioned","","Checks if the elements of this iterator are partitioned …",67,[[]]],[11,"try_fold","","An iterator method that applies a function as long as it …",67,[[]]],[11,"try_for_each","","An iterator method that applies a fallible function to …",67,[[]]],[11,"fold","","An iterator method that applies a function, producing a …",67,[[]]],[11,"fold_first","","The same as <code>fold()</code>, but uses the first element in the …",67,[[],["option",4]]],[11,"all","","Tests if every element of the iterator matches a …",67,[[]]],[11,"any","","Tests if any element of the iterator matches a predicate.",67,[[]]],[11,"find","","Searches for an element of an iterator that satisfies a …",67,[[],["option",4]]],[11,"find_map","","Applies function to the elements of iterator and returns …",67,[[],["option",4]]],[11,"try_find","","Applies function to the elements of iterator and returns …",67,[[],[["option",4],["result",4]]]],[11,"position","","Searches for an element in an iterator, returning its …",67,[[],["option",4]]],[11,"rposition","","Searches for an element in an iterator from the right, …",67,[[],["option",4]]],[11,"max","","Returns the maximum element of an iterator.",67,[[],["option",4]]],[11,"min","","Returns the minimum element of an iterator.",67,[[],["option",4]]],[11,"max_by_key","","Returns the element that gives the maximum value from the …",67,[[],["option",4]]],[11,"max_by","","Returns the element that gives the maximum value with …",67,[[],["option",4]]],[11,"min_by_key","","Returns the element that gives the minimum value from the …",67,[[],["option",4]]],[11,"min_by","","Returns the element that gives the minimum value with …",67,[[],["option",4]]],[11,"rev","","Reverses an iterator\'s direction.",67,[[],["rev",3]]],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",67,[[]]],[11,"copied","","Creates an iterator which copies all of its elements.",67,[[],["copied",3]]],[11,"cloned","","Creates an iterator which <code>clone</code>s all of its elements.",67,[[],["cloned",3]]],[11,"cycle","","Repeats an iterator endlessly.",67,[[],["cycle",3]]],[11,"sum","","Sums the elements of an iterator.",67,[[]]],[11,"product","","Iterates over the entire iterator, multiplying all the …",67,[[]]],[11,"cmp","","Lexicographically compares the elements of this [<code>Iterator</code>]…",67,[[],["ordering",4]]],[11,"cmp_by","","Lexicographically compares the elements of this [<code>Iterator</code>]…",67,[[],["ordering",4]]],[11,"partial_cmp","","Lexicographically compares the elements of this [<code>Iterator</code>]…",67,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp_by","","Lexicographically compares the elements of this [<code>Iterator</code>]…",67,[[],[["option",4],["ordering",4]]]],[11,"eq","","Determines if the elements of this [<code>Iterator</code>] are equal …",67,[[]]],[11,"eq_by","","Determines if the elements of this [<code>Iterator</code>] are equal …",67,[[]]],[11,"ne","","Determines if the elements of this [<code>Iterator</code>] are unequal …",67,[[]]],[11,"lt","","Determines if the elements of this [<code>Iterator</code>] are …",67,[[]]],[11,"le","","Determines if the elements of this [<code>Iterator</code>] are …",67,[[]]],[11,"gt","","Determines if the elements of this [<code>Iterator</code>] are …",67,[[]]],[11,"ge","","Determines if the elements of this [<code>Iterator</code>] are …",67,[[]]],[11,"is_sorted","","Checks if the elements of this iterator are sorted.",67,[[]]],[11,"is_sorted_by","","Checks if the elements of this iterator are sorted using …",67,[[]]],[11,"is_sorted_by_key","","Checks if the elements of this iterator are sorted using …",67,[[]]],[8,"Step","","Objects that have a notion of <em>successor</em> and <em>predecessor</em> …",null,null],[10,"steps_between","","Returns the number of <em>successor</em> steps required to get …",68,[[],["option",4]]],[10,"forward_checked","","Returns the value that would be obtained by taking the <em>…",68,[[],["option",4]]],[11,"forward","","Returns the value that would be obtained by taking the <em>…",68,[[]]],[11,"forward_unchecked","","Returns the value that would be obtained by taking the <em>…",68,[[]]],[10,"backward_checked","","Returns the value that would be obtained by taking the <em>…",68,[[],["option",4]]],[11,"backward","","Returns the value that would be obtained by taking the <em>…",68,[[]]],[11,"backward_unchecked","","Returns the value that would be obtained by taking the <em>…",68,[[]]],[5,"empty","","Creates an iterator that yields nothing.",null,[[],["empty",3]]],[3,"Empty","","An iterator that yields nothing.",null,null],[5,"from_fn","","Creates a new iterator where each iteration calls the …",null,[[],["fromfn",3]]],[3,"FromFn","","An iterator where each iteration calls the provided …",null,null],[5,"once","","Creates an iterator that yields an element exactly once.",null,[[],["once",3]]],[3,"Once","","An iterator that yields an element exactly once.",null,null],[5,"once_with","","Creates an iterator that lazily generates a value exactly …",null,[[["fnonce",8]],[["fnonce",8],["oncewith",3]]]],[3,"OnceWith","","An iterator that yields a single element of type <code>A</code> by …",null,null],[5,"repeat","","Creates a new iterator that endlessly repeats a single …",null,[[["clone",8]],[["clone",8],["repeat",3]]]],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[5,"repeat_with","","Creates a new iterator that repeats elements of type <code>A</code> …",null,[[["fnmut",8]],[["repeatwith",3],["fnmut",8]]]],[3,"RepeatWith","","An iterator that repeats elements of type <code>A</code> endlessly by …",null,null],[5,"successors","","Creates a new iterator where each successive item is …",null,[[["option",4]],["successors",3]]],[3,"Successors","","An new iterator where each successive item is computed …",null,null],[8,"FusedIterator","","An iterator that always continues to yield <code>None</code> when …",null,null],[8,"InPlaceIterable","","An iterator that when yielding an item will have taken at …",null,null],[8,"TrustedLen","","An iterator that reports an accurate length using …",null,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","Removes and returns an element from the end of the …",69,[[],["option",4]]],[11,"advance_back_by","","Advances the iterator from the back by <code>n</code> elements.",69,[[],["result",4]]],[11,"nth_back","","Returns the <code>n</code>th element from the end of the iterator.",69,[[],["option",4]]],[11,"try_rfold","","This is the reverse version of [<code>Iterator::try_fold()</code>]: it …",69,[[]]],[11,"rfold","","An iterator method that reduces the iterator\'s elements …",69,[[]]],[11,"rfind","","Searches for an element of an iterator from the back that …",69,[[],["option",4]]],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact length of the iterator.",70,[[]]],[11,"is_empty","","Returns <code>true</code> if the iterator is empty.",70,[[]]],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",71,[[["intoiterator",8]]]],[11,"extend_one","","Extends a collection with exactly one element.",71,[[]]],[11,"extend_reserve","","Reserves capacity in a collection for the given number of …",71,[[]]],[8,"FromIterator","","Conversion from an [<code>Iterator</code>].",null,null],[10,"from_iter","","Creates a value from an iterator.",72,[[["intoiterator",8]]]],[8,"IntoIterator","","Conversion into an [<code>Iterator</code>].",null,null],[16,"Item","","The type of the elements being iterated over.",73,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",73,null],[10,"into_iter","","Creates an iterator from a value.",73,[[]]],[8,"Product","","Trait to represent types that can be created by …",null,null],[10,"product","","Method which takes an iterator and generates <code>Self</code> from …",74,[[["iterator",8]]]],[8,"Sum","","Trait to represent types that can be created by summing …",null,null],[10,"sum","","Method which takes an iterator and generates <code>Self</code> from …",75,[[["iterator",8]]]],[3,"Cloned","","An iterator that clones the elements of an underlying …",null,null],[3,"Copied","","An iterator that copies the elements of an underlying …",null,null],[3,"Flatten","","An iterator that flattens one level of nesting in an …",null,null],[3,"MapWhile","","An iterator that only accepts elements while <code>predicate</code> …",null,null],[8,"SourceIter","","This trait provides transitive access to source-stage in …",null,null],[16,"Source","","A source stage in an iterator pipeline.",76,null],[10,"as_inner","","Retrieve the source of an iterator pipeline.",76,[[]]],[3,"StepBy","","An iterator for stepping iterators by a custom amount.",null,null],[3,"Chain","","An iterator that links two iterators together, in a chain.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element …",null,null],[3,"Filter","","An iterator that filters the elements of <code>iter</code> with …",null,null],[3,"FilterMap","","An iterator that uses <code>f</code> to both filter and map elements …",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and …",null,null],[3,"Fuse","","An iterator that yields <code>None</code> forever after the underlying …",null,null],[3,"Inspect","","An iterator that calls a function with a reference to …",null,null],[3,"Map","","An iterator that maps the values of <code>iter</code> with <code>f</code>.",null,null],[3,"Peekable","","An iterator with a <code>peek()</code> that returns an optional …",null,null],[3,"Rev","","A double-ended iterator with the direction inverted.",null,null],[3,"Scan","","An iterator to maintain state while iterating another …",null,null],[3,"Skip","","An iterator that skips over <code>n</code> elements of <code>iter</code>.",null,null],[3,"SkipWhile","","An iterator that rejects elements while <code>predicate</code> returns …",null,null],[3,"Take","","An iterator that only iterates over the first <code>n</code> …",null,null],[3,"TakeWhile","","An iterator that only accepts elements while <code>predicate</code> …",null,null],[3,"Zip","","An iterator that iterates two other iterators …",null,null],[0,"lazy","core","Lazy values and one-time initialization of static data.",null,null],[3,"OnceCell","core::lazy","A cell which can be written to only once.",null,null],[11,"new","","Creates a new empty cell.",77,[[],["oncecell",3]]],[11,"get","","Gets the reference to the underlying value.",77,[[],["option",4]]],[11,"get_mut","","Gets the mutable reference to the underlying value.",77,[[],["option",4]]],[11,"set","","Sets the contents of the cell to <code>value</code>.",77,[[],["result",4]]],[11,"get_or_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",77,[[]]],[11,"get_or_try_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",77,[[],["result",4]]],[11,"into_inner","","Consumes the cell, returning the wrapped value.",77,[[],["option",4]]],[11,"take","","Takes the value out of this <code>OnceCell</code>, moving it back to …",77,[[],["option",4]]],[3,"Lazy","","A value which is initialized on the first access.",null,null],[11,"new","","Creates a new lazy value with the given initializing …",78,[[],["lazy",3]]],[11,"force","","Forces the evaluation of this lazy value and returns a …",78,[[["lazy",3]]]],[0,"option","core","Optional values.",null,null],[4,"Option","core::option","The <code>Option</code> type. See the module level documentation for …",null,null],[13,"None","","No value",79,null],[13,"Some","","Some value <code>T</code>",79,null],[11,"is_some","","Returns <code>true</code> if the option is a [<code>Some</code>] value.",79,[[]]],[11,"is_none","","Returns <code>true</code> if the option is a [<code>None</code>] value.",79,[[]]],[11,"contains","","Returns <code>true</code> if the option is a [<code>Some</code>] value containing …",79,[[]]],[11,"as_ref","","Converts from <code>&Option<T></code> to <code>Option<&T></code>.",79,[[],["option",4]]],[11,"as_mut","","Converts from <code>&mut Option<T></code> to <code>Option<&mut T></code>.",79,[[],["option",4]]],[11,"as_pin_ref","","Converts from [<code>Pin</code>]<code><&Option<T>></code> to <code>Option<</code>[<code>Pin</code>]<code><&T>></code>.",79,[[["pin",3]],[["option",4],["pin",3]]]],[11,"as_pin_mut","","Converts from [<code>Pin</code>]<code><&mut Option<T>></code> to <code>Option<</code>[<code>Pin</code>]…",79,[[["pin",3]],[["option",4],["pin",3]]]],[11,"expect","","Returns the contained [<code>Some</code>] value, consuming the <code>self</code> …",79,[[]]],[11,"unwrap","","Returns the contained [<code>Some</code>] value, consuming the <code>self</code> …",79,[[]]],[11,"unwrap_or","","Returns the contained [<code>Some</code>] value or a provided default.",79,[[]]],[11,"unwrap_or_else","","Returns the contained [<code>Some</code>] value or computes it from a …",79,[[["fnonce",8]]]],[11,"map","","Maps an <code>Option<T></code> to <code>Option<U></code> by applying a function to …",79,[[["fnonce",8]],["option",4]]],[11,"map_or","","Applies a function to the contained value (if any), or …",79,[[["fnonce",8]]]],[11,"map_or_else","","Applies a function to the contained value (if any), or …",79,[[["fnonce",8],["fnonce",8]]]],[11,"ok_or","","Transforms the <code>Option<T></code> into a <code>Result<T, E></code>, mapping …",79,[[],["result",4]]],[11,"ok_or_else","","Transforms the <code>Option<T></code> into a <code>Result<T, E></code>, mapping …",79,[[["fnonce",8]],["result",4]]],[11,"insert","","Inserts <code>value</code> into the option then returns a mutable …",79,[[]]],[11,"iter","","Returns an iterator over the possibly contained value.",79,[[],["iter",3]]],[11,"iter_mut","","Returns a mutable iterator over the possibly contained …",79,[[],["itermut",3]]],[11,"and","","Returns [<code>None</code>] if the option is [<code>None</code>], otherwise returns …",79,[[["option",4]],["option",4]]],[11,"and_then","","Returns [<code>None</code>] if the option is [<code>None</code>], otherwise calls <code>f</code> …",79,[[["fnonce",8]],["option",4]]],[11,"filter","","Returns [<code>None</code>] if the option is [<code>None</code>], otherwise calls …",79,[[["fnonce",8]]]],[11,"or","","Returns the option if it contains a value, otherwise …",79,[[["option",4]],["option",4]]],[11,"or_else","","Returns the option if it contains a value, otherwise …",79,[[["fnonce",8]],["option",4]]],[11,"xor","","Returns [<code>Some</code>] if exactly one of <code>self</code>, <code>optb</code> is [<code>Some</code>], …",79,[[["option",4]],["option",4]]],[11,"get_or_insert","","Inserts <code>value</code> into the option if it is [<code>None</code>], then …",79,[[]]],[11,"get_or_insert_with","","Inserts a value computed from <code>f</code> into the option if it is […",79,[[["fnonce",8]]]],[11,"take","","Takes the value out of the option, leaving a [<code>None</code>] in …",79,[[],["option",4]]],[11,"replace","","Replaces the actual value in the option by the value …",79,[[],["option",4]]],[11,"zip","","Zips <code>self</code> with another <code>Option</code>.",79,[[["option",4]],["option",4]]],[11,"zip_with","","Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.",79,[[["option",4]],["option",4]]],[11,"copied","","Maps an <code>Option<&T></code> to an <code>Option<T></code> by copying the …",79,[[],["option",4]]],[11,"copied","","Maps an <code>Option<&mut T></code> to an <code>Option<T></code> by copying the …",79,[[],["option",4]]],[11,"cloned","","Maps an <code>Option<&T></code> to an <code>Option<T></code> by cloning the …",79,[[],["option",4]]],[11,"cloned","","Maps an <code>Option<&mut T></code> to an <code>Option<T></code> by cloning the …",79,[[],["option",4]]],[11,"expect_none","","Consumes <code>self</code> while expecting [<code>None</code>] and returning …",79,[[]]],[11,"unwrap_none","","Consumes <code>self</code> while expecting [<code>None</code>] and returning …",79,[[]]],[11,"unwrap_or_default","","Returns the contained [<code>Some</code>] value or a default",79,[[]]],[11,"as_deref","","Converts from <code>Option<T></code> (or <code>&Option<T></code>) to …",79,[[],["option",4]]],[11,"as_deref_mut","","Converts from <code>Option<T></code> (or <code>&mut Option<T></code>) to …",79,[[],["option",4]]],[11,"transpose","","Transposes an <code>Option</code> of a [<code>Result</code>] into a [<code>Result</code>] of an …",79,[[],[["result",4],["option",4]]]],[3,"Iter","","An iterator over a reference to the [<code>Some</code>] variant of an […",null,null],[3,"IterMut","","An iterator over a mutable reference to the [<code>Some</code>] …",null,null],[3,"IntoIter","","An iterator over the value in [<code>Some</code>] variant of an [<code>Option</code>…",null,null],[3,"NoneError","","The error type that results from applying the try …",null,null],[11,"flatten","","Converts from <code>Option<Option<T>></code> to <code>Option<T></code>",79,[[],["option",4]]],[0,"panic","core","Panic support in the standard library.",null,null],[3,"PanicInfo","core::panic","A struct providing information about a panic.",null,null],[11,"payload","","Returns the payload associated with the panic.",80,[[],["any",8]]],[11,"message","","If the <code>panic!</code> macro from the <code>core</code> crate (not from <code>std</code>) …",80,[[],[["arguments",3],["option",4]]]],[11,"location","","Returns information about the location from which the …",80,[[],[["option",4],["location",3]]]],[3,"Location","","A struct containing information about the location of a …",null,null],[11,"caller","","Returns the source location of the caller of this …",81,[[],["location",3]]],[11,"file","","Returns the name of the source file from which the panic …",81,[[]]],[11,"line","","Returns the line number from which the panic originated.",81,[[]]],[11,"column","","Returns the column from which the panic originated.",81,[[]]],[0,"panicking","core","Panic support for libcore",null,null],[5,"panic","core::panicking","The underlying implementation of libcore\'s <code>panic!</code> macro …",null,[[]]],[5,"panic_str","","",null,[[]]],[5,"panic_fmt","","The underlying implementation of libcore\'s <code>panic!</code> macro …",null,[[["arguments",3]]]],[0,"pin","core","Types that pin data to its location in memory.",null,null],[3,"Pin","core::pin","A pinned pointer.",null,null],[11,"new","","Construct a new <code>Pin<P></code> around a pointer to some data of a …",82,[[],["pin",3]]],[11,"into_inner","","Unwraps this <code>Pin<P></code> returning the underlying pointer.",82,[[["pin",3]]]],[11,"new_unchecked","","Construct a new <code>Pin<P></code> around a reference to some data of …",82,[[],["pin",3]]],[11,"as_ref","","Gets a pinned shared reference from this pinned pointer.",82,[[],["pin",3]]],[11,"into_inner_unchecked","","Unwraps this <code>Pin<P></code> returning the underlying pointer.",82,[[["pin",3]]]],[11,"as_mut","","Gets a pinned mutable reference from this pinned pointer.",82,[[],["pin",3]]],[11,"set","","Assigns a new value to the memory behind the pinned …",82,[[]]],[11,"map_unchecked","","Constructs a new pin by mapping the interior value.",82,[[],["pin",3]]],[11,"get_ref","","Gets a shared reference out of a pin.",82,[[]]],[11,"into_ref","","Converts this <code>Pin<&mut T></code> into a <code>Pin<&T></code> with the same …",82,[[],["pin",3]]],[11,"get_mut","","Gets a mutable reference to the data inside of this <code>Pin</code>.",82,[[]]],[11,"get_unchecked_mut","","Gets a mutable reference to the data inside of this <code>Pin</code>.",82,[[]]],[11,"map_unchecked_mut","","Construct a new pin by mapping the interior value.",82,[[],["pin",3]]],[11,"static_ref","","Get a pinned reference from a static reference.",82,[[],["pin",3]]],[11,"static_mut","","Get a pinned mutable reference from a static mutable …",82,[[],["pin",3]]],[0,"raw","core","Contains struct definitions for the layout of compiler …",null,null],[3,"TraitObject","core::raw","The representation of a trait object like <code>&dyn SomeTrait</code>.",null,null],[12,"data","","",83,null],[12,"vtable","","",83,null],[0,"result","core","Error handling with the <code>Result</code> type.",null,null],[4,"Result","core::result","<code>Result</code> is a type that represents either success ([<code>Ok</code>]) or …",null,null],[13,"Ok","","Contains the success value",84,null],[13,"Err","","Contains the error value",84,null],[11,"is_ok","","Returns <code>true</code> if the result is [<code>Ok</code>].",84,[[]]],[11,"is_err","","Returns <code>true</code> if the result is [<code>Err</code>].",84,[[]]],[11,"contains","","Returns <code>true</code> if the result is an [<code>Ok</code>] value containing …",84,[[]]],[11,"contains_err","","Returns <code>true</code> if the result is an [<code>Err</code>] value containing …",84,[[]]],[11,"ok","","Converts from <code>Result<T, E></code> to <code>Option<T></code>.",84,[[],["option",4]]],[11,"err","","Converts from <code>Result<T, E></code> to <code>Option<E></code>.",84,[[],["option",4]]],[11,"as_ref","","Converts from <code>&Result<T, E></code> to <code>Result<&T, &E></code>.",84,[[],["result",4]]],[11,"as_mut","","Converts from <code>&mut Result<T, E></code> to <code>Result<&mut T, &mut E></code>.",84,[[],["result",4]]],[11,"map","","Maps a <code>Result<T, E></code> to <code>Result<U, E></code> by applying a …",84,[[["fnonce",8]],["result",4]]],[11,"map_or","","Applies a function to the contained value (if [<code>Ok</code>]), or …",84,[[["fnonce",8]]]],[11,"map_or_else","","Maps a <code>Result<T, E></code> to <code>U</code> by applying a function to a …",84,[[["fnonce",8],["fnonce",8]]]],[11,"map_err","","Maps a <code>Result<T, E></code> to <code>Result<T, F></code> by applying a …",84,[[["fnonce",8]],["result",4]]],[11,"iter","","Returns an iterator over the possibly contained value.",84,[[],["iter",3]]],[11,"iter_mut","","Returns a mutable iterator over the possibly contained …",84,[[],["itermut",3]]],[11,"and","","Returns <code>res</code> if the result is [<code>Ok</code>], otherwise returns the […",84,[[["result",4]],["result",4]]],[11,"and_then","","Calls <code>op</code> if the result is [<code>Ok</code>], otherwise returns the [<code>Err</code>…",84,[[["fnonce",8]],["result",4]]],[11,"or","","Returns <code>res</code> if the result is [<code>Err</code>], otherwise returns the …",84,[[["result",4]],["result",4]]],[11,"or_else","","Calls <code>op</code> if the result is [<code>Err</code>], otherwise returns the [<code>Ok</code>…",84,[[["fnonce",8]],["result",4]]],[11,"unwrap_or","","Returns the contained [<code>Ok</code>] value or a provided default.",84,[[]]],[11,"unwrap_or_else","","Returns the contained [<code>Ok</code>] value or computes it from a …",84,[[["fnonce",8]]]],[11,"copied","","Maps a <code>Result<&T, E></code> to a <code>Result<T, E></code> by copying the …",84,[[],["result",4]]],[11,"copied","","Maps a <code>Result<&mut T, E></code> to a <code>Result<T, E></code> by copying the …",84,[[],["result",4]]],[11,"cloned","","Maps a <code>Result<&T, E></code> to a <code>Result<T, E></code> by cloning the …",84,[[],["result",4]]],[11,"cloned","","Maps a <code>Result<&mut T, E></code> to a <code>Result<T, E></code> by cloning the …",84,[[],["result",4]]],[11,"expect","","Returns the contained [<code>Ok</code>] value, consuming the <code>self</code> …",84,[[]]],[11,"unwrap","","Returns the contained [<code>Ok</code>] value, consuming the <code>self</code> …",84,[[]]],[11,"expect_err","","Returns the contained [<code>Err</code>] value, consuming the <code>self</code> …",84,[[]]],[11,"unwrap_err","","Returns the contained [<code>Err</code>] value, consuming the <code>self</code> …",84,[[]]],[11,"unwrap_or_default","","Returns the contained [<code>Ok</code>] value or a default",84,[[]]],[11,"into_ok","","Returns the contained [<code>Ok</code>] value, but never panics.",84,[[]]],[11,"as_deref","","Converts from <code>Result<T, E></code> (or <code>&Result<T, E></code>) to …",84,[[],["result",4]]],[11,"as_deref_mut","","Converts from <code>Result<T, E></code> (or <code>&mut Result<T, E></code>) to …",84,[[],["result",4]]],[11,"transpose","","Transposes a <code>Result</code> of an <code>Option</code> into an <code>Option</code> of a …",84,[[],[["result",4],["option",4]]]],[11,"flatten","","Converts from <code>Result<Result<T, E>, E></code> to <code>Result<T, E></code>",84,[[],["result",4]]],[3,"Iter","","An iterator over a reference to the [<code>Ok</code>] variant of a […",null,null],[3,"IterMut","","An iterator over a mutable reference to the [<code>Ok</code>] variant …",null,null],[3,"IntoIter","","An iterator over the value in a [<code>Ok</code>] variant of a [<code>Result</code>]…",null,null],[0,"sync","core","Synchronization primitives",null,null],[0,"atomic","core::sync","Atomic types",null,null],[5,"spin_loop_hint","core::sync::atomic","Signals the processor that it is inside a busy-wait …",null,[[]]],[3,"AtomicBool","","A boolean type which can be safely shared between threads.",null,null],[3,"AtomicPtr","","A raw pointer type which can be safely shared between …",null,null],[4,"Ordering","","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations.",85,null],[13,"Release","","When coupled with a store, all previous operations become …",85,null],[13,"Acquire","","When coupled with a load, if the loaded value was written …",85,null],[13,"AcqRel","","Has the effects of both [<code>Acquire</code>] and [<code>Release</code>] together: …",85,null],[13,"SeqCst","","Like [<code>Acquire</code>]/[<code>Release</code>]/[<code>AcqRel</code>] (for load, store, and …",85,null],[17,"ATOMIC_BOOL_INIT","","An [<code>AtomicBool</code>] initialized to <code>false</code>.",null,null],[11,"new","","Creates a new <code>AtomicBool</code>.",86,[[],["atomicbool",3]]],[11,"get_mut","","Returns a mutable reference to the underlying [<code>bool</code>].",86,[[]]],[11,"from_mut","","Get atomic access to a <code>&mut bool</code>.",86,[[]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",86,[[]]],[11,"load","","Loads a value from the bool.",86,[[["ordering",4]]]],[11,"store","","Stores a value into the bool.",86,[[["ordering",4]]]],[11,"swap","","Stores a value into the bool, returning the previous …",86,[[["ordering",4]]]],[11,"compare_and_swap","","Stores a value into the [<code>bool</code>] if the current value is …",86,[[["ordering",4]]]],[11,"compare_exchange","","Stores a value into the [<code>bool</code>] if the current value is …",86,[[["ordering",4]],["result",4]]],[11,"compare_exchange_weak","","Stores a value into the [<code>bool</code>] if the current value is …",86,[[["ordering",4]],["result",4]]],[11,"fetch_and","","Logical \\\"and\\\" with a boolean value.",86,[[["ordering",4]]]],[11,"fetch_nand","","Logical \\\"nand\\\" with a boolean value.",86,[[["ordering",4]]]],[11,"fetch_or","","Logical \\\"or\\\" with a boolean value.",86,[[["ordering",4]]]],[11,"fetch_xor","","Logical \\\"xor\\\" with a boolean value.",86,[[["ordering",4]]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying [<code>bool</code>].",86,[[]]],[11,"fetch_update","","Fetches the value, and applies a function to it that …",86,[[["ordering",4]],["result",4]]],[11,"new","","Creates a new <code>AtomicPtr</code>.",87,[[],["atomicptr",3]]],[11,"get_mut","","Returns a mutable reference to the underlying pointer.",87,[[]]],[11,"from_mut","","Get atomic access to a pointer.",87,[[]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",87,[[]]],[11,"load","","Loads a value from the pointer.",87,[[["ordering",4]]]],[11,"store","","Stores a value into the pointer.",87,[[["ordering",4]]]],[11,"swap","","Stores a value into the pointer, returning the previous …",87,[[["ordering",4]]]],[11,"compare_and_swap","","Stores a value into the pointer if the current value is …",87,[[["ordering",4]]]],[11,"compare_exchange","","Stores a value into the pointer if the current value is …",87,[[["ordering",4]],["result",4]]],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is …",87,[[["ordering",4]],["result",4]]],[11,"fetch_update","","Fetches the value, and applies a function to it that …",87,[[["ordering",4]],["result",4]]],[3,"AtomicI8","","An integer type which can be safely shared between …",null,null],[17,"ATOMIC_I8_INIT","","An atomic integer initialized to <code>0</code>.",null,null],[11,"new","","Creates a new atomic integer.",88,[[]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",88,[[]]],[11,"from_mut","","Get atomic access to a <code>&mut i8</code>.",88,[[]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",88,[[]]],[11,"load","","Loads a value from the atomic integer.",88,[[["ordering",4]]]],[11,"store","","Stores a value into the atomic integer.",88,[[["ordering",4]]]],[11,"swap","","Stores a value into the atomic integer, returning the …",88,[[["ordering",4]]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current …",88,[[["ordering",4]]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current …",88,[[["ordering",4]],["result",4]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current …",88,[[["ordering",4]],["result",4]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",88,[[["ordering",4]]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous …",88,[[["ordering",4]]]],[11,"fetch_and","","Bitwise \\\"and\\\" with the current value.",88,[[["ordering",4]]]],[11,"fetch_nand","","Bitwise \\\"nand\\\" with the current value.",88,[[["ordering",4]]]],[11,"fetch_or","","Bitwise \\\"or\\\" with the current value.",88,[[["ordering",4]]]],[11,"fetch_xor","","Bitwise \\\"xor\\\" with the current value.",88,[[["ordering",4]]]],[11,"fetch_update","","Fetches the value, and applies a function to it that …",88,[[["ordering",4]],["result",4]]],[11,"fetch_max","","Maximum with the current value.",88,[[["ordering",4]]]],[11,"fetch_min","","Minimum with the current value.",88,[[["ordering",4]]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",88,[[]]],[3,"AtomicU8","","An integer type which can be safely shared between …",null,null],[17,"ATOMIC_U8_INIT","","An atomic integer initialized to <code>0</code>.",null,null],[11,"new","","Creates a new atomic integer.",89,[[]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",89,[[]]],[11,"from_mut","","Get atomic access to a <code>&mut u8</code>.",89,[[]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",89,[[]]],[11,"load","","Loads a value from the atomic integer.",89,[[["ordering",4]]]],[11,"store","","Stores a value into the atomic integer.",89,[[["ordering",4]]]],[11,"swap","","Stores a value into the atomic integer, returning the …",89,[[["ordering",4]]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current …",89,[[["ordering",4]]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current …",89,[[["ordering",4]],["result",4]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current …",89,[[["ordering",4]],["result",4]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",89,[[["ordering",4]]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous …",89,[[["ordering",4]]]],[11,"fetch_and","","Bitwise \\\"and\\\" with the current value.",89,[[["ordering",4]]]],[11,"fetch_nand","","Bitwise \\\"nand\\\" with the current value.",89,[[["ordering",4]]]],[11,"fetch_or","","Bitwise \\\"or\\\" with the current value.",89,[[["ordering",4]]]],[11,"fetch_xor","","Bitwise \\\"xor\\\" with the current value.",89,[[["ordering",4]]]],[11,"fetch_update","","Fetches the value, and applies a function to it that …",89,[[["ordering",4]],["result",4]]],[11,"fetch_max","","Maximum with the current value.",89,[[["ordering",4]]]],[11,"fetch_min","","Minimum with the current value.",89,[[["ordering",4]]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",89,[[]]],[3,"AtomicI16","","An integer type which can be safely shared between …",null,null],[17,"ATOMIC_I16_INIT","","An atomic integer initialized to <code>0</code>.",null,null],[11,"new","","Creates a new atomic integer.",90,[[]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",90,[[]]],[11,"from_mut","","Get atomic access to a <code>&mut i16</code>.",90,[[]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",90,[[]]],[11,"load","","Loads a value from the atomic integer.",90,[[["ordering",4]]]],[11,"store","","Stores a value into the atomic integer.",90,[[["ordering",4]]]],[11,"swap","","Stores a value into the atomic integer, returning the …",90,[[["ordering",4]]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current …",90,[[["ordering",4]]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current …",90,[[["ordering",4]],["result",4]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current …",90,[[["ordering",4]],["result",4]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",90,[[["ordering",4]]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous …",90,[[["ordering",4]]]],[11,"fetch_and","","Bitwise \\\"and\\\" with the current value.",90,[[["ordering",4]]]],[11,"fetch_nand","","Bitwise \\\"nand\\\" with the current value.",90,[[["ordering",4]]]],[11,"fetch_or","","Bitwise \\\"or\\\" with the current value.",90,[[["ordering",4]]]],[11,"fetch_xor","","Bitwise \\\"xor\\\" with the current value.",90,[[["ordering",4]]]],[11,"fetch_update","","Fetches the value, and applies a function to it that …",90,[[["ordering",4]],["result",4]]],[11,"fetch_max","","Maximum with the current value.",90,[[["ordering",4]]]],[11,"fetch_min","","Minimum with the current value.",90,[[["ordering",4]]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",90,[[]]],[3,"AtomicU16","","An integer type which can be safely shared between …",null,null],[17,"ATOMIC_U16_INIT","","An atomic integer initialized to <code>0</code>.",null,null],[11,"new","","Creates a new atomic integer.",91,[[]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",91,[[]]],[11,"from_mut","","Get atomic access to a <code>&mut u16</code>.",91,[[]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",91,[[]]],[11,"load","","Loads a value from the atomic integer.",91,[[["ordering",4]]]],[11,"store","","Stores a value into the atomic integer.",91,[[["ordering",4]]]],[11,"swap","","Stores a value into the atomic integer, returning the …",91,[[["ordering",4]]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current …",91,[[["ordering",4]]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current …",91,[[["ordering",4]],["result",4]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current …",91,[[["ordering",4]],["result",4]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",91,[[["ordering",4]]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous …",91,[[["ordering",4]]]],[11,"fetch_and","","Bitwise \\\"and\\\" with the current value.",91,[[["ordering",4]]]],[11,"fetch_nand","","Bitwise \\\"nand\\\" with the current value.",91,[[["ordering",4]]]],[11,"fetch_or","","Bitwise \\\"or\\\" with the current value.",91,[[["ordering",4]]]],[11,"fetch_xor","","Bitwise \\\"xor\\\" with the current value.",91,[[["ordering",4]]]],[11,"fetch_update","","Fetches the value, and applies a function to it that …",91,[[["ordering",4]],["result",4]]],[11,"fetch_max","","Maximum with the current value.",91,[[["ordering",4]]]],[11,"fetch_min","","Minimum with the current value.",91,[[["ordering",4]]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",91,[[]]],[3,"AtomicI32","","An integer type which can be safely shared between …",null,null],[17,"ATOMIC_I32_INIT","","An atomic integer initialized to <code>0</code>.",null,null],[11,"new","","Creates a new atomic integer.",92,[[]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",92,[[]]],[11,"from_mut","","Get atomic access to a <code>&mut i32</code>.",92,[[]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",92,[[]]],[11,"load","","Loads a value from the atomic integer.",92,[[["ordering",4]]]],[11,"store","","Stores a value into the atomic integer.",92,[[["ordering",4]]]],[11,"swap","","Stores a value into the atomic integer, returning the …",92,[[["ordering",4]]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current …",92,[[["ordering",4]]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current …",92,[[["ordering",4]],["result",4]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current …",92,[[["ordering",4]],["result",4]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",92,[[["ordering",4]]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous …",92,[[["ordering",4]]]],[11,"fetch_and","","Bitwise \\\"and\\\" with the current value.",92,[[["ordering",4]]]],[11,"fetch_nand","","Bitwise \\\"nand\\\" with the current value.",92,[[["ordering",4]]]],[11,"fetch_or","","Bitwise \\\"or\\\" with the current value.",92,[[["ordering",4]]]],[11,"fetch_xor","","Bitwise \\\"xor\\\" with the current value.",92,[[["ordering",4]]]],[11,"fetch_update","","Fetches the value, and applies a function to it that …",92,[[["ordering",4]],["result",4]]],[11,"fetch_max","","Maximum with the current value.",92,[[["ordering",4]]]],[11,"fetch_min","","Minimum with the current value.",92,[[["ordering",4]]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",92,[[]]],[3,"AtomicU32","","An integer type which can be safely shared between …",null,null],[17,"ATOMIC_U32_INIT","","An atomic integer initialized to <code>0</code>.",null,null],[11,"new","","Creates a new atomic integer.",93,[[]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",93,[[]]],[11,"from_mut","","Get atomic access to a <code>&mut u32</code>.",93,[[]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",93,[[]]],[11,"load","","Loads a value from the atomic integer.",93,[[["ordering",4]]]],[11,"store","","Stores a value into the atomic integer.",93,[[["ordering",4]]]],[11,"swap","","Stores a value into the atomic integer, returning the …",93,[[["ordering",4]]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current …",93,[[["ordering",4]]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current …",93,[[["ordering",4]],["result",4]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current …",93,[[["ordering",4]],["result",4]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",93,[[["ordering",4]]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous …",93,[[["ordering",4]]]],[11,"fetch_and","","Bitwise \\\"and\\\" with the current value.",93,[[["ordering",4]]]],[11,"fetch_nand","","Bitwise \\\"nand\\\" with the current value.",93,[[["ordering",4]]]],[11,"fetch_or","","Bitwise \\\"or\\\" with the current value.",93,[[["ordering",4]]]],[11,"fetch_xor","","Bitwise \\\"xor\\\" with the current value.",93,[[["ordering",4]]]],[11,"fetch_update","","Fetches the value, and applies a function to it that …",93,[[["ordering",4]],["result",4]]],[11,"fetch_max","","Maximum with the current value.",93,[[["ordering",4]]]],[11,"fetch_min","","Minimum with the current value.",93,[[["ordering",4]]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",93,[[]]],[3,"AtomicI64","","An integer type which can be safely shared between …",null,null],[17,"ATOMIC_I64_INIT","","An atomic integer initialized to <code>0</code>.",null,null],[11,"new","","Creates a new atomic integer.",94,[[]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",94,[[]]],[11,"from_mut","","Get atomic access to a <code>&mut i64</code>.",94,[[]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",94,[[]]],[11,"load","","Loads a value from the atomic integer.",94,[[["ordering",4]]]],[11,"store","","Stores a value into the atomic integer.",94,[[["ordering",4]]]],[11,"swap","","Stores a value into the atomic integer, returning the …",94,[[["ordering",4]]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current …",94,[[["ordering",4]]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current …",94,[[["ordering",4]],["result",4]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current …",94,[[["ordering",4]],["result",4]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",94,[[["ordering",4]]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous …",94,[[["ordering",4]]]],[11,"fetch_and","","Bitwise \\\"and\\\" with the current value.",94,[[["ordering",4]]]],[11,"fetch_nand","","Bitwise \\\"nand\\\" with the current value.",94,[[["ordering",4]]]],[11,"fetch_or","","Bitwise \\\"or\\\" with the current value.",94,[[["ordering",4]]]],[11,"fetch_xor","","Bitwise \\\"xor\\\" with the current value.",94,[[["ordering",4]]]],[11,"fetch_update","","Fetches the value, and applies a function to it that …",94,[[["ordering",4]],["result",4]]],[11,"fetch_max","","Maximum with the current value.",94,[[["ordering",4]]]],[11,"fetch_min","","Minimum with the current value.",94,[[["ordering",4]]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",94,[[]]],[3,"AtomicU64","","An integer type which can be safely shared between …",null,null],[17,"ATOMIC_U64_INIT","","An atomic integer initialized to <code>0</code>.",null,null],[11,"new","","Creates a new atomic integer.",95,[[]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",95,[[]]],[11,"from_mut","","Get atomic access to a <code>&mut u64</code>.",95,[[]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",95,[[]]],[11,"load","","Loads a value from the atomic integer.",95,[[["ordering",4]]]],[11,"store","","Stores a value into the atomic integer.",95,[[["ordering",4]]]],[11,"swap","","Stores a value into the atomic integer, returning the …",95,[[["ordering",4]]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current …",95,[[["ordering",4]]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current …",95,[[["ordering",4]],["result",4]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current …",95,[[["ordering",4]],["result",4]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",95,[[["ordering",4]]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous …",95,[[["ordering",4]]]],[11,"fetch_and","","Bitwise \\\"and\\\" with the current value.",95,[[["ordering",4]]]],[11,"fetch_nand","","Bitwise \\\"nand\\\" with the current value.",95,[[["ordering",4]]]],[11,"fetch_or","","Bitwise \\\"or\\\" with the current value.",95,[[["ordering",4]]]],[11,"fetch_xor","","Bitwise \\\"xor\\\" with the current value.",95,[[["ordering",4]]]],[11,"fetch_update","","Fetches the value, and applies a function to it that …",95,[[["ordering",4]],["result",4]]],[11,"fetch_max","","Maximum with the current value.",95,[[["ordering",4]]]],[11,"fetch_min","","Minimum with the current value.",95,[[["ordering",4]]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",95,[[]]],[3,"AtomicIsize","","An integer type which can be safely shared between …",null,null],[17,"ATOMIC_ISIZE_INIT","","An atomic integer initialized to <code>0</code>.",null,null],[11,"new","","Creates a new atomic integer.",96,[[]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",96,[[]]],[11,"from_mut","","Get atomic access to a <code>&mut isize</code>.",96,[[]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",96,[[]]],[11,"load","","Loads a value from the atomic integer.",96,[[["ordering",4]]]],[11,"store","","Stores a value into the atomic integer.",96,[[["ordering",4]]]],[11,"swap","","Stores a value into the atomic integer, returning the …",96,[[["ordering",4]]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current …",96,[[["ordering",4]]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current …",96,[[["ordering",4]],["result",4]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current …",96,[[["ordering",4]],["result",4]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",96,[[["ordering",4]]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous …",96,[[["ordering",4]]]],[11,"fetch_and","","Bitwise \\\"and\\\" with the current value.",96,[[["ordering",4]]]],[11,"fetch_nand","","Bitwise \\\"nand\\\" with the current value.",96,[[["ordering",4]]]],[11,"fetch_or","","Bitwise \\\"or\\\" with the current value.",96,[[["ordering",4]]]],[11,"fetch_xor","","Bitwise \\\"xor\\\" with the current value.",96,[[["ordering",4]]]],[11,"fetch_update","","Fetches the value, and applies a function to it that …",96,[[["ordering",4]],["result",4]]],[11,"fetch_max","","Maximum with the current value.",96,[[["ordering",4]]]],[11,"fetch_min","","Minimum with the current value.",96,[[["ordering",4]]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",96,[[]]],[3,"AtomicUsize","","An integer type which can be safely shared between …",null,null],[17,"ATOMIC_USIZE_INIT","","An atomic integer initialized to <code>0</code>.",null,null],[11,"new","","Creates a new atomic integer.",97,[[]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",97,[[]]],[11,"from_mut","","Get atomic access to a <code>&mut usize</code>.",97,[[]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",97,[[]]],[11,"load","","Loads a value from the atomic integer.",97,[[["ordering",4]]]],[11,"store","","Stores a value into the atomic integer.",97,[[["ordering",4]]]],[11,"swap","","Stores a value into the atomic integer, returning the …",97,[[["ordering",4]]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current …",97,[[["ordering",4]]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current …",97,[[["ordering",4]],["result",4]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current …",97,[[["ordering",4]],["result",4]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",97,[[["ordering",4]]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous …",97,[[["ordering",4]]]],[11,"fetch_and","","Bitwise \\\"and\\\" with the current value.",97,[[["ordering",4]]]],[11,"fetch_nand","","Bitwise \\\"nand\\\" with the current value.",97,[[["ordering",4]]]],[11,"fetch_or","","Bitwise \\\"or\\\" with the current value.",97,[[["ordering",4]]]],[11,"fetch_xor","","Bitwise \\\"xor\\\" with the current value.",97,[[["ordering",4]]]],[11,"fetch_update","","Fetches the value, and applies a function to it that …",97,[[["ordering",4]],["result",4]]],[11,"fetch_max","","Maximum with the current value.",97,[[["ordering",4]]]],[11,"fetch_min","","Minimum with the current value.",97,[[["ordering",4]]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",97,[[]]],[5,"fence","","An atomic fence.",null,[[["ordering",4]]]],[5,"compiler_fence","","A compiler memory fence.",null,[[["ordering",4]]]],[0,"fmt","core","Utilities for formatting and printing strings.",null,null],[4,"Alignment","core::fmt","Possible alignments returned by <code>Formatter::align</code>",null,null],[13,"Left","","Indication that contents should be left-aligned.",98,null],[13,"Right","","Indication that contents should be right-aligned.",98,null],[13,"Center","","Indication that contents should be center-aligned.",98,null],[3,"DebugList","","A struct to help with <code>fmt::Debug</code> implementations.",null,null],[3,"DebugMap","","A struct to help with <code>fmt::Debug</code> implementations.",null,null],[3,"DebugSet","","A struct to help with <code>fmt::Debug</code> implementations.",null,null],[3,"DebugStruct","","A struct to help with <code>fmt::Debug</code> implementations.",null,null],[3,"DebugTuple","","A struct to help with <code>fmt::Debug</code> implementations.",null,null],[6,"Result","","The type returned by formatter methods.",null,null],[3,"Error","","The error type which is returned from formatting a …",null,null],[8,"Write","","A trait for writing or formatting into Unicode-accepting …",null,null],[10,"write_str","","Writes a string slice into this writer, returning whether …",99,[[],["result",6]]],[11,"write_char","","Writes a [<code>char</code>] into this writer, returning whether the …",99,[[],["result",6]]],[11,"write_fmt","","Glue for usage of the [<code>write!</code>] macro with implementors of …",99,[[["arguments",3]],["result",6]]],[3,"Formatter","","Configuration for formatting.",null,null],[3,"Arguments","","This structure represents a safely precompiled version of …",null,null],[11,"as_str","","Get the formatted string, if it has no arguments to be …",100,[[],["option",4]]],[8,"Debug","","<code>?</code> formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",101,[[["formatter",3]],["result",6]]],[8,"Display","","Format trait for an empty format, <code>{}</code>.",null,null],[10,"fmt","","Formats the value using the given formatter.",102,[[["formatter",3]],["result",6]]],[8,"Octal","","<code>o</code> formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",103,[[["formatter",3]],["result",6]]],[8,"Binary","","<code>b</code> formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",104,[[["formatter",3]],["result",6]]],[8,"LowerHex","","<code>x</code> formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",105,[[["formatter",3]],["result",6]]],[8,"UpperHex","","<code>X</code> formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",106,[[["formatter",3]],["result",6]]],[8,"Pointer","","<code>p</code> formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",107,[[["formatter",3]],["result",6]]],[8,"LowerExp","","<code>e</code> formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",108,[[["formatter",3]],["result",6]]],[8,"UpperExp","","<code>E</code> formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",109,[[["formatter",3]],["result",6]]],[5,"write","","The <code>write</code> function takes an output stream, and an …",null,[[["write",8],["arguments",3]],["result",6]]],[11,"pad_integral","","Performs the correct padding for an integer which has …",110,[[],["result",6]]],[11,"pad","","This function takes a string slice and emits it to the …",110,[[],["result",6]]],[11,"write_str","","Writes some data to the underlying buffer contained …",110,[[],["result",6]]],[11,"write_fmt","","Writes some formatted information into this instance.",110,[[["arguments",3]],["result",6]]],[11,"flags","","Flags for formatting",110,[[]]],[11,"fill","","Character used as \'fill\' whenever there is alignment.",110,[[]]],[11,"align","","Flag indicating what form of alignment was requested.",110,[[],[["option",4],["alignment",4]]]],[11,"width","","Optionally specified integer width that the output should …",110,[[],["option",4]]],[11,"precision","","Optionally specified precision for numeric types. …",110,[[],["option",4]]],[11,"sign_plus","","Determines if the <code>+</code> flag was specified.",110,[[]]],[11,"sign_minus","","Determines if the <code>-</code> flag was specified.",110,[[]]],[11,"alternate","","Determines if the <code>#</code> flag was specified.",110,[[]]],[11,"sign_aware_zero_pad","","Determines if the <code>0</code> flag was specified.",110,[[]]],[11,"debug_struct","","Creates a [<code>DebugStruct</code>] builder designed to assist with …",110,[[],["debugstruct",3]]],[11,"debug_tuple","","Creates a <code>DebugTuple</code> builder designed to assist with …",110,[[],["debugtuple",3]]],[11,"debug_list","","Creates a <code>DebugList</code> builder designed to assist with …",110,[[],["debuglist",3]]],[11,"debug_set","","Creates a <code>DebugSet</code> builder designed to assist with …",110,[[],["debugset",3]]],[11,"debug_map","","Creates a <code>DebugMap</code> builder designed to assist with …",110,[[],["debugmap",3]]],[14,"Debug","","Derive macro generating an impl of the trait <code>Debug</code>.",null,null],[0,"hash","core","Generic hashing support.",null,null],[3,"SipHasher","core::hash","An implementation of SipHash 2-4.",null,null],[8,"Hash","","A hashable type.",null,null],[10,"hash","","Feeds this value into the given [<code>Hasher</code>].",111,[[]]],[11,"hash_slice","","Feeds a slice of this type into the given [<code>Hasher</code>].",111,[[]]],[8,"Hasher","","A trait for hashing an arbitrary stream of bytes.",null,null],[10,"finish","","Returns the hash value for the values written so far.",112,[[]]],[10,"write","","Writes some data into this <code>Hasher</code>.",112,[[]]],[11,"write_u8","","Writes a single <code>u8</code> into this hasher.",112,[[]]],[11,"write_u16","","Writes a single <code>u16</code> into this hasher.",112,[[]]],[11,"write_u32","","Writes a single <code>u32</code> into this hasher.",112,[[]]],[11,"write_u64","","Writes a single <code>u64</code> into this hasher.",112,[[]]],[11,"write_u128","","Writes a single <code>u128</code> into this hasher.",112,[[]]],[11,"write_usize","","Writes a single <code>usize</code> into this hasher.",112,[[]]],[11,"write_i8","","Writes a single <code>i8</code> into this hasher.",112,[[]]],[11,"write_i16","","Writes a single <code>i16</code> into this hasher.",112,[[]]],[11,"write_i32","","Writes a single <code>i32</code> into this hasher.",112,[[]]],[11,"write_i64","","Writes a single <code>i64</code> into this hasher.",112,[[]]],[11,"write_i128","","Writes a single <code>i128</code> into this hasher.",112,[[]]],[11,"write_isize","","Writes a single <code>isize</code> into this hasher.",112,[[]]],[8,"BuildHasher","","A trait for creating instances of [<code>Hasher</code>].",null,null],[16,"Hasher","","Type of the hasher that will be created.",113,null],[10,"build_hasher","","Creates a new hasher.",113,[[]]],[3,"BuildHasherDefault","","Used to create a default [<code>BuildHasher</code>] instance for types …",null,null],[14,"Hash","","Derive macro generating an impl of the trait <code>Hash</code>.",null,null],[0,"slice","core","Slice management and manipulation.",null,null],[0,"memchr","core::slice","Pure rust memchr implementation, taken from rust-memchr",null,null],[5,"memchr","core::slice::memchr","Returns the first index matching the byte <code>x</code> in <code>text</code>.",null,[[],["option",4]]],[5,"memrchr","","Returns the last index matching the byte <code>x</code> in <code>text</code>.",null,[[],["option",4]]],[3,"Chunks","core::slice","An iterator over a slice in (non-overlapping) chunks (…",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable …",null,null],[3,"Windows","","An iterator over overlapping subslices of length <code>size</code>.",null,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that …",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that …",null,null],[3,"Split","","An iterator over subslices separated by elements that …",null,null],[3,"SplitMut","","An iterator over the mutable subslices of the vector …",null,null],[3,"SplitN","","An iterator over subslices separated by elements that …",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that …",null,null],[3,"RSplit","","An iterator over subslices separated by elements that …",null,null],[3,"RSplitMut","","An iterator over the subslices of the vector which are …",null,null],[3,"ChunksExact","","An iterator over a slice in (non-overlapping) chunks (…",null,null],[3,"ChunksExactMut","","An iterator over a slice in (non-overlapping) mutable …",null,null],[3,"RChunks","","An iterator over a slice in (non-overlapping) chunks (…",null,null],[3,"RChunksExact","","An iterator over a slice in (non-overlapping) chunks (…",null,null],[3,"RChunksExactMut","","An iterator over a slice in (non-overlapping) mutable …",null,null],[3,"RChunksMut","","An iterator over a slice in (non-overlapping) mutable …",null,null],[3,"ArrayChunks","","An iterator over a slice in (non-overlapping) chunks (<code>N</code> …",null,null],[3,"ArrayChunksMut","","An iterator over a slice in (non-overlapping) mutable …",null,null],[3,"ArrayWindows","","A windowed iterator over a slice in overlapping chunks (<code>N</code> …",null,null],[3,"SplitInclusive","","An iterator over subslices separated by elements that …",null,null],[3,"SplitInclusiveMut","","An iterator over the mutable subslices of the vector …",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,[[]]],[5,"from_raw_parts_mut","","Performs the same functionality as [<code>from_raw_parts</code>], …",null,[[]]],[5,"from_mut","","Converts a reference to T into a slice of length 1 …",null,[[]]],[5,"from_ref","","Converts a reference to T into a slice of length 1 …",null,[[]]],[5,"heapsort","","Sorts <code>v</code> using heapsort, which guarantees <em>O</em>(<em>n</em> * log(<em>n</em>)) …",null,[[]]],[8,"SliceIndex","","A helper trait used for indexing operations.",null,null],[16,"Output","","The output type returned by methods.",114,null],[10,"get","","Returns a shared reference to the output at this …",114,[[],["option",4]]],[10,"get_mut","","Returns a mutable reference to the output at this …",114,[[],["option",4]]],[10,"get_unchecked","","Returns a shared reference to the output at this …",114,[[]]],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this …",114,[[]]],[10,"index","","Returns a shared reference to the output at this …",114,[[]]],[10,"index_mut","","Returns a mutable reference to the output at this …",114,[[]]],[0,"str","core","String manipulation.",null,null],[0,"pattern","core::str","The string Pattern API.",null,null],[8,"Pattern","core::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",115,null],[10,"into_searcher","","Constructs the associated searcher from <code>self</code> and the …",115,[[]]],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the …",115,[[]]],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the …",115,[[]]],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the …",115,[[]]],[11,"strip_prefix_of","","Removes the pattern from the front of haystack, if it …",115,[[],["option",4]]],[11,"strip_suffix_of","","Removes the pattern from the back of haystack, if it …",115,[[],["option",4]]],[4,"SearchStep","","Result of calling [<code>Searcher::next()</code>] or […",null,null],[13,"Match","","Expresses that a match of the pattern has been found at …",116,null],[13,"Reject","","Expresses that <code>haystack[a..b]</code> has been rejected as a …",116,null],[13,"Done","","Expresses that every byte of the haystack has been …",116,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlying string to be searched in",117,[[]]],[10,"next","","Performs the next search step starting from the front.",117,[[],["searchstep",4]]],[11,"next_match","","Finds the next [<code>Match</code>][SearchStep::Match] result. See […",117,[[],["option",4]]],[11,"next_reject","","Finds the next [<code>Reject</code>][SearchStep::Reject] result. See […",117,[[],["option",4]]],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",118,[[],["searchstep",4]]],[11,"next_match_back","","Finds the next [<code>Match</code>][SearchStep::Match] result. See […",118,[[],["option",4]]],[11,"next_reject_back","","Finds the next [<code>Reject</code>][SearchStep::Reject] result. See […",118,[[],["option",4]]],[8,"DoubleEndedSearcher","","A marker trait to express that a [<code>ReverseSearcher</code>] can be …",null,null],[3,"CharSearcher","","Associated type for <code><char as Pattern<\'a>>::Searcher</code>.",null,null],[3,"CharSliceSearcher","","Associated type for <code><&[char] as Pattern<\'a>>::Searcher</code>.",null,null],[3,"CharPredicateSearcher","","Associated type for <code><F as Pattern<\'a>>::Searcher</code>.",null,null],[3,"StrSearcher","","Associated type for <code><&str as Pattern<\'a>>::Searcher</code>.",null,null],[0,"lossy","core::str","",null,null],[3,"Utf8Lossy","core::str::lossy","Lossy UTF-8 string.",null,null],[11,"from_str","","",119,[[],["utf8lossy",3]]],[11,"from_bytes","","",119,[[],["utf8lossy",3]]],[11,"chunks","","",119,[[],["utf8lossychunksiter",3]]],[3,"Utf8LossyChunksIter","","Iterator over lossy UTF-8 string",null,null],[3,"Utf8LossyChunk","","",null,null],[12,"valid","","Sequence of valid chars. Can be empty between broken …",120,null],[12,"broken","","Single broken char, empty if none. Empty iff iterator …",120,null],[5,"from_utf8","core::str","Converts a slice of bytes to a string slice.",null,[[],[["result",4],["utf8error",3]]]],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without …",null,[[]]],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string …",null,[[],[["result",4],["utf8error",3]]]],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without …",null,[[]]],[3,"ParseBoolError","","An error returned when parsing a <code>bool</code> using <code>from_str</code> fails",null,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a …",null,null],[8,"FromStr","","Parse a value from a string",null,null],[16,"Err","","The associated error which can be returned from parsing.",121,null],[10,"from_str","","Parses a string <code>s</code> to return a value of this type.",121,[[],["result",4]]],[3,"Bytes","","An iterator over the bytes of a string slice.",null,null],[3,"CharIndices","","An iterator over the <code>char</code>s of a string slice, and their …",null,null],[3,"Chars","","An iterator over the <code>char</code>s of a string slice.",null,null],[3,"Lines","","An iterator over the lines of a string, as string slices.",null,null],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a …",null,null],[3,"LinesAny","","Created with the method <code>lines_any</code>.",null,null],[3,"RSplit","","Created with the method <code>rsplit</code>.",null,null],[3,"RSplitTerminator","","Created with the method <code>rsplit_terminator</code>.",null,null],[3,"Split","","Created with the method <code>split</code>.",null,null],[3,"SplitTerminator","","Created with the method <code>split_terminator</code>.",null,null],[3,"RSplitN","","Created with the method <code>rsplitn</code>.",null,null],[3,"SplitN","","Created with the method <code>splitn</code>.",null,null],[3,"Matches","","Created with the method <code>matches</code>.",null,null],[3,"RMatches","","Created with the method <code>rmatches</code>.",null,null],[3,"MatchIndices","","Created with the method <code>match_indices</code>.",null,null],[3,"RMatchIndices","","Created with the method <code>rmatch_indices</code>.",null,null],[3,"EncodeUtf16","","An iterator of [<code>u16</code>] over the string encoded as UTF-16.",null,null],[3,"EscapeDebug","","The return type of [<code>str::escape_debug</code>].",null,null],[3,"EscapeDefault","","The return type of [<code>str::escape_default</code>].",null,null],[3,"EscapeUnicode","","The return type of [<code>str::escape_unicode</code>].",null,null],[3,"SplitAsciiWhitespace","","An iterator over the non-ASCII-whitespace substrings of a …",null,null],[5,"next_code_point","","Reads the next code point out of a byte iterator …",null,[[],["option",4]]],[0,"time","core","Temporal quantification.",null,null],[3,"Duration","core::time","A <code>Duration</code> type to represent a span of time, typically …",null,null],[18,"SECOND","","The duration of one second.",122,null],[18,"MILLISECOND","","The duration of one millisecond.",122,null],[18,"MICROSECOND","","The duration of one microsecond.",122,null],[18,"NANOSECOND","","The duration of one nanosecond.",122,null],[18,"ZERO","","A duration of zero time.",122,null],[18,"MAX","","The maximum duration.",122,null],[11,"new","","Creates a new <code>Duration</code> from the specified number of whole …",122,[[],["duration",3]]],[11,"from_secs","","Creates a new <code>Duration</code> from the specified number of whole …",122,[[],["duration",3]]],[11,"from_millis","","Creates a new <code>Duration</code> from the specified number of …",122,[[],["duration",3]]],[11,"from_micros","","Creates a new <code>Duration</code> from the specified number of …",122,[[],["duration",3]]],[11,"from_nanos","","Creates a new <code>Duration</code> from the specified number of …",122,[[],["duration",3]]],[11,"is_zero","","Returns true if this <code>Duration</code> spans no time.",122,[[]]],[11,"as_secs","","Returns the number of <em>whole</em> seconds contained by this …",122,[[]]],[11,"subsec_millis","","Returns the fractional part of this <code>Duration</code>, in whole …",122,[[]]],[11,"subsec_micros","","Returns the fractional part of this <code>Duration</code>, in whole …",122,[[]]],[11,"subsec_nanos","","Returns the fractional part of this <code>Duration</code>, in …",122,[[]]],[11,"as_millis","","Returns the total number of whole milliseconds contained …",122,[[]]],[11,"as_micros","","Returns the total number of whole microseconds contained …",122,[[]]],[11,"as_nanos","","Returns the total number of nanoseconds contained by this …",122,[[]]],[11,"checked_add","","Checked <code>Duration</code> addition. Computes <code>self + other</code>, …",122,[[["duration",3]],[["option",4],["duration",3]]]],[11,"saturating_add","","Saturating <code>Duration</code> addition. Computes <code>self + other</code>, …",122,[[["duration",3]],["duration",3]]],[11,"checked_sub","","Checked <code>Duration</code> subtraction. Computes <code>self - other</code>, …",122,[[["duration",3]],[["option",4],["duration",3]]]],[11,"saturating_sub","","Saturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …",122,[[["duration",3]],["duration",3]]],[11,"checked_mul","","Checked <code>Duration</code> multiplication. Computes <code>self * other</code>, …",122,[[],[["option",4],["duration",3]]]],[11,"saturating_mul","","Saturating <code>Duration</code> multiplication. Computes <code>self * other</code>…",122,[[],["duration",3]]],[11,"checked_div","","Checked <code>Duration</code> division. Computes <code>self / other</code>, …",122,[[],[["option",4],["duration",3]]]],[11,"as_secs_f64","","Returns the number of seconds contained by this <code>Duration</code> …",122,[[]]],[11,"as_secs_f32","","Returns the number of seconds contained by this <code>Duration</code> …",122,[[]]],[11,"from_secs_f64","","Creates a new <code>Duration</code> from the specified number of …",122,[[],["duration",3]]],[11,"from_secs_f32","","Creates a new <code>Duration</code> from the specified number of …",122,[[],["duration",3]]],[11,"mul_f64","","Multiplies <code>Duration</code> by <code>f64</code>.",122,[[],["duration",3]]],[11,"mul_f32","","Multiplies <code>Duration</code> by <code>f32</code>.",122,[[],["duration",3]]],[11,"div_f64","","Divide <code>Duration</code> by <code>f64</code>.",122,[[],["duration",3]]],[11,"div_f32","","Divide <code>Duration</code> by <code>f32</code>.",122,[[],["duration",3]]],[11,"div_duration_f64","","Divide <code>Duration</code> by <code>Duration</code> and return <code>f64</code>.",122,[[["duration",3]]]],[11,"div_duration_f32","","Divide <code>Duration</code> by <code>Duration</code> and return <code>f32</code>.",122,[[["duration",3]]]],[0,"unicode","core","",null,null],[0,"conversions","core::unicode","",null,null],[5,"to_lower","core::unicode::conversions","",null,[[]]],[5,"to_upper","","",null,[[]]],[17,"UNICODE_VERSION","core::unicode","The version of Unicode that the Unicode parts of <code>char</code> and …",null,null],[5,"Case_Ignorable","","",null,[[]]],[5,"Cased","","",null,[[]]],[0,"future","core","Asynchronous values.",null,null],[8,"Future","core::future","A future represents an asynchronous computation.",null,null],[16,"Output","","The type of value produced on completion.",123,null],[10,"poll","","Attempt to resolve the future to a final value, …",123,[[["context",3],["pin",3]],["poll",4]]],[8,"IntoFuture","","Conversion into a <code>Future</code>.",null,null],[16,"Output","","The output that the future will produce on completion.",124,null],[16,"Future","","Which kind of future are we turning this into?",124,null],[10,"into_future","","Creates a future from a value.",124,[[]]],[5,"pending","","Creates a future which never resolves, representing a …",null,[[],["pending",3]]],[3,"Pending","","Creates a future which never resolves, representing a …",null,null],[5,"ready","","Creates a future that is immediately ready with a value.",null,[[],["ready",3]]],[3,"Ready","","Creates a future that is immediately ready with a value.",null,null],[5,"poll_fn","","Creates a future that wraps a function returning [<code>Poll</code>].",null,[[],["pollfn",3]]],[3,"PollFn","","A Future that wraps a function returning [<code>Poll</code>].",null,null],[0,"task","core","Types and Traits for working with asynchronous tasks.",null,null],[4,"Poll","core::task","Indicates whether a value is available or if the current …",null,null],[13,"Ready","","Represents that a value is immediately ready.",125,null],[13,"Pending","","Represents that a value is not ready yet.",125,null],[3,"Context","","The <code>Context</code> of an asynchronous task.",null,null],[3,"RawWaker","","A <code>RawWaker</code> allows the implementor of a task executor to …",null,null],[3,"RawWakerVTable","","A virtual function pointer table (vtable) that specifies …",null,null],[3,"Waker","","A <code>Waker</code> is a handle for waking up a task by notifying its …",null,null],[0,"alloc","core","Memory allocation APIs",null,null],[8,"GlobalAlloc","core::alloc","A memory allocator that can be registered as the standard …",null,null],[10,"alloc","","Allocate memory as described by the given <code>layout</code>.",126,[[["layout",3]]]],[10,"dealloc","","Deallocate the block of memory at the given <code>ptr</code> pointer …",126,[[["layout",3]]]],[11,"alloc_zeroed","","Behaves like <code>alloc</code>, but also ensures that the contents …",126,[[["layout",3]]]],[11,"realloc","","Shrink or grow a block of memory to the given <code>new_size</code>. …",126,[[["layout",3]]]],[3,"Layout","","Layout of a block of memory.",null,null],[6,"LayoutErr","","",null,null],[3,"LayoutError","","The parameters given to <code>Layout::from_size_align</code> or some …",null,null],[3,"AllocError","","The <code>AllocError</code> error indicates an allocation failure that …",null,null],[8,"Allocator","","An implementation of <code>Allocator</code> can allocate, grow, …",null,null],[10,"allocate","","Attempts to allocate a block of memory.",127,[[["layout",3]],[["nonnull",3],["allocerror",3],["result",4]]]],[11,"allocate_zeroed","","Behaves like <code>allocate</code>, but also ensures that the returned …",127,[[["layout",3]],[["nonnull",3],["allocerror",3],["result",4]]]],[10,"deallocate","","Deallocates the memory referenced by <code>ptr</code>.",127,[[["layout",3],["nonnull",3]]]],[11,"grow","","Attempts to extend the memory block.",127,[[["layout",3],["nonnull",3]],[["nonnull",3],["allocerror",3],["result",4]]]],[11,"grow_zeroed","","Behaves like <code>grow</code>, but also ensures that the new contents …",127,[[["layout",3],["nonnull",3]],[["nonnull",3],["allocerror",3],["result",4]]]],[11,"shrink","","Attempts to shrink the memory block.",127,[[["layout",3],["nonnull",3]],[["nonnull",3],["allocerror",3],["result",4]]]],[11,"by_ref","","Creates a \\\"by reference\\\" adaptor for this instance of …",127,[[]]],[0,"primitive","core","This module reexports the primitive types to allow usage …",null,null],[0,"arch","","SIMD and vendor intrinsics module.",null,null],[0,"x86","core::arch","Platform-specific intrinsics for the <code>x86</code> platform.",null,null],[3,"__m128i","core::arch::x86","128-bit wide integer vector type, x86-specific",null,null],[3,"__m128","","128-bit wide set of four <code>f32</code> types, x86-specific",null,null],[3,"__m128d","","128-bit wide set of two <code>f64</code> types, x86-specific",null,null],[3,"__m256i","","256-bit wide integer vector type, x86-specific",null,null],[3,"__m256","","256-bit wide set of eight <code>f32</code> types, x86-specific",null,null],[3,"__m256d","","256-bit wide set of four <code>f64</code> types, x86-specific",null,null],[3,"__m512i","","512-bit wide integer vector type, x86-specific",null,null],[3,"__m512","","512-bit wide set of sixteen <code>f32</code> types, x86-specific",null,null],[3,"__m512d","","512-bit wide set of eight <code>f64</code> types, x86-specific",null,null],[6,"__mmask64","","The <code>__mmask64</code> type used in AVX-512 intrinsics, a 64-bit …",null,null],[6,"__mmask32","","The <code>__mmask32</code> type used in AVX-512 intrinsics, a 32-bit …",null,null],[6,"__mmask16","","The <code>__mmask16</code> type used in AVX-512 intrinsics, a 16-bit …",null,null],[6,"__mmask8","","The <code>__mmask8</code> type used in AVX-512 intrinsics, a 8-bit …",null,null],[6,"_MM_CMPINT_ENUM","","The <code>_MM_CMPINT_ENUM</code> type used to specify comparison …",null,null],[6,"_MM_MANTISSA_NORM_ENUM","","The <code>MM_MANTISSA_NORM_ENUM</code> type used to specify mantissa …",null,null],[6,"_MM_MANTISSA_SIGN_ENUM","","The <code>MM_MANTISSA_SIGN_ENUM</code> type used to specify mantissa …",null,null],[6,"_MM_PERM_ENUM","","The <code>MM_PERM_ENUM</code> type used to specify shuffle operations …",null,null],[5,"_fxsave","","Saves the <code>x87</code> FPU, <code>MMX</code> technology, <code>XMM</code>, and <code>MXCSR</code> …",null,[[]]],[5,"_fxrstor","","Restores the <code>XMM</code>, <code>MMX</code>, <code>MXCSR</code>, and <code>x87</code> FPU registers from …",null,[[]]],[5,"_bswap","","Returns an integer with the reversed byte order of x",null,[[]]],[5,"_rdtsc","","Reads the current value of the processor’s time-stamp …",null,[[]]],[5,"__rdtscp","","Reads the current value of the processor’s time-stamp …",null,[[]]],[3,"CpuidResult","","Result of the <code>cpuid</code> instruction.",null,null],[12,"eax","","EAX register.",128,null],[12,"ebx","","EBX register.",128,null],[12,"ecx","","ECX register.",128,null],[12,"edx","","EDX register.",128,null],[5,"__cpuid_count","","Returns the result of the <code>cpuid</code> instruction for a given …",null,[[],["cpuidresult",3]]],[5,"__cpuid","","See <code>__cpuid_count</code>.",null,[[],["cpuidresult",3]]],[5,"has_cpuid","","Does the host support the <code>cpuid</code> instruction?",null,[[]]],[5,"__get_cpuid_max","","Returns the highest-supported <code>leaf</code> (<code>EAX</code>) and sub-leaf (<code>ECX</code>…",null,[[]]],[5,"_xsave","","Performs a full or partial save of the enabled processor …",null,[[]]],[5,"_xrstor","","Performs a full or partial restore of the enabled …",null,[[]]],[17,"_XCR_XFEATURE_ENABLED_MASK","","<code>XFEATURE_ENABLED_MASK</code> for <code>XCR</code>",null,null],[5,"_xsetbv","","Copies 64-bits from <code>val</code> to the extended control register (…",null,[[]]],[5,"_xgetbv","","Reads the contents of the extended control register <code>XCR</code> …",null,[[]]],[5,"_xsaveopt","","Performs a full or partial save of the enabled processor …",null,[[]]],[5,"_xsavec","","Performs a full or partial save of the enabled processor …",null,[[]]],[5,"_xsaves","","Performs a full or partial save of the enabled processor …",null,[[]]],[5,"_xrstors","","Performs a full or partial restore of the enabled …",null,[[]]],[5,"_mm_add_ss","","Adds the first component of <code>a</code> and <code>b</code>, the other components …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_add_ps","","Adds __m128 vectors.",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_sub_ss","","Subtracts the first component of <code>b</code> from <code>a</code>, the other …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_sub_ps","","Subtracts __m128 vectors.",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mul_ss","","Multiplies the first component of <code>a</code> and <code>b</code>, the other …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mul_ps","","Multiplies __m128 vectors.",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_div_ss","","Divides the first component of <code>b</code> by <code>a</code>, the other …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_div_ps","","Divides __m128 vectors.",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_sqrt_ss","","Returns the square root of the first single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_sqrt_ps","","Returns the square root of packed single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_rcp_ss","","Returns the approximate reciprocal of the first …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_rcp_ps","","Returns the approximate reciprocal of packed …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_rsqrt_ss","","Returns the approximate reciprocal square root of the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_rsqrt_ps","","Returns the approximate reciprocal square root of packed …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_min_ss","","Compares the first single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_min_ps","","Compares packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_max_ss","","Compares the first single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_max_ps","","Compares packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_and_ps","","Bitwise AND of packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_andnot_ps","","Bitwise AND-NOT of packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_or_ps","","Bitwise OR of packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_xor_ps","","Bitwise exclusive OR of packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpeq_ss","","Compares the lowest <code>f32</code> of both inputs for equality. The …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmplt_ss","","Compares the lowest <code>f32</code> of both inputs for less than. The …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmple_ss","","Compares the lowest <code>f32</code> of both inputs for less than or …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpgt_ss","","Compares the lowest <code>f32</code> of both inputs for greater than. …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpge_ss","","Compares the lowest <code>f32</code> of both inputs for greater than …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpneq_ss","","Compares the lowest <code>f32</code> of both inputs for inequality. …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpnlt_ss","","Compares the lowest <code>f32</code> of both inputs for not-less-than. …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpnle_ss","","Compares the lowest <code>f32</code> of both inputs for …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpngt_ss","","Compares the lowest <code>f32</code> of both inputs for …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpnge_ss","","Compares the lowest <code>f32</code> of both inputs for …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpord_ss","","Checks if the lowest <code>f32</code> of both inputs are ordered. The …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpunord_ss","","Checks if the lowest <code>f32</code> of both inputs are unordered. …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpeq_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmplt_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmple_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpgt_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpge_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpneq_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpnlt_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpnle_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpngt_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpnge_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpord_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpunord_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_comieq_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]]]],[5,"_mm_comilt_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]]]],[5,"_mm_comile_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]]]],[5,"_mm_comigt_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]]]],[5,"_mm_comige_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]]]],[5,"_mm_comineq_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]]]],[5,"_mm_ucomieq_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]]]],[5,"_mm_ucomilt_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]]]],[5,"_mm_ucomile_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]]]],[5,"_mm_ucomigt_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]]]],[5,"_mm_ucomige_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]]]],[5,"_mm_ucomineq_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]]]],[5,"_mm_cvtss_si32","","Converts the lowest 32 bit float in the input vector to a …",null,[[["__m128",3]]]],[5,"_mm_cvt_ss2si","","Alias for <code>_mm_cvtss_si32</code>.",null,[[["__m128",3]]]],[5,"_mm_cvttss_si32","","Converts the lowest 32 bit float in the input vector to a …",null,[[["__m128",3]]]],[5,"_mm_cvtt_ss2si","","Alias for <code>_mm_cvttss_si32</code>.",null,[[["__m128",3]]]],[5,"_mm_cvtss_f32","","Extracts the lowest 32 bit float from the input vector.",null,[[["__m128",3]]]],[5,"_mm_cvtsi32_ss","","Converts a 32 bit integer to a 32 bit float. The result …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cvt_si2ss","","Alias for <code>_mm_cvtsi32_ss</code>.",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_set_ss","","Construct a <code>__m128</code> with the lowest element set to <code>a</code> and …",null,[[],["__m128",3]]],[5,"_mm_set1_ps","","Construct a <code>__m128</code> with all element set to <code>a</code>.",null,[[],["__m128",3]]],[5,"_mm_set_ps1","","Alias for <code>_mm_set1_ps</code>",null,[[],["__m128",3]]],[5,"_mm_set_ps","","Construct a <code>__m128</code> from four floating point values …",null,[[],["__m128",3]]],[5,"_mm_setr_ps","","Construct a <code>__m128</code> from four floating point values lowest …",null,[[],["__m128",3]]],[5,"_mm_setzero_ps","","Construct a <code>__m128</code> with all elements initialized to zero.",null,[[],["__m128",3]]],[5,"_MM_SHUFFLE","","A utility function for creating masks to use with Intel …",null,[[]]],[5,"_mm_shuffle_ps","","Shuffles packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_unpackhi_ps","","Unpacks and interleave single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_unpacklo_ps","","Unpacks and interleave single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_movehl_ps","","Combine higher half of <code>a</code> and <code>b</code>. The highwe half of <code>b</code> …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_movelh_ps","","Combine lower half of <code>a</code> and <code>b</code>. The lower half of <code>b</code> …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_movemask_ps","","Returns a mask of the most significant bit of each …",null,[[["__m128",3]]]],[5,"_mm_load_ss","","Construct a <code>__m128</code> with the lowest element read from <code>p</code> …",null,[[],["__m128",3]]],[5,"_mm_load1_ps","","Construct a <code>__m128</code> by duplicating the value read from <code>p</code> …",null,[[],["__m128",3]]],[5,"_mm_load_ps1","","Alias for <code>_mm_load1_ps</code>",null,[[],["__m128",3]]],[5,"_mm_load_ps","","Loads four <code>f32</code> values from <em>aligned</em> memory into a <code>__m128</code>. …",null,[[],["__m128",3]]],[5,"_mm_loadu_ps","","Loads four <code>f32</code> values from memory into a <code>__m128</code>. There …",null,[[],["__m128",3]]],[5,"_mm_loadr_ps","","Loads four <code>f32</code> values from aligned memory into a <code>__m128</code> …",null,[[],["__m128",3]]],[5,"_mm_loadu_si64","","Loads unaligned 64-bits of integer data from memory into …",null,[[],["__m128i",3]]],[5,"_mm_store_ss","","Stores the lowest 32 bit float of <code>a</code> into memory.",null,[[["__m128",3]]]],[5,"_mm_store1_ps","","Stores the lowest 32 bit float of <code>a</code> repeated four times …",null,[[["__m128",3]]]],[5,"_mm_store_ps1","","Alias for <code>_mm_store1_ps</code>",null,[[["__m128",3]]]],[5,"_mm_store_ps","","Stores four 32-bit floats into <em>aligned</em> memory.",null,[[["__m128",3]]]],[5,"_mm_storeu_ps","","Stores four 32-bit floats into memory. There are no …",null,[[["__m128",3]]]],[5,"_mm_storer_ps","","Stores four 32-bit floats into <em>aligned</em> memory in reverse …",null,[[["__m128",3]]]],[5,"_mm_move_ss","","Returns a <code>__m128</code> with the first component from <code>b</code> and the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_sfence","","Performs a serializing operation on all store-to-memory …",null,[[]]],[5,"_mm_getcsr","","Gets the unsigned 32-bit value of the MXCSR control and …",null,[[]]],[5,"_mm_setcsr","","Sets the MXCSR register with the 32-bit unsigned integer …",null,[[]]],[17,"_MM_EXCEPT_INVALID","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_EXCEPT_DENORM","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_EXCEPT_DIV_ZERO","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_EXCEPT_OVERFLOW","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_EXCEPT_UNDERFLOW","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_EXCEPT_INEXACT","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_EXCEPT_MASK","","See <code>_MM_GET_EXCEPTION_STATE</code>",null,null],[17,"_MM_MASK_INVALID","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_MASK_DENORM","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_MASK_DIV_ZERO","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_MASK_OVERFLOW","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_MASK_UNDERFLOW","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_MASK_INEXACT","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_MASK_MASK","","See <code>_MM_GET_EXCEPTION_MASK</code>",null,null],[17,"_MM_ROUND_NEAREST","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_ROUND_DOWN","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_ROUND_UP","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_ROUND_TOWARD_ZERO","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_ROUND_MASK","","See <code>_MM_GET_ROUNDING_MODE</code>",null,null],[17,"_MM_FLUSH_ZERO_MASK","","See <code>_MM_GET_FLUSH_ZERO_MODE</code>",null,null],[17,"_MM_FLUSH_ZERO_ON","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_FLUSH_ZERO_OFF","","See <code>_mm_setcsr</code>",null,null],[5,"_MM_GET_EXCEPTION_MASK","","See <code>_mm_setcsr</code>",null,[[]]],[5,"_MM_GET_EXCEPTION_STATE","","See <code>_mm_setcsr</code>",null,[[]]],[5,"_MM_GET_FLUSH_ZERO_MODE","","See <code>_mm_setcsr</code>",null,[[]]],[5,"_MM_GET_ROUNDING_MODE","","See <code>_mm_setcsr</code>",null,[[]]],[5,"_MM_SET_EXCEPTION_MASK","","See <code>_mm_setcsr</code>",null,[[]]],[5,"_MM_SET_EXCEPTION_STATE","","See <code>_mm_setcsr</code>",null,[[]]],[5,"_MM_SET_FLUSH_ZERO_MODE","","See <code>_mm_setcsr</code>",null,[[]]],[5,"_MM_SET_ROUNDING_MODE","","See <code>_mm_setcsr</code>",null,[[]]],[17,"_MM_HINT_T0","","See <code>_mm_prefetch</code>.",null,null],[17,"_MM_HINT_T1","","See <code>_mm_prefetch</code>.",null,null],[17,"_MM_HINT_T2","","See <code>_mm_prefetch</code>.",null,null],[17,"_MM_HINT_NTA","","See <code>_mm_prefetch</code>.",null,null],[5,"_mm_prefetch","","Fetch the cache line that contains address <code>p</code> using the …",null,[[]]],[5,"_mm_undefined_ps","","Returns vector of type __m128 with undefined elements.",null,[[],["__m128",3]]],[5,"_MM_TRANSPOSE4_PS","","Transpose the 4x4 matrix formed by 4 rows of __m128 in …",null,[[["__m128",3]]]],[5,"_mm_stream_ps","","Stores <code>a</code> into the memory at <code>mem_addr</code> using a non-temporal …",null,[[["__m128",3]]]],[5,"_mm_pause","","Provides a hint to the processor that the code sequence …",null,[[]]],[5,"_mm_clflush","","Invalidates and flushes the cache line that contains <code>p</code> …",null,[[]]],[5,"_mm_lfence","","Performs a serializing operation on all load-from-memory …",null,[[]]],[5,"_mm_mfence","","Performs a serializing operation on all load-from-memory …",null,[[]]],[5,"_mm_add_epi8","","Adds packed 8-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_add_epi16","","Adds packed 16-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_add_epi32","","Adds packed 32-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_add_epi64","","Adds packed 64-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_adds_epi8","","Adds packed 8-bit integers in <code>a</code> and <code>b</code> using saturation.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_adds_epi16","","Adds packed 16-bit integers in <code>a</code> and <code>b</code> using saturation.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_adds_epu8","","Adds packed unsigned 8-bit integers in <code>a</code> and <code>b</code> using …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_adds_epu16","","Adds packed unsigned 16-bit integers in <code>a</code> and <code>b</code> using …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_avg_epu8","","Averages packed unsigned 8-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_avg_epu16","","Averages packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_madd_epi16","","Multiplies and then horizontally add signed 16 bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_max_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_max_epu8","","Compares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_min_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_min_epu8","","Compares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mulhi_epi16","","Multiplies the packed 16-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mulhi_epu16","","Multiplies the packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mullo_epi16","","Multiplies the packed 16-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mul_epu32","","Multiplies the low unsigned 32-bit integers from each …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sad_epu8","","Sum the absolute differences of packed unsigned 8-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sub_epi8","","Subtracts packed 8-bit integers in <code>b</code> from packed 8-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sub_epi16","","Subtracts packed 16-bit integers in <code>b</code> from packed 16-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sub_epi32","","Subtract packed 32-bit integers in <code>b</code> from packed 32-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sub_epi64","","Subtract packed 64-bit integers in <code>b</code> from packed 64-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_subs_epi8","","Subtract packed 8-bit integers in <code>b</code> from packed 8-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_subs_epi16","","Subtract packed 16-bit integers in <code>b</code> from packed 16-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_subs_epu8","","Subtract packed unsigned 8-bit integers in <code>b</code> from packed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_subs_epu16","","Subtract packed unsigned 16-bit integers in <code>b</code> from packed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_slli_si128","","Shifts <code>a</code> left by <code>imm8</code> bytes while shifting in zeros.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_bslli_si128","","Shifts <code>a</code> left by <code>imm8</code> bytes while shifting in zeros.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_bsrli_si128","","Shifts <code>a</code> right by <code>imm8</code> bytes while shifting in zeros.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_slli_epi16","","Shifts packed 16-bit integers in <code>a</code> left by <code>imm8</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sll_epi16","","Shifts packed 16-bit integers in <code>a</code> left by <code>count</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_slli_epi32","","Shifts packed 32-bit integers in <code>a</code> left by <code>imm8</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sll_epi32","","Shifts packed 32-bit integers in <code>a</code> left by <code>count</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_slli_epi64","","Shifts packed 64-bit integers in <code>a</code> left by <code>imm8</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sll_epi64","","Shifts packed 64-bit integers in <code>a</code> left by <code>count</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srai_epi16","","Shifts packed 16-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sra_epi16","","Shifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srai_epi32","","Shifts packed 32-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sra_epi32","","Shifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srli_si128","","Shifts <code>a</code> right by <code>imm8</code> bytes while shifting in zeros.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srli_epi16","","Shifts packed 16-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srl_epi16","","Shifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srli_epi32","","Shifts packed 32-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srl_epi32","","Shifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srli_epi64","","Shifts packed 64-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srl_epi64","","Shifts packed 64-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_and_si128","","Computes the bitwise AND of 128 bits (representing …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_andnot_si128","","Computes the bitwise NOT of 128 bits (representing …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_or_si128","","Computes the bitwise OR of 128 bits (representing integer …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_xor_si128","","Computes the bitwise XOR of 128 bits (representing …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpeq_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for equality.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpeq_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for equality.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpeq_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for equality.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpgt_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpgt_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpgt_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmplt_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for less-than.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmplt_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for less-than.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmplt_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for less-than.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi32_pd","","Converts the lower two packed 32-bit integers in <code>a</code> to …",null,[[["__m128i",3]],["__m128d",3]]],[5,"_mm_cvtsi32_sd","","Returns <code>a</code> with its lower element replaced by <code>b</code> after …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cvtepi32_ps","","Converts packed 32-bit integers in <code>a</code> to packed …",null,[[["__m128i",3]],["__m128",3]]],[5,"_mm_cvtps_epi32","","Converts packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128i",3]]],[5,"_mm_cvtsi32_si128","","Returns a vector whose lowest element is <code>a</code> and all higher …",null,[[],["__m128i",3]]],[5,"_mm_cvtsi128_si32","","Returns the lowest element of <code>a</code>.",null,[[["__m128i",3]]]],[5,"_mm_set_epi64x","","Sets packed 64-bit integers with the supplied values, …",null,[[],["__m128i",3]]],[5,"_mm_set_epi32","","Sets packed 32-bit integers with the supplied values.",null,[[],["__m128i",3]]],[5,"_mm_set_epi16","","Sets packed 16-bit integers with the supplied values.",null,[[],["__m128i",3]]],[5,"_mm_set_epi8","","Sets packed 8-bit integers with the supplied values.",null,[[],["__m128i",3]]],[5,"_mm_set1_epi64x","","Broadcasts 64-bit integer <code>a</code> to all elements.",null,[[],["__m128i",3]]],[5,"_mm_set1_epi32","","Broadcasts 32-bit integer <code>a</code> to all elements.",null,[[],["__m128i",3]]],[5,"_mm_set1_epi16","","Broadcasts 16-bit integer <code>a</code> to all elements.",null,[[],["__m128i",3]]],[5,"_mm_set1_epi8","","Broadcasts 8-bit integer <code>a</code> to all elements.",null,[[],["__m128i",3]]],[5,"_mm_setr_epi32","","Sets packed 32-bit integers with the supplied values in …",null,[[],["__m128i",3]]],[5,"_mm_setr_epi16","","Sets packed 16-bit integers with the supplied values in …",null,[[],["__m128i",3]]],[5,"_mm_setr_epi8","","Sets packed 8-bit integers with the supplied values in …",null,[[],["__m128i",3]]],[5,"_mm_setzero_si128","","Returns a vector with all elements set to zero.",null,[[],["__m128i",3]]],[5,"_mm_loadl_epi64","","Loads 64-bit integer from memory into first element of …",null,[[],["__m128i",3]]],[5,"_mm_load_si128","","Loads 128-bits of integer data from memory into a new …",null,[[],["__m128i",3]]],[5,"_mm_loadu_si128","","Loads 128-bits of integer data from memory into a new …",null,[[],["__m128i",3]]],[5,"_mm_maskmoveu_si128","","Conditionally store 8-bit integer elements from <code>a</code> into …",null,[[["__m128i",3]]]],[5,"_mm_store_si128","","Stores 128-bits of integer data from <code>a</code> into memory.",null,[[["__m128i",3]]]],[5,"_mm_storeu_si128","","Stores 128-bits of integer data from <code>a</code> into memory.",null,[[["__m128i",3]]]],[5,"_mm_storel_epi64","","Stores the lower 64-bit integer <code>a</code> to a memory location.",null,[[["__m128i",3]]]],[5,"_mm_stream_si128","","Stores a 128-bit integer vector to a 128-bit aligned …",null,[[["__m128i",3]]]],[5,"_mm_stream_si32","","Stores a 32-bit integer value in the specified memory …",null,[[]]],[5,"_mm_move_epi64","","Returns a vector where the low element is extracted from <code>a</code>…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_packs_epi16","","Converts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_packs_epi32","","Converts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_packus_epi16","","Converts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_extract_epi16","","Returns the <code>imm8</code> element of <code>a</code>.",null,[[["__m128i",3]]]],[5,"_mm_insert_epi16","","Returns a new vector where the <code>imm8</code> element of <code>a</code> is …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_movemask_epi8","","Returns a mask of the most significant bit of each …",null,[[["__m128i",3]]]],[5,"_mm_shuffle_epi32","","Shuffles 32-bit integers in <code>a</code> using the control in <code>imm8</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_shufflehi_epi16","","Shuffles 16-bit integers in the high 64 bits of <code>a</code> using …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_shufflelo_epi16","","Shuffles 16-bit integers in the low 64 bits of <code>a</code> using …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpackhi_epi8","","Unpacks and interleave 8-bit integers from the high half …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpackhi_epi16","","Unpacks and interleave 16-bit integers from the high half …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpackhi_epi32","","Unpacks and interleave 32-bit integers from the high half …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpackhi_epi64","","Unpacks and interleave 64-bit integers from the high half …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpacklo_epi8","","Unpacks and interleave 8-bit integers from the low half …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpacklo_epi16","","Unpacks and interleave 16-bit integers from the low half …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpacklo_epi32","","Unpacks and interleave 32-bit integers from the low half …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpacklo_epi64","","Unpacks and interleave 64-bit integers from the low half …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_add_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_add_pd","","Adds packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_div_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_div_pd","","Divide packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_max_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_max_pd","","Returns a new vector with the maximum values from …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_min_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_min_pd","","Returns a new vector with the minimum values from …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mul_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mul_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_sqrt_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_sqrt_pd","","Returns a new vector with the square root of each of the …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_sub_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_sub_pd","","Subtract packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_and_pd","","Computes the bitwise AND of packed double-precision …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_andnot_pd","","Computes the bitwise NOT of <code>a</code> and then AND with <code>b</code>.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_or_pd","","Computes the bitwise OR of <code>a</code> and <code>b</code>.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_xor_pd","","Computes the bitwise OR of <code>a</code> and <code>b</code>.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpeq_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmplt_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmple_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpgt_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpge_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpord_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpunord_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpneq_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpnlt_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpnle_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpngt_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpnge_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpeq_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for equality.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmplt_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for less-than.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmple_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpgt_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpge_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpord_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> to see if …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpunord_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> to see if …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpneq_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for not-equal.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpnlt_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpnle_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpngt_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpnge_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_comieq_sd","","Compares the lower element of <code>a</code> and <code>b</code> for equality.",null,[[["__m128d",3]]]],[5,"_mm_comilt_sd","","Compares the lower element of <code>a</code> and <code>b</code> for less-than.",null,[[["__m128d",3]]]],[5,"_mm_comile_sd","","Compares the lower element of <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]]]],[5,"_mm_comigt_sd","","Compares the lower element of <code>a</code> and <code>b</code> for greater-than.",null,[[["__m128d",3]]]],[5,"_mm_comige_sd","","Compares the lower element of <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]]]],[5,"_mm_comineq_sd","","Compares the lower element of <code>a</code> and <code>b</code> for not-equal.",null,[[["__m128d",3]]]],[5,"_mm_ucomieq_sd","","Compares the lower element of <code>a</code> and <code>b</code> for equality.",null,[[["__m128d",3]]]],[5,"_mm_ucomilt_sd","","Compares the lower element of <code>a</code> and <code>b</code> for less-than.",null,[[["__m128d",3]]]],[5,"_mm_ucomile_sd","","Compares the lower element of <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]]]],[5,"_mm_ucomigt_sd","","Compares the lower element of <code>a</code> and <code>b</code> for greater-than.",null,[[["__m128d",3]]]],[5,"_mm_ucomige_sd","","Compares the lower element of <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]]]],[5,"_mm_ucomineq_sd","","Compares the lower element of <code>a</code> and <code>b</code> for not-equal.",null,[[["__m128d",3]]]],[5,"_mm_cvtpd_ps","","Converts packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128",3]]],[5,"_mm_cvtps_pd","","Converts packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128d",3]]],[5,"_mm_cvtpd_epi32","","Converts packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128i",3]]],[5,"_mm_cvtsd_si32","","Converts the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvtsd_ss","","Converts the lower double-precision (64-bit) …",null,[[["__m128",3],["__m128d",3]],["__m128",3]]],[5,"_mm_cvtsd_f64","","Returns the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvtss_sd","","Converts the lower single-precision (32-bit) …",null,[[["__m128",3],["__m128d",3]],["__m128d",3]]],[5,"_mm_cvttpd_epi32","","Converts packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128i",3]]],[5,"_mm_cvttsd_si32","","Converts the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvttps_epi32","","Converts packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128i",3]]],[5,"_mm_set_sd","","Copies double-precision (64-bit) floating-point element <code>a</code> …",null,[[],["__m128d",3]]],[5,"_mm_set1_pd","","Broadcasts double-precision (64-bit) floating-point value …",null,[[],["__m128d",3]]],[5,"_mm_set_pd1","","Broadcasts double-precision (64-bit) floating-point value …",null,[[],["__m128d",3]]],[5,"_mm_set_pd","","Sets packed double-precision (64-bit) floating-point …",null,[[],["__m128d",3]]],[5,"_mm_setr_pd","","Sets packed double-precision (64-bit) floating-point …",null,[[],["__m128d",3]]],[5,"_mm_setzero_pd","","Returns packed double-precision (64-bit) floating-point …",null,[[],["__m128d",3]]],[5,"_mm_movemask_pd","","Returns a mask of the most significant bit of each …",null,[[["__m128d",3]]]],[5,"_mm_load_pd","","Loads 128-bits (composed of 2 packed double-precision …",null,[[],["__m128d",3]]],[5,"_mm_load_sd","","Loads a 64-bit double-precision value to the low element …",null,[[],["__m128d",3]]],[5,"_mm_loadh_pd","","Loads a double-precision value into the high-order bits …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_loadl_pd","","Loads a double-precision value into the low-order bits of …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_stream_pd","","Stores a 128-bit floating point vector of <code>[2 x double]</code> to …",null,[[["__m128d",3]]]],[5,"_mm_store_sd","","Stores the lower 64 bits of a 128-bit vector of …",null,[[["__m128d",3]]]],[5,"_mm_store_pd","","Stores 128-bits (composed of 2 packed double-precision …",null,[[["__m128d",3]]]],[5,"_mm_storeu_pd","","Stores 128-bits (composed of 2 packed double-precision …",null,[[["__m128d",3]]]],[5,"_mm_store1_pd","","Stores the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3]]]],[5,"_mm_store_pd1","","Stores the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3]]]],[5,"_mm_storer_pd","","Stores 2 double-precision (64-bit) floating-point …",null,[[["__m128d",3]]]],[5,"_mm_storeh_pd","","Stores the upper 64 bits of a 128-bit vector of …",null,[[["__m128d",3]]]],[5,"_mm_storel_pd","","Stores the lower 64 bits of a 128-bit vector of …",null,[[["__m128d",3]]]],[5,"_mm_load1_pd","","Loads a double-precision (64-bit) floating-point element …",null,[[],["__m128d",3]]],[5,"_mm_load_pd1","","Loads a double-precision (64-bit) floating-point element …",null,[[],["__m128d",3]]],[5,"_mm_loadr_pd","","Loads 2 double-precision (64-bit) floating-point elements …",null,[[],["__m128d",3]]],[5,"_mm_loadu_pd","","Loads 128-bits (composed of 2 packed double-precision …",null,[[],["__m128d",3]]],[5,"_mm_shuffle_pd","","Constructs a 128-bit floating-point vector of <code>[2 x double]</code>…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_move_sd","","Constructs a 128-bit floating-point vector of <code>[2 x double]</code>…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_castpd_ps","","Casts a 128-bit floating-point vector of <code>[2 x double]</code> …",null,[[["__m128d",3]],["__m128",3]]],[5,"_mm_castpd_si128","","Casts a 128-bit floating-point vector of <code>[2 x double]</code> …",null,[[["__m128d",3]],["__m128i",3]]],[5,"_mm_castps_pd","","Casts a 128-bit floating-point vector of <code>[4 x float]</code> into …",null,[[["__m128",3]],["__m128d",3]]],[5,"_mm_castps_si128","","Casts a 128-bit floating-point vector of <code>[4 x float]</code> into …",null,[[["__m128",3]],["__m128i",3]]],[5,"_mm_castsi128_pd","","Casts a 128-bit integer vector into a 128-bit …",null,[[["__m128i",3]],["__m128d",3]]],[5,"_mm_castsi128_ps","","Casts a 128-bit integer vector into a 128-bit …",null,[[["__m128i",3]],["__m128",3]]],[5,"_mm_undefined_pd","","Returns vector of type __m128d with undefined elements.",null,[[],["__m128d",3]]],[5,"_mm_undefined_si128","","Returns vector of type __m128i with undefined elements.",null,[[],["__m128i",3]]],[5,"_mm_unpackhi_pd","","The resulting <code>__m128d</code> element is composed by the …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_unpacklo_pd","","The resulting <code>__m128d</code> element is composed by the …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_addsub_ps","","Alternatively add and subtract packed single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_addsub_pd","","Alternatively add and subtract packed double-precision …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_hadd_pd","","Horizontally adds adjacent pairs of double-precision …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_hadd_ps","","Horizontally adds adjacent pairs of single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_hsub_pd","","Horizontally subtract adjacent pairs of double-precision …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_hsub_ps","","Horizontally adds adjacent pairs of single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_lddqu_si128","","Loads 128-bits of integer data from unaligned memory. …",null,[[],["__m128i",3]]],[5,"_mm_movedup_pd","","Duplicate the low double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_loaddup_pd","","Loads a double-precision (64-bit) floating-point element …",null,[[],["__m128d",3]]],[5,"_mm_movehdup_ps","","Duplicate odd-indexed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_moveldup_ps","","Duplicate even-indexed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_abs_epi8","","Computes the absolute value of packed 8-bit signed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_abs_epi16","","Computes the absolute value of each of the packed 16-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_abs_epi32","","Computes the absolute value of each of the packed 32-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_shuffle_epi8","","Shuffles bytes from <code>a</code> according to the content of <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_alignr_epi8","","Concatenate 16-byte blocks in <code>a</code> and <code>b</code> into a 32-byte …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_hadd_epi16","","Horizontally adds the adjacent pairs of values contained …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_hadds_epi16","","Horizontally adds the adjacent pairs of values contained …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_hadd_epi32","","Horizontally adds the adjacent pairs of values contained …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_hsub_epi16","","Horizontally subtract the adjacent pairs of values …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_hsubs_epi16","","Horizontally subtract the adjacent pairs of values …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_hsub_epi32","","Horizontally subtract the adjacent pairs of values …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_maddubs_epi16","","Multiplies corresponding pairs of packed 8-bit unsigned …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mulhrs_epi16","","Multiplies packed 16-bit signed integer values, truncate …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sign_epi8","","Negates packed 8-bit integers in <code>a</code> when the corresponding …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sign_epi16","","Negates packed 16-bit integers in <code>a</code> when the …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sign_epi32","","Negates packed 32-bit integers in <code>a</code> when the …",null,[[["__m128i",3]],["__m128i",3]]],[17,"_MM_FROUND_TO_NEAREST_INT","","round to nearest",null,null],[17,"_MM_FROUND_TO_NEG_INF","","round down",null,null],[17,"_MM_FROUND_TO_POS_INF","","round up",null,null],[17,"_MM_FROUND_TO_ZERO","","truncate",null,null],[17,"_MM_FROUND_CUR_DIRECTION","","use MXCSR.RC; see <code>vendor::_MM_SET_ROUNDING_MODE</code>",null,null],[17,"_MM_FROUND_RAISE_EXC","","do not suppress exceptions",null,null],[17,"_MM_FROUND_NO_EXC","","suppress exceptions",null,null],[17,"_MM_FROUND_NINT","","round to nearest and do not suppress exceptions",null,null],[17,"_MM_FROUND_FLOOR","","round down and do not suppress exceptions",null,null],[17,"_MM_FROUND_CEIL","","round up and do not suppress exceptions",null,null],[17,"_MM_FROUND_TRUNC","","truncate and do not suppress exceptions",null,null],[17,"_MM_FROUND_RINT","","use MXCSR.RC and do not suppress exceptions; see …",null,null],[17,"_MM_FROUND_NEARBYINT","","use MXCSR.RC and suppress exceptions; see …",null,null],[5,"_mm_blendv_epi8","","Blend packed 8-bit integers from <code>a</code> and <code>b</code> using <code>mask</code>",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_blend_epi16","","Blend packed 16-bit integers from <code>a</code> and <code>b</code> using the mask …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_blendv_pd","","Blend packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_blendv_ps","","Blend packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_blend_pd","","Blend packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_blend_ps","","Blend packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_extract_ps","","Extracts a single-precision (32-bit) floating-point …",null,[[["__m128",3]]]],[5,"_mm_extract_epi8","","Extracts an 8-bit integer from <code>a</code>, selected with <code>imm8</code>. …",null,[[["__m128i",3]]]],[5,"_mm_extract_epi32","","Extracts an 32-bit integer from <code>a</code> selected with <code>imm8</code>",null,[[["__m128i",3]]]],[5,"_mm_insert_ps","","Select a single value in <code>a</code> to store at some position in <code>b</code>,…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_insert_epi8","","Returns a copy of <code>a</code> with the 8-bit integer from <code>i</code> …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_insert_epi32","","Returns a copy of <code>a</code> with the 32-bit integer from <code>i</code> …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_max_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code> and returns …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_max_epu16","","Compares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_max_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_max_epu32","","Compares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_min_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code> and returns …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_min_epu16","","Compares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_min_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_min_epu32","","Compares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_packus_epi32","","Converts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpeq_epi64","","Compares packed 64-bit integers in <code>a</code> and <code>b</code> for equality",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi8_epi16","","Sign extend packed 8-bit integers in <code>a</code> to packed 16-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi8_epi32","","Sign extend packed 8-bit integers in <code>a</code> to packed 32-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi8_epi64","","Sign extend packed 8-bit integers in the low 8 bytes of <code>a</code> …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi16_epi32","","Sign extend packed 16-bit integers in <code>a</code> to packed 32-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi16_epi64","","Sign extend packed 16-bit integers in <code>a</code> to packed 64-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi32_epi64","","Sign extend packed 32-bit integers in <code>a</code> to packed 64-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepu8_epi16","","Zeroes extend packed unsigned 8-bit integers in <code>a</code> to …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepu8_epi32","","Zeroes extend packed unsigned 8-bit integers in <code>a</code> to …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepu8_epi64","","Zeroes extend packed unsigned 8-bit integers in <code>a</code> to …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepu16_epi32","","Zeroes extend packed unsigned 16-bit integers in <code>a</code> to …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepu16_epi64","","Zeroes extend packed unsigned 16-bit integers in <code>a</code> to …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepu32_epi64","","Zeroes extend packed unsigned 32-bit integers in <code>a</code> to …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_dp_pd","","Returns the dot product of two __m128d vectors.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_dp_ps","","Returns the dot product of two __m128 vectors.",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_floor_pd","","Round the packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_floor_ps","","Round the packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_floor_sd","","Round the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_floor_ss","","Round the lower single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_ceil_pd","","Round the packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_ceil_ps","","Round the packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_ceil_sd","","Round the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_ceil_ss","","Round the lower single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_round_pd","","Round the packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_round_ps","","Round the packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_round_sd","","Round the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_round_ss","","Round the lower single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_minpos_epu16","","Finds the minimum unsigned 16-bit element in the 128-bit _…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mul_epi32","","Multiplies the low 32-bit integers from each packed 64-bit…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mullo_epi32","","Multiplies the packed 32-bit integers in <code>a</code> and <code>b</code>, …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mpsadbw_epu8","","Subtracts 8-bit unsigned integer values and computes the …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_testz_si128","","Tests whether the specified bits in a 128-bit integer …",null,[[["__m128i",3]]]],[5,"_mm_testc_si128","","Tests whether the specified bits in a 128-bit integer …",null,[[["__m128i",3]]]],[5,"_mm_testnzc_si128","","Tests whether the specified bits in a 128-bit integer …",null,[[["__m128i",3]]]],[5,"_mm_test_all_zeros","","Tests whether the specified bits in a 128-bit integer …",null,[[["__m128i",3]]]],[5,"_mm_test_all_ones","","Tests whether the specified bits in <code>a</code> 128-bit integer …",null,[[["__m128i",3]]]],[5,"_mm_test_mix_ones_zeros","","Tests whether the specified bits in a 128-bit integer …",null,[[["__m128i",3]]]],[17,"_SIDD_UBYTE_OPS","","String contains unsigned 8-bit characters <em>(Default)</em>",null,null],[17,"_SIDD_UWORD_OPS","","String contains unsigned 16-bit characters",null,null],[17,"_SIDD_SBYTE_OPS","","String contains signed 8-bit characters",null,null],[17,"_SIDD_SWORD_OPS","","String contains unsigned 16-bit characters",null,null],[17,"_SIDD_CMP_EQUAL_ANY","","For each character in <code>a</code>, find if it is in <code>b</code> <em>(Default)</em>",null,null],[17,"_SIDD_CMP_RANGES","","For each character in <code>a</code>, determine if …",null,null],[17,"_SIDD_CMP_EQUAL_EACH","","The strings defined by <code>a</code> and <code>b</code> are equal",null,null],[17,"_SIDD_CMP_EQUAL_ORDERED","","Search for the defined substring in the target",null,null],[17,"_SIDD_POSITIVE_POLARITY","","Do not negate results <em>(Default)</em>",null,null],[17,"_SIDD_NEGATIVE_POLARITY","","Negates results",null,null],[17,"_SIDD_MASKED_POSITIVE_POLARITY","","Do not negate results before the end of the string",null,null],[17,"_SIDD_MASKED_NEGATIVE_POLARITY","","Negates results only before the end of the string",null,null],[17,"_SIDD_LEAST_SIGNIFICANT","","<strong>Index only</strong>: return the least significant bit <em>(Default)</em>",null,null],[17,"_SIDD_MOST_SIGNIFICANT","","<strong>Index only</strong>: return the most significant bit",null,null],[17,"_SIDD_BIT_MASK","","<strong>Mask only</strong>: return the bit mask",null,null],[17,"_SIDD_UNIT_MASK","","<strong>Mask only</strong>: return the byte mask",null,null],[5,"_mm_cmpistrm","","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpistri","","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …",null,[[["__m128i",3]]]],[5,"_mm_cmpistrz","","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …",null,[[["__m128i",3]]]],[5,"_mm_cmpistrc","","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …",null,[[["__m128i",3]]]],[5,"_mm_cmpistrs","","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …",null,[[["__m128i",3]]]],[5,"_mm_cmpistro","","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …",null,[[["__m128i",3]]]],[5,"_mm_cmpistra","","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …",null,[[["__m128i",3]]]],[5,"_mm_cmpestrm","","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpestri","","Compares packed strings <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …",null,[[["__m128i",3]]]],[5,"_mm_cmpestrz","","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …",null,[[["__m128i",3]]]],[5,"_mm_cmpestrc","","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …",null,[[["__m128i",3]]]],[5,"_mm_cmpestrs","","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …",null,[[["__m128i",3]]]],[5,"_mm_cmpestro","","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …",null,[[["__m128i",3]]]],[5,"_mm_cmpestra","","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …",null,[[["__m128i",3]]]],[5,"_mm_crc32_u8","","Starting with the initial value in <code>crc</code>, return the …",null,[[]]],[5,"_mm_crc32_u16","","Starting with the initial value in <code>crc</code>, return the …",null,[[]]],[5,"_mm_crc32_u32","","Starting with the initial value in <code>crc</code>, return the …",null,[[]]],[5,"_mm_cmpgt_epi64","","Compares packed 64-bit integers in <code>a</code> and <code>b</code> for …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_add_pd","","Adds packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_add_ps","","Adds packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_and_pd","","Computes the bitwise AND of a packed double-precision …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_and_ps","","Computes the bitwise AND of packed single-precision …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_or_pd","","Computes the bitwise OR packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_or_ps","","Computes the bitwise OR packed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_shuffle_pd","","Shuffles double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_shuffle_ps","","Shuffles single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_andnot_pd","","Computes the bitwise NOT of packed double-precision …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_andnot_ps","","Computes the bitwise NOT of packed single-precision …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_max_pd","","Compares packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_max_ps","","Compares packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_min_pd","","Compares packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_min_ps","","Compares packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_mul_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_mul_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_addsub_pd","","Alternatively adds and subtracts packed double-precision …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_addsub_ps","","Alternatively adds and subtracts packed single-precision …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_sub_pd","","Subtracts packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_sub_ps","","Subtracts packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_div_ps","","Computes the division of each of the 8 packed 32-bit …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_div_pd","","Computes the division of each of the 4 packed 64-bit …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_round_pd","","Rounds packed double-precision (64-bit) floating point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_ceil_pd","","Rounds packed double-precision (64-bit) floating point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_floor_pd","","Rounds packed double-precision (64-bit) floating point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_round_ps","","Rounds packed single-precision (32-bit) floating point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_ceil_ps","","Rounds packed single-precision (32-bit) floating point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_floor_ps","","Rounds packed single-precision (32-bit) floating point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_sqrt_ps","","Returns the square root of packed single-precision …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_sqrt_pd","","Returns the square root of packed double-precision …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_blend_pd","","Blends packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_blend_ps","","Blends packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_blendv_pd","","Blends packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_blendv_ps","","Blends packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_dp_ps","","Conditionally multiplies the packed single-precision …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_hadd_pd","","Horizontal addition of adjacent pairs in the two packed …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_hadd_ps","","Horizontal addition of adjacent pairs in the two packed …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_hsub_pd","","Horizontal subtraction of adjacent pairs in the two …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_hsub_ps","","Horizontal subtraction of adjacent pairs in the two …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_xor_pd","","Computes the bitwise XOR of packed double-precision …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_xor_ps","","Computes the bitwise XOR of packed single-precision …",null,[[["__m256",3]],["__m256",3]]],[17,"_CMP_EQ_OQ","","Equal (ordered, non-signaling)",null,null],[17,"_CMP_LT_OS","","Less-than (ordered, signaling)",null,null],[17,"_CMP_LE_OS","","Less-than-or-equal (ordered, signaling)",null,null],[17,"_CMP_UNORD_Q","","Unordered (non-signaling)",null,null],[17,"_CMP_NEQ_UQ","","Not-equal (unordered, non-signaling)",null,null],[17,"_CMP_NLT_US","","Not-less-than (unordered, signaling)",null,null],[17,"_CMP_NLE_US","","Not-less-than-or-equal (unordered, signaling)",null,null],[17,"_CMP_ORD_Q","","Ordered (non-signaling)",null,null],[17,"_CMP_EQ_UQ","","Equal (unordered, non-signaling)",null,null],[17,"_CMP_NGE_US","","Not-greater-than-or-equal (unordered, signaling)",null,null],[17,"_CMP_NGT_US","","Not-greater-than (unordered, signaling)",null,null],[17,"_CMP_FALSE_OQ","","False (ordered, non-signaling)",null,null],[17,"_CMP_NEQ_OQ","","Not-equal (ordered, non-signaling)",null,null],[17,"_CMP_GE_OS","","Greater-than-or-equal (ordered, signaling)",null,null],[17,"_CMP_GT_OS","","Greater-than (ordered, signaling)",null,null],[17,"_CMP_TRUE_UQ","","True (unordered, non-signaling)",null,null],[17,"_CMP_EQ_OS","","Equal (ordered, signaling)",null,null],[17,"_CMP_LT_OQ","","Less-than (ordered, non-signaling)",null,null],[17,"_CMP_LE_OQ","","Less-than-or-equal (ordered, non-signaling)",null,null],[17,"_CMP_UNORD_S","","Unordered (signaling)",null,null],[17,"_CMP_NEQ_US","","Not-equal (unordered, signaling)",null,null],[17,"_CMP_NLT_UQ","","Not-less-than (unordered, non-signaling)",null,null],[17,"_CMP_NLE_UQ","","Not-less-than-or-equal (unordered, non-signaling)",null,null],[17,"_CMP_ORD_S","","Ordered (signaling)",null,null],[17,"_CMP_EQ_US","","Equal (unordered, signaling)",null,null],[17,"_CMP_NGE_UQ","","Not-greater-than-or-equal (unordered, non-signaling)",null,null],[17,"_CMP_NGT_UQ","","Not-greater-than (unordered, non-signaling)",null,null],[17,"_CMP_FALSE_OS","","False (ordered, signaling)",null,null],[17,"_CMP_NEQ_OS","","Not-equal (ordered, signaling)",null,null],[17,"_CMP_GE_OQ","","Greater-than-or-equal (ordered, non-signaling)",null,null],[17,"_CMP_GT_OQ","","Greater-than (ordered, non-signaling)",null,null],[17,"_CMP_TRUE_US","","True (unordered, signaling)",null,null],[5,"_mm_cmp_pd","","Compares packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_cmp_pd","","Compares packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_cmp_ps","","Compares packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_cmp_ps","","Compares packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_cmp_sd","","Compares the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmp_ss","","Compares the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_cvtepi32_pd","","Converts packed 32-bit integers in <code>a</code> to packed …",null,[[["__m128i",3]],["__m256d",3]]],[5,"_mm256_cvtepi32_ps","","Converts packed 32-bit integers in <code>a</code> to packed …",null,[[["__m256i",3]],["__m256",3]]],[5,"_mm256_cvtpd_ps","","Converts packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m128",3]]],[5,"_mm256_cvtps_epi32","","Converts packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256i",3]]],[5,"_mm256_cvtps_pd","","Converts packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m256d",3]]],[5,"_mm256_cvttpd_epi32","","Converts packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m128i",3]]],[5,"_mm256_cvtpd_epi32","","Converts packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m128i",3]]],[5,"_mm256_cvttps_epi32","","Converts packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256i",3]]],[5,"_mm256_extractf128_ps","","Extracts 128 bits (composed of 4 packed single-precision …",null,[[["__m256",3]],["__m128",3]]],[5,"_mm256_extractf128_pd","","Extracts 128 bits (composed of 2 packed double-precision …",null,[[["__m256d",3]],["__m128d",3]]],[5,"_mm256_extractf128_si256","","Extracts 128 bits (composed of integer data) from <code>a</code>, …",null,[[["__m256i",3]],["__m128i",3]]],[5,"_mm256_zeroall","","Zeroes the contents of all XMM or YMM registers.",null,[[]]],[5,"_mm256_zeroupper","","Zeroes the upper 128 bits of all YMM registers; the lower …",null,[[]]],[5,"_mm256_permutevar_ps","","Shuffles single-precision (32-bit) floating-point …",null,[[["__m256",3],["__m256i",3]],["__m256",3]]],[5,"_mm_permutevar_ps","","Shuffles single-precision (32-bit) floating-point …",null,[[["__m128",3],["__m128i",3]],["__m128",3]]],[5,"_mm256_permute_ps","","Shuffles single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_permute_ps","","Shuffles single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_permutevar_pd","","Shuffles double-precision (64-bit) floating-point …",null,[[["__m256i",3],["__m256d",3]],["__m256d",3]]],[5,"_mm_permutevar_pd","","Shuffles double-precision (64-bit) floating-point …",null,[[["__m128d",3],["__m128i",3]],["__m128d",3]]],[5,"_mm256_permute_pd","","Shuffles double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_permute_pd","","Shuffles double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_permute2f128_ps","","Shuffles 256 bits (composed of 8 packed single-precision …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_permute2f128_pd","","Shuffles 256 bits (composed of 4 packed double-precision …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_permute2f128_si256","","Shuffles 128-bits (composed of integer data) selected by …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_broadcast_ss","","Broadcasts a single-precision (32-bit) floating-point …",null,[[],["__m256",3]]],[5,"_mm_broadcast_ss","","Broadcasts a single-precision (32-bit) floating-point …",null,[[],["__m128",3]]],[5,"_mm256_broadcast_sd","","Broadcasts a double-precision (64-bit) floating-point …",null,[[],["__m256d",3]]],[5,"_mm256_broadcast_ps","","Broadcasts 128 bits from memory (composed of 4 packed …",null,[[["__m128",3]],["__m256",3]]],[5,"_mm256_broadcast_pd","","Broadcasts 128 bits from memory (composed of 2 packed …",null,[[["__m128d",3]],["__m256d",3]]],[5,"_mm256_insertf128_ps","","Copies <code>a</code> to result, then inserts 128 bits (composed of 4 …",null,[[["__m256",3],["__m128",3]],["__m256",3]]],[5,"_mm256_insertf128_pd","","Copies <code>a</code> to result, then inserts 128 bits (composed of 2 …",null,[[["__m128d",3],["__m256d",3]],["__m256d",3]]],[5,"_mm256_insertf128_si256","","Copies <code>a</code> to result, then inserts 128 bits from <code>b</code> into …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_insert_epi8","","Copies <code>a</code> to result, and inserts the 8-bit integer <code>i</code> into …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_insert_epi16","","Copies <code>a</code> to result, and inserts the 16-bit integer <code>i</code> into …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_insert_epi32","","Copies <code>a</code> to result, and inserts the 32-bit integer <code>i</code> into …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_load_pd","","Loads 256-bits (composed of 4 packed double-precision …",null,[[],["__m256d",3]]],[5,"_mm256_store_pd","","Stores 256-bits (composed of 4 packed double-precision …",null,[[["__m256d",3]]]],[5,"_mm256_load_ps","","Loads 256-bits (composed of 8 packed single-precision …",null,[[],["__m256",3]]],[5,"_mm256_store_ps","","Stores 256-bits (composed of 8 packed single-precision …",null,[[["__m256",3]]]],[5,"_mm256_loadu_pd","","Loads 256-bits (composed of 4 packed double-precision …",null,[[],["__m256d",3]]],[5,"_mm256_storeu_pd","","Stores 256-bits (composed of 4 packed double-precision …",null,[[["__m256d",3]]]],[5,"_mm256_loadu_ps","","Loads 256-bits (composed of 8 packed single-precision …",null,[[],["__m256",3]]],[5,"_mm256_storeu_ps","","Stores 256-bits (composed of 8 packed single-precision …",null,[[["__m256",3]]]],[5,"_mm256_load_si256","","Loads 256-bits of integer data from memory into result. …",null,[[],["__m256i",3]]],[5,"_mm256_store_si256","","Stores 256-bits of integer data from <code>a</code> into memory. …",null,[[["__m256i",3]]]],[5,"_mm256_loadu_si256","","Loads 256-bits of integer data from memory into result. …",null,[[],["__m256i",3]]],[5,"_mm256_storeu_si256","","Stores 256-bits of integer data from <code>a</code> into memory. …",null,[[["__m256i",3]]]],[5,"_mm256_maskload_pd","","Loads packed double-precision (64-bit) floating-point …",null,[[["__m256i",3]],["__m256d",3]]],[5,"_mm256_maskstore_pd","","Stores packed double-precision (64-bit) floating-point …",null,[[["__m256d",3],["__m256i",3]]]],[5,"_mm_maskload_pd","","Loads packed double-precision (64-bit) floating-point …",null,[[["__m128i",3]],["__m128d",3]]],[5,"_mm_maskstore_pd","","Stores packed double-precision (64-bit) floating-point …",null,[[["__m128i",3],["__m128d",3]]]],[5,"_mm256_maskload_ps","","Loads packed single-precision (32-bit) floating-point …",null,[[["__m256i",3]],["__m256",3]]],[5,"_mm256_maskstore_ps","","Stores packed single-precision (32-bit) floating-point …",null,[[["__m256",3],["__m256i",3]]]],[5,"_mm_maskload_ps","","Loads packed single-precision (32-bit) floating-point …",null,[[["__m128i",3]],["__m128",3]]],[5,"_mm_maskstore_ps","","Stores packed single-precision (32-bit) floating-point …",null,[[["__m128",3],["__m128i",3]]]],[5,"_mm256_movehdup_ps","","Duplicate odd-indexed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_moveldup_ps","","Duplicate even-indexed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_movedup_pd","","Duplicate even-indexed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_lddqu_si256","","Loads 256-bits of integer data from unaligned memory into …",null,[[],["__m256i",3]]],[5,"_mm256_stream_si256","","Moves integer data from a 256-bit integer vector to a …",null,[[["__m256i",3]]]],[5,"_mm256_stream_pd","","Moves double-precision values from a 256-bit vector of …",null,[[["__m256d",3]]]],[5,"_mm256_stream_ps","","Moves single-precision floating point values from a …",null,[[["__m256",3]]]],[5,"_mm256_rcp_ps","","Computes the approximate reciprocal of packed …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_rsqrt_ps","","Computes the approximate reciprocal square root of packed …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_unpackhi_pd","","Unpacks and interleave double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_unpackhi_ps","","Unpacks and interleave single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_unpacklo_pd","","Unpacks and interleave double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_unpacklo_ps","","Unpacks and interleave single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_testz_si256","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256i",3]]]],[5,"_mm256_testc_si256","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256i",3]]]],[5,"_mm256_testnzc_si256","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256i",3]]]],[5,"_mm256_testz_pd","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256d",3]]]],[5,"_mm256_testc_pd","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256d",3]]]],[5,"_mm256_testnzc_pd","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256d",3]]]],[5,"_mm_testz_pd","","Computes the bitwise AND of 128 bits (representing …",null,[[["__m128d",3]]]],[5,"_mm_testc_pd","","Computes the bitwise AND of 128 bits (representing …",null,[[["__m128d",3]]]],[5,"_mm_testnzc_pd","","Computes the bitwise AND of 128 bits (representing …",null,[[["__m128d",3]]]],[5,"_mm256_testz_ps","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256",3]]]],[5,"_mm256_testc_ps","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256",3]]]],[5,"_mm256_testnzc_ps","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256",3]]]],[5,"_mm_testz_ps","","Computes the bitwise AND of 128 bits (representing …",null,[[["__m128",3]]]],[5,"_mm_testc_ps","","Computes the bitwise AND of 128 bits (representing …",null,[[["__m128",3]]]],[5,"_mm_testnzc_ps","","Computes the bitwise AND of 128 bits (representing …",null,[[["__m128",3]]]],[5,"_mm256_movemask_pd","","Sets each bit of the returned mask based on the most …",null,[[["__m256d",3]]]],[5,"_mm256_movemask_ps","","Sets each bit of the returned mask based on the most …",null,[[["__m256",3]]]],[5,"_mm256_setzero_pd","","Returns vector of type __m256d with all elements set to …",null,[[],["__m256d",3]]],[5,"_mm256_setzero_ps","","Returns vector of type __m256 with all elements set to …",null,[[],["__m256",3]]],[5,"_mm256_setzero_si256","","Returns vector of type __m256i with all elements set to …",null,[[],["__m256i",3]]],[5,"_mm256_set_pd","","Sets packed double-precision (64-bit) floating-point …",null,[[],["__m256d",3]]],[5,"_mm256_set_ps","","Sets packed single-precision (32-bit) floating-point …",null,[[],["__m256",3]]],[5,"_mm256_set_epi8","","Sets packed 8-bit integers in returned vector with the …",null,[[],["__m256i",3]]],[5,"_mm256_set_epi16","","Sets packed 16-bit integers in returned vector with the …",null,[[],["__m256i",3]]],[5,"_mm256_set_epi32","","Sets packed 32-bit integers in returned vector with the …",null,[[],["__m256i",3]]],[5,"_mm256_set_epi64x","","Sets packed 64-bit integers in returned vector with the …",null,[[],["__m256i",3]]],[5,"_mm256_setr_pd","","Sets packed double-precision (64-bit) floating-point …",null,[[],["__m256d",3]]],[5,"_mm256_setr_ps","","Sets packed single-precision (32-bit) floating-point …",null,[[],["__m256",3]]],[5,"_mm256_setr_epi8","","Sets packed 8-bit integers in returned vector with the …",null,[[],["__m256i",3]]],[5,"_mm256_setr_epi16","","Sets packed 16-bit integers in returned vector with the …",null,[[],["__m256i",3]]],[5,"_mm256_setr_epi32","","Sets packed 32-bit integers in returned vector with the …",null,[[],["__m256i",3]]],[5,"_mm256_setr_epi64x","","Sets packed 64-bit integers in returned vector with the …",null,[[],["__m256i",3]]],[5,"_mm256_set1_pd","","Broadcasts double-precision (64-bit) floating-point value …",null,[[],["__m256d",3]]],[5,"_mm256_set1_ps","","Broadcasts single-precision (32-bit) floating-point value …",null,[[],["__m256",3]]],[5,"_mm256_set1_epi8","","Broadcasts 8-bit integer <code>a</code> to all elements of returned …",null,[[],["__m256i",3]]],[5,"_mm256_set1_epi16","","Broadcasts 16-bit integer <code>a</code> to all all elements of …",null,[[],["__m256i",3]]],[5,"_mm256_set1_epi32","","Broadcasts 32-bit integer <code>a</code> to all elements of returned …",null,[[],["__m256i",3]]],[5,"_mm256_set1_epi64x","","Broadcasts 64-bit integer <code>a</code> to all elements of returned …",null,[[],["__m256i",3]]],[5,"_mm256_castpd_ps","","Cast vector of type __m256d to type __m256.",null,[[["__m256d",3]],["__m256",3]]],[5,"_mm256_castps_pd","","Cast vector of type __m256 to type __m256d.",null,[[["__m256",3]],["__m256d",3]]],[5,"_mm256_castps_si256","","Casts vector of type __m256 to type __m256i.",null,[[["__m256",3]],["__m256i",3]]],[5,"_mm256_castsi256_ps","","Casts vector of type __m256i to type __m256.",null,[[["__m256i",3]],["__m256",3]]],[5,"_mm256_castpd_si256","","Casts vector of type __m256d to type __m256i.",null,[[["__m256d",3]],["__m256i",3]]],[5,"_mm256_castsi256_pd","","Casts vector of type __m256i to type __m256d.",null,[[["__m256i",3]],["__m256d",3]]],[5,"_mm256_castps256_ps128","","Casts vector of type __m256 to type __m128.",null,[[["__m256",3]],["__m128",3]]],[5,"_mm256_castpd256_pd128","","Casts vector of type __m256d to type __m128d.",null,[[["__m256d",3]],["__m128d",3]]],[5,"_mm256_castsi256_si128","","Casts vector of type __m256i to type __m128i.",null,[[["__m256i",3]],["__m128i",3]]],[5,"_mm256_castps128_ps256","","Casts vector of type __m128 to type __m256; the upper 128 …",null,[[["__m128",3]],["__m256",3]]],[5,"_mm256_castpd128_pd256","","Casts vector of type __m128d to type __m256d; the upper …",null,[[["__m128d",3]],["__m256d",3]]],[5,"_mm256_castsi128_si256","","Casts vector of type __m128i to type __m256i; the upper …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_zextps128_ps256","","Constructs a 256-bit floating-point vector of <code>[8 x float]</code> …",null,[[["__m128",3]],["__m256",3]]],[5,"_mm256_zextsi128_si256","","Constructs a 256-bit integer vector from a 128-bit …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_zextpd128_pd256","","Constructs a 256-bit floating-point vector of <code>[4 x double]</code>…",null,[[["__m128d",3]],["__m256d",3]]],[5,"_mm256_undefined_ps","","Returns vector of type <code>__m256</code> with undefined elements.",null,[[],["__m256",3]]],[5,"_mm256_undefined_pd","","Returns vector of type <code>__m256d</code> with undefined elements.",null,[[],["__m256d",3]]],[5,"_mm256_undefined_si256","","Returns vector of type __m256i with undefined elements.",null,[[],["__m256i",3]]],[5,"_mm256_set_m128","","Sets packed __m256 returned vector with the supplied …",null,[[["__m128",3]],["__m256",3]]],[5,"_mm256_set_m128d","","Sets packed __m256d returned vector with the supplied …",null,[[["__m128d",3]],["__m256d",3]]],[5,"_mm256_set_m128i","","Sets packed __m256i returned vector with the supplied …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_setr_m128","","Sets packed __m256 returned vector with the supplied …",null,[[["__m128",3]],["__m256",3]]],[5,"_mm256_setr_m128d","","Sets packed __m256d returned vector with the supplied …",null,[[["__m128d",3]],["__m256d",3]]],[5,"_mm256_setr_m128i","","Sets packed __m256i returned vector with the supplied …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_loadu2_m128","","Loads two 128-bit values (composed of 4 packed …",null,[[],["__m256",3]]],[5,"_mm256_loadu2_m128d","","Loads two 128-bit values (composed of 2 packed …",null,[[],["__m256d",3]]],[5,"_mm256_loadu2_m128i","","Loads two 128-bit values (composed of integer data) from …",null,[[],["__m256i",3]]],[5,"_mm256_storeu2_m128","","Stores the high and low 128-bit halves (each composed of …",null,[[["__m256",3]]]],[5,"_mm256_storeu2_m128d","","Stores the high and low 128-bit halves (each composed of …",null,[[["__m256d",3]]]],[5,"_mm256_storeu2_m128i","","Stores the high and low 128-bit halves (each composed of …",null,[[["__m256i",3]]]],[5,"_mm256_cvtss_f32","","Returns the first element of the input vector of …",null,[[["__m256",3]]]],[5,"_mm256_abs_epi32","","Computes the absolute values of packed 32-bit integers in …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_abs_epi16","","Computes the absolute values of packed 16-bit integers in …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_abs_epi8","","Computes the absolute values of packed 8-bit integers in <code>a</code>…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_add_epi64","","Adds packed 64-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_add_epi32","","Adds packed 32-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_add_epi16","","Adds packed 16-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_add_epi8","","Adds packed 8-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_adds_epi8","","Adds packed 8-bit integers in <code>a</code> and <code>b</code> using saturation.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_adds_epi16","","Adds packed 16-bit integers in <code>a</code> and <code>b</code> using saturation.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_adds_epu8","","Adds packed unsigned 8-bit integers in <code>a</code> and <code>b</code> using …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_adds_epu16","","Adds packed unsigned 16-bit integers in <code>a</code> and <code>b</code> using …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_alignr_epi8","","Concatenates pairs of 16-byte blocks in <code>a</code> and <code>b</code> into a …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_and_si256","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_andnot_si256","","Computes the bitwise NOT of 256 bits (representing …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_avg_epu16","","Averages packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_avg_epu8","","Averages packed unsigned 8-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_blend_epi32","","Blends packed 32-bit integers from <code>a</code> and <code>b</code> using control …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_blend_epi32","","Blends packed 32-bit integers from <code>a</code> and <code>b</code> using control …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_blend_epi16","","Blends packed 16-bit integers from <code>a</code> and <code>b</code> using control …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_blendv_epi8","","Blends packed 8-bit integers from <code>a</code> and <code>b</code> using <code>mask</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_broadcastb_epi8","","Broadcasts the low packed 8-bit integer from <code>a</code> to all …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_broadcastb_epi8","","Broadcasts the low packed 8-bit integer from <code>a</code> to all …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm_broadcastd_epi32","","Broadcasts the low packed 32-bit integer from <code>a</code> to all …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_broadcastd_epi32","","Broadcasts the low packed 32-bit integer from <code>a</code> to all …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm_broadcastq_epi64","","Broadcasts the low packed 64-bit integer from <code>a</code> to all …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_broadcastq_epi64","","Broadcasts the low packed 64-bit integer from <code>a</code> to all …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm_broadcastsd_pd","","Broadcasts the low double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_broadcastsd_pd","","Broadcasts the low double-precision (64-bit) …",null,[[["__m128d",3]],["__m256d",3]]],[5,"_mm256_broadcastsi128_si256","","Broadcasts 128 bits of integer data from a to all 128-bit …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm_broadcastss_ps","","Broadcasts the low single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_broadcastss_ps","","Broadcasts the low single-precision (32-bit) …",null,[[["__m128",3]],["__m256",3]]],[5,"_mm_broadcastw_epi16","","Broadcasts the low packed 16-bit integer from a to all …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_broadcastw_epi16","","Broadcasts the low packed 16-bit integer from a to all …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cmpeq_epi64","","Compares packed 64-bit integers in <code>a</code> and <code>b</code> for equality.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpeq_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for equality.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpeq_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for equality.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpeq_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for equality.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpgt_epi64","","Compares packed 64-bit integers in <code>a</code> and <code>b</code> for …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpgt_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpgt_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpgt_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cvtepi16_epi32","","Sign-extend 16-bit integers to 32-bit integers.",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepi16_epi64","","Sign-extend 16-bit integers to 64-bit integers.",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepi32_epi64","","Sign-extend 32-bit integers to 64-bit integers.",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepi8_epi16","","Sign-extend 8-bit integers to 16-bit integers.",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepi8_epi32","","Sign-extend 8-bit integers to 32-bit integers.",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepi8_epi64","","Sign-extend 8-bit integers to 64-bit integers.",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepu16_epi32","","Zeroes extend packed unsigned 16-bit integers in <code>a</code> to …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepu16_epi64","","Zero-extend the lower four unsigned 16-bit integers in <code>a</code> …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepu32_epi64","","Zero-extend unsigned 32-bit integers in <code>a</code> to 64-bit …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepu8_epi16","","Zero-extend unsigned 8-bit integers in <code>a</code> to 16-bit …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepu8_epi32","","Zero-extend the lower eight unsigned 8-bit integers in <code>a</code> …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepu8_epi64","","Zero-extend the lower four unsigned 8-bit integers in <code>a</code> …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_extracti128_si256","","Extracts 128 bits (of integer data) from <code>a</code> selected with …",null,[[["__m256i",3]],["__m128i",3]]],[5,"_mm256_hadd_epi16","","Horizontally adds adjacent pairs of 16-bit integers in <code>a</code> …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_hadd_epi32","","Horizontally adds adjacent pairs of 32-bit integers in <code>a</code> …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_hadds_epi16","","Horizontally adds adjacent pairs of 16-bit integers in <code>a</code> …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_hsub_epi16","","Horizontally subtract adjacent pairs of 16-bit integers …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_hsub_epi32","","Horizontally subtract adjacent pairs of 32-bit integers …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_hsubs_epi16","","Horizontally subtract adjacent pairs of 16-bit integers …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_i32gather_epi32","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_i32gather_epi32","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_i32gather_epi32","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_i32gather_epi32","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_i32gather_ps","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m128",3]]],[5,"_mm_mask_i32gather_ps","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128",3],["__m128i",3]],["__m128",3]]],[5,"_mm256_i32gather_ps","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m256i",3]],["__m256",3]]],[5,"_mm256_mask_i32gather_ps","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m256",3],["__m256i",3]],["__m256",3]]],[5,"_mm_i32gather_epi64","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_i32gather_epi64","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_i32gather_epi64","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_mask_i32gather_epi64","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm_i32gather_pd","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m128d",3]]],[5,"_mm_mask_i32gather_pd","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128d",3],["__m128i",3]],["__m128d",3]]],[5,"_mm256_i32gather_pd","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m256d",3]]],[5,"_mm256_mask_i32gather_pd","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3],["__m256d",3]],["__m256d",3]]],[5,"_mm_i64gather_epi32","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_i64gather_epi32","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_i64gather_epi32","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m256i",3]],["__m128i",3]]],[5,"_mm256_mask_i64gather_epi32","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3],["__m256i",3]],["__m128i",3]]],[5,"_mm_i64gather_ps","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m128",3]]],[5,"_mm_mask_i64gather_ps","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128",3],["__m128i",3]],["__m128",3]]],[5,"_mm256_i64gather_ps","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m256i",3]],["__m128",3]]],[5,"_mm256_mask_i64gather_ps","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128",3],["__m256i",3]],["__m128",3]]],[5,"_mm_i64gather_epi64","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_i64gather_epi64","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_i64gather_epi64","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_i64gather_epi64","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_i64gather_pd","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m128d",3]]],[5,"_mm_mask_i64gather_pd","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128d",3],["__m128i",3]],["__m128d",3]]],[5,"_mm256_i64gather_pd","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m256i",3]],["__m256d",3]]],[5,"_mm256_mask_i64gather_pd","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m256i",3],["__m256d",3]],["__m256d",3]]],[5,"_mm256_inserti128_si256","","Copies <code>a</code> to <code>dst</code>, then insert 128 bits (of integer data) …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_madd_epi16","","Multiplies packed signed 16-bit integers in <code>a</code> and <code>b</code>, …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_maddubs_epi16","","Vertically multiplies each unsigned 8-bit integer from <code>a</code> …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_maskload_epi32","","Loads packed 32-bit integers from memory pointed by …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_maskload_epi32","","Loads packed 32-bit integers from memory pointed by …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_maskload_epi64","","Loads packed 64-bit integers from memory pointed by …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_maskload_epi64","","Loads packed 64-bit integers from memory pointed by …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_maskstore_epi32","","Stores packed 32-bit integers from <code>a</code> into memory pointed …",null,[[["__m128i",3]]]],[5,"_mm256_maskstore_epi32","","Stores packed 32-bit integers from <code>a</code> into memory pointed …",null,[[["__m256i",3]]]],[5,"_mm_maskstore_epi64","","Stores packed 64-bit integers from <code>a</code> into memory pointed …",null,[[["__m128i",3]]]],[5,"_mm256_maskstore_epi64","","Stores packed 64-bit integers from <code>a</code> into memory pointed …",null,[[["__m256i",3]]]],[5,"_mm256_max_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_max_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_max_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_max_epu16","","Compares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_max_epu32","","Compares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_max_epu8","","Compares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_min_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_min_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_min_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_min_epu16","","Compares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_min_epu32","","Compares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_min_epu8","","Compares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_movemask_epi8","","Creates mask from the most significant bit of each 8-bit …",null,[[["__m256i",3]]]],[5,"_mm256_mpsadbw_epu8","","Computes the sum of absolute differences (SADs) of …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mul_epi32","","Multiplies the low 32-bit integers from each packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mul_epu32","","Multiplies the low unsigned 32-bit integers from each …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mulhi_epi16","","Multiplies the packed 16-bit integers in <code>a</code> and <code>b</code>, …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mulhi_epu16","","Multiplies the packed unsigned 16-bit integers in <code>a</code> and <code>b</code>…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mullo_epi16","","Multiplies the packed 16-bit integers in <code>a</code> and <code>b</code>, …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mullo_epi32","","Multiplies the packed 32-bit integers in <code>a</code> and <code>b</code>, …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mulhrs_epi16","","Multiplies packed 16-bit integers in <code>a</code> and <code>b</code>, producing …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_or_si256","","Computes the bitwise OR of 256 bits (representing integer …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_packs_epi16","","Converts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_packs_epi32","","Converts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_packus_epi16","","Converts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_packus_epi32","","Converts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_permutevar8x32_epi32","","Permutes packed 32-bit integers from <code>a</code> according to the …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_permute4x64_epi64","","Permutes 64-bit integers from <code>a</code> using control mask <code>imm8</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_permute2x128_si256","","Shuffles 128-bits of integer data selected by <code>imm8</code> from <code>a</code> …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_permute4x64_pd","","Shuffles 64-bit floating-point elements in <code>a</code> across lanes …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_permutevar8x32_ps","","Shuffles eight 32-bit foating-point elements in <code>a</code> across …",null,[[["__m256",3],["__m256i",3]],["__m256",3]]],[5,"_mm256_sad_epu8","","Computes the absolute differences of packed unsigned …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_shuffle_epi8","","Shuffles bytes from <code>a</code> according to the content of <code>b</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_shuffle_epi32","","Shuffles 32-bit integers in 128-bit lanes of <code>a</code> using the …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_shufflehi_epi16","","Shuffles 16-bit integers in the high 64 bits of 128-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_shufflelo_epi16","","Shuffles 16-bit integers in the low 64 bits of 128-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sign_epi16","","Negates packed 16-bit integers in <code>a</code> when the …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sign_epi32","","Negates packed 32-bit integers in <code>a</code> when the …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sign_epi8","","Negates packed 8-bit integers in <code>a</code> when the corresponding …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sll_epi16","","Shifts packed 16-bit integers in <code>a</code> left by <code>count</code> while …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_sll_epi32","","Shifts packed 32-bit integers in <code>a</code> left by <code>count</code> while …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_sll_epi64","","Shifts packed 64-bit integers in <code>a</code> left by <code>count</code> while …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_slli_epi16","","Shifts packed 16-bit integers in <code>a</code> left by <code>imm8</code> while …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_slli_epi32","","Shifts packed 32-bit integers in <code>a</code> left by <code>imm8</code> while …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_slli_epi64","","Shifts packed 64-bit integers in <code>a</code> left by <code>imm8</code> while …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_slli_si256","","Shifts 128-bit lanes in <code>a</code> left by <code>imm8</code> bytes while …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_bslli_epi128","","Shifts 128-bit lanes in <code>a</code> left by <code>imm8</code> bytes while …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_sllv_epi32","","Shifts packed 32-bit integers in <code>a</code> left by the amount …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_sllv_epi32","","Shifts packed 32-bit integers in <code>a</code> left by the amount …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_sllv_epi64","","Shifts packed 64-bit integers in <code>a</code> left by the amount …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_sllv_epi64","","Shifts packed 64-bit integers in <code>a</code> left by the amount …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sra_epi16","","Shifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_sra_epi32","","Shifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_srai_epi16","","Shifts packed 16-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_srai_epi32","","Shifts packed 32-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_srav_epi32","","Shifts packed 32-bit integers in <code>a</code> right by the amount …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_srav_epi32","","Shifts packed 32-bit integers in <code>a</code> right by the amount …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_srli_si256","","Shifts 128-bit lanes in <code>a</code> right by <code>imm8</code> bytes while …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_bsrli_epi128","","Shifts 128-bit lanes in <code>a</code> right by <code>imm8</code> bytes while …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_srl_epi16","","Shifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_srl_epi32","","Shifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_srl_epi64","","Shifts packed 64-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_srli_epi16","","Shifts packed 16-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_srli_epi32","","Shifts packed 32-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_srli_epi64","","Shifts packed 64-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_srlv_epi32","","Shifts packed 32-bit integers in <code>a</code> right by the amount …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_srlv_epi32","","Shifts packed 32-bit integers in <code>a</code> right by the amount …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_srlv_epi64","","Shifts packed 64-bit integers in <code>a</code> right by the amount …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_srlv_epi64","","Shifts packed 64-bit integers in <code>a</code> right by the amount …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sub_epi16","","Subtract packed 16-bit integers in <code>b</code> from packed 16-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sub_epi32","","Subtract packed 32-bit integers in <code>b</code> from packed 32-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sub_epi64","","Subtract packed 64-bit integers in <code>b</code> from packed 64-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sub_epi8","","Subtract packed 8-bit integers in <code>b</code> from packed 8-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_subs_epi16","","Subtract packed 16-bit integers in <code>b</code> from packed 16-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_subs_epi8","","Subtract packed 8-bit integers in <code>b</code> from packed 8-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_subs_epu16","","Subtract packed unsigned 16-bit integers in <code>b</code> from packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_subs_epu8","","Subtract packed unsigned 8-bit integers in <code>b</code> from packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpackhi_epi8","","Unpacks and interleave 8-bit integers from the high half …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpacklo_epi8","","Unpacks and interleave 8-bit integers from the low half …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpackhi_epi16","","Unpacks and interleave 16-bit integers from the high half …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpacklo_epi16","","Unpacks and interleave 16-bit integers from the low half …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpackhi_epi32","","Unpacks and interleave 32-bit integers from the high half …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpacklo_epi32","","Unpacks and interleave 32-bit integers from the low half …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpackhi_epi64","","Unpacks and interleave 64-bit integers from the high half …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpacklo_epi64","","Unpacks and interleave 64-bit integers from the low half …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_xor_si256","","Computes the bitwise XOR of 256 bits (representing …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_extract_epi8","","Extracts an 8-bit integer from <code>a</code>, selected with <code>imm8</code>. …",null,[[["__m256i",3]]]],[5,"_mm256_extract_epi16","","Extracts a 16-bit integer from <code>a</code>, selected with <code>imm8</code>. …",null,[[["__m256i",3]]]],[5,"_mm256_extract_epi32","","Extracts a 32-bit integer from <code>a</code>, selected with <code>imm8</code>.",null,[[["__m256i",3]]]],[5,"_mm256_cvtsd_f64","","Returns the first element of the input vector of …",null,[[["__m256d",3]]]],[5,"_mm256_cvtsi256_si32","","Returns the first element of the input vector of <code>[8 x i32]</code>…",null,[[["__m256i",3]]]],[5,"_mm_fmadd_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_fmadd_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_fmadd_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_fmadd_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_fmadd_sd","","Multiplies the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_fmadd_ss","","Multiplies the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_fmaddsub_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_fmaddsub_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_fmaddsub_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_fmaddsub_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_fmsub_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_fmsub_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_fmsub_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_fmsub_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_fmsub_sd","","Multiplies the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_fmsub_ss","","Multiplies the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_fmsubadd_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_fmsubadd_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_fmsubadd_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_fmsubadd_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_fnmadd_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_fnmadd_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_fnmadd_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_fnmadd_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_fnmadd_sd","","Multiplies the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_fnmadd_ss","","Multiplies the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_fnmsub_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_fnmsub_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_fnmsub_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_fnmsub_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_fnmsub_sd","","Multiplies the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_fnmsub_ss","","Multiplies the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_lzcnt_u32","","Counts the leading most significant zero bits.",null,[[]]],[5,"_popcnt32","","Counts the bits that are set.",null,[[]]],[5,"_bextr_u32","","Extracts bits in range [<code>start</code>, <code>start</code> + <code>length</code>) from <code>a</code> into…",null,[[]]],[5,"_bextr2_u32","","Extracts bits of <code>a</code> specified by <code>control</code> into the least …",null,[[]]],[5,"_andn_u32","","Bitwise logical <code>AND</code> of inverted <code>a</code> with <code>b</code>.",null,[[]]],[5,"_blsi_u32","","Extracts lowest set isolated bit.",null,[[]]],[5,"_blsmsk_u32","","Gets mask up to lowest set bit.",null,[[]]],[5,"_blsr_u32","","Resets the lowest set bit of <code>x</code>.",null,[[]]],[5,"_tzcnt_u32","","Counts the number of trailing least significant zero bits.",null,[[]]],[5,"_mm_tzcnt_32","","Counts the number of trailing least significant zero bits.",null,[[]]],[5,"_mulx_u32","","Unsigned multiply without affecting flags.",null,[[]]],[5,"_bzhi_u32","","Zeroes higher bits of <code>a</code> >= <code>index</code>.",null,[[]]],[5,"_pdep_u32","","Scatter contiguous low order bits of <code>a</code> to the result at …",null,[[]]],[5,"_pext_u32","","Gathers the bits of <code>x</code> specified by the <code>mask</code> into the …",null,[[]]],[5,"_mm_extract_si64","","Extracts the bit range specified by <code>y</code> from the lower 64 …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_insert_si64","","Inserts the <code>[length:0]</code> bits of <code>y</code> into <code>x</code> at <code>index</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_stream_sd","","Non-temporal store of <code>a.0</code> into <code>p</code>.",null,[[["__m128d",3]]]],[5,"_mm_stream_ss","","Non-temporal store of <code>a.0</code> into <code>p</code>.",null,[[["__m128",3]]]],[5,"_blcfill_u32","","Clears all bits below the least significant zero bit of <code>x</code>.",null,[[]]],[5,"_blcfill_u64","","Clears all bits below the least significant zero bit of <code>x</code>.",null,[[]]],[5,"_blci_u32","","Sets all bits of <code>x</code> to 1 except for the least significant …",null,[[]]],[5,"_blci_u64","","Sets all bits of <code>x</code> to 1 except for the least significant …",null,[[]]],[5,"_blcic_u32","","Sets the least significant zero bit of <code>x</code> and clears all …",null,[[]]],[5,"_blcic_u64","","Sets the least significant zero bit of <code>x</code> and clears all …",null,[[]]],[5,"_blcmsk_u32","","Sets the least significant zero bit of <code>x</code> and clears all …",null,[[]]],[5,"_blcmsk_u64","","Sets the least significant zero bit of <code>x</code> and clears all …",null,[[]]],[5,"_blcs_u32","","Sets the least significant zero bit of <code>x</code>.",null,[[]]],[5,"_blcs_u64","","Sets the least significant zero bit of <code>x</code>.",null,[[]]],[5,"_blsfill_u32","","Sets all bits of <code>x</code> below the least significant one.",null,[[]]],[5,"_blsfill_u64","","Sets all bits of <code>x</code> below the least significant one.",null,[[]]],[5,"_blsic_u32","","Clears least significant bit and sets all other bits.",null,[[]]],[5,"_blsic_u64","","Clears least significant bit and sets all other bits.",null,[[]]],[5,"_t1mskc_u32","","Clears all bits below the least significant zero of <code>x</code> and …",null,[[]]],[5,"_t1mskc_u64","","Clears all bits below the least significant zero of <code>x</code> and …",null,[[]]],[5,"_tzmsk_u32","","Sets all bits below the least significant one of <code>x</code> and …",null,[[]]],[5,"_tzmsk_u64","","Sets all bits below the least significant one of <code>x</code> and …",null,[[]]],[5,"_mm_clmulepi64_si128","","Performs a carry-less multiplication of two 64-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_aesdec_si128","","Performs one round of an AES decryption flow on data …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_aesdeclast_si128","","Performs the last round of an AES decryption flow on data …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_aesenc_si128","","Performs one round of an AES encryption flow on data …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_aesenclast_si128","","Performs the last round of an AES encryption flow on data …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_aesimc_si128","","Performs the <code>InvMixColumns</code> transformation on <code>a</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_aeskeygenassist_si128","","Assist in expanding the AES cipher key.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_rdrand16_step","","Read a hardware generated 16-bit random value and store …",null,[[]]],[5,"_rdrand32_step","","Read a hardware generated 32-bit random value and store …",null,[[]]],[5,"_rdseed16_step","","Read a 16-bit NIST SP800-90B and SP800-90C compliant …",null,[[]]],[5,"_rdseed32_step","","Read a 32-bit NIST SP800-90B and SP800-90C compliant …",null,[[]]],[5,"_mm_sha1msg1_epu32","","Performs an intermediate calculation for the next four …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sha1msg2_epu32","","Performs the final calculation for the next four SHA1 …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sha1nexte_epu32","","Calculate SHA1 state variable E after four rounds of …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sha1rnds4_epu32","","Performs four rounds of SHA1 operation using an initial …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sha256msg1_epu32","","Performs an intermediate calculation for the next four …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sha256msg2_epu32","","Performs the final calculation for the next four SHA256 …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sha256rnds2_epu32","","Performs 2 rounds of SHA256 operation using an initial …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_addcarry_u32","","Adds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …",null,[[]]],[5,"_addcarryx_u32","","Adds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …",null,[[]]],[5,"_subborrow_u32","","Adds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …",null,[[]]],[5,"ud2","","Generates the trap instruction <code>UD2</code>",null,[[]]],[5,"_mm512_abs_epi32","","Computes the absolute values of packed 32-bit integers in …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_abs_epi32","","Computes the absolute value of packed 32-bit integers in <code>a</code>…",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_abs_epi32","","Computes the absolute value of packed 32-bit integers in <code>a</code>…",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_abs_epi64","","Compute the absolute value of packed signed 64-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_abs_epi64","","Compute the absolute value of packed signed 64-bit …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_abs_epi64","","Compute the absolute value of packed signed 64-bit …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_abs_ps","","Finds the absolute value of each packed single-precision …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_abs_ps","","Finds the absolute value of each packed single-precision …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_abs_pd","","Finds the absolute value of each packed double-precision …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_abs_pd","","Finds the absolute value of each packed double-precision …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_mov_epi32","","Move packed 32-bit integers from a to dst using writemask …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_mov_epi32","","Move packed 32-bit integers from a into dst using …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_mask_mov_epi64","","Move packed 64-bit integers from a to dst using writemask …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_mov_epi64","","Move packed 64-bit integers from a into dst using …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_mask_mov_ps","","Move packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_mov_ps","","Move packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask_mov_pd","","Move packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_mov_pd","","Move packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_add_epi32","","Add packed 32-bit integers in a and b, and store the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_add_epi32","","Add packed 32-bit integers in a and b, and store the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_add_epi32","","Add packed 32-bit integers in a and b, and store the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_add_epi64","","Add packed 64-bit integers in a and b, and store the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_add_epi64","","Add packed 64-bit integers in a and b, and store the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_add_epi64","","Add packed 64-bit integers in a and b, and store the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_add_ps","","Add packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_add_ps","","Add packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_add_ps","","Add packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_add_pd","","Add packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_add_pd","","Add packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_add_pd","","Add packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_sub_epi32","","Subtract packed 32-bit integers in b from packed 32-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_sub_epi32","","Subtract packed 32-bit integers in b from packed 32-bit …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_sub_epi32","","Subtract packed 32-bit integers in b from packed 32-bit …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_sub_epi64","","Subtract packed 64-bit integers in b from packed 64-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_sub_epi64","","Subtract packed 64-bit integers in b from packed 64-bit …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_sub_epi64","","Subtract packed 64-bit integers in b from packed 64-bit …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_sub_ps","","Subtract packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_sub_ps","","Subtract packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_sub_ps","","Subtract packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_sub_pd","","Subtract packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_sub_pd","","Subtract packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_sub_pd","","Subtract packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mul_epi32","","Multiply the low signed 32-bit integers from each packed …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_mul_epi32","","Multiply the low signed 32-bit integers from each packed …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_mul_epi32","","Multiply the low signed 32-bit integers from each packed …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_mullo_epi32","","Multiply the packed 32-bit integers in a and b, producing …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_mullo_epi32","","Multiply the packed 32-bit integers in a and b, producing …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_mullo_epi32","","Multiply the packed 32-bit integers in a and b, producing …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_mullox_epi64","","Multiplies elements in packed 64-bit integer vectors a …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_mullox_epi64","","Multiplies elements in packed 64-bit integer vectors a …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_mul_epu32","","Multiply the low unsigned 32-bit integers from each …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_mul_epu32","","Multiply the low unsigned 32-bit integers from each …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_mul_epu32","","Multiply the low unsigned 32-bit integers from each …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_mul_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_mul_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_mul_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mul_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_mul_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_mul_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_div_ps","","Divide packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_div_ps","","Divide packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_div_ps","","Divide packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_div_pd","","Divide packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_div_pd","","Divide packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_div_pd","","Divide packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_max_epi32","","Compare packed signed 32-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_max_epi32","","Compare packed signed 32-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_max_epi32","","Compare packed signed 32-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_max_epi64","","Compare packed signed 64-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_max_epi64","","Compare packed signed 64-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_max_epi64","","Compare packed signed 64-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_max_ps","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_max_ps","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_max_ps","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_max_pd","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_max_pd","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_max_pd","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_max_epu32","","Compare packed unsigned 32-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_max_epu32","","Compare packed unsigned 32-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_max_epu32","","Compare packed unsigned 32-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_max_epu64","","Compare packed unsigned 64-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_max_epu64","","Compare packed unsigned 64-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_max_epu64","","Compare packed unsigned 64-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_min_epi32","","Compare packed signed 32-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_min_epi32","","Compare packed signed 32-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_min_epi32","","Compare packed signed 32-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_min_epi64","","Compare packed signed 64-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_min_epi64","","Compare packed signed 64-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_min_epi64","","Compare packed signed 64-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_min_ps","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_min_ps","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_min_ps","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_min_pd","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_min_pd","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_min_pd","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_min_epu32","","Compare packed unsigned 32-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_min_epu32","","Compare packed unsigned 32-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_min_epu32","","Compare packed unsigned 32-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_min_epu64","","Compare packed unsigned 64-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_min_epu64","","Compare packed unsigned 64-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_min_epu64","","Compare packed unsigned 64-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_sqrt_ps","","Compute the square root of packed single-precision …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_sqrt_ps","","Compute the square root of packed single-precision …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_sqrt_ps","","Compute the square root of packed single-precision …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_sqrt_pd","","Compute the square root of packed double-precision …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_sqrt_pd","","Compute the square root of packed double-precision …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_sqrt_pd","","Compute the square root of packed double-precision …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fmadd_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_fmadd_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fmadd_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask3_fmadd_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fmadd_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fmadd_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fmadd_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask3_fmadd_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fmsub_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_fmsub_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fmsub_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask3_fmsub_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fmsub_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fmsub_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fmsub_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask3_fmsub_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fmaddsub_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_fmaddsub_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fmaddsub_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask3_fmaddsub_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fmaddsub_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fmaddsub_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fmaddsub_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask3_fmaddsub_pd","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fmsubadd_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_fmsubadd_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fmsubadd_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask3_fmsubadd_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fmsubadd_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fmsubadd_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fmsubadd_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask3_fmsubadd_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fnmadd_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_fnmadd_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fnmadd_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask3_fnmadd_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fnmadd_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fnmadd_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fnmadd_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask3_fnmadd_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fnmsub_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_fnmsub_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fnmsub_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask3_fnmsub_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fnmsub_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fnmsub_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fnmsub_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask3_fnmsub_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_rcp14_ps","","Compute the approximate reciprocal of packed …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_rcp14_ps","","Compute the approximate reciprocal of packed …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_rcp14_ps","","Compute the approximate reciprocal of packed …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_rcp14_pd","","Compute the approximate reciprocal of packed …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_rcp14_pd","","Compute the approximate reciprocal of packed …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_rcp14_pd","","Compute the approximate reciprocal of packed …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_rsqrt14_ps","","Compute the approximate reciprocal square root of packed …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_rsqrt14_ps","","Compute the approximate reciprocal square root of packed …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_rsqrt14_ps","","Compute the approximate reciprocal square root of packed …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_rsqrt14_pd","","Compute the approximate reciprocal square root of packed …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_rsqrt14_pd","","Compute the approximate reciprocal square root of packed …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_rsqrt14_pd","","Compute the approximate reciprocal square root of packed …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_getexp_ps","","Convert the exponent of each packed single-precision …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_getexp_ps","","Convert the exponent of each packed single-precision …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_getexp_ps","","Convert the exponent of each packed single-precision …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_getexp_pd","","Convert the exponent of each packed double-precision …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_getexp_pd","","Convert the exponent of each packed double-precision …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_getexp_pd","","Convert the exponent of each packed double-precision …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_roundscale_ps","","Round packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_roundscale_ps","","Round packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_roundscale_ps","","Round packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_roundscale_pd","","Round packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_roundscale_pd","","Round packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_roundscale_pd","","Round packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_scalef_ps","","Scale the packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_scalef_ps","","Scale the packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_scalef_ps","","Scale the packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_scalef_pd","","Scale the packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_scalef_pd","","Scale the packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_scalef_pd","","Scale the packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fixupimm_ps","","Fix up packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__m512i",3]],["__m512",3]]],[5,"_mm512_mask_fixupimm_ps","","Fix up packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fixupimm_ps","","Fix up packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fixupimm_pd","","Fix up packed double-precision (64-bit) floating-point …",null,[[["__m512i",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fixupimm_pd","","Fix up packed double-precision (64-bit) floating-point …",null,[[["__m512i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fixupimm_pd","","Fix up packed double-precision (64-bit) floating-point …",null,[[["__m512i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_ternarylogic_epi32","","Bitwise ternary logic that provides the capability to …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_ternarylogic_epi32","","Bitwise ternary logic that provides the capability to …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_ternarylogic_epi32","","Bitwise ternary logic that provides the capability to …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_ternarylogic_epi64","","Bitwise ternary logic that provides the capability to …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_ternarylogic_epi64","","Bitwise ternary logic that provides the capability to …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_ternarylogic_epi64","","Bitwise ternary logic that provides the capability to …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_getmant_ps","","Normalize the mantissas of packed single-precision …",null,[[["__m512",3],["_mm_mantissa_sign_enum",6],["_mm_mantissa_norm_enum",6]],["__m512",3]]],[5,"_mm512_mask_getmant_ps","","Normalize the mantissas of packed single-precision …",null,[[["_mm_mantissa_sign_enum",6],["_mm_mantissa_norm_enum",6],["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_getmant_ps","","Normalize the mantissas of packed single-precision …",null,[[["_mm_mantissa_sign_enum",6],["_mm_mantissa_norm_enum",6],["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_getmant_pd","","Normalize the mantissas of packed double-precision …",null,[[["_mm_mantissa_sign_enum",6],["_mm_mantissa_norm_enum",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_getmant_pd","","Normalize the mantissas of packed double-precision …",null,[[["__mmask8",6],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_getmant_pd","","Normalize the mantissas of packed double-precision …",null,[[["__mmask8",6],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_add_round_ps","","Add packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_add_round_ps","","Add packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_add_round_ps","","Add packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_add_round_pd","","Add packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_add_round_pd","","Add packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_add_round_pd","","Add packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_sub_round_ps","","Subtract packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_sub_round_ps","","Subtract packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_sub_round_ps","","Subtract packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_sub_round_pd","","Subtract packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_sub_round_pd","","Subtract packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_sub_round_pd","","Subtract packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mul_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_mul_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_mul_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mul_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_mul_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_mul_round_pd","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_div_round_ps","","Divide packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_div_round_ps","","Divide packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_div_round_ps","","Divide packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_div_round_pd","","Divide packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_div_round_pd","","Divide packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_div_round_pd","","Divide packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_sqrt_round_ps","","Compute the square root of packed single-precision …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_sqrt_round_ps","","Compute the square root of packed single-precision …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_sqrt_round_ps","","Compute the square root of packed single-precision …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_sqrt_round_pd","","Compute the square root of packed double-precision …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_sqrt_round_pd","","Compute the square root of packed double-precision …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_sqrt_round_pd","","Compute the square root of packed double-precision …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fmadd_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_fmadd_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fmadd_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask3_fmadd_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fmadd_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fmadd_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fmadd_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask3_fmadd_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fmsub_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_fmsub_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fmsub_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask3_fmsub_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fmsub_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fmsub_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fmsub_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask3_fmsub_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fmaddsub_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_fmaddsub_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fmaddsub_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask3_fmaddsub_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fmaddsub_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fmaddsub_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fmaddsub_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask3_fmaddsub_round_pd","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fmsubadd_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_fmsubadd_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fmsubadd_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask3_fmsubadd_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fmsubadd_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fmsubadd_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fmsubadd_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask3_fmsubadd_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fnmadd_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_fnmadd_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fnmadd_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask3_fnmadd_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fnmadd_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fnmadd_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fnmadd_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask3_fnmadd_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fnmsub_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_fnmsub_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fnmsub_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask3_fnmsub_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fnmsub_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fnmsub_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fnmsub_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask3_fnmsub_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_max_round_ps","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_max_round_ps","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_max_round_ps","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_max_round_pd","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_max_round_pd","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_max_round_pd","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_min_round_ps","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_min_round_ps","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_min_round_ps","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_min_round_pd","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_min_round_pd","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_min_round_pd","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_getexp_round_ps","","Convert the exponent of each packed single-precision …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_getexp_round_ps","","Convert the exponent of each packed single-precision …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_getexp_round_ps","","Convert the exponent of each packed single-precision …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_getexp_round_pd","","Convert the exponent of each packed double-precision …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_getexp_round_pd","","Convert the exponent of each packed double-precision …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_getexp_round_pd","","Convert the exponent of each packed double-precision …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_roundscale_round_ps","","Round packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_roundscale_round_ps","","Round packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_roundscale_round_ps","","Round packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_roundscale_round_pd","","Round packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_roundscale_round_pd","","Round packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_roundscale_round_pd","","Round packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_scalef_round_ps","","Scale the packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_scalef_round_ps","","Scale the packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_scalef_round_ps","","Scale the packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_scalef_round_pd","","Scale the packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_scalef_round_pd","","Scale the packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_scalef_round_pd","","Scale the packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fixupimm_round_ps","","Fix up packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__m512i",3]],["__m512",3]]],[5,"_mm512_mask_fixupimm_round_ps","","Fix up packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fixupimm_round_ps","","Fix up packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fixupimm_round_pd","","Fix up packed double-precision (64-bit) floating-point …",null,[[["__m512i",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fixupimm_round_pd","","Fix up packed double-precision (64-bit) floating-point …",null,[[["__m512i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fixupimm_round_pd","","Fix up packed double-precision (64-bit) floating-point …",null,[[["__m512i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_getmant_round_ps","","Normalize the mantissas of packed single-precision …",null,[[["__m512",3],["_mm_mantissa_sign_enum",6],["_mm_mantissa_norm_enum",6]],["__m512",3]]],[5,"_mm512_mask_getmant_round_ps","","Normalize the mantissas of packed single-precision …",null,[[["_mm_mantissa_sign_enum",6],["_mm_mantissa_norm_enum",6],["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_getmant_round_ps","","Normalize the mantissas of packed single-precision …",null,[[["_mm_mantissa_sign_enum",6],["_mm_mantissa_norm_enum",6],["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_getmant_round_pd","","Normalize the mantissas of packed double-precision …",null,[[["_mm_mantissa_sign_enum",6],["_mm_mantissa_norm_enum",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_getmant_round_pd","","Normalize the mantissas of packed double-precision …",null,[[["__mmask8",6],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_getmant_round_pd","","Normalize the mantissas of packed double-precision …",null,[[["__mmask8",6],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_cvtps_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512i",3]]],[5,"_mm512_mask_cvtps_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512i",3],["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_cvtps_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_cvtps_epu32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512i",3]]],[5,"_mm512_mask_cvtps_epu32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512i",3],["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_cvtps_epu32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_cvtps_pd","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m512d",3]]],[5,"_mm512_mask_cvtps_pd","","Convert packed single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m256",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_cvtps_pd","","Convert packed single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m256",3]],["__m512d",3]]],[5,"_mm512_cvtpslo_pd","","Performs element-by-element conversion of the lower half …",null,[[["__m512",3]],["__m512d",3]]],[5,"_mm512_mask_cvtpslo_pd","","Performs element-by-element conversion of the lower half …",null,[[["__m512",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_cvtpd_ps","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m256",3]]],[5,"_mm512_mask_cvtpd_ps","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m256",3],["__mmask8",6],["__m512d",3]],["__m256",3]]],[5,"_mm512_maskz_cvtpd_ps","","Convert packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m256",3]]],[5,"_mm512_cvtpd_pslo","","Performs an element-by-element conversion of packed …",null,[[["__m512d",3]],["__m512",3]]],[5,"_mm512_mask_cvtpd_pslo","","Performs an element-by-element conversion of packed …",null,[[["__m512",3],["__mmask8",6],["__m512d",3]],["__m512",3]]],[5,"_mm512_cvtepi8_epi32","","Sign extend packed 8-bit integers in a to packed 32-bit …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_cvtepi8_epi32","","Sign extend packed 8-bit integers in a to packed 32-bit …",null,[[["__m512i",3],["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_cvtepi8_epi32","","Sign extend packed 8-bit integers in a to packed 32-bit …",null,[[["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_cvtepi8_epi64","","Sign extend packed 8-bit integers in the low 8 bytes of a …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_cvtepi8_epi64","","Sign extend packed 8-bit integers in the low 8 bytes of a …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_cvtepi8_epi64","","Sign extend packed 8-bit integers in the low 8 bytes of a …",null,[[["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_cvtepu8_epi32","","Zero extend packed unsigned 8-bit integers in a to packed …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_cvtepu8_epi32","","Zero extend packed unsigned 8-bit integers in a to packed …",null,[[["__m512i",3],["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_cvtepu8_epi32","","Zero extend packed unsigned 8-bit integers in a to packed …",null,[[["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_cvtepu8_epi64","","Zero extend packed unsigned 8-bit integers in the low 8 …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_cvtepu8_epi64","","Zero extend packed unsigned 8-bit integers in the low 8 …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_cvtepu8_epi64","","Zero extend packed unsigned 8-bit integers in the low 8 …",null,[[["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_cvtepi16_epi32","","Sign extend packed 16-bit integers in a to packed 32-bit …",null,[[["__m256i",3]],["__m512i",3]]],[5,"_mm512_mask_cvtepi16_epi32","","Sign extend packed 16-bit integers in a to packed 32-bit …",null,[[["__m512i",3],["__mmask16",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_maskz_cvtepi16_epi32","","Sign extend packed 16-bit integers in a to packed 32-bit …",null,[[["__mmask16",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_cvtepi16_epi64","","Sign extend packed 16-bit integers in a to packed 64-bit …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_cvtepi16_epi64","","Sign extend packed 16-bit integers in a to packed 64-bit …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_cvtepi16_epi64","","Sign extend packed 16-bit integers in a to packed 64-bit …",null,[[["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_cvtepu16_epi32","","Zero extend packed unsigned 16-bit integers in a to …",null,[[["__m256i",3]],["__m512i",3]]],[5,"_mm512_mask_cvtepu16_epi32","","Zero extend packed unsigned 16-bit integers in a to …",null,[[["__m512i",3],["__mmask16",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_maskz_cvtepu16_epi32","","Zero extend packed unsigned 16-bit integers in a to …",null,[[["__mmask16",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_cvtepu16_epi64","","Zero extend packed unsigned 16-bit integers in a to …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_cvtepu16_epi64","","Zero extend packed unsigned 16-bit integers in a to …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_cvtepu16_epi64","","Zero extend packed unsigned 16-bit integers in a to …",null,[[["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_cvtepi32_epi64","","Sign extend packed 32-bit integers in a to packed 64-bit …",null,[[["__m256i",3]],["__m512i",3]]],[5,"_mm512_mask_cvtepi32_epi64","","Sign extend packed 32-bit integers in a to packed 64-bit …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_maskz_cvtepi32_epi64","","Sign extend packed 32-bit integers in a to packed 64-bit …",null,[[["__mmask8",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_cvtepu32_epi64","","Zero extend packed unsigned 32-bit integers in a to …",null,[[["__m256i",3]],["__m512i",3]]],[5,"_mm512_mask_cvtepu32_epi64","","Zero extend packed unsigned 32-bit integers in a to …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_maskz_cvtepu32_epi64","","Zero extend packed unsigned 32-bit integers in a to …",null,[[["__mmask8",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_cvtepi32_ps","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m512i",3]],["__m512",3]]],[5,"_mm512_mask_cvtepi32_ps","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_cvtepi32_ps","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_cvtepi32_pd","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m256i",3]],["__m512d",3]]],[5,"_mm512_mask_cvtepi32_pd","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m256i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_cvtepi32_pd","","Convert packed signed 32-bit integers in a to packed …",null,[[["__mmask8",6],["__m256i",3]],["__m512d",3]]],[5,"_mm512_cvtepu32_ps","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m512i",3]],["__m512",3]]],[5,"_mm512_mask_cvtepu32_ps","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_cvtepu32_ps","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_cvtepu32_pd","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m256i",3]],["__m512d",3]]],[5,"_mm512_mask_cvtepu32_pd","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m256i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_cvtepu32_pd","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__mmask8",6],["__m256i",3]],["__m512d",3]]],[5,"_mm512_cvtepi32lo_pd","","Performs element-by-element conversion of the lower half …",null,[[["__m512i",3]],["__m512d",3]]],[5,"_mm512_mask_cvtepi32lo_pd","","Performs element-by-element conversion of the lower half …",null,[[["__m512i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_cvtepu32lo_pd","","Performs element-by-element conversion of the lower half …",null,[[["__m512i",3]],["__m512d",3]]],[5,"_mm512_mask_cvtepu32lo_pd","","Performs element-by-element conversion of the lower half …",null,[[["__m512i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_cvtepi32_epi16","","Convert packed 32-bit integers in a to packed 16-bit …",null,[[["__m512i",3]],["__m256i",3]]],[5,"_mm512_mask_cvtepi32_epi16","","Convert packed 32-bit integers in a to packed 16-bit …",null,[[["__m512i",3],["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvtepi32_epi16","","Convert packed 32-bit integers in a to packed 16-bit …",null,[[["__m512i",3],["__mmask16",6]],["__m256i",3]]],[5,"_mm512_cvtepi32_epi8","","Convert packed 32-bit integers in a to packed 8-bit …",null,[[["__m512i",3]],["__m128i",3]]],[5,"_mm512_mask_cvtepi32_epi8","","Convert packed 32-bit integers in a to packed 8-bit …",null,[[["__m512i",3],["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm512_maskz_cvtepi32_epi8","","Convert packed 32-bit integers in a to packed 8-bit …",null,[[["__m512i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm512_cvtepi64_epi32","","Convert packed 64-bit integers in a to packed 32-bit …",null,[[["__m512i",3]],["__m256i",3]]],[5,"_mm512_mask_cvtepi64_epi32","","Convert packed 64-bit integers in a to packed 32-bit …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvtepi64_epi32","","Convert packed 64-bit integers in a to packed 32-bit …",null,[[["__m512i",3],["__mmask8",6]],["__m256i",3]]],[5,"_mm512_cvtepi64_epi16","","Convert packed 64-bit integers in a to packed 16-bit …",null,[[["__m512i",3]],["__m128i",3]]],[5,"_mm512_mask_cvtepi64_epi16","","Convert packed 64-bit integers in a to packed 16-bit …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_maskz_cvtepi64_epi16","","Convert packed 64-bit integers in a to packed 16-bit …",null,[[["__m512i",3],["__mmask8",6]],["__m128i",3]]],[5,"_mm512_cvtepi64_epi8","","Convert packed 64-bit integers in a to packed 8-bit …",null,[[["__m512i",3]],["__m128i",3]]],[5,"_mm512_mask_cvtepi64_epi8","","Convert packed 64-bit integers in a to packed 8-bit …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_maskz_cvtepi64_epi8","","Convert packed 64-bit integers in a to packed 8-bit …",null,[[["__m512i",3],["__mmask8",6]],["__m128i",3]]],[5,"_mm512_cvtsepi32_epi16","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m512i",3]],["__m256i",3]]],[5,"_mm512_mask_cvtsepi32_epi16","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m512i",3],["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvtsepi32_epi16","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m512i",3],["__mmask16",6]],["__m256i",3]]],[5,"_mm512_cvtsepi32_epi8","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m512i",3]],["__m128i",3]]],[5,"_mm512_mask_cvtsepi32_epi8","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m512i",3],["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm512_maskz_cvtsepi32_epi8","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m512i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm512_cvtsepi64_epi32","","Convert packed signed 64-bit integers in a to packed …",null,[[["__m512i",3]],["__m256i",3]]],[5,"_mm512_mask_cvtsepi64_epi32","","Convert packed signed 64-bit integers in a to packed …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvtsepi64_epi32","","Convert packed signed 64-bit integers in a to packed …",null,[[["__m512i",3],["__mmask8",6]],["__m256i",3]]],[5,"_mm512_cvtsepi64_epi16","","Convert packed signed 64-bit integers in a to packed …",null,[[["__m512i",3]],["__m128i",3]]],[5,"_mm512_mask_cvtsepi64_epi16","","Convert packed signed 64-bit integers in a to packed …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_maskz_cvtsepi64_epi16","","Convert packed signed 64-bit integers in a to packed …",null,[[["__m512i",3],["__mmask8",6]],["__m128i",3]]],[5,"_mm512_cvtsepi64_epi8","","Convert packed signed 64-bit integers in a to packed …",null,[[["__m512i",3]],["__m128i",3]]],[5,"_mm512_mask_cvtsepi64_epi8","","Convert packed signed 64-bit integers in a to packed …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_maskz_cvtsepi64_epi8","","Convert packed signed 64-bit integers in a to packed …",null,[[["__m512i",3],["__mmask8",6]],["__m128i",3]]],[5,"_mm512_cvtusepi32_epi16","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m512i",3]],["__m256i",3]]],[5,"_mm512_mask_cvtusepi32_epi16","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m512i",3],["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvtusepi32_epi16","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m512i",3],["__mmask16",6]],["__m256i",3]]],[5,"_mm512_cvtusepi32_epi8","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m512i",3]],["__m128i",3]]],[5,"_mm512_mask_cvtusepi32_epi8","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m512i",3],["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm512_maskz_cvtusepi32_epi8","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m512i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm512_cvtusepi64_epi32","","Convert packed unsigned 64-bit integers in a to packed …",null,[[["__m512i",3]],["__m256i",3]]],[5,"_mm512_mask_cvtusepi64_epi32","","Convert packed unsigned 64-bit integers in a to packed …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvtusepi64_epi32","","Convert packed unsigned 64-bit integers in a to packed …",null,[[["__m512i",3],["__mmask8",6]],["__m256i",3]]],[5,"_mm512_cvtusepi64_epi16","","Convert packed unsigned 64-bit integers in a to packed …",null,[[["__m512i",3]],["__m128i",3]]],[5,"_mm512_mask_cvtusepi64_epi16","","Convert packed unsigned 64-bit integers in a to packed …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_maskz_cvtusepi64_epi16","","Convert packed unsigned 64-bit integers in a to packed …",null,[[["__m512i",3],["__mmask8",6]],["__m128i",3]]],[5,"_mm512_cvtusepi64_epi8","","Convert packed unsigned 64-bit integers in a to packed …",null,[[["__m512i",3]],["__m128i",3]]],[5,"_mm512_mask_cvtusepi64_epi8","","Convert packed unsigned 64-bit integers in a to packed …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_maskz_cvtusepi64_epi8","","Convert packed unsigned 64-bit integers in a to packed …",null,[[["__m512i",3],["__mmask8",6]],["__m128i",3]]],[5,"_mm512_cvt_roundps_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512i",3]]],[5,"_mm512_mask_cvt_roundps_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512i",3],["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_cvt_roundps_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_cvt_roundps_epu32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512i",3]]],[5,"_mm512_mask_cvt_roundps_epu32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512i",3],["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_cvt_roundps_epu32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_cvt_roundps_pd","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m512d",3]]],[5,"_mm512_mask_cvt_roundps_pd","","Convert packed single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m256",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_cvt_roundps_pd","","Convert packed single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m256",3]],["__m512d",3]]],[5,"_mm512_cvt_roundpd_epi32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m256i",3]]],[5,"_mm512_mask_cvt_roundpd_epi32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3],["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvt_roundpd_epi32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m256i",3]]],[5,"_mm512_cvt_roundpd_epu32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m256i",3]]],[5,"_mm512_mask_cvt_roundpd_epu32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3],["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvt_roundpd_epu32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m256i",3]]],[5,"_mm512_cvt_roundpd_ps","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m256",3]]],[5,"_mm512_mask_cvt_roundpd_ps","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m256",3],["__mmask8",6],["__m512d",3]],["__m256",3]]],[5,"_mm512_maskz_cvt_roundpd_ps","","Convert packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m256",3]]],[5,"_mm512_cvt_roundepi32_ps","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m512i",3]],["__m512",3]]],[5,"_mm512_mask_cvt_roundepi32_ps","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_cvt_roundepi32_ps","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_cvt_roundepu32_ps","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m512i",3]],["__m512",3]]],[5,"_mm512_mask_cvt_roundepu32_ps","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_cvt_roundepu32_ps","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_cvt_roundps_ph","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m256i",3]]],[5,"_mm512_mask_cvt_roundps_ph","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvt_roundps_ph","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m256i",3]]],[5,"_mm512_cvtps_ph","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m256i",3]]],[5,"_mm512_mask_cvtps_ph","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvtps_ph","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m256i",3]]],[5,"_mm512_cvt_roundph_ps","","Convert packed half-precision (16-bit) floating-point …",null,[[["__m256i",3]],["__m512",3]]],[5,"_mm512_mask_cvt_roundph_ps","","Convert packed half-precision (16-bit) floating-point …",null,[[["__m512",3],["__mmask16",6],["__m256i",3]],["__m512",3]]],[5,"_mm512_maskz_cvt_roundph_ps","","Convert packed half-precision (16-bit) floating-point …",null,[[["__mmask16",6],["__m256i",3]],["__m512",3]]],[5,"_mm512_cvtph_ps","","Convert packed half-precision (16-bit) floating-point …",null,[[["__m256i",3]],["__m512",3]]],[5,"_mm512_mask_cvtph_ps","","Convert packed half-precision (16-bit) floating-point …",null,[[["__m512",3],["__mmask16",6],["__m256i",3]],["__m512",3]]],[5,"_mm512_maskz_cvtph_ps","","Convert packed half-precision (16-bit) floating-point …",null,[[["__mmask16",6],["__m256i",3]],["__m512",3]]],[5,"_mm512_cvtt_roundps_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512i",3]]],[5,"_mm512_mask_cvtt_roundps_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512i",3],["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_cvtt_roundps_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_cvtt_roundps_epu32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512i",3]]],[5,"_mm512_mask_cvtt_roundps_epu32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512i",3],["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_cvtt_roundps_epu32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_cvtt_roundpd_epi32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m256i",3]]],[5,"_mm512_mask_cvtt_roundpd_epi32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3],["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvtt_roundpd_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m256i",3]]],[5,"_mm512_cvtt_roundpd_epu32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m256i",3]]],[5,"_mm512_mask_cvtt_roundpd_epu32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3],["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_cvttps_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512i",3]]],[5,"_mm512_mask_cvttps_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512i",3],["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_cvttps_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_cvttps_epu32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512i",3]]],[5,"_mm512_mask_cvttps_epu32","","Convert packed double-precision (32-bit) floating-point …",null,[[["__m512i",3],["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_cvttps_epu32","","Convert packed double-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_cvtt_roundpd_epu32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m256i",3]]],[5,"_mm512_cvttpd_epi32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m256i",3]]],[5,"_mm512_mask_cvttpd_epi32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3],["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvttpd_epi32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m256i",3]]],[5,"_mm512_cvttpd_epu32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m256i",3]]],[5,"_mm512_mask_cvttpd_epu32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3],["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvttpd_epu32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m256i",3]]],[5,"_mm512_setzero_pd","","Returns vector of type <code>__m512d</code> with all elements set to …",null,[[],["__m512d",3]]],[5,"_mm512_setzero_ps","","Returns vector of type <code>__m512d</code> with all elements set to …",null,[[],["__m512",3]]],[5,"_mm512_setzero","","Return vector of type __m512 with all elements set to …",null,[[],["__m512",3]]],[5,"_mm512_setzero_si512","","Returns vector of type <code>__m512i</code> with all elements set to …",null,[[],["__m512i",3]]],[5,"_mm512_setzero_epi32","","Return vector of type __m512i with all elements set to …",null,[[],["__m512i",3]]],[5,"_mm512_setr_epi32","","Sets packed 32-bit integers in <code>dst</code> with the supplied …",null,[[],["__m512i",3]]],[5,"_mm512_set_epi8","","Set packed 8-bit integers in dst with the supplied values.",null,[[],["__m512i",3]]],[5,"_mm512_set_epi16","","Set packed 16-bit integers in dst with the supplied …",null,[[],["__m512i",3]]],[5,"_mm512_set4_epi32","","Set packed 32-bit integers in dst with the repeated 4 …",null,[[],["__m512i",3]]],[5,"_mm512_set4_ps","","Set packed single-precision (32-bit) floating-point …",null,[[],["__m512",3]]],[5,"_mm512_set4_pd","","Set packed double-precision (64-bit) floating-point …",null,[[],["__m512d",3]]],[5,"_mm512_setr4_epi32","","Set packed 32-bit integers in dst with the repeated 4 …",null,[[],["__m512i",3]]],[5,"_mm512_setr4_ps","","Set packed single-precision (32-bit) floating-point …",null,[[],["__m512",3]]],[5,"_mm512_setr4_pd","","Set packed double-precision (64-bit) floating-point …",null,[[],["__m512d",3]]],[5,"_mm512_set_epi64","","Set packed 64-bit integers in dst with the supplied …",null,[[],["__m512i",3]]],[5,"_mm512_setr_epi64","","Set packed 64-bit integers in dst with the supplied …",null,[[],["__m512i",3]]],[5,"_mm512_i32gather_pd","","Gather double-precision (64-bit) floating-point elements …",null,[[["__m256i",3]],["__m512d",3]]],[5,"_mm512_mask_i32gather_pd","","Gather double-precision (64-bit) floating-point elements …",null,[[["__m256i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_i64gather_pd","","Gather double-precision (64-bit) floating-point elements …",null,[[["__m512i",3]],["__m512d",3]]],[5,"_mm512_mask_i64gather_pd","","Gather double-precision (64-bit) floating-point elements …",null,[[["__m512i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_i64gather_ps","","Gather single-precision (32-bit) floating-point elements …",null,[[["__m512i",3]],["__m256",3]]],[5,"_mm512_mask_i64gather_ps","","Gather single-precision (32-bit) floating-point elements …",null,[[["__m512i",3],["__m256",3],["__mmask8",6]],["__m256",3]]],[5,"_mm512_i32gather_ps","","Gather single-precision (32-bit) floating-point elements …",null,[[["__m512i",3]],["__m512",3]]],[5,"_mm512_mask_i32gather_ps","","Gather single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_i32gather_epi32","","Gather 32-bit integers from memory using 32-bit indices. …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_i32gather_epi32","","Gather 32-bit integers from memory using 32-bit indices. …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_i32gather_epi64","","Gather 64-bit integers from memory using 32-bit indices. …",null,[[["__m256i",3]],["__m512i",3]]],[5,"_mm512_mask_i32gather_epi64","","Gather 64-bit integers from memory using 32-bit indices. …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_i64gather_epi64","","Gather 64-bit integers from memory using 64-bit indices. …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_i64gather_epi64","","Gather 64-bit integers from memory using 64-bit indices. …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_i64gather_epi32","","Gather 32-bit integers from memory using 64-bit indices. …",null,[[["__m512i",3]],["__m256i",3]]],[5,"_mm512_mask_i64gather_epi32","","Gather 32-bit integers from memory using 64-bit indices. …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_i32scatter_pd","","Scatter double-precision (64-bit) floating-point elements …",null,[[["__m512d",3],["__m256i",3]]]],[5,"_mm512_mask_i32scatter_pd","","Scatter double-precision (64-bit) floating-point elements …",null,[[["__m512d",3],["__mmask8",6],["__m256i",3]]]],[5,"_mm512_i64scatter_pd","","Scatter double-precision (64-bit) floating-point elements …",null,[[["__m512i",3],["__m512d",3]]]],[5,"_mm512_mask_i64scatter_pd","","Scatter double-precision (64-bit) floating-point elements …",null,[[["__m512i",3],["__mmask8",6],["__m512d",3]]]],[5,"_mm512_i32scatter_ps","","Scatter single-precision (32-bit) floating-point elements …",null,[[["__m512i",3],["__m512",3]]]],[5,"_mm512_mask_i32scatter_ps","","Scatter single-precision (32-bit) floating-point elements …",null,[[["__m512i",3],["__m512",3],["__mmask16",6]]]],[5,"_mm512_i64scatter_ps","","Scatter single-precision (32-bit) floating-point elements …",null,[[["__m512i",3],["__m256",3]]]],[5,"_mm512_mask_i64scatter_ps","","Scatter single-precision (32-bit) floating-point elements …",null,[[["__m512i",3],["__mmask8",6],["__m256",3]]]],[5,"_mm512_i32scatter_epi64","","Scatter 64-bit integers from a into memory using 32-bit …",null,[[["__m512i",3],["__m256i",3]]]],[5,"_mm512_mask_i32scatter_epi64","","Scatter 64-bit integers from a into memory using 32-bit …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]]]],[5,"_mm512_i64scatter_epi64","","Scatter 64-bit integers from a into memory using 64-bit …",null,[[["__m512i",3]]]],[5,"_mm512_mask_i64scatter_epi64","","Scatter 64-bit integers from a into memory using 64-bit …",null,[[["__m512i",3],["__mmask8",6]]]],[5,"_mm512_i32scatter_epi32","","Scatter 32-bit integers from a into memory using 32-bit …",null,[[["__m512i",3]]]],[5,"_mm512_mask_i32scatter_epi32","","Scatter 32-bit integers from a into memory using 32-bit …",null,[[["__m512i",3],["__mmask16",6]]]],[5,"_mm512_i64scatter_epi32","","Scatter 32-bit integers from a into memory using 64-bit …",null,[[["__m512i",3],["__m256i",3]]]],[5,"_mm512_mask_i64scatter_epi32","","Scatter 32-bit integers from a into memory using 64-bit …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]]]],[5,"_mm512_mask_compress_epi32","","Contiguously store the active 32-bit integers in a (those …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_compress_epi32","","Contiguously store the active 32-bit integers in a (those …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_mask_compress_epi64","","Contiguously store the active 64-bit integers in a (those …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_compress_epi64","","Contiguously store the active 64-bit integers in a (those …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_mask_compress_ps","","Contiguously store the active single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_compress_ps","","Contiguously store the active single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask_compress_pd","","Contiguously store the active double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_compress_pd","","Contiguously store the active double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_expand_epi32","","Load contiguous active 32-bit integers from a (those with …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_expand_epi32","","Load contiguous active 32-bit integers from a (those with …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_mask_expand_epi64","","Load contiguous active 64-bit integers from a (those with …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_expand_epi64","","Load contiguous active 64-bit integers from a (those with …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_mask_expand_ps","","Load contiguous active single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_expand_ps","","Load contiguous active single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask_expand_pd","","Load contiguous active double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_expand_pd","","Load contiguous active double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_rol_epi32","","Rotate the bits in each packed 32-bit integer in a to the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_rol_epi32","","Rotate the bits in each packed 32-bit integer in a to the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_rol_epi32","","Rotate the bits in each packed 32-bit integer in a to the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_ror_epi32","","Rotate the bits in each packed 32-bit integer in a to the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_ror_epi32","","Rotate the bits in each packed 32-bit integer in a to the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_ror_epi32","","Rotate the bits in each packed 32-bit integer in a to the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_rol_epi64","","Rotate the bits in each packed 64-bit integer in a to the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_rol_epi64","","Rotate the bits in each packed 64-bit integer in a to the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_rol_epi64","","Rotate the bits in each packed 64-bit integer in a to the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_ror_epi64","","Rotate the bits in each packed 64-bit integer in a to the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_ror_epi64","","Rotate the bits in each packed 64-bit integer in a to the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_ror_epi64","","Rotate the bits in each packed 64-bit integer in a to the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_slli_epi32","","Shift packed 32-bit integers in a left by imm8 while …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_slli_epi32","","Shift packed 32-bit integers in a left by imm8 while …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_slli_epi32","","Shift packed 32-bit integers in a left by imm8 while …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_srli_epi32","","Shift packed 32-bit integers in a right by imm8 while …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_srli_epi32","","Shift packed 32-bit integers in a right by imm8 while …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_srli_epi32","","Shift packed 32-bit integers in a right by imm8 while …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_slli_epi64","","Shift packed 64-bit integers in a left by imm8 while …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_slli_epi64","","Shift packed 64-bit integers in a left by imm8 while …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_slli_epi64","","Shift packed 64-bit integers in a left by imm8 while …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_srli_epi64","","Shift packed 64-bit integers in a right by imm8 while …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_srli_epi64","","Shift packed 64-bit integers in a right by imm8 while …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_srli_epi64","","Shift packed 64-bit integers in a right by imm8 while …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_sll_epi32","","Shift packed 32-bit integers in a left by count while …",null,[[["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_sll_epi32","","Shift packed 32-bit integers in a left by count while …",null,[[["__m512i",3],["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_sll_epi32","","Shift packed 32-bit integers in a left by count while …",null,[[["__m512i",3],["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_srl_epi32","","Shift packed 32-bit integers in a right by count while …",null,[[["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_srl_epi32","","Shift packed 32-bit integers in a right by count while …",null,[[["__m512i",3],["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_srl_epi32","","Shift packed 32-bit integers in a right by count while …",null,[[["__m512i",3],["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_sll_epi64","","Shift packed 64-bit integers in a left by count while …",null,[[["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_sll_epi64","","Shift packed 64-bit integers in a left by count while …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_sll_epi64","","Shift packed 64-bit integers in a left by count while …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_srl_epi64","","Shift packed 64-bit integers in a right by count while …",null,[[["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_srl_epi64","","Shift packed 64-bit integers in a right by count while …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_srl_epi64","","Shift packed 64-bit integers in a left by count while …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_sra_epi32","","Shift packed 32-bit integers in a right by count while …",null,[[["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_sra_epi32","","Shift packed 32-bit integers in a right by count while …",null,[[["__m512i",3],["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_sra_epi32","","Shift packed 32-bit integers in a right by count while …",null,[[["__m512i",3],["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_sra_epi64","","Shift packed 64-bit integers in a right by count while …",null,[[["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_sra_epi64","","Shift packed 64-bit integers in a right by count while …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_sra_epi64","","Shift packed 64-bit integers in a right by count while …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_srai_epi32","","Shift packed 32-bit integers in a right by imm8 while …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_srai_epi32","","Shift packed 32-bit integers in a right by imm8 while …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_srai_epi32","","Shift packed 32-bit integers in a right by imm8 while …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_srai_epi64","","Shift packed 64-bit integers in a right by imm8 while …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_srai_epi64","","Shift packed 64-bit integers in a right by imm8 while …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_srai_epi64","","Shift packed 64-bit integers in a right by imm8 while …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_srav_epi32","","Shift packed 32-bit integers in a right by the amount …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_srav_epi32","","Shift packed 32-bit integers in a right by the amount …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_srav_epi32","","Shift packed 32-bit integers in a right by the amount …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_srav_epi64","","Shift packed 64-bit integers in a right by the amount …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_srav_epi64","","Shift packed 64-bit integers in a right by the amount …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_srav_epi64","","Shift packed 64-bit integers in a right by the amount …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_rolv_epi32","","Rotate the bits in each packed 32-bit integer in a to the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_rolv_epi32","","Rotate the bits in each packed 32-bit integer in a to the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_rolv_epi32","","Rotate the bits in each packed 32-bit integer in a to the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_rorv_epi32","","Rotate the bits in each packed 32-bit integer in a to the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_rorv_epi32","","Rotate the bits in each packed 32-bit integer in a to the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_rorv_epi32","","Rotate the bits in each packed 32-bit integer in a to the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_rolv_epi64","","Rotate the bits in each packed 64-bit integer in a to the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_rolv_epi64","","Rotate the bits in each packed 64-bit integer in a to the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_rolv_epi64","","Rotate the bits in each packed 64-bit integer in a to the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_rorv_epi64","","Rotate the bits in each packed 64-bit integer in a to the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_rorv_epi64","","Rotate the bits in each packed 64-bit integer in a to the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_rorv_epi64","","Rotate the bits in each packed 64-bit integer in a to the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_sllv_epi32","","Shift packed 32-bit integers in a left by the amount …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_sllv_epi32","","Shift packed 32-bit integers in a left by the amount …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_sllv_epi32","","Shift packed 32-bit integers in a left by the amount …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_srlv_epi32","","Shift packed 32-bit integers in a right by the amount …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_srlv_epi32","","Shift packed 32-bit integers in a right by the amount …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_srlv_epi32","","Shift packed 32-bit integers in a right by the amount …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_sllv_epi64","","Shift packed 64-bit integers in a left by the amount …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_sllv_epi64","","Shift packed 64-bit integers in a left by the amount …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_sllv_epi64","","Shift packed 64-bit integers in a left by the amount …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_srlv_epi64","","Shift packed 64-bit integers in a right by the amount …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_srlv_epi64","","Shift packed 64-bit integers in a right by the amount …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_srlv_epi64","","Shift packed 64-bit integers in a right by the amount …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_permute_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_permute_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_permute_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_permute_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_permute_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_permute_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_permutex_epi64","","Shuffle 64-bit integers in a within 256-bit lanes using …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_permutex_epi64","","Shuffle 64-bit integers in a within 256-bit lanes using …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_permutex_epi64","","Shuffle 64-bit integers in a within 256-bit lanes using …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_permutex_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_permutex_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_permutex_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_permutevar_epi32","","Shuffle 32-bit integers in a across lanes using the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_permutevar_epi32","","Shuffle 32-bit integers in a across lanes using the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_permutevar_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__m512i",3]],["__m512",3]]],[5,"_mm512_mask_permutevar_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_permutevar_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_permutevar_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__m512i",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_permutevar_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__m512i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_permutevar_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__m512i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_permutexvar_epi32","","Shuffle 32-bit integers in a across lanes using the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_permutexvar_epi32","","Shuffle 32-bit integers in a across lanes using the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_permutexvar_epi32","","Shuffle 32-bit integers in a across lanes using the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_permutexvar_epi64","","Shuffle 64-bit integers in a across lanes using the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_permutexvar_epi64","","Shuffle 64-bit integers in a across lanes using the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_permutexvar_epi64","","Shuffle 64-bit integers in a across lanes using the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_permutexvar_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512i",3],["__m512",3]],["__m512",3]]],[5,"_mm512_mask_permutexvar_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_permutexvar_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512i",3],["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_permutexvar_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__m512i",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_permutexvar_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__mmask8",6],["__m512i",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_permutexvar_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__m512i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_permutex2var_epi32","","Shuffle 32-bit integers in a and b across lanes using the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_permutex2var_epi32","","Shuffle 32-bit integers in a and b across lanes using the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_permutex2var_epi32","","Shuffle 32-bit integers in a and b across lanes using the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_mask2_permutex2var_epi32","","Shuffle 32-bit integers in a and b across lanes using the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_permutex2var_epi64","","Shuffle 64-bit integers in a and b across lanes using the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_permutex2var_epi64","","Shuffle 64-bit integers in a and b across lanes using the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_permutex2var_epi64","","Shuffle 64-bit integers in a and b across lanes using the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_mask2_permutex2var_epi64","","Shuffle 64-bit integers in a and b across lanes using the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_permutex2var_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__m512i",3]],["__m512",3]]],[5,"_mm512_mask_permutex2var_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_permutex2var_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask2_permutex2var_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_permutex2var_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__m512i",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_permutex2var_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__mmask8",6],["__m512i",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_permutex2var_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__mmask8",6],["__m512i",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask2_permutex2var_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__mmask8",6],["__m512i",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_shuffle_epi32","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512i",3],["_mm_perm_enum",6]],["__m512i",3]]],[5,"_mm512_mask_shuffle_epi32","","Shuffle 32-bit integers in a within 128-bit lanes using …",null,[[["__m512i",3],["__mmask16",6],["_mm_perm_enum",6]],["__m512i",3]]],[5,"_mm512_maskz_shuffle_epi32","","Shuffle 32-bit integers in a within 128-bit lanes using …",null,[[["__m512i",3],["__mmask16",6],["_mm_perm_enum",6]],["__m512i",3]]],[5,"_mm512_shuffle_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_shuffle_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_shuffle_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_shuffle_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_shuffle_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_shuffle_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_shuffle_i32x4","","Shuffle 128-bits (composed of 4 32-bit integers) selected …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_shuffle_i32x4","","Shuffle 128-bits (composed of 4 32-bit integers) selected …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_shuffle_i32x4","","Shuffle 128-bits (composed of 4 32-bit integers) selected …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_shuffle_i64x2","","Shuffle 128-bits (composed of 2 64-bit integers) selected …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_shuffle_i64x2","","Shuffle 128-bits (composed of 2 64-bit integers) selected …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_shuffle_i64x2","","Shuffle 128-bits (composed of 2 64-bit integers) selected …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_shuffle_f32x4","","Shuffle 128-bits (composed of 4 single-precision (32-bit) …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_shuffle_f32x4","","Shuffle 128-bits (composed of 4 single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_shuffle_f32x4","","Shuffle 128-bits (composed of 4 single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_shuffle_f64x2","","Shuffle 128-bits (composed of 2 double-precision (64-bit) …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_shuffle_f64x2","","Shuffle 128-bits (composed of 2 double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_shuffle_f64x2","","Shuffle 128-bits (composed of 2 double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_extractf32x4_ps","","Extract 128 bits (composed of 4 packed single-precision …",null,[[["__m512",3]],["__m128",3]]],[5,"_mm512_mask_extractf32x4_ps","","Extract 128 bits (composed of 4 packed single-precision …",null,[[["__m512",3],["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm512_maskz_extractf32x4_ps","","Extract 128 bits (composed of 4 packed single-precision …",null,[[["__m512",3],["__mmask8",6]],["__m128",3]]],[5,"_mm512_extracti64x4_epi64","","Extract 256 bits (composed of 4 packed 64-bit integers) …",null,[[["__m512i",3]],["__m256i",3]]],[5,"_mm512_mask_extracti64x4_epi64","","Extract 256 bits (composed of 4 packed 64-bit integers) …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_extracti64x4_epi64","","Extract 256 bits (composed of 4 packed 64-bit integers) …",null,[[["__m512i",3],["__mmask8",6]],["__m256i",3]]],[5,"_mm512_extractf64x4_pd","","Extract 256 bits (composed of 4 packed double-precision …",null,[[["__m512d",3]],["__m256d",3]]],[5,"_mm512_mask_extractf64x4_pd","","Extract 256 bits (composed of 4 packed double-precision …",null,[[["__m512d",3],["__mmask8",6],["__m256d",3]],["__m256d",3]]],[5,"_mm512_maskz_extractf64x4_pd","","Extract 256 bits (composed of 4 packed double-precision …",null,[[["__mmask8",6],["__m512d",3]],["__m256d",3]]],[5,"_mm512_extracti32x4_epi32","","Extract 128 bits (composed of 4 packed 32-bit integers) …",null,[[["__m512i",3]],["__m128i",3]]],[5,"_mm512_mask_extracti32x4_epi32","","Extract 128 bits (composed of 4 packed 32-bit integers) …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_maskz_extracti32x4_epi32","","Extract 128 bits (composed of 4 packed 32-bit integers) …",null,[[["__m512i",3],["__mmask8",6]],["__m128i",3]]],[5,"_mm512_moveldup_ps","","Duplicate even-indexed single-precision (32-bit) …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_moveldup_ps","","Duplicate even-indexed single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_moveldup_ps","","Duplicate even-indexed single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_movehdup_ps","","Duplicate odd-indexed single-precision (32-bit) …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_movehdup_ps","","Duplicate odd-indexed single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_movehdup_ps","","Duplicate odd-indexed single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_movedup_pd","","Duplicate even-indexed double-precision (64-bit) …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_movedup_pd","","Duplicate even-indexed double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_movedup_pd","","Duplicate even-indexed double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_inserti32x4","","Copy a to dst, then insert 128 bits (composed of 4 packed …",null,[[["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_inserti32x4","","Copy a to tmp, then insert 128 bits (composed of 4 packed …",null,[[["__m512i",3],["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_inserti32x4","","Copy a to tmp, then insert 128 bits (composed of 4 packed …",null,[[["__m512i",3],["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_inserti64x4","","Copy a to dst, then insert 256 bits (composed of 4 packed …",null,[[["__m512i",3],["__m256i",3]],["__m512i",3]]],[5,"_mm512_mask_inserti64x4","","Copy a to tmp, then insert 256 bits (composed of 4 packed …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_maskz_inserti64x4","","Copy a to tmp, then insert 256 bits (composed of 4 packed …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_insertf32x4","","Copy a to dst, then insert 128 bits (composed of 4 packed …",null,[[["__m512",3],["__m128",3]],["__m512",3]]],[5,"_mm512_mask_insertf32x4","","Copy a to tmp, then insert 128 bits (composed of 4 packed …",null,[[["__m512",3],["__m128",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_insertf32x4","","Copy a to tmp, then insert 128 bits (composed of 4 packed …",null,[[["__m512",3],["__m128",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_insertf64x4","","Copy a to dst, then insert 256 bits (composed of 4 packed …",null,[[["__m256d",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_insertf64x4","","Copy a to tmp, then insert 256 bits (composed of 4 packed …",null,[[["__m256d",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_insertf64x4","","Copy a to tmp, then insert 256 bits (composed of 4 packed …",null,[[["__m256d",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_unpackhi_epi32","","Unpack and interleave 32-bit integers from the high half …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_unpackhi_epi32","","Unpack and interleave 32-bit integers from the high half …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_unpackhi_epi32","","Unpack and interleave 32-bit integers from the high half …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_unpackhi_epi64","","Unpack and interleave 64-bit integers from the high half …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_unpackhi_epi64","","Unpack and interleave 64-bit integers from the high half …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_unpackhi_epi64","","Unpack and interleave 64-bit integers from the high half …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_unpackhi_ps","","Unpack and interleave single-precision (32-bit) …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_unpackhi_ps","","Unpack and interleave single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_unpackhi_ps","","Unpack and interleave single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_unpackhi_pd","","Unpack and interleave double-precision (64-bit) …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_unpackhi_pd","","Unpack and interleave double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_unpackhi_pd","","Unpack and interleave double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_unpacklo_epi32","","Unpack and interleave 32-bit integers from the low half …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_unpacklo_epi32","","Unpack and interleave 32-bit integers from the low half …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_unpacklo_epi32","","Unpack and interleave 32-bit integers from the low half …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_unpacklo_epi64","","Unpack and interleave 64-bit integers from the low half …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_unpacklo_epi64","","Unpack and interleave 64-bit integers from the low half …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_unpacklo_epi64","","Unpack and interleave 64-bit integers from the low half …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_unpacklo_ps","","Unpack and interleave single-precision (32-bit) …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_unpacklo_ps","","Unpack and interleave single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_unpacklo_ps","","Unpack and interleave single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_unpacklo_pd","","Unpack and interleave double-precision (64-bit) …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_unpacklo_pd","","Unpack and interleave double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_unpacklo_pd","","Unpack and interleave double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_castps128_ps512","","Cast vector of type __m128 to type __m512; the upper 384 …",null,[[["__m128",3]],["__m512",3]]],[5,"_mm512_castps256_ps512","","Cast vector of type __m256 to type __m512; the upper 256 …",null,[[["__m256",3]],["__m512",3]]],[5,"_mm512_zextps128_ps512","","Cast vector of type __m128 to type __m512; the upper 384 …",null,[[["__m128",3]],["__m512",3]]],[5,"_mm512_zextps256_ps512","","Cast vector of type __m256 to type __m512; the upper 256 …",null,[[["__m256",3]],["__m512",3]]],[5,"_mm512_castps512_ps128","","Cast vector of type __m512 to type __m128. This intrinsic …",null,[[["__m512",3]],["__m128",3]]],[5,"_mm512_castps512_ps256","","Cast vector of type __m512 to type __m256. This intrinsic …",null,[[["__m512",3]],["__m256",3]]],[5,"_mm512_castps_pd","","Cast vector of type __m512 to type __m512d. This …",null,[[["__m512",3]],["__m512d",3]]],[5,"_mm512_castps_si512","","Cast vector of type __m512 to type __m512i. This …",null,[[["__m512",3]],["__m512i",3]]],[5,"_mm512_castpd128_pd512","","Cast vector of type __m128d to type __m512d; the upper …",null,[[["__m128d",3]],["__m512d",3]]],[5,"_mm512_castpd256_pd512","","Cast vector of type __m256d to type __m512d; the upper …",null,[[["__m256d",3]],["__m512d",3]]],[5,"_mm512_zextpd128_pd512","","Cast vector of type __m128d to type __m512d; the upper …",null,[[["__m128d",3]],["__m512d",3]]],[5,"_mm512_zextpd256_pd512","","Cast vector of type __m256d to type __m512d; the upper …",null,[[["__m256d",3]],["__m512d",3]]],[5,"_mm512_castpd512_pd128","","Cast vector of type __m512d to type __m128d. This …",null,[[["__m512d",3]],["__m128d",3]]],[5,"_mm512_castpd512_pd256","","Cast vector of type __m512d to type __m256d. This …",null,[[["__m512d",3]],["__m256d",3]]],[5,"_mm512_castpd_ps","","Cast vector of type __m512d to type __m512. This …",null,[[["__m512d",3]],["__m512",3]]],[5,"_mm512_castpd_si512","","Cast vector of type __m512d to type __m512i. This …",null,[[["__m512d",3]],["__m512i",3]]],[5,"_mm512_castsi128_si512","","Cast vector of type __m128i to type __m512i; the upper …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_castsi256_si512","","Cast vector of type __m256i to type __m512i; the upper …",null,[[["__m256i",3]],["__m512i",3]]],[5,"_mm512_zextsi128_si512","","Cast vector of type __m128i to type __m512i; the upper …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_zextsi256_si512","","Cast vector of type __m256i to type __m512i; the upper …",null,[[["__m256i",3]],["__m512i",3]]],[5,"_mm512_castsi512_si128","","Cast vector of type __m512i to type __m128i. This …",null,[[["__m512i",3]],["__m128i",3]]],[5,"_mm512_castsi512_si256","","Cast vector of type __m512i to type __m256i. This …",null,[[["__m512i",3]],["__m256i",3]]],[5,"_mm512_castsi512_ps","","Cast vector of type __m512i to type __m512. This …",null,[[["__m512i",3]],["__m512",3]]],[5,"_mm512_castsi512_pd","","Cast vector of type __m512i to type __m512d. This …",null,[[["__m512i",3]],["__m512d",3]]],[5,"_mm512_broadcastd_epi32","","Broadcast the low packed 32-bit integer from a to all …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_broadcastd_epi32","","Broadcast the low packed 32-bit integer from a to all …",null,[[["__m512i",3],["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_broadcastd_epi32","","Broadcast the low packed 32-bit integer from a to all …",null,[[["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_broadcastq_epi64","","Broadcast the low packed 64-bit integer from a to all …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_broadcastq_epi64","","Broadcast the low packed 64-bit integer from a to all …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_broadcastq_epi64","","Broadcast the low packed 64-bit integer from a to all …",null,[[["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_broadcastss_ps","","Broadcast the low single-precision (32-bit) …",null,[[["__m128",3]],["__m512",3]]],[5,"_mm512_mask_broadcastss_ps","","Broadcast the low single-precision (32-bit) …",null,[[["__m512",3],["__m128",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_broadcastss_ps","","Broadcast the low single-precision (32-bit) …",null,[[["__m128",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_broadcastsd_pd","","Broadcast the low double-precision (64-bit) …",null,[[["__m128d",3]],["__m512d",3]]],[5,"_mm512_mask_broadcastsd_pd","","Broadcast the low double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_broadcastsd_pd","","Broadcast the low double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m512d",3]]],[5,"_mm512_broadcast_i32x4","","Broadcast the 4 packed 32-bit integers from a to all …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_broadcast_i32x4","","Broadcast the 4 packed 32-bit integers from a to all …",null,[[["__m512i",3],["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_broadcast_i32x4","","Broadcast the 4 packed 32-bit integers from a to all …",null,[[["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_broadcast_i64x4","","Broadcast the 4 packed 64-bit integers from a to all …",null,[[["__m256i",3]],["__m512i",3]]],[5,"_mm512_mask_broadcast_i64x4","","Broadcast the 4 packed 64-bit integers from a to all …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_maskz_broadcast_i64x4","","Broadcast the 4 packed 64-bit integers from a to all …",null,[[["__mmask8",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_broadcast_f32x4","","Broadcast the 4 packed single-precision (32-bit) …",null,[[["__m128",3]],["__m512",3]]],[5,"_mm512_mask_broadcast_f32x4","","Broadcast the 4 packed single-precision (32-bit) …",null,[[["__m512",3],["__m128",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_broadcast_f32x4","","Broadcast the 4 packed single-precision (32-bit) …",null,[[["__m128",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_broadcast_f64x4","","Broadcast the 4 packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m512d",3]]],[5,"_mm512_mask_broadcast_f64x4","","Broadcast the 4 packed double-precision (64-bit) …",null,[[["__m256d",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_broadcast_f64x4","","Broadcast the 4 packed double-precision (64-bit) …",null,[[["__mmask8",6],["__m256d",3]],["__m512d",3]]],[5,"_mm512_mask_blend_epi32","","Blend packed 32-bit integers from a and b using control …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_mask_blend_epi64","","Blend packed 64-bit integers from a and b using control …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_mask_blend_ps","","Blend packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask_blend_pd","","Blend packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_alignr_epi32","","Concatenate a and b into a 128-byte immediate result, …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_alignr_epi32","","Concatenate a and b into a 128-byte immediate result, …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_alignr_epi32","","Concatenate a and b into a 128-byte immediate result, …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_alignr_epi64","","Concatenate a and b into a 128-byte immediate result, …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_alignr_epi64","","Concatenate a and b into a 128-byte immediate result, …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_alignr_epi64","","Concatenate a and b into a 128-byte immediate result, …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_and_epi32","","Compute the bitwise AND of packed 32-bit integers in a …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_and_epi32","","Performs element-by-element bitwise AND between packed …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_and_epi32","","Compute the bitwise AND of packed 32-bit integers in a …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_and_epi64","","Compute the bitwise AND of 512 bits (composed of packed …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_and_epi64","","Compute the bitwise AND of packed 64-bit integers in a …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_and_epi64","","Compute the bitwise AND of packed 32-bit integers in a …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_and_si512","","Compute the bitwise AND of 512 bits (representing integer …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_or_epi32","","Compute the bitwise OR of packed 32-bit integers in a and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_or_epi32","","Compute the bitwise OR of packed 32-bit integers in a and …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_or_epi32","","Compute the bitwise OR of packed 32-bit integers in a and …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_or_epi64","","Compute the bitwise OR of packed 64-bit integers in a and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_or_epi64","","Compute the bitwise OR of packed 64-bit integers in a and …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_or_epi64","","Compute the bitwise OR of packed 64-bit integers in a and …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_or_si512","","Compute the bitwise OR of 512 bits (representing integer …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_xor_epi32","","Compute the bitwise XOR of packed 32-bit integers in a …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_xor_epi32","","Compute the bitwise XOR of packed 32-bit integers in a …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_xor_epi32","","Compute the bitwise XOR of packed 32-bit integers in a …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_xor_epi64","","Compute the bitwise XOR of packed 64-bit integers in a …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_xor_epi64","","Compute the bitwise XOR of packed 64-bit integers in a …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_xor_epi64","","Compute the bitwise XOR of packed 64-bit integers in a …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_xor_si512","","Compute the bitwise XOR of 512 bits (representing integer …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_andnot_epi32","","Compute the bitwise NOT of packed 32-bit integers in a …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_andnot_epi32","","Compute the bitwise NOT of packed 32-bit integers in a …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_andnot_epi32","","Compute the bitwise NOT of packed 32-bit integers in a …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_andnot_epi64","","Compute the bitwise NOT of 512 bits (composed of packed …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_andnot_epi64","","Compute the bitwise NOT of packed 64-bit integers in a …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_andnot_epi64","","Compute the bitwise NOT of packed 64-bit integers in a …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_andnot_si512","","Compute the bitwise NOT of 512 bits (representing integer …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_kand_mask16","","Compute the bitwise AND of 16-bit masks a and b, and …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_kand","","Compute the bitwise AND of 16-bit masks a and b, and …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_kor_mask16","","Compute the bitwise OR of 16-bit masks a and b, and store …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_kor","","Compute the bitwise OR of 16-bit masks a and b, and store …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_kxor_mask16","","Compute the bitwise XOR of 16-bit masks a and b, and …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_kxor","","Compute the bitwise XOR of 16-bit masks a and b, and …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_knot_mask16","","Compute the bitwise NOT of 16-bit mask a, and store the …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_knot","","Compute the bitwise NOT of 16-bit mask a, and store the …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_kandn_mask16","","Compute the bitwise NOT of 16-bit masks a and then AND …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_kandn","","Compute the bitwise NOT of 16-bit masks a and then AND …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_kxnor_mask16","","Compute the bitwise XNOR of 16-bit masks a and b, and …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_kxnor","","Compute the bitwise XNOR of 16-bit masks a and b, and …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_kmov","","Copy 16-bit mask a to k.",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_int2mask","","Converts integer mask into bitmask, storing the result in …",null,[[],["__mmask16",6]]],[5,"_mm512_mask2int","","Converts bit mask k1 into an integer value, storing the …",null,[[["__mmask16",6]]]],[5,"_mm512_kunpackb","","Unpack and interleave 8 bits from masks a and b, and …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_kortestc","","Performs bitwise OR between k1 and k2, storing the result …",null,[[["__mmask16",6]]]],[5,"_mm512_test_epi32_mask","","Compute the bitwise AND of packed 32-bit integers in a …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_test_epi32_mask","","Compute the bitwise AND of packed 32-bit integers in a …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_test_epi64_mask","","Compute the bitwise AND of packed 64-bit integers in a …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_test_epi64_mask","","Compute the bitwise AND of packed 64-bit integers in a …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_testn_epi32_mask","","Compute the bitwise NAND of packed 32-bit integers in a …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_testn_epi32_mask","","Compute the bitwise NAND of packed 32-bit integers in a …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_testn_epi64_mask","","Compute the bitwise NAND of packed 64-bit integers in a …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_testn_epi64_mask","","Compute the bitwise NAND of packed 64-bit integers in a …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_stream_ps","","Store 512-bits (composed of 16 packed single-precision …",null,[[["__m512",3]]]],[5,"_mm512_stream_pd","","Store 512-bits (composed of 8 packed double-precision …",null,[[["__m512d",3]]]],[5,"_mm512_stream_si512","","Store 512-bits of integer data from a into memory using a …",null,[[["__m512i",3]]]],[5,"_mm512_set_ps","","Sets packed 32-bit integers in <code>dst</code> with the supplied …",null,[[],["__m512",3]]],[5,"_mm512_setr_ps","","Sets packed 32-bit integers in <code>dst</code> with the supplied …",null,[[],["__m512",3]]],[5,"_mm512_set1_pd","","Broadcast 64-bit float <code>a</code> to all elements of <code>dst</code>.",null,[[],["__m512d",3]]],[5,"_mm512_set1_ps","","Broadcast 32-bit float <code>a</code> to all elements of <code>dst</code>.",null,[[],["__m512",3]]],[5,"_mm512_set_epi32","","Sets packed 32-bit integers in <code>dst</code> with the supplied …",null,[[],["__m512i",3]]],[5,"_mm512_set1_epi8","","Broadcast 8-bit integer a to all elements of dst.",null,[[],["__m512i",3]]],[5,"_mm512_set1_epi16","","Broadcast the low packed 16-bit integer from a to all all …",null,[[],["__m512i",3]]],[5,"_mm512_set1_epi32","","Broadcast 32-bit integer <code>a</code> to all elements of <code>dst</code>.",null,[[],["__m512i",3]]],[5,"_mm512_mask_set1_epi32","","Broadcast 32-bit integer a to all elements of dst using …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_set1_epi32","","Broadcast 32-bit integer a to all elements of dst using …",null,[[["__mmask16",6]],["__m512i",3]]],[5,"_mm512_set1_epi64","","Broadcast 64-bit integer <code>a</code> to all elements of <code>dst</code>.",null,[[],["__m512i",3]]],[5,"_mm512_mask_set1_epi64","","Broadcast 64-bit integer a to all elements of dst using …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_set1_epi64","","Broadcast 64-bit integer a to all elements of dst using …",null,[[["__mmask8",6]],["__m512i",3]]],[5,"_mm512_set4_epi64","","Set packed 64-bit integers in dst with the repeated 4 …",null,[[],["__m512i",3]]],[5,"_mm512_setr4_epi64","","Set packed 64-bit integers in dst with the repeated 4 …",null,[[],["__m512i",3]]],[5,"_mm512_cmplt_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__mmask16",6]]],[5,"_mm512_mask_cmplt_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpnlt_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpnlt_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmple_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__mmask16",6]]],[5,"_mm512_mask_cmple_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpnle_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpnle_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpeq_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpeq_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpneq_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpneq_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmp_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__mmask16",6]]],[5,"_mm512_mask_cmp_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmp_round_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__mmask16",6]]],[5,"_mm512_mask_cmp_round_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpord_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpord_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpunord_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpunord_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmplt_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__mmask8",6]]],[5,"_mm512_mask_cmplt_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__mmask8",6]]],[5,"_mm512_cmpnlt_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpnlt_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__mmask8",6]]],[5,"_mm512_cmple_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__mmask8",6]]],[5,"_mm512_mask_cmple_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__mmask8",6]]],[5,"_mm512_cmpnle_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpnle_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__mmask8",6]]],[5,"_mm512_cmpeq_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpeq_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__mmask8",6]]],[5,"_mm512_cmpneq_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpneq_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__mmask8",6]]],[5,"_mm512_cmp_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__mmask8",6]]],[5,"_mm512_mask_cmp_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__mmask8",6]]],[5,"_mm512_cmp_round_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__mmask8",6]]],[5,"_mm512_mask_cmp_round_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__mmask8",6]]],[5,"_mm512_cmpord_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpord_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__mmask8",6]]],[5,"_mm512_cmpunord_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpunord_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__mmask8",6]]],[5,"_mm_cmp_ss_mask","","Compare the lower single-precision (32-bit) …",null,[[["__m128",3]],["__mmask8",6]]],[5,"_mm_mask_cmp_ss_mask","","Compare the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__mmask8",6]]],[5,"_mm_cmp_round_ss_mask","","Compare the lower single-precision (32-bit) …",null,[[["__m128",3]],["__mmask8",6]]],[5,"_mm_mask_cmp_round_ss_mask","","Compare the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__mmask8",6]]],[5,"_mm_cmp_sd_mask","","Compare the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__mmask8",6]]],[5,"_mm_mask_cmp_sd_mask","","Compare the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__mmask8",6]]],[5,"_mm_cmp_round_sd_mask","","Compare the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__mmask8",6]]],[5,"_mm_mask_cmp_round_sd_mask","","Compare the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__mmask8",6]]],[5,"_mm512_cmplt_epu32_mask","","Compare packed unsigned 32-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_cmplt_epu32_mask","","Compare packed unsigned 32-bit integers in a and b for …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpgt_epu32_mask","","Compare packed unsigned 32-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpgt_epu32_mask","","Compare packed unsigned 32-bit integers in a and b for …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmple_epu32_mask","","Compare packed unsigned 32-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_cmple_epu32_mask","","Compare packed unsigned 32-bit integers in a and b for …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpge_epu32_mask","","Compare packed unsigned 32-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpge_epu32_mask","","Compare packed unsigned 32-bit integers in a and b for …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpeq_epu32_mask","","Compare packed unsigned 32-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpeq_epu32_mask","","Compare packed unsigned 32-bit integers in a and b for …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpneq_epu32_mask","","Compare packed unsigned 32-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpneq_epu32_mask","","Compare packed unsigned 32-bit integers in a and b for …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmp_epu32_mask","","Compare packed unsigned 32-bit integers in a and b based …",null,[[["__m512i",3],["_mm_cmpint_enum",6]],["__mmask16",6]]],[5,"_mm512_mask_cmp_epu32_mask","","Compare packed unsigned 32-bit integers in a and b based …",null,[[["__m512i",3],["_mm_cmpint_enum",6],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmplt_epi32_mask","","Compare packed signed 32-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_cmplt_epi32_mask","","Compare packed signed 32-bit integers in a and b for …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpgt_epi32_mask","","Compare packed signed 32-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpgt_epi32_mask","","Compare packed signed 32-bit integers in a and b for …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmple_epi32_mask","","Compare packed signed 32-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_cmple_epi32_mask","","Compare packed signed 32-bit integers in a and b for …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpge_epi32_mask","","Compare packed signed 32-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpge_epi32_mask","","Compare packed signed 32-bit integers in a and b for …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpeq_epi32_mask","","Compare packed 32-bit integers in a and b for equality, …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpeq_epi32_mask","","Compare packed 32-bit integers in a and b for equality, …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpneq_epi32_mask","","Compare packed 32-bit integers in a and b for not-equal, …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpneq_epi32_mask","","Compare packed 32-bit integers in a and b for not-equal, …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmp_epi32_mask","","Compare packed signed 32-bit integers in a and b based on …",null,[[["__m512i",3],["_mm_cmpint_enum",6]],["__mmask16",6]]],[5,"_mm512_mask_cmp_epi32_mask","","Compare packed signed 32-bit integers in a and b based on …",null,[[["__m512i",3],["_mm_cmpint_enum",6],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmplt_epu64_mask","","Compare packed unsigned 64-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_cmplt_epu64_mask","","Compare packed unsigned 64-bit integers in a and b for …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_cmpgt_epu64_mask","","Compare packed unsigned 64-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpgt_epu64_mask","","Compare packed unsigned 64-bit integers in a and b for …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_cmple_epu64_mask","","Compare packed unsigned 64-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_cmple_epu64_mask","","Compare packed unsigned 64-bit integers in a and b for …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_cmpge_epu64_mask","","Compare packed unsigned 64-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpge_epu64_mask","","Compare packed unsigned 64-bit integers in a and b for …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_cmpeq_epu64_mask","","Compare packed unsigned 64-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpeq_epu64_mask","","Compare packed unsigned 64-bit integers in a and b for …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_cmpneq_epu64_mask","","Compare packed unsigned 64-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpneq_epu64_mask","","Compare packed unsigned 64-bit integers in a and b for …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_cmp_epu64_mask","","Compare packed unsigned 64-bit integers in a and b based …",null,[[["__m512i",3],["_mm_cmpint_enum",6]],["__mmask8",6]]],[5,"_mm512_mask_cmp_epu64_mask","","Compare packed unsigned 64-bit integers in a and b based …",null,[[["__m512i",3],["__mmask8",6],["_mm_cmpint_enum",6]],["__mmask8",6]]],[5,"_mm512_cmplt_epi64_mask","","Compare packed signed 64-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_cmplt_epi64_mask","","Compare packed signed 64-bit integers in a and b for …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_cmpgt_epi64_mask","","Compare packed signed 64-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpgt_epi64_mask","","Compare packed signed 64-bit integers in a and b for …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_cmple_epi64_mask","","Compare packed signed 64-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_cmple_epi64_mask","","Compare packed signed 64-bit integers in a and b for …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_cmpge_epi64_mask","","Compare packed signed 64-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpge_epi64_mask","","Compare packed signed 64-bit integers in a and b for …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_cmpeq_epi64_mask","","Compare packed 64-bit integers in a and b for equality, …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpeq_epi64_mask","","Compare packed 64-bit integers in a and b for equality, …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_cmpneq_epi64_mask","","Compare packed signed 64-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpneq_epi64_mask","","Compare packed signed 64-bit integers in a and b for …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_cmp_epi64_mask","","Compare packed signed 64-bit integers in a and b based on …",null,[[["__m512i",3],["_mm_cmpint_enum",6]],["__mmask8",6]]],[5,"_mm512_mask_cmp_epi64_mask","","Compare packed signed 64-bit integers in a and b based on …",null,[[["__m512i",3],["__mmask8",6],["_mm_cmpint_enum",6]],["__mmask8",6]]],[5,"_mm512_reduce_add_epi32","","Reduce the packed 32-bit integers in a by addition. …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_add_epi32","","Reduce the packed 32-bit integers in a by addition using …",null,[[["__m512i",3],["__mmask16",6]]]],[5,"_mm512_reduce_add_epi64","","Reduce the packed 64-bit integers in a by addition. …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_add_epi64","","Reduce the packed 64-bit integers in a by addition using …",null,[[["__m512i",3],["__mmask8",6]]]],[5,"_mm512_reduce_add_ps","","Reduce the packed single-precision (32-bit) …",null,[[["__m512",3]]]],[5,"_mm512_mask_reduce_add_ps","","Reduce the packed single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]]]],[5,"_mm512_reduce_add_pd","","Reduce the packed double-precision (64-bit) …",null,[[["__m512d",3]]]],[5,"_mm512_mask_reduce_add_pd","","Reduce the packed double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]]]],[5,"_mm512_reduce_mul_epi32","","Reduce the packed 32-bit integers in a by multiplication. …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_mul_epi32","","Reduce the packed 32-bit integers in a by multiplication …",null,[[["__m512i",3],["__mmask16",6]]]],[5,"_mm512_reduce_mul_epi64","","Reduce the packed 64-bit integers in a by multiplication. …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_mul_epi64","","Reduce the packed 64-bit integers in a by multiplication …",null,[[["__m512i",3],["__mmask8",6]]]],[5,"_mm512_reduce_mul_ps","","Reduce the packed single-precision (32-bit) …",null,[[["__m512",3]]]],[5,"_mm512_mask_reduce_mul_ps","","Reduce the packed single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]]]],[5,"_mm512_reduce_mul_pd","","Reduce the packed double-precision (64-bit) …",null,[[["__m512d",3]]]],[5,"_mm512_mask_reduce_mul_pd","","Reduce the packed double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]]]],[5,"_mm512_reduce_max_epi32","","Reduce the packed signed 32-bit integers in a by maximum. …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_max_epi32","","Reduce the packed signed 32-bit integers in a by maximum …",null,[[["__m512i",3],["__mmask16",6]]]],[5,"_mm512_reduce_max_epi64","","Reduce the packed signed 64-bit integers in a by maximum. …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_max_epi64","","Reduce the packed signed 64-bit integers in a by maximum …",null,[[["__m512i",3],["__mmask8",6]]]],[5,"_mm512_reduce_max_epu32","","Reduce the packed unsigned 32-bit integers in a by …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_max_epu32","","Reduce the packed unsigned 32-bit integers in a by …",null,[[["__m512i",3],["__mmask16",6]]]],[5,"_mm512_reduce_max_epu64","","Reduce the packed unsigned 64-bit integers in a by …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_max_epu64","","Reduce the packed unsigned 64-bit integers in a by …",null,[[["__m512i",3],["__mmask8",6]]]],[5,"_mm512_reduce_max_ps","","Reduce the packed single-precision (32-bit) …",null,[[["__m512",3]]]],[5,"_mm512_mask_reduce_max_ps","","Reduce the packed single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]]]],[5,"_mm512_reduce_max_pd","","Reduce the packed double-precision (64-bit) …",null,[[["__m512d",3]]]],[5,"_mm512_mask_reduce_max_pd","","Reduce the packed double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]]]],[5,"_mm512_reduce_min_epi32","","Reduce the packed signed 32-bit integers in a by minimum. …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_min_epi32","","Reduce the packed signed 32-bit integers in a by maximum …",null,[[["__m512i",3],["__mmask16",6]]]],[5,"_mm512_reduce_min_epi64","","Reduce the packed signed 64-bit integers in a by minimum. …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_min_epi64","","Reduce the packed signed 64-bit integers in a by maximum …",null,[[["__m512i",3],["__mmask8",6]]]],[5,"_mm512_reduce_min_epu32","","Reduce the packed unsigned 32-bit integers in a by …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_min_epu32","","Reduce the packed unsigned 32-bit integers in a by …",null,[[["__m512i",3],["__mmask16",6]]]],[5,"_mm512_reduce_min_epu64","","Reduce the packed unsigned 64-bit integers in a by …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_min_epu64","","Reduce the packed signed 64-bit integers in a by maximum …",null,[[["__m512i",3],["__mmask8",6]]]],[5,"_mm512_reduce_min_ps","","Reduce the packed single-precision (32-bit) …",null,[[["__m512",3]]]],[5,"_mm512_mask_reduce_min_ps","","Reduce the packed single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]]]],[5,"_mm512_reduce_min_pd","","Reduce the packed double-precision (64-bit) …",null,[[["__m512d",3]]]],[5,"_mm512_mask_reduce_min_pd","","Reduce the packed double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]]]],[5,"_mm512_reduce_and_epi32","","Reduce the packed 32-bit integers in a by bitwise AND. …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_and_epi32","","Reduce the packed 32-bit integers in a by bitwise AND …",null,[[["__m512i",3],["__mmask16",6]]]],[5,"_mm512_reduce_and_epi64","","Reduce the packed 64-bit integers in a by bitwise AND. …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_and_epi64","","Reduce the packed 64-bit integers in a by addition using …",null,[[["__m512i",3],["__mmask8",6]]]],[5,"_mm512_reduce_or_epi32","","Reduce the packed 32-bit integers in a by bitwise OR. …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_or_epi32","","Reduce the packed 32-bit integers in a by bitwise OR …",null,[[["__m512i",3],["__mmask16",6]]]],[5,"_mm512_reduce_or_epi64","","Reduce the packed 64-bit integers in a by bitwise OR. …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_or_epi64","","Reduce the packed 64-bit integers in a by bitwise OR …",null,[[["__m512i",3],["__mmask8",6]]]],[5,"_mm512_undefined_pd","","Returns vector of type <code>__m512d</code> with undefined elements.",null,[[],["__m512d",3]]],[5,"_mm512_undefined_ps","","Returns vector of type <code>__m512</code> with undefined elements.",null,[[],["__m512",3]]],[5,"_mm512_undefined_epi32","","Return vector of type __m512i with undefined elements.",null,[[],["__m512i",3]]],[5,"_mm512_undefined","","Return vector of type __m512 with undefined elements.",null,[[],["__m512",3]]],[5,"_mm512_loadu_epi32","","Load 512-bits (composed of 16 packed 32-bit integers) …",null,[[],["__m512i",3]]],[5,"_mm512_storeu_epi32","","Store 512-bits (composed of 16 packed 32-bit integers) …",null,[[["__m512i",3]]]],[5,"_mm512_loadu_epi64","","Load 512-bits (composed of 8 packed 64-bit integers) from …",null,[[],["__m512i",3]]],[5,"_mm512_storeu_epi64","","Store 512-bits (composed of 8 packed 64-bit integers) …",null,[[["__m512i",3]]]],[5,"_mm512_loadu_si512","","Load 512-bits of integer data from memory into dst. …",null,[[],["__m512i",3]]],[5,"_mm512_storeu_si512","","Store 512-bits of integer data from a into memory. …",null,[[["__m512i",3]]]],[5,"_mm512_loadu_pd","","Loads 512-bits (composed of 8 packed double-precision …",null,[[],["__m512d",3]]],[5,"_mm512_storeu_pd","","Stores 512-bits (composed of 8 packed double-precision …",null,[[["__m512d",3]]]],[5,"_mm512_loadu_ps","","Loads 512-bits (composed of 16 packed single-precision …",null,[[],["__m512",3]]],[5,"_mm512_storeu_ps","","Stores 512-bits (composed of 16 packed single-precision …",null,[[["__m512",3]]]],[5,"_mm512_load_si512","","Load 512-bits of integer data from memory into dst. …",null,[[],["__m512i",3]]],[5,"_mm512_store_si512","","Store 512-bits of integer data from a into memory. …",null,[[["__m512i",3]]]],[5,"_mm512_load_epi32","","Load 512-bits (composed of 16 packed 32-bit integers) …",null,[[],["__m512i",3]]],[5,"_mm512_store_epi32","","Store 512-bits (composed of 16 packed 32-bit integers) …",null,[[["__m512i",3]]]],[5,"_mm512_load_epi64","","Load 512-bits (composed of 8 packed 64-bit integers) from …",null,[[],["__m512i",3]]],[5,"_mm512_store_epi64","","Store 512-bits (composed of 8 packed 64-bit integers) …",null,[[["__m512i",3]]]],[5,"_mm512_load_ps","","Load 512-bits (composed of 16 packed single-precision …",null,[[],["__m512",3]]],[5,"_mm512_store_ps","","Store 512-bits of integer data from a into memory. …",null,[[["__m512",3]]]],[5,"_mm512_load_pd","","Load 512-bits (composed of 8 packed double-precision …",null,[[],["__m512d",3]]],[5,"_mm512_store_pd","","Store 512-bits (composed of 8 packed double-precision …",null,[[["__m512d",3]]]],[5,"_mm512_setr_pd","","Set packed double-precision (64-bit) floating-point …",null,[[],["__m512d",3]]],[5,"_mm512_set_pd","","Set packed double-precision (64-bit) floating-point …",null,[[],["__m512d",3]]],[5,"_mm_mask_move_ss","","Move the lower single-precision (32-bit) floating-point …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_move_ss","","Move the lower single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask_move_sd","","Move the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_move_sd","","Move the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_add_ss","","Add the lower single-precision (32-bit) floating-point …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_add_ss","","Add the lower single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask_add_sd","","Add the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_add_sd","","Add the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_sub_ss","","Subtract the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_sub_ss","","Subtract the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask_sub_sd","","Subtract the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_sub_sd","","Subtract the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_mul_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_mul_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask_mul_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_mul_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_div_ss","","Divide the lower single-precision (32-bit) floating-point …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_div_ss","","Divide the lower single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask_div_sd","","Divide the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_div_sd","","Divide the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_max_ss","","Compare the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_max_ss","","Compare the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask_max_sd","","Compare the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_max_sd","","Compare the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_min_ss","","Compare the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_min_ss","","Compare the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask_min_sd","","Compare the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_min_sd","","Compare the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_sqrt_ss","","Compute the square root of the lower single-precision …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_sqrt_ss","","Compute the square root of the lower single-precision …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask_sqrt_sd","","Compute the square root of the lower double-precision …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_sqrt_sd","","Compute the square root of the lower double-precision …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_rsqrt14_ss","","Compute the approximate reciprocal square root of the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_rsqrt14_ss","","Compute the approximate reciprocal square root of the …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_rsqrt14_ss","","Compute the approximate reciprocal square root of the …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_rsqrt14_sd","","Compute the approximate reciprocal square root of the …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_rsqrt14_sd","","Compute the approximate reciprocal square root of the …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_rsqrt14_sd","","Compute the approximate reciprocal square root of the …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_rcp14_ss","","Compute the approximate reciprocal of the lower …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_rcp14_ss","","Compute the approximate reciprocal of the lower …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_rcp14_ss","","Compute the approximate reciprocal of the lower …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_rcp14_sd","","Compute the approximate reciprocal of the lower …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_rcp14_sd","","Compute the approximate reciprocal of the lower …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_rcp14_sd","","Compute the approximate reciprocal of the lower …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_getexp_ss","","Convert the exponent of the lower single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_getexp_ss","","Convert the exponent of the lower single-precision …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_getexp_ss","","Convert the exponent of the lower single-precision …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_getexp_sd","","Convert the exponent of the lower double-precision …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_getexp_sd","","Convert the exponent of the lower double-precision …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_getexp_sd","","Convert the exponent of the lower double-precision …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_getmant_ss","","Normalize the mantissas of the lower single-precision …",null,[[["__m128",3],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6]],["__m128",3]]],[5,"_mm_mask_getmant_ss","","Normalize the mantissas of the lower single-precision …",null,[[["__m128",3],["__mmask8",6],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6]],["__m128",3]]],[5,"_mm_maskz_getmant_ss","","Normalize the mantissas of the lower single-precision …",null,[[["__mmask8",6],["__m128",3],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6]],["__m128",3]]],[5,"_mm_getmant_sd","","Normalize the mantissas of the lower double-precision …",null,[[["_mm_mantissa_sign_enum",6],["__m128d",3],["_mm_mantissa_norm_enum",6]],["__m128d",3]]],[5,"_mm_mask_getmant_sd","","Normalize the mantissas of the lower double-precision …",null,[[["__mmask8",6],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_getmant_sd","","Normalize the mantissas of the lower double-precision …",null,[[["__mmask8",6],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_roundscale_ss","","Round the lower single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_roundscale_ss","","Round the lower single-precision (32-bit) floating-point …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_roundscale_ss","","Round the lower single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_roundscale_sd","","Round the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_roundscale_sd","","Round the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_roundscale_sd","","Round the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_scalef_ss","","Scale the packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_scalef_ss","","Scale the packed single-precision (32-bit) floating-point …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_scalef_ss","","Scale the packed single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_scalef_sd","","Scale the packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_scalef_sd","","Scale the packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_scalef_sd","","Scale the packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_fmadd_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_fmadd_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask3_fmadd_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_mask_fmadd_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_fmadd_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask3_fmadd_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_fmsub_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_fmsub_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask3_fmsub_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_mask_fmsub_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_fmsub_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask3_fmsub_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_fnmadd_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_fnmadd_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask3_fnmadd_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_mask_fnmadd_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_fnmadd_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask3_fnmadd_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_fnmsub_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_fnmsub_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask3_fnmsub_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_mask_fnmsub_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_fnmsub_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask3_fnmsub_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_add_round_ss","","Add the lower single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_add_round_ss","","Add the lower single-precision (32-bit) floating-point …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_add_round_ss","","Add the lower single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_add_round_sd","","Add the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_add_round_sd","","Add the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_add_round_sd","","Add the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_sub_round_ss","","Subtract the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_sub_round_ss","","Subtract the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_sub_round_ss","","Subtract the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_sub_round_sd","","Subtract the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_sub_round_sd","","Subtract the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_sub_round_sd","","Subtract the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mul_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_mul_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_mul_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mul_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_mul_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_mul_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_div_round_ss","","Divide the lower single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_div_round_ss","","Divide the lower single-precision (32-bit) floating-point …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_div_round_ss","","Divide the lower single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_div_round_sd","","Divide the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_div_round_sd","","Divide the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_div_round_sd","","Divide the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_max_round_ss","","Compare the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_max_round_ss","","Compare the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_max_round_ss","","Compare the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_max_round_sd","","Compare the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_max_round_sd","","Compare the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_max_round_sd","","Compare the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_min_round_ss","","Compare the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_min_round_ss","","Compare the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_min_round_ss","","Compare the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_min_round_sd","","Compare the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_min_round_sd","","Compare the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_min_round_sd","","Compare the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_sqrt_round_ss","","Compute the square root of the lower single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_sqrt_round_ss","","Compute the square root of the lower single-precision …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_sqrt_round_ss","","Compute the square root of the lower single-precision …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_sqrt_round_sd","","Compute the square root of the lower double-precision …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_sqrt_round_sd","","Compute the square root of the lower double-precision …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_sqrt_round_sd","","Compute the square root of the lower double-precision …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_getexp_round_ss","","Convert the exponent of the lower single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_getexp_round_ss","","Convert the exponent of the lower single-precision …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_getexp_round_ss","","Convert the exponent of the lower single-precision …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_getexp_round_sd","","Convert the exponent of the lower double-precision …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_getexp_round_sd","","Convert the exponent of the lower double-precision …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_getexp_round_sd","","Convert the exponent of the lower double-precision …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_getmant_round_ss","","Normalize the mantissas of the lower single-precision …",null,[[["__m128",3],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6]],["__m128",3]]],[5,"_mm_mask_getmant_round_ss","","Normalize the mantissas of the lower single-precision …",null,[[["__m128",3],["__mmask8",6],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6]],["__m128",3]]],[5,"_mm_maskz_getmant_round_ss","","Normalize the mantissas of the lower single-precision …",null,[[["__mmask8",6],["__m128",3],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6]],["__m128",3]]],[5,"_mm_getmant_round_sd","","Normalize the mantissas of the lower double-precision …",null,[[["_mm_mantissa_sign_enum",6],["__m128d",3],["_mm_mantissa_norm_enum",6]],["__m128d",3]]],[5,"_mm_mask_getmant_round_sd","","Normalize the mantissas of the lower double-precision …",null,[[["__mmask8",6],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_getmant_round_sd","","Normalize the mantissas of the lower double-precision …",null,[[["__mmask8",6],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_roundscale_round_ss","","Round the lower single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_roundscale_round_ss","","Round the lower single-precision (32-bit) floating-point …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_roundscale_round_ss","","Round the lower single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_roundscale_round_sd","","Round the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_roundscale_round_sd","","Round the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_roundscale_round_sd","","Round the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_scalef_round_ss","","Scale the packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_scalef_round_ss","","Scale the packed single-precision (32-bit) floating-point …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_scalef_round_ss","","Scale the packed single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_scalef_round_sd","","Scale the packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_scalef_round_sd","","Scale the packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_scalef_round_sd","","Scale the packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_fmadd_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_fmadd_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_fmadd_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask3_fmadd_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_fmadd_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_fmadd_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_fmadd_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask3_fmadd_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_fmsub_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_fmsub_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_fmsub_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask3_fmsub_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_fmsub_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_fmsub_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_fmsub_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask3_fmsub_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_fnmadd_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_fnmadd_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_fnmadd_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask3_fnmadd_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_fnmadd_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_fnmadd_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_fnmadd_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask3_fnmadd_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_fnmsub_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_fnmsub_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_fnmsub_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask3_fnmsub_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_fnmsub_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_fnmsub_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_fnmsub_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask3_fnmsub_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_fixupimm_ss","","Fix up the lower single-precision (32-bit) floating-point …",null,[[["__m128",3],["__m128i",3]],["__m128",3]]],[5,"_mm_mask_fixupimm_ss","","Fix up the lower single-precision (32-bit) floating-point …",null,[[["__m128",3],["__mmask8",6],["__m128i",3]],["__m128",3]]],[5,"_mm_maskz_fixupimm_ss","","Fix up the lower single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m128",3],["__m128i",3]],["__m128",3]]],[5,"_mm_fixupimm_sd","","Fix up the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3],["__m128i",3]],["__m128d",3]]],[5,"_mm_mask_fixupimm_sd","","Fix up the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3],["__m128i",3]],["__m128d",3]]],[5,"_mm_maskz_fixupimm_sd","","Fix up the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3],["__m128i",3]],["__m128d",3]]],[5,"_mm_fixupimm_round_ss","","Fix up the lower single-precision (32-bit) floating-point …",null,[[["__m128",3],["__m128i",3]],["__m128",3]]],[5,"_mm_mask_fixupimm_round_ss","","Fix up the lower single-precision (32-bit) floating-point …",null,[[["__m128",3],["__mmask8",6],["__m128i",3]],["__m128",3]]],[5,"_mm_maskz_fixupimm_round_ss","","Fix up the lower single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m128",3],["__m128i",3]],["__m128",3]]],[5,"_mm_fixupimm_round_sd","","Fix up the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3],["__m128i",3]],["__m128d",3]]],[5,"_mm_mask_fixupimm_round_sd","","Fix up the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3],["__m128i",3]],["__m128d",3]]],[5,"_mm_maskz_fixupimm_round_sd","","Fix up the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3],["__m128i",3]],["__m128d",3]]],[5,"_mm_mask_cvtss_sd","","Convert the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128d",3],["__m128",3]],["__m128d",3]]],[5,"_mm_maskz_cvtss_sd","","Convert the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128d",3],["__m128",3]],["__m128d",3]]],[5,"_mm_mask_cvtsd_ss","","Convert the lower double-precision (64-bit) …",null,[[["__m128",3],["__mmask8",6],["__m128d",3]],["__m128",3]]],[5,"_mm_maskz_cvtsd_ss","","Convert the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128",3],["__m128d",3]],["__m128",3]]],[5,"_mm_cvt_roundss_sd","","Convert the lower single-precision (32-bit) …",null,[[["__m128",3],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_cvt_roundss_sd","","Convert the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128d",3],["__m128",3]],["__m128d",3]]],[5,"_mm_maskz_cvt_roundss_sd","","Convert the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128d",3],["__m128",3]],["__m128d",3]]],[5,"_mm_cvt_roundsd_ss","","Convert the lower double-precision (64-bit) …",null,[[["__m128",3],["__m128d",3]],["__m128",3]]],[5,"_mm_mask_cvt_roundsd_ss","","Convert the lower double-precision (64-bit) …",null,[[["__m128",3],["__mmask8",6],["__m128d",3]],["__m128",3]]],[5,"_mm_maskz_cvt_roundsd_ss","","Convert the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128",3],["__m128d",3]],["__m128",3]]],[5,"_mm_cvt_roundss_si32","","Convert the lower single-precision (32-bit) …",null,[[["__m128",3]]]],[5,"_mm_cvt_roundss_i32","","Convert the lower single-precision (32-bit) …",null,[[["__m128",3]]]],[5,"_mm_cvt_roundss_u32","","Convert the lower single-precision (32-bit) …",null,[[["__m128",3]]]],[5,"_mm_cvtss_i32","","Convert the lower single-precision (32-bit) …",null,[[["__m128",3]]]],[5,"_mm_cvtss_u32","","Convert the lower single-precision (32-bit) …",null,[[["__m128",3]]]],[5,"_mm_cvt_roundsd_si32","","Convert the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvt_roundsd_i32","","Convert the lower single-precision (32-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvt_roundsd_u32","","Convert the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvtsd_i32","","Convert the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvtsd_u32","","Convert the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvt_roundi32_ss","","Convert the signed 32-bit integer b to a single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cvt_roundsi32_ss","","Convert the signed 32-bit integer b to a single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cvt_roundu32_ss","","Convert the unsigned 32-bit integer b to a …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cvti32_ss","","Convert the signed 32-bit integer b to a single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cvti32_sd","","Convert the signed 32-bit integer b to a double-precision …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cvtt_roundss_si32","","Convert the lower single-precision (32-bit) …",null,[[["__m128",3]]]],[5,"_mm_cvtt_roundss_i32","","Convert the lower single-precision (32-bit) …",null,[[["__m128",3]]]],[5,"_mm_cvtt_roundss_u32","","Convert the lower single-precision (32-bit) …",null,[[["__m128",3]]]],[5,"_mm_cvttss_i32","","Convert the lower single-precision (32-bit) …",null,[[["__m128",3]]]],[5,"_mm_cvttss_u32","","Convert the lower single-precision (32-bit) …",null,[[["__m128",3]]]],[5,"_mm_cvtt_roundsd_si32","","Convert the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvtt_roundsd_i32","","Convert the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvtt_roundsd_u32","","Convert the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvttsd_i32","","Convert the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvttsd_u32","","Convert the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvtu32_ss","","Convert the unsigned 32-bit integer b to a …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cvtu32_sd","","Convert the unsigned 32-bit integer b to a …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cvtu64_ss","","Convert the unsigned 64-bit integer b to a …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cvtu64_sd","","Convert the unsigned 64-bit integer b to a …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_comi_round_ss","","Compare the lower single-precision (32-bit) …",null,[[["__m128",3]]]],[5,"_mm_comi_round_sd","","Compare the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[17,"_MM_CMPINT_EQ","","Equal",null,null],[17,"_MM_CMPINT_LT","","Less-than",null,null],[17,"_MM_CMPINT_LE","","Less-than-or-equal",null,null],[17,"_MM_CMPINT_FALSE","","False",null,null],[17,"_MM_CMPINT_NE","","Not-equal",null,null],[17,"_MM_CMPINT_NLT","","Not less-than",null,null],[17,"_MM_CMPINT_NLE","","Not less-than-or-equal",null,null],[17,"_MM_CMPINT_TRUE","","True",null,null],[17,"_MM_MANT_NORM_1_2","","interval [1, 2)",null,null],[17,"_MM_MANT_NORM_P5_2","","interval [0.5, 2)",null,null],[17,"_MM_MANT_NORM_P5_1","","interval [0.5, 1)",null,null],[17,"_MM_MANT_NORM_P75_1P5","","interval [0.75, 1.5)",null,null],[17,"_MM_MANT_SIGN_SRC","","sign = sign(SRC)",null,null],[17,"_MM_MANT_SIGN_ZERO","","sign = 0",null,null],[17,"_MM_MANT_SIGN_NAN","","DEST = NaN if sign(SRC) = 1",null,null],[17,"_MM_PERM_AAAA","","",null,null],[17,"_MM_PERM_AAAB","","",null,null],[17,"_MM_PERM_AAAC","","",null,null],[17,"_MM_PERM_AAAD","","",null,null],[17,"_MM_PERM_AABA","","",null,null],[17,"_MM_PERM_AABB","","",null,null],[17,"_MM_PERM_AABC","","",null,null],[17,"_MM_PERM_AABD","","",null,null],[17,"_MM_PERM_AACA","","",null,null],[17,"_MM_PERM_AACB","","",null,null],[17,"_MM_PERM_AACC","","",null,null],[17,"_MM_PERM_AACD","","",null,null],[17,"_MM_PERM_AADA","","",null,null],[17,"_MM_PERM_AADB","","",null,null],[17,"_MM_PERM_AADC","","",null,null],[17,"_MM_PERM_AADD","","",null,null],[17,"_MM_PERM_ABAA","","",null,null],[17,"_MM_PERM_ABAB","","",null,null],[17,"_MM_PERM_ABAC","","",null,null],[17,"_MM_PERM_ABAD","","",null,null],[17,"_MM_PERM_ABBA","","",null,null],[17,"_MM_PERM_ABBB","","",null,null],[17,"_MM_PERM_ABBC","","",null,null],[17,"_MM_PERM_ABBD","","",null,null],[17,"_MM_PERM_ABCA","","",null,null],[17,"_MM_PERM_ABCB","","",null,null],[17,"_MM_PERM_ABCC","","",null,null],[17,"_MM_PERM_ABCD","","",null,null],[17,"_MM_PERM_ABDA","","",null,null],[17,"_MM_PERM_ABDB","","",null,null],[17,"_MM_PERM_ABDC","","",null,null],[17,"_MM_PERM_ABDD","","",null,null],[17,"_MM_PERM_ACAA","","",null,null],[17,"_MM_PERM_ACAB","","",null,null],[17,"_MM_PERM_ACAC","","",null,null],[17,"_MM_PERM_ACAD","","",null,null],[17,"_MM_PERM_ACBA","","",null,null],[17,"_MM_PERM_ACBB","","",null,null],[17,"_MM_PERM_ACBC","","",null,null],[17,"_MM_PERM_ACBD","","",null,null],[17,"_MM_PERM_ACCA","","",null,null],[17,"_MM_PERM_ACCB","","",null,null],[17,"_MM_PERM_ACCC","","",null,null],[17,"_MM_PERM_ACCD","","",null,null],[17,"_MM_PERM_ACDA","","",null,null],[17,"_MM_PERM_ACDB","","",null,null],[17,"_MM_PERM_ACDC","","",null,null],[17,"_MM_PERM_ACDD","","",null,null],[17,"_MM_PERM_ADAA","","",null,null],[17,"_MM_PERM_ADAB","","",null,null],[17,"_MM_PERM_ADAC","","",null,null],[17,"_MM_PERM_ADAD","","",null,null],[17,"_MM_PERM_ADBA","","",null,null],[17,"_MM_PERM_ADBB","","",null,null],[17,"_MM_PERM_ADBC","","",null,null],[17,"_MM_PERM_ADBD","","",null,null],[17,"_MM_PERM_ADCA","","",null,null],[17,"_MM_PERM_ADCB","","",null,null],[17,"_MM_PERM_ADCC","","",null,null],[17,"_MM_PERM_ADCD","","",null,null],[17,"_MM_PERM_ADDA","","",null,null],[17,"_MM_PERM_ADDB","","",null,null],[17,"_MM_PERM_ADDC","","",null,null],[17,"_MM_PERM_ADDD","","",null,null],[17,"_MM_PERM_BAAA","","",null,null],[17,"_MM_PERM_BAAB","","",null,null],[17,"_MM_PERM_BAAC","","",null,null],[17,"_MM_PERM_BAAD","","",null,null],[17,"_MM_PERM_BABA","","",null,null],[17,"_MM_PERM_BABB","","",null,null],[17,"_MM_PERM_BABC","","",null,null],[17,"_MM_PERM_BABD","","",null,null],[17,"_MM_PERM_BACA","","",null,null],[17,"_MM_PERM_BACB","","",null,null],[17,"_MM_PERM_BACC","","",null,null],[17,"_MM_PERM_BACD","","",null,null],[17,"_MM_PERM_BADA","","",null,null],[17,"_MM_PERM_BADB","","",null,null],[17,"_MM_PERM_BADC","","",null,null],[17,"_MM_PERM_BADD","","",null,null],[17,"_MM_PERM_BBAA","","",null,null],[17,"_MM_PERM_BBAB","","",null,null],[17,"_MM_PERM_BBAC","","",null,null],[17,"_MM_PERM_BBAD","","",null,null],[17,"_MM_PERM_BBBA","","",null,null],[17,"_MM_PERM_BBBB","","",null,null],[17,"_MM_PERM_BBBC","","",null,null],[17,"_MM_PERM_BBBD","","",null,null],[17,"_MM_PERM_BBCA","","",null,null],[17,"_MM_PERM_BBCB","","",null,null],[17,"_MM_PERM_BBCC","","",null,null],[17,"_MM_PERM_BBCD","","",null,null],[17,"_MM_PERM_BBDA","","",null,null],[17,"_MM_PERM_BBDB","","",null,null],[17,"_MM_PERM_BBDC","","",null,null],[17,"_MM_PERM_BBDD","","",null,null],[17,"_MM_PERM_BCAA","","",null,null],[17,"_MM_PERM_BCAB","","",null,null],[17,"_MM_PERM_BCAC","","",null,null],[17,"_MM_PERM_BCAD","","",null,null],[17,"_MM_PERM_BCBA","","",null,null],[17,"_MM_PERM_BCBB","","",null,null],[17,"_MM_PERM_BCBC","","",null,null],[17,"_MM_PERM_BCBD","","",null,null],[17,"_MM_PERM_BCCA","","",null,null],[17,"_MM_PERM_BCCB","","",null,null],[17,"_MM_PERM_BCCC","","",null,null],[17,"_MM_PERM_BCCD","","",null,null],[17,"_MM_PERM_BCDA","","",null,null],[17,"_MM_PERM_BCDB","","",null,null],[17,"_MM_PERM_BCDC","","",null,null],[17,"_MM_PERM_BCDD","","",null,null],[17,"_MM_PERM_BDAA","","",null,null],[17,"_MM_PERM_BDAB","","",null,null],[17,"_MM_PERM_BDAC","","",null,null],[17,"_MM_PERM_BDAD","","",null,null],[17,"_MM_PERM_BDBA","","",null,null],[17,"_MM_PERM_BDBB","","",null,null],[17,"_MM_PERM_BDBC","","",null,null],[17,"_MM_PERM_BDBD","","",null,null],[17,"_MM_PERM_BDCA","","",null,null],[17,"_MM_PERM_BDCB","","",null,null],[17,"_MM_PERM_BDCC","","",null,null],[17,"_MM_PERM_BDCD","","",null,null],[17,"_MM_PERM_BDDA","","",null,null],[17,"_MM_PERM_BDDB","","",null,null],[17,"_MM_PERM_BDDC","","",null,null],[17,"_MM_PERM_BDDD","","",null,null],[17,"_MM_PERM_CAAA","","",null,null],[17,"_MM_PERM_CAAB","","",null,null],[17,"_MM_PERM_CAAC","","",null,null],[17,"_MM_PERM_CAAD","","",null,null],[17,"_MM_PERM_CABA","","",null,null],[17,"_MM_PERM_CABB","","",null,null],[17,"_MM_PERM_CABC","","",null,null],[17,"_MM_PERM_CABD","","",null,null],[17,"_MM_PERM_CACA","","",null,null],[17,"_MM_PERM_CACB","","",null,null],[17,"_MM_PERM_CACC","","",null,null],[17,"_MM_PERM_CACD","","",null,null],[17,"_MM_PERM_CADA","","",null,null],[17,"_MM_PERM_CADB","","",null,null],[17,"_MM_PERM_CADC","","",null,null],[17,"_MM_PERM_CADD","","",null,null],[17,"_MM_PERM_CBAA","","",null,null],[17,"_MM_PERM_CBAB","","",null,null],[17,"_MM_PERM_CBAC","","",null,null],[17,"_MM_PERM_CBAD","","",null,null],[17,"_MM_PERM_CBBA","","",null,null],[17,"_MM_PERM_CBBB","","",null,null],[17,"_MM_PERM_CBBC","","",null,null],[17,"_MM_PERM_CBBD","","",null,null],[17,"_MM_PERM_CBCA","","",null,null],[17,"_MM_PERM_CBCB","","",null,null],[17,"_MM_PERM_CBCC","","",null,null],[17,"_MM_PERM_CBCD","","",null,null],[17,"_MM_PERM_CBDA","","",null,null],[17,"_MM_PERM_CBDB","","",null,null],[17,"_MM_PERM_CBDC","","",null,null],[17,"_MM_PERM_CBDD","","",null,null],[17,"_MM_PERM_CCAA","","",null,null],[17,"_MM_PERM_CCAB","","",null,null],[17,"_MM_PERM_CCAC","","",null,null],[17,"_MM_PERM_CCAD","","",null,null],[17,"_MM_PERM_CCBA","","",null,null],[17,"_MM_PERM_CCBB","","",null,null],[17,"_MM_PERM_CCBC","","",null,null],[17,"_MM_PERM_CCBD","","",null,null],[17,"_MM_PERM_CCCA","","",null,null],[17,"_MM_PERM_CCCB","","",null,null],[17,"_MM_PERM_CCCC","","",null,null],[17,"_MM_PERM_CCCD","","",null,null],[17,"_MM_PERM_CCDA","","",null,null],[17,"_MM_PERM_CCDB","","",null,null],[17,"_MM_PERM_CCDC","","",null,null],[17,"_MM_PERM_CCDD","","",null,null],[17,"_MM_PERM_CDAA","","",null,null],[17,"_MM_PERM_CDAB","","",null,null],[17,"_MM_PERM_CDAC","","",null,null],[17,"_MM_PERM_CDAD","","",null,null],[17,"_MM_PERM_CDBA","","",null,null],[17,"_MM_PERM_CDBB","","",null,null],[17,"_MM_PERM_CDBC","","",null,null],[17,"_MM_PERM_CDBD","","",null,null],[17,"_MM_PERM_CDCA","","",null,null],[17,"_MM_PERM_CDCB","","",null,null],[17,"_MM_PERM_CDCC","","",null,null],[17,"_MM_PERM_CDCD","","",null,null],[17,"_MM_PERM_CDDA","","",null,null],[17,"_MM_PERM_CDDB","","",null,null],[17,"_MM_PERM_CDDC","","",null,null],[17,"_MM_PERM_CDDD","","",null,null],[17,"_MM_PERM_DAAA","","",null,null],[17,"_MM_PERM_DAAB","","",null,null],[17,"_MM_PERM_DAAC","","",null,null],[17,"_MM_PERM_DAAD","","",null,null],[17,"_MM_PERM_DABA","","",null,null],[17,"_MM_PERM_DABB","","",null,null],[17,"_MM_PERM_DABC","","",null,null],[17,"_MM_PERM_DABD","","",null,null],[17,"_MM_PERM_DACA","","",null,null],[17,"_MM_PERM_DACB","","",null,null],[17,"_MM_PERM_DACC","","",null,null],[17,"_MM_PERM_DACD","","",null,null],[17,"_MM_PERM_DADA","","",null,null],[17,"_MM_PERM_DADB","","",null,null],[17,"_MM_PERM_DADC","","",null,null],[17,"_MM_PERM_DADD","","",null,null],[17,"_MM_PERM_DBAA","","",null,null],[17,"_MM_PERM_DBAB","","",null,null],[17,"_MM_PERM_DBAC","","",null,null],[17,"_MM_PERM_DBAD","","",null,null],[17,"_MM_PERM_DBBA","","",null,null],[17,"_MM_PERM_DBBB","","",null,null],[17,"_MM_PERM_DBBC","","",null,null],[17,"_MM_PERM_DBBD","","",null,null],[17,"_MM_PERM_DBCA","","",null,null],[17,"_MM_PERM_DBCB","","",null,null],[17,"_MM_PERM_DBCC","","",null,null],[17,"_MM_PERM_DBCD","","",null,null],[17,"_MM_PERM_DBDA","","",null,null],[17,"_MM_PERM_DBDB","","",null,null],[17,"_MM_PERM_DBDC","","",null,null],[17,"_MM_PERM_DBDD","","",null,null],[17,"_MM_PERM_DCAA","","",null,null],[17,"_MM_PERM_DCAB","","",null,null],[17,"_MM_PERM_DCAC","","",null,null],[17,"_MM_PERM_DCAD","","",null,null],[17,"_MM_PERM_DCBA","","",null,null],[17,"_MM_PERM_DCBB","","",null,null],[17,"_MM_PERM_DCBC","","",null,null],[17,"_MM_PERM_DCBD","","",null,null],[17,"_MM_PERM_DCCA","","",null,null],[17,"_MM_PERM_DCCB","","",null,null],[17,"_MM_PERM_DCCC","","",null,null],[17,"_MM_PERM_DCCD","","",null,null],[17,"_MM_PERM_DCDA","","",null,null],[17,"_MM_PERM_DCDB","","",null,null],[17,"_MM_PERM_DCDC","","",null,null],[17,"_MM_PERM_DCDD","","",null,null],[17,"_MM_PERM_DDAA","","",null,null],[17,"_MM_PERM_DDAB","","",null,null],[17,"_MM_PERM_DDAC","","",null,null],[17,"_MM_PERM_DDAD","","",null,null],[17,"_MM_PERM_DDBA","","",null,null],[17,"_MM_PERM_DDBB","","",null,null],[17,"_MM_PERM_DDBC","","",null,null],[17,"_MM_PERM_DDBD","","",null,null],[17,"_MM_PERM_DDCA","","",null,null],[17,"_MM_PERM_DDCB","","",null,null],[17,"_MM_PERM_DDCC","","",null,null],[17,"_MM_PERM_DDCD","","",null,null],[17,"_MM_PERM_DDDA","","",null,null],[17,"_MM_PERM_DDDB","","",null,null],[17,"_MM_PERM_DDDC","","",null,null],[17,"_MM_PERM_DDDD","","",null,null],[5,"_mm512_abs_epi16","","Compute the absolute value of packed signed 16-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_abs_epi16","","Compute the absolute value of packed signed 16-bit …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_abs_epi16","","Compute the absolute value of packed signed 16-bit …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_abs_epi16","","Compute the absolute value of packed signed 16-bit …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_abs_epi16","","Compute the absolute value of packed signed 16-bit …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_abs_epi16","","Compute the absolute value of packed signed 16-bit …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_abs_epi16","","Compute the absolute value of packed signed 16-bit …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_abs_epi8","","Compute the absolute value of packed signed 8-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_abs_epi8","","Compute the absolute value of packed signed 8-bit …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_abs_epi8","","Compute the absolute value of packed signed 8-bit …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_abs_epi8","","Compute the absolute value of packed signed 8-bit …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_abs_epi8","","Compute the absolute value of packed signed 8-bit …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_abs_epi8","","Compute the absolute value of packed signed 8-bit …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_abs_epi8","","Compute the absolute value of packed signed 8-bit …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_add_epi16","","Add packed 16-bit integers in a and b, and store the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_add_epi16","","Add packed 16-bit integers in a and b, and store the …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_add_epi16","","Add packed 16-bit integers in a and b, and store the …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_add_epi16","","Add packed 16-bit integers in a and b, and store the …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_add_epi16","","Add packed 16-bit integers in a and b, and store the …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_add_epi16","","Add packed 16-bit integers in a and b, and store the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_add_epi16","","Add packed 16-bit integers in a and b, and store the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_add_epi8","","Add packed 8-bit integers in a and b, and store the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_add_epi8","","Add packed 8-bit integers in a and b, and store the …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_add_epi8","","Add packed 8-bit integers in a and b, and store the …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_add_epi8","","Add packed 8-bit integers in a and b, and store the …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_add_epi8","","Add packed 8-bit integers in a and b, and store the …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_add_epi8","","Add packed 8-bit integers in a and b, and store the …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_add_epi8","","Add packed 8-bit integers in a and b, and store the …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_adds_epu16","","Add packed unsigned 16-bit integers in a and b using …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_adds_epu16","","Add packed unsigned 16-bit integers in a and b using …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_adds_epu16","","Add packed unsigned 16-bit integers in a and b using …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_adds_epu16","","Add packed unsigned 16-bit integers in a and b using …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_adds_epu16","","Add packed unsigned 16-bit integers in a and b using …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_adds_epu16","","Add packed unsigned 16-bit integers in a and b using …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_adds_epu16","","Add packed unsigned 16-bit integers in a and b using …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_adds_epu8","","Add packed unsigned 8-bit integers in a and b using …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_adds_epu8","","Add packed unsigned 8-bit integers in a and b using …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_adds_epu8","","Add packed unsigned 8-bit integers in a and b using …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_adds_epu8","","Add packed unsigned 8-bit integers in a and b using …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_adds_epu8","","Add packed unsigned 8-bit integers in a and b using …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_adds_epu8","","Add packed unsigned 8-bit integers in a and b using …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_adds_epu8","","Add packed unsigned 8-bit integers in a and b using …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_adds_epi16","","Add packed signed 16-bit integers in a and b using …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_adds_epi16","","Add packed signed 16-bit integers in a and b using …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_adds_epi16","","Add packed signed 16-bit integers in a and b using …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_adds_epi16","","Add packed signed 16-bit integers in a and b using …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_adds_epi16","","Add packed signed 16-bit integers in a and b using …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_adds_epi16","","Add packed signed 16-bit integers in a and b using …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_adds_epi16","","Add packed signed 16-bit integers in a and b using …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_adds_epi8","","Add packed signed 8-bit integers in a and b using …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_adds_epi8","","Add packed signed 8-bit integers in a and b using …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_adds_epi8","","Add packed signed 8-bit integers in a and b using …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_adds_epi8","","Add packed signed 8-bit integers in a and b using …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_adds_epi8","","Add packed signed 8-bit integers in a and b using …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_adds_epi8","","Add packed signed 8-bit integers in a and b using …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_adds_epi8","","Add packed signed 8-bit integers in a and b using …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_sub_epi16","","Subtract packed 16-bit integers in b from packed 16-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_sub_epi16","","Subtract packed 16-bit integers in b from packed 16-bit …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_sub_epi16","","Subtract packed 16-bit integers in b from packed 16-bit …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_sub_epi16","","Subtract packed 16-bit integers in b from packed 16-bit …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_sub_epi16","","Subtract packed 16-bit integers in b from packed 16-bit …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_sub_epi16","","Subtract packed 16-bit integers in b from packed 16-bit …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_sub_epi16","","Subtract packed 16-bit integers in b from packed 16-bit …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_sub_epi8","","Subtract packed 8-bit integers in b from packed 8-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_sub_epi8","","Subtract packed 8-bit integers in b from packed 8-bit …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_sub_epi8","","Subtract packed 8-bit integers in b from packed 8-bit …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_sub_epi8","","Subtract packed 8-bit integers in b from packed 8-bit …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_sub_epi8","","Subtract packed 8-bit integers in b from packed 8-bit …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_sub_epi8","","Subtract packed 8-bit integers in b from packed 8-bit …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_sub_epi8","","Subtract packed 8-bit integers in b from packed 8-bit …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_subs_epu16","","Subtract packed unsigned 16-bit integers in b from packed …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_subs_epu16","","Subtract packed unsigned 16-bit integers in b from packed …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_subs_epu16","","Subtract packed unsigned 16-bit integers in b from packed …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_subs_epu16","","Subtract packed unsigned 16-bit integers in b from packed …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_subs_epu16","","Subtract packed unsigned 16-bit integers in b from packed …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_subs_epu16","","Subtract packed unsigned 16-bit integers in b from packed …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_subs_epu16","","Subtract packed unsigned 16-bit integers in b from packed …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_subs_epu8","","Subtract packed unsigned 8-bit integers in b from packed …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_subs_epu8","","Subtract packed unsigned 8-bit integers in b from packed …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_subs_epu8","","Subtract packed unsigned 8-bit integers in b from packed …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_subs_epu8","","Subtract packed unsigned 8-bit integers in b from packed …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_subs_epu8","","Subtract packed unsigned 8-bit integers in b from packed …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_subs_epu8","","Subtract packed unsigned 8-bit integers in b from packed …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_subs_epu8","","Subtract packed unsigned 8-bit integers in b from packed …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_subs_epi16","","Subtract packed signed 16-bit integers in b from packed …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_subs_epi16","","Subtract packed signed 16-bit integers in b from packed …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_subs_epi16","","Subtract packed signed 16-bit integers in b from packed …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_subs_epi16","","Subtract packed signed 16-bit integers in b from packed …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_subs_epi16","","Subtract packed signed 16-bit integers in b from packed …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_subs_epi16","","Subtract packed signed 16-bit integers in b from packed …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_subs_epi16","","Subtract packed signed 16-bit integers in b from packed …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_subs_epi8","","Subtract packed signed 8-bit integers in b from packed …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_subs_epi8","","Subtract packed signed 8-bit integers in b from packed …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_subs_epi8","","Subtract packed signed 8-bit integers in b from packed …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_subs_epi8","","Subtract packed signed 8-bit integers in b from packed …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_subs_epi8","","Subtract packed signed 8-bit integers in b from packed …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_subs_epi8","","Subtract packed signed 8-bit integers in b from packed …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_subs_epi8","","Subtract packed signed 8-bit integers in b from packed …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_mulhi_epu16","","Multiply the packed unsigned 16-bit integers in a and b, …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_mulhi_epu16","","Multiply the packed unsigned 16-bit integers in a and b, …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_mulhi_epu16","","Multiply the packed unsigned 16-bit integers in a and b, …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_mulhi_epu16","","Multiply the packed unsigned 16-bit integers in a and b, …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_mulhi_epu16","","Multiply the packed unsigned 16-bit integers in a and b, …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_mulhi_epu16","","Multiply the packed unsigned 16-bit integers in a and b, …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_mulhi_epu16","","Multiply the packed unsigned 16-bit integers in a and b, …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_mulhi_epi16","","Multiply the packed signed 16-bit integers in a and b, …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_mulhi_epi16","","Multiply the packed signed 16-bit integers in a and b, …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_mulhi_epi16","","Multiply the packed signed 16-bit integers in a and b, …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_mulhi_epi16","","Multiply the packed signed 16-bit integers in a and b, …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_mulhi_epi16","","Multiply the packed signed 16-bit integers in a and b, …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_mulhi_epi16","","Multiply the packed signed 16-bit integers in a and b, …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_mulhi_epi16","","Multiply the packed signed 16-bit integers in a and b, …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_mulhrs_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_mulhrs_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_mulhrs_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_mulhrs_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_mulhrs_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_mulhrs_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_mulhrs_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_mullo_epi16","","Multiply the packed 16-bit integers in a and b, producing …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_mullo_epi16","","Multiply the packed 16-bit integers in a and b, producing …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_mullo_epi16","","Multiply the packed 16-bit integers in a and b, producing …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_mullo_epi16","","Multiply the packed 16-bit integers in a and b, producing …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_mullo_epi16","","Multiply the packed 16-bit integers in a and b, producing …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_mullo_epi16","","Multiply the packed 16-bit integers in a and b, producing …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_mullo_epi16","","Multiply the packed 16-bit integers in a and b, producing …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_max_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_max_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_max_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_max_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_max_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_max_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_max_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_max_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_max_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_max_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_max_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_max_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_max_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_max_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_max_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_max_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_max_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_max_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_max_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_max_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_max_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_max_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_max_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_max_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_max_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_max_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_max_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_max_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_min_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_min_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_min_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_min_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_min_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_min_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_min_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_min_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_min_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_min_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_min_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_min_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_min_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_min_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_min_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_min_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_min_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_min_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_min_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_min_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_min_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_min_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_min_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_min_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_min_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_min_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_min_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_min_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_cmplt_epu16_mask","","Compare packed unsigned 16-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmplt_epu16_mask","","Compare packed unsigned 16-bit integers in a and b for …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmplt_epu8_mask","","Compare packed unsigned 8-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmplt_epu8_mask","","Compare packed unsigned 8-bit integers in a and b for …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmplt_epi16_mask","","Compare packed signed 16-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmplt_epi16_mask","","Compare packed signed 16-bit integers in a and b for …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmplt_epi8_mask","","Compare packed signed 8-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmplt_epi8_mask","","Compare packed signed 8-bit integers in a and b for …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmpgt_epu16_mask","","Compare packed unsigned 16-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmpgt_epu16_mask","","Compare packed unsigned 16-bit integers in a and b for …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmpgt_epu8_mask","","Compare packed unsigned 8-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmpgt_epu8_mask","","Compare packed unsigned 8-bit integers in a and b for …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmpgt_epi16_mask","","Compare packed signed 16-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmpgt_epi16_mask","","Compare packed signed 16-bit integers in a and b for …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmpgt_epi8_mask","","Compare packed signed 8-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmpgt_epi8_mask","","Compare packed signed 8-bit integers in a and b for …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmple_epu16_mask","","Compare packed unsigned 16-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmple_epu16_mask","","Compare packed unsigned 16-bit integers in a and b for …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmple_epu8_mask","","Compare packed unsigned 8-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmple_epu8_mask","","Compare packed unsigned 8-bit integers in a and b for …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmple_epi16_mask","","Compare packed signed 16-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmple_epi16_mask","","Compare packed signed 16-bit integers in a and b for …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmple_epi8_mask","","Compare packed signed 8-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmple_epi8_mask","","Compare packed signed 8-bit integers in a and b for …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmpge_epu16_mask","","Compare packed unsigned 16-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmpge_epu16_mask","","Compare packed unsigned 16-bit integers in a and b for …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmpge_epu8_mask","","Compare packed unsigned 8-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmpge_epu8_mask","","Compare packed unsigned 8-bit integers in a and b for …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmpge_epi16_mask","","Compare packed signed 16-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmpge_epi16_mask","","Compare packed signed 16-bit integers in a and b for …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmpge_epi8_mask","","Compare packed signed 8-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmpge_epi8_mask","","Compare packed signed 8-bit integers in a and b for …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmpeq_epu16_mask","","Compare packed unsigned 16-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmpeq_epu16_mask","","Compare packed unsigned 16-bit integers in a and b for …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmpeq_epu8_mask","","Compare packed unsigned 8-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmpeq_epu8_mask","","Compare packed unsigned 8-bit integers in a and b for …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmpeq_epi16_mask","","Compare packed signed 16-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmpeq_epi16_mask","","Compare packed signed 16-bit integers in a and b for …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmpeq_epi8_mask","","Compare packed signed 8-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmpeq_epi8_mask","","Compare packed signed 8-bit integers in a and b for …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmpneq_epu16_mask","","Compare packed unsigned 16-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmpneq_epu16_mask","","Compare packed unsigned 16-bit integers in a and b for …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmpneq_epu8_mask","","Compare packed unsigned 8-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmpneq_epu8_mask","","Compare packed unsigned 8-bit integers in a and b for …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmpneq_epi16_mask","","Compare packed signed 16-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmpneq_epi16_mask","","Compare packed signed 16-bit integers in a and b for …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmpneq_epi8_mask","","Compare packed signed 8-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmpneq_epi8_mask","","Compare packed signed 8-bit integers in a and b for …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmp_epu16_mask","","Compare packed unsigned 16-bit integers in a and b based …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmp_epu16_mask","","Compare packed unsigned 16-bit integers in a and b based …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmp_epu8_mask","","Compare packed unsigned 8-bit integers in a and b based …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmp_epu8_mask","","Compare packed unsigned 8-bit integers in a and b based …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmp_epi16_mask","","Compare packed signed 16-bit integers in a and b based on …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmp_epi16_mask","","Compare packed signed 16-bit integers in a and b based on …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmp_epi8_mask","","Compare packed signed 8-bit integers in a and b based on …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmp_epi8_mask","","Compare packed signed 8-bit integers in a and b based on …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_loadu_epi16","","Load 512-bits (composed of 32 packed 16-bit integers) …",null,[[],["__m512i",3]]],[5,"_mm512_loadu_epi8","","Load 512-bits (composed of 64 packed 8-bit integers) from …",null,[[],["__m512i",3]]],[5,"_mm512_storeu_epi16","","Store 512-bits (composed of 32 packed 16-bit integers) …",null,[[["__m512i",3]]]],[5,"_mm512_storeu_epi8","","Store 512-bits (composed of 64 packed 8-bit integers) …",null,[[["__m512i",3]]]],[5,"_mm512_madd_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_madd_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_madd_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm256_mask_madd_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_madd_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_madd_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_madd_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_maddubs_epi16","","Vertically multiply each unsigned 8-bit integer from a …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_maddubs_epi16","","Multiply packed unsigned 8-bit integers in a by packed …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_maddubs_epi16","","Multiply packed unsigned 8-bit integers in a by packed …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_maddubs_epi16","","Multiply packed unsigned 8-bit integers in a by packed …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_maddubs_epi16","","Multiply packed unsigned 8-bit integers in a by packed …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_maddubs_epi16","","Multiply packed unsigned 8-bit integers in a by packed …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_maddubs_epi16","","Multiply packed unsigned 8-bit integers in a by packed …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_packs_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_packs_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_packs_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_packs_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_packs_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_packs_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_packs_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_packs_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_packs_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_packs_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_packs_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_packs_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_packs_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_packs_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_packus_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_packus_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_packus_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_packus_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_packus_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_packus_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_packus_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_packus_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_packus_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_packus_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_packus_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_packus_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_packus_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_packus_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_avg_epu16","","Average packed unsigned 16-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_avg_epu16","","Average packed unsigned 16-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_avg_epu16","","Average packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_avg_epu16","","Average packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_avg_epu16","","Average packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_avg_epu16","","Average packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_avg_epu16","","Average packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_avg_epu8","","Average packed unsigned 8-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_avg_epu8","","Average packed unsigned 8-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_avg_epu8","","Average packed unsigned 8-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_avg_epu8","","Average packed unsigned 8-bit integers in a and b, and …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_avg_epu8","","Average packed unsigned 8-bit integers in a and b, and …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_avg_epu8","","Average packed unsigned 8-bit integers in a and b, and …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_avg_epu8","","Average packed unsigned 8-bit integers in a and b, and …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_sll_epi16","","Shift packed 16-bit integers in a left by count while …",null,[[["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_sll_epi16","","Shift packed 16-bit integers in a left by count while …",null,[[["__m512i",3],["__mmask32",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_sll_epi16","","Shift packed 16-bit integers in a left by count while …",null,[[["__mmask32",6],["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm256_mask_sll_epi16","","Shift packed 16-bit integers in a left by count while …",null,[[["__m128i",3],["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_sll_epi16","","Shift packed 16-bit integers in a left by count while …",null,[[["__m128i",3],["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_sll_epi16","","Shift packed 16-bit integers in a left by count while …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_sll_epi16","","Shift packed 16-bit integers in a left by count while …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_slli_epi16","","Shift packed 16-bit integers in a left by imm8 while …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_slli_epi16","","Shift packed 16-bit integers in a left by imm8 while …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_slli_epi16","","Shift packed 16-bit integers in a left by imm8 while …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_slli_epi16","","Shift packed 16-bit integers in a left by imm8 while …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_slli_epi16","","Shift packed 16-bit integers in a left by imm8 while …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_slli_epi16","","Shift packed 16-bit integers in a left by imm8 while …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_slli_epi16","","Shift packed 16-bit integers in a left by imm8 while …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_sllv_epi16","","Shift packed 16-bit integers in a left by the amount …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_sllv_epi16","","Shift packed 16-bit integers in a left by the amount …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_sllv_epi16","","Shift packed 16-bit integers in a left by the amount …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_sllv_epi16","","Shift packed 16-bit integers in a left by the amount …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_sllv_epi16","","Shift packed 16-bit integers in a left by the amount …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_sllv_epi16","","Shift packed 16-bit integers in a left by the amount …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_sllv_epi16","","Shift packed 16-bit integers in a left by the amount …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_sllv_epi16","","Shift packed 16-bit integers in a left by the amount …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_sllv_epi16","","Shift packed 16-bit integers in a left by the amount …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_srl_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_srl_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__m512i",3],["__mmask32",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_srl_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__mmask32",6],["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm256_mask_srl_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__m128i",3],["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_srl_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__m128i",3],["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_srl_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_srl_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_srli_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_srli_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_srli_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_srli_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_srli_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_srli_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_srli_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_srlv_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_srlv_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_srlv_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_srlv_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_srlv_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_srlv_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_srlv_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_srlv_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_srlv_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_sra_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_sra_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__m512i",3],["__mmask32",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_sra_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__mmask32",6],["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm256_mask_sra_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__m128i",3],["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_sra_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__m128i",3],["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_sra_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_sra_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_srai_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_srai_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_srai_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_srai_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_srai_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_srai_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_srai_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_srav_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_srav_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_srav_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_srav_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_srav_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_srav_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_srav_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_srav_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_srav_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_permutex2var_epi16","","Shuffle 16-bit integers in a and b across lanes using the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_permutex2var_epi16","","Shuffle 16-bit integers in a and b across lanes using the …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_permutex2var_epi16","","Shuffle 16-bit integers in a and b across lanes using the …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask2_permutex2var_epi16","","Shuffle 16-bit integers in a and b across lanes using the …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm256_permutex2var_epi16","","Shuffle 16-bit integers in a and b across lanes using the …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_permutex2var_epi16","","Shuffle 16-bit integers in a and b across lanes using the …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_permutex2var_epi16","","Shuffle 16-bit integers in a and b across lanes using the …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask2_permutex2var_epi16","","Shuffle 16-bit integers in a and b across lanes using the …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_permutex2var_epi16","","Shuffle 16-bit integers in a and b across lanes using the …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_permutex2var_epi16","","Shuffle 16-bit integers in a and b across lanes using the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_permutex2var_epi16","","Shuffle 16-bit integers in a and b across lanes using the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_mask2_permutex2var_epi16","","Shuffle 16-bit integers in a and b across lanes using the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_permutexvar_epi16","","Shuffle 16-bit integers in a across lanes using the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_permutexvar_epi16","","Shuffle 16-bit integers in a across lanes using the …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_permutexvar_epi16","","Shuffle 16-bit integers in a across lanes using the …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_permutexvar_epi16","","Shuffle 16-bit integers in a across lanes using the …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_permutexvar_epi16","","Shuffle 16-bit integers in a across lanes using the …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_permutexvar_epi16","","Shuffle 16-bit integers in a across lanes using the …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_permutexvar_epi16","","Shuffle 16-bit integers in a across lanes using the …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_permutexvar_epi16","","Shuffle 16-bit integers in a across lanes using the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_permutexvar_epi16","","Shuffle 16-bit integers in a across lanes using the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_mask_blend_epi16","","Blend packed 16-bit integers from a and b using control …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_blend_epi16","","Blend packed 16-bit integers from a and b using control …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_blend_epi16","","Blend packed 16-bit integers from a and b using control …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_mask_blend_epi8","","Blend packed 8-bit integers from a and b using control …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_blend_epi8","","Blend packed 8-bit integers from a and b using control …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_blend_epi8","","Blend packed 8-bit integers from a and b using control …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_broadcastw_epi16","","Broadcast the low packed 16-bit integer from a to all …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_broadcastw_epi16","","Broadcast the low packed 16-bit integer from a to all …",null,[[["__m512i",3],["__mmask32",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_broadcastw_epi16","","Broadcast the low packed 16-bit integer from a to all …",null,[[["__mmask32",6],["__m128i",3]],["__m512i",3]]],[5,"_mm256_mask_broadcastw_epi16","","Broadcast the low packed 16-bit integer from a to all …",null,[[["__m128i",3],["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_broadcastw_epi16","","Broadcast the low packed 16-bit integer from a to all …",null,[[["__mmask16",6],["__m128i",3]],["__m256i",3]]],[5,"_mm_mask_broadcastw_epi16","","Broadcast the low packed 16-bit integer from a to all …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_broadcastw_epi16","","Broadcast the low packed 16-bit integer from a to all …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_broadcastb_epi8","","Broadcast the low packed 8-bit integer from a to all …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_broadcastb_epi8","","Broadcast the low packed 8-bit integer from a to all …",null,[[["__m512i",3],["__m128i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_broadcastb_epi8","","Broadcast the low packed 8-bit integer from a to all …",null,[[["__m128i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_broadcastb_epi8","","Broadcast the low packed 8-bit integer from a to all …",null,[[["__mmask32",6],["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_broadcastb_epi8","","Broadcast the low packed 8-bit integer from a to all …",null,[[["__mmask32",6],["__m128i",3]],["__m256i",3]]],[5,"_mm_mask_broadcastb_epi8","","Broadcast the low packed 8-bit integer from a to all …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_broadcastb_epi8","","Broadcast the low packed 8-bit integer from a to all …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_unpackhi_epi16","","Unpack and interleave 16-bit integers from the high half …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_unpackhi_epi16","","Unpack and interleave 16-bit integers from the high half …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_unpackhi_epi16","","Unpack and interleave 16-bit integers from the high half …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_unpackhi_epi16","","Unpack and interleave 16-bit integers from the high half …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_unpackhi_epi16","","Unpack and interleave 16-bit integers from the high half …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_unpackhi_epi16","","Unpack and interleave 16-bit integers from the high half …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_unpackhi_epi16","","Unpack and interleave 16-bit integers from the high half …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_unpackhi_epi8","","Unpack and interleave 8-bit integers from the high half …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_unpackhi_epi8","","Unpack and interleave 8-bit integers from the high half …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_unpackhi_epi8","","Unpack and interleave 8-bit integers from the high half …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_unpackhi_epi8","","Unpack and interleave 8-bit integers from the high half …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_unpackhi_epi8","","Unpack and interleave 8-bit integers from the high half …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_unpackhi_epi8","","Unpack and interleave 8-bit integers from the high half …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_unpackhi_epi8","","Unpack and interleave 8-bit integers from the high half …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_unpacklo_epi16","","Unpack and interleave 16-bit integers from the low half …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_unpacklo_epi16","","Unpack and interleave 16-bit integers from the low half …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_unpacklo_epi16","","Unpack and interleave 16-bit integers from the low half …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_unpacklo_epi16","","Unpack and interleave 16-bit integers from the low half …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_unpacklo_epi16","","Unpack and interleave 16-bit integers from the low half …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_unpacklo_epi16","","Unpack and interleave 16-bit integers from the low half …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_unpacklo_epi16","","Unpack and interleave 16-bit integers from the low half …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_unpacklo_epi8","","Unpack and interleave 8-bit integers from the low half of …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_unpacklo_epi8","","Unpack and interleave 8-bit integers from the low half of …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_unpacklo_epi8","","Unpack and interleave 8-bit integers from the low half of …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_unpacklo_epi8","","Unpack and interleave 8-bit integers from the low half of …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_unpacklo_epi8","","Unpack and interleave 8-bit integers from the low half of …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_unpacklo_epi8","","Unpack and interleave 8-bit integers from the low half of …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_unpacklo_epi8","","Unpack and interleave 8-bit integers from the low half of …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_mask_mov_epi16","","Move packed 16-bit integers from a into dst using …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_mov_epi16","","Move packed 16-bit integers from a into dst using …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_mov_epi16","","Move packed 16-bit integers from a into dst using …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_mov_epi16","","Move packed 16-bit integers from a into dst using …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_mov_epi16","","Move packed 16-bit integers from a into dst using …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_mov_epi16","","Move packed 16-bit integers from a into dst using …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_mask_mov_epi8","","Move packed 8-bit integers from a into dst using …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_mov_epi8","","Move packed 8-bit integers from a into dst using zeromask …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_mov_epi8","","Move packed 8-bit integers from a into dst using …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_mov_epi8","","Move packed 8-bit integers from a into dst using zeromask …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_mov_epi8","","Move packed 8-bit integers from a into dst using …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_mov_epi8","","Move packed 8-bit integers from a into dst using zeromask …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_mask_set1_epi16","","Broadcast 16-bit integer a to all elements of dst using …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_set1_epi16","","Broadcast the low packed 16-bit integer from a to all …",null,[[["__mmask32",6]],["__m512i",3]]],[5,"_mm256_mask_set1_epi16","","Broadcast 16-bit integer a to all elements of dst using …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_set1_epi16","","Broadcast the low packed 16-bit integer from a to all …",null,[[["__mmask16",6]],["__m256i",3]]],[5,"_mm_mask_set1_epi16","","Broadcast 16-bit integer a to all elements of dst using …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_set1_epi16","","Broadcast the low packed 16-bit integer from a to all …",null,[[["__mmask8",6]],["__m128i",3]]],[5,"_mm512_mask_set1_epi8","","Broadcast 8-bit integer a to all elements of dst using …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_set1_epi8","","Broadcast 8-bit integer a to all elements of dst using …",null,[[["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_set1_epi8","","Broadcast 8-bit integer a to all elements of dst using …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_set1_epi8","","Broadcast 8-bit integer a to all elements of dst using …",null,[[["__mmask32",6]],["__m256i",3]]],[5,"_mm_mask_set1_epi8","","Broadcast 8-bit integer a to all elements of dst using …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_set1_epi8","","Broadcast 8-bit integer a to all elements of dst using …",null,[[["__mmask16",6]],["__m128i",3]]],[5,"_mm512_shufflelo_epi16","","Shuffle 16-bit integers in the low 64 bits of 128-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_shufflelo_epi16","","Shuffle 16-bit integers in the low 64 bits of 128-bit …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_shufflelo_epi16","","Shuffle 16-bit integers in the low 64 bits of 128-bit …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm512_shufflehi_epi16","","Shuffle 16-bit integers in the high 64 bits of 128-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_shufflehi_epi16","","Shuffle 16-bit integers in the high 64 bits of 128-bit …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_shufflehi_epi16","","Shuffle 16-bit integers in the high 64 bits of 128-bit …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm512_shuffle_epi8","","Shuffle packed 8-bit integers in a according to shuffle …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_shuffle_epi8","","Shuffle 8-bit integers in a within 128-bit lanes using …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_shuffle_epi8","","Shuffle packed 8-bit integers in a according to shuffle …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_test_epi16_mask","","Compute the bitwise AND of packed 16-bit integers in a …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_test_epi16_mask","","Compute the bitwise AND of packed 16-bit integers in a …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_test_epi8_mask","","Compute the bitwise AND of packed 8-bit integers in a and …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_test_epi8_mask","","Compute the bitwise AND of packed 8-bit integers in a and …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_testn_epi16_mask","","Compute the bitwise NAND of packed 16-bit integers in a …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_testn_epi16_mask","","Compute the bitwise NAND of packed 16-bit integers in a …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_testn_epi8_mask","","Compute the bitwise NAND of packed 8-bit integers in a …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_testn_epi8_mask","","Compute the bitwise NAND of packed 8-bit integers in a …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_store_mask64","","Store 64-bit mask from a into memory.",null,[[["__mmask64",6]]]],[5,"_store_mask32","","Store 32-bit mask from a into memory.",null,[[["__mmask32",6]]]],[5,"_load_mask64","","Load 64-bit mask from memory into k.",null,[[],["__mmask64",6]]],[5,"_load_mask32","","Load 32-bit mask from memory into k.",null,[[],["__mmask32",6]]],[5,"_mm512_sad_epu8","","Compute the absolute differences of packed unsigned 8-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_dbsad_epu8","","Compute the sum of absolute differences (SADs) of …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_dbsad_epu8","","Compute the sum of absolute differences (SADs) of …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_dbsad_epu8","","Compute the sum of absolute differences (SADs) of …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm512_movepi16_mask","","Set each bit of mask register k based on the most …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_movepi8_mask","","Set each bit of mask register k based on the most …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_movm_epi16","","Set each packed 16-bit integer in dst to all ones or all …",null,[[["__mmask32",6]],["__m512i",3]]],[5,"_mm512_movm_epi8","","Set each packed 8-bit integer in dst to all ones or all …",null,[[["__mmask64",6]],["__m512i",3]]],[5,"_kadd_mask32","","Add 32-bit masks in a and b, and store the result in k.",null,[[["__mmask32",6]],["__mmask32",6]]],[5,"_kadd_mask64","","Add 64-bit masks in a and b, and store the result in k.",null,[[["__mmask64",6]],["__mmask64",6]]],[5,"_kand_mask32","","Compute the bitwise AND of 32-bit masks a and b, and …",null,[[["__mmask32",6]],["__mmask32",6]]],[5,"_kand_mask64","","Compute the bitwise AND of 64-bit masks a and b, and …",null,[[["__mmask64",6]],["__mmask64",6]]],[5,"_knot_mask32","","Compute the bitwise NOT of 32-bit mask a, and store the …",null,[[["__mmask32",6]],["__mmask32",6]]],[5,"_knot_mask64","","Compute the bitwise NOT of 64-bit mask a, and store the …",null,[[["__mmask64",6]],["__mmask64",6]]],[5,"_kandn_mask32","","Compute the bitwise NOT of 32-bit masks a and then AND …",null,[[["__mmask32",6]],["__mmask32",6]]],[5,"_kandn_mask64","","Compute the bitwise NOT of 64-bit masks a and then AND …",null,[[["__mmask64",6]],["__mmask64",6]]],[5,"_kor_mask32","","Compute the bitwise OR of 32-bit masks a and b, and store …",null,[[["__mmask32",6]],["__mmask32",6]]],[5,"_kor_mask64","","Compute the bitwise OR of 64-bit masks a and b, and store …",null,[[["__mmask64",6]],["__mmask64",6]]],[5,"_kxor_mask32","","Compute the bitwise XOR of 32-bit masks a and b, and …",null,[[["__mmask32",6]],["__mmask32",6]]],[5,"_kxor_mask64","","Compute the bitwise XOR of 64-bit masks a and b, and …",null,[[["__mmask64",6]],["__mmask64",6]]],[5,"_kxnor_mask32","","Compute the bitwise XNOR of 32-bit masks a and b, and …",null,[[["__mmask32",6]],["__mmask32",6]]],[5,"_kxnor_mask64","","Compute the bitwise XNOR of 64-bit masks a and b, and …",null,[[["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cvtepi16_epi8","","Convert packed 16-bit integers in a to packed 8-bit …",null,[[["__m512i",3]],["__m256i",3]]],[5,"_mm512_mask_cvtepi16_epi8","","Convert packed 16-bit integers in a to packed 8-bit …",null,[[["__mmask32",6],["__m512i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvtepi16_epi8","","Convert packed 16-bit integers in a to packed 8-bit …",null,[[["__mmask32",6],["__m512i",3]],["__m256i",3]]],[5,"_mm512_cvtsepi16_epi8","","Convert packed signed 16-bit integers in a to packed …",null,[[["__m512i",3]],["__m256i",3]]],[5,"_mm512_mask_cvtsepi16_epi8","","Convert packed signed 16-bit integers in a to packed …",null,[[["__mmask32",6],["__m512i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvtsepi16_epi8","","Convert packed signed 16-bit integers in a to packed …",null,[[["__mmask32",6],["__m512i",3]],["__m256i",3]]],[5,"_mm512_cvtusepi16_epi8","","Convert packed unsigned 16-bit integers in a to packed …",null,[[["__m512i",3]],["__m256i",3]]],[5,"_mm512_mask_cvtusepi16_epi8","","Convert packed unsigned 16-bit integers in a to packed …",null,[[["__mmask32",6],["__m512i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvtusepi16_epi8","","Convert packed unsigned 16-bit integers in a to packed …",null,[[["__mmask32",6],["__m512i",3]],["__m256i",3]]],[5,"_mm512_cvtepi8_epi16","","Sign extend packed 8-bit integers in a to packed 16-bit …",null,[[["__m256i",3]],["__m512i",3]]],[5,"_mm512_mask_cvtepi8_epi16","","Sign extend packed 8-bit integers in a to packed 16-bit …",null,[[["__m512i",3],["__mmask32",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_maskz_cvtepi8_epi16","","Sign extend packed 8-bit integers in a to packed 16-bit …",null,[[["__mmask32",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_cvtepu8_epi16","","Zero extend packed unsigned 8-bit integers in a to packed …",null,[[["__m256i",3]],["__m512i",3]]],[5,"_mm512_mask_cvtepu8_epi16","","Zero extend packed unsigned 8-bit integers in a to packed …",null,[[["__m512i",3],["__mmask32",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_maskz_cvtepu8_epi16","","Zero extend packed unsigned 8-bit integers in a to packed …",null,[[["__mmask32",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_bslli_epi128","","Shift 128-bit lanes in a left by imm8 bytes while …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_bsrli_epi128","","Shift 128-bit lanes in a right by imm8 bytes while …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_alignr_epi8","","Concatenate pairs of 16-byte blocks in a and b into a …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_alignr_epi8","","Concatenate pairs of 16-byte blocks in a and b into a …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_alignr_epi8","","Concatenate pairs of 16-byte blocks in a and b into a …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_broadcastmw_epi32","","Broadcast the low 16-bits from input mask k to all 32-bit …",null,[[["__mmask16",6]],["__m512i",3]]],[5,"_mm256_broadcastmw_epi32","","Broadcast the low 16-bits from input mask k to all 32-bit …",null,[[["__mmask16",6]],["__m256i",3]]],[5,"_mm_broadcastmw_epi32","","Broadcast the low 16-bits from input mask k to all 32-bit …",null,[[["__mmask16",6]],["__m128i",3]]],[5,"_mm512_broadcastmb_epi64","","Broadcast the low 8-bits from input mask k to all 64-bit …",null,[[["__mmask8",6]],["__m512i",3]]],[5,"_mm256_broadcastmb_epi64","","Broadcast the low 8-bits from input mask k to all 64-bit …",null,[[["__mmask8",6]],["__m256i",3]]],[5,"_mm_broadcastmb_epi64","","Broadcast the low 8-bits from input mask k to all 64-bit …",null,[[["__mmask8",6]],["__m128i",3]]],[5,"_mm512_conflict_epi32","","Test each 32-bit element of a for equality with all other …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_conflict_epi32","","Test each 32-bit element of a for equality with all other …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_conflict_epi32","","Test each 32-bit element of a for equality with all other …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm256_conflict_epi32","","Test each 32-bit element of a for equality with all other …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_conflict_epi32","","Test each 32-bit element of a for equality with all other …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_conflict_epi32","","Test each 32-bit element of a for equality with all other …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_conflict_epi32","","Test each 32-bit element of a for equality with all other …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_conflict_epi32","","Test each 32-bit element of a for equality with all other …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_conflict_epi32","","Test each 32-bit element of a for equality with all other …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_conflict_epi64","","Test each 64-bit element of a for equality with all other …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_conflict_epi64","","Test each 64-bit element of a for equality with all other …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_conflict_epi64","","Test each 64-bit element of a for equality with all other …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm256_conflict_epi64","","Test each 64-bit element of a for equality with all other …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_conflict_epi64","","Test each 64-bit element of a for equality with all other …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_conflict_epi64","","Test each 64-bit element of a for equality with all other …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_conflict_epi64","","Test each 64-bit element of a for equality with all other …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_conflict_epi64","","Test each 64-bit element of a for equality with all other …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_conflict_epi64","","Test each 64-bit element of a for equality with all other …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_lzcnt_epi32","","Counts the number of leading zero bits in each packed …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_lzcnt_epi32","","Counts the number of leading zero bits in each packed …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_lzcnt_epi32","","Counts the number of leading zero bits in each packed …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm256_lzcnt_epi32","","Counts the number of leading zero bits in each packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_lzcnt_epi32","","Counts the number of leading zero bits in each packed …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_lzcnt_epi32","","Counts the number of leading zero bits in each packed …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_lzcnt_epi32","","Counts the number of leading zero bits in each packed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_lzcnt_epi32","","Counts the number of leading zero bits in each packed …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_lzcnt_epi32","","Counts the number of leading zero bits in each packed …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_lzcnt_epi64","","Counts the number of leading zero bits in each packed …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_lzcnt_epi64","","Counts the number of leading zero bits in each packed …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_lzcnt_epi64","","Counts the number of leading zero bits in each packed …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm256_lzcnt_epi64","","Counts the number of leading zero bits in each packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_lzcnt_epi64","","Counts the number of leading zero bits in each packed …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_lzcnt_epi64","","Counts the number of leading zero bits in each packed …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_lzcnt_epi64","","Counts the number of leading zero bits in each packed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_lzcnt_epi64","","Counts the number of leading zero bits in each packed …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_lzcnt_epi64","","Counts the number of leading zero bits in each packed …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_madd52hi_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_madd52lo_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm256_madd52hi_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_madd52lo_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_madd52hi_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_madd52lo_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm512_popcnt_epi16","","For each packed 16-bit integer maps the value to the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_maskz_popcnt_epi16","","For each packed 16-bit integer maps the value to the …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_popcnt_epi16","","For each packed 16-bit integer maps the value to the …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm256_popcnt_epi16","","For each packed 16-bit integer maps the value to the …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_popcnt_epi16","","For each packed 16-bit integer maps the value to the …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_popcnt_epi16","","For each packed 16-bit integer maps the value to the …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_popcnt_epi16","","For each packed 16-bit integer maps the value to the …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_popcnt_epi16","","For each packed 16-bit integer maps the value to the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_popcnt_epi16","","For each packed 16-bit integer maps the value to the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_popcnt_epi8","","For each packed 8-bit integer maps the value to the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_maskz_popcnt_epi8","","For each packed 8-bit integer maps the value to the …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_mask_popcnt_epi8","","For each packed 8-bit integer maps the value to the …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_popcnt_epi8","","For each packed 8-bit integer maps the value to the …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_popcnt_epi8","","For each packed 8-bit integer maps the value to the …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_popcnt_epi8","","For each packed 8-bit integer maps the value to the …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_popcnt_epi8","","For each packed 8-bit integer maps the value to the …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_popcnt_epi8","","For each packed 8-bit integer maps the value to the …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_popcnt_epi8","","For each packed 8-bit integer maps the value to the …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm512_bitshuffle_epi64_mask","","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_bitshuffle_epi64_mask","","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm256_bitshuffle_epi64_mask","","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …",null,[[["__m256i",3]],["__mmask32",6]]],[5,"_mm256_mask_bitshuffle_epi64_mask","","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …",null,[[["__mmask32",6],["__m256i",3]],["__mmask32",6]]],[5,"_mm_bitshuffle_epi64_mask","","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …",null,[[["__m128i",3]],["__mmask16",6]]],[5,"_mm_mask_bitshuffle_epi64_mask","","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …",null,[[["__mmask16",6],["__m128i",3]],["__mmask16",6]]],[5,"_mm512_gf2p8mul_epi8","","Performs a multiplication in GF(2^8) on the packed bytes. …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_gf2p8mul_epi8","","Performs a multiplication in GF(2^8) on the packed bytes. …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_gf2p8mul_epi8","","Performs a multiplication in GF(2^8) on the packed bytes. …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_gf2p8mul_epi8","","Performs a multiplication in GF(2^8) on the packed bytes. …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_gf2p8mul_epi8","","Performs a multiplication in GF(2^8) on the packed bytes. …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_gf2p8mul_epi8","","Performs a multiplication in GF(2^8) on the packed bytes. …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_gf2p8mul_epi8","","Performs a multiplication in GF(2^8) on the packed bytes. …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_gf2p8mul_epi8","","Performs a multiplication in GF(2^8) on the packed bytes. …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_gf2p8mul_epi8","","Performs a multiplication in GF(2^8) on the packed bytes. …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_gf2p8affine_epi64_epi8","","Performs an affine transformation on the packed bytes in …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_maskz_gf2p8affine_epi64_epi8","","Performs an affine transformation on the packed bytes in …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_mask_gf2p8affine_epi64_epi8","","Performs an affine transformation on the packed bytes in …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_gf2p8affine_epi64_epi8","","Performs an affine transformation on the packed bytes in …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_gf2p8affine_epi64_epi8","","Performs an affine transformation on the packed bytes in …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_gf2p8affine_epi64_epi8","","Performs an affine transformation on the packed bytes in …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_gf2p8affine_epi64_epi8","","Performs an affine transformation on the packed bytes in …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_gf2p8affine_epi64_epi8","","Performs an affine transformation on the packed bytes in …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_gf2p8affine_epi64_epi8","","Performs an affine transformation on the packed bytes in …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm512_gf2p8affineinv_epi64_epi8","","Performs an affine transformation on the inverted packed …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_maskz_gf2p8affineinv_epi64_epi8","","Performs an affine transformation on the inverted packed …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_mask_gf2p8affineinv_epi64_epi8","","Performs an affine transformation on the inverted packed …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_gf2p8affineinv_epi64_epi8","","Performs an affine transformation on the inverted packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_gf2p8affineinv_epi64_epi8","","Performs an affine transformation on the inverted packed …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_gf2p8affineinv_epi64_epi8","","Performs an affine transformation on the inverted packed …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_gf2p8affineinv_epi64_epi8","","Performs an affine transformation on the inverted packed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_gf2p8affineinv_epi64_epi8","","Performs an affine transformation on the inverted packed …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_gf2p8affineinv_epi64_epi8","","Performs an affine transformation on the inverted packed …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm512_popcnt_epi32","","For each packed 32-bit integer maps the value to the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_maskz_popcnt_epi32","","For each packed 32-bit integer maps the value to the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_mask_popcnt_epi32","","For each packed 32-bit integer maps the value to the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm256_popcnt_epi32","","For each packed 32-bit integer maps the value to the …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_popcnt_epi32","","For each packed 32-bit integer maps the value to the …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_popcnt_epi32","","For each packed 32-bit integer maps the value to the …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_popcnt_epi32","","For each packed 32-bit integer maps the value to the …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_popcnt_epi32","","For each packed 32-bit integer maps the value to the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_popcnt_epi32","","For each packed 32-bit integer maps the value to the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_popcnt_epi64","","For each packed 64-bit integer maps the value to the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_maskz_popcnt_epi64","","For each packed 64-bit integer maps the value to the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_mask_popcnt_epi64","","For each packed 64-bit integer maps the value to the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm256_popcnt_epi64","","For each packed 64-bit integer maps the value to the …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_popcnt_epi64","","For each packed 64-bit integer maps the value to the …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_popcnt_epi64","","For each packed 64-bit integer maps the value to the …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_popcnt_epi64","","For each packed 64-bit integer maps the value to the …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_popcnt_epi64","","For each packed 64-bit integer maps the value to the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_popcnt_epi64","","For each packed 64-bit integer maps the value to the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm256_aesenc_epi128","","Performs one round of an AES encryption flow on each …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_aesenclast_epi128","","Performs the last round of an AES encryption flow on each …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_aesdec_epi128","","Performs one round of an AES decryption flow on each …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_aesdeclast_epi128","","Performs the last round of an AES decryption flow on each …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm512_aesenc_epi128","","Performs one round of an AES encryption flow on each …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_aesenclast_epi128","","Performs the last round of an AES encryption flow on each …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_aesdec_epi128","","Performs one round of an AES decryption flow on each …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_aesdeclast_epi128","","Performs the last round of an AES decryption flow on each …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_clmulepi64_epi128","","Performs a carry-less multiplication of two 64-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm256_clmulepi64_epi128","","Performs a carry-less multiplication of two 64-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_bittest","","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…",null,[[]]],[5,"_bittestandset","","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…",null,[[]]],[5,"_bittestandreset","","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…",null,[[]]],[5,"_bittestandcomplement","","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…",null,[[]]],[17,"_XBEGIN_STARTED","","Transaction successfully started.",null,null],[17,"_XABORT_EXPLICIT","","Transaction explicitly aborted with xabort. The parameter …",null,null],[17,"_XABORT_RETRY","","Transaction retry is possible.",null,null],[17,"_XABORT_CONFLICT","","Transaction abort due to a memory conflict with another …",null,null],[17,"_XABORT_CAPACITY","","Transaction abort due to the transaction using too much …",null,null],[17,"_XABORT_DEBUG","","Transaction abort due to a debug trap.",null,null],[17,"_XABORT_NESTED","","Transaction abort in a inner nested transaction.",null,null],[5,"_xbegin","","Specifies the start of a restricted transactional memory …",null,[[]]],[5,"_xend","","Specifies the end of a restricted transactional memory …",null,[[]]],[5,"_xabort","","Forces a restricted transactional memory (RTM) region to …",null,[[]]],[5,"_xtest","","Queries whether the processor is executing in a …",null,[[]]],[5,"_xabort_code","","Retrieves the parameter passed to [<code>_xabort</code>] when [<code>_xbegin</code>]…",null,[[]]],[5,"_mm_cvtph_ps","","Converts the 4 x 16-bit half-precision float values in …",null,[[["__m128i",3]],["__m128",3]]],[5,"_mm256_cvtph_ps","","Converts the 8 x 16-bit half-precision float values in …",null,[[["__m128i",3]],["__m256",3]]],[5,"_mm_cvtps_ph","","Converts the 4 x 32-bit float values in the 128-bit …",null,[[["__m128",3]],["__m128i",3]]],[5,"_mm256_cvtps_ph","","Converts the 8 x 32-bit float values in the 256-bit …",null,[[["__m256",3]],["__m128i",3]]],[0,"x86_64","core::arch","Platform-specific intrinsics for the <code>x86_64</code> platform.",null,null],[3,"__m128i","core::arch::x86_64","128-bit wide integer vector type, x86-specific",null,null],[3,"__m128","","128-bit wide set of four <code>f32</code> types, x86-specific",null,null],[3,"__m128d","","128-bit wide set of two <code>f64</code> types, x86-specific",null,null],[3,"__m256i","","256-bit wide integer vector type, x86-specific",null,null],[3,"__m256","","256-bit wide set of eight <code>f32</code> types, x86-specific",null,null],[3,"__m256d","","256-bit wide set of four <code>f64</code> types, x86-specific",null,null],[3,"__m512i","","512-bit wide integer vector type, x86-specific",null,null],[3,"__m512","","512-bit wide set of sixteen <code>f32</code> types, x86-specific",null,null],[3,"__m512d","","512-bit wide set of eight <code>f64</code> types, x86-specific",null,null],[6,"__mmask64","","The <code>__mmask64</code> type used in AVX-512 intrinsics, a 64-bit …",null,null],[6,"__mmask32","","The <code>__mmask32</code> type used in AVX-512 intrinsics, a 32-bit …",null,null],[6,"__mmask16","","The <code>__mmask16</code> type used in AVX-512 intrinsics, a 16-bit …",null,null],[6,"__mmask8","","The <code>__mmask8</code> type used in AVX-512 intrinsics, a 8-bit …",null,null],[6,"_MM_CMPINT_ENUM","","The <code>_MM_CMPINT_ENUM</code> type used to specify comparison …",null,null],[6,"_MM_MANTISSA_NORM_ENUM","","The <code>MM_MANTISSA_NORM_ENUM</code> type used to specify mantissa …",null,null],[6,"_MM_MANTISSA_SIGN_ENUM","","The <code>MM_MANTISSA_SIGN_ENUM</code> type used to specify mantissa …",null,null],[6,"_MM_PERM_ENUM","","The <code>MM_PERM_ENUM</code> type used to specify shuffle operations …",null,null],[5,"_fxsave","","Saves the <code>x87</code> FPU, <code>MMX</code> technology, <code>XMM</code>, and <code>MXCSR</code> …",null,[[]]],[5,"_fxrstor","","Restores the <code>XMM</code>, <code>MMX</code>, <code>MXCSR</code>, and <code>x87</code> FPU registers from …",null,[[]]],[5,"_bswap","","Returns an integer with the reversed byte order of x",null,[[]]],[5,"_rdtsc","","Reads the current value of the processor’s time-stamp …",null,[[]]],[5,"__rdtscp","","Reads the current value of the processor’s time-stamp …",null,[[]]],[3,"CpuidResult","","Result of the <code>cpuid</code> instruction.",null,null],[12,"eax","","EAX register.",128,null],[12,"ebx","","EBX register.",128,null],[12,"ecx","","ECX register.",128,null],[12,"edx","","EDX register.",128,null],[5,"__cpuid_count","","Returns the result of the <code>cpuid</code> instruction for a given …",null,[[],["cpuidresult",3]]],[5,"__cpuid","","See <code>__cpuid_count</code>.",null,[[],["cpuidresult",3]]],[5,"has_cpuid","","Does the host support the <code>cpuid</code> instruction?",null,[[]]],[5,"__get_cpuid_max","","Returns the highest-supported <code>leaf</code> (<code>EAX</code>) and sub-leaf (<code>ECX</code>…",null,[[]]],[5,"_xsave","","Performs a full or partial save of the enabled processor …",null,[[]]],[5,"_xrstor","","Performs a full or partial restore of the enabled …",null,[[]]],[17,"_XCR_XFEATURE_ENABLED_MASK","","<code>XFEATURE_ENABLED_MASK</code> for <code>XCR</code>",null,null],[5,"_xsetbv","","Copies 64-bits from <code>val</code> to the extended control register (…",null,[[]]],[5,"_xgetbv","","Reads the contents of the extended control register <code>XCR</code> …",null,[[]]],[5,"_xsaveopt","","Performs a full or partial save of the enabled processor …",null,[[]]],[5,"_xsavec","","Performs a full or partial save of the enabled processor …",null,[[]]],[5,"_xsaves","","Performs a full or partial save of the enabled processor …",null,[[]]],[5,"_xrstors","","Performs a full or partial restore of the enabled …",null,[[]]],[5,"_mm_add_ss","","Adds the first component of <code>a</code> and <code>b</code>, the other components …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_add_ps","","Adds __m128 vectors.",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_sub_ss","","Subtracts the first component of <code>b</code> from <code>a</code>, the other …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_sub_ps","","Subtracts __m128 vectors.",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mul_ss","","Multiplies the first component of <code>a</code> and <code>b</code>, the other …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mul_ps","","Multiplies __m128 vectors.",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_div_ss","","Divides the first component of <code>b</code> by <code>a</code>, the other …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_div_ps","","Divides __m128 vectors.",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_sqrt_ss","","Returns the square root of the first single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_sqrt_ps","","Returns the square root of packed single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_rcp_ss","","Returns the approximate reciprocal of the first …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_rcp_ps","","Returns the approximate reciprocal of packed …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_rsqrt_ss","","Returns the approximate reciprocal square root of the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_rsqrt_ps","","Returns the approximate reciprocal square root of packed …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_min_ss","","Compares the first single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_min_ps","","Compares packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_max_ss","","Compares the first single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_max_ps","","Compares packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_and_ps","","Bitwise AND of packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_andnot_ps","","Bitwise AND-NOT of packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_or_ps","","Bitwise OR of packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_xor_ps","","Bitwise exclusive OR of packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpeq_ss","","Compares the lowest <code>f32</code> of both inputs for equality. The …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmplt_ss","","Compares the lowest <code>f32</code> of both inputs for less than. The …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmple_ss","","Compares the lowest <code>f32</code> of both inputs for less than or …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpgt_ss","","Compares the lowest <code>f32</code> of both inputs for greater than. …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpge_ss","","Compares the lowest <code>f32</code> of both inputs for greater than …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpneq_ss","","Compares the lowest <code>f32</code> of both inputs for inequality. …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpnlt_ss","","Compares the lowest <code>f32</code> of both inputs for not-less-than. …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpnle_ss","","Compares the lowest <code>f32</code> of both inputs for …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpngt_ss","","Compares the lowest <code>f32</code> of both inputs for …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpnge_ss","","Compares the lowest <code>f32</code> of both inputs for …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpord_ss","","Checks if the lowest <code>f32</code> of both inputs are ordered. The …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpunord_ss","","Checks if the lowest <code>f32</code> of both inputs are unordered. …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpeq_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmplt_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmple_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpgt_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpge_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpneq_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpnlt_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpnle_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpngt_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpnge_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpord_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpunord_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_comieq_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]]]],[5,"_mm_comilt_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]]]],[5,"_mm_comile_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]]]],[5,"_mm_comigt_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]]]],[5,"_mm_comige_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]]]],[5,"_mm_comineq_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]]]],[5,"_mm_ucomieq_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]]]],[5,"_mm_ucomilt_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]]]],[5,"_mm_ucomile_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]]]],[5,"_mm_ucomigt_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]]]],[5,"_mm_ucomige_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]]]],[5,"_mm_ucomineq_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]]]],[5,"_mm_cvtss_si32","","Converts the lowest 32 bit float in the input vector to a …",null,[[["__m128",3]]]],[5,"_mm_cvt_ss2si","","Alias for <code>_mm_cvtss_si32</code>.",null,[[["__m128",3]]]],[5,"_mm_cvttss_si32","","Converts the lowest 32 bit float in the input vector to a …",null,[[["__m128",3]]]],[5,"_mm_cvtt_ss2si","","Alias for <code>_mm_cvttss_si32</code>.",null,[[["__m128",3]]]],[5,"_mm_cvtss_f32","","Extracts the lowest 32 bit float from the input vector.",null,[[["__m128",3]]]],[5,"_mm_cvtsi32_ss","","Converts a 32 bit integer to a 32 bit float. The result …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cvt_si2ss","","Alias for <code>_mm_cvtsi32_ss</code>.",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_set_ss","","Construct a <code>__m128</code> with the lowest element set to <code>a</code> and …",null,[[],["__m128",3]]],[5,"_mm_set1_ps","","Construct a <code>__m128</code> with all element set to <code>a</code>.",null,[[],["__m128",3]]],[5,"_mm_set_ps1","","Alias for <code>_mm_set1_ps</code>",null,[[],["__m128",3]]],[5,"_mm_set_ps","","Construct a <code>__m128</code> from four floating point values …",null,[[],["__m128",3]]],[5,"_mm_setr_ps","","Construct a <code>__m128</code> from four floating point values lowest …",null,[[],["__m128",3]]],[5,"_mm_setzero_ps","","Construct a <code>__m128</code> with all elements initialized to zero.",null,[[],["__m128",3]]],[5,"_MM_SHUFFLE","","A utility function for creating masks to use with Intel …",null,[[]]],[5,"_mm_shuffle_ps","","Shuffles packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_unpackhi_ps","","Unpacks and interleave single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_unpacklo_ps","","Unpacks and interleave single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_movehl_ps","","Combine higher half of <code>a</code> and <code>b</code>. The highwe half of <code>b</code> …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_movelh_ps","","Combine lower half of <code>a</code> and <code>b</code>. The lower half of <code>b</code> …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_movemask_ps","","Returns a mask of the most significant bit of each …",null,[[["__m128",3]]]],[5,"_mm_load_ss","","Construct a <code>__m128</code> with the lowest element read from <code>p</code> …",null,[[],["__m128",3]]],[5,"_mm_load1_ps","","Construct a <code>__m128</code> by duplicating the value read from <code>p</code> …",null,[[],["__m128",3]]],[5,"_mm_load_ps1","","Alias for <code>_mm_load1_ps</code>",null,[[],["__m128",3]]],[5,"_mm_load_ps","","Loads four <code>f32</code> values from <em>aligned</em> memory into a <code>__m128</code>. …",null,[[],["__m128",3]]],[5,"_mm_loadu_ps","","Loads four <code>f32</code> values from memory into a <code>__m128</code>. There …",null,[[],["__m128",3]]],[5,"_mm_loadr_ps","","Loads four <code>f32</code> values from aligned memory into a <code>__m128</code> …",null,[[],["__m128",3]]],[5,"_mm_loadu_si64","","Loads unaligned 64-bits of integer data from memory into …",null,[[],["__m128i",3]]],[5,"_mm_store_ss","","Stores the lowest 32 bit float of <code>a</code> into memory.",null,[[["__m128",3]]]],[5,"_mm_store1_ps","","Stores the lowest 32 bit float of <code>a</code> repeated four times …",null,[[["__m128",3]]]],[5,"_mm_store_ps1","","Alias for <code>_mm_store1_ps</code>",null,[[["__m128",3]]]],[5,"_mm_store_ps","","Stores four 32-bit floats into <em>aligned</em> memory.",null,[[["__m128",3]]]],[5,"_mm_storeu_ps","","Stores four 32-bit floats into memory. There are no …",null,[[["__m128",3]]]],[5,"_mm_storer_ps","","Stores four 32-bit floats into <em>aligned</em> memory in reverse …",null,[[["__m128",3]]]],[5,"_mm_move_ss","","Returns a <code>__m128</code> with the first component from <code>b</code> and the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_sfence","","Performs a serializing operation on all store-to-memory …",null,[[]]],[5,"_mm_getcsr","","Gets the unsigned 32-bit value of the MXCSR control and …",null,[[]]],[5,"_mm_setcsr","","Sets the MXCSR register with the 32-bit unsigned integer …",null,[[]]],[17,"_MM_EXCEPT_INVALID","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_EXCEPT_DENORM","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_EXCEPT_DIV_ZERO","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_EXCEPT_OVERFLOW","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_EXCEPT_UNDERFLOW","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_EXCEPT_INEXACT","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_EXCEPT_MASK","","See <code>_MM_GET_EXCEPTION_STATE</code>",null,null],[17,"_MM_MASK_INVALID","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_MASK_DENORM","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_MASK_DIV_ZERO","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_MASK_OVERFLOW","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_MASK_UNDERFLOW","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_MASK_INEXACT","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_MASK_MASK","","See <code>_MM_GET_EXCEPTION_MASK</code>",null,null],[17,"_MM_ROUND_NEAREST","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_ROUND_DOWN","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_ROUND_UP","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_ROUND_TOWARD_ZERO","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_ROUND_MASK","","See <code>_MM_GET_ROUNDING_MODE</code>",null,null],[17,"_MM_FLUSH_ZERO_MASK","","See <code>_MM_GET_FLUSH_ZERO_MODE</code>",null,null],[17,"_MM_FLUSH_ZERO_ON","","See <code>_mm_setcsr</code>",null,null],[17,"_MM_FLUSH_ZERO_OFF","","See <code>_mm_setcsr</code>",null,null],[5,"_MM_GET_EXCEPTION_MASK","","See <code>_mm_setcsr</code>",null,[[]]],[5,"_MM_GET_EXCEPTION_STATE","","See <code>_mm_setcsr</code>",null,[[]]],[5,"_MM_GET_FLUSH_ZERO_MODE","","See <code>_mm_setcsr</code>",null,[[]]],[5,"_MM_GET_ROUNDING_MODE","","See <code>_mm_setcsr</code>",null,[[]]],[5,"_MM_SET_EXCEPTION_MASK","","See <code>_mm_setcsr</code>",null,[[]]],[5,"_MM_SET_EXCEPTION_STATE","","See <code>_mm_setcsr</code>",null,[[]]],[5,"_MM_SET_FLUSH_ZERO_MODE","","See <code>_mm_setcsr</code>",null,[[]]],[5,"_MM_SET_ROUNDING_MODE","","See <code>_mm_setcsr</code>",null,[[]]],[17,"_MM_HINT_T0","","See <code>_mm_prefetch</code>.",null,null],[17,"_MM_HINT_T1","","See <code>_mm_prefetch</code>.",null,null],[17,"_MM_HINT_T2","","See <code>_mm_prefetch</code>.",null,null],[17,"_MM_HINT_NTA","","See <code>_mm_prefetch</code>.",null,null],[5,"_mm_prefetch","","Fetch the cache line that contains address <code>p</code> using the …",null,[[]]],[5,"_mm_undefined_ps","","Returns vector of type __m128 with undefined elements.",null,[[],["__m128",3]]],[5,"_MM_TRANSPOSE4_PS","","Transpose the 4x4 matrix formed by 4 rows of __m128 in …",null,[[["__m128",3]]]],[5,"_mm_stream_ps","","Stores <code>a</code> into the memory at <code>mem_addr</code> using a non-temporal …",null,[[["__m128",3]]]],[5,"_mm_pause","","Provides a hint to the processor that the code sequence …",null,[[]]],[5,"_mm_clflush","","Invalidates and flushes the cache line that contains <code>p</code> …",null,[[]]],[5,"_mm_lfence","","Performs a serializing operation on all load-from-memory …",null,[[]]],[5,"_mm_mfence","","Performs a serializing operation on all load-from-memory …",null,[[]]],[5,"_mm_add_epi8","","Adds packed 8-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_add_epi16","","Adds packed 16-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_add_epi32","","Adds packed 32-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_add_epi64","","Adds packed 64-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_adds_epi8","","Adds packed 8-bit integers in <code>a</code> and <code>b</code> using saturation.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_adds_epi16","","Adds packed 16-bit integers in <code>a</code> and <code>b</code> using saturation.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_adds_epu8","","Adds packed unsigned 8-bit integers in <code>a</code> and <code>b</code> using …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_adds_epu16","","Adds packed unsigned 16-bit integers in <code>a</code> and <code>b</code> using …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_avg_epu8","","Averages packed unsigned 8-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_avg_epu16","","Averages packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_madd_epi16","","Multiplies and then horizontally add signed 16 bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_max_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_max_epu8","","Compares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_min_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_min_epu8","","Compares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mulhi_epi16","","Multiplies the packed 16-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mulhi_epu16","","Multiplies the packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mullo_epi16","","Multiplies the packed 16-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mul_epu32","","Multiplies the low unsigned 32-bit integers from each …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sad_epu8","","Sum the absolute differences of packed unsigned 8-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sub_epi8","","Subtracts packed 8-bit integers in <code>b</code> from packed 8-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sub_epi16","","Subtracts packed 16-bit integers in <code>b</code> from packed 16-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sub_epi32","","Subtract packed 32-bit integers in <code>b</code> from packed 32-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sub_epi64","","Subtract packed 64-bit integers in <code>b</code> from packed 64-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_subs_epi8","","Subtract packed 8-bit integers in <code>b</code> from packed 8-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_subs_epi16","","Subtract packed 16-bit integers in <code>b</code> from packed 16-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_subs_epu8","","Subtract packed unsigned 8-bit integers in <code>b</code> from packed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_subs_epu16","","Subtract packed unsigned 16-bit integers in <code>b</code> from packed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_slli_si128","","Shifts <code>a</code> left by <code>imm8</code> bytes while shifting in zeros.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_bslli_si128","","Shifts <code>a</code> left by <code>imm8</code> bytes while shifting in zeros.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_bsrli_si128","","Shifts <code>a</code> right by <code>imm8</code> bytes while shifting in zeros.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_slli_epi16","","Shifts packed 16-bit integers in <code>a</code> left by <code>imm8</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sll_epi16","","Shifts packed 16-bit integers in <code>a</code> left by <code>count</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_slli_epi32","","Shifts packed 32-bit integers in <code>a</code> left by <code>imm8</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sll_epi32","","Shifts packed 32-bit integers in <code>a</code> left by <code>count</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_slli_epi64","","Shifts packed 64-bit integers in <code>a</code> left by <code>imm8</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sll_epi64","","Shifts packed 64-bit integers in <code>a</code> left by <code>count</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srai_epi16","","Shifts packed 16-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sra_epi16","","Shifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srai_epi32","","Shifts packed 32-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sra_epi32","","Shifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srli_si128","","Shifts <code>a</code> right by <code>imm8</code> bytes while shifting in zeros.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srli_epi16","","Shifts packed 16-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srl_epi16","","Shifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srli_epi32","","Shifts packed 32-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srl_epi32","","Shifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srli_epi64","","Shifts packed 64-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srl_epi64","","Shifts packed 64-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_and_si128","","Computes the bitwise AND of 128 bits (representing …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_andnot_si128","","Computes the bitwise NOT of 128 bits (representing …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_or_si128","","Computes the bitwise OR of 128 bits (representing integer …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_xor_si128","","Computes the bitwise XOR of 128 bits (representing …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpeq_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for equality.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpeq_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for equality.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpeq_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for equality.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpgt_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpgt_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpgt_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmplt_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for less-than.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmplt_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for less-than.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmplt_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for less-than.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi32_pd","","Converts the lower two packed 32-bit integers in <code>a</code> to …",null,[[["__m128i",3]],["__m128d",3]]],[5,"_mm_cvtsi32_sd","","Returns <code>a</code> with its lower element replaced by <code>b</code> after …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cvtepi32_ps","","Converts packed 32-bit integers in <code>a</code> to packed …",null,[[["__m128i",3]],["__m128",3]]],[5,"_mm_cvtps_epi32","","Converts packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128i",3]]],[5,"_mm_cvtsi32_si128","","Returns a vector whose lowest element is <code>a</code> and all higher …",null,[[],["__m128i",3]]],[5,"_mm_cvtsi128_si32","","Returns the lowest element of <code>a</code>.",null,[[["__m128i",3]]]],[5,"_mm_set_epi64x","","Sets packed 64-bit integers with the supplied values, …",null,[[],["__m128i",3]]],[5,"_mm_set_epi32","","Sets packed 32-bit integers with the supplied values.",null,[[],["__m128i",3]]],[5,"_mm_set_epi16","","Sets packed 16-bit integers with the supplied values.",null,[[],["__m128i",3]]],[5,"_mm_set_epi8","","Sets packed 8-bit integers with the supplied values.",null,[[],["__m128i",3]]],[5,"_mm_set1_epi64x","","Broadcasts 64-bit integer <code>a</code> to all elements.",null,[[],["__m128i",3]]],[5,"_mm_set1_epi32","","Broadcasts 32-bit integer <code>a</code> to all elements.",null,[[],["__m128i",3]]],[5,"_mm_set1_epi16","","Broadcasts 16-bit integer <code>a</code> to all elements.",null,[[],["__m128i",3]]],[5,"_mm_set1_epi8","","Broadcasts 8-bit integer <code>a</code> to all elements.",null,[[],["__m128i",3]]],[5,"_mm_setr_epi32","","Sets packed 32-bit integers with the supplied values in …",null,[[],["__m128i",3]]],[5,"_mm_setr_epi16","","Sets packed 16-bit integers with the supplied values in …",null,[[],["__m128i",3]]],[5,"_mm_setr_epi8","","Sets packed 8-bit integers with the supplied values in …",null,[[],["__m128i",3]]],[5,"_mm_setzero_si128","","Returns a vector with all elements set to zero.",null,[[],["__m128i",3]]],[5,"_mm_loadl_epi64","","Loads 64-bit integer from memory into first element of …",null,[[],["__m128i",3]]],[5,"_mm_load_si128","","Loads 128-bits of integer data from memory into a new …",null,[[],["__m128i",3]]],[5,"_mm_loadu_si128","","Loads 128-bits of integer data from memory into a new …",null,[[],["__m128i",3]]],[5,"_mm_maskmoveu_si128","","Conditionally store 8-bit integer elements from <code>a</code> into …",null,[[["__m128i",3]]]],[5,"_mm_store_si128","","Stores 128-bits of integer data from <code>a</code> into memory.",null,[[["__m128i",3]]]],[5,"_mm_storeu_si128","","Stores 128-bits of integer data from <code>a</code> into memory.",null,[[["__m128i",3]]]],[5,"_mm_storel_epi64","","Stores the lower 64-bit integer <code>a</code> to a memory location.",null,[[["__m128i",3]]]],[5,"_mm_stream_si128","","Stores a 128-bit integer vector to a 128-bit aligned …",null,[[["__m128i",3]]]],[5,"_mm_stream_si32","","Stores a 32-bit integer value in the specified memory …",null,[[]]],[5,"_mm_move_epi64","","Returns a vector where the low element is extracted from <code>a</code>…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_packs_epi16","","Converts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_packs_epi32","","Converts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_packus_epi16","","Converts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_extract_epi16","","Returns the <code>imm8</code> element of <code>a</code>.",null,[[["__m128i",3]]]],[5,"_mm_insert_epi16","","Returns a new vector where the <code>imm8</code> element of <code>a</code> is …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_movemask_epi8","","Returns a mask of the most significant bit of each …",null,[[["__m128i",3]]]],[5,"_mm_shuffle_epi32","","Shuffles 32-bit integers in <code>a</code> using the control in <code>imm8</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_shufflehi_epi16","","Shuffles 16-bit integers in the high 64 bits of <code>a</code> using …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_shufflelo_epi16","","Shuffles 16-bit integers in the low 64 bits of <code>a</code> using …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpackhi_epi8","","Unpacks and interleave 8-bit integers from the high half …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpackhi_epi16","","Unpacks and interleave 16-bit integers from the high half …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpackhi_epi32","","Unpacks and interleave 32-bit integers from the high half …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpackhi_epi64","","Unpacks and interleave 64-bit integers from the high half …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpacklo_epi8","","Unpacks and interleave 8-bit integers from the low half …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpacklo_epi16","","Unpacks and interleave 16-bit integers from the low half …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpacklo_epi32","","Unpacks and interleave 32-bit integers from the low half …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpacklo_epi64","","Unpacks and interleave 64-bit integers from the low half …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_add_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_add_pd","","Adds packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_div_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_div_pd","","Divide packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_max_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_max_pd","","Returns a new vector with the maximum values from …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_min_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_min_pd","","Returns a new vector with the minimum values from …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mul_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mul_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_sqrt_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_sqrt_pd","","Returns a new vector with the square root of each of the …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_sub_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_sub_pd","","Subtract packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_and_pd","","Computes the bitwise AND of packed double-precision …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_andnot_pd","","Computes the bitwise NOT of <code>a</code> and then AND with <code>b</code>.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_or_pd","","Computes the bitwise OR of <code>a</code> and <code>b</code>.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_xor_pd","","Computes the bitwise OR of <code>a</code> and <code>b</code>.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpeq_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmplt_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmple_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpgt_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpge_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpord_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpunord_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpneq_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpnlt_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpnle_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpngt_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpnge_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpeq_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for equality.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmplt_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for less-than.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmple_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpgt_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpge_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpord_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> to see if …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpunord_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> to see if …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpneq_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for not-equal.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpnlt_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpnle_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpngt_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpnge_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_comieq_sd","","Compares the lower element of <code>a</code> and <code>b</code> for equality.",null,[[["__m128d",3]]]],[5,"_mm_comilt_sd","","Compares the lower element of <code>a</code> and <code>b</code> for less-than.",null,[[["__m128d",3]]]],[5,"_mm_comile_sd","","Compares the lower element of <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]]]],[5,"_mm_comigt_sd","","Compares the lower element of <code>a</code> and <code>b</code> for greater-than.",null,[[["__m128d",3]]]],[5,"_mm_comige_sd","","Compares the lower element of <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]]]],[5,"_mm_comineq_sd","","Compares the lower element of <code>a</code> and <code>b</code> for not-equal.",null,[[["__m128d",3]]]],[5,"_mm_ucomieq_sd","","Compares the lower element of <code>a</code> and <code>b</code> for equality.",null,[[["__m128d",3]]]],[5,"_mm_ucomilt_sd","","Compares the lower element of <code>a</code> and <code>b</code> for less-than.",null,[[["__m128d",3]]]],[5,"_mm_ucomile_sd","","Compares the lower element of <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]]]],[5,"_mm_ucomigt_sd","","Compares the lower element of <code>a</code> and <code>b</code> for greater-than.",null,[[["__m128d",3]]]],[5,"_mm_ucomige_sd","","Compares the lower element of <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]]]],[5,"_mm_ucomineq_sd","","Compares the lower element of <code>a</code> and <code>b</code> for not-equal.",null,[[["__m128d",3]]]],[5,"_mm_cvtpd_ps","","Converts packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128",3]]],[5,"_mm_cvtps_pd","","Converts packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128d",3]]],[5,"_mm_cvtpd_epi32","","Converts packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128i",3]]],[5,"_mm_cvtsd_si32","","Converts the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvtsd_ss","","Converts the lower double-precision (64-bit) …",null,[[["__m128",3],["__m128d",3]],["__m128",3]]],[5,"_mm_cvtsd_f64","","Returns the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvtss_sd","","Converts the lower single-precision (32-bit) …",null,[[["__m128",3],["__m128d",3]],["__m128d",3]]],[5,"_mm_cvttpd_epi32","","Converts packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128i",3]]],[5,"_mm_cvttsd_si32","","Converts the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvttps_epi32","","Converts packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128i",3]]],[5,"_mm_set_sd","","Copies double-precision (64-bit) floating-point element <code>a</code> …",null,[[],["__m128d",3]]],[5,"_mm_set1_pd","","Broadcasts double-precision (64-bit) floating-point value …",null,[[],["__m128d",3]]],[5,"_mm_set_pd1","","Broadcasts double-precision (64-bit) floating-point value …",null,[[],["__m128d",3]]],[5,"_mm_set_pd","","Sets packed double-precision (64-bit) floating-point …",null,[[],["__m128d",3]]],[5,"_mm_setr_pd","","Sets packed double-precision (64-bit) floating-point …",null,[[],["__m128d",3]]],[5,"_mm_setzero_pd","","Returns packed double-precision (64-bit) floating-point …",null,[[],["__m128d",3]]],[5,"_mm_movemask_pd","","Returns a mask of the most significant bit of each …",null,[[["__m128d",3]]]],[5,"_mm_load_pd","","Loads 128-bits (composed of 2 packed double-precision …",null,[[],["__m128d",3]]],[5,"_mm_load_sd","","Loads a 64-bit double-precision value to the low element …",null,[[],["__m128d",3]]],[5,"_mm_loadh_pd","","Loads a double-precision value into the high-order bits …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_loadl_pd","","Loads a double-precision value into the low-order bits of …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_stream_pd","","Stores a 128-bit floating point vector of <code>[2 x double]</code> to …",null,[[["__m128d",3]]]],[5,"_mm_store_sd","","Stores the lower 64 bits of a 128-bit vector of …",null,[[["__m128d",3]]]],[5,"_mm_store_pd","","Stores 128-bits (composed of 2 packed double-precision …",null,[[["__m128d",3]]]],[5,"_mm_storeu_pd","","Stores 128-bits (composed of 2 packed double-precision …",null,[[["__m128d",3]]]],[5,"_mm_store1_pd","","Stores the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3]]]],[5,"_mm_store_pd1","","Stores the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3]]]],[5,"_mm_storer_pd","","Stores 2 double-precision (64-bit) floating-point …",null,[[["__m128d",3]]]],[5,"_mm_storeh_pd","","Stores the upper 64 bits of a 128-bit vector of …",null,[[["__m128d",3]]]],[5,"_mm_storel_pd","","Stores the lower 64 bits of a 128-bit vector of …",null,[[["__m128d",3]]]],[5,"_mm_load1_pd","","Loads a double-precision (64-bit) floating-point element …",null,[[],["__m128d",3]]],[5,"_mm_load_pd1","","Loads a double-precision (64-bit) floating-point element …",null,[[],["__m128d",3]]],[5,"_mm_loadr_pd","","Loads 2 double-precision (64-bit) floating-point elements …",null,[[],["__m128d",3]]],[5,"_mm_loadu_pd","","Loads 128-bits (composed of 2 packed double-precision …",null,[[],["__m128d",3]]],[5,"_mm_shuffle_pd","","Constructs a 128-bit floating-point vector of <code>[2 x double]</code>…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_move_sd","","Constructs a 128-bit floating-point vector of <code>[2 x double]</code>…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_castpd_ps","","Casts a 128-bit floating-point vector of <code>[2 x double]</code> …",null,[[["__m128d",3]],["__m128",3]]],[5,"_mm_castpd_si128","","Casts a 128-bit floating-point vector of <code>[2 x double]</code> …",null,[[["__m128d",3]],["__m128i",3]]],[5,"_mm_castps_pd","","Casts a 128-bit floating-point vector of <code>[4 x float]</code> into …",null,[[["__m128",3]],["__m128d",3]]],[5,"_mm_castps_si128","","Casts a 128-bit floating-point vector of <code>[4 x float]</code> into …",null,[[["__m128",3]],["__m128i",3]]],[5,"_mm_castsi128_pd","","Casts a 128-bit integer vector into a 128-bit …",null,[[["__m128i",3]],["__m128d",3]]],[5,"_mm_castsi128_ps","","Casts a 128-bit integer vector into a 128-bit …",null,[[["__m128i",3]],["__m128",3]]],[5,"_mm_undefined_pd","","Returns vector of type __m128d with undefined elements.",null,[[],["__m128d",3]]],[5,"_mm_undefined_si128","","Returns vector of type __m128i with undefined elements.",null,[[],["__m128i",3]]],[5,"_mm_unpackhi_pd","","The resulting <code>__m128d</code> element is composed by the …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_unpacklo_pd","","The resulting <code>__m128d</code> element is composed by the …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_addsub_ps","","Alternatively add and subtract packed single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_addsub_pd","","Alternatively add and subtract packed double-precision …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_hadd_pd","","Horizontally adds adjacent pairs of double-precision …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_hadd_ps","","Horizontally adds adjacent pairs of single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_hsub_pd","","Horizontally subtract adjacent pairs of double-precision …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_hsub_ps","","Horizontally adds adjacent pairs of single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_lddqu_si128","","Loads 128-bits of integer data from unaligned memory. …",null,[[],["__m128i",3]]],[5,"_mm_movedup_pd","","Duplicate the low double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_loaddup_pd","","Loads a double-precision (64-bit) floating-point element …",null,[[],["__m128d",3]]],[5,"_mm_movehdup_ps","","Duplicate odd-indexed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_moveldup_ps","","Duplicate even-indexed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_abs_epi8","","Computes the absolute value of packed 8-bit signed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_abs_epi16","","Computes the absolute value of each of the packed 16-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_abs_epi32","","Computes the absolute value of each of the packed 32-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_shuffle_epi8","","Shuffles bytes from <code>a</code> according to the content of <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_alignr_epi8","","Concatenate 16-byte blocks in <code>a</code> and <code>b</code> into a 32-byte …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_hadd_epi16","","Horizontally adds the adjacent pairs of values contained …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_hadds_epi16","","Horizontally adds the adjacent pairs of values contained …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_hadd_epi32","","Horizontally adds the adjacent pairs of values contained …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_hsub_epi16","","Horizontally subtract the adjacent pairs of values …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_hsubs_epi16","","Horizontally subtract the adjacent pairs of values …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_hsub_epi32","","Horizontally subtract the adjacent pairs of values …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_maddubs_epi16","","Multiplies corresponding pairs of packed 8-bit unsigned …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mulhrs_epi16","","Multiplies packed 16-bit signed integer values, truncate …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sign_epi8","","Negates packed 8-bit integers in <code>a</code> when the corresponding …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sign_epi16","","Negates packed 16-bit integers in <code>a</code> when the …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sign_epi32","","Negates packed 32-bit integers in <code>a</code> when the …",null,[[["__m128i",3]],["__m128i",3]]],[17,"_MM_FROUND_TO_NEAREST_INT","","round to nearest",null,null],[17,"_MM_FROUND_TO_NEG_INF","","round down",null,null],[17,"_MM_FROUND_TO_POS_INF","","round up",null,null],[17,"_MM_FROUND_TO_ZERO","","truncate",null,null],[17,"_MM_FROUND_CUR_DIRECTION","","use MXCSR.RC; see <code>vendor::_MM_SET_ROUNDING_MODE</code>",null,null],[17,"_MM_FROUND_RAISE_EXC","","do not suppress exceptions",null,null],[17,"_MM_FROUND_NO_EXC","","suppress exceptions",null,null],[17,"_MM_FROUND_NINT","","round to nearest and do not suppress exceptions",null,null],[17,"_MM_FROUND_FLOOR","","round down and do not suppress exceptions",null,null],[17,"_MM_FROUND_CEIL","","round up and do not suppress exceptions",null,null],[17,"_MM_FROUND_TRUNC","","truncate and do not suppress exceptions",null,null],[17,"_MM_FROUND_RINT","","use MXCSR.RC and do not suppress exceptions; see …",null,null],[17,"_MM_FROUND_NEARBYINT","","use MXCSR.RC and suppress exceptions; see …",null,null],[5,"_mm_blendv_epi8","","Blend packed 8-bit integers from <code>a</code> and <code>b</code> using <code>mask</code>",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_blend_epi16","","Blend packed 16-bit integers from <code>a</code> and <code>b</code> using the mask …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_blendv_pd","","Blend packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_blendv_ps","","Blend packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_blend_pd","","Blend packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_blend_ps","","Blend packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_extract_ps","","Extracts a single-precision (32-bit) floating-point …",null,[[["__m128",3]]]],[5,"_mm_extract_epi8","","Extracts an 8-bit integer from <code>a</code>, selected with <code>imm8</code>. …",null,[[["__m128i",3]]]],[5,"_mm_extract_epi32","","Extracts an 32-bit integer from <code>a</code> selected with <code>imm8</code>",null,[[["__m128i",3]]]],[5,"_mm_insert_ps","","Select a single value in <code>a</code> to store at some position in <code>b</code>,…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_insert_epi8","","Returns a copy of <code>a</code> with the 8-bit integer from <code>i</code> …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_insert_epi32","","Returns a copy of <code>a</code> with the 32-bit integer from <code>i</code> …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_max_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code> and returns …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_max_epu16","","Compares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_max_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_max_epu32","","Compares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_min_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code> and returns …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_min_epu16","","Compares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_min_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_min_epu32","","Compares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_packus_epi32","","Converts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpeq_epi64","","Compares packed 64-bit integers in <code>a</code> and <code>b</code> for equality",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi8_epi16","","Sign extend packed 8-bit integers in <code>a</code> to packed 16-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi8_epi32","","Sign extend packed 8-bit integers in <code>a</code> to packed 32-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi8_epi64","","Sign extend packed 8-bit integers in the low 8 bytes of <code>a</code> …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi16_epi32","","Sign extend packed 16-bit integers in <code>a</code> to packed 32-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi16_epi64","","Sign extend packed 16-bit integers in <code>a</code> to packed 64-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi32_epi64","","Sign extend packed 32-bit integers in <code>a</code> to packed 64-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepu8_epi16","","Zeroes extend packed unsigned 8-bit integers in <code>a</code> to …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepu8_epi32","","Zeroes extend packed unsigned 8-bit integers in <code>a</code> to …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepu8_epi64","","Zeroes extend packed unsigned 8-bit integers in <code>a</code> to …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepu16_epi32","","Zeroes extend packed unsigned 16-bit integers in <code>a</code> to …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepu16_epi64","","Zeroes extend packed unsigned 16-bit integers in <code>a</code> to …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepu32_epi64","","Zeroes extend packed unsigned 32-bit integers in <code>a</code> to …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_dp_pd","","Returns the dot product of two __m128d vectors.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_dp_ps","","Returns the dot product of two __m128 vectors.",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_floor_pd","","Round the packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_floor_ps","","Round the packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_floor_sd","","Round the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_floor_ss","","Round the lower single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_ceil_pd","","Round the packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_ceil_ps","","Round the packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_ceil_sd","","Round the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_ceil_ss","","Round the lower single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_round_pd","","Round the packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_round_ps","","Round the packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_round_sd","","Round the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_round_ss","","Round the lower single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_minpos_epu16","","Finds the minimum unsigned 16-bit element in the 128-bit _…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mul_epi32","","Multiplies the low 32-bit integers from each packed 64-bit…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mullo_epi32","","Multiplies the packed 32-bit integers in <code>a</code> and <code>b</code>, …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mpsadbw_epu8","","Subtracts 8-bit unsigned integer values and computes the …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_testz_si128","","Tests whether the specified bits in a 128-bit integer …",null,[[["__m128i",3]]]],[5,"_mm_testc_si128","","Tests whether the specified bits in a 128-bit integer …",null,[[["__m128i",3]]]],[5,"_mm_testnzc_si128","","Tests whether the specified bits in a 128-bit integer …",null,[[["__m128i",3]]]],[5,"_mm_test_all_zeros","","Tests whether the specified bits in a 128-bit integer …",null,[[["__m128i",3]]]],[5,"_mm_test_all_ones","","Tests whether the specified bits in <code>a</code> 128-bit integer …",null,[[["__m128i",3]]]],[5,"_mm_test_mix_ones_zeros","","Tests whether the specified bits in a 128-bit integer …",null,[[["__m128i",3]]]],[17,"_SIDD_UBYTE_OPS","","String contains unsigned 8-bit characters <em>(Default)</em>",null,null],[17,"_SIDD_UWORD_OPS","","String contains unsigned 16-bit characters",null,null],[17,"_SIDD_SBYTE_OPS","","String contains signed 8-bit characters",null,null],[17,"_SIDD_SWORD_OPS","","String contains unsigned 16-bit characters",null,null],[17,"_SIDD_CMP_EQUAL_ANY","","For each character in <code>a</code>, find if it is in <code>b</code> <em>(Default)</em>",null,null],[17,"_SIDD_CMP_RANGES","","For each character in <code>a</code>, determine if …",null,null],[17,"_SIDD_CMP_EQUAL_EACH","","The strings defined by <code>a</code> and <code>b</code> are equal",null,null],[17,"_SIDD_CMP_EQUAL_ORDERED","","Search for the defined substring in the target",null,null],[17,"_SIDD_POSITIVE_POLARITY","","Do not negate results <em>(Default)</em>",null,null],[17,"_SIDD_NEGATIVE_POLARITY","","Negates results",null,null],[17,"_SIDD_MASKED_POSITIVE_POLARITY","","Do not negate results before the end of the string",null,null],[17,"_SIDD_MASKED_NEGATIVE_POLARITY","","Negates results only before the end of the string",null,null],[17,"_SIDD_LEAST_SIGNIFICANT","","<strong>Index only</strong>: return the least significant bit <em>(Default)</em>",null,null],[17,"_SIDD_MOST_SIGNIFICANT","","<strong>Index only</strong>: return the most significant bit",null,null],[17,"_SIDD_BIT_MASK","","<strong>Mask only</strong>: return the bit mask",null,null],[17,"_SIDD_UNIT_MASK","","<strong>Mask only</strong>: return the byte mask",null,null],[5,"_mm_cmpistrm","","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpistri","","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …",null,[[["__m128i",3]]]],[5,"_mm_cmpistrz","","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …",null,[[["__m128i",3]]]],[5,"_mm_cmpistrc","","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …",null,[[["__m128i",3]]]],[5,"_mm_cmpistrs","","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …",null,[[["__m128i",3]]]],[5,"_mm_cmpistro","","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …",null,[[["__m128i",3]]]],[5,"_mm_cmpistra","","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …",null,[[["__m128i",3]]]],[5,"_mm_cmpestrm","","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpestri","","Compares packed strings <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …",null,[[["__m128i",3]]]],[5,"_mm_cmpestrz","","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …",null,[[["__m128i",3]]]],[5,"_mm_cmpestrc","","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …",null,[[["__m128i",3]]]],[5,"_mm_cmpestrs","","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …",null,[[["__m128i",3]]]],[5,"_mm_cmpestro","","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …",null,[[["__m128i",3]]]],[5,"_mm_cmpestra","","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …",null,[[["__m128i",3]]]],[5,"_mm_crc32_u8","","Starting with the initial value in <code>crc</code>, return the …",null,[[]]],[5,"_mm_crc32_u16","","Starting with the initial value in <code>crc</code>, return the …",null,[[]]],[5,"_mm_crc32_u32","","Starting with the initial value in <code>crc</code>, return the …",null,[[]]],[5,"_mm_cmpgt_epi64","","Compares packed 64-bit integers in <code>a</code> and <code>b</code> for …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_add_pd","","Adds packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_add_ps","","Adds packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_and_pd","","Computes the bitwise AND of a packed double-precision …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_and_ps","","Computes the bitwise AND of packed single-precision …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_or_pd","","Computes the bitwise OR packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_or_ps","","Computes the bitwise OR packed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_shuffle_pd","","Shuffles double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_shuffle_ps","","Shuffles single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_andnot_pd","","Computes the bitwise NOT of packed double-precision …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_andnot_ps","","Computes the bitwise NOT of packed single-precision …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_max_pd","","Compares packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_max_ps","","Compares packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_min_pd","","Compares packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_min_ps","","Compares packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_mul_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_mul_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_addsub_pd","","Alternatively adds and subtracts packed double-precision …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_addsub_ps","","Alternatively adds and subtracts packed single-precision …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_sub_pd","","Subtracts packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_sub_ps","","Subtracts packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_div_ps","","Computes the division of each of the 8 packed 32-bit …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_div_pd","","Computes the division of each of the 4 packed 64-bit …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_round_pd","","Rounds packed double-precision (64-bit) floating point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_ceil_pd","","Rounds packed double-precision (64-bit) floating point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_floor_pd","","Rounds packed double-precision (64-bit) floating point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_round_ps","","Rounds packed single-precision (32-bit) floating point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_ceil_ps","","Rounds packed single-precision (32-bit) floating point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_floor_ps","","Rounds packed single-precision (32-bit) floating point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_sqrt_ps","","Returns the square root of packed single-precision …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_sqrt_pd","","Returns the square root of packed double-precision …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_blend_pd","","Blends packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_blend_ps","","Blends packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_blendv_pd","","Blends packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_blendv_ps","","Blends packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_dp_ps","","Conditionally multiplies the packed single-precision …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_hadd_pd","","Horizontal addition of adjacent pairs in the two packed …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_hadd_ps","","Horizontal addition of adjacent pairs in the two packed …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_hsub_pd","","Horizontal subtraction of adjacent pairs in the two …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_hsub_ps","","Horizontal subtraction of adjacent pairs in the two …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_xor_pd","","Computes the bitwise XOR of packed double-precision …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_xor_ps","","Computes the bitwise XOR of packed single-precision …",null,[[["__m256",3]],["__m256",3]]],[17,"_CMP_EQ_OQ","","Equal (ordered, non-signaling)",null,null],[17,"_CMP_LT_OS","","Less-than (ordered, signaling)",null,null],[17,"_CMP_LE_OS","","Less-than-or-equal (ordered, signaling)",null,null],[17,"_CMP_UNORD_Q","","Unordered (non-signaling)",null,null],[17,"_CMP_NEQ_UQ","","Not-equal (unordered, non-signaling)",null,null],[17,"_CMP_NLT_US","","Not-less-than (unordered, signaling)",null,null],[17,"_CMP_NLE_US","","Not-less-than-or-equal (unordered, signaling)",null,null],[17,"_CMP_ORD_Q","","Ordered (non-signaling)",null,null],[17,"_CMP_EQ_UQ","","Equal (unordered, non-signaling)",null,null],[17,"_CMP_NGE_US","","Not-greater-than-or-equal (unordered, signaling)",null,null],[17,"_CMP_NGT_US","","Not-greater-than (unordered, signaling)",null,null],[17,"_CMP_FALSE_OQ","","False (ordered, non-signaling)",null,null],[17,"_CMP_NEQ_OQ","","Not-equal (ordered, non-signaling)",null,null],[17,"_CMP_GE_OS","","Greater-than-or-equal (ordered, signaling)",null,null],[17,"_CMP_GT_OS","","Greater-than (ordered, signaling)",null,null],[17,"_CMP_TRUE_UQ","","True (unordered, non-signaling)",null,null],[17,"_CMP_EQ_OS","","Equal (ordered, signaling)",null,null],[17,"_CMP_LT_OQ","","Less-than (ordered, non-signaling)",null,null],[17,"_CMP_LE_OQ","","Less-than-or-equal (ordered, non-signaling)",null,null],[17,"_CMP_UNORD_S","","Unordered (signaling)",null,null],[17,"_CMP_NEQ_US","","Not-equal (unordered, signaling)",null,null],[17,"_CMP_NLT_UQ","","Not-less-than (unordered, non-signaling)",null,null],[17,"_CMP_NLE_UQ","","Not-less-than-or-equal (unordered, non-signaling)",null,null],[17,"_CMP_ORD_S","","Ordered (signaling)",null,null],[17,"_CMP_EQ_US","","Equal (unordered, signaling)",null,null],[17,"_CMP_NGE_UQ","","Not-greater-than-or-equal (unordered, non-signaling)",null,null],[17,"_CMP_NGT_UQ","","Not-greater-than (unordered, non-signaling)",null,null],[17,"_CMP_FALSE_OS","","False (ordered, signaling)",null,null],[17,"_CMP_NEQ_OS","","Not-equal (ordered, signaling)",null,null],[17,"_CMP_GE_OQ","","Greater-than-or-equal (ordered, non-signaling)",null,null],[17,"_CMP_GT_OQ","","Greater-than (ordered, non-signaling)",null,null],[17,"_CMP_TRUE_US","","True (unordered, signaling)",null,null],[5,"_mm_cmp_pd","","Compares packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_cmp_pd","","Compares packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_cmp_ps","","Compares packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_cmp_ps","","Compares packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_cmp_sd","","Compares the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmp_ss","","Compares the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_cvtepi32_pd","","Converts packed 32-bit integers in <code>a</code> to packed …",null,[[["__m128i",3]],["__m256d",3]]],[5,"_mm256_cvtepi32_ps","","Converts packed 32-bit integers in <code>a</code> to packed …",null,[[["__m256i",3]],["__m256",3]]],[5,"_mm256_cvtpd_ps","","Converts packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m128",3]]],[5,"_mm256_cvtps_epi32","","Converts packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256i",3]]],[5,"_mm256_cvtps_pd","","Converts packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m256d",3]]],[5,"_mm256_cvttpd_epi32","","Converts packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m128i",3]]],[5,"_mm256_cvtpd_epi32","","Converts packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m128i",3]]],[5,"_mm256_cvttps_epi32","","Converts packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256i",3]]],[5,"_mm256_extractf128_ps","","Extracts 128 bits (composed of 4 packed single-precision …",null,[[["__m256",3]],["__m128",3]]],[5,"_mm256_extractf128_pd","","Extracts 128 bits (composed of 2 packed double-precision …",null,[[["__m256d",3]],["__m128d",3]]],[5,"_mm256_extractf128_si256","","Extracts 128 bits (composed of integer data) from <code>a</code>, …",null,[[["__m256i",3]],["__m128i",3]]],[5,"_mm256_zeroall","","Zeroes the contents of all XMM or YMM registers.",null,[[]]],[5,"_mm256_zeroupper","","Zeroes the upper 128 bits of all YMM registers; the lower …",null,[[]]],[5,"_mm256_permutevar_ps","","Shuffles single-precision (32-bit) floating-point …",null,[[["__m256",3],["__m256i",3]],["__m256",3]]],[5,"_mm_permutevar_ps","","Shuffles single-precision (32-bit) floating-point …",null,[[["__m128",3],["__m128i",3]],["__m128",3]]],[5,"_mm256_permute_ps","","Shuffles single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_permute_ps","","Shuffles single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_permutevar_pd","","Shuffles double-precision (64-bit) floating-point …",null,[[["__m256i",3],["__m256d",3]],["__m256d",3]]],[5,"_mm_permutevar_pd","","Shuffles double-precision (64-bit) floating-point …",null,[[["__m128d",3],["__m128i",3]],["__m128d",3]]],[5,"_mm256_permute_pd","","Shuffles double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_permute_pd","","Shuffles double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_permute2f128_ps","","Shuffles 256 bits (composed of 8 packed single-precision …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_permute2f128_pd","","Shuffles 256 bits (composed of 4 packed double-precision …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_permute2f128_si256","","Shuffles 128-bits (composed of integer data) selected by …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_broadcast_ss","","Broadcasts a single-precision (32-bit) floating-point …",null,[[],["__m256",3]]],[5,"_mm_broadcast_ss","","Broadcasts a single-precision (32-bit) floating-point …",null,[[],["__m128",3]]],[5,"_mm256_broadcast_sd","","Broadcasts a double-precision (64-bit) floating-point …",null,[[],["__m256d",3]]],[5,"_mm256_broadcast_ps","","Broadcasts 128 bits from memory (composed of 4 packed …",null,[[["__m128",3]],["__m256",3]]],[5,"_mm256_broadcast_pd","","Broadcasts 128 bits from memory (composed of 2 packed …",null,[[["__m128d",3]],["__m256d",3]]],[5,"_mm256_insertf128_ps","","Copies <code>a</code> to result, then inserts 128 bits (composed of 4 …",null,[[["__m256",3],["__m128",3]],["__m256",3]]],[5,"_mm256_insertf128_pd","","Copies <code>a</code> to result, then inserts 128 bits (composed of 2 …",null,[[["__m128d",3],["__m256d",3]],["__m256d",3]]],[5,"_mm256_insertf128_si256","","Copies <code>a</code> to result, then inserts 128 bits from <code>b</code> into …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_insert_epi8","","Copies <code>a</code> to result, and inserts the 8-bit integer <code>i</code> into …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_insert_epi16","","Copies <code>a</code> to result, and inserts the 16-bit integer <code>i</code> into …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_insert_epi32","","Copies <code>a</code> to result, and inserts the 32-bit integer <code>i</code> into …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_load_pd","","Loads 256-bits (composed of 4 packed double-precision …",null,[[],["__m256d",3]]],[5,"_mm256_store_pd","","Stores 256-bits (composed of 4 packed double-precision …",null,[[["__m256d",3]]]],[5,"_mm256_load_ps","","Loads 256-bits (composed of 8 packed single-precision …",null,[[],["__m256",3]]],[5,"_mm256_store_ps","","Stores 256-bits (composed of 8 packed single-precision …",null,[[["__m256",3]]]],[5,"_mm256_loadu_pd","","Loads 256-bits (composed of 4 packed double-precision …",null,[[],["__m256d",3]]],[5,"_mm256_storeu_pd","","Stores 256-bits (composed of 4 packed double-precision …",null,[[["__m256d",3]]]],[5,"_mm256_loadu_ps","","Loads 256-bits (composed of 8 packed single-precision …",null,[[],["__m256",3]]],[5,"_mm256_storeu_ps","","Stores 256-bits (composed of 8 packed single-precision …",null,[[["__m256",3]]]],[5,"_mm256_load_si256","","Loads 256-bits of integer data from memory into result. …",null,[[],["__m256i",3]]],[5,"_mm256_store_si256","","Stores 256-bits of integer data from <code>a</code> into memory. …",null,[[["__m256i",3]]]],[5,"_mm256_loadu_si256","","Loads 256-bits of integer data from memory into result. …",null,[[],["__m256i",3]]],[5,"_mm256_storeu_si256","","Stores 256-bits of integer data from <code>a</code> into memory. …",null,[[["__m256i",3]]]],[5,"_mm256_maskload_pd","","Loads packed double-precision (64-bit) floating-point …",null,[[["__m256i",3]],["__m256d",3]]],[5,"_mm256_maskstore_pd","","Stores packed double-precision (64-bit) floating-point …",null,[[["__m256d",3],["__m256i",3]]]],[5,"_mm_maskload_pd","","Loads packed double-precision (64-bit) floating-point …",null,[[["__m128i",3]],["__m128d",3]]],[5,"_mm_maskstore_pd","","Stores packed double-precision (64-bit) floating-point …",null,[[["__m128i",3],["__m128d",3]]]],[5,"_mm256_maskload_ps","","Loads packed single-precision (32-bit) floating-point …",null,[[["__m256i",3]],["__m256",3]]],[5,"_mm256_maskstore_ps","","Stores packed single-precision (32-bit) floating-point …",null,[[["__m256",3],["__m256i",3]]]],[5,"_mm_maskload_ps","","Loads packed single-precision (32-bit) floating-point …",null,[[["__m128i",3]],["__m128",3]]],[5,"_mm_maskstore_ps","","Stores packed single-precision (32-bit) floating-point …",null,[[["__m128",3],["__m128i",3]]]],[5,"_mm256_movehdup_ps","","Duplicate odd-indexed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_moveldup_ps","","Duplicate even-indexed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_movedup_pd","","Duplicate even-indexed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_lddqu_si256","","Loads 256-bits of integer data from unaligned memory into …",null,[[],["__m256i",3]]],[5,"_mm256_stream_si256","","Moves integer data from a 256-bit integer vector to a …",null,[[["__m256i",3]]]],[5,"_mm256_stream_pd","","Moves double-precision values from a 256-bit vector of …",null,[[["__m256d",3]]]],[5,"_mm256_stream_ps","","Moves single-precision floating point values from a …",null,[[["__m256",3]]]],[5,"_mm256_rcp_ps","","Computes the approximate reciprocal of packed …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_rsqrt_ps","","Computes the approximate reciprocal square root of packed …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_unpackhi_pd","","Unpacks and interleave double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_unpackhi_ps","","Unpacks and interleave single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_unpacklo_pd","","Unpacks and interleave double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_unpacklo_ps","","Unpacks and interleave single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_testz_si256","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256i",3]]]],[5,"_mm256_testc_si256","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256i",3]]]],[5,"_mm256_testnzc_si256","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256i",3]]]],[5,"_mm256_testz_pd","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256d",3]]]],[5,"_mm256_testc_pd","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256d",3]]]],[5,"_mm256_testnzc_pd","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256d",3]]]],[5,"_mm_testz_pd","","Computes the bitwise AND of 128 bits (representing …",null,[[["__m128d",3]]]],[5,"_mm_testc_pd","","Computes the bitwise AND of 128 bits (representing …",null,[[["__m128d",3]]]],[5,"_mm_testnzc_pd","","Computes the bitwise AND of 128 bits (representing …",null,[[["__m128d",3]]]],[5,"_mm256_testz_ps","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256",3]]]],[5,"_mm256_testc_ps","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256",3]]]],[5,"_mm256_testnzc_ps","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256",3]]]],[5,"_mm_testz_ps","","Computes the bitwise AND of 128 bits (representing …",null,[[["__m128",3]]]],[5,"_mm_testc_ps","","Computes the bitwise AND of 128 bits (representing …",null,[[["__m128",3]]]],[5,"_mm_testnzc_ps","","Computes the bitwise AND of 128 bits (representing …",null,[[["__m128",3]]]],[5,"_mm256_movemask_pd","","Sets each bit of the returned mask based on the most …",null,[[["__m256d",3]]]],[5,"_mm256_movemask_ps","","Sets each bit of the returned mask based on the most …",null,[[["__m256",3]]]],[5,"_mm256_setzero_pd","","Returns vector of type __m256d with all elements set to …",null,[[],["__m256d",3]]],[5,"_mm256_setzero_ps","","Returns vector of type __m256 with all elements set to …",null,[[],["__m256",3]]],[5,"_mm256_setzero_si256","","Returns vector of type __m256i with all elements set to …",null,[[],["__m256i",3]]],[5,"_mm256_set_pd","","Sets packed double-precision (64-bit) floating-point …",null,[[],["__m256d",3]]],[5,"_mm256_set_ps","","Sets packed single-precision (32-bit) floating-point …",null,[[],["__m256",3]]],[5,"_mm256_set_epi8","","Sets packed 8-bit integers in returned vector with the …",null,[[],["__m256i",3]]],[5,"_mm256_set_epi16","","Sets packed 16-bit integers in returned vector with the …",null,[[],["__m256i",3]]],[5,"_mm256_set_epi32","","Sets packed 32-bit integers in returned vector with the …",null,[[],["__m256i",3]]],[5,"_mm256_set_epi64x","","Sets packed 64-bit integers in returned vector with the …",null,[[],["__m256i",3]]],[5,"_mm256_setr_pd","","Sets packed double-precision (64-bit) floating-point …",null,[[],["__m256d",3]]],[5,"_mm256_setr_ps","","Sets packed single-precision (32-bit) floating-point …",null,[[],["__m256",3]]],[5,"_mm256_setr_epi8","","Sets packed 8-bit integers in returned vector with the …",null,[[],["__m256i",3]]],[5,"_mm256_setr_epi16","","Sets packed 16-bit integers in returned vector with the …",null,[[],["__m256i",3]]],[5,"_mm256_setr_epi32","","Sets packed 32-bit integers in returned vector with the …",null,[[],["__m256i",3]]],[5,"_mm256_setr_epi64x","","Sets packed 64-bit integers in returned vector with the …",null,[[],["__m256i",3]]],[5,"_mm256_set1_pd","","Broadcasts double-precision (64-bit) floating-point value …",null,[[],["__m256d",3]]],[5,"_mm256_set1_ps","","Broadcasts single-precision (32-bit) floating-point value …",null,[[],["__m256",3]]],[5,"_mm256_set1_epi8","","Broadcasts 8-bit integer <code>a</code> to all elements of returned …",null,[[],["__m256i",3]]],[5,"_mm256_set1_epi16","","Broadcasts 16-bit integer <code>a</code> to all all elements of …",null,[[],["__m256i",3]]],[5,"_mm256_set1_epi32","","Broadcasts 32-bit integer <code>a</code> to all elements of returned …",null,[[],["__m256i",3]]],[5,"_mm256_set1_epi64x","","Broadcasts 64-bit integer <code>a</code> to all elements of returned …",null,[[],["__m256i",3]]],[5,"_mm256_castpd_ps","","Cast vector of type __m256d to type __m256.",null,[[["__m256d",3]],["__m256",3]]],[5,"_mm256_castps_pd","","Cast vector of type __m256 to type __m256d.",null,[[["__m256",3]],["__m256d",3]]],[5,"_mm256_castps_si256","","Casts vector of type __m256 to type __m256i.",null,[[["__m256",3]],["__m256i",3]]],[5,"_mm256_castsi256_ps","","Casts vector of type __m256i to type __m256.",null,[[["__m256i",3]],["__m256",3]]],[5,"_mm256_castpd_si256","","Casts vector of type __m256d to type __m256i.",null,[[["__m256d",3]],["__m256i",3]]],[5,"_mm256_castsi256_pd","","Casts vector of type __m256i to type __m256d.",null,[[["__m256i",3]],["__m256d",3]]],[5,"_mm256_castps256_ps128","","Casts vector of type __m256 to type __m128.",null,[[["__m256",3]],["__m128",3]]],[5,"_mm256_castpd256_pd128","","Casts vector of type __m256d to type __m128d.",null,[[["__m256d",3]],["__m128d",3]]],[5,"_mm256_castsi256_si128","","Casts vector of type __m256i to type __m128i.",null,[[["__m256i",3]],["__m128i",3]]],[5,"_mm256_castps128_ps256","","Casts vector of type __m128 to type __m256; the upper 128 …",null,[[["__m128",3]],["__m256",3]]],[5,"_mm256_castpd128_pd256","","Casts vector of type __m128d to type __m256d; the upper …",null,[[["__m128d",3]],["__m256d",3]]],[5,"_mm256_castsi128_si256","","Casts vector of type __m128i to type __m256i; the upper …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_zextps128_ps256","","Constructs a 256-bit floating-point vector of <code>[8 x float]</code> …",null,[[["__m128",3]],["__m256",3]]],[5,"_mm256_zextsi128_si256","","Constructs a 256-bit integer vector from a 128-bit …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_zextpd128_pd256","","Constructs a 256-bit floating-point vector of <code>[4 x double]</code>…",null,[[["__m128d",3]],["__m256d",3]]],[5,"_mm256_undefined_ps","","Returns vector of type <code>__m256</code> with undefined elements.",null,[[],["__m256",3]]],[5,"_mm256_undefined_pd","","Returns vector of type <code>__m256d</code> with undefined elements.",null,[[],["__m256d",3]]],[5,"_mm256_undefined_si256","","Returns vector of type __m256i with undefined elements.",null,[[],["__m256i",3]]],[5,"_mm256_set_m128","","Sets packed __m256 returned vector with the supplied …",null,[[["__m128",3]],["__m256",3]]],[5,"_mm256_set_m128d","","Sets packed __m256d returned vector with the supplied …",null,[[["__m128d",3]],["__m256d",3]]],[5,"_mm256_set_m128i","","Sets packed __m256i returned vector with the supplied …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_setr_m128","","Sets packed __m256 returned vector with the supplied …",null,[[["__m128",3]],["__m256",3]]],[5,"_mm256_setr_m128d","","Sets packed __m256d returned vector with the supplied …",null,[[["__m128d",3]],["__m256d",3]]],[5,"_mm256_setr_m128i","","Sets packed __m256i returned vector with the supplied …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_loadu2_m128","","Loads two 128-bit values (composed of 4 packed …",null,[[],["__m256",3]]],[5,"_mm256_loadu2_m128d","","Loads two 128-bit values (composed of 2 packed …",null,[[],["__m256d",3]]],[5,"_mm256_loadu2_m128i","","Loads two 128-bit values (composed of integer data) from …",null,[[],["__m256i",3]]],[5,"_mm256_storeu2_m128","","Stores the high and low 128-bit halves (each composed of …",null,[[["__m256",3]]]],[5,"_mm256_storeu2_m128d","","Stores the high and low 128-bit halves (each composed of …",null,[[["__m256d",3]]]],[5,"_mm256_storeu2_m128i","","Stores the high and low 128-bit halves (each composed of …",null,[[["__m256i",3]]]],[5,"_mm256_cvtss_f32","","Returns the first element of the input vector of …",null,[[["__m256",3]]]],[5,"_mm256_abs_epi32","","Computes the absolute values of packed 32-bit integers in …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_abs_epi16","","Computes the absolute values of packed 16-bit integers in …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_abs_epi8","","Computes the absolute values of packed 8-bit integers in <code>a</code>…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_add_epi64","","Adds packed 64-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_add_epi32","","Adds packed 32-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_add_epi16","","Adds packed 16-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_add_epi8","","Adds packed 8-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_adds_epi8","","Adds packed 8-bit integers in <code>a</code> and <code>b</code> using saturation.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_adds_epi16","","Adds packed 16-bit integers in <code>a</code> and <code>b</code> using saturation.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_adds_epu8","","Adds packed unsigned 8-bit integers in <code>a</code> and <code>b</code> using …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_adds_epu16","","Adds packed unsigned 16-bit integers in <code>a</code> and <code>b</code> using …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_alignr_epi8","","Concatenates pairs of 16-byte blocks in <code>a</code> and <code>b</code> into a …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_and_si256","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_andnot_si256","","Computes the bitwise NOT of 256 bits (representing …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_avg_epu16","","Averages packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_avg_epu8","","Averages packed unsigned 8-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_blend_epi32","","Blends packed 32-bit integers from <code>a</code> and <code>b</code> using control …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_blend_epi32","","Blends packed 32-bit integers from <code>a</code> and <code>b</code> using control …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_blend_epi16","","Blends packed 16-bit integers from <code>a</code> and <code>b</code> using control …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_blendv_epi8","","Blends packed 8-bit integers from <code>a</code> and <code>b</code> using <code>mask</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_broadcastb_epi8","","Broadcasts the low packed 8-bit integer from <code>a</code> to all …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_broadcastb_epi8","","Broadcasts the low packed 8-bit integer from <code>a</code> to all …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm_broadcastd_epi32","","Broadcasts the low packed 32-bit integer from <code>a</code> to all …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_broadcastd_epi32","","Broadcasts the low packed 32-bit integer from <code>a</code> to all …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm_broadcastq_epi64","","Broadcasts the low packed 64-bit integer from <code>a</code> to all …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_broadcastq_epi64","","Broadcasts the low packed 64-bit integer from <code>a</code> to all …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm_broadcastsd_pd","","Broadcasts the low double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_broadcastsd_pd","","Broadcasts the low double-precision (64-bit) …",null,[[["__m128d",3]],["__m256d",3]]],[5,"_mm256_broadcastsi128_si256","","Broadcasts 128 bits of integer data from a to all 128-bit …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm_broadcastss_ps","","Broadcasts the low single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_broadcastss_ps","","Broadcasts the low single-precision (32-bit) …",null,[[["__m128",3]],["__m256",3]]],[5,"_mm_broadcastw_epi16","","Broadcasts the low packed 16-bit integer from a to all …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_broadcastw_epi16","","Broadcasts the low packed 16-bit integer from a to all …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cmpeq_epi64","","Compares packed 64-bit integers in <code>a</code> and <code>b</code> for equality.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpeq_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for equality.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpeq_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for equality.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpeq_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for equality.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpgt_epi64","","Compares packed 64-bit integers in <code>a</code> and <code>b</code> for …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpgt_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpgt_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpgt_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cvtepi16_epi32","","Sign-extend 16-bit integers to 32-bit integers.",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepi16_epi64","","Sign-extend 16-bit integers to 64-bit integers.",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepi32_epi64","","Sign-extend 32-bit integers to 64-bit integers.",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepi8_epi16","","Sign-extend 8-bit integers to 16-bit integers.",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepi8_epi32","","Sign-extend 8-bit integers to 32-bit integers.",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepi8_epi64","","Sign-extend 8-bit integers to 64-bit integers.",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepu16_epi32","","Zeroes extend packed unsigned 16-bit integers in <code>a</code> to …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepu16_epi64","","Zero-extend the lower four unsigned 16-bit integers in <code>a</code> …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepu32_epi64","","Zero-extend unsigned 32-bit integers in <code>a</code> to 64-bit …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepu8_epi16","","Zero-extend unsigned 8-bit integers in <code>a</code> to 16-bit …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepu8_epi32","","Zero-extend the lower eight unsigned 8-bit integers in <code>a</code> …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepu8_epi64","","Zero-extend the lower four unsigned 8-bit integers in <code>a</code> …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_extracti128_si256","","Extracts 128 bits (of integer data) from <code>a</code> selected with …",null,[[["__m256i",3]],["__m128i",3]]],[5,"_mm256_hadd_epi16","","Horizontally adds adjacent pairs of 16-bit integers in <code>a</code> …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_hadd_epi32","","Horizontally adds adjacent pairs of 32-bit integers in <code>a</code> …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_hadds_epi16","","Horizontally adds adjacent pairs of 16-bit integers in <code>a</code> …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_hsub_epi16","","Horizontally subtract adjacent pairs of 16-bit integers …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_hsub_epi32","","Horizontally subtract adjacent pairs of 32-bit integers …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_hsubs_epi16","","Horizontally subtract adjacent pairs of 16-bit integers …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_i32gather_epi32","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_i32gather_epi32","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_i32gather_epi32","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_i32gather_epi32","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_i32gather_ps","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m128",3]]],[5,"_mm_mask_i32gather_ps","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128",3],["__m128i",3]],["__m128",3]]],[5,"_mm256_i32gather_ps","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m256i",3]],["__m256",3]]],[5,"_mm256_mask_i32gather_ps","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m256",3],["__m256i",3]],["__m256",3]]],[5,"_mm_i32gather_epi64","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_i32gather_epi64","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_i32gather_epi64","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_mask_i32gather_epi64","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm_i32gather_pd","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m128d",3]]],[5,"_mm_mask_i32gather_pd","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128d",3],["__m128i",3]],["__m128d",3]]],[5,"_mm256_i32gather_pd","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m256d",3]]],[5,"_mm256_mask_i32gather_pd","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3],["__m256d",3]],["__m256d",3]]],[5,"_mm_i64gather_epi32","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_i64gather_epi32","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_i64gather_epi32","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m256i",3]],["__m128i",3]]],[5,"_mm256_mask_i64gather_epi32","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3],["__m256i",3]],["__m128i",3]]],[5,"_mm_i64gather_ps","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m128",3]]],[5,"_mm_mask_i64gather_ps","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128",3],["__m128i",3]],["__m128",3]]],[5,"_mm256_i64gather_ps","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m256i",3]],["__m128",3]]],[5,"_mm256_mask_i64gather_ps","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128",3],["__m256i",3]],["__m128",3]]],[5,"_mm_i64gather_epi64","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_i64gather_epi64","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_i64gather_epi64","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_i64gather_epi64","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_i64gather_pd","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3]],["__m128d",3]]],[5,"_mm_mask_i64gather_pd","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128d",3],["__m128i",3]],["__m128d",3]]],[5,"_mm256_i64gather_pd","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m256i",3]],["__m256d",3]]],[5,"_mm256_mask_i64gather_pd","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m256i",3],["__m256d",3]],["__m256d",3]]],[5,"_mm256_inserti128_si256","","Copies <code>a</code> to <code>dst</code>, then insert 128 bits (of integer data) …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_madd_epi16","","Multiplies packed signed 16-bit integers in <code>a</code> and <code>b</code>, …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_maddubs_epi16","","Vertically multiplies each unsigned 8-bit integer from <code>a</code> …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_maskload_epi32","","Loads packed 32-bit integers from memory pointed by …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_maskload_epi32","","Loads packed 32-bit integers from memory pointed by …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_maskload_epi64","","Loads packed 64-bit integers from memory pointed by …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_maskload_epi64","","Loads packed 64-bit integers from memory pointed by …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_maskstore_epi32","","Stores packed 32-bit integers from <code>a</code> into memory pointed …",null,[[["__m128i",3]]]],[5,"_mm256_maskstore_epi32","","Stores packed 32-bit integers from <code>a</code> into memory pointed …",null,[[["__m256i",3]]]],[5,"_mm_maskstore_epi64","","Stores packed 64-bit integers from <code>a</code> into memory pointed …",null,[[["__m128i",3]]]],[5,"_mm256_maskstore_epi64","","Stores packed 64-bit integers from <code>a</code> into memory pointed …",null,[[["__m256i",3]]]],[5,"_mm256_max_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_max_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_max_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_max_epu16","","Compares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_max_epu32","","Compares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_max_epu8","","Compares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_min_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_min_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_min_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_min_epu16","","Compares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_min_epu32","","Compares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_min_epu8","","Compares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_movemask_epi8","","Creates mask from the most significant bit of each 8-bit …",null,[[["__m256i",3]]]],[5,"_mm256_mpsadbw_epu8","","Computes the sum of absolute differences (SADs) of …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mul_epi32","","Multiplies the low 32-bit integers from each packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mul_epu32","","Multiplies the low unsigned 32-bit integers from each …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mulhi_epi16","","Multiplies the packed 16-bit integers in <code>a</code> and <code>b</code>, …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mulhi_epu16","","Multiplies the packed unsigned 16-bit integers in <code>a</code> and <code>b</code>…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mullo_epi16","","Multiplies the packed 16-bit integers in <code>a</code> and <code>b</code>, …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mullo_epi32","","Multiplies the packed 32-bit integers in <code>a</code> and <code>b</code>, …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mulhrs_epi16","","Multiplies packed 16-bit integers in <code>a</code> and <code>b</code>, producing …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_or_si256","","Computes the bitwise OR of 256 bits (representing integer …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_packs_epi16","","Converts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_packs_epi32","","Converts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_packus_epi16","","Converts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_packus_epi32","","Converts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_permutevar8x32_epi32","","Permutes packed 32-bit integers from <code>a</code> according to the …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_permute4x64_epi64","","Permutes 64-bit integers from <code>a</code> using control mask <code>imm8</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_permute2x128_si256","","Shuffles 128-bits of integer data selected by <code>imm8</code> from <code>a</code> …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_permute4x64_pd","","Shuffles 64-bit floating-point elements in <code>a</code> across lanes …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_permutevar8x32_ps","","Shuffles eight 32-bit foating-point elements in <code>a</code> across …",null,[[["__m256",3],["__m256i",3]],["__m256",3]]],[5,"_mm256_sad_epu8","","Computes the absolute differences of packed unsigned …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_shuffle_epi8","","Shuffles bytes from <code>a</code> according to the content of <code>b</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_shuffle_epi32","","Shuffles 32-bit integers in 128-bit lanes of <code>a</code> using the …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_shufflehi_epi16","","Shuffles 16-bit integers in the high 64 bits of 128-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_shufflelo_epi16","","Shuffles 16-bit integers in the low 64 bits of 128-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sign_epi16","","Negates packed 16-bit integers in <code>a</code> when the …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sign_epi32","","Negates packed 32-bit integers in <code>a</code> when the …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sign_epi8","","Negates packed 8-bit integers in <code>a</code> when the corresponding …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sll_epi16","","Shifts packed 16-bit integers in <code>a</code> left by <code>count</code> while …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_sll_epi32","","Shifts packed 32-bit integers in <code>a</code> left by <code>count</code> while …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_sll_epi64","","Shifts packed 64-bit integers in <code>a</code> left by <code>count</code> while …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_slli_epi16","","Shifts packed 16-bit integers in <code>a</code> left by <code>imm8</code> while …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_slli_epi32","","Shifts packed 32-bit integers in <code>a</code> left by <code>imm8</code> while …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_slli_epi64","","Shifts packed 64-bit integers in <code>a</code> left by <code>imm8</code> while …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_slli_si256","","Shifts 128-bit lanes in <code>a</code> left by <code>imm8</code> bytes while …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_bslli_epi128","","Shifts 128-bit lanes in <code>a</code> left by <code>imm8</code> bytes while …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_sllv_epi32","","Shifts packed 32-bit integers in <code>a</code> left by the amount …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_sllv_epi32","","Shifts packed 32-bit integers in <code>a</code> left by the amount …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_sllv_epi64","","Shifts packed 64-bit integers in <code>a</code> left by the amount …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_sllv_epi64","","Shifts packed 64-bit integers in <code>a</code> left by the amount …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sra_epi16","","Shifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_sra_epi32","","Shifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_srai_epi16","","Shifts packed 16-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_srai_epi32","","Shifts packed 32-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_srav_epi32","","Shifts packed 32-bit integers in <code>a</code> right by the amount …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_srav_epi32","","Shifts packed 32-bit integers in <code>a</code> right by the amount …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_srli_si256","","Shifts 128-bit lanes in <code>a</code> right by <code>imm8</code> bytes while …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_bsrli_epi128","","Shifts 128-bit lanes in <code>a</code> right by <code>imm8</code> bytes while …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_srl_epi16","","Shifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_srl_epi32","","Shifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_srl_epi64","","Shifts packed 64-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_srli_epi16","","Shifts packed 16-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_srli_epi32","","Shifts packed 32-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_srli_epi64","","Shifts packed 64-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_srlv_epi32","","Shifts packed 32-bit integers in <code>a</code> right by the amount …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_srlv_epi32","","Shifts packed 32-bit integers in <code>a</code> right by the amount …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_srlv_epi64","","Shifts packed 64-bit integers in <code>a</code> right by the amount …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_srlv_epi64","","Shifts packed 64-bit integers in <code>a</code> right by the amount …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sub_epi16","","Subtract packed 16-bit integers in <code>b</code> from packed 16-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sub_epi32","","Subtract packed 32-bit integers in <code>b</code> from packed 32-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sub_epi64","","Subtract packed 64-bit integers in <code>b</code> from packed 64-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sub_epi8","","Subtract packed 8-bit integers in <code>b</code> from packed 8-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_subs_epi16","","Subtract packed 16-bit integers in <code>b</code> from packed 16-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_subs_epi8","","Subtract packed 8-bit integers in <code>b</code> from packed 8-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_subs_epu16","","Subtract packed unsigned 16-bit integers in <code>b</code> from packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_subs_epu8","","Subtract packed unsigned 8-bit integers in <code>b</code> from packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpackhi_epi8","","Unpacks and interleave 8-bit integers from the high half …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpacklo_epi8","","Unpacks and interleave 8-bit integers from the low half …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpackhi_epi16","","Unpacks and interleave 16-bit integers from the high half …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpacklo_epi16","","Unpacks and interleave 16-bit integers from the low half …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpackhi_epi32","","Unpacks and interleave 32-bit integers from the high half …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpacklo_epi32","","Unpacks and interleave 32-bit integers from the low half …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpackhi_epi64","","Unpacks and interleave 64-bit integers from the high half …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpacklo_epi64","","Unpacks and interleave 64-bit integers from the low half …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_xor_si256","","Computes the bitwise XOR of 256 bits (representing …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_extract_epi8","","Extracts an 8-bit integer from <code>a</code>, selected with <code>imm8</code>. …",null,[[["__m256i",3]]]],[5,"_mm256_extract_epi16","","Extracts a 16-bit integer from <code>a</code>, selected with <code>imm8</code>. …",null,[[["__m256i",3]]]],[5,"_mm256_extract_epi32","","Extracts a 32-bit integer from <code>a</code>, selected with <code>imm8</code>.",null,[[["__m256i",3]]]],[5,"_mm256_cvtsd_f64","","Returns the first element of the input vector of …",null,[[["__m256d",3]]]],[5,"_mm256_cvtsi256_si32","","Returns the first element of the input vector of <code>[8 x i32]</code>…",null,[[["__m256i",3]]]],[5,"_mm_fmadd_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_fmadd_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_fmadd_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_fmadd_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_fmadd_sd","","Multiplies the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_fmadd_ss","","Multiplies the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_fmaddsub_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_fmaddsub_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_fmaddsub_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_fmaddsub_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_fmsub_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_fmsub_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_fmsub_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_fmsub_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_fmsub_sd","","Multiplies the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_fmsub_ss","","Multiplies the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_fmsubadd_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_fmsubadd_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_fmsubadd_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_fmsubadd_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_fnmadd_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_fnmadd_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_fnmadd_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_fnmadd_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_fnmadd_sd","","Multiplies the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_fnmadd_ss","","Multiplies the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_fnmsub_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_fnmsub_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_fnmsub_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_fnmsub_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_fnmsub_sd","","Multiplies the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_fnmsub_ss","","Multiplies the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_lzcnt_u32","","Counts the leading most significant zero bits.",null,[[]]],[5,"_popcnt32","","Counts the bits that are set.",null,[[]]],[5,"_bextr_u32","","Extracts bits in range [<code>start</code>, <code>start</code> + <code>length</code>) from <code>a</code> into…",null,[[]]],[5,"_bextr2_u32","","Extracts bits of <code>a</code> specified by <code>control</code> into the least …",null,[[]]],[5,"_andn_u32","","Bitwise logical <code>AND</code> of inverted <code>a</code> with <code>b</code>.",null,[[]]],[5,"_blsi_u32","","Extracts lowest set isolated bit.",null,[[]]],[5,"_blsmsk_u32","","Gets mask up to lowest set bit.",null,[[]]],[5,"_blsr_u32","","Resets the lowest set bit of <code>x</code>.",null,[[]]],[5,"_tzcnt_u32","","Counts the number of trailing least significant zero bits.",null,[[]]],[5,"_mm_tzcnt_32","","Counts the number of trailing least significant zero bits.",null,[[]]],[5,"_mulx_u32","","Unsigned multiply without affecting flags.",null,[[]]],[5,"_bzhi_u32","","Zeroes higher bits of <code>a</code> >= <code>index</code>.",null,[[]]],[5,"_pdep_u32","","Scatter contiguous low order bits of <code>a</code> to the result at …",null,[[]]],[5,"_pext_u32","","Gathers the bits of <code>x</code> specified by the <code>mask</code> into the …",null,[[]]],[5,"_mm_extract_si64","","Extracts the bit range specified by <code>y</code> from the lower 64 …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_insert_si64","","Inserts the <code>[length:0]</code> bits of <code>y</code> into <code>x</code> at <code>index</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_stream_sd","","Non-temporal store of <code>a.0</code> into <code>p</code>.",null,[[["__m128d",3]]]],[5,"_mm_stream_ss","","Non-temporal store of <code>a.0</code> into <code>p</code>.",null,[[["__m128",3]]]],[5,"_blcfill_u32","","Clears all bits below the least significant zero bit of <code>x</code>.",null,[[]]],[5,"_blcfill_u64","","Clears all bits below the least significant zero bit of <code>x</code>.",null,[[]]],[5,"_blci_u32","","Sets all bits of <code>x</code> to 1 except for the least significant …",null,[[]]],[5,"_blci_u64","","Sets all bits of <code>x</code> to 1 except for the least significant …",null,[[]]],[5,"_blcic_u32","","Sets the least significant zero bit of <code>x</code> and clears all …",null,[[]]],[5,"_blcic_u64","","Sets the least significant zero bit of <code>x</code> and clears all …",null,[[]]],[5,"_blcmsk_u32","","Sets the least significant zero bit of <code>x</code> and clears all …",null,[[]]],[5,"_blcmsk_u64","","Sets the least significant zero bit of <code>x</code> and clears all …",null,[[]]],[5,"_blcs_u32","","Sets the least significant zero bit of <code>x</code>.",null,[[]]],[5,"_blcs_u64","","Sets the least significant zero bit of <code>x</code>.",null,[[]]],[5,"_blsfill_u32","","Sets all bits of <code>x</code> below the least significant one.",null,[[]]],[5,"_blsfill_u64","","Sets all bits of <code>x</code> below the least significant one.",null,[[]]],[5,"_blsic_u32","","Clears least significant bit and sets all other bits.",null,[[]]],[5,"_blsic_u64","","Clears least significant bit and sets all other bits.",null,[[]]],[5,"_t1mskc_u32","","Clears all bits below the least significant zero of <code>x</code> and …",null,[[]]],[5,"_t1mskc_u64","","Clears all bits below the least significant zero of <code>x</code> and …",null,[[]]],[5,"_tzmsk_u32","","Sets all bits below the least significant one of <code>x</code> and …",null,[[]]],[5,"_tzmsk_u64","","Sets all bits below the least significant one of <code>x</code> and …",null,[[]]],[5,"_mm_clmulepi64_si128","","Performs a carry-less multiplication of two 64-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_aesdec_si128","","Performs one round of an AES decryption flow on data …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_aesdeclast_si128","","Performs the last round of an AES decryption flow on data …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_aesenc_si128","","Performs one round of an AES encryption flow on data …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_aesenclast_si128","","Performs the last round of an AES encryption flow on data …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_aesimc_si128","","Performs the <code>InvMixColumns</code> transformation on <code>a</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_aeskeygenassist_si128","","Assist in expanding the AES cipher key.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_rdrand16_step","","Read a hardware generated 16-bit random value and store …",null,[[]]],[5,"_rdrand32_step","","Read a hardware generated 32-bit random value and store …",null,[[]]],[5,"_rdseed16_step","","Read a 16-bit NIST SP800-90B and SP800-90C compliant …",null,[[]]],[5,"_rdseed32_step","","Read a 32-bit NIST SP800-90B and SP800-90C compliant …",null,[[]]],[5,"_mm_sha1msg1_epu32","","Performs an intermediate calculation for the next four …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sha1msg2_epu32","","Performs the final calculation for the next four SHA1 …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sha1nexte_epu32","","Calculate SHA1 state variable E after four rounds of …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sha1rnds4_epu32","","Performs four rounds of SHA1 operation using an initial …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sha256msg1_epu32","","Performs an intermediate calculation for the next four …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sha256msg2_epu32","","Performs the final calculation for the next four SHA256 …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sha256rnds2_epu32","","Performs 2 rounds of SHA256 operation using an initial …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_addcarry_u32","","Adds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …",null,[[]]],[5,"_addcarryx_u32","","Adds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …",null,[[]]],[5,"_subborrow_u32","","Adds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …",null,[[]]],[5,"ud2","","Generates the trap instruction <code>UD2</code>",null,[[]]],[5,"_mm512_abs_epi32","","Computes the absolute values of packed 32-bit integers in …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_abs_epi32","","Computes the absolute value of packed 32-bit integers in <code>a</code>…",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_abs_epi32","","Computes the absolute value of packed 32-bit integers in <code>a</code>…",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_abs_epi64","","Compute the absolute value of packed signed 64-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_abs_epi64","","Compute the absolute value of packed signed 64-bit …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_abs_epi64","","Compute the absolute value of packed signed 64-bit …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_abs_ps","","Finds the absolute value of each packed single-precision …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_abs_ps","","Finds the absolute value of each packed single-precision …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_abs_pd","","Finds the absolute value of each packed double-precision …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_abs_pd","","Finds the absolute value of each packed double-precision …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_mov_epi32","","Move packed 32-bit integers from a to dst using writemask …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_mov_epi32","","Move packed 32-bit integers from a into dst using …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_mask_mov_epi64","","Move packed 64-bit integers from a to dst using writemask …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_mov_epi64","","Move packed 64-bit integers from a into dst using …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_mask_mov_ps","","Move packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_mov_ps","","Move packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask_mov_pd","","Move packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_mov_pd","","Move packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_add_epi32","","Add packed 32-bit integers in a and b, and store the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_add_epi32","","Add packed 32-bit integers in a and b, and store the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_add_epi32","","Add packed 32-bit integers in a and b, and store the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_add_epi64","","Add packed 64-bit integers in a and b, and store the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_add_epi64","","Add packed 64-bit integers in a and b, and store the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_add_epi64","","Add packed 64-bit integers in a and b, and store the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_add_ps","","Add packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_add_ps","","Add packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_add_ps","","Add packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_add_pd","","Add packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_add_pd","","Add packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_add_pd","","Add packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_sub_epi32","","Subtract packed 32-bit integers in b from packed 32-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_sub_epi32","","Subtract packed 32-bit integers in b from packed 32-bit …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_sub_epi32","","Subtract packed 32-bit integers in b from packed 32-bit …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_sub_epi64","","Subtract packed 64-bit integers in b from packed 64-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_sub_epi64","","Subtract packed 64-bit integers in b from packed 64-bit …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_sub_epi64","","Subtract packed 64-bit integers in b from packed 64-bit …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_sub_ps","","Subtract packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_sub_ps","","Subtract packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_sub_ps","","Subtract packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_sub_pd","","Subtract packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_sub_pd","","Subtract packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_sub_pd","","Subtract packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mul_epi32","","Multiply the low signed 32-bit integers from each packed …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_mul_epi32","","Multiply the low signed 32-bit integers from each packed …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_mul_epi32","","Multiply the low signed 32-bit integers from each packed …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_mullo_epi32","","Multiply the packed 32-bit integers in a and b, producing …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_mullo_epi32","","Multiply the packed 32-bit integers in a and b, producing …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_mullo_epi32","","Multiply the packed 32-bit integers in a and b, producing …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_mullox_epi64","","Multiplies elements in packed 64-bit integer vectors a …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_mullox_epi64","","Multiplies elements in packed 64-bit integer vectors a …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_mul_epu32","","Multiply the low unsigned 32-bit integers from each …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_mul_epu32","","Multiply the low unsigned 32-bit integers from each …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_mul_epu32","","Multiply the low unsigned 32-bit integers from each …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_mul_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_mul_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_mul_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mul_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_mul_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_mul_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_div_ps","","Divide packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_div_ps","","Divide packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_div_ps","","Divide packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_div_pd","","Divide packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_div_pd","","Divide packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_div_pd","","Divide packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_max_epi32","","Compare packed signed 32-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_max_epi32","","Compare packed signed 32-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_max_epi32","","Compare packed signed 32-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_max_epi64","","Compare packed signed 64-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_max_epi64","","Compare packed signed 64-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_max_epi64","","Compare packed signed 64-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_max_ps","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_max_ps","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_max_ps","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_max_pd","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_max_pd","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_max_pd","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_max_epu32","","Compare packed unsigned 32-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_max_epu32","","Compare packed unsigned 32-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_max_epu32","","Compare packed unsigned 32-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_max_epu64","","Compare packed unsigned 64-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_max_epu64","","Compare packed unsigned 64-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_max_epu64","","Compare packed unsigned 64-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_min_epi32","","Compare packed signed 32-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_min_epi32","","Compare packed signed 32-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_min_epi32","","Compare packed signed 32-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_min_epi64","","Compare packed signed 64-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_min_epi64","","Compare packed signed 64-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_min_epi64","","Compare packed signed 64-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_min_ps","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_min_ps","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_min_ps","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_min_pd","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_min_pd","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_min_pd","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_min_epu32","","Compare packed unsigned 32-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_min_epu32","","Compare packed unsigned 32-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_min_epu32","","Compare packed unsigned 32-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_min_epu64","","Compare packed unsigned 64-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_min_epu64","","Compare packed unsigned 64-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_min_epu64","","Compare packed unsigned 64-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_sqrt_ps","","Compute the square root of packed single-precision …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_sqrt_ps","","Compute the square root of packed single-precision …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_sqrt_ps","","Compute the square root of packed single-precision …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_sqrt_pd","","Compute the square root of packed double-precision …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_sqrt_pd","","Compute the square root of packed double-precision …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_sqrt_pd","","Compute the square root of packed double-precision …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fmadd_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_fmadd_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fmadd_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask3_fmadd_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fmadd_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fmadd_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fmadd_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask3_fmadd_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fmsub_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_fmsub_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fmsub_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask3_fmsub_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fmsub_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fmsub_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fmsub_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask3_fmsub_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fmaddsub_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_fmaddsub_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fmaddsub_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask3_fmaddsub_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fmaddsub_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fmaddsub_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fmaddsub_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask3_fmaddsub_pd","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fmsubadd_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_fmsubadd_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fmsubadd_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask3_fmsubadd_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fmsubadd_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fmsubadd_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fmsubadd_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask3_fmsubadd_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fnmadd_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_fnmadd_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fnmadd_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask3_fnmadd_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fnmadd_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fnmadd_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fnmadd_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask3_fnmadd_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fnmsub_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_fnmsub_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fnmsub_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask3_fnmsub_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fnmsub_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fnmsub_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fnmsub_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask3_fnmsub_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_rcp14_ps","","Compute the approximate reciprocal of packed …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_rcp14_ps","","Compute the approximate reciprocal of packed …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_rcp14_ps","","Compute the approximate reciprocal of packed …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_rcp14_pd","","Compute the approximate reciprocal of packed …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_rcp14_pd","","Compute the approximate reciprocal of packed …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_rcp14_pd","","Compute the approximate reciprocal of packed …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_rsqrt14_ps","","Compute the approximate reciprocal square root of packed …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_rsqrt14_ps","","Compute the approximate reciprocal square root of packed …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_rsqrt14_ps","","Compute the approximate reciprocal square root of packed …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_rsqrt14_pd","","Compute the approximate reciprocal square root of packed …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_rsqrt14_pd","","Compute the approximate reciprocal square root of packed …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_rsqrt14_pd","","Compute the approximate reciprocal square root of packed …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_getexp_ps","","Convert the exponent of each packed single-precision …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_getexp_ps","","Convert the exponent of each packed single-precision …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_getexp_ps","","Convert the exponent of each packed single-precision …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_getexp_pd","","Convert the exponent of each packed double-precision …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_getexp_pd","","Convert the exponent of each packed double-precision …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_getexp_pd","","Convert the exponent of each packed double-precision …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_roundscale_ps","","Round packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_roundscale_ps","","Round packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_roundscale_ps","","Round packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_roundscale_pd","","Round packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_roundscale_pd","","Round packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_roundscale_pd","","Round packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_scalef_ps","","Scale the packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_scalef_ps","","Scale the packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_scalef_ps","","Scale the packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_scalef_pd","","Scale the packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_scalef_pd","","Scale the packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_scalef_pd","","Scale the packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fixupimm_ps","","Fix up packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__m512i",3]],["__m512",3]]],[5,"_mm512_mask_fixupimm_ps","","Fix up packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fixupimm_ps","","Fix up packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fixupimm_pd","","Fix up packed double-precision (64-bit) floating-point …",null,[[["__m512i",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fixupimm_pd","","Fix up packed double-precision (64-bit) floating-point …",null,[[["__m512i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fixupimm_pd","","Fix up packed double-precision (64-bit) floating-point …",null,[[["__m512i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_ternarylogic_epi32","","Bitwise ternary logic that provides the capability to …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_ternarylogic_epi32","","Bitwise ternary logic that provides the capability to …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_ternarylogic_epi32","","Bitwise ternary logic that provides the capability to …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_ternarylogic_epi64","","Bitwise ternary logic that provides the capability to …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_ternarylogic_epi64","","Bitwise ternary logic that provides the capability to …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_ternarylogic_epi64","","Bitwise ternary logic that provides the capability to …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_getmant_ps","","Normalize the mantissas of packed single-precision …",null,[[["__m512",3],["_mm_mantissa_sign_enum",6],["_mm_mantissa_norm_enum",6]],["__m512",3]]],[5,"_mm512_mask_getmant_ps","","Normalize the mantissas of packed single-precision …",null,[[["_mm_mantissa_sign_enum",6],["_mm_mantissa_norm_enum",6],["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_getmant_ps","","Normalize the mantissas of packed single-precision …",null,[[["_mm_mantissa_sign_enum",6],["_mm_mantissa_norm_enum",6],["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_getmant_pd","","Normalize the mantissas of packed double-precision …",null,[[["_mm_mantissa_sign_enum",6],["_mm_mantissa_norm_enum",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_getmant_pd","","Normalize the mantissas of packed double-precision …",null,[[["__mmask8",6],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_getmant_pd","","Normalize the mantissas of packed double-precision …",null,[[["__mmask8",6],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_add_round_ps","","Add packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_add_round_ps","","Add packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_add_round_ps","","Add packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_add_round_pd","","Add packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_add_round_pd","","Add packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_add_round_pd","","Add packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_sub_round_ps","","Subtract packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_sub_round_ps","","Subtract packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_sub_round_ps","","Subtract packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_sub_round_pd","","Subtract packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_sub_round_pd","","Subtract packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_sub_round_pd","","Subtract packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mul_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_mul_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_mul_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mul_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_mul_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_mul_round_pd","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_div_round_ps","","Divide packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_div_round_ps","","Divide packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_div_round_ps","","Divide packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_div_round_pd","","Divide packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_div_round_pd","","Divide packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_div_round_pd","","Divide packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_sqrt_round_ps","","Compute the square root of packed single-precision …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_sqrt_round_ps","","Compute the square root of packed single-precision …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_sqrt_round_ps","","Compute the square root of packed single-precision …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_sqrt_round_pd","","Compute the square root of packed double-precision …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_sqrt_round_pd","","Compute the square root of packed double-precision …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_sqrt_round_pd","","Compute the square root of packed double-precision …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fmadd_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_fmadd_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fmadd_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask3_fmadd_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fmadd_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fmadd_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fmadd_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask3_fmadd_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fmsub_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_fmsub_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fmsub_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask3_fmsub_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fmsub_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fmsub_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fmsub_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask3_fmsub_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fmaddsub_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_fmaddsub_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fmaddsub_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask3_fmaddsub_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fmaddsub_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fmaddsub_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fmaddsub_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask3_fmaddsub_round_pd","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fmsubadd_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_fmsubadd_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fmsubadd_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask3_fmsubadd_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fmsubadd_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fmsubadd_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fmsubadd_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask3_fmsubadd_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fnmadd_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_fnmadd_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fnmadd_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask3_fnmadd_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fnmadd_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fnmadd_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fnmadd_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask3_fnmadd_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fnmsub_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_fnmsub_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fnmsub_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask3_fnmsub_round_ps","","Multiply packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fnmsub_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fnmsub_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fnmsub_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask3_fnmsub_round_pd","","Multiply packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_max_round_ps","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_max_round_ps","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_max_round_ps","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_max_round_pd","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_max_round_pd","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_max_round_pd","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_min_round_ps","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_min_round_ps","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_min_round_ps","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_min_round_pd","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_min_round_pd","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_min_round_pd","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_getexp_round_ps","","Convert the exponent of each packed single-precision …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_getexp_round_ps","","Convert the exponent of each packed single-precision …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_getexp_round_ps","","Convert the exponent of each packed single-precision …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_getexp_round_pd","","Convert the exponent of each packed double-precision …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_getexp_round_pd","","Convert the exponent of each packed double-precision …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_getexp_round_pd","","Convert the exponent of each packed double-precision …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_roundscale_round_ps","","Round packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_roundscale_round_ps","","Round packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_roundscale_round_ps","","Round packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_roundscale_round_pd","","Round packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_roundscale_round_pd","","Round packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_roundscale_round_pd","","Round packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_scalef_round_ps","","Scale the packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_scalef_round_ps","","Scale the packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_scalef_round_ps","","Scale the packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_scalef_round_pd","","Scale the packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_scalef_round_pd","","Scale the packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_scalef_round_pd","","Scale the packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_fixupimm_round_ps","","Fix up packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__m512i",3]],["__m512",3]]],[5,"_mm512_mask_fixupimm_round_ps","","Fix up packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_fixupimm_round_ps","","Fix up packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_fixupimm_round_pd","","Fix up packed double-precision (64-bit) floating-point …",null,[[["__m512i",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_fixupimm_round_pd","","Fix up packed double-precision (64-bit) floating-point …",null,[[["__m512i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_fixupimm_round_pd","","Fix up packed double-precision (64-bit) floating-point …",null,[[["__m512i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_getmant_round_ps","","Normalize the mantissas of packed single-precision …",null,[[["__m512",3],["_mm_mantissa_sign_enum",6],["_mm_mantissa_norm_enum",6]],["__m512",3]]],[5,"_mm512_mask_getmant_round_ps","","Normalize the mantissas of packed single-precision …",null,[[["_mm_mantissa_sign_enum",6],["_mm_mantissa_norm_enum",6],["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_getmant_round_ps","","Normalize the mantissas of packed single-precision …",null,[[["_mm_mantissa_sign_enum",6],["_mm_mantissa_norm_enum",6],["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_getmant_round_pd","","Normalize the mantissas of packed double-precision …",null,[[["_mm_mantissa_sign_enum",6],["_mm_mantissa_norm_enum",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_getmant_round_pd","","Normalize the mantissas of packed double-precision …",null,[[["__mmask8",6],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_getmant_round_pd","","Normalize the mantissas of packed double-precision …",null,[[["__mmask8",6],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_cvtps_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512i",3]]],[5,"_mm512_mask_cvtps_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512i",3],["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_cvtps_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_cvtps_epu32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512i",3]]],[5,"_mm512_mask_cvtps_epu32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512i",3],["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_cvtps_epu32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_cvtps_pd","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m512d",3]]],[5,"_mm512_mask_cvtps_pd","","Convert packed single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m256",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_cvtps_pd","","Convert packed single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m256",3]],["__m512d",3]]],[5,"_mm512_cvtpslo_pd","","Performs element-by-element conversion of the lower half …",null,[[["__m512",3]],["__m512d",3]]],[5,"_mm512_mask_cvtpslo_pd","","Performs element-by-element conversion of the lower half …",null,[[["__m512",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_cvtpd_ps","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m256",3]]],[5,"_mm512_mask_cvtpd_ps","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m256",3],["__mmask8",6],["__m512d",3]],["__m256",3]]],[5,"_mm512_maskz_cvtpd_ps","","Convert packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m256",3]]],[5,"_mm512_cvtpd_pslo","","Performs an element-by-element conversion of packed …",null,[[["__m512d",3]],["__m512",3]]],[5,"_mm512_mask_cvtpd_pslo","","Performs an element-by-element conversion of packed …",null,[[["__m512",3],["__mmask8",6],["__m512d",3]],["__m512",3]]],[5,"_mm512_cvtepi8_epi32","","Sign extend packed 8-bit integers in a to packed 32-bit …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_cvtepi8_epi32","","Sign extend packed 8-bit integers in a to packed 32-bit …",null,[[["__m512i",3],["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_cvtepi8_epi32","","Sign extend packed 8-bit integers in a to packed 32-bit …",null,[[["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_cvtepi8_epi64","","Sign extend packed 8-bit integers in the low 8 bytes of a …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_cvtepi8_epi64","","Sign extend packed 8-bit integers in the low 8 bytes of a …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_cvtepi8_epi64","","Sign extend packed 8-bit integers in the low 8 bytes of a …",null,[[["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_cvtepu8_epi32","","Zero extend packed unsigned 8-bit integers in a to packed …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_cvtepu8_epi32","","Zero extend packed unsigned 8-bit integers in a to packed …",null,[[["__m512i",3],["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_cvtepu8_epi32","","Zero extend packed unsigned 8-bit integers in a to packed …",null,[[["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_cvtepu8_epi64","","Zero extend packed unsigned 8-bit integers in the low 8 …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_cvtepu8_epi64","","Zero extend packed unsigned 8-bit integers in the low 8 …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_cvtepu8_epi64","","Zero extend packed unsigned 8-bit integers in the low 8 …",null,[[["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_cvtepi16_epi32","","Sign extend packed 16-bit integers in a to packed 32-bit …",null,[[["__m256i",3]],["__m512i",3]]],[5,"_mm512_mask_cvtepi16_epi32","","Sign extend packed 16-bit integers in a to packed 32-bit …",null,[[["__m512i",3],["__mmask16",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_maskz_cvtepi16_epi32","","Sign extend packed 16-bit integers in a to packed 32-bit …",null,[[["__mmask16",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_cvtepi16_epi64","","Sign extend packed 16-bit integers in a to packed 64-bit …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_cvtepi16_epi64","","Sign extend packed 16-bit integers in a to packed 64-bit …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_cvtepi16_epi64","","Sign extend packed 16-bit integers in a to packed 64-bit …",null,[[["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_cvtepu16_epi32","","Zero extend packed unsigned 16-bit integers in a to …",null,[[["__m256i",3]],["__m512i",3]]],[5,"_mm512_mask_cvtepu16_epi32","","Zero extend packed unsigned 16-bit integers in a to …",null,[[["__m512i",3],["__mmask16",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_maskz_cvtepu16_epi32","","Zero extend packed unsigned 16-bit integers in a to …",null,[[["__mmask16",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_cvtepu16_epi64","","Zero extend packed unsigned 16-bit integers in a to …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_cvtepu16_epi64","","Zero extend packed unsigned 16-bit integers in a to …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_cvtepu16_epi64","","Zero extend packed unsigned 16-bit integers in a to …",null,[[["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_cvtepi32_epi64","","Sign extend packed 32-bit integers in a to packed 64-bit …",null,[[["__m256i",3]],["__m512i",3]]],[5,"_mm512_mask_cvtepi32_epi64","","Sign extend packed 32-bit integers in a to packed 64-bit …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_maskz_cvtepi32_epi64","","Sign extend packed 32-bit integers in a to packed 64-bit …",null,[[["__mmask8",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_cvtepu32_epi64","","Zero extend packed unsigned 32-bit integers in a to …",null,[[["__m256i",3]],["__m512i",3]]],[5,"_mm512_mask_cvtepu32_epi64","","Zero extend packed unsigned 32-bit integers in a to …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_maskz_cvtepu32_epi64","","Zero extend packed unsigned 32-bit integers in a to …",null,[[["__mmask8",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_cvtepi32_ps","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m512i",3]],["__m512",3]]],[5,"_mm512_mask_cvtepi32_ps","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_cvtepi32_ps","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_cvtepi32_pd","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m256i",3]],["__m512d",3]]],[5,"_mm512_mask_cvtepi32_pd","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m256i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_cvtepi32_pd","","Convert packed signed 32-bit integers in a to packed …",null,[[["__mmask8",6],["__m256i",3]],["__m512d",3]]],[5,"_mm512_cvtepu32_ps","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m512i",3]],["__m512",3]]],[5,"_mm512_mask_cvtepu32_ps","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_cvtepu32_ps","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_cvtepu32_pd","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m256i",3]],["__m512d",3]]],[5,"_mm512_mask_cvtepu32_pd","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m256i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_cvtepu32_pd","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__mmask8",6],["__m256i",3]],["__m512d",3]]],[5,"_mm512_cvtepi32lo_pd","","Performs element-by-element conversion of the lower half …",null,[[["__m512i",3]],["__m512d",3]]],[5,"_mm512_mask_cvtepi32lo_pd","","Performs element-by-element conversion of the lower half …",null,[[["__m512i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_cvtepu32lo_pd","","Performs element-by-element conversion of the lower half …",null,[[["__m512i",3]],["__m512d",3]]],[5,"_mm512_mask_cvtepu32lo_pd","","Performs element-by-element conversion of the lower half …",null,[[["__m512i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_cvtepi32_epi16","","Convert packed 32-bit integers in a to packed 16-bit …",null,[[["__m512i",3]],["__m256i",3]]],[5,"_mm512_mask_cvtepi32_epi16","","Convert packed 32-bit integers in a to packed 16-bit …",null,[[["__m512i",3],["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvtepi32_epi16","","Convert packed 32-bit integers in a to packed 16-bit …",null,[[["__m512i",3],["__mmask16",6]],["__m256i",3]]],[5,"_mm512_cvtepi32_epi8","","Convert packed 32-bit integers in a to packed 8-bit …",null,[[["__m512i",3]],["__m128i",3]]],[5,"_mm512_mask_cvtepi32_epi8","","Convert packed 32-bit integers in a to packed 8-bit …",null,[[["__m512i",3],["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm512_maskz_cvtepi32_epi8","","Convert packed 32-bit integers in a to packed 8-bit …",null,[[["__m512i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm512_cvtepi64_epi32","","Convert packed 64-bit integers in a to packed 32-bit …",null,[[["__m512i",3]],["__m256i",3]]],[5,"_mm512_mask_cvtepi64_epi32","","Convert packed 64-bit integers in a to packed 32-bit …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvtepi64_epi32","","Convert packed 64-bit integers in a to packed 32-bit …",null,[[["__m512i",3],["__mmask8",6]],["__m256i",3]]],[5,"_mm512_cvtepi64_epi16","","Convert packed 64-bit integers in a to packed 16-bit …",null,[[["__m512i",3]],["__m128i",3]]],[5,"_mm512_mask_cvtepi64_epi16","","Convert packed 64-bit integers in a to packed 16-bit …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_maskz_cvtepi64_epi16","","Convert packed 64-bit integers in a to packed 16-bit …",null,[[["__m512i",3],["__mmask8",6]],["__m128i",3]]],[5,"_mm512_cvtepi64_epi8","","Convert packed 64-bit integers in a to packed 8-bit …",null,[[["__m512i",3]],["__m128i",3]]],[5,"_mm512_mask_cvtepi64_epi8","","Convert packed 64-bit integers in a to packed 8-bit …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_maskz_cvtepi64_epi8","","Convert packed 64-bit integers in a to packed 8-bit …",null,[[["__m512i",3],["__mmask8",6]],["__m128i",3]]],[5,"_mm512_cvtsepi32_epi16","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m512i",3]],["__m256i",3]]],[5,"_mm512_mask_cvtsepi32_epi16","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m512i",3],["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvtsepi32_epi16","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m512i",3],["__mmask16",6]],["__m256i",3]]],[5,"_mm512_cvtsepi32_epi8","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m512i",3]],["__m128i",3]]],[5,"_mm512_mask_cvtsepi32_epi8","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m512i",3],["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm512_maskz_cvtsepi32_epi8","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m512i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm512_cvtsepi64_epi32","","Convert packed signed 64-bit integers in a to packed …",null,[[["__m512i",3]],["__m256i",3]]],[5,"_mm512_mask_cvtsepi64_epi32","","Convert packed signed 64-bit integers in a to packed …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvtsepi64_epi32","","Convert packed signed 64-bit integers in a to packed …",null,[[["__m512i",3],["__mmask8",6]],["__m256i",3]]],[5,"_mm512_cvtsepi64_epi16","","Convert packed signed 64-bit integers in a to packed …",null,[[["__m512i",3]],["__m128i",3]]],[5,"_mm512_mask_cvtsepi64_epi16","","Convert packed signed 64-bit integers in a to packed …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_maskz_cvtsepi64_epi16","","Convert packed signed 64-bit integers in a to packed …",null,[[["__m512i",3],["__mmask8",6]],["__m128i",3]]],[5,"_mm512_cvtsepi64_epi8","","Convert packed signed 64-bit integers in a to packed …",null,[[["__m512i",3]],["__m128i",3]]],[5,"_mm512_mask_cvtsepi64_epi8","","Convert packed signed 64-bit integers in a to packed …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_maskz_cvtsepi64_epi8","","Convert packed signed 64-bit integers in a to packed …",null,[[["__m512i",3],["__mmask8",6]],["__m128i",3]]],[5,"_mm512_cvtusepi32_epi16","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m512i",3]],["__m256i",3]]],[5,"_mm512_mask_cvtusepi32_epi16","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m512i",3],["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvtusepi32_epi16","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m512i",3],["__mmask16",6]],["__m256i",3]]],[5,"_mm512_cvtusepi32_epi8","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m512i",3]],["__m128i",3]]],[5,"_mm512_mask_cvtusepi32_epi8","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m512i",3],["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm512_maskz_cvtusepi32_epi8","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m512i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm512_cvtusepi64_epi32","","Convert packed unsigned 64-bit integers in a to packed …",null,[[["__m512i",3]],["__m256i",3]]],[5,"_mm512_mask_cvtusepi64_epi32","","Convert packed unsigned 64-bit integers in a to packed …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvtusepi64_epi32","","Convert packed unsigned 64-bit integers in a to packed …",null,[[["__m512i",3],["__mmask8",6]],["__m256i",3]]],[5,"_mm512_cvtusepi64_epi16","","Convert packed unsigned 64-bit integers in a to packed …",null,[[["__m512i",3]],["__m128i",3]]],[5,"_mm512_mask_cvtusepi64_epi16","","Convert packed unsigned 64-bit integers in a to packed …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_maskz_cvtusepi64_epi16","","Convert packed unsigned 64-bit integers in a to packed …",null,[[["__m512i",3],["__mmask8",6]],["__m128i",3]]],[5,"_mm512_cvtusepi64_epi8","","Convert packed unsigned 64-bit integers in a to packed …",null,[[["__m512i",3]],["__m128i",3]]],[5,"_mm512_mask_cvtusepi64_epi8","","Convert packed unsigned 64-bit integers in a to packed …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_maskz_cvtusepi64_epi8","","Convert packed unsigned 64-bit integers in a to packed …",null,[[["__m512i",3],["__mmask8",6]],["__m128i",3]]],[5,"_mm512_cvt_roundps_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512i",3]]],[5,"_mm512_mask_cvt_roundps_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512i",3],["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_cvt_roundps_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_cvt_roundps_epu32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512i",3]]],[5,"_mm512_mask_cvt_roundps_epu32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512i",3],["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_cvt_roundps_epu32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_cvt_roundps_pd","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m512d",3]]],[5,"_mm512_mask_cvt_roundps_pd","","Convert packed single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m256",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_cvt_roundps_pd","","Convert packed single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m256",3]],["__m512d",3]]],[5,"_mm512_cvt_roundpd_epi32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m256i",3]]],[5,"_mm512_mask_cvt_roundpd_epi32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3],["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvt_roundpd_epi32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m256i",3]]],[5,"_mm512_cvt_roundpd_epu32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m256i",3]]],[5,"_mm512_mask_cvt_roundpd_epu32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3],["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvt_roundpd_epu32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m256i",3]]],[5,"_mm512_cvt_roundpd_ps","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m256",3]]],[5,"_mm512_mask_cvt_roundpd_ps","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m256",3],["__mmask8",6],["__m512d",3]],["__m256",3]]],[5,"_mm512_maskz_cvt_roundpd_ps","","Convert packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m256",3]]],[5,"_mm512_cvt_roundepi32_ps","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m512i",3]],["__m512",3]]],[5,"_mm512_mask_cvt_roundepi32_ps","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_cvt_roundepi32_ps","","Convert packed signed 32-bit integers in a to packed …",null,[[["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_cvt_roundepu32_ps","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m512i",3]],["__m512",3]]],[5,"_mm512_mask_cvt_roundepu32_ps","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_cvt_roundepu32_ps","","Convert packed unsigned 32-bit integers in a to packed …",null,[[["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_cvt_roundps_ph","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m256i",3]]],[5,"_mm512_mask_cvt_roundps_ph","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvt_roundps_ph","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m256i",3]]],[5,"_mm512_cvtps_ph","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m256i",3]]],[5,"_mm512_mask_cvtps_ph","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvtps_ph","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m256i",3]]],[5,"_mm512_cvt_roundph_ps","","Convert packed half-precision (16-bit) floating-point …",null,[[["__m256i",3]],["__m512",3]]],[5,"_mm512_mask_cvt_roundph_ps","","Convert packed half-precision (16-bit) floating-point …",null,[[["__m512",3],["__mmask16",6],["__m256i",3]],["__m512",3]]],[5,"_mm512_maskz_cvt_roundph_ps","","Convert packed half-precision (16-bit) floating-point …",null,[[["__mmask16",6],["__m256i",3]],["__m512",3]]],[5,"_mm512_cvtph_ps","","Convert packed half-precision (16-bit) floating-point …",null,[[["__m256i",3]],["__m512",3]]],[5,"_mm512_mask_cvtph_ps","","Convert packed half-precision (16-bit) floating-point …",null,[[["__m512",3],["__mmask16",6],["__m256i",3]],["__m512",3]]],[5,"_mm512_maskz_cvtph_ps","","Convert packed half-precision (16-bit) floating-point …",null,[[["__mmask16",6],["__m256i",3]],["__m512",3]]],[5,"_mm512_cvtt_roundps_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512i",3]]],[5,"_mm512_mask_cvtt_roundps_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512i",3],["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_cvtt_roundps_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_cvtt_roundps_epu32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512i",3]]],[5,"_mm512_mask_cvtt_roundps_epu32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512i",3],["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_cvtt_roundps_epu32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_cvtt_roundpd_epi32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m256i",3]]],[5,"_mm512_mask_cvtt_roundpd_epi32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3],["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvtt_roundpd_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m256i",3]]],[5,"_mm512_cvtt_roundpd_epu32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m256i",3]]],[5,"_mm512_mask_cvtt_roundpd_epu32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3],["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_cvttps_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512i",3]]],[5,"_mm512_mask_cvttps_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512i",3],["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_cvttps_epi32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_cvttps_epu32","","Convert packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__m512i",3]]],[5,"_mm512_mask_cvttps_epu32","","Convert packed double-precision (32-bit) floating-point …",null,[[["__m512i",3],["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_cvttps_epu32","","Convert packed double-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_cvtt_roundpd_epu32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m256i",3]]],[5,"_mm512_cvttpd_epi32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m256i",3]]],[5,"_mm512_mask_cvttpd_epi32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3],["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvttpd_epi32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m256i",3]]],[5,"_mm512_cvttpd_epu32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__m256i",3]]],[5,"_mm512_mask_cvttpd_epu32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__m512d",3],["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvttpd_epu32","","Convert packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m256i",3]]],[5,"_mm512_setzero_pd","","Returns vector of type <code>__m512d</code> with all elements set to …",null,[[],["__m512d",3]]],[5,"_mm512_setzero_ps","","Returns vector of type <code>__m512d</code> with all elements set to …",null,[[],["__m512",3]]],[5,"_mm512_setzero","","Return vector of type __m512 with all elements set to …",null,[[],["__m512",3]]],[5,"_mm512_setzero_si512","","Returns vector of type <code>__m512i</code> with all elements set to …",null,[[],["__m512i",3]]],[5,"_mm512_setzero_epi32","","Return vector of type __m512i with all elements set to …",null,[[],["__m512i",3]]],[5,"_mm512_setr_epi32","","Sets packed 32-bit integers in <code>dst</code> with the supplied …",null,[[],["__m512i",3]]],[5,"_mm512_set_epi8","","Set packed 8-bit integers in dst with the supplied values.",null,[[],["__m512i",3]]],[5,"_mm512_set_epi16","","Set packed 16-bit integers in dst with the supplied …",null,[[],["__m512i",3]]],[5,"_mm512_set4_epi32","","Set packed 32-bit integers in dst with the repeated 4 …",null,[[],["__m512i",3]]],[5,"_mm512_set4_ps","","Set packed single-precision (32-bit) floating-point …",null,[[],["__m512",3]]],[5,"_mm512_set4_pd","","Set packed double-precision (64-bit) floating-point …",null,[[],["__m512d",3]]],[5,"_mm512_setr4_epi32","","Set packed 32-bit integers in dst with the repeated 4 …",null,[[],["__m512i",3]]],[5,"_mm512_setr4_ps","","Set packed single-precision (32-bit) floating-point …",null,[[],["__m512",3]]],[5,"_mm512_setr4_pd","","Set packed double-precision (64-bit) floating-point …",null,[[],["__m512d",3]]],[5,"_mm512_set_epi64","","Set packed 64-bit integers in dst with the supplied …",null,[[],["__m512i",3]]],[5,"_mm512_setr_epi64","","Set packed 64-bit integers in dst with the supplied …",null,[[],["__m512i",3]]],[5,"_mm512_i32gather_pd","","Gather double-precision (64-bit) floating-point elements …",null,[[["__m256i",3]],["__m512d",3]]],[5,"_mm512_mask_i32gather_pd","","Gather double-precision (64-bit) floating-point elements …",null,[[["__m256i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_i64gather_pd","","Gather double-precision (64-bit) floating-point elements …",null,[[["__m512i",3]],["__m512d",3]]],[5,"_mm512_mask_i64gather_pd","","Gather double-precision (64-bit) floating-point elements …",null,[[["__m512i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_i64gather_ps","","Gather single-precision (32-bit) floating-point elements …",null,[[["__m512i",3]],["__m256",3]]],[5,"_mm512_mask_i64gather_ps","","Gather single-precision (32-bit) floating-point elements …",null,[[["__m512i",3],["__m256",3],["__mmask8",6]],["__m256",3]]],[5,"_mm512_i32gather_ps","","Gather single-precision (32-bit) floating-point elements …",null,[[["__m512i",3]],["__m512",3]]],[5,"_mm512_mask_i32gather_ps","","Gather single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_i32gather_epi32","","Gather 32-bit integers from memory using 32-bit indices. …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_i32gather_epi32","","Gather 32-bit integers from memory using 32-bit indices. …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_i32gather_epi64","","Gather 64-bit integers from memory using 32-bit indices. …",null,[[["__m256i",3]],["__m512i",3]]],[5,"_mm512_mask_i32gather_epi64","","Gather 64-bit integers from memory using 32-bit indices. …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_i64gather_epi64","","Gather 64-bit integers from memory using 64-bit indices. …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_i64gather_epi64","","Gather 64-bit integers from memory using 64-bit indices. …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_i64gather_epi32","","Gather 32-bit integers from memory using 64-bit indices. …",null,[[["__m512i",3]],["__m256i",3]]],[5,"_mm512_mask_i64gather_epi32","","Gather 32-bit integers from memory using 64-bit indices. …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_i32scatter_pd","","Scatter double-precision (64-bit) floating-point elements …",null,[[["__m512d",3],["__m256i",3]]]],[5,"_mm512_mask_i32scatter_pd","","Scatter double-precision (64-bit) floating-point elements …",null,[[["__m512d",3],["__mmask8",6],["__m256i",3]]]],[5,"_mm512_i64scatter_pd","","Scatter double-precision (64-bit) floating-point elements …",null,[[["__m512i",3],["__m512d",3]]]],[5,"_mm512_mask_i64scatter_pd","","Scatter double-precision (64-bit) floating-point elements …",null,[[["__m512i",3],["__mmask8",6],["__m512d",3]]]],[5,"_mm512_i32scatter_ps","","Scatter single-precision (32-bit) floating-point elements …",null,[[["__m512i",3],["__m512",3]]]],[5,"_mm512_mask_i32scatter_ps","","Scatter single-precision (32-bit) floating-point elements …",null,[[["__m512i",3],["__m512",3],["__mmask16",6]]]],[5,"_mm512_i64scatter_ps","","Scatter single-precision (32-bit) floating-point elements …",null,[[["__m512i",3],["__m256",3]]]],[5,"_mm512_mask_i64scatter_ps","","Scatter single-precision (32-bit) floating-point elements …",null,[[["__m512i",3],["__mmask8",6],["__m256",3]]]],[5,"_mm512_i32scatter_epi64","","Scatter 64-bit integers from a into memory using 32-bit …",null,[[["__m512i",3],["__m256i",3]]]],[5,"_mm512_mask_i32scatter_epi64","","Scatter 64-bit integers from a into memory using 32-bit …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]]]],[5,"_mm512_i64scatter_epi64","","Scatter 64-bit integers from a into memory using 64-bit …",null,[[["__m512i",3]]]],[5,"_mm512_mask_i64scatter_epi64","","Scatter 64-bit integers from a into memory using 64-bit …",null,[[["__m512i",3],["__mmask8",6]]]],[5,"_mm512_i32scatter_epi32","","Scatter 32-bit integers from a into memory using 32-bit …",null,[[["__m512i",3]]]],[5,"_mm512_mask_i32scatter_epi32","","Scatter 32-bit integers from a into memory using 32-bit …",null,[[["__m512i",3],["__mmask16",6]]]],[5,"_mm512_i64scatter_epi32","","Scatter 32-bit integers from a into memory using 64-bit …",null,[[["__m512i",3],["__m256i",3]]]],[5,"_mm512_mask_i64scatter_epi32","","Scatter 32-bit integers from a into memory using 64-bit …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]]]],[5,"_mm512_mask_compress_epi32","","Contiguously store the active 32-bit integers in a (those …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_compress_epi32","","Contiguously store the active 32-bit integers in a (those …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_mask_compress_epi64","","Contiguously store the active 64-bit integers in a (those …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_compress_epi64","","Contiguously store the active 64-bit integers in a (those …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_mask_compress_ps","","Contiguously store the active single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_compress_ps","","Contiguously store the active single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask_compress_pd","","Contiguously store the active double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_compress_pd","","Contiguously store the active double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_expand_epi32","","Load contiguous active 32-bit integers from a (those with …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_expand_epi32","","Load contiguous active 32-bit integers from a (those with …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_mask_expand_epi64","","Load contiguous active 64-bit integers from a (those with …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_expand_epi64","","Load contiguous active 64-bit integers from a (those with …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_mask_expand_ps","","Load contiguous active single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_expand_ps","","Load contiguous active single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask_expand_pd","","Load contiguous active double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_expand_pd","","Load contiguous active double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_rol_epi32","","Rotate the bits in each packed 32-bit integer in a to the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_rol_epi32","","Rotate the bits in each packed 32-bit integer in a to the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_rol_epi32","","Rotate the bits in each packed 32-bit integer in a to the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_ror_epi32","","Rotate the bits in each packed 32-bit integer in a to the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_ror_epi32","","Rotate the bits in each packed 32-bit integer in a to the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_ror_epi32","","Rotate the bits in each packed 32-bit integer in a to the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_rol_epi64","","Rotate the bits in each packed 64-bit integer in a to the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_rol_epi64","","Rotate the bits in each packed 64-bit integer in a to the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_rol_epi64","","Rotate the bits in each packed 64-bit integer in a to the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_ror_epi64","","Rotate the bits in each packed 64-bit integer in a to the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_ror_epi64","","Rotate the bits in each packed 64-bit integer in a to the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_ror_epi64","","Rotate the bits in each packed 64-bit integer in a to the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_slli_epi32","","Shift packed 32-bit integers in a left by imm8 while …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_slli_epi32","","Shift packed 32-bit integers in a left by imm8 while …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_slli_epi32","","Shift packed 32-bit integers in a left by imm8 while …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_srli_epi32","","Shift packed 32-bit integers in a right by imm8 while …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_srli_epi32","","Shift packed 32-bit integers in a right by imm8 while …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_srli_epi32","","Shift packed 32-bit integers in a right by imm8 while …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_slli_epi64","","Shift packed 64-bit integers in a left by imm8 while …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_slli_epi64","","Shift packed 64-bit integers in a left by imm8 while …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_slli_epi64","","Shift packed 64-bit integers in a left by imm8 while …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_srli_epi64","","Shift packed 64-bit integers in a right by imm8 while …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_srli_epi64","","Shift packed 64-bit integers in a right by imm8 while …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_srli_epi64","","Shift packed 64-bit integers in a right by imm8 while …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_sll_epi32","","Shift packed 32-bit integers in a left by count while …",null,[[["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_sll_epi32","","Shift packed 32-bit integers in a left by count while …",null,[[["__m512i",3],["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_sll_epi32","","Shift packed 32-bit integers in a left by count while …",null,[[["__m512i",3],["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_srl_epi32","","Shift packed 32-bit integers in a right by count while …",null,[[["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_srl_epi32","","Shift packed 32-bit integers in a right by count while …",null,[[["__m512i",3],["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_srl_epi32","","Shift packed 32-bit integers in a right by count while …",null,[[["__m512i",3],["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_sll_epi64","","Shift packed 64-bit integers in a left by count while …",null,[[["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_sll_epi64","","Shift packed 64-bit integers in a left by count while …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_sll_epi64","","Shift packed 64-bit integers in a left by count while …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_srl_epi64","","Shift packed 64-bit integers in a right by count while …",null,[[["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_srl_epi64","","Shift packed 64-bit integers in a right by count while …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_srl_epi64","","Shift packed 64-bit integers in a left by count while …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_sra_epi32","","Shift packed 32-bit integers in a right by count while …",null,[[["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_sra_epi32","","Shift packed 32-bit integers in a right by count while …",null,[[["__m512i",3],["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_sra_epi32","","Shift packed 32-bit integers in a right by count while …",null,[[["__m512i",3],["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_sra_epi64","","Shift packed 64-bit integers in a right by count while …",null,[[["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_sra_epi64","","Shift packed 64-bit integers in a right by count while …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_sra_epi64","","Shift packed 64-bit integers in a right by count while …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_srai_epi32","","Shift packed 32-bit integers in a right by imm8 while …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_srai_epi32","","Shift packed 32-bit integers in a right by imm8 while …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_srai_epi32","","Shift packed 32-bit integers in a right by imm8 while …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_srai_epi64","","Shift packed 64-bit integers in a right by imm8 while …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_srai_epi64","","Shift packed 64-bit integers in a right by imm8 while …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_srai_epi64","","Shift packed 64-bit integers in a right by imm8 while …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_srav_epi32","","Shift packed 32-bit integers in a right by the amount …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_srav_epi32","","Shift packed 32-bit integers in a right by the amount …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_srav_epi32","","Shift packed 32-bit integers in a right by the amount …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_srav_epi64","","Shift packed 64-bit integers in a right by the amount …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_srav_epi64","","Shift packed 64-bit integers in a right by the amount …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_srav_epi64","","Shift packed 64-bit integers in a right by the amount …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_rolv_epi32","","Rotate the bits in each packed 32-bit integer in a to the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_rolv_epi32","","Rotate the bits in each packed 32-bit integer in a to the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_rolv_epi32","","Rotate the bits in each packed 32-bit integer in a to the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_rorv_epi32","","Rotate the bits in each packed 32-bit integer in a to the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_rorv_epi32","","Rotate the bits in each packed 32-bit integer in a to the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_rorv_epi32","","Rotate the bits in each packed 32-bit integer in a to the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_rolv_epi64","","Rotate the bits in each packed 64-bit integer in a to the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_rolv_epi64","","Rotate the bits in each packed 64-bit integer in a to the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_rolv_epi64","","Rotate the bits in each packed 64-bit integer in a to the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_rorv_epi64","","Rotate the bits in each packed 64-bit integer in a to the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_rorv_epi64","","Rotate the bits in each packed 64-bit integer in a to the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_rorv_epi64","","Rotate the bits in each packed 64-bit integer in a to the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_sllv_epi32","","Shift packed 32-bit integers in a left by the amount …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_sllv_epi32","","Shift packed 32-bit integers in a left by the amount …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_sllv_epi32","","Shift packed 32-bit integers in a left by the amount …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_srlv_epi32","","Shift packed 32-bit integers in a right by the amount …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_srlv_epi32","","Shift packed 32-bit integers in a right by the amount …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_srlv_epi32","","Shift packed 32-bit integers in a right by the amount …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_sllv_epi64","","Shift packed 64-bit integers in a left by the amount …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_sllv_epi64","","Shift packed 64-bit integers in a left by the amount …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_sllv_epi64","","Shift packed 64-bit integers in a left by the amount …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_srlv_epi64","","Shift packed 64-bit integers in a right by the amount …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_srlv_epi64","","Shift packed 64-bit integers in a right by the amount …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_srlv_epi64","","Shift packed 64-bit integers in a right by the amount …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_permute_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_permute_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_permute_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_permute_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_permute_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_permute_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_permutex_epi64","","Shuffle 64-bit integers in a within 256-bit lanes using …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_permutex_epi64","","Shuffle 64-bit integers in a within 256-bit lanes using …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_permutex_epi64","","Shuffle 64-bit integers in a within 256-bit lanes using …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_permutex_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_permutex_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_permutex_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_permutevar_epi32","","Shuffle 32-bit integers in a across lanes using the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_permutevar_epi32","","Shuffle 32-bit integers in a across lanes using the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_permutevar_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__m512i",3]],["__m512",3]]],[5,"_mm512_mask_permutevar_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_permutevar_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_permutevar_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__m512i",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_permutevar_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__m512i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_permutevar_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__m512i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_permutexvar_epi32","","Shuffle 32-bit integers in a across lanes using the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_permutexvar_epi32","","Shuffle 32-bit integers in a across lanes using the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_permutexvar_epi32","","Shuffle 32-bit integers in a across lanes using the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_permutexvar_epi64","","Shuffle 64-bit integers in a across lanes using the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_permutexvar_epi64","","Shuffle 64-bit integers in a across lanes using the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_permutexvar_epi64","","Shuffle 64-bit integers in a across lanes using the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_permutexvar_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512i",3],["__m512",3]],["__m512",3]]],[5,"_mm512_mask_permutexvar_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_permutexvar_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512i",3],["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_permutexvar_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__m512i",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_permutexvar_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__mmask8",6],["__m512i",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_permutexvar_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__m512i",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_permutex2var_epi32","","Shuffle 32-bit integers in a and b across lanes using the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_permutex2var_epi32","","Shuffle 32-bit integers in a and b across lanes using the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_permutex2var_epi32","","Shuffle 32-bit integers in a and b across lanes using the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_mask2_permutex2var_epi32","","Shuffle 32-bit integers in a and b across lanes using the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_permutex2var_epi64","","Shuffle 64-bit integers in a and b across lanes using the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_permutex2var_epi64","","Shuffle 64-bit integers in a and b across lanes using the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_permutex2var_epi64","","Shuffle 64-bit integers in a and b across lanes using the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_mask2_permutex2var_epi64","","Shuffle 64-bit integers in a and b across lanes using the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_permutex2var_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__m512i",3]],["__m512",3]]],[5,"_mm512_mask_permutex2var_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_permutex2var_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask2_permutex2var_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__m512i",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_permutex2var_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__m512i",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_permutex2var_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__mmask8",6],["__m512i",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_permutex2var_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__mmask8",6],["__m512i",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask2_permutex2var_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__mmask8",6],["__m512i",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_shuffle_epi32","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512i",3],["_mm_perm_enum",6]],["__m512i",3]]],[5,"_mm512_mask_shuffle_epi32","","Shuffle 32-bit integers in a within 128-bit lanes using …",null,[[["__m512i",3],["__mmask16",6],["_mm_perm_enum",6]],["__m512i",3]]],[5,"_mm512_maskz_shuffle_epi32","","Shuffle 32-bit integers in a within 128-bit lanes using …",null,[[["__m512i",3],["__mmask16",6],["_mm_perm_enum",6]],["__m512i",3]]],[5,"_mm512_shuffle_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_shuffle_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_shuffle_ps","","Shuffle single-precision (32-bit) floating-point elements …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_shuffle_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_shuffle_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_shuffle_pd","","Shuffle double-precision (64-bit) floating-point elements …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_shuffle_i32x4","","Shuffle 128-bits (composed of 4 32-bit integers) selected …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_shuffle_i32x4","","Shuffle 128-bits (composed of 4 32-bit integers) selected …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_shuffle_i32x4","","Shuffle 128-bits (composed of 4 32-bit integers) selected …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_shuffle_i64x2","","Shuffle 128-bits (composed of 2 64-bit integers) selected …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_shuffle_i64x2","","Shuffle 128-bits (composed of 2 64-bit integers) selected …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_shuffle_i64x2","","Shuffle 128-bits (composed of 2 64-bit integers) selected …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_shuffle_f32x4","","Shuffle 128-bits (composed of 4 single-precision (32-bit) …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_shuffle_f32x4","","Shuffle 128-bits (composed of 4 single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_shuffle_f32x4","","Shuffle 128-bits (composed of 4 single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_shuffle_f64x2","","Shuffle 128-bits (composed of 2 double-precision (64-bit) …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_shuffle_f64x2","","Shuffle 128-bits (composed of 2 double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_shuffle_f64x2","","Shuffle 128-bits (composed of 2 double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_extractf32x4_ps","","Extract 128 bits (composed of 4 packed single-precision …",null,[[["__m512",3]],["__m128",3]]],[5,"_mm512_mask_extractf32x4_ps","","Extract 128 bits (composed of 4 packed single-precision …",null,[[["__m512",3],["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm512_maskz_extractf32x4_ps","","Extract 128 bits (composed of 4 packed single-precision …",null,[[["__m512",3],["__mmask8",6]],["__m128",3]]],[5,"_mm512_extracti64x4_epi64","","Extract 256 bits (composed of 4 packed 64-bit integers) …",null,[[["__m512i",3]],["__m256i",3]]],[5,"_mm512_mask_extracti64x4_epi64","","Extract 256 bits (composed of 4 packed 64-bit integers) …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_extracti64x4_epi64","","Extract 256 bits (composed of 4 packed 64-bit integers) …",null,[[["__m512i",3],["__mmask8",6]],["__m256i",3]]],[5,"_mm512_extractf64x4_pd","","Extract 256 bits (composed of 4 packed double-precision …",null,[[["__m512d",3]],["__m256d",3]]],[5,"_mm512_mask_extractf64x4_pd","","Extract 256 bits (composed of 4 packed double-precision …",null,[[["__m512d",3],["__mmask8",6],["__m256d",3]],["__m256d",3]]],[5,"_mm512_maskz_extractf64x4_pd","","Extract 256 bits (composed of 4 packed double-precision …",null,[[["__mmask8",6],["__m512d",3]],["__m256d",3]]],[5,"_mm512_extracti32x4_epi32","","Extract 128 bits (composed of 4 packed 32-bit integers) …",null,[[["__m512i",3]],["__m128i",3]]],[5,"_mm512_mask_extracti32x4_epi32","","Extract 128 bits (composed of 4 packed 32-bit integers) …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_maskz_extracti32x4_epi32","","Extract 128 bits (composed of 4 packed 32-bit integers) …",null,[[["__m512i",3],["__mmask8",6]],["__m128i",3]]],[5,"_mm512_moveldup_ps","","Duplicate even-indexed single-precision (32-bit) …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_moveldup_ps","","Duplicate even-indexed single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_moveldup_ps","","Duplicate even-indexed single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_movehdup_ps","","Duplicate odd-indexed single-precision (32-bit) …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_movehdup_ps","","Duplicate odd-indexed single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_movehdup_ps","","Duplicate odd-indexed single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_movedup_pd","","Duplicate even-indexed double-precision (64-bit) …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_movedup_pd","","Duplicate even-indexed double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_movedup_pd","","Duplicate even-indexed double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_inserti32x4","","Copy a to dst, then insert 128 bits (composed of 4 packed …",null,[[["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_inserti32x4","","Copy a to tmp, then insert 128 bits (composed of 4 packed …",null,[[["__m512i",3],["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_inserti32x4","","Copy a to tmp, then insert 128 bits (composed of 4 packed …",null,[[["__m512i",3],["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_inserti64x4","","Copy a to dst, then insert 256 bits (composed of 4 packed …",null,[[["__m512i",3],["__m256i",3]],["__m512i",3]]],[5,"_mm512_mask_inserti64x4","","Copy a to tmp, then insert 256 bits (composed of 4 packed …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_maskz_inserti64x4","","Copy a to tmp, then insert 256 bits (composed of 4 packed …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_insertf32x4","","Copy a to dst, then insert 128 bits (composed of 4 packed …",null,[[["__m512",3],["__m128",3]],["__m512",3]]],[5,"_mm512_mask_insertf32x4","","Copy a to tmp, then insert 128 bits (composed of 4 packed …",null,[[["__m512",3],["__m128",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_insertf32x4","","Copy a to tmp, then insert 128 bits (composed of 4 packed …",null,[[["__m512",3],["__m128",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_insertf64x4","","Copy a to dst, then insert 256 bits (composed of 4 packed …",null,[[["__m256d",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_insertf64x4","","Copy a to tmp, then insert 256 bits (composed of 4 packed …",null,[[["__m256d",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_insertf64x4","","Copy a to tmp, then insert 256 bits (composed of 4 packed …",null,[[["__m256d",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_unpackhi_epi32","","Unpack and interleave 32-bit integers from the high half …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_unpackhi_epi32","","Unpack and interleave 32-bit integers from the high half …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_unpackhi_epi32","","Unpack and interleave 32-bit integers from the high half …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_unpackhi_epi64","","Unpack and interleave 64-bit integers from the high half …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_unpackhi_epi64","","Unpack and interleave 64-bit integers from the high half …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_unpackhi_epi64","","Unpack and interleave 64-bit integers from the high half …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_unpackhi_ps","","Unpack and interleave single-precision (32-bit) …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_unpackhi_ps","","Unpack and interleave single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_unpackhi_ps","","Unpack and interleave single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_unpackhi_pd","","Unpack and interleave double-precision (64-bit) …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_unpackhi_pd","","Unpack and interleave double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_unpackhi_pd","","Unpack and interleave double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_unpacklo_epi32","","Unpack and interleave 32-bit integers from the low half …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_unpacklo_epi32","","Unpack and interleave 32-bit integers from the low half …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_unpacklo_epi32","","Unpack and interleave 32-bit integers from the low half …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_unpacklo_epi64","","Unpack and interleave 64-bit integers from the low half …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_unpacklo_epi64","","Unpack and interleave 64-bit integers from the low half …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_unpacklo_epi64","","Unpack and interleave 64-bit integers from the low half …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_unpacklo_ps","","Unpack and interleave single-precision (32-bit) …",null,[[["__m512",3]],["__m512",3]]],[5,"_mm512_mask_unpacklo_ps","","Unpack and interleave single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_unpacklo_ps","","Unpack and interleave single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_unpacklo_pd","","Unpack and interleave double-precision (64-bit) …",null,[[["__m512d",3]],["__m512d",3]]],[5,"_mm512_mask_unpacklo_pd","","Unpack and interleave double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_unpacklo_pd","","Unpack and interleave double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_castps128_ps512","","Cast vector of type __m128 to type __m512; the upper 384 …",null,[[["__m128",3]],["__m512",3]]],[5,"_mm512_castps256_ps512","","Cast vector of type __m256 to type __m512; the upper 256 …",null,[[["__m256",3]],["__m512",3]]],[5,"_mm512_zextps128_ps512","","Cast vector of type __m128 to type __m512; the upper 384 …",null,[[["__m128",3]],["__m512",3]]],[5,"_mm512_zextps256_ps512","","Cast vector of type __m256 to type __m512; the upper 256 …",null,[[["__m256",3]],["__m512",3]]],[5,"_mm512_castps512_ps128","","Cast vector of type __m512 to type __m128. This intrinsic …",null,[[["__m512",3]],["__m128",3]]],[5,"_mm512_castps512_ps256","","Cast vector of type __m512 to type __m256. This intrinsic …",null,[[["__m512",3]],["__m256",3]]],[5,"_mm512_castps_pd","","Cast vector of type __m512 to type __m512d. This …",null,[[["__m512",3]],["__m512d",3]]],[5,"_mm512_castps_si512","","Cast vector of type __m512 to type __m512i. This …",null,[[["__m512",3]],["__m512i",3]]],[5,"_mm512_castpd128_pd512","","Cast vector of type __m128d to type __m512d; the upper …",null,[[["__m128d",3]],["__m512d",3]]],[5,"_mm512_castpd256_pd512","","Cast vector of type __m256d to type __m512d; the upper …",null,[[["__m256d",3]],["__m512d",3]]],[5,"_mm512_zextpd128_pd512","","Cast vector of type __m128d to type __m512d; the upper …",null,[[["__m128d",3]],["__m512d",3]]],[5,"_mm512_zextpd256_pd512","","Cast vector of type __m256d to type __m512d; the upper …",null,[[["__m256d",3]],["__m512d",3]]],[5,"_mm512_castpd512_pd128","","Cast vector of type __m512d to type __m128d. This …",null,[[["__m512d",3]],["__m128d",3]]],[5,"_mm512_castpd512_pd256","","Cast vector of type __m512d to type __m256d. This …",null,[[["__m512d",3]],["__m256d",3]]],[5,"_mm512_castpd_ps","","Cast vector of type __m512d to type __m512. This …",null,[[["__m512d",3]],["__m512",3]]],[5,"_mm512_castpd_si512","","Cast vector of type __m512d to type __m512i. This …",null,[[["__m512d",3]],["__m512i",3]]],[5,"_mm512_castsi128_si512","","Cast vector of type __m128i to type __m512i; the upper …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_castsi256_si512","","Cast vector of type __m256i to type __m512i; the upper …",null,[[["__m256i",3]],["__m512i",3]]],[5,"_mm512_zextsi128_si512","","Cast vector of type __m128i to type __m512i; the upper …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_zextsi256_si512","","Cast vector of type __m256i to type __m512i; the upper …",null,[[["__m256i",3]],["__m512i",3]]],[5,"_mm512_castsi512_si128","","Cast vector of type __m512i to type __m128i. This …",null,[[["__m512i",3]],["__m128i",3]]],[5,"_mm512_castsi512_si256","","Cast vector of type __m512i to type __m256i. This …",null,[[["__m512i",3]],["__m256i",3]]],[5,"_mm512_castsi512_ps","","Cast vector of type __m512i to type __m512. This …",null,[[["__m512i",3]],["__m512",3]]],[5,"_mm512_castsi512_pd","","Cast vector of type __m512i to type __m512d. This …",null,[[["__m512i",3]],["__m512d",3]]],[5,"_mm512_broadcastd_epi32","","Broadcast the low packed 32-bit integer from a to all …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_broadcastd_epi32","","Broadcast the low packed 32-bit integer from a to all …",null,[[["__m512i",3],["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_broadcastd_epi32","","Broadcast the low packed 32-bit integer from a to all …",null,[[["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_broadcastq_epi64","","Broadcast the low packed 64-bit integer from a to all …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_broadcastq_epi64","","Broadcast the low packed 64-bit integer from a to all …",null,[[["__m512i",3],["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_broadcastq_epi64","","Broadcast the low packed 64-bit integer from a to all …",null,[[["__mmask8",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_broadcastss_ps","","Broadcast the low single-precision (32-bit) …",null,[[["__m128",3]],["__m512",3]]],[5,"_mm512_mask_broadcastss_ps","","Broadcast the low single-precision (32-bit) …",null,[[["__m512",3],["__m128",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_broadcastss_ps","","Broadcast the low single-precision (32-bit) …",null,[[["__m128",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_broadcastsd_pd","","Broadcast the low double-precision (64-bit) …",null,[[["__m128d",3]],["__m512d",3]]],[5,"_mm512_mask_broadcastsd_pd","","Broadcast the low double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_broadcastsd_pd","","Broadcast the low double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m512d",3]]],[5,"_mm512_broadcast_i32x4","","Broadcast the 4 packed 32-bit integers from a to all …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_broadcast_i32x4","","Broadcast the 4 packed 32-bit integers from a to all …",null,[[["__m512i",3],["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_broadcast_i32x4","","Broadcast the 4 packed 32-bit integers from a to all …",null,[[["__mmask16",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_broadcast_i64x4","","Broadcast the 4 packed 64-bit integers from a to all …",null,[[["__m256i",3]],["__m512i",3]]],[5,"_mm512_mask_broadcast_i64x4","","Broadcast the 4 packed 64-bit integers from a to all …",null,[[["__m512i",3],["__mmask8",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_maskz_broadcast_i64x4","","Broadcast the 4 packed 64-bit integers from a to all …",null,[[["__mmask8",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_broadcast_f32x4","","Broadcast the 4 packed single-precision (32-bit) …",null,[[["__m128",3]],["__m512",3]]],[5,"_mm512_mask_broadcast_f32x4","","Broadcast the 4 packed single-precision (32-bit) …",null,[[["__m512",3],["__m128",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_maskz_broadcast_f32x4","","Broadcast the 4 packed single-precision (32-bit) …",null,[[["__m128",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_broadcast_f64x4","","Broadcast the 4 packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m512d",3]]],[5,"_mm512_mask_broadcast_f64x4","","Broadcast the 4 packed double-precision (64-bit) …",null,[[["__m256d",3],["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_maskz_broadcast_f64x4","","Broadcast the 4 packed double-precision (64-bit) …",null,[[["__mmask8",6],["__m256d",3]],["__m512d",3]]],[5,"_mm512_mask_blend_epi32","","Blend packed 32-bit integers from a and b using control …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_mask_blend_epi64","","Blend packed 64-bit integers from a and b using control …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_mask_blend_ps","","Blend packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__m512",3]]],[5,"_mm512_mask_blend_pd","","Blend packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__m512d",3]]],[5,"_mm512_alignr_epi32","","Concatenate a and b into a 128-byte immediate result, …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_alignr_epi32","","Concatenate a and b into a 128-byte immediate result, …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_alignr_epi32","","Concatenate a and b into a 128-byte immediate result, …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_alignr_epi64","","Concatenate a and b into a 128-byte immediate result, …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_alignr_epi64","","Concatenate a and b into a 128-byte immediate result, …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_alignr_epi64","","Concatenate a and b into a 128-byte immediate result, …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_and_epi32","","Compute the bitwise AND of packed 32-bit integers in a …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_and_epi32","","Performs element-by-element bitwise AND between packed …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_and_epi32","","Compute the bitwise AND of packed 32-bit integers in a …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_and_epi64","","Compute the bitwise AND of 512 bits (composed of packed …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_and_epi64","","Compute the bitwise AND of packed 64-bit integers in a …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_and_epi64","","Compute the bitwise AND of packed 32-bit integers in a …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_and_si512","","Compute the bitwise AND of 512 bits (representing integer …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_or_epi32","","Compute the bitwise OR of packed 32-bit integers in a and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_or_epi32","","Compute the bitwise OR of packed 32-bit integers in a and …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_or_epi32","","Compute the bitwise OR of packed 32-bit integers in a and …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_or_epi64","","Compute the bitwise OR of packed 64-bit integers in a and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_or_epi64","","Compute the bitwise OR of packed 64-bit integers in a and …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_or_epi64","","Compute the bitwise OR of packed 64-bit integers in a and …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_or_si512","","Compute the bitwise OR of 512 bits (representing integer …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_xor_epi32","","Compute the bitwise XOR of packed 32-bit integers in a …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_xor_epi32","","Compute the bitwise XOR of packed 32-bit integers in a …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_xor_epi32","","Compute the bitwise XOR of packed 32-bit integers in a …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_xor_epi64","","Compute the bitwise XOR of packed 64-bit integers in a …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_xor_epi64","","Compute the bitwise XOR of packed 64-bit integers in a …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_xor_epi64","","Compute the bitwise XOR of packed 64-bit integers in a …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_xor_si512","","Compute the bitwise XOR of 512 bits (representing integer …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_andnot_epi32","","Compute the bitwise NOT of packed 32-bit integers in a …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_andnot_epi32","","Compute the bitwise NOT of packed 32-bit integers in a …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_andnot_epi32","","Compute the bitwise NOT of packed 32-bit integers in a …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_andnot_epi64","","Compute the bitwise NOT of 512 bits (composed of packed …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_andnot_epi64","","Compute the bitwise NOT of packed 64-bit integers in a …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_andnot_epi64","","Compute the bitwise NOT of packed 64-bit integers in a …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_andnot_si512","","Compute the bitwise NOT of 512 bits (representing integer …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_kand_mask16","","Compute the bitwise AND of 16-bit masks a and b, and …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_kand","","Compute the bitwise AND of 16-bit masks a and b, and …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_kor_mask16","","Compute the bitwise OR of 16-bit masks a and b, and store …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_kor","","Compute the bitwise OR of 16-bit masks a and b, and store …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_kxor_mask16","","Compute the bitwise XOR of 16-bit masks a and b, and …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_kxor","","Compute the bitwise XOR of 16-bit masks a and b, and …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_knot_mask16","","Compute the bitwise NOT of 16-bit mask a, and store the …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_knot","","Compute the bitwise NOT of 16-bit mask a, and store the …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_kandn_mask16","","Compute the bitwise NOT of 16-bit masks a and then AND …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_kandn","","Compute the bitwise NOT of 16-bit masks a and then AND …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_kxnor_mask16","","Compute the bitwise XNOR of 16-bit masks a and b, and …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_kxnor","","Compute the bitwise XNOR of 16-bit masks a and b, and …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_kmov","","Copy 16-bit mask a to k.",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_int2mask","","Converts integer mask into bitmask, storing the result in …",null,[[],["__mmask16",6]]],[5,"_mm512_mask2int","","Converts bit mask k1 into an integer value, storing the …",null,[[["__mmask16",6]]]],[5,"_mm512_kunpackb","","Unpack and interleave 8 bits from masks a and b, and …",null,[[["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_kortestc","","Performs bitwise OR between k1 and k2, storing the result …",null,[[["__mmask16",6]]]],[5,"_mm512_test_epi32_mask","","Compute the bitwise AND of packed 32-bit integers in a …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_test_epi32_mask","","Compute the bitwise AND of packed 32-bit integers in a …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_test_epi64_mask","","Compute the bitwise AND of packed 64-bit integers in a …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_test_epi64_mask","","Compute the bitwise AND of packed 64-bit integers in a …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_testn_epi32_mask","","Compute the bitwise NAND of packed 32-bit integers in a …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_testn_epi32_mask","","Compute the bitwise NAND of packed 32-bit integers in a …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_testn_epi64_mask","","Compute the bitwise NAND of packed 64-bit integers in a …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_testn_epi64_mask","","Compute the bitwise NAND of packed 64-bit integers in a …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_stream_ps","","Store 512-bits (composed of 16 packed single-precision …",null,[[["__m512",3]]]],[5,"_mm512_stream_pd","","Store 512-bits (composed of 8 packed double-precision …",null,[[["__m512d",3]]]],[5,"_mm512_stream_si512","","Store 512-bits of integer data from a into memory using a …",null,[[["__m512i",3]]]],[5,"_mm512_set_ps","","Sets packed 32-bit integers in <code>dst</code> with the supplied …",null,[[],["__m512",3]]],[5,"_mm512_setr_ps","","Sets packed 32-bit integers in <code>dst</code> with the supplied …",null,[[],["__m512",3]]],[5,"_mm512_set1_pd","","Broadcast 64-bit float <code>a</code> to all elements of <code>dst</code>.",null,[[],["__m512d",3]]],[5,"_mm512_set1_ps","","Broadcast 32-bit float <code>a</code> to all elements of <code>dst</code>.",null,[[],["__m512",3]]],[5,"_mm512_set_epi32","","Sets packed 32-bit integers in <code>dst</code> with the supplied …",null,[[],["__m512i",3]]],[5,"_mm512_set1_epi8","","Broadcast 8-bit integer a to all elements of dst.",null,[[],["__m512i",3]]],[5,"_mm512_set1_epi16","","Broadcast the low packed 16-bit integer from a to all all …",null,[[],["__m512i",3]]],[5,"_mm512_set1_epi32","","Broadcast 32-bit integer <code>a</code> to all elements of <code>dst</code>.",null,[[],["__m512i",3]]],[5,"_mm512_mask_set1_epi32","","Broadcast 32-bit integer a to all elements of dst using …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_set1_epi32","","Broadcast 32-bit integer a to all elements of dst using …",null,[[["__mmask16",6]],["__m512i",3]]],[5,"_mm512_set1_epi64","","Broadcast 64-bit integer <code>a</code> to all elements of <code>dst</code>.",null,[[],["__m512i",3]]],[5,"_mm512_mask_set1_epi64","","Broadcast 64-bit integer a to all elements of dst using …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_set1_epi64","","Broadcast 64-bit integer a to all elements of dst using …",null,[[["__mmask8",6]],["__m512i",3]]],[5,"_mm512_set4_epi64","","Set packed 64-bit integers in dst with the repeated 4 …",null,[[],["__m512i",3]]],[5,"_mm512_setr4_epi64","","Set packed 64-bit integers in dst with the repeated 4 …",null,[[],["__m512i",3]]],[5,"_mm512_cmplt_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__mmask16",6]]],[5,"_mm512_mask_cmplt_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpnlt_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpnlt_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmple_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__mmask16",6]]],[5,"_mm512_mask_cmple_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpnle_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpnle_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpeq_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpeq_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpneq_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpneq_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmp_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__mmask16",6]]],[5,"_mm512_mask_cmp_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmp_round_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__mmask16",6]]],[5,"_mm512_mask_cmp_round_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpord_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpord_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpunord_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpunord_ps_mask","","Compare packed single-precision (32-bit) floating-point …",null,[[["__m512",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmplt_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__mmask8",6]]],[5,"_mm512_mask_cmplt_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__mmask8",6]]],[5,"_mm512_cmpnlt_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpnlt_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__mmask8",6]]],[5,"_mm512_cmple_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__mmask8",6]]],[5,"_mm512_mask_cmple_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__mmask8",6]]],[5,"_mm512_cmpnle_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpnle_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__mmask8",6]]],[5,"_mm512_cmpeq_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpeq_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__mmask8",6]]],[5,"_mm512_cmpneq_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpneq_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__mmask8",6]]],[5,"_mm512_cmp_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__mmask8",6]]],[5,"_mm512_mask_cmp_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__mmask8",6]]],[5,"_mm512_cmp_round_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__mmask8",6]]],[5,"_mm512_mask_cmp_round_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__mmask8",6]]],[5,"_mm512_cmpord_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpord_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__mmask8",6]]],[5,"_mm512_cmpunord_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__m512d",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpunord_pd_mask","","Compare packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m512d",3]],["__mmask8",6]]],[5,"_mm_cmp_ss_mask","","Compare the lower single-precision (32-bit) …",null,[[["__m128",3]],["__mmask8",6]]],[5,"_mm_mask_cmp_ss_mask","","Compare the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__mmask8",6]]],[5,"_mm_cmp_round_ss_mask","","Compare the lower single-precision (32-bit) …",null,[[["__m128",3]],["__mmask8",6]]],[5,"_mm_mask_cmp_round_ss_mask","","Compare the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__mmask8",6]]],[5,"_mm_cmp_sd_mask","","Compare the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__mmask8",6]]],[5,"_mm_mask_cmp_sd_mask","","Compare the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__mmask8",6]]],[5,"_mm_cmp_round_sd_mask","","Compare the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__mmask8",6]]],[5,"_mm_mask_cmp_round_sd_mask","","Compare the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__mmask8",6]]],[5,"_mm512_cmplt_epu32_mask","","Compare packed unsigned 32-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_cmplt_epu32_mask","","Compare packed unsigned 32-bit integers in a and b for …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpgt_epu32_mask","","Compare packed unsigned 32-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpgt_epu32_mask","","Compare packed unsigned 32-bit integers in a and b for …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmple_epu32_mask","","Compare packed unsigned 32-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_cmple_epu32_mask","","Compare packed unsigned 32-bit integers in a and b for …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpge_epu32_mask","","Compare packed unsigned 32-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpge_epu32_mask","","Compare packed unsigned 32-bit integers in a and b for …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpeq_epu32_mask","","Compare packed unsigned 32-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpeq_epu32_mask","","Compare packed unsigned 32-bit integers in a and b for …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpneq_epu32_mask","","Compare packed unsigned 32-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpneq_epu32_mask","","Compare packed unsigned 32-bit integers in a and b for …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmp_epu32_mask","","Compare packed unsigned 32-bit integers in a and b based …",null,[[["__m512i",3],["_mm_cmpint_enum",6]],["__mmask16",6]]],[5,"_mm512_mask_cmp_epu32_mask","","Compare packed unsigned 32-bit integers in a and b based …",null,[[["__m512i",3],["_mm_cmpint_enum",6],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmplt_epi32_mask","","Compare packed signed 32-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_cmplt_epi32_mask","","Compare packed signed 32-bit integers in a and b for …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpgt_epi32_mask","","Compare packed signed 32-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpgt_epi32_mask","","Compare packed signed 32-bit integers in a and b for …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmple_epi32_mask","","Compare packed signed 32-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_cmple_epi32_mask","","Compare packed signed 32-bit integers in a and b for …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpge_epi32_mask","","Compare packed signed 32-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpge_epi32_mask","","Compare packed signed 32-bit integers in a and b for …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpeq_epi32_mask","","Compare packed 32-bit integers in a and b for equality, …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpeq_epi32_mask","","Compare packed 32-bit integers in a and b for equality, …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmpneq_epi32_mask","","Compare packed 32-bit integers in a and b for not-equal, …",null,[[["__m512i",3]],["__mmask16",6]]],[5,"_mm512_mask_cmpneq_epi32_mask","","Compare packed 32-bit integers in a and b for not-equal, …",null,[[["__m512i",3],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmp_epi32_mask","","Compare packed signed 32-bit integers in a and b based on …",null,[[["__m512i",3],["_mm_cmpint_enum",6]],["__mmask16",6]]],[5,"_mm512_mask_cmp_epi32_mask","","Compare packed signed 32-bit integers in a and b based on …",null,[[["__m512i",3],["_mm_cmpint_enum",6],["__mmask16",6]],["__mmask16",6]]],[5,"_mm512_cmplt_epu64_mask","","Compare packed unsigned 64-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_cmplt_epu64_mask","","Compare packed unsigned 64-bit integers in a and b for …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_cmpgt_epu64_mask","","Compare packed unsigned 64-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpgt_epu64_mask","","Compare packed unsigned 64-bit integers in a and b for …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_cmple_epu64_mask","","Compare packed unsigned 64-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_cmple_epu64_mask","","Compare packed unsigned 64-bit integers in a and b for …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_cmpge_epu64_mask","","Compare packed unsigned 64-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpge_epu64_mask","","Compare packed unsigned 64-bit integers in a and b for …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_cmpeq_epu64_mask","","Compare packed unsigned 64-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpeq_epu64_mask","","Compare packed unsigned 64-bit integers in a and b for …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_cmpneq_epu64_mask","","Compare packed unsigned 64-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpneq_epu64_mask","","Compare packed unsigned 64-bit integers in a and b for …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_cmp_epu64_mask","","Compare packed unsigned 64-bit integers in a and b based …",null,[[["__m512i",3],["_mm_cmpint_enum",6]],["__mmask8",6]]],[5,"_mm512_mask_cmp_epu64_mask","","Compare packed unsigned 64-bit integers in a and b based …",null,[[["__m512i",3],["__mmask8",6],["_mm_cmpint_enum",6]],["__mmask8",6]]],[5,"_mm512_cmplt_epi64_mask","","Compare packed signed 64-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_cmplt_epi64_mask","","Compare packed signed 64-bit integers in a and b for …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_cmpgt_epi64_mask","","Compare packed signed 64-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpgt_epi64_mask","","Compare packed signed 64-bit integers in a and b for …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_cmple_epi64_mask","","Compare packed signed 64-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_cmple_epi64_mask","","Compare packed signed 64-bit integers in a and b for …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_cmpge_epi64_mask","","Compare packed signed 64-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpge_epi64_mask","","Compare packed signed 64-bit integers in a and b for …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_cmpeq_epi64_mask","","Compare packed 64-bit integers in a and b for equality, …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpeq_epi64_mask","","Compare packed 64-bit integers in a and b for equality, …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_cmpneq_epi64_mask","","Compare packed signed 64-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask8",6]]],[5,"_mm512_mask_cmpneq_epi64_mask","","Compare packed signed 64-bit integers in a and b for …",null,[[["__m512i",3],["__mmask8",6]],["__mmask8",6]]],[5,"_mm512_cmp_epi64_mask","","Compare packed signed 64-bit integers in a and b based on …",null,[[["__m512i",3],["_mm_cmpint_enum",6]],["__mmask8",6]]],[5,"_mm512_mask_cmp_epi64_mask","","Compare packed signed 64-bit integers in a and b based on …",null,[[["__m512i",3],["__mmask8",6],["_mm_cmpint_enum",6]],["__mmask8",6]]],[5,"_mm512_reduce_add_epi32","","Reduce the packed 32-bit integers in a by addition. …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_add_epi32","","Reduce the packed 32-bit integers in a by addition using …",null,[[["__m512i",3],["__mmask16",6]]]],[5,"_mm512_reduce_add_epi64","","Reduce the packed 64-bit integers in a by addition. …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_add_epi64","","Reduce the packed 64-bit integers in a by addition using …",null,[[["__m512i",3],["__mmask8",6]]]],[5,"_mm512_reduce_add_ps","","Reduce the packed single-precision (32-bit) …",null,[[["__m512",3]]]],[5,"_mm512_mask_reduce_add_ps","","Reduce the packed single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]]]],[5,"_mm512_reduce_add_pd","","Reduce the packed double-precision (64-bit) …",null,[[["__m512d",3]]]],[5,"_mm512_mask_reduce_add_pd","","Reduce the packed double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]]]],[5,"_mm512_reduce_mul_epi32","","Reduce the packed 32-bit integers in a by multiplication. …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_mul_epi32","","Reduce the packed 32-bit integers in a by multiplication …",null,[[["__m512i",3],["__mmask16",6]]]],[5,"_mm512_reduce_mul_epi64","","Reduce the packed 64-bit integers in a by multiplication. …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_mul_epi64","","Reduce the packed 64-bit integers in a by multiplication …",null,[[["__m512i",3],["__mmask8",6]]]],[5,"_mm512_reduce_mul_ps","","Reduce the packed single-precision (32-bit) …",null,[[["__m512",3]]]],[5,"_mm512_mask_reduce_mul_ps","","Reduce the packed single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]]]],[5,"_mm512_reduce_mul_pd","","Reduce the packed double-precision (64-bit) …",null,[[["__m512d",3]]]],[5,"_mm512_mask_reduce_mul_pd","","Reduce the packed double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]]]],[5,"_mm512_reduce_max_epi32","","Reduce the packed signed 32-bit integers in a by maximum. …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_max_epi32","","Reduce the packed signed 32-bit integers in a by maximum …",null,[[["__m512i",3],["__mmask16",6]]]],[5,"_mm512_reduce_max_epi64","","Reduce the packed signed 64-bit integers in a by maximum. …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_max_epi64","","Reduce the packed signed 64-bit integers in a by maximum …",null,[[["__m512i",3],["__mmask8",6]]]],[5,"_mm512_reduce_max_epu32","","Reduce the packed unsigned 32-bit integers in a by …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_max_epu32","","Reduce the packed unsigned 32-bit integers in a by …",null,[[["__m512i",3],["__mmask16",6]]]],[5,"_mm512_reduce_max_epu64","","Reduce the packed unsigned 64-bit integers in a by …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_max_epu64","","Reduce the packed unsigned 64-bit integers in a by …",null,[[["__m512i",3],["__mmask8",6]]]],[5,"_mm512_reduce_max_ps","","Reduce the packed single-precision (32-bit) …",null,[[["__m512",3]]]],[5,"_mm512_mask_reduce_max_ps","","Reduce the packed single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]]]],[5,"_mm512_reduce_max_pd","","Reduce the packed double-precision (64-bit) …",null,[[["__m512d",3]]]],[5,"_mm512_mask_reduce_max_pd","","Reduce the packed double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]]]],[5,"_mm512_reduce_min_epi32","","Reduce the packed signed 32-bit integers in a by minimum. …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_min_epi32","","Reduce the packed signed 32-bit integers in a by maximum …",null,[[["__m512i",3],["__mmask16",6]]]],[5,"_mm512_reduce_min_epi64","","Reduce the packed signed 64-bit integers in a by minimum. …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_min_epi64","","Reduce the packed signed 64-bit integers in a by maximum …",null,[[["__m512i",3],["__mmask8",6]]]],[5,"_mm512_reduce_min_epu32","","Reduce the packed unsigned 32-bit integers in a by …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_min_epu32","","Reduce the packed unsigned 32-bit integers in a by …",null,[[["__m512i",3],["__mmask16",6]]]],[5,"_mm512_reduce_min_epu64","","Reduce the packed unsigned 64-bit integers in a by …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_min_epu64","","Reduce the packed signed 64-bit integers in a by maximum …",null,[[["__m512i",3],["__mmask8",6]]]],[5,"_mm512_reduce_min_ps","","Reduce the packed single-precision (32-bit) …",null,[[["__m512",3]]]],[5,"_mm512_mask_reduce_min_ps","","Reduce the packed single-precision (32-bit) …",null,[[["__m512",3],["__mmask16",6]]]],[5,"_mm512_reduce_min_pd","","Reduce the packed double-precision (64-bit) …",null,[[["__m512d",3]]]],[5,"_mm512_mask_reduce_min_pd","","Reduce the packed double-precision (64-bit) …",null,[[["__mmask8",6],["__m512d",3]]]],[5,"_mm512_reduce_and_epi32","","Reduce the packed 32-bit integers in a by bitwise AND. …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_and_epi32","","Reduce the packed 32-bit integers in a by bitwise AND …",null,[[["__m512i",3],["__mmask16",6]]]],[5,"_mm512_reduce_and_epi64","","Reduce the packed 64-bit integers in a by bitwise AND. …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_and_epi64","","Reduce the packed 64-bit integers in a by addition using …",null,[[["__m512i",3],["__mmask8",6]]]],[5,"_mm512_reduce_or_epi32","","Reduce the packed 32-bit integers in a by bitwise OR. …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_or_epi32","","Reduce the packed 32-bit integers in a by bitwise OR …",null,[[["__m512i",3],["__mmask16",6]]]],[5,"_mm512_reduce_or_epi64","","Reduce the packed 64-bit integers in a by bitwise OR. …",null,[[["__m512i",3]]]],[5,"_mm512_mask_reduce_or_epi64","","Reduce the packed 64-bit integers in a by bitwise OR …",null,[[["__m512i",3],["__mmask8",6]]]],[5,"_mm512_undefined_pd","","Returns vector of type <code>__m512d</code> with undefined elements.",null,[[],["__m512d",3]]],[5,"_mm512_undefined_ps","","Returns vector of type <code>__m512</code> with undefined elements.",null,[[],["__m512",3]]],[5,"_mm512_undefined_epi32","","Return vector of type __m512i with undefined elements.",null,[[],["__m512i",3]]],[5,"_mm512_undefined","","Return vector of type __m512 with undefined elements.",null,[[],["__m512",3]]],[5,"_mm512_loadu_epi32","","Load 512-bits (composed of 16 packed 32-bit integers) …",null,[[],["__m512i",3]]],[5,"_mm512_storeu_epi32","","Store 512-bits (composed of 16 packed 32-bit integers) …",null,[[["__m512i",3]]]],[5,"_mm512_loadu_epi64","","Load 512-bits (composed of 8 packed 64-bit integers) from …",null,[[],["__m512i",3]]],[5,"_mm512_storeu_epi64","","Store 512-bits (composed of 8 packed 64-bit integers) …",null,[[["__m512i",3]]]],[5,"_mm512_loadu_si512","","Load 512-bits of integer data from memory into dst. …",null,[[],["__m512i",3]]],[5,"_mm512_storeu_si512","","Store 512-bits of integer data from a into memory. …",null,[[["__m512i",3]]]],[5,"_mm512_loadu_pd","","Loads 512-bits (composed of 8 packed double-precision …",null,[[],["__m512d",3]]],[5,"_mm512_storeu_pd","","Stores 512-bits (composed of 8 packed double-precision …",null,[[["__m512d",3]]]],[5,"_mm512_loadu_ps","","Loads 512-bits (composed of 16 packed single-precision …",null,[[],["__m512",3]]],[5,"_mm512_storeu_ps","","Stores 512-bits (composed of 16 packed single-precision …",null,[[["__m512",3]]]],[5,"_mm512_load_si512","","Load 512-bits of integer data from memory into dst. …",null,[[],["__m512i",3]]],[5,"_mm512_store_si512","","Store 512-bits of integer data from a into memory. …",null,[[["__m512i",3]]]],[5,"_mm512_load_epi32","","Load 512-bits (composed of 16 packed 32-bit integers) …",null,[[],["__m512i",3]]],[5,"_mm512_store_epi32","","Store 512-bits (composed of 16 packed 32-bit integers) …",null,[[["__m512i",3]]]],[5,"_mm512_load_epi64","","Load 512-bits (composed of 8 packed 64-bit integers) from …",null,[[],["__m512i",3]]],[5,"_mm512_store_epi64","","Store 512-bits (composed of 8 packed 64-bit integers) …",null,[[["__m512i",3]]]],[5,"_mm512_load_ps","","Load 512-bits (composed of 16 packed single-precision …",null,[[],["__m512",3]]],[5,"_mm512_store_ps","","Store 512-bits of integer data from a into memory. …",null,[[["__m512",3]]]],[5,"_mm512_load_pd","","Load 512-bits (composed of 8 packed double-precision …",null,[[],["__m512d",3]]],[5,"_mm512_store_pd","","Store 512-bits (composed of 8 packed double-precision …",null,[[["__m512d",3]]]],[5,"_mm512_setr_pd","","Set packed double-precision (64-bit) floating-point …",null,[[],["__m512d",3]]],[5,"_mm512_set_pd","","Set packed double-precision (64-bit) floating-point …",null,[[],["__m512d",3]]],[5,"_mm_mask_move_ss","","Move the lower single-precision (32-bit) floating-point …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_move_ss","","Move the lower single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask_move_sd","","Move the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_move_sd","","Move the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_add_ss","","Add the lower single-precision (32-bit) floating-point …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_add_ss","","Add the lower single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask_add_sd","","Add the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_add_sd","","Add the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_sub_ss","","Subtract the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_sub_ss","","Subtract the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask_sub_sd","","Subtract the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_sub_sd","","Subtract the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_mul_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_mul_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask_mul_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_mul_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_div_ss","","Divide the lower single-precision (32-bit) floating-point …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_div_ss","","Divide the lower single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask_div_sd","","Divide the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_div_sd","","Divide the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_max_ss","","Compare the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_max_ss","","Compare the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask_max_sd","","Compare the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_max_sd","","Compare the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_min_ss","","Compare the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_min_ss","","Compare the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask_min_sd","","Compare the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_min_sd","","Compare the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_sqrt_ss","","Compute the square root of the lower single-precision …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_sqrt_ss","","Compute the square root of the lower single-precision …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask_sqrt_sd","","Compute the square root of the lower double-precision …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_sqrt_sd","","Compute the square root of the lower double-precision …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_rsqrt14_ss","","Compute the approximate reciprocal square root of the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_rsqrt14_ss","","Compute the approximate reciprocal square root of the …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_rsqrt14_ss","","Compute the approximate reciprocal square root of the …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_rsqrt14_sd","","Compute the approximate reciprocal square root of the …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_rsqrt14_sd","","Compute the approximate reciprocal square root of the …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_rsqrt14_sd","","Compute the approximate reciprocal square root of the …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_rcp14_ss","","Compute the approximate reciprocal of the lower …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_rcp14_ss","","Compute the approximate reciprocal of the lower …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_rcp14_ss","","Compute the approximate reciprocal of the lower …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_rcp14_sd","","Compute the approximate reciprocal of the lower …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_rcp14_sd","","Compute the approximate reciprocal of the lower …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_rcp14_sd","","Compute the approximate reciprocal of the lower …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_getexp_ss","","Convert the exponent of the lower single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_getexp_ss","","Convert the exponent of the lower single-precision …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_getexp_ss","","Convert the exponent of the lower single-precision …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_getexp_sd","","Convert the exponent of the lower double-precision …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_getexp_sd","","Convert the exponent of the lower double-precision …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_getexp_sd","","Convert the exponent of the lower double-precision …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_getmant_ss","","Normalize the mantissas of the lower single-precision …",null,[[["__m128",3],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6]],["__m128",3]]],[5,"_mm_mask_getmant_ss","","Normalize the mantissas of the lower single-precision …",null,[[["__m128",3],["__mmask8",6],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6]],["__m128",3]]],[5,"_mm_maskz_getmant_ss","","Normalize the mantissas of the lower single-precision …",null,[[["__mmask8",6],["__m128",3],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6]],["__m128",3]]],[5,"_mm_getmant_sd","","Normalize the mantissas of the lower double-precision …",null,[[["_mm_mantissa_sign_enum",6],["__m128d",3],["_mm_mantissa_norm_enum",6]],["__m128d",3]]],[5,"_mm_mask_getmant_sd","","Normalize the mantissas of the lower double-precision …",null,[[["__mmask8",6],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_getmant_sd","","Normalize the mantissas of the lower double-precision …",null,[[["__mmask8",6],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_roundscale_ss","","Round the lower single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_roundscale_ss","","Round the lower single-precision (32-bit) floating-point …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_roundscale_ss","","Round the lower single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_roundscale_sd","","Round the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_roundscale_sd","","Round the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_roundscale_sd","","Round the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_scalef_ss","","Scale the packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_scalef_ss","","Scale the packed single-precision (32-bit) floating-point …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_scalef_ss","","Scale the packed single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_scalef_sd","","Scale the packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_scalef_sd","","Scale the packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_scalef_sd","","Scale the packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_fmadd_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_fmadd_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask3_fmadd_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_mask_fmadd_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_fmadd_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask3_fmadd_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_fmsub_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_fmsub_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask3_fmsub_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_mask_fmsub_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_fmsub_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask3_fmsub_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_fnmadd_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_fnmadd_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask3_fnmadd_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_mask_fnmadd_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_fnmadd_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask3_fnmadd_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_fnmsub_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_fnmsub_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask3_fnmsub_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_mask_fnmsub_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_fnmsub_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask3_fnmsub_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_add_round_ss","","Add the lower single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_add_round_ss","","Add the lower single-precision (32-bit) floating-point …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_add_round_ss","","Add the lower single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_add_round_sd","","Add the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_add_round_sd","","Add the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_add_round_sd","","Add the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_sub_round_ss","","Subtract the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_sub_round_ss","","Subtract the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_sub_round_ss","","Subtract the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_sub_round_sd","","Subtract the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_sub_round_sd","","Subtract the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_sub_round_sd","","Subtract the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mul_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_mul_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_mul_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mul_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_mul_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_mul_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_div_round_ss","","Divide the lower single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_div_round_ss","","Divide the lower single-precision (32-bit) floating-point …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_div_round_ss","","Divide the lower single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_div_round_sd","","Divide the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_div_round_sd","","Divide the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_div_round_sd","","Divide the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_max_round_ss","","Compare the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_max_round_ss","","Compare the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_max_round_ss","","Compare the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_max_round_sd","","Compare the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_max_round_sd","","Compare the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_max_round_sd","","Compare the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_min_round_ss","","Compare the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_min_round_ss","","Compare the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_min_round_ss","","Compare the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_min_round_sd","","Compare the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_min_round_sd","","Compare the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_min_round_sd","","Compare the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_sqrt_round_ss","","Compute the square root of the lower single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_sqrt_round_ss","","Compute the square root of the lower single-precision …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_sqrt_round_ss","","Compute the square root of the lower single-precision …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_sqrt_round_sd","","Compute the square root of the lower double-precision …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_sqrt_round_sd","","Compute the square root of the lower double-precision …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_sqrt_round_sd","","Compute the square root of the lower double-precision …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_getexp_round_ss","","Convert the exponent of the lower single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_getexp_round_ss","","Convert the exponent of the lower single-precision …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_getexp_round_ss","","Convert the exponent of the lower single-precision …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_getexp_round_sd","","Convert the exponent of the lower double-precision …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_getexp_round_sd","","Convert the exponent of the lower double-precision …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_getexp_round_sd","","Convert the exponent of the lower double-precision …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_getmant_round_ss","","Normalize the mantissas of the lower single-precision …",null,[[["__m128",3],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6]],["__m128",3]]],[5,"_mm_mask_getmant_round_ss","","Normalize the mantissas of the lower single-precision …",null,[[["__m128",3],["__mmask8",6],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6]],["__m128",3]]],[5,"_mm_maskz_getmant_round_ss","","Normalize the mantissas of the lower single-precision …",null,[[["__mmask8",6],["__m128",3],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6]],["__m128",3]]],[5,"_mm_getmant_round_sd","","Normalize the mantissas of the lower double-precision …",null,[[["_mm_mantissa_sign_enum",6],["__m128d",3],["_mm_mantissa_norm_enum",6]],["__m128d",3]]],[5,"_mm_mask_getmant_round_sd","","Normalize the mantissas of the lower double-precision …",null,[[["__mmask8",6],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_getmant_round_sd","","Normalize the mantissas of the lower double-precision …",null,[[["__mmask8",6],["_mm_mantissa_norm_enum",6],["_mm_mantissa_sign_enum",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_roundscale_round_ss","","Round the lower single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_roundscale_round_ss","","Round the lower single-precision (32-bit) floating-point …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_roundscale_round_ss","","Round the lower single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_roundscale_round_sd","","Round the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_roundscale_round_sd","","Round the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_roundscale_round_sd","","Round the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_scalef_round_ss","","Scale the packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_scalef_round_ss","","Scale the packed single-precision (32-bit) floating-point …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_scalef_round_ss","","Scale the packed single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_scalef_round_sd","","Scale the packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_scalef_round_sd","","Scale the packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_scalef_round_sd","","Scale the packed double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_fmadd_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_fmadd_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_fmadd_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask3_fmadd_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_fmadd_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_fmadd_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_fmadd_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask3_fmadd_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_fmsub_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_fmsub_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_fmsub_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask3_fmsub_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_fmsub_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_fmsub_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_fmsub_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask3_fmsub_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_fnmadd_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_fnmadd_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_fnmadd_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask3_fnmadd_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_fnmadd_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_fnmadd_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_fnmadd_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask3_fnmadd_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_fnmsub_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mask_fnmsub_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_maskz_fnmsub_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128",3]],["__m128",3]]],[5,"_mm_mask3_fnmsub_round_ss","","Multiply the lower single-precision (32-bit) …",null,[[["__m128",3],["__mmask8",6]],["__m128",3]]],[5,"_mm_fnmsub_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_fnmsub_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_maskz_fnmsub_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask3_fnmsub_round_sd","","Multiply the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128d",3]],["__m128d",3]]],[5,"_mm_fixupimm_ss","","Fix up the lower single-precision (32-bit) floating-point …",null,[[["__m128",3],["__m128i",3]],["__m128",3]]],[5,"_mm_mask_fixupimm_ss","","Fix up the lower single-precision (32-bit) floating-point …",null,[[["__m128",3],["__mmask8",6],["__m128i",3]],["__m128",3]]],[5,"_mm_maskz_fixupimm_ss","","Fix up the lower single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m128",3],["__m128i",3]],["__m128",3]]],[5,"_mm_fixupimm_sd","","Fix up the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3],["__m128i",3]],["__m128d",3]]],[5,"_mm_mask_fixupimm_sd","","Fix up the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3],["__m128i",3]],["__m128d",3]]],[5,"_mm_maskz_fixupimm_sd","","Fix up the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3],["__m128i",3]],["__m128d",3]]],[5,"_mm_fixupimm_round_ss","","Fix up the lower single-precision (32-bit) floating-point …",null,[[["__m128",3],["__m128i",3]],["__m128",3]]],[5,"_mm_mask_fixupimm_round_ss","","Fix up the lower single-precision (32-bit) floating-point …",null,[[["__m128",3],["__mmask8",6],["__m128i",3]],["__m128",3]]],[5,"_mm_maskz_fixupimm_round_ss","","Fix up the lower single-precision (32-bit) floating-point …",null,[[["__mmask8",6],["__m128",3],["__m128i",3]],["__m128",3]]],[5,"_mm_fixupimm_round_sd","","Fix up the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3],["__m128i",3]],["__m128d",3]]],[5,"_mm_mask_fixupimm_round_sd","","Fix up the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3],["__m128i",3]],["__m128d",3]]],[5,"_mm_maskz_fixupimm_round_sd","","Fix up the lower double-precision (64-bit) floating-point …",null,[[["__mmask8",6],["__m128d",3],["__m128i",3]],["__m128d",3]]],[5,"_mm_mask_cvtss_sd","","Convert the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128d",3],["__m128",3]],["__m128d",3]]],[5,"_mm_maskz_cvtss_sd","","Convert the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128d",3],["__m128",3]],["__m128d",3]]],[5,"_mm_mask_cvtsd_ss","","Convert the lower double-precision (64-bit) …",null,[[["__m128",3],["__mmask8",6],["__m128d",3]],["__m128",3]]],[5,"_mm_maskz_cvtsd_ss","","Convert the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128",3],["__m128d",3]],["__m128",3]]],[5,"_mm_cvt_roundss_sd","","Convert the lower single-precision (32-bit) …",null,[[["__m128",3],["__m128d",3]],["__m128d",3]]],[5,"_mm_mask_cvt_roundss_sd","","Convert the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128d",3],["__m128",3]],["__m128d",3]]],[5,"_mm_maskz_cvt_roundss_sd","","Convert the lower single-precision (32-bit) …",null,[[["__mmask8",6],["__m128d",3],["__m128",3]],["__m128d",3]]],[5,"_mm_cvt_roundsd_ss","","Convert the lower double-precision (64-bit) …",null,[[["__m128",3],["__m128d",3]],["__m128",3]]],[5,"_mm_mask_cvt_roundsd_ss","","Convert the lower double-precision (64-bit) …",null,[[["__m128",3],["__mmask8",6],["__m128d",3]],["__m128",3]]],[5,"_mm_maskz_cvt_roundsd_ss","","Convert the lower double-precision (64-bit) …",null,[[["__mmask8",6],["__m128",3],["__m128d",3]],["__m128",3]]],[5,"_mm_cvt_roundss_si32","","Convert the lower single-precision (32-bit) …",null,[[["__m128",3]]]],[5,"_mm_cvt_roundss_i32","","Convert the lower single-precision (32-bit) …",null,[[["__m128",3]]]],[5,"_mm_cvt_roundss_u32","","Convert the lower single-precision (32-bit) …",null,[[["__m128",3]]]],[5,"_mm_cvtss_i32","","Convert the lower single-precision (32-bit) …",null,[[["__m128",3]]]],[5,"_mm_cvtss_u32","","Convert the lower single-precision (32-bit) …",null,[[["__m128",3]]]],[5,"_mm_cvt_roundsd_si32","","Convert the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvt_roundsd_i32","","Convert the lower single-precision (32-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvt_roundsd_u32","","Convert the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvtsd_i32","","Convert the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvtsd_u32","","Convert the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvt_roundi32_ss","","Convert the signed 32-bit integer b to a single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cvt_roundsi32_ss","","Convert the signed 32-bit integer b to a single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cvt_roundu32_ss","","Convert the unsigned 32-bit integer b to a …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cvti32_ss","","Convert the signed 32-bit integer b to a single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cvti32_sd","","Convert the signed 32-bit integer b to a double-precision …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cvtt_roundss_si32","","Convert the lower single-precision (32-bit) …",null,[[["__m128",3]]]],[5,"_mm_cvtt_roundss_i32","","Convert the lower single-precision (32-bit) …",null,[[["__m128",3]]]],[5,"_mm_cvtt_roundss_u32","","Convert the lower single-precision (32-bit) …",null,[[["__m128",3]]]],[5,"_mm_cvttss_i32","","Convert the lower single-precision (32-bit) …",null,[[["__m128",3]]]],[5,"_mm_cvttss_u32","","Convert the lower single-precision (32-bit) …",null,[[["__m128",3]]]],[5,"_mm_cvtt_roundsd_si32","","Convert the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvtt_roundsd_i32","","Convert the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvtt_roundsd_u32","","Convert the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvttsd_i32","","Convert the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvttsd_u32","","Convert the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvtu32_ss","","Convert the unsigned 32-bit integer b to a …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cvtu32_sd","","Convert the unsigned 32-bit integer b to a …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cvtu64_ss","","Convert the unsigned 64-bit integer b to a …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cvtu64_sd","","Convert the unsigned 64-bit integer b to a …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_comi_round_ss","","Compare the lower single-precision (32-bit) …",null,[[["__m128",3]]]],[5,"_mm_comi_round_sd","","Compare the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[17,"_MM_CMPINT_EQ","","Equal",null,null],[17,"_MM_CMPINT_LT","","Less-than",null,null],[17,"_MM_CMPINT_LE","","Less-than-or-equal",null,null],[17,"_MM_CMPINT_FALSE","","False",null,null],[17,"_MM_CMPINT_NE","","Not-equal",null,null],[17,"_MM_CMPINT_NLT","","Not less-than",null,null],[17,"_MM_CMPINT_NLE","","Not less-than-or-equal",null,null],[17,"_MM_CMPINT_TRUE","","True",null,null],[17,"_MM_MANT_NORM_1_2","","interval [1, 2)",null,null],[17,"_MM_MANT_NORM_P5_2","","interval [0.5, 2)",null,null],[17,"_MM_MANT_NORM_P5_1","","interval [0.5, 1)",null,null],[17,"_MM_MANT_NORM_P75_1P5","","interval [0.75, 1.5)",null,null],[17,"_MM_MANT_SIGN_SRC","","sign = sign(SRC)",null,null],[17,"_MM_MANT_SIGN_ZERO","","sign = 0",null,null],[17,"_MM_MANT_SIGN_NAN","","DEST = NaN if sign(SRC) = 1",null,null],[17,"_MM_PERM_AAAA","","",null,null],[17,"_MM_PERM_AAAB","","",null,null],[17,"_MM_PERM_AAAC","","",null,null],[17,"_MM_PERM_AAAD","","",null,null],[17,"_MM_PERM_AABA","","",null,null],[17,"_MM_PERM_AABB","","",null,null],[17,"_MM_PERM_AABC","","",null,null],[17,"_MM_PERM_AABD","","",null,null],[17,"_MM_PERM_AACA","","",null,null],[17,"_MM_PERM_AACB","","",null,null],[17,"_MM_PERM_AACC","","",null,null],[17,"_MM_PERM_AACD","","",null,null],[17,"_MM_PERM_AADA","","",null,null],[17,"_MM_PERM_AADB","","",null,null],[17,"_MM_PERM_AADC","","",null,null],[17,"_MM_PERM_AADD","","",null,null],[17,"_MM_PERM_ABAA","","",null,null],[17,"_MM_PERM_ABAB","","",null,null],[17,"_MM_PERM_ABAC","","",null,null],[17,"_MM_PERM_ABAD","","",null,null],[17,"_MM_PERM_ABBA","","",null,null],[17,"_MM_PERM_ABBB","","",null,null],[17,"_MM_PERM_ABBC","","",null,null],[17,"_MM_PERM_ABBD","","",null,null],[17,"_MM_PERM_ABCA","","",null,null],[17,"_MM_PERM_ABCB","","",null,null],[17,"_MM_PERM_ABCC","","",null,null],[17,"_MM_PERM_ABCD","","",null,null],[17,"_MM_PERM_ABDA","","",null,null],[17,"_MM_PERM_ABDB","","",null,null],[17,"_MM_PERM_ABDC","","",null,null],[17,"_MM_PERM_ABDD","","",null,null],[17,"_MM_PERM_ACAA","","",null,null],[17,"_MM_PERM_ACAB","","",null,null],[17,"_MM_PERM_ACAC","","",null,null],[17,"_MM_PERM_ACAD","","",null,null],[17,"_MM_PERM_ACBA","","",null,null],[17,"_MM_PERM_ACBB","","",null,null],[17,"_MM_PERM_ACBC","","",null,null],[17,"_MM_PERM_ACBD","","",null,null],[17,"_MM_PERM_ACCA","","",null,null],[17,"_MM_PERM_ACCB","","",null,null],[17,"_MM_PERM_ACCC","","",null,null],[17,"_MM_PERM_ACCD","","",null,null],[17,"_MM_PERM_ACDA","","",null,null],[17,"_MM_PERM_ACDB","","",null,null],[17,"_MM_PERM_ACDC","","",null,null],[17,"_MM_PERM_ACDD","","",null,null],[17,"_MM_PERM_ADAA","","",null,null],[17,"_MM_PERM_ADAB","","",null,null],[17,"_MM_PERM_ADAC","","",null,null],[17,"_MM_PERM_ADAD","","",null,null],[17,"_MM_PERM_ADBA","","",null,null],[17,"_MM_PERM_ADBB","","",null,null],[17,"_MM_PERM_ADBC","","",null,null],[17,"_MM_PERM_ADBD","","",null,null],[17,"_MM_PERM_ADCA","","",null,null],[17,"_MM_PERM_ADCB","","",null,null],[17,"_MM_PERM_ADCC","","",null,null],[17,"_MM_PERM_ADCD","","",null,null],[17,"_MM_PERM_ADDA","","",null,null],[17,"_MM_PERM_ADDB","","",null,null],[17,"_MM_PERM_ADDC","","",null,null],[17,"_MM_PERM_ADDD","","",null,null],[17,"_MM_PERM_BAAA","","",null,null],[17,"_MM_PERM_BAAB","","",null,null],[17,"_MM_PERM_BAAC","","",null,null],[17,"_MM_PERM_BAAD","","",null,null],[17,"_MM_PERM_BABA","","",null,null],[17,"_MM_PERM_BABB","","",null,null],[17,"_MM_PERM_BABC","","",null,null],[17,"_MM_PERM_BABD","","",null,null],[17,"_MM_PERM_BACA","","",null,null],[17,"_MM_PERM_BACB","","",null,null],[17,"_MM_PERM_BACC","","",null,null],[17,"_MM_PERM_BACD","","",null,null],[17,"_MM_PERM_BADA","","",null,null],[17,"_MM_PERM_BADB","","",null,null],[17,"_MM_PERM_BADC","","",null,null],[17,"_MM_PERM_BADD","","",null,null],[17,"_MM_PERM_BBAA","","",null,null],[17,"_MM_PERM_BBAB","","",null,null],[17,"_MM_PERM_BBAC","","",null,null],[17,"_MM_PERM_BBAD","","",null,null],[17,"_MM_PERM_BBBA","","",null,null],[17,"_MM_PERM_BBBB","","",null,null],[17,"_MM_PERM_BBBC","","",null,null],[17,"_MM_PERM_BBBD","","",null,null],[17,"_MM_PERM_BBCA","","",null,null],[17,"_MM_PERM_BBCB","","",null,null],[17,"_MM_PERM_BBCC","","",null,null],[17,"_MM_PERM_BBCD","","",null,null],[17,"_MM_PERM_BBDA","","",null,null],[17,"_MM_PERM_BBDB","","",null,null],[17,"_MM_PERM_BBDC","","",null,null],[17,"_MM_PERM_BBDD","","",null,null],[17,"_MM_PERM_BCAA","","",null,null],[17,"_MM_PERM_BCAB","","",null,null],[17,"_MM_PERM_BCAC","","",null,null],[17,"_MM_PERM_BCAD","","",null,null],[17,"_MM_PERM_BCBA","","",null,null],[17,"_MM_PERM_BCBB","","",null,null],[17,"_MM_PERM_BCBC","","",null,null],[17,"_MM_PERM_BCBD","","",null,null],[17,"_MM_PERM_BCCA","","",null,null],[17,"_MM_PERM_BCCB","","",null,null],[17,"_MM_PERM_BCCC","","",null,null],[17,"_MM_PERM_BCCD","","",null,null],[17,"_MM_PERM_BCDA","","",null,null],[17,"_MM_PERM_BCDB","","",null,null],[17,"_MM_PERM_BCDC","","",null,null],[17,"_MM_PERM_BCDD","","",null,null],[17,"_MM_PERM_BDAA","","",null,null],[17,"_MM_PERM_BDAB","","",null,null],[17,"_MM_PERM_BDAC","","",null,null],[17,"_MM_PERM_BDAD","","",null,null],[17,"_MM_PERM_BDBA","","",null,null],[17,"_MM_PERM_BDBB","","",null,null],[17,"_MM_PERM_BDBC","","",null,null],[17,"_MM_PERM_BDBD","","",null,null],[17,"_MM_PERM_BDCA","","",null,null],[17,"_MM_PERM_BDCB","","",null,null],[17,"_MM_PERM_BDCC","","",null,null],[17,"_MM_PERM_BDCD","","",null,null],[17,"_MM_PERM_BDDA","","",null,null],[17,"_MM_PERM_BDDB","","",null,null],[17,"_MM_PERM_BDDC","","",null,null],[17,"_MM_PERM_BDDD","","",null,null],[17,"_MM_PERM_CAAA","","",null,null],[17,"_MM_PERM_CAAB","","",null,null],[17,"_MM_PERM_CAAC","","",null,null],[17,"_MM_PERM_CAAD","","",null,null],[17,"_MM_PERM_CABA","","",null,null],[17,"_MM_PERM_CABB","","",null,null],[17,"_MM_PERM_CABC","","",null,null],[17,"_MM_PERM_CABD","","",null,null],[17,"_MM_PERM_CACA","","",null,null],[17,"_MM_PERM_CACB","","",null,null],[17,"_MM_PERM_CACC","","",null,null],[17,"_MM_PERM_CACD","","",null,null],[17,"_MM_PERM_CADA","","",null,null],[17,"_MM_PERM_CADB","","",null,null],[17,"_MM_PERM_CADC","","",null,null],[17,"_MM_PERM_CADD","","",null,null],[17,"_MM_PERM_CBAA","","",null,null],[17,"_MM_PERM_CBAB","","",null,null],[17,"_MM_PERM_CBAC","","",null,null],[17,"_MM_PERM_CBAD","","",null,null],[17,"_MM_PERM_CBBA","","",null,null],[17,"_MM_PERM_CBBB","","",null,null],[17,"_MM_PERM_CBBC","","",null,null],[17,"_MM_PERM_CBBD","","",null,null],[17,"_MM_PERM_CBCA","","",null,null],[17,"_MM_PERM_CBCB","","",null,null],[17,"_MM_PERM_CBCC","","",null,null],[17,"_MM_PERM_CBCD","","",null,null],[17,"_MM_PERM_CBDA","","",null,null],[17,"_MM_PERM_CBDB","","",null,null],[17,"_MM_PERM_CBDC","","",null,null],[17,"_MM_PERM_CBDD","","",null,null],[17,"_MM_PERM_CCAA","","",null,null],[17,"_MM_PERM_CCAB","","",null,null],[17,"_MM_PERM_CCAC","","",null,null],[17,"_MM_PERM_CCAD","","",null,null],[17,"_MM_PERM_CCBA","","",null,null],[17,"_MM_PERM_CCBB","","",null,null],[17,"_MM_PERM_CCBC","","",null,null],[17,"_MM_PERM_CCBD","","",null,null],[17,"_MM_PERM_CCCA","","",null,null],[17,"_MM_PERM_CCCB","","",null,null],[17,"_MM_PERM_CCCC","","",null,null],[17,"_MM_PERM_CCCD","","",null,null],[17,"_MM_PERM_CCDA","","",null,null],[17,"_MM_PERM_CCDB","","",null,null],[17,"_MM_PERM_CCDC","","",null,null],[17,"_MM_PERM_CCDD","","",null,null],[17,"_MM_PERM_CDAA","","",null,null],[17,"_MM_PERM_CDAB","","",null,null],[17,"_MM_PERM_CDAC","","",null,null],[17,"_MM_PERM_CDAD","","",null,null],[17,"_MM_PERM_CDBA","","",null,null],[17,"_MM_PERM_CDBB","","",null,null],[17,"_MM_PERM_CDBC","","",null,null],[17,"_MM_PERM_CDBD","","",null,null],[17,"_MM_PERM_CDCA","","",null,null],[17,"_MM_PERM_CDCB","","",null,null],[17,"_MM_PERM_CDCC","","",null,null],[17,"_MM_PERM_CDCD","","",null,null],[17,"_MM_PERM_CDDA","","",null,null],[17,"_MM_PERM_CDDB","","",null,null],[17,"_MM_PERM_CDDC","","",null,null],[17,"_MM_PERM_CDDD","","",null,null],[17,"_MM_PERM_DAAA","","",null,null],[17,"_MM_PERM_DAAB","","",null,null],[17,"_MM_PERM_DAAC","","",null,null],[17,"_MM_PERM_DAAD","","",null,null],[17,"_MM_PERM_DABA","","",null,null],[17,"_MM_PERM_DABB","","",null,null],[17,"_MM_PERM_DABC","","",null,null],[17,"_MM_PERM_DABD","","",null,null],[17,"_MM_PERM_DACA","","",null,null],[17,"_MM_PERM_DACB","","",null,null],[17,"_MM_PERM_DACC","","",null,null],[17,"_MM_PERM_DACD","","",null,null],[17,"_MM_PERM_DADA","","",null,null],[17,"_MM_PERM_DADB","","",null,null],[17,"_MM_PERM_DADC","","",null,null],[17,"_MM_PERM_DADD","","",null,null],[17,"_MM_PERM_DBAA","","",null,null],[17,"_MM_PERM_DBAB","","",null,null],[17,"_MM_PERM_DBAC","","",null,null],[17,"_MM_PERM_DBAD","","",null,null],[17,"_MM_PERM_DBBA","","",null,null],[17,"_MM_PERM_DBBB","","",null,null],[17,"_MM_PERM_DBBC","","",null,null],[17,"_MM_PERM_DBBD","","",null,null],[17,"_MM_PERM_DBCA","","",null,null],[17,"_MM_PERM_DBCB","","",null,null],[17,"_MM_PERM_DBCC","","",null,null],[17,"_MM_PERM_DBCD","","",null,null],[17,"_MM_PERM_DBDA","","",null,null],[17,"_MM_PERM_DBDB","","",null,null],[17,"_MM_PERM_DBDC","","",null,null],[17,"_MM_PERM_DBDD","","",null,null],[17,"_MM_PERM_DCAA","","",null,null],[17,"_MM_PERM_DCAB","","",null,null],[17,"_MM_PERM_DCAC","","",null,null],[17,"_MM_PERM_DCAD","","",null,null],[17,"_MM_PERM_DCBA","","",null,null],[17,"_MM_PERM_DCBB","","",null,null],[17,"_MM_PERM_DCBC","","",null,null],[17,"_MM_PERM_DCBD","","",null,null],[17,"_MM_PERM_DCCA","","",null,null],[17,"_MM_PERM_DCCB","","",null,null],[17,"_MM_PERM_DCCC","","",null,null],[17,"_MM_PERM_DCCD","","",null,null],[17,"_MM_PERM_DCDA","","",null,null],[17,"_MM_PERM_DCDB","","",null,null],[17,"_MM_PERM_DCDC","","",null,null],[17,"_MM_PERM_DCDD","","",null,null],[17,"_MM_PERM_DDAA","","",null,null],[17,"_MM_PERM_DDAB","","",null,null],[17,"_MM_PERM_DDAC","","",null,null],[17,"_MM_PERM_DDAD","","",null,null],[17,"_MM_PERM_DDBA","","",null,null],[17,"_MM_PERM_DDBB","","",null,null],[17,"_MM_PERM_DDBC","","",null,null],[17,"_MM_PERM_DDBD","","",null,null],[17,"_MM_PERM_DDCA","","",null,null],[17,"_MM_PERM_DDCB","","",null,null],[17,"_MM_PERM_DDCC","","",null,null],[17,"_MM_PERM_DDCD","","",null,null],[17,"_MM_PERM_DDDA","","",null,null],[17,"_MM_PERM_DDDB","","",null,null],[17,"_MM_PERM_DDDC","","",null,null],[17,"_MM_PERM_DDDD","","",null,null],[5,"_mm512_abs_epi16","","Compute the absolute value of packed signed 16-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_abs_epi16","","Compute the absolute value of packed signed 16-bit …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_abs_epi16","","Compute the absolute value of packed signed 16-bit …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_abs_epi16","","Compute the absolute value of packed signed 16-bit …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_abs_epi16","","Compute the absolute value of packed signed 16-bit …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_abs_epi16","","Compute the absolute value of packed signed 16-bit …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_abs_epi16","","Compute the absolute value of packed signed 16-bit …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_abs_epi8","","Compute the absolute value of packed signed 8-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_abs_epi8","","Compute the absolute value of packed signed 8-bit …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_abs_epi8","","Compute the absolute value of packed signed 8-bit …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_abs_epi8","","Compute the absolute value of packed signed 8-bit …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_abs_epi8","","Compute the absolute value of packed signed 8-bit …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_abs_epi8","","Compute the absolute value of packed signed 8-bit …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_abs_epi8","","Compute the absolute value of packed signed 8-bit …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_add_epi16","","Add packed 16-bit integers in a and b, and store the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_add_epi16","","Add packed 16-bit integers in a and b, and store the …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_add_epi16","","Add packed 16-bit integers in a and b, and store the …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_add_epi16","","Add packed 16-bit integers in a and b, and store the …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_add_epi16","","Add packed 16-bit integers in a and b, and store the …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_add_epi16","","Add packed 16-bit integers in a and b, and store the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_add_epi16","","Add packed 16-bit integers in a and b, and store the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_add_epi8","","Add packed 8-bit integers in a and b, and store the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_add_epi8","","Add packed 8-bit integers in a and b, and store the …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_add_epi8","","Add packed 8-bit integers in a and b, and store the …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_add_epi8","","Add packed 8-bit integers in a and b, and store the …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_add_epi8","","Add packed 8-bit integers in a and b, and store the …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_add_epi8","","Add packed 8-bit integers in a and b, and store the …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_add_epi8","","Add packed 8-bit integers in a and b, and store the …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_adds_epu16","","Add packed unsigned 16-bit integers in a and b using …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_adds_epu16","","Add packed unsigned 16-bit integers in a and b using …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_adds_epu16","","Add packed unsigned 16-bit integers in a and b using …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_adds_epu16","","Add packed unsigned 16-bit integers in a and b using …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_adds_epu16","","Add packed unsigned 16-bit integers in a and b using …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_adds_epu16","","Add packed unsigned 16-bit integers in a and b using …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_adds_epu16","","Add packed unsigned 16-bit integers in a and b using …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_adds_epu8","","Add packed unsigned 8-bit integers in a and b using …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_adds_epu8","","Add packed unsigned 8-bit integers in a and b using …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_adds_epu8","","Add packed unsigned 8-bit integers in a and b using …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_adds_epu8","","Add packed unsigned 8-bit integers in a and b using …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_adds_epu8","","Add packed unsigned 8-bit integers in a and b using …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_adds_epu8","","Add packed unsigned 8-bit integers in a and b using …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_adds_epu8","","Add packed unsigned 8-bit integers in a and b using …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_adds_epi16","","Add packed signed 16-bit integers in a and b using …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_adds_epi16","","Add packed signed 16-bit integers in a and b using …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_adds_epi16","","Add packed signed 16-bit integers in a and b using …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_adds_epi16","","Add packed signed 16-bit integers in a and b using …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_adds_epi16","","Add packed signed 16-bit integers in a and b using …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_adds_epi16","","Add packed signed 16-bit integers in a and b using …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_adds_epi16","","Add packed signed 16-bit integers in a and b using …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_adds_epi8","","Add packed signed 8-bit integers in a and b using …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_adds_epi8","","Add packed signed 8-bit integers in a and b using …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_adds_epi8","","Add packed signed 8-bit integers in a and b using …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_adds_epi8","","Add packed signed 8-bit integers in a and b using …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_adds_epi8","","Add packed signed 8-bit integers in a and b using …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_adds_epi8","","Add packed signed 8-bit integers in a and b using …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_adds_epi8","","Add packed signed 8-bit integers in a and b using …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_sub_epi16","","Subtract packed 16-bit integers in b from packed 16-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_sub_epi16","","Subtract packed 16-bit integers in b from packed 16-bit …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_sub_epi16","","Subtract packed 16-bit integers in b from packed 16-bit …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_sub_epi16","","Subtract packed 16-bit integers in b from packed 16-bit …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_sub_epi16","","Subtract packed 16-bit integers in b from packed 16-bit …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_sub_epi16","","Subtract packed 16-bit integers in b from packed 16-bit …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_sub_epi16","","Subtract packed 16-bit integers in b from packed 16-bit …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_sub_epi8","","Subtract packed 8-bit integers in b from packed 8-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_sub_epi8","","Subtract packed 8-bit integers in b from packed 8-bit …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_sub_epi8","","Subtract packed 8-bit integers in b from packed 8-bit …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_sub_epi8","","Subtract packed 8-bit integers in b from packed 8-bit …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_sub_epi8","","Subtract packed 8-bit integers in b from packed 8-bit …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_sub_epi8","","Subtract packed 8-bit integers in b from packed 8-bit …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_sub_epi8","","Subtract packed 8-bit integers in b from packed 8-bit …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_subs_epu16","","Subtract packed unsigned 16-bit integers in b from packed …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_subs_epu16","","Subtract packed unsigned 16-bit integers in b from packed …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_subs_epu16","","Subtract packed unsigned 16-bit integers in b from packed …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_subs_epu16","","Subtract packed unsigned 16-bit integers in b from packed …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_subs_epu16","","Subtract packed unsigned 16-bit integers in b from packed …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_subs_epu16","","Subtract packed unsigned 16-bit integers in b from packed …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_subs_epu16","","Subtract packed unsigned 16-bit integers in b from packed …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_subs_epu8","","Subtract packed unsigned 8-bit integers in b from packed …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_subs_epu8","","Subtract packed unsigned 8-bit integers in b from packed …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_subs_epu8","","Subtract packed unsigned 8-bit integers in b from packed …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_subs_epu8","","Subtract packed unsigned 8-bit integers in b from packed …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_subs_epu8","","Subtract packed unsigned 8-bit integers in b from packed …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_subs_epu8","","Subtract packed unsigned 8-bit integers in b from packed …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_subs_epu8","","Subtract packed unsigned 8-bit integers in b from packed …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_subs_epi16","","Subtract packed signed 16-bit integers in b from packed …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_subs_epi16","","Subtract packed signed 16-bit integers in b from packed …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_subs_epi16","","Subtract packed signed 16-bit integers in b from packed …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_subs_epi16","","Subtract packed signed 16-bit integers in b from packed …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_subs_epi16","","Subtract packed signed 16-bit integers in b from packed …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_subs_epi16","","Subtract packed signed 16-bit integers in b from packed …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_subs_epi16","","Subtract packed signed 16-bit integers in b from packed …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_subs_epi8","","Subtract packed signed 8-bit integers in b from packed …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_subs_epi8","","Subtract packed signed 8-bit integers in b from packed …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_subs_epi8","","Subtract packed signed 8-bit integers in b from packed …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_subs_epi8","","Subtract packed signed 8-bit integers in b from packed …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_subs_epi8","","Subtract packed signed 8-bit integers in b from packed …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_subs_epi8","","Subtract packed signed 8-bit integers in b from packed …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_subs_epi8","","Subtract packed signed 8-bit integers in b from packed …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_mulhi_epu16","","Multiply the packed unsigned 16-bit integers in a and b, …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_mulhi_epu16","","Multiply the packed unsigned 16-bit integers in a and b, …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_mulhi_epu16","","Multiply the packed unsigned 16-bit integers in a and b, …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_mulhi_epu16","","Multiply the packed unsigned 16-bit integers in a and b, …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_mulhi_epu16","","Multiply the packed unsigned 16-bit integers in a and b, …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_mulhi_epu16","","Multiply the packed unsigned 16-bit integers in a and b, …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_mulhi_epu16","","Multiply the packed unsigned 16-bit integers in a and b, …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_mulhi_epi16","","Multiply the packed signed 16-bit integers in a and b, …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_mulhi_epi16","","Multiply the packed signed 16-bit integers in a and b, …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_mulhi_epi16","","Multiply the packed signed 16-bit integers in a and b, …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_mulhi_epi16","","Multiply the packed signed 16-bit integers in a and b, …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_mulhi_epi16","","Multiply the packed signed 16-bit integers in a and b, …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_mulhi_epi16","","Multiply the packed signed 16-bit integers in a and b, …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_mulhi_epi16","","Multiply the packed signed 16-bit integers in a and b, …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_mulhrs_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_mulhrs_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_mulhrs_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_mulhrs_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_mulhrs_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_mulhrs_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_mulhrs_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_mullo_epi16","","Multiply the packed 16-bit integers in a and b, producing …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_mullo_epi16","","Multiply the packed 16-bit integers in a and b, producing …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_mullo_epi16","","Multiply the packed 16-bit integers in a and b, producing …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_mullo_epi16","","Multiply the packed 16-bit integers in a and b, producing …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_mullo_epi16","","Multiply the packed 16-bit integers in a and b, producing …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_mullo_epi16","","Multiply the packed 16-bit integers in a and b, producing …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_mullo_epi16","","Multiply the packed 16-bit integers in a and b, producing …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_max_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_max_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_max_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_max_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_max_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_max_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_max_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_max_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_max_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_max_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_max_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_max_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_max_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_max_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_max_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_max_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_max_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_max_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_max_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_max_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_max_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_max_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_max_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_max_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_max_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_max_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_max_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_max_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_min_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_min_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_min_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_min_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_min_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_min_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_min_epu16","","Compare packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_min_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_min_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_min_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_min_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_min_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_min_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_min_epu8","","Compare packed unsigned 8-bit integers in a and b, and …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_min_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_min_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_min_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_min_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_min_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_min_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_min_epi16","","Compare packed signed 16-bit integers in a and b, and …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_min_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_min_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_min_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_min_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_min_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_min_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_min_epi8","","Compare packed signed 8-bit integers in a and b, and …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_cmplt_epu16_mask","","Compare packed unsigned 16-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmplt_epu16_mask","","Compare packed unsigned 16-bit integers in a and b for …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmplt_epu8_mask","","Compare packed unsigned 8-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmplt_epu8_mask","","Compare packed unsigned 8-bit integers in a and b for …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmplt_epi16_mask","","Compare packed signed 16-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmplt_epi16_mask","","Compare packed signed 16-bit integers in a and b for …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmplt_epi8_mask","","Compare packed signed 8-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmplt_epi8_mask","","Compare packed signed 8-bit integers in a and b for …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmpgt_epu16_mask","","Compare packed unsigned 16-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmpgt_epu16_mask","","Compare packed unsigned 16-bit integers in a and b for …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmpgt_epu8_mask","","Compare packed unsigned 8-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmpgt_epu8_mask","","Compare packed unsigned 8-bit integers in a and b for …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmpgt_epi16_mask","","Compare packed signed 16-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmpgt_epi16_mask","","Compare packed signed 16-bit integers in a and b for …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmpgt_epi8_mask","","Compare packed signed 8-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmpgt_epi8_mask","","Compare packed signed 8-bit integers in a and b for …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmple_epu16_mask","","Compare packed unsigned 16-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmple_epu16_mask","","Compare packed unsigned 16-bit integers in a and b for …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmple_epu8_mask","","Compare packed unsigned 8-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmple_epu8_mask","","Compare packed unsigned 8-bit integers in a and b for …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmple_epi16_mask","","Compare packed signed 16-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmple_epi16_mask","","Compare packed signed 16-bit integers in a and b for …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmple_epi8_mask","","Compare packed signed 8-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmple_epi8_mask","","Compare packed signed 8-bit integers in a and b for …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmpge_epu16_mask","","Compare packed unsigned 16-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmpge_epu16_mask","","Compare packed unsigned 16-bit integers in a and b for …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmpge_epu8_mask","","Compare packed unsigned 8-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmpge_epu8_mask","","Compare packed unsigned 8-bit integers in a and b for …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmpge_epi16_mask","","Compare packed signed 16-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmpge_epi16_mask","","Compare packed signed 16-bit integers in a and b for …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmpge_epi8_mask","","Compare packed signed 8-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmpge_epi8_mask","","Compare packed signed 8-bit integers in a and b for …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmpeq_epu16_mask","","Compare packed unsigned 16-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmpeq_epu16_mask","","Compare packed unsigned 16-bit integers in a and b for …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmpeq_epu8_mask","","Compare packed unsigned 8-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmpeq_epu8_mask","","Compare packed unsigned 8-bit integers in a and b for …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmpeq_epi16_mask","","Compare packed signed 16-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmpeq_epi16_mask","","Compare packed signed 16-bit integers in a and b for …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmpeq_epi8_mask","","Compare packed signed 8-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmpeq_epi8_mask","","Compare packed signed 8-bit integers in a and b for …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmpneq_epu16_mask","","Compare packed unsigned 16-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmpneq_epu16_mask","","Compare packed unsigned 16-bit integers in a and b for …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmpneq_epu8_mask","","Compare packed unsigned 8-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmpneq_epu8_mask","","Compare packed unsigned 8-bit integers in a and b for …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmpneq_epi16_mask","","Compare packed signed 16-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmpneq_epi16_mask","","Compare packed signed 16-bit integers in a and b for …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmpneq_epi8_mask","","Compare packed signed 8-bit integers in a and b for …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmpneq_epi8_mask","","Compare packed signed 8-bit integers in a and b for …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmp_epu16_mask","","Compare packed unsigned 16-bit integers in a and b based …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmp_epu16_mask","","Compare packed unsigned 16-bit integers in a and b based …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmp_epu8_mask","","Compare packed unsigned 8-bit integers in a and b based …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmp_epu8_mask","","Compare packed unsigned 8-bit integers in a and b based …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cmp_epi16_mask","","Compare packed signed 16-bit integers in a and b based on …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_cmp_epi16_mask","","Compare packed signed 16-bit integers in a and b based on …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_cmp_epi8_mask","","Compare packed signed 8-bit integers in a and b based on …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_cmp_epi8_mask","","Compare packed signed 8-bit integers in a and b based on …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_loadu_epi16","","Load 512-bits (composed of 32 packed 16-bit integers) …",null,[[],["__m512i",3]]],[5,"_mm512_loadu_epi8","","Load 512-bits (composed of 64 packed 8-bit integers) from …",null,[[],["__m512i",3]]],[5,"_mm512_storeu_epi16","","Store 512-bits (composed of 32 packed 16-bit integers) …",null,[[["__m512i",3]]]],[5,"_mm512_storeu_epi8","","Store 512-bits (composed of 64 packed 8-bit integers) …",null,[[["__m512i",3]]]],[5,"_mm512_madd_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_madd_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_madd_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm256_mask_madd_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_madd_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_madd_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_madd_epi16","","Multiply packed signed 16-bit integers in a and b, …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_maddubs_epi16","","Vertically multiply each unsigned 8-bit integer from a …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_maddubs_epi16","","Multiply packed unsigned 8-bit integers in a by packed …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_maddubs_epi16","","Multiply packed unsigned 8-bit integers in a by packed …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_maddubs_epi16","","Multiply packed unsigned 8-bit integers in a by packed …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_maddubs_epi16","","Multiply packed unsigned 8-bit integers in a by packed …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_maddubs_epi16","","Multiply packed unsigned 8-bit integers in a by packed …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_maddubs_epi16","","Multiply packed unsigned 8-bit integers in a by packed …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_packs_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_packs_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_packs_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_packs_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_packs_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_packs_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_packs_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_packs_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_packs_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_packs_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_packs_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_packs_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_packs_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_packs_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_packus_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_packus_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_packus_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_packus_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_packus_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_packus_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_packus_epi32","","Convert packed signed 32-bit integers from a and b to …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_packus_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_packus_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_packus_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_packus_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_packus_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_packus_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_packus_epi16","","Convert packed signed 16-bit integers from a and b to …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_avg_epu16","","Average packed unsigned 16-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_avg_epu16","","Average packed unsigned 16-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_avg_epu16","","Average packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_avg_epu16","","Average packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_avg_epu16","","Average packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_avg_epu16","","Average packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_avg_epu16","","Average packed unsigned 16-bit integers in a and b, and …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_avg_epu8","","Average packed unsigned 8-bit integers in a and b, and …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_avg_epu8","","Average packed unsigned 8-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_avg_epu8","","Average packed unsigned 8-bit integers in a and b, and …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_avg_epu8","","Average packed unsigned 8-bit integers in a and b, and …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_avg_epu8","","Average packed unsigned 8-bit integers in a and b, and …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_avg_epu8","","Average packed unsigned 8-bit integers in a and b, and …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_avg_epu8","","Average packed unsigned 8-bit integers in a and b, and …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_sll_epi16","","Shift packed 16-bit integers in a left by count while …",null,[[["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_sll_epi16","","Shift packed 16-bit integers in a left by count while …",null,[[["__m512i",3],["__mmask32",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_sll_epi16","","Shift packed 16-bit integers in a left by count while …",null,[[["__mmask32",6],["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm256_mask_sll_epi16","","Shift packed 16-bit integers in a left by count while …",null,[[["__m128i",3],["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_sll_epi16","","Shift packed 16-bit integers in a left by count while …",null,[[["__m128i",3],["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_sll_epi16","","Shift packed 16-bit integers in a left by count while …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_sll_epi16","","Shift packed 16-bit integers in a left by count while …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_slli_epi16","","Shift packed 16-bit integers in a left by imm8 while …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_slli_epi16","","Shift packed 16-bit integers in a left by imm8 while …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_slli_epi16","","Shift packed 16-bit integers in a left by imm8 while …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_slli_epi16","","Shift packed 16-bit integers in a left by imm8 while …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_slli_epi16","","Shift packed 16-bit integers in a left by imm8 while …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_slli_epi16","","Shift packed 16-bit integers in a left by imm8 while …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_slli_epi16","","Shift packed 16-bit integers in a left by imm8 while …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_sllv_epi16","","Shift packed 16-bit integers in a left by the amount …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_sllv_epi16","","Shift packed 16-bit integers in a left by the amount …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_sllv_epi16","","Shift packed 16-bit integers in a left by the amount …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_sllv_epi16","","Shift packed 16-bit integers in a left by the amount …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_sllv_epi16","","Shift packed 16-bit integers in a left by the amount …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_sllv_epi16","","Shift packed 16-bit integers in a left by the amount …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_sllv_epi16","","Shift packed 16-bit integers in a left by the amount …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_sllv_epi16","","Shift packed 16-bit integers in a left by the amount …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_sllv_epi16","","Shift packed 16-bit integers in a left by the amount …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_srl_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_srl_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__m512i",3],["__mmask32",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_srl_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__mmask32",6],["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm256_mask_srl_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__m128i",3],["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_srl_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__m128i",3],["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_srl_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_srl_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_srli_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_srli_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_srli_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_srli_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_srli_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_srli_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_srli_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_srlv_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_srlv_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_srlv_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_srlv_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_srlv_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_srlv_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_srlv_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_srlv_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_srlv_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_sra_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_sra_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__m512i",3],["__mmask32",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_sra_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__mmask32",6],["__m512i",3],["__m128i",3]],["__m512i",3]]],[5,"_mm256_mask_sra_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__m128i",3],["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_sra_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__m128i",3],["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_sra_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_sra_epi16","","Shift packed 16-bit integers in a right by count while …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_srai_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_srai_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_srai_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_srai_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_srai_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_srai_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_srai_epi16","","Shift packed 16-bit integers in a right by imm8 while …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_srav_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_srav_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_srav_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_srav_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_srav_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_srav_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_srav_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_srav_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_srav_epi16","","Shift packed 16-bit integers in a right by the amount …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_permutex2var_epi16","","Shuffle 16-bit integers in a and b across lanes using the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_permutex2var_epi16","","Shuffle 16-bit integers in a and b across lanes using the …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_permutex2var_epi16","","Shuffle 16-bit integers in a and b across lanes using the …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask2_permutex2var_epi16","","Shuffle 16-bit integers in a and b across lanes using the …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm256_permutex2var_epi16","","Shuffle 16-bit integers in a and b across lanes using the …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_permutex2var_epi16","","Shuffle 16-bit integers in a and b across lanes using the …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_permutex2var_epi16","","Shuffle 16-bit integers in a and b across lanes using the …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask2_permutex2var_epi16","","Shuffle 16-bit integers in a and b across lanes using the …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_permutex2var_epi16","","Shuffle 16-bit integers in a and b across lanes using the …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_permutex2var_epi16","","Shuffle 16-bit integers in a and b across lanes using the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_permutex2var_epi16","","Shuffle 16-bit integers in a and b across lanes using the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_mask2_permutex2var_epi16","","Shuffle 16-bit integers in a and b across lanes using the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_permutexvar_epi16","","Shuffle 16-bit integers in a across lanes using the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_permutexvar_epi16","","Shuffle 16-bit integers in a across lanes using the …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_permutexvar_epi16","","Shuffle 16-bit integers in a across lanes using the …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_permutexvar_epi16","","Shuffle 16-bit integers in a across lanes using the …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_permutexvar_epi16","","Shuffle 16-bit integers in a across lanes using the …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_permutexvar_epi16","","Shuffle 16-bit integers in a across lanes using the …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_permutexvar_epi16","","Shuffle 16-bit integers in a across lanes using the …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_permutexvar_epi16","","Shuffle 16-bit integers in a across lanes using the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_permutexvar_epi16","","Shuffle 16-bit integers in a across lanes using the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_mask_blend_epi16","","Blend packed 16-bit integers from a and b using control …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_blend_epi16","","Blend packed 16-bit integers from a and b using control …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_blend_epi16","","Blend packed 16-bit integers from a and b using control …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_mask_blend_epi8","","Blend packed 8-bit integers from a and b using control …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_blend_epi8","","Blend packed 8-bit integers from a and b using control …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_blend_epi8","","Blend packed 8-bit integers from a and b using control …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_broadcastw_epi16","","Broadcast the low packed 16-bit integer from a to all …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_broadcastw_epi16","","Broadcast the low packed 16-bit integer from a to all …",null,[[["__m512i",3],["__mmask32",6],["__m128i",3]],["__m512i",3]]],[5,"_mm512_maskz_broadcastw_epi16","","Broadcast the low packed 16-bit integer from a to all …",null,[[["__mmask32",6],["__m128i",3]],["__m512i",3]]],[5,"_mm256_mask_broadcastw_epi16","","Broadcast the low packed 16-bit integer from a to all …",null,[[["__m128i",3],["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_broadcastw_epi16","","Broadcast the low packed 16-bit integer from a to all …",null,[[["__mmask16",6],["__m128i",3]],["__m256i",3]]],[5,"_mm_mask_broadcastw_epi16","","Broadcast the low packed 16-bit integer from a to all …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_broadcastw_epi16","","Broadcast the low packed 16-bit integer from a to all …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_broadcastb_epi8","","Broadcast the low packed 8-bit integer from a to all …",null,[[["__m128i",3]],["__m512i",3]]],[5,"_mm512_mask_broadcastb_epi8","","Broadcast the low packed 8-bit integer from a to all …",null,[[["__m512i",3],["__m128i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_broadcastb_epi8","","Broadcast the low packed 8-bit integer from a to all …",null,[[["__m128i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_broadcastb_epi8","","Broadcast the low packed 8-bit integer from a to all …",null,[[["__mmask32",6],["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_broadcastb_epi8","","Broadcast the low packed 8-bit integer from a to all …",null,[[["__mmask32",6],["__m128i",3]],["__m256i",3]]],[5,"_mm_mask_broadcastb_epi8","","Broadcast the low packed 8-bit integer from a to all …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_broadcastb_epi8","","Broadcast the low packed 8-bit integer from a to all …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_unpackhi_epi16","","Unpack and interleave 16-bit integers from the high half …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_unpackhi_epi16","","Unpack and interleave 16-bit integers from the high half …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_unpackhi_epi16","","Unpack and interleave 16-bit integers from the high half …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_unpackhi_epi16","","Unpack and interleave 16-bit integers from the high half …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_unpackhi_epi16","","Unpack and interleave 16-bit integers from the high half …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_unpackhi_epi16","","Unpack and interleave 16-bit integers from the high half …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_unpackhi_epi16","","Unpack and interleave 16-bit integers from the high half …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_unpackhi_epi8","","Unpack and interleave 8-bit integers from the high half …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_unpackhi_epi8","","Unpack and interleave 8-bit integers from the high half …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_unpackhi_epi8","","Unpack and interleave 8-bit integers from the high half …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_unpackhi_epi8","","Unpack and interleave 8-bit integers from the high half …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_unpackhi_epi8","","Unpack and interleave 8-bit integers from the high half …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_unpackhi_epi8","","Unpack and interleave 8-bit integers from the high half …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_unpackhi_epi8","","Unpack and interleave 8-bit integers from the high half …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_unpacklo_epi16","","Unpack and interleave 16-bit integers from the low half …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_unpacklo_epi16","","Unpack and interleave 16-bit integers from the low half …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_unpacklo_epi16","","Unpack and interleave 16-bit integers from the low half …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_unpacklo_epi16","","Unpack and interleave 16-bit integers from the low half …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_unpacklo_epi16","","Unpack and interleave 16-bit integers from the low half …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_unpacklo_epi16","","Unpack and interleave 16-bit integers from the low half …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_unpacklo_epi16","","Unpack and interleave 16-bit integers from the low half …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_unpacklo_epi8","","Unpack and interleave 8-bit integers from the low half of …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_unpacklo_epi8","","Unpack and interleave 8-bit integers from the low half of …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_unpacklo_epi8","","Unpack and interleave 8-bit integers from the low half of …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_unpacklo_epi8","","Unpack and interleave 8-bit integers from the low half of …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_unpacklo_epi8","","Unpack and interleave 8-bit integers from the low half of …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_unpacklo_epi8","","Unpack and interleave 8-bit integers from the low half of …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_unpacklo_epi8","","Unpack and interleave 8-bit integers from the low half of …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_mask_mov_epi16","","Move packed 16-bit integers from a into dst using …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_mov_epi16","","Move packed 16-bit integers from a into dst using …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm256_mask_mov_epi16","","Move packed 16-bit integers from a into dst using …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_mov_epi16","","Move packed 16-bit integers from a into dst using …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_mov_epi16","","Move packed 16-bit integers from a into dst using …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_mov_epi16","","Move packed 16-bit integers from a into dst using …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_mask_mov_epi8","","Move packed 8-bit integers from a into dst using …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_mov_epi8","","Move packed 8-bit integers from a into dst using zeromask …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_mov_epi8","","Move packed 8-bit integers from a into dst using …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_mov_epi8","","Move packed 8-bit integers from a into dst using zeromask …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_mask_mov_epi8","","Move packed 8-bit integers from a into dst using …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_mov_epi8","","Move packed 8-bit integers from a into dst using zeromask …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_mask_set1_epi16","","Broadcast 16-bit integer a to all elements of dst using …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_set1_epi16","","Broadcast the low packed 16-bit integer from a to all …",null,[[["__mmask32",6]],["__m512i",3]]],[5,"_mm256_mask_set1_epi16","","Broadcast 16-bit integer a to all elements of dst using …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_set1_epi16","","Broadcast the low packed 16-bit integer from a to all …",null,[[["__mmask16",6]],["__m256i",3]]],[5,"_mm_mask_set1_epi16","","Broadcast 16-bit integer a to all elements of dst using …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_set1_epi16","","Broadcast the low packed 16-bit integer from a to all …",null,[[["__mmask8",6]],["__m128i",3]]],[5,"_mm512_mask_set1_epi8","","Broadcast 8-bit integer a to all elements of dst using …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_set1_epi8","","Broadcast 8-bit integer a to all elements of dst using …",null,[[["__mmask64",6]],["__m512i",3]]],[5,"_mm256_mask_set1_epi8","","Broadcast 8-bit integer a to all elements of dst using …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_set1_epi8","","Broadcast 8-bit integer a to all elements of dst using …",null,[[["__mmask32",6]],["__m256i",3]]],[5,"_mm_mask_set1_epi8","","Broadcast 8-bit integer a to all elements of dst using …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_set1_epi8","","Broadcast 8-bit integer a to all elements of dst using …",null,[[["__mmask16",6]],["__m128i",3]]],[5,"_mm512_shufflelo_epi16","","Shuffle 16-bit integers in the low 64 bits of 128-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_shufflelo_epi16","","Shuffle 16-bit integers in the low 64 bits of 128-bit …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_shufflelo_epi16","","Shuffle 16-bit integers in the low 64 bits of 128-bit …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm512_shufflehi_epi16","","Shuffle 16-bit integers in the high 64 bits of 128-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_shufflehi_epi16","","Shuffle 16-bit integers in the high 64 bits of 128-bit …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_shufflehi_epi16","","Shuffle 16-bit integers in the high 64 bits of 128-bit …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm512_shuffle_epi8","","Shuffle packed 8-bit integers in a according to shuffle …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_shuffle_epi8","","Shuffle 8-bit integers in a within 128-bit lanes using …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_shuffle_epi8","","Shuffle packed 8-bit integers in a according to shuffle …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_test_epi16_mask","","Compute the bitwise AND of packed 16-bit integers in a …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_test_epi16_mask","","Compute the bitwise AND of packed 16-bit integers in a …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_test_epi8_mask","","Compute the bitwise AND of packed 8-bit integers in a and …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_test_epi8_mask","","Compute the bitwise AND of packed 8-bit integers in a and …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_testn_epi16_mask","","Compute the bitwise NAND of packed 16-bit integers in a …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_mask_testn_epi16_mask","","Compute the bitwise NAND of packed 16-bit integers in a …",null,[[["__mmask32",6],["__m512i",3]],["__mmask32",6]]],[5,"_mm512_testn_epi8_mask","","Compute the bitwise NAND of packed 8-bit integers in a …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_testn_epi8_mask","","Compute the bitwise NAND of packed 8-bit integers in a …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_store_mask64","","Store 64-bit mask from a into memory.",null,[[["__mmask64",6]]]],[5,"_store_mask32","","Store 32-bit mask from a into memory.",null,[[["__mmask32",6]]]],[5,"_load_mask64","","Load 64-bit mask from memory into k.",null,[[],["__mmask64",6]]],[5,"_load_mask32","","Load 32-bit mask from memory into k.",null,[[],["__mmask32",6]]],[5,"_mm512_sad_epu8","","Compute the absolute differences of packed unsigned 8-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_dbsad_epu8","","Compute the sum of absolute differences (SADs) of …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_dbsad_epu8","","Compute the sum of absolute differences (SADs) of …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm512_maskz_dbsad_epu8","","Compute the sum of absolute differences (SADs) of …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm512_movepi16_mask","","Set each bit of mask register k based on the most …",null,[[["__m512i",3]],["__mmask32",6]]],[5,"_mm512_movepi8_mask","","Set each bit of mask register k based on the most …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_movm_epi16","","Set each packed 16-bit integer in dst to all ones or all …",null,[[["__mmask32",6]],["__m512i",3]]],[5,"_mm512_movm_epi8","","Set each packed 8-bit integer in dst to all ones or all …",null,[[["__mmask64",6]],["__m512i",3]]],[5,"_kadd_mask32","","Add 32-bit masks in a and b, and store the result in k.",null,[[["__mmask32",6]],["__mmask32",6]]],[5,"_kadd_mask64","","Add 64-bit masks in a and b, and store the result in k.",null,[[["__mmask64",6]],["__mmask64",6]]],[5,"_kand_mask32","","Compute the bitwise AND of 32-bit masks a and b, and …",null,[[["__mmask32",6]],["__mmask32",6]]],[5,"_kand_mask64","","Compute the bitwise AND of 64-bit masks a and b, and …",null,[[["__mmask64",6]],["__mmask64",6]]],[5,"_knot_mask32","","Compute the bitwise NOT of 32-bit mask a, and store the …",null,[[["__mmask32",6]],["__mmask32",6]]],[5,"_knot_mask64","","Compute the bitwise NOT of 64-bit mask a, and store the …",null,[[["__mmask64",6]],["__mmask64",6]]],[5,"_kandn_mask32","","Compute the bitwise NOT of 32-bit masks a and then AND …",null,[[["__mmask32",6]],["__mmask32",6]]],[5,"_kandn_mask64","","Compute the bitwise NOT of 64-bit masks a and then AND …",null,[[["__mmask64",6]],["__mmask64",6]]],[5,"_kor_mask32","","Compute the bitwise OR of 32-bit masks a and b, and store …",null,[[["__mmask32",6]],["__mmask32",6]]],[5,"_kor_mask64","","Compute the bitwise OR of 64-bit masks a and b, and store …",null,[[["__mmask64",6]],["__mmask64",6]]],[5,"_kxor_mask32","","Compute the bitwise XOR of 32-bit masks a and b, and …",null,[[["__mmask32",6]],["__mmask32",6]]],[5,"_kxor_mask64","","Compute the bitwise XOR of 64-bit masks a and b, and …",null,[[["__mmask64",6]],["__mmask64",6]]],[5,"_kxnor_mask32","","Compute the bitwise XNOR of 32-bit masks a and b, and …",null,[[["__mmask32",6]],["__mmask32",6]]],[5,"_kxnor_mask64","","Compute the bitwise XNOR of 64-bit masks a and b, and …",null,[[["__mmask64",6]],["__mmask64",6]]],[5,"_mm512_cvtepi16_epi8","","Convert packed 16-bit integers in a to packed 8-bit …",null,[[["__m512i",3]],["__m256i",3]]],[5,"_mm512_mask_cvtepi16_epi8","","Convert packed 16-bit integers in a to packed 8-bit …",null,[[["__mmask32",6],["__m512i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvtepi16_epi8","","Convert packed 16-bit integers in a to packed 8-bit …",null,[[["__mmask32",6],["__m512i",3]],["__m256i",3]]],[5,"_mm512_cvtsepi16_epi8","","Convert packed signed 16-bit integers in a to packed …",null,[[["__m512i",3]],["__m256i",3]]],[5,"_mm512_mask_cvtsepi16_epi8","","Convert packed signed 16-bit integers in a to packed …",null,[[["__mmask32",6],["__m512i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvtsepi16_epi8","","Convert packed signed 16-bit integers in a to packed …",null,[[["__mmask32",6],["__m512i",3]],["__m256i",3]]],[5,"_mm512_cvtusepi16_epi8","","Convert packed unsigned 16-bit integers in a to packed …",null,[[["__m512i",3]],["__m256i",3]]],[5,"_mm512_mask_cvtusepi16_epi8","","Convert packed unsigned 16-bit integers in a to packed …",null,[[["__mmask32",6],["__m512i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm512_maskz_cvtusepi16_epi8","","Convert packed unsigned 16-bit integers in a to packed …",null,[[["__mmask32",6],["__m512i",3]],["__m256i",3]]],[5,"_mm512_cvtepi8_epi16","","Sign extend packed 8-bit integers in a to packed 16-bit …",null,[[["__m256i",3]],["__m512i",3]]],[5,"_mm512_mask_cvtepi8_epi16","","Sign extend packed 8-bit integers in a to packed 16-bit …",null,[[["__m512i",3],["__mmask32",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_maskz_cvtepi8_epi16","","Sign extend packed 8-bit integers in a to packed 16-bit …",null,[[["__mmask32",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_cvtepu8_epi16","","Zero extend packed unsigned 8-bit integers in a to packed …",null,[[["__m256i",3]],["__m512i",3]]],[5,"_mm512_mask_cvtepu8_epi16","","Zero extend packed unsigned 8-bit integers in a to packed …",null,[[["__m512i",3],["__mmask32",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_maskz_cvtepu8_epi16","","Zero extend packed unsigned 8-bit integers in a to packed …",null,[[["__mmask32",6],["__m256i",3]],["__m512i",3]]],[5,"_mm512_bslli_epi128","","Shift 128-bit lanes in a left by imm8 bytes while …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_bsrli_epi128","","Shift 128-bit lanes in a right by imm8 bytes while …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_alignr_epi8","","Concatenate pairs of 16-byte blocks in a and b into a …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_alignr_epi8","","Concatenate pairs of 16-byte blocks in a and b into a …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_alignr_epi8","","Concatenate pairs of 16-byte blocks in a and b into a …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_broadcastmw_epi32","","Broadcast the low 16-bits from input mask k to all 32-bit …",null,[[["__mmask16",6]],["__m512i",3]]],[5,"_mm256_broadcastmw_epi32","","Broadcast the low 16-bits from input mask k to all 32-bit …",null,[[["__mmask16",6]],["__m256i",3]]],[5,"_mm_broadcastmw_epi32","","Broadcast the low 16-bits from input mask k to all 32-bit …",null,[[["__mmask16",6]],["__m128i",3]]],[5,"_mm512_broadcastmb_epi64","","Broadcast the low 8-bits from input mask k to all 64-bit …",null,[[["__mmask8",6]],["__m512i",3]]],[5,"_mm256_broadcastmb_epi64","","Broadcast the low 8-bits from input mask k to all 64-bit …",null,[[["__mmask8",6]],["__m256i",3]]],[5,"_mm_broadcastmb_epi64","","Broadcast the low 8-bits from input mask k to all 64-bit …",null,[[["__mmask8",6]],["__m128i",3]]],[5,"_mm512_conflict_epi32","","Test each 32-bit element of a for equality with all other …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_conflict_epi32","","Test each 32-bit element of a for equality with all other …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_conflict_epi32","","Test each 32-bit element of a for equality with all other …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm256_conflict_epi32","","Test each 32-bit element of a for equality with all other …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_conflict_epi32","","Test each 32-bit element of a for equality with all other …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_conflict_epi32","","Test each 32-bit element of a for equality with all other …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_conflict_epi32","","Test each 32-bit element of a for equality with all other …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_conflict_epi32","","Test each 32-bit element of a for equality with all other …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_conflict_epi32","","Test each 32-bit element of a for equality with all other …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_conflict_epi64","","Test each 64-bit element of a for equality with all other …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_conflict_epi64","","Test each 64-bit element of a for equality with all other …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_conflict_epi64","","Test each 64-bit element of a for equality with all other …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm256_conflict_epi64","","Test each 64-bit element of a for equality with all other …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_conflict_epi64","","Test each 64-bit element of a for equality with all other …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_conflict_epi64","","Test each 64-bit element of a for equality with all other …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_conflict_epi64","","Test each 64-bit element of a for equality with all other …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_conflict_epi64","","Test each 64-bit element of a for equality with all other …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_conflict_epi64","","Test each 64-bit element of a for equality with all other …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_lzcnt_epi32","","Counts the number of leading zero bits in each packed …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_lzcnt_epi32","","Counts the number of leading zero bits in each packed …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_maskz_lzcnt_epi32","","Counts the number of leading zero bits in each packed …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm256_lzcnt_epi32","","Counts the number of leading zero bits in each packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_lzcnt_epi32","","Counts the number of leading zero bits in each packed …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_lzcnt_epi32","","Counts the number of leading zero bits in each packed …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_lzcnt_epi32","","Counts the number of leading zero bits in each packed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_lzcnt_epi32","","Counts the number of leading zero bits in each packed …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_lzcnt_epi32","","Counts the number of leading zero bits in each packed …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_lzcnt_epi64","","Counts the number of leading zero bits in each packed …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_lzcnt_epi64","","Counts the number of leading zero bits in each packed …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_maskz_lzcnt_epi64","","Counts the number of leading zero bits in each packed …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm256_lzcnt_epi64","","Counts the number of leading zero bits in each packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_lzcnt_epi64","","Counts the number of leading zero bits in each packed …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_lzcnt_epi64","","Counts the number of leading zero bits in each packed …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_lzcnt_epi64","","Counts the number of leading zero bits in each packed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_lzcnt_epi64","","Counts the number of leading zero bits in each packed …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_lzcnt_epi64","","Counts the number of leading zero bits in each packed …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_madd52hi_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_madd52lo_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm256_madd52hi_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_madd52lo_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_madd52hi_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_madd52lo_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm512_popcnt_epi16","","For each packed 16-bit integer maps the value to the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_maskz_popcnt_epi16","","For each packed 16-bit integer maps the value to the …",null,[[["__mmask32",6],["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_popcnt_epi16","","For each packed 16-bit integer maps the value to the …",null,[[["__m512i",3],["__mmask32",6]],["__m512i",3]]],[5,"_mm256_popcnt_epi16","","For each packed 16-bit integer maps the value to the …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_popcnt_epi16","","For each packed 16-bit integer maps the value to the …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_popcnt_epi16","","For each packed 16-bit integer maps the value to the …",null,[[["__mmask16",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_popcnt_epi16","","For each packed 16-bit integer maps the value to the …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_popcnt_epi16","","For each packed 16-bit integer maps the value to the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_popcnt_epi16","","For each packed 16-bit integer maps the value to the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_popcnt_epi8","","For each packed 8-bit integer maps the value to the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_maskz_popcnt_epi8","","For each packed 8-bit integer maps the value to the …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_mask_popcnt_epi8","","For each packed 8-bit integer maps the value to the …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_popcnt_epi8","","For each packed 8-bit integer maps the value to the …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_popcnt_epi8","","For each packed 8-bit integer maps the value to the …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_popcnt_epi8","","For each packed 8-bit integer maps the value to the …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_popcnt_epi8","","For each packed 8-bit integer maps the value to the …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_popcnt_epi8","","For each packed 8-bit integer maps the value to the …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_popcnt_epi8","","For each packed 8-bit integer maps the value to the …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm512_bitshuffle_epi64_mask","","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …",null,[[["__m512i",3]],["__mmask64",6]]],[5,"_mm512_mask_bitshuffle_epi64_mask","","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …",null,[[["__m512i",3],["__mmask64",6]],["__mmask64",6]]],[5,"_mm256_bitshuffle_epi64_mask","","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …",null,[[["__m256i",3]],["__mmask32",6]]],[5,"_mm256_mask_bitshuffle_epi64_mask","","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …",null,[[["__mmask32",6],["__m256i",3]],["__mmask32",6]]],[5,"_mm_bitshuffle_epi64_mask","","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …",null,[[["__m128i",3]],["__mmask16",6]]],[5,"_mm_mask_bitshuffle_epi64_mask","","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …",null,[[["__mmask16",6],["__m128i",3]],["__mmask16",6]]],[5,"_mm512_gf2p8mul_epi8","","Performs a multiplication in GF(2^8) on the packed bytes. …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_mask_gf2p8mul_epi8","","Performs a multiplication in GF(2^8) on the packed bytes. …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_maskz_gf2p8mul_epi8","","Performs a multiplication in GF(2^8) on the packed bytes. …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_gf2p8mul_epi8","","Performs a multiplication in GF(2^8) on the packed bytes. …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_gf2p8mul_epi8","","Performs a multiplication in GF(2^8) on the packed bytes. …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_gf2p8mul_epi8","","Performs a multiplication in GF(2^8) on the packed bytes. …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_gf2p8mul_epi8","","Performs a multiplication in GF(2^8) on the packed bytes. …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_gf2p8mul_epi8","","Performs a multiplication in GF(2^8) on the packed bytes. …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm_maskz_gf2p8mul_epi8","","Performs a multiplication in GF(2^8) on the packed bytes. …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_gf2p8affine_epi64_epi8","","Performs an affine transformation on the packed bytes in …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_maskz_gf2p8affine_epi64_epi8","","Performs an affine transformation on the packed bytes in …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_mask_gf2p8affine_epi64_epi8","","Performs an affine transformation on the packed bytes in …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_gf2p8affine_epi64_epi8","","Performs an affine transformation on the packed bytes in …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_gf2p8affine_epi64_epi8","","Performs an affine transformation on the packed bytes in …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_gf2p8affine_epi64_epi8","","Performs an affine transformation on the packed bytes in …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_gf2p8affine_epi64_epi8","","Performs an affine transformation on the packed bytes in …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_gf2p8affine_epi64_epi8","","Performs an affine transformation on the packed bytes in …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_gf2p8affine_epi64_epi8","","Performs an affine transformation on the packed bytes in …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm512_gf2p8affineinv_epi64_epi8","","Performs an affine transformation on the inverted packed …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_maskz_gf2p8affineinv_epi64_epi8","","Performs an affine transformation on the inverted packed …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm512_mask_gf2p8affineinv_epi64_epi8","","Performs an affine transformation on the inverted packed …",null,[[["__m512i",3],["__mmask64",6]],["__m512i",3]]],[5,"_mm256_gf2p8affineinv_epi64_epi8","","Performs an affine transformation on the inverted packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_gf2p8affineinv_epi64_epi8","","Performs an affine transformation on the inverted packed …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_gf2p8affineinv_epi64_epi8","","Performs an affine transformation on the inverted packed …",null,[[["__mmask32",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_gf2p8affineinv_epi64_epi8","","Performs an affine transformation on the inverted packed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_gf2p8affineinv_epi64_epi8","","Performs an affine transformation on the inverted packed …",null,[[["__mmask16",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_gf2p8affineinv_epi64_epi8","","Performs an affine transformation on the inverted packed …",null,[[["__m128i",3],["__mmask16",6]],["__m128i",3]]],[5,"_mm512_popcnt_epi32","","For each packed 32-bit integer maps the value to the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_maskz_popcnt_epi32","","For each packed 32-bit integer maps the value to the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm512_mask_popcnt_epi32","","For each packed 32-bit integer maps the value to the …",null,[[["__m512i",3],["__mmask16",6]],["__m512i",3]]],[5,"_mm256_popcnt_epi32","","For each packed 32-bit integer maps the value to the …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_popcnt_epi32","","For each packed 32-bit integer maps the value to the …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_popcnt_epi32","","For each packed 32-bit integer maps the value to the …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_popcnt_epi32","","For each packed 32-bit integer maps the value to the …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_popcnt_epi32","","For each packed 32-bit integer maps the value to the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_popcnt_epi32","","For each packed 32-bit integer maps the value to the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm512_popcnt_epi64","","For each packed 64-bit integer maps the value to the …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_maskz_popcnt_epi64","","For each packed 64-bit integer maps the value to the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm512_mask_popcnt_epi64","","For each packed 64-bit integer maps the value to the …",null,[[["__m512i",3],["__mmask8",6]],["__m512i",3]]],[5,"_mm256_popcnt_epi64","","For each packed 64-bit integer maps the value to the …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_maskz_popcnt_epi64","","For each packed 64-bit integer maps the value to the …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_popcnt_epi64","","For each packed 64-bit integer maps the value to the …",null,[[["__mmask8",6],["__m256i",3]],["__m256i",3]]],[5,"_mm_popcnt_epi64","","For each packed 64-bit integer maps the value to the …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_maskz_popcnt_epi64","","For each packed 64-bit integer maps the value to the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_popcnt_epi64","","For each packed 64-bit integer maps the value to the …",null,[[["__mmask8",6],["__m128i",3]],["__m128i",3]]],[5,"_mm256_aesenc_epi128","","Performs one round of an AES encryption flow on each …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_aesenclast_epi128","","Performs the last round of an AES encryption flow on each …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_aesdec_epi128","","Performs one round of an AES decryption flow on each …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_aesdeclast_epi128","","Performs the last round of an AES decryption flow on each …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm512_aesenc_epi128","","Performs one round of an AES encryption flow on each …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_aesenclast_epi128","","Performs the last round of an AES encryption flow on each …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_aesdec_epi128","","Performs one round of an AES decryption flow on each …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_aesdeclast_epi128","","Performs the last round of an AES decryption flow on each …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm512_clmulepi64_epi128","","Performs a carry-less multiplication of two 64-bit …",null,[[["__m512i",3]],["__m512i",3]]],[5,"_mm256_clmulepi64_epi128","","Performs a carry-less multiplication of two 64-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_bittest","","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…",null,[[]]],[5,"_bittestandset","","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…",null,[[]]],[5,"_bittestandreset","","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…",null,[[]]],[5,"_bittestandcomplement","","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…",null,[[]]],[17,"_XBEGIN_STARTED","","Transaction successfully started.",null,null],[17,"_XABORT_EXPLICIT","","Transaction explicitly aborted with xabort. The parameter …",null,null],[17,"_XABORT_RETRY","","Transaction retry is possible.",null,null],[17,"_XABORT_CONFLICT","","Transaction abort due to a memory conflict with another …",null,null],[17,"_XABORT_CAPACITY","","Transaction abort due to the transaction using too much …",null,null],[17,"_XABORT_DEBUG","","Transaction abort due to a debug trap.",null,null],[17,"_XABORT_NESTED","","Transaction abort in a inner nested transaction.",null,null],[5,"_xbegin","","Specifies the start of a restricted transactional memory …",null,[[]]],[5,"_xend","","Specifies the end of a restricted transactional memory …",null,[[]]],[5,"_xabort","","Forces a restricted transactional memory (RTM) region to …",null,[[]]],[5,"_xtest","","Queries whether the processor is executing in a …",null,[[]]],[5,"_xabort_code","","Retrieves the parameter passed to [<code>_xabort</code>] when [<code>_xbegin</code>]…",null,[[]]],[5,"_mm_cvtph_ps","","Converts the 4 x 16-bit half-precision float values in …",null,[[["__m128i",3]],["__m128",3]]],[5,"_mm256_cvtph_ps","","Converts the 8 x 16-bit half-precision float values in …",null,[[["__m128i",3]],["__m256",3]]],[5,"_mm_cvtps_ph","","Converts the 4 x 32-bit float values in the 128-bit …",null,[[["__m128",3]],["__m128i",3]]],[5,"_mm256_cvtps_ph","","Converts the 8 x 32-bit float values in the 256-bit …",null,[[["__m256",3]],["__m128i",3]]],[5,"_fxsave64","","Saves the <code>x87</code> FPU, <code>MMX</code> technology, <code>XMM</code>, and <code>MXCSR</code> …",null,[[]]],[5,"_fxrstor64","","Restores the <code>XMM</code>, <code>MMX</code>, <code>MXCSR</code>, and <code>x87</code> FPU registers from …",null,[[]]],[5,"_mm_cvtss_si64","","Converts the lowest 32 bit float in the input vector to a …",null,[[["__m128",3]]]],[5,"_mm_cvttss_si64","","Converts the lowest 32 bit float in the input vector to a …",null,[[["__m128",3]]]],[5,"_mm_cvtsi64_ss","","Converts a 64 bit integer to a 32 bit float. The result …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cvtsd_si64","","Converts the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvtsd_si64x","","Alias for <code>_mm_cvtsd_si64</code>",null,[[["__m128d",3]]]],[5,"_mm_cvttsd_si64","","Converts the lower double-precision (64-bit) …",null,[[["__m128d",3]]]],[5,"_mm_cvttsd_si64x","","Alias for <code>_mm_cvttsd_si64</code>",null,[[["__m128d",3]]]],[5,"_mm_stream_si64","","Stores a 64-bit integer value in the specified memory …",null,[[]]],[5,"_mm_cvtsi64_si128","","Returns a vector whose lowest element is <code>a</code> and all higher …",null,[[],["__m128i",3]]],[5,"_mm_cvtsi64x_si128","","Returns a vector whose lowest element is <code>a</code> and all higher …",null,[[],["__m128i",3]]],[5,"_mm_cvtsi128_si64","","Returns the lowest element of <code>a</code>.",null,[[["__m128i",3]]]],[5,"_mm_cvtsi128_si64x","","Returns the lowest element of <code>a</code>.",null,[[["__m128i",3]]]],[5,"_mm_cvtsi64_sd","","Returns <code>a</code> with its lower element replaced by <code>b</code> after …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cvtsi64x_sd","","Returns <code>a</code> with its lower element replaced by <code>b</code> after …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_extract_epi64","","Extracts an 64-bit integer from <code>a</code> selected with <code>imm8</code>",null,[[["__m128i",3]]]],[5,"_mm_insert_epi64","","Returns a copy of <code>a</code> with the 64-bit integer from <code>i</code> …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_crc32_u64","","Starting with the initial value in <code>crc</code>, return the …",null,[[]]],[5,"_xsave64","","Performs a full or partial save of the enabled processor …",null,[[]]],[5,"_xrstor64","","Performs a full or partial restore of the enabled …",null,[[]]],[5,"_xsaveopt64","","Performs a full or partial save of the enabled processor …",null,[[]]],[5,"_xsavec64","","Performs a full or partial save of the enabled processor …",null,[[]]],[5,"_xsaves64","","Performs a full or partial save of the enabled processor …",null,[[]]],[5,"_xrstors64","","Performs a full or partial restore of the enabled …",null,[[]]],[5,"_lzcnt_u64","","Counts the leading most significant zero bits.",null,[[]]],[5,"_popcnt64","","Counts the bits that are set.",null,[[]]],[5,"_mm256_insert_epi64","","Copies <code>a</code> to result, and insert the 64-bit integer <code>i</code> into …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_bextr_u64","","Extracts bits in range [<code>start</code>, <code>start</code> + <code>length</code>) from <code>a</code> into…",null,[[]]],[5,"_bextr2_u64","","Extracts bits of <code>a</code> specified by <code>control</code> into the least …",null,[[]]],[5,"_andn_u64","","Bitwise logical <code>AND</code> of inverted <code>a</code> with <code>b</code>.",null,[[]]],[5,"_blsi_u64","","Extracts lowest set isolated bit.",null,[[]]],[5,"_blsmsk_u64","","Gets mask up to lowest set bit.",null,[[]]],[5,"_blsr_u64","","Resets the lowest set bit of <code>x</code>.",null,[[]]],[5,"_tzcnt_u64","","Counts the number of trailing least significant zero bits.",null,[[]]],[5,"_mm_tzcnt_64","","Counts the number of trailing least significant zero bits.",null,[[]]],[5,"_mulx_u64","","Unsigned multiply without affecting flags.",null,[[]]],[5,"_bzhi_u64","","Zeroes higher bits of <code>a</code> >= <code>index</code>.",null,[[]]],[5,"_pdep_u64","","Scatter contiguous low order bits of <code>a</code> to the result at …",null,[[]]],[5,"_pext_u64","","Gathers the bits of <code>x</code> specified by the <code>mask</code> into the …",null,[[]]],[5,"_mm256_extract_epi64","","Extracts a 64-bit integer from <code>a</code>, selected with <code>imm8</code>.",null,[[["__m256i",3]]]],[5,"_bswap64","","Returns an integer with the reversed byte order of x",null,[[]]],[5,"_rdrand64_step","","Read a hardware generated 64-bit random value and store …",null,[[]]],[5,"_rdseed64_step","","Read a 64-bit NIST SP800-90B and SP800-90C compliant …",null,[[]]],[5,"cmpxchg16b","","Compares and exchange 16 bytes (128 bits) of data …",null,[[["ordering",4]]]],[5,"_addcarry_u64","","Adds unsigned 64-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …",null,[[]]],[5,"_addcarryx_u64","","Adds unsigned 64-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …",null,[[]]],[5,"_subborrow_u64","","Adds unsigned 64-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …",null,[[]]],[5,"_bittest64","","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…",null,[[]]],[5,"_bittestandset64","","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…",null,[[]]],[5,"_bittestandreset64","","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…",null,[[]]],[5,"_bittestandcomplement64","","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…",null,[[]]],[0,"arm","core::arch","Platform-specific intrinsics for the <code>arm</code> platform.",null,null],[5,"__breakpoint","core::arch::arm","Inserts a breakpoint instruction.",null,[[]]],[5,"_rev_u16","","Reverse the order of the bytes.",null,[[]]],[5,"_rev_u32","","Reverse the order of the bytes.",null,[[]]],[5,"vand_s8","","Vector bitwise and",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vandq_s8","","Vector bitwise and",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vand_s16","","Vector bitwise and",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vandq_s16","","Vector bitwise and",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vand_s32","","Vector bitwise and",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vandq_s32","","Vector bitwise and",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vand_u8","","Vector bitwise and",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vandq_u8","","Vector bitwise and",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vand_u16","","Vector bitwise and",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vandq_u16","","Vector bitwise and",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vand_u32","","Vector bitwise and",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vandq_u32","","Vector bitwise and",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vand_s64","","Vector bitwise and",null,[[["int64x1_t",3]],["int64x1_t",3]]],[5,"vandq_s64","","Vector bitwise and",null,[[["int64x2_t",3]],["int64x2_t",3]]],[5,"vand_u64","","Vector bitwise and",null,[[["uint64x1_t",3]],["uint64x1_t",3]]],[5,"vandq_u64","","Vector bitwise and",null,[[["uint64x2_t",3]],["uint64x2_t",3]]],[5,"vorr_s8","","Vector bitwise or (immediate, inclusive)",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vorrq_s8","","Vector bitwise or (immediate, inclusive)",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vorr_s16","","Vector bitwise or (immediate, inclusive)",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vorrq_s16","","Vector bitwise or (immediate, inclusive)",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vorr_s32","","Vector bitwise or (immediate, inclusive)",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vorrq_s32","","Vector bitwise or (immediate, inclusive)",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vorr_u8","","Vector bitwise or (immediate, inclusive)",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vorrq_u8","","Vector bitwise or (immediate, inclusive)",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vorr_u16","","Vector bitwise or (immediate, inclusive)",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vorrq_u16","","Vector bitwise or (immediate, inclusive)",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vorr_u32","","Vector bitwise or (immediate, inclusive)",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vorrq_u32","","Vector bitwise or (immediate, inclusive)",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vorr_s64","","Vector bitwise or (immediate, inclusive)",null,[[["int64x1_t",3]],["int64x1_t",3]]],[5,"vorrq_s64","","Vector bitwise or (immediate, inclusive)",null,[[["int64x2_t",3]],["int64x2_t",3]]],[5,"vorr_u64","","Vector bitwise or (immediate, inclusive)",null,[[["uint64x1_t",3]],["uint64x1_t",3]]],[5,"vorrq_u64","","Vector bitwise or (immediate, inclusive)",null,[[["uint64x2_t",3]],["uint64x2_t",3]]],[5,"veor_s8","","Vector bitwise exclusive or (vector)",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"veorq_s8","","Vector bitwise exclusive or (vector)",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"veor_s16","","Vector bitwise exclusive or (vector)",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"veorq_s16","","Vector bitwise exclusive or (vector)",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"veor_s32","","Vector bitwise exclusive or (vector)",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"veorq_s32","","Vector bitwise exclusive or (vector)",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"veor_u8","","Vector bitwise exclusive or (vector)",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"veorq_u8","","Vector bitwise exclusive or (vector)",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"veor_u16","","Vector bitwise exclusive or (vector)",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"veorq_u16","","Vector bitwise exclusive or (vector)",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"veor_u32","","Vector bitwise exclusive or (vector)",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"veorq_u32","","Vector bitwise exclusive or (vector)",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"veor_s64","","Vector bitwise exclusive or (vector)",null,[[["int64x1_t",3]],["int64x1_t",3]]],[5,"veorq_s64","","Vector bitwise exclusive or (vector)",null,[[["int64x2_t",3]],["int64x2_t",3]]],[5,"veor_u64","","Vector bitwise exclusive or (vector)",null,[[["uint64x1_t",3]],["uint64x1_t",3]]],[5,"veorq_u64","","Vector bitwise exclusive or (vector)",null,[[["uint64x2_t",3]],["uint64x2_t",3]]],[5,"vceq_u8","","Compare bitwise Equal (vector)",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vceqq_u8","","Compare bitwise Equal (vector)",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vceq_u16","","Compare bitwise Equal (vector)",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vceqq_u16","","Compare bitwise Equal (vector)",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vceq_u32","","Compare bitwise Equal (vector)",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vceqq_u32","","Compare bitwise Equal (vector)",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vceq_s8","","Compare bitwise Equal (vector)",null,[[["int8x8_t",3]],["uint8x8_t",3]]],[5,"vceqq_s8","","Compare bitwise Equal (vector)",null,[[["int8x16_t",3]],["uint8x16_t",3]]],[5,"vceq_s16","","Compare bitwise Equal (vector)",null,[[["int16x4_t",3]],["uint16x4_t",3]]],[5,"vceqq_s16","","Compare bitwise Equal (vector)",null,[[["int16x8_t",3]],["uint16x8_t",3]]],[5,"vceq_s32","","Compare bitwise Equal (vector)",null,[[["int32x2_t",3]],["uint32x2_t",3]]],[5,"vceqq_s32","","Compare bitwise Equal (vector)",null,[[["int32x4_t",3]],["uint32x4_t",3]]],[5,"vceq_f32","","Floating-point compare equal",null,[[["float32x2_t",3]],["uint32x2_t",3]]],[5,"vceqq_f32","","Floating-point compare equal",null,[[["float32x4_t",3]],["uint32x4_t",3]]],[5,"vcgt_s8","","Compare signed greater than",null,[[["int8x8_t",3]],["uint8x8_t",3]]],[5,"vcgtq_s8","","Compare signed greater than",null,[[["int8x16_t",3]],["uint8x16_t",3]]],[5,"vcgt_s16","","Compare signed greater than",null,[[["int16x4_t",3]],["uint16x4_t",3]]],[5,"vcgtq_s16","","Compare signed greater than",null,[[["int16x8_t",3]],["uint16x8_t",3]]],[5,"vcgt_s32","","Compare signed greater than",null,[[["int32x2_t",3]],["uint32x2_t",3]]],[5,"vcgtq_s32","","Compare signed greater than",null,[[["int32x4_t",3]],["uint32x4_t",3]]],[5,"vcgt_u8","","Compare unsigned highe",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vcgtq_u8","","Compare unsigned highe",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vcgt_u16","","Compare unsigned highe",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vcgtq_u16","","Compare unsigned highe",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vcgt_u32","","Compare unsigned highe",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vcgtq_u32","","Compare unsigned highe",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vcgt_f32","","Floating-point compare greater than",null,[[["float32x2_t",3]],["uint32x2_t",3]]],[5,"vcgtq_f32","","Floating-point compare greater than",null,[[["float32x4_t",3]],["uint32x4_t",3]]],[5,"vclt_s8","","Compare signed less than",null,[[["int8x8_t",3]],["uint8x8_t",3]]],[5,"vcltq_s8","","Compare signed less than",null,[[["int8x16_t",3]],["uint8x16_t",3]]],[5,"vclt_s16","","Compare signed less than",null,[[["int16x4_t",3]],["uint16x4_t",3]]],[5,"vcltq_s16","","Compare signed less than",null,[[["int16x8_t",3]],["uint16x8_t",3]]],[5,"vclt_s32","","Compare signed less than",null,[[["int32x2_t",3]],["uint32x2_t",3]]],[5,"vcltq_s32","","Compare signed less than",null,[[["int32x4_t",3]],["uint32x4_t",3]]],[5,"vclt_u8","","Compare unsigned less than",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vcltq_u8","","Compare unsigned less than",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vclt_u16","","Compare unsigned less than",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vcltq_u16","","Compare unsigned less than",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vclt_u32","","Compare unsigned less than",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vcltq_u32","","Compare unsigned less than",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vclt_f32","","Floating-point compare less than",null,[[["float32x2_t",3]],["uint32x2_t",3]]],[5,"vcltq_f32","","Floating-point compare less than",null,[[["float32x4_t",3]],["uint32x4_t",3]]],[5,"vcle_s8","","Compare signed less than or equal",null,[[["int8x8_t",3]],["uint8x8_t",3]]],[5,"vcleq_s8","","Compare signed less than or equal",null,[[["int8x16_t",3]],["uint8x16_t",3]]],[5,"vcle_s16","","Compare signed less than or equal",null,[[["int16x4_t",3]],["uint16x4_t",3]]],[5,"vcleq_s16","","Compare signed less than or equal",null,[[["int16x8_t",3]],["uint16x8_t",3]]],[5,"vcle_s32","","Compare signed less than or equal",null,[[["int32x2_t",3]],["uint32x2_t",3]]],[5,"vcleq_s32","","Compare signed less than or equal",null,[[["int32x4_t",3]],["uint32x4_t",3]]],[5,"vcle_u8","","Compare unsigned less than or equal",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vcleq_u8","","Compare unsigned less than or equal",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vcle_u16","","Compare unsigned less than or equal",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vcleq_u16","","Compare unsigned less than or equal",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vcle_u32","","Compare unsigned less than or equal",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vcleq_u32","","Compare unsigned less than or equal",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vcle_f32","","Floating-point compare less than or equal",null,[[["float32x2_t",3]],["uint32x2_t",3]]],[5,"vcleq_f32","","Floating-point compare less than or equal",null,[[["float32x4_t",3]],["uint32x4_t",3]]],[5,"vcge_s8","","Compare signed greater than or equal",null,[[["int8x8_t",3]],["uint8x8_t",3]]],[5,"vcgeq_s8","","Compare signed greater than or equal",null,[[["int8x16_t",3]],["uint8x16_t",3]]],[5,"vcge_s16","","Compare signed greater than or equal",null,[[["int16x4_t",3]],["uint16x4_t",3]]],[5,"vcgeq_s16","","Compare signed greater than or equal",null,[[["int16x8_t",3]],["uint16x8_t",3]]],[5,"vcge_s32","","Compare signed greater than or equal",null,[[["int32x2_t",3]],["uint32x2_t",3]]],[5,"vcgeq_s32","","Compare signed greater than or equal",null,[[["int32x4_t",3]],["uint32x4_t",3]]],[5,"vcge_u8","","Compare unsigned greater than or equal",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vcgeq_u8","","Compare unsigned greater than or equal",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vcge_u16","","Compare unsigned greater than or equal",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vcgeq_u16","","Compare unsigned greater than or equal",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vcge_u32","","Compare unsigned greater than or equal",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vcgeq_u32","","Compare unsigned greater than or equal",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vcge_f32","","Floating-point compare greater than or equal",null,[[["float32x2_t",3]],["uint32x2_t",3]]],[5,"vcgeq_f32","","Floating-point compare greater than or equal",null,[[["float32x4_t",3]],["uint32x4_t",3]]],[5,"vqsub_u8","","Saturating subtract",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vqsubq_u8","","Saturating subtract",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vqsub_u16","","Saturating subtract",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vqsubq_u16","","Saturating subtract",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vqsub_u32","","Saturating subtract",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vqsubq_u32","","Saturating subtract",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vqsub_s8","","Saturating subtract",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vqsubq_s8","","Saturating subtract",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vqsub_s16","","Saturating subtract",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vqsubq_s16","","Saturating subtract",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vqsub_s32","","Saturating subtract",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vqsubq_s32","","Saturating subtract",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vhadd_u8","","Halving add",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vhaddq_u8","","Halving add",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vhadd_u16","","Halving add",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vhaddq_u16","","Halving add",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vhadd_u32","","Halving add",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vhaddq_u32","","Halving add",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vhadd_s8","","Halving add",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vhaddq_s8","","Halving add",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vhadd_s16","","Halving add",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vhaddq_s16","","Halving add",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vhadd_s32","","Halving add",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vhaddq_s32","","Halving add",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vrhadd_u8","","Rounding halving add",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vrhaddq_u8","","Rounding halving add",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vrhadd_u16","","Rounding halving add",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vrhaddq_u16","","Rounding halving add",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vrhadd_u32","","Rounding halving add",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vrhaddq_u32","","Rounding halving add",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vrhadd_s8","","Rounding halving add",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vrhaddq_s8","","Rounding halving add",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vrhadd_s16","","Rounding halving add",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vrhaddq_s16","","Rounding halving add",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vrhadd_s32","","Rounding halving add",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vrhaddq_s32","","Rounding halving add",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vqadd_u8","","Saturating add",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vqaddq_u8","","Saturating add",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vqadd_u16","","Saturating add",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vqaddq_u16","","Saturating add",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vqadd_u32","","Saturating add",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vqaddq_u32","","Saturating add",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vqadd_s8","","Saturating add",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vqaddq_s8","","Saturating add",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vqadd_s16","","Saturating add",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vqaddq_s16","","Saturating add",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vqadd_s32","","Saturating add",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vqaddq_s32","","Saturating add",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vmul_s8","","Multiply",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vmulq_s8","","Multiply",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vmul_s16","","Multiply",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vmulq_s16","","Multiply",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vmul_s32","","Multiply",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vmulq_s32","","Multiply",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vmul_u8","","Multiply",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vmulq_u8","","Multiply",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vmul_u16","","Multiply",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vmulq_u16","","Multiply",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vmul_u32","","Multiply",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vmulq_u32","","Multiply",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vmul_f32","","Multiply",null,[[["float32x2_t",3]],["float32x2_t",3]]],[5,"vmulq_f32","","Multiply",null,[[["float32x4_t",3]],["float32x4_t",3]]],[5,"vsub_s8","","Subtract",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vsubq_s8","","Subtract",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vsub_s16","","Subtract",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vsubq_s16","","Subtract",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vsub_s32","","Subtract",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vsubq_s32","","Subtract",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vsub_u8","","Subtract",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vsubq_u8","","Subtract",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vsub_u16","","Subtract",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vsubq_u16","","Subtract",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vsub_u32","","Subtract",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vsubq_u32","","Subtract",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vsub_s64","","Subtract",null,[[["int64x1_t",3]],["int64x1_t",3]]],[5,"vsubq_s64","","Subtract",null,[[["int64x2_t",3]],["int64x2_t",3]]],[5,"vsub_u64","","Subtract",null,[[["uint64x1_t",3]],["uint64x1_t",3]]],[5,"vsubq_u64","","Subtract",null,[[["uint64x2_t",3]],["uint64x2_t",3]]],[5,"vsub_f32","","Subtract",null,[[["float32x2_t",3]],["float32x2_t",3]]],[5,"vsubq_f32","","Subtract",null,[[["float32x4_t",3]],["float32x4_t",3]]],[5,"vhsub_u8","","Signed halving subtract",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vhsubq_u8","","Signed halving subtract",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vhsub_u16","","Signed halving subtract",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vhsubq_u16","","Signed halving subtract",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vhsub_u32","","Signed halving subtract",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vhsubq_u32","","Signed halving subtract",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vhsub_s8","","Signed halving subtract",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vhsubq_s8","","Signed halving subtract",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vhsub_s16","","Signed halving subtract",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vhsubq_s16","","Signed halving subtract",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vhsub_s32","","Signed halving subtract",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vhsubq_s32","","Signed halving subtract",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vmax_s8","","Maximum (vector)",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vmaxq_s8","","Maximum (vector)",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vmax_s16","","Maximum (vector)",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vmaxq_s16","","Maximum (vector)",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vmax_s32","","Maximum (vector)",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vmaxq_s32","","Maximum (vector)",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vmax_u8","","Maximum (vector)",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vmaxq_u8","","Maximum (vector)",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vmax_u16","","Maximum (vector)",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vmaxq_u16","","Maximum (vector)",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vmax_u32","","Maximum (vector)",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vmaxq_u32","","Maximum (vector)",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vmax_f32","","Maximum (vector)",null,[[["float32x2_t",3]],["float32x2_t",3]]],[5,"vmaxq_f32","","Maximum (vector)",null,[[["float32x4_t",3]],["float32x4_t",3]]],[5,"vmin_s8","","Minimum (vector)",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vminq_s8","","Minimum (vector)",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vmin_s16","","Minimum (vector)",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vminq_s16","","Minimum (vector)",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vmin_s32","","Minimum (vector)",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vminq_s32","","Minimum (vector)",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vmin_u8","","Minimum (vector)",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vminq_u8","","Minimum (vector)",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vmin_u16","","Minimum (vector)",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vminq_u16","","Minimum (vector)",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vmin_u32","","Minimum (vector)",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vminq_u32","","Minimum (vector)",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vmin_f32","","Minimum (vector)",null,[[["float32x2_t",3]],["float32x2_t",3]]],[5,"vminq_f32","","Minimum (vector)",null,[[["float32x4_t",3]],["float32x4_t",3]]],[3,"int8x8_t","","ARM-specific 64-bit wide vector of eight packed <code>i8</code>.",null,null],[3,"uint8x8_t","","ARM-specific 64-bit wide vector of eight packed <code>u8</code>.",null,null],[3,"poly8x8_t","","ARM-specific 64-bit wide polynomial vector of eight …",null,null],[3,"int16x4_t","","ARM-specific 64-bit wide vector of four packed <code>i16</code>.",null,null],[3,"uint16x4_t","","ARM-specific 64-bit wide vector of four packed <code>u16</code>.",null,null],[3,"poly16x4_t","","ARM-specific 64-bit wide vector of four packed <code>p16</code>.",null,null],[3,"int32x2_t","","ARM-specific 64-bit wide vector of two packed <code>i32</code>.",null,null],[3,"uint32x2_t","","ARM-specific 64-bit wide vector of two packed <code>u32</code>.",null,null],[3,"float32x2_t","","ARM-specific 64-bit wide vector of two packed <code>f32</code>.",null,null],[3,"int64x1_t","","ARM-specific 64-bit wide vector of one packed <code>i64</code>.",null,null],[3,"uint64x1_t","","ARM-specific 64-bit wide vector of one packed <code>u64</code>.",null,null],[3,"poly64x1_t","","ARM-specific 64-bit wide vector of one packed <code>p64</code>.",null,null],[3,"int8x16_t","","ARM-specific 128-bit wide vector of sixteen packed <code>i8</code>.",null,null],[3,"uint8x16_t","","ARM-specific 128-bit wide vector of sixteen packed <code>u8</code>.",null,null],[3,"poly8x16_t","","ARM-specific 128-bit wide vector of sixteen packed <code>p8</code>.",null,null],[3,"int16x8_t","","ARM-specific 128-bit wide vector of eight packed <code>i16</code>.",null,null],[3,"uint16x8_t","","ARM-specific 128-bit wide vector of eight packed <code>u16</code>.",null,null],[3,"poly16x8_t","","ARM-specific 128-bit wide vector of eight packed <code>p16</code>.",null,null],[3,"int32x4_t","","ARM-specific 128-bit wide vector of four packed <code>i32</code>.",null,null],[3,"uint32x4_t","","ARM-specific 128-bit wide vector of four packed <code>u32</code>.",null,null],[3,"float32x4_t","","ARM-specific 128-bit wide vector of four packed <code>f32</code>.",null,null],[3,"int64x2_t","","ARM-specific 128-bit wide vector of two packed <code>i64</code>.",null,null],[3,"uint64x2_t","","ARM-specific 128-bit wide vector of two packed <code>u64</code>.",null,null],[3,"poly64x2_t","","ARM-specific 128-bit wide vector of two packed <code>p64</code>.",null,null],[3,"int8x8x2_t","","ARM-specific type containing two <code>int8x8_t</code> vectors.",null,null],[12,"0","","",129,null],[12,"1","","",129,null],[3,"int8x8x3_t","","ARM-specific type containing three <code>int8x8_t</code> vectors.",null,null],[12,"0","","",130,null],[12,"1","","",130,null],[12,"2","","",130,null],[3,"int8x8x4_t","","ARM-specific type containing four <code>int8x8_t</code> vectors.",null,null],[12,"0","","",131,null],[12,"1","","",131,null],[12,"2","","",131,null],[12,"3","","",131,null],[3,"uint8x8x2_t","","ARM-specific type containing two <code>uint8x8_t</code> vectors.",null,null],[12,"0","","",132,null],[12,"1","","",132,null],[3,"uint8x8x3_t","","ARM-specific type containing three <code>uint8x8_t</code> vectors.",null,null],[12,"0","","",133,null],[12,"1","","",133,null],[12,"2","","",133,null],[3,"uint8x8x4_t","","ARM-specific type containing four <code>uint8x8_t</code> vectors.",null,null],[12,"0","","",134,null],[12,"1","","",134,null],[12,"2","","",134,null],[12,"3","","",134,null],[3,"poly8x8x2_t","","ARM-specific type containing two <code>poly8x8_t</code> vectors.",null,null],[12,"0","","",135,null],[12,"1","","",135,null],[3,"poly8x8x3_t","","ARM-specific type containing three <code>poly8x8_t</code> vectors.",null,null],[12,"0","","",136,null],[12,"1","","",136,null],[12,"2","","",136,null],[3,"poly8x8x4_t","","ARM-specific type containing four <code>poly8x8_t</code> vectors.",null,null],[12,"0","","",137,null],[12,"1","","",137,null],[12,"2","","",137,null],[12,"3","","",137,null],[5,"vld1_lane_s8","","Load one single-element structure to one lane of one …",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vld1q_lane_s8","","Load one single-element structure to one lane of one …",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vld1_lane_s16","","Load one single-element structure to one lane of one …",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vld1q_lane_s16","","Load one single-element structure to one lane of one …",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vld1_lane_s32","","Load one single-element structure to one lane of one …",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vld1q_lane_s32","","Load one single-element structure to one lane of one …",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vld1_lane_s64","","Load one single-element structure to one lane of one …",null,[[["int64x1_t",3]],["int64x1_t",3]]],[5,"vld1q_lane_s64","","Load one single-element structure to one lane of one …",null,[[["int64x2_t",3]],["int64x2_t",3]]],[5,"vld1_lane_u8","","Load one single-element structure to one lane of one …",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vld1q_lane_u8","","Load one single-element structure to one lane of one …",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vld1_lane_u16","","Load one single-element structure to one lane of one …",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vld1q_lane_u16","","Load one single-element structure to one lane of one …",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vld1_lane_u32","","Load one single-element structure to one lane of one …",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vld1q_lane_u32","","Load one single-element structure to one lane of one …",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vld1_lane_u64","","Load one single-element structure to one lane of one …",null,[[["uint64x1_t",3]],["uint64x1_t",3]]],[5,"vld1q_lane_u64","","Load one single-element structure to one lane of one …",null,[[["uint64x2_t",3]],["uint64x2_t",3]]],[5,"vld1_lane_p8","","Load one single-element structure to one lane of one …",null,[[["poly8x8_t",3]],["poly8x8_t",3]]],[5,"vld1q_lane_p8","","Load one single-element structure to one lane of one …",null,[[["poly8x16_t",3]],["poly8x16_t",3]]],[5,"vld1_lane_p16","","Load one single-element structure to one lane of one …",null,[[["poly16x4_t",3]],["poly16x4_t",3]]],[5,"vld1q_lane_p16","","Load one single-element structure to one lane of one …",null,[[["poly16x8_t",3]],["poly16x8_t",3]]],[5,"vld1_lane_f32","","Load one single-element structure to one lane of one …",null,[[["float32x2_t",3]],["float32x2_t",3]]],[5,"vld1q_lane_f32","","Load one single-element structure to one lane of one …",null,[[["float32x4_t",3]],["float32x4_t",3]]],[5,"vld1_dup_s8","","Load one single-element structure and Replicate to all …",null,[[],["int8x8_t",3]]],[5,"vld1q_dup_s8","","Load one single-element structure and Replicate to all …",null,[[],["int8x16_t",3]]],[5,"vld1_dup_s16","","Load one single-element structure and Replicate to all …",null,[[],["int16x4_t",3]]],[5,"vld1q_dup_s16","","Load one single-element structure and Replicate to all …",null,[[],["int16x8_t",3]]],[5,"vld1_dup_s32","","Load one single-element structure and Replicate to all …",null,[[],["int32x2_t",3]]],[5,"vld1q_dup_s32","","Load one single-element structure and Replicate to all …",null,[[],["int32x4_t",3]]],[5,"vld1_dup_s64","","Load one single-element structure and Replicate to all …",null,[[],["int64x1_t",3]]],[5,"vld1q_dup_s64","","Load one single-element structure and Replicate to all …",null,[[],["int64x2_t",3]]],[5,"vld1_dup_u8","","Load one single-element structure and Replicate to all …",null,[[],["uint8x8_t",3]]],[5,"vld1q_dup_u8","","Load one single-element structure and Replicate to all …",null,[[],["uint8x16_t",3]]],[5,"vld1_dup_u16","","Load one single-element structure and Replicate to all …",null,[[],["uint16x4_t",3]]],[5,"vld1q_dup_u16","","Load one single-element structure and Replicate to all …",null,[[],["uint16x8_t",3]]],[5,"vld1_dup_u32","","Load one single-element structure and Replicate to all …",null,[[],["uint32x2_t",3]]],[5,"vld1q_dup_u32","","Load one single-element structure and Replicate to all …",null,[[],["uint32x4_t",3]]],[5,"vld1_dup_u64","","Load one single-element structure and Replicate to all …",null,[[],["uint64x1_t",3]]],[5,"vld1q_dup_u64","","Load one single-element structure and Replicate to all …",null,[[],["uint64x2_t",3]]],[5,"vld1_dup_p8","","Load one single-element structure and Replicate to all …",null,[[],["poly8x8_t",3]]],[5,"vld1q_dup_p8","","Load one single-element structure and Replicate to all …",null,[[],["poly8x16_t",3]]],[5,"vld1_dup_p16","","Load one single-element structure and Replicate to all …",null,[[],["poly16x4_t",3]]],[5,"vld1q_dup_p16","","Load one single-element structure and Replicate to all …",null,[[],["poly16x8_t",3]]],[5,"vld1_dup_f32","","Load one single-element structure and Replicate to all …",null,[[],["float32x2_t",3]]],[5,"vld1q_dup_f32","","Load one single-element structure and Replicate to all …",null,[[],["float32x4_t",3]]],[5,"vabs_s8","","Absolute value (wrapping).",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vabs_s16","","Absolute value (wrapping).",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vabs_s32","","Absolute value (wrapping).",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vabsq_s8","","Absolute value (wrapping).",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vabsq_s16","","Absolute value (wrapping).",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vabsq_s32","","Absolute value (wrapping).",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vpadd_s16","","Add pairwise.",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vpadd_s32","","Add pairwise.",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vpadd_s8","","Add pairwise.",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vpadd_u16","","Add pairwise.",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vpadd_u32","","Add pairwise.",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vpadd_u8","","Add pairwise.",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vqmovn_u64","","Unsigned saturating extract narrow.",null,[[["uint64x2_t",3]],["uint32x2_t",3]]],[5,"vadd_s8","","Vector add.",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vaddq_s8","","Vector add.",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vadd_s16","","Vector add.",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vaddq_s16","","Vector add.",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vadd_s32","","Vector add.",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vaddq_s32","","Vector add.",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vaddq_s64","","Vector add.",null,[[["int64x2_t",3]],["int64x2_t",3]]],[5,"vadd_u8","","Vector add.",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vaddq_u8","","Vector add.",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vadd_u16","","Vector add.",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vaddq_u16","","Vector add.",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vadd_u32","","Vector add.",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vaddq_u32","","Vector add.",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vaddq_u64","","Vector add.",null,[[["uint64x2_t",3]],["uint64x2_t",3]]],[5,"vadd_f32","","Vector add.",null,[[["float32x2_t",3]],["float32x2_t",3]]],[5,"vaddq_f32","","Vector add.",null,[[["float32x4_t",3]],["float32x4_t",3]]],[5,"vaddl_s8","","Signed Add Long (vector).",null,[[["int8x8_t",3]],["int16x8_t",3]]],[5,"vaddl_s16","","Signed Add Long (vector).",null,[[["int16x4_t",3]],["int32x4_t",3]]],[5,"vaddl_s32","","Signed Add Long (vector).",null,[[["int32x2_t",3]],["int64x2_t",3]]],[5,"vaddl_u8","","Unsigned Add Long (vector).",null,[[["uint8x8_t",3]],["uint16x8_t",3]]],[5,"vaddl_u16","","Unsigned Add Long (vector).",null,[[["uint16x4_t",3]],["uint32x4_t",3]]],[5,"vaddl_u32","","Unsigned Add Long (vector).",null,[[["uint32x2_t",3]],["uint64x2_t",3]]],[5,"vaddl_high_s8","","Signed Add Long (vector, high half).",null,[[["int8x16_t",3]],["int16x8_t",3]]],[5,"vaddl_high_s16","","Signed Add Long (vector, high half).",null,[[["int16x8_t",3]],["int32x4_t",3]]],[5,"vaddl_high_s32","","Signed Add Long (vector, high half).",null,[[["int32x4_t",3]],["int64x2_t",3]]],[5,"vaddl_high_u8","","Unsigned Add Long (vector, high half).",null,[[["uint8x16_t",3]],["uint16x8_t",3]]],[5,"vaddl_high_u16","","Unsigned Add Long (vector, high half).",null,[[["uint16x8_t",3]],["uint32x4_t",3]]],[5,"vaddl_high_u32","","Unsigned Add Long (vector, high half).",null,[[["uint32x4_t",3]],["uint64x2_t",3]]],[5,"vaddw_s8","","Signed Add Wide.",null,[[["int16x8_t",3],["int8x8_t",3]],["int16x8_t",3]]],[5,"vaddw_s16","","Signed Add Wide.",null,[[["int32x4_t",3],["int16x4_t",3]],["int32x4_t",3]]],[5,"vaddw_s32","","Signed Add Wide.",null,[[["int64x2_t",3],["int32x2_t",3]],["int64x2_t",3]]],[5,"vaddw_u8","","Unsigned Add Wide.",null,[[["uint16x8_t",3],["uint8x8_t",3]],["uint16x8_t",3]]],[5,"vaddw_u16","","Unsigned Add Wide.",null,[[["uint16x4_t",3],["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vaddw_u32","","Unsigned Add Wide.",null,[[["uint64x2_t",3],["uint32x2_t",3]],["uint64x2_t",3]]],[5,"vaddw_high_s8","","Signed Add Wide (high half).",null,[[["int16x8_t",3],["int8x16_t",3]],["int16x8_t",3]]],[5,"vaddw_high_s16","","Signed Add Wide (high half).",null,[[["int16x8_t",3],["int32x4_t",3]],["int32x4_t",3]]],[5,"vaddw_high_s32","","Signed Add Wide (high half).",null,[[["int64x2_t",3],["int32x4_t",3]],["int64x2_t",3]]],[5,"vaddw_high_u8","","Unsigned Add Wide (high half).",null,[[["uint16x8_t",3],["uint8x16_t",3]],["uint16x8_t",3]]],[5,"vaddw_high_u16","","Unsigned Add Wide (high half).",null,[[["uint16x8_t",3],["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vaddw_high_u32","","Unsigned Add Wide (high half).",null,[[["uint64x2_t",3],["uint32x4_t",3]],["uint64x2_t",3]]],[5,"vaddhn_s16","","Add returning High Narrow.",null,[[["int16x8_t",3]],["int8x8_t",3]]],[5,"vaddhn_s32","","Add returning High Narrow.",null,[[["int32x4_t",3]],["int16x4_t",3]]],[5,"vaddhn_s64","","Add returning High Narrow.",null,[[["int64x2_t",3]],["int32x2_t",3]]],[5,"vaddhn_u16","","Add returning High Narrow.",null,[[["uint16x8_t",3]],["uint8x8_t",3]]],[5,"vaddhn_u32","","Add returning High Narrow.",null,[[["uint32x4_t",3]],["uint16x4_t",3]]],[5,"vaddhn_u64","","Add returning High Narrow.",null,[[["uint64x2_t",3]],["uint32x2_t",3]]],[5,"vaddhn_high_s16","","Add returning High Narrow (high half).",null,[[["int16x8_t",3],["int8x8_t",3]],["int8x16_t",3]]],[5,"vaddhn_high_s32","","Add returning High Narrow (high half).",null,[[["int16x4_t",3],["int32x4_t",3]],["int16x8_t",3]]],[5,"vaddhn_high_s64","","Add returning High Narrow (high half).",null,[[["int64x2_t",3],["int32x2_t",3]],["int32x4_t",3]]],[5,"vaddhn_high_u16","","Add returning High Narrow (high half).",null,[[["uint16x8_t",3],["uint8x8_t",3]],["uint8x16_t",3]]],[5,"vaddhn_high_u32","","Add returning High Narrow (high half).",null,[[["uint16x4_t",3],["uint32x4_t",3]],["uint16x8_t",3]]],[5,"vaddhn_high_u64","","Add returning High Narrow (high half).",null,[[["uint32x2_t",3],["uint64x2_t",3]],["uint32x4_t",3]]],[5,"vraddhn_s16","","Rounding Add returning High Narrow.",null,[[["int16x8_t",3]],["int8x8_t",3]]],[5,"vraddhn_s32","","Rounding Add returning High Narrow.",null,[[["int32x4_t",3]],["int16x4_t",3]]],[5,"vraddhn_s64","","Rounding Add returning High Narrow.",null,[[["int64x2_t",3]],["int32x2_t",3]]],[5,"vraddhn_u16","","Rounding Add returning High Narrow.",null,[[["uint16x8_t",3]],["uint8x8_t",3]]],[5,"vraddhn_u32","","Rounding Add returning High Narrow.",null,[[["uint32x4_t",3]],["uint16x4_t",3]]],[5,"vraddhn_u64","","Rounding Add returning High Narrow.",null,[[["uint64x2_t",3]],["uint32x2_t",3]]],[5,"vraddhn_high_s16","","Rounding Add returning High Narrow (high half).",null,[[["int16x8_t",3],["int8x8_t",3]],["int8x16_t",3]]],[5,"vraddhn_high_s32","","Rounding Add returning High Narrow (high half).",null,[[["int16x4_t",3],["int32x4_t",3]],["int16x8_t",3]]],[5,"vraddhn_high_s64","","Rounding Add returning High Narrow (high half).",null,[[["int64x2_t",3],["int32x2_t",3]],["int32x4_t",3]]],[5,"vraddhn_high_u16","","Rounding Add returning High Narrow (high half).",null,[[["uint16x8_t",3],["uint8x8_t",3]],["uint8x16_t",3]]],[5,"vraddhn_high_u32","","Rounding Add returning High Narrow (high half).",null,[[["uint16x4_t",3],["uint32x4_t",3]],["uint16x8_t",3]]],[5,"vraddhn_high_u64","","Rounding Add returning High Narrow (high half).",null,[[["uint32x2_t",3],["uint64x2_t",3]],["uint32x4_t",3]]],[5,"vpaddl_s8","","Signed Add Long Pairwise.",null,[[["int8x8_t",3]],["int16x4_t",3]]],[5,"vpaddl_s16","","Signed Add Long Pairwise.",null,[[["int16x4_t",3]],["int32x2_t",3]]],[5,"vpaddl_s32","","Signed Add Long Pairwise.",null,[[["int32x2_t",3]],["int64x1_t",3]]],[5,"vpaddlq_s8","","Signed Add Long Pairwise.",null,[[["int8x16_t",3]],["int16x8_t",3]]],[5,"vpaddlq_s16","","Signed Add Long Pairwise.",null,[[["int16x8_t",3]],["int32x4_t",3]]],[5,"vpaddlq_s32","","Signed Add Long Pairwise.",null,[[["int32x4_t",3]],["int64x2_t",3]]],[5,"vpaddl_u8","","Unsigned Add Long Pairwise.",null,[[["uint8x8_t",3]],["uint16x4_t",3]]],[5,"vpaddl_u16","","Unsigned Add Long Pairwise.",null,[[["uint16x4_t",3]],["uint32x2_t",3]]],[5,"vpaddl_u32","","Unsigned Add Long Pairwise.",null,[[["uint32x2_t",3]],["uint64x1_t",3]]],[5,"vpaddlq_u8","","Unsigned Add Long Pairwise.",null,[[["uint8x16_t",3]],["uint16x8_t",3]]],[5,"vpaddlq_u16","","Unsigned Add Long Pairwise.",null,[[["uint16x8_t",3]],["uint32x4_t",3]]],[5,"vpaddlq_u32","","Unsigned Add Long Pairwise.",null,[[["uint32x4_t",3]],["uint64x2_t",3]]],[5,"vpadal_s8","","Signed Add and Accumulate Long Pairwise.",null,[[["int16x4_t",3],["int8x8_t",3]],["int16x4_t",3]]],[5,"vpadal_s16","","Signed Add and Accumulate Long Pairwise.",null,[[["int32x2_t",3],["int16x4_t",3]],["int32x2_t",3]]],[5,"vpadal_s32","","Signed Add and Accumulate Long Pairwise.",null,[[["int64x1_t",3],["int32x2_t",3]],["int64x1_t",3]]],[5,"vpadalq_s8","","Signed Add and Accumulate Long Pairwise.",null,[[["int16x8_t",3],["int8x16_t",3]],["int16x8_t",3]]],[5,"vpadalq_s16","","Signed Add and Accumulate Long Pairwise.",null,[[["int16x8_t",3],["int32x4_t",3]],["int32x4_t",3]]],[5,"vpadalq_s32","","Signed Add and Accumulate Long Pairwise.",null,[[["int64x2_t",3],["int32x4_t",3]],["int64x2_t",3]]],[5,"vpadal_u8","","Unsigned Add and Accumulate Long Pairwise.",null,[[["uint16x4_t",3],["uint8x8_t",3]],["uint16x4_t",3]]],[5,"vpadal_u16","","Unsigned Add and Accumulate Long Pairwise.",null,[[["uint32x2_t",3],["uint16x4_t",3]],["uint32x2_t",3]]],[5,"vpadal_u32","","Unsigned Add and Accumulate Long Pairwise.",null,[[["uint32x2_t",3],["uint64x1_t",3]],["uint64x1_t",3]]],[5,"vpadalq_u8","","Unsigned Add and Accumulate Long Pairwise.",null,[[["uint16x8_t",3],["uint8x16_t",3]],["uint16x8_t",3]]],[5,"vpadalq_u16","","Unsigned Add and Accumulate Long Pairwise.",null,[[["uint16x8_t",3],["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vpadalq_u32","","Unsigned Add and Accumulate Long Pairwise.",null,[[["uint64x2_t",3],["uint32x4_t",3]],["uint64x2_t",3]]],[5,"vmovn_s16","","Vector narrow integer.",null,[[["int16x8_t",3]],["int8x8_t",3]]],[5,"vmovn_s32","","Vector narrow integer.",null,[[["int32x4_t",3]],["int16x4_t",3]]],[5,"vmovn_s64","","Vector narrow integer.",null,[[["int64x2_t",3]],["int32x2_t",3]]],[5,"vmovn_u16","","Vector narrow integer.",null,[[["uint16x8_t",3]],["uint8x8_t",3]]],[5,"vmovn_u32","","Vector narrow integer.",null,[[["uint32x4_t",3]],["uint16x4_t",3]]],[5,"vmovn_u64","","Vector narrow integer.",null,[[["uint64x2_t",3]],["uint32x2_t",3]]],[5,"vmovl_s8","","Vector long move.",null,[[["int8x8_t",3]],["int16x8_t",3]]],[5,"vmovl_s16","","Vector long move.",null,[[["int16x4_t",3]],["int32x4_t",3]]],[5,"vmovl_s32","","Vector long move.",null,[[["int32x2_t",3]],["int64x2_t",3]]],[5,"vmovl_u8","","Vector long move.",null,[[["uint8x8_t",3]],["uint16x8_t",3]]],[5,"vmovl_u16","","Vector long move.",null,[[["uint16x4_t",3]],["uint32x4_t",3]]],[5,"vmovl_u32","","Vector long move.",null,[[["uint32x2_t",3]],["uint64x2_t",3]]],[5,"vrsqrte_f32","","Reciprocal square-root estimate.",null,[[["float32x2_t",3]],["float32x2_t",3]]],[5,"vmvn_s8","","Vector bitwise not.",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vmvnq_s8","","Vector bitwise not.",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vmvn_s16","","Vector bitwise not.",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vmvnq_s16","","Vector bitwise not.",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vmvn_s32","","Vector bitwise not.",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vmvnq_s32","","Vector bitwise not.",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vmvn_u8","","Vector bitwise not.",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vmvnq_u8","","Vector bitwise not.",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vmvn_u16","","Vector bitwise not.",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vmvnq_u16","","Vector bitwise not.",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vmvn_u32","","Vector bitwise not.",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vmvnq_u32","","Vector bitwise not.",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vmvn_p8","","Vector bitwise not.",null,[[["poly8x8_t",3]],["poly8x8_t",3]]],[5,"vmvnq_p8","","Vector bitwise not.",null,[[["poly8x16_t",3]],["poly8x16_t",3]]],[5,"vpmin_s8","","Folding minimum of adjacent pairs",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vpmin_s16","","Folding minimum of adjacent pairs",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vpmin_s32","","Folding minimum of adjacent pairs",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vpmin_u8","","Folding minimum of adjacent pairs",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vpmin_u16","","Folding minimum of adjacent pairs",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vpmin_u32","","Folding minimum of adjacent pairs",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vpmin_f32","","Folding minimum of adjacent pairs",null,[[["float32x2_t",3]],["float32x2_t",3]]],[5,"vpmax_s8","","Folding maximum of adjacent pairs",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vpmax_s16","","Folding maximum of adjacent pairs",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vpmax_s32","","Folding maximum of adjacent pairs",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vpmax_u8","","Folding maximum of adjacent pairs",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vpmax_u16","","Folding maximum of adjacent pairs",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vpmax_u32","","Folding maximum of adjacent pairs",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vpmax_f32","","Folding maximum of adjacent pairs",null,[[["float32x2_t",3]],["float32x2_t",3]]],[5,"vgetq_lane_u64","","Move vector element to general-purpose register",null,[[["uint64x2_t",3]]]],[5,"vget_lane_u64","","Move vector element to general-purpose register",null,[[["uint64x1_t",3]]]],[5,"vgetq_lane_u16","","Move vector element to general-purpose register",null,[[["uint16x8_t",3]]]],[5,"vgetq_lane_u32","","Move vector element to general-purpose register",null,[[["uint32x4_t",3]]]],[5,"vgetq_lane_s32","","Move vector element to general-purpose register",null,[[["int32x4_t",3]]]],[5,"vget_lane_u8","","Move vector element to general-purpose register",null,[[["uint8x8_t",3]]]],[5,"vdupq_n_s8","","Duplicate vector element to vector or scalar",null,[[],["int8x16_t",3]]],[5,"vdupq_n_u8","","Duplicate vector element to vector or scalar",null,[[],["uint8x16_t",3]]],[5,"vmovq_n_u8","","Duplicate vector element to vector or scalar",null,[[],["uint8x16_t",3]]],[5,"vreinterpret_u64_u32","","Vector reinterpret cast operation",null,[[["uint32x2_t",3]],["uint64x1_t",3]]],[5,"vreinterpretq_s8_u8","","Vector reinterpret cast operation",null,[[["uint8x16_t",3]],["int8x16_t",3]]],[5,"vreinterpretq_u16_u8","","Vector reinterpret cast operation",null,[[["uint8x16_t",3]],["uint16x8_t",3]]],[5,"vreinterpretq_u32_u8","","Vector reinterpret cast operation",null,[[["uint8x16_t",3]],["uint32x4_t",3]]],[5,"vreinterpretq_u64_u8","","Vector reinterpret cast operation",null,[[["uint8x16_t",3]],["uint64x2_t",3]]],[5,"vreinterpretq_u8_s8","","Vector reinterpret cast operation",null,[[["int8x16_t",3]],["uint8x16_t",3]]],[5,"vshrq_n_u8","","Unsigned shift right",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vshlq_n_u8","","Shift right",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vextq_s8","","Extract vector from pair of vectors",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vextq_u8","","Extract vector from pair of vectors",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vcnt_s8","","Population count per byte.",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vcntq_s8","","Population count per byte.",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vcnt_u8","","Population count per byte.",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vcntq_u8","","Population count per byte.",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vcnt_p8","","Population count per byte.",null,[[["poly8x8_t",3]],["poly8x8_t",3]]],[5,"vcntq_p8","","Population count per byte.",null,[[["poly8x16_t",3]],["poly8x16_t",3]]],[5,"vrev16_s8","","Reversing vector elements (swap endianness)",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vrev16q_s8","","Reversing vector elements (swap endianness)",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vrev16_u8","","Reversing vector elements (swap endianness)",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vrev16q_u8","","Reversing vector elements (swap endianness)",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vrev16_p8","","Reversing vector elements (swap endianness)",null,[[["poly8x8_t",3]],["poly8x8_t",3]]],[5,"vrev16q_p8","","Reversing vector elements (swap endianness)",null,[[["poly8x16_t",3]],["poly8x16_t",3]]],[5,"vrev32_s8","","Reversing vector elements (swap endianness)",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vrev32q_s8","","Reversing vector elements (swap endianness)",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vrev32_u8","","Reversing vector elements (swap endianness)",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vrev32q_u8","","Reversing vector elements (swap endianness)",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vrev32_u16","","Reversing vector elements (swap endianness)",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vrev32q_u16","","Reversing vector elements (swap endianness)",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vrev32_p8","","Reversing vector elements (swap endianness)",null,[[["poly8x8_t",3]],["poly8x8_t",3]]],[5,"vrev32q_p8","","Reversing vector elements (swap endianness)",null,[[["poly8x16_t",3]],["poly8x16_t",3]]],[5,"vrev64_s8","","Reversing vector elements (swap endianness)",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vrev64q_s8","","Reversing vector elements (swap endianness)",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vrev64_s16","","Reversing vector elements (swap endianness)",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vrev64q_s16","","Reversing vector elements (swap endianness)",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vrev64_s32","","Reversing vector elements (swap endianness)",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vrev64q_s32","","Reversing vector elements (swap endianness)",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vrev64_u8","","Reversing vector elements (swap endianness)",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vrev64q_u8","","Reversing vector elements (swap endianness)",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vrev64_u16","","Reversing vector elements (swap endianness)",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vrev64q_u16","","Reversing vector elements (swap endianness)",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vrev64_u32","","Reversing vector elements (swap endianness)",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vrev64q_u32","","Reversing vector elements (swap endianness)",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vrev64_f32","","Reversing vector elements (swap endianness)",null,[[["float32x2_t",3]],["float32x2_t",3]]],[5,"vrev64q_f32","","Reversing vector elements (swap endianness)",null,[[["float32x4_t",3]],["float32x4_t",3]]],[5,"vrev64_p8","","Reversing vector elements (swap endianness)",null,[[["poly8x8_t",3]],["poly8x8_t",3]]],[5,"vrev64q_p8","","Reversing vector elements (swap endianness)",null,[[["poly8x16_t",3]],["poly8x16_t",3]]],[5,"vrev64_p16","","Reversing vector elements (swap endianness)",null,[[["poly16x4_t",3]],["poly16x4_t",3]]],[5,"vrev64q_p16","","Reversing vector elements (swap endianness)",null,[[["poly16x8_t",3]],["poly16x8_t",3]]],[3,"SY","","Full system is the required shareability domain, reads …",null,null],[5,"__dmb","","Generates a DMB (data memory barrier) instruction or …",null,[[]]],[5,"__dsb","","Generates a DSB (data synchronization barrier) …",null,[[]]],[5,"__isb","","Generates an ISB (instruction synchronization barrier) …",null,[[]]],[5,"__nop","","Generates an unspecified no-op instruction.",null,[[]]],[3,"APSR","","Application Program Status Register",null,null],[5,"__rsr","","Reads a 32-bit system register",null,[[]]],[5,"__rsrp","","Reads a system register containing an address",null,[[]]],[5,"__wsr","","Writes a 32-bit system register",null,[[]]],[5,"__wsrp","","Writes a system register containing an address",null,[[]]],[0,"aarch64","core::arch","Platform-specific intrinsics for the <code>aarch64</code> platform.",null,null],[5,"_rev_u64","core::arch::aarch64","Reverse the order of the bytes.",null,[[]]],[5,"_clz_u64","","Count Leading Zeros.",null,[[]]],[5,"_rbit_u64","","Reverse the bit order.",null,[[]]],[5,"_cls_u32","","Counts the leading most significant bits set.",null,[[]]],[5,"_cls_u64","","Counts the leading most significant bits set.",null,[[]]],[5,"vceq_u64","","Compare bitwise Equal (vector)",null,[[["uint64x1_t",3]],["uint64x1_t",3]]],[5,"vceqq_u64","","Compare bitwise Equal (vector)",null,[[["uint64x2_t",3]],["uint64x2_t",3]]],[5,"vceq_s64","","Compare bitwise Equal (vector)",null,[[["int64x1_t",3]],["uint64x1_t",3]]],[5,"vceqq_s64","","Compare bitwise Equal (vector)",null,[[["int64x2_t",3]],["uint64x2_t",3]]],[5,"vceq_p64","","Compare bitwise Equal (vector)",null,[[["poly64x1_t",3]],["uint64x1_t",3]]],[5,"vceqq_p64","","Compare bitwise Equal (vector)",null,[[["poly64x2_t",3]],["uint64x2_t",3]]],[5,"vceq_f64","","Floating-point compare equal",null,[[["float64x1_t",3]],["uint64x1_t",3]]],[5,"vceqq_f64","","Floating-point compare equal",null,[[["float64x2_t",3]],["uint64x2_t",3]]],[5,"vcgt_s64","","Compare signed greater than",null,[[["int64x1_t",3]],["uint64x1_t",3]]],[5,"vcgtq_s64","","Compare signed greater than",null,[[["int64x2_t",3]],["uint64x2_t",3]]],[5,"vcgt_u64","","Compare unsigned highe",null,[[["uint64x1_t",3]],["uint64x1_t",3]]],[5,"vcgtq_u64","","Compare unsigned highe",null,[[["uint64x2_t",3]],["uint64x2_t",3]]],[5,"vcgt_f64","","Floating-point compare greater than",null,[[["float64x1_t",3]],["uint64x1_t",3]]],[5,"vcgtq_f64","","Floating-point compare greater than",null,[[["float64x2_t",3]],["uint64x2_t",3]]],[5,"vclt_s64","","Compare signed less than",null,[[["int64x1_t",3]],["uint64x1_t",3]]],[5,"vcltq_s64","","Compare signed less than",null,[[["int64x2_t",3]],["uint64x2_t",3]]],[5,"vclt_u64","","Compare unsigned less than",null,[[["uint64x1_t",3]],["uint64x1_t",3]]],[5,"vcltq_u64","","Compare unsigned less than",null,[[["uint64x2_t",3]],["uint64x2_t",3]]],[5,"vclt_f64","","Floating-point compare less than",null,[[["float64x1_t",3]],["uint64x1_t",3]]],[5,"vcltq_f64","","Floating-point compare less than",null,[[["float64x2_t",3]],["uint64x2_t",3]]],[5,"vcle_s64","","Compare signed less than or equal",null,[[["int64x1_t",3]],["uint64x1_t",3]]],[5,"vcleq_s64","","Compare signed less than or equal",null,[[["int64x2_t",3]],["uint64x2_t",3]]],[5,"vcle_u64","","Compare unsigned less than or equal",null,[[["uint64x1_t",3]],["uint64x1_t",3]]],[5,"vcleq_u64","","Compare unsigned less than or equal",null,[[["uint64x2_t",3]],["uint64x2_t",3]]],[5,"vcle_f64","","Floating-point compare less than or equal",null,[[["float64x1_t",3]],["uint64x1_t",3]]],[5,"vcleq_f64","","Floating-point compare less than or equal",null,[[["float64x2_t",3]],["uint64x2_t",3]]],[5,"vcge_s64","","Compare signed greater than or equal",null,[[["int64x1_t",3]],["uint64x1_t",3]]],[5,"vcgeq_s64","","Compare signed greater than or equal",null,[[["int64x2_t",3]],["uint64x2_t",3]]],[5,"vcge_u64","","Compare unsigned greater than or equal",null,[[["uint64x1_t",3]],["uint64x1_t",3]]],[5,"vcgeq_u64","","Compare unsigned greater than or equal",null,[[["uint64x2_t",3]],["uint64x2_t",3]]],[5,"vcge_f64","","Floating-point compare greater than or equal",null,[[["float64x1_t",3]],["uint64x1_t",3]]],[5,"vcgeq_f64","","Floating-point compare greater than or equal",null,[[["float64x2_t",3]],["uint64x2_t",3]]],[5,"vmul_f64","","Multiply",null,[[["float64x1_t",3]],["float64x1_t",3]]],[5,"vmulq_f64","","Multiply",null,[[["float64x2_t",3]],["float64x2_t",3]]],[5,"vsub_f64","","Subtract",null,[[["float64x1_t",3]],["float64x1_t",3]]],[5,"vsubq_f64","","Subtract",null,[[["float64x2_t",3]],["float64x2_t",3]]],[5,"vmax_f64","","Maximum (vector)",null,[[["float64x1_t",3]],["float64x1_t",3]]],[5,"vmaxq_f64","","Maximum (vector)",null,[[["float64x2_t",3]],["float64x2_t",3]]],[5,"vmin_f64","","Minimum (vector)",null,[[["float64x1_t",3]],["float64x1_t",3]]],[5,"vminq_f64","","Minimum (vector)",null,[[["float64x2_t",3]],["float64x2_t",3]]],[3,"float64x1_t","","ARM-specific 64-bit wide vector of one packed <code>f64</code>.",null,null],[3,"float64x2_t","","ARM-specific 128-bit wide vector of two packed <code>f64</code>.",null,null],[3,"int8x16x2_t","","ARM-specific type containing two <code>int8x16_t</code> vectors.",null,null],[12,"0","","",138,null],[12,"1","","",138,null],[3,"int8x16x3_t","","ARM-specific type containing three <code>int8x16_t</code> vectors.",null,null],[12,"0","","",139,null],[12,"1","","",139,null],[12,"2","","",139,null],[3,"int8x16x4_t","","ARM-specific type containing four <code>int8x16_t</code> vectors.",null,null],[12,"0","","",140,null],[12,"1","","",140,null],[12,"2","","",140,null],[12,"3","","",140,null],[3,"uint8x16x2_t","","ARM-specific type containing two <code>uint8x16_t</code> vectors.",null,null],[12,"0","","",141,null],[12,"1","","",141,null],[3,"uint8x16x3_t","","ARM-specific type containing three <code>uint8x16_t</code> vectors.",null,null],[12,"0","","",142,null],[12,"1","","",142,null],[12,"2","","",142,null],[3,"uint8x16x4_t","","ARM-specific type containing four <code>uint8x16_t</code> vectors.",null,null],[12,"0","","",143,null],[12,"1","","",143,null],[12,"2","","",143,null],[12,"3","","",143,null],[3,"poly8x16x2_t","","ARM-specific type containing two <code>poly8x16_t</code> vectors.",null,null],[12,"0","","",144,null],[12,"1","","",144,null],[3,"poly8x16x3_t","","ARM-specific type containing three <code>poly8x16_t</code> vectors.",null,null],[12,"0","","",145,null],[12,"1","","",145,null],[12,"2","","",145,null],[3,"poly8x16x4_t","","ARM-specific type containing four <code>poly8x16_t</code> vectors.",null,null],[12,"0","","",146,null],[12,"1","","",146,null],[12,"2","","",146,null],[12,"3","","",146,null],[5,"vld1_s8","","Load multiple single-element structures to one, two, …",null,[[],["int8x8_t",3]]],[5,"vld1q_s8","","Load multiple single-element structures to one, two, …",null,[[],["int8x16_t",3]]],[5,"vld1_s16","","Load multiple single-element structures to one, two, …",null,[[],["int16x4_t",3]]],[5,"vld1q_s16","","Load multiple single-element structures to one, two, …",null,[[],["int16x8_t",3]]],[5,"vld1_s32","","Load multiple single-element structures to one, two, …",null,[[],["int32x2_t",3]]],[5,"vld1q_s32","","Load multiple single-element structures to one, two, …",null,[[],["int32x4_t",3]]],[5,"vld1_s64","","Load multiple single-element structures to one, two, …",null,[[],["int64x1_t",3]]],[5,"vld1q_s64","","Load multiple single-element structures to one, two, …",null,[[],["int64x2_t",3]]],[5,"vld1_u8","","Load multiple single-element structures to one, two, …",null,[[],["uint8x8_t",3]]],[5,"vld1q_u8","","Load multiple single-element structures to one, two, …",null,[[],["uint8x16_t",3]]],[5,"vld1_u16","","Load multiple single-element structures to one, two, …",null,[[],["uint16x4_t",3]]],[5,"vld1q_u16","","Load multiple single-element structures to one, two, …",null,[[],["uint16x8_t",3]]],[5,"vld1_u32","","Load multiple single-element structures to one, two, …",null,[[],["uint32x2_t",3]]],[5,"vld1q_u32","","Load multiple single-element structures to one, two, …",null,[[],["uint32x4_t",3]]],[5,"vld1_u64","","Load multiple single-element structures to one, two, …",null,[[],["uint64x1_t",3]]],[5,"vld1q_u64","","Load multiple single-element structures to one, two, …",null,[[],["uint64x2_t",3]]],[5,"vld1_p8","","Load multiple single-element structures to one, two, …",null,[[],["poly8x8_t",3]]],[5,"vld1q_p8","","Load multiple single-element structures to one, two, …",null,[[],["poly8x16_t",3]]],[5,"vld1_p16","","Load multiple single-element structures to one, two, …",null,[[],["poly16x4_t",3]]],[5,"vld1q_p16","","Load multiple single-element structures to one, two, …",null,[[],["poly16x8_t",3]]],[5,"vld1_f32","","Load multiple single-element structures to one, two, …",null,[[],["float32x2_t",3]]],[5,"vld1q_f32","","Load multiple single-element structures to one, two, …",null,[[],["float32x4_t",3]]],[5,"vld1_f64","","Load multiple single-element structures to one, two, …",null,[[],["float64x1_t",3]]],[5,"vld1q_f64","","Load multiple single-element structures to one, two, …",null,[[],["float64x2_t",3]]],[5,"vabsd_s64","","Absolute Value (wrapping).",null,[[]]],[5,"vabs_s64","","Absolute Value (wrapping).",null,[[["int64x1_t",3]],["int64x1_t",3]]],[5,"vabsq_s64","","Absolute Value (wrapping).",null,[[["int64x2_t",3]],["int64x2_t",3]]],[5,"vuqadd_s8","","Signed saturating Accumulate of Unsigned value.",null,[[["uint8x8_t",3],["int8x8_t",3]],["int8x8_t",3]]],[5,"vuqaddq_s8","","Signed saturating Accumulate of Unsigned value.",null,[[["int8x16_t",3],["uint8x16_t",3]],["int8x16_t",3]]],[5,"vuqadd_s16","","Signed saturating Accumulate of Unsigned value.",null,[[["uint16x4_t",3],["int16x4_t",3]],["int16x4_t",3]]],[5,"vuqaddq_s16","","Signed saturating Accumulate of Unsigned value.",null,[[["uint16x8_t",3],["int16x8_t",3]],["int16x8_t",3]]],[5,"vuqadd_s32","","Signed saturating Accumulate of Unsigned value.",null,[[["uint32x2_t",3],["int32x2_t",3]],["int32x2_t",3]]],[5,"vuqaddq_s32","","Signed saturating Accumulate of Unsigned value.",null,[[["uint32x4_t",3],["int32x4_t",3]],["int32x4_t",3]]],[5,"vuqadd_s64","","Signed saturating Accumulate of Unsigned value.",null,[[["int64x1_t",3],["uint64x1_t",3]],["int64x1_t",3]]],[5,"vuqaddq_s64","","Signed saturating Accumulate of Unsigned value.",null,[[["int64x2_t",3],["uint64x2_t",3]],["int64x2_t",3]]],[5,"vsqadd_u8","","Unsigned saturating Accumulate of Signed value.",null,[[["uint8x8_t",3],["int8x8_t",3]],["uint8x8_t",3]]],[5,"vsqaddq_u8","","Unsigned saturating Accumulate of Signed value.",null,[[["int8x16_t",3],["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vsqadd_u16","","Unsigned saturating Accumulate of Signed value.",null,[[["uint16x4_t",3],["int16x4_t",3]],["uint16x4_t",3]]],[5,"vsqaddq_u16","","Unsigned saturating Accumulate of Signed value.",null,[[["uint16x8_t",3],["int16x8_t",3]],["uint16x8_t",3]]],[5,"vsqadd_u32","","Unsigned saturating Accumulate of Signed value.",null,[[["uint32x2_t",3],["int32x2_t",3]],["uint32x2_t",3]]],[5,"vsqaddq_u32","","Unsigned saturating Accumulate of Signed value.",null,[[["uint32x4_t",3],["int32x4_t",3]],["uint32x4_t",3]]],[5,"vsqadd_u64","","Unsigned saturating Accumulate of Signed value.",null,[[["uint64x1_t",3],["int64x1_t",3]],["uint64x1_t",3]]],[5,"vsqaddq_u64","","Unsigned saturating Accumulate of Signed value.",null,[[["uint64x2_t",3],["int64x2_t",3]],["uint64x2_t",3]]],[5,"vpaddq_s16","","Add pairwise",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vpaddq_u16","","Add pairwise",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vpaddq_s32","","Add pairwise",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vpaddq_u32","","Add pairwise",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vpaddq_s8","","Add pairwise",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vpaddq_u8","","Add pairwise",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vpaddd_s64","","Add pairwise",null,[[["int64x2_t",3]]]],[5,"vpaddd_u64","","Add pairwise",null,[[["uint64x2_t",3]]]],[5,"vaddv_s16","","Add across vector",null,[[["int16x4_t",3]]]],[5,"vaddv_s32","","Add across vector",null,[[["int32x2_t",3]]]],[5,"vaddv_s8","","Add across vector",null,[[["int8x8_t",3]]]],[5,"vaddv_u16","","Add across vector",null,[[["uint16x4_t",3]]]],[5,"vaddv_u32","","Add across vector",null,[[["uint32x2_t",3]]]],[5,"vaddv_u8","","Add across vector",null,[[["uint8x8_t",3]]]],[5,"vaddvq_s16","","Add across vector",null,[[["int16x8_t",3]]]],[5,"vaddvq_s32","","Add across vector",null,[[["int32x4_t",3]]]],[5,"vaddvq_s8","","Add across vector",null,[[["int8x16_t",3]]]],[5,"vaddvq_u16","","Add across vector",null,[[["uint16x8_t",3]]]],[5,"vaddvq_u32","","Add across vector",null,[[["uint32x4_t",3]]]],[5,"vaddvq_u8","","Add across vector",null,[[["uint8x16_t",3]]]],[5,"vaddvq_s64","","Add across vector",null,[[["int64x2_t",3]]]],[5,"vaddvq_u64","","Add across vector",null,[[["uint64x2_t",3]]]],[5,"vmull_p64","","Polynomial multiply long",null,[[]]],[5,"vadd_f64","","Vector add.",null,[[["float64x1_t",3]],["float64x1_t",3]]],[5,"vaddq_f64","","Vector add.",null,[[["float64x2_t",3]],["float64x2_t",3]]],[5,"vadd_s64","","Vector add.",null,[[["int64x1_t",3]],["int64x1_t",3]]],[5,"vadd_u64","","Vector add.",null,[[["uint64x1_t",3]],["uint64x1_t",3]]],[5,"vaddd_s64","","Vector add.",null,[[]]],[5,"vaddd_u64","","Vector add.",null,[[]]],[5,"vmaxv_s8","","Horizontal vector max.",null,[[["int8x8_t",3]]]],[5,"vmaxvq_s8","","Horizontal vector max.",null,[[["int8x16_t",3]]]],[5,"vmaxv_s16","","Horizontal vector max.",null,[[["int16x4_t",3]]]],[5,"vmaxvq_s16","","Horizontal vector max.",null,[[["int16x8_t",3]]]],[5,"vmaxv_s32","","Horizontal vector max.",null,[[["int32x2_t",3]]]],[5,"vmaxvq_s32","","Horizontal vector max.",null,[[["int32x4_t",3]]]],[5,"vmaxv_u8","","Horizontal vector max.",null,[[["uint8x8_t",3]]]],[5,"vmaxvq_u8","","Horizontal vector max.",null,[[["uint8x16_t",3]]]],[5,"vmaxv_u16","","Horizontal vector max.",null,[[["uint16x4_t",3]]]],[5,"vmaxvq_u16","","Horizontal vector max.",null,[[["uint16x8_t",3]]]],[5,"vmaxv_u32","","Horizontal vector max.",null,[[["uint32x2_t",3]]]],[5,"vmaxvq_u32","","Horizontal vector max.",null,[[["uint32x4_t",3]]]],[5,"vmaxv_f32","","Horizontal vector max.",null,[[["float32x2_t",3]]]],[5,"vmaxvq_f32","","Horizontal vector max.",null,[[["float32x4_t",3]]]],[5,"vmaxvq_f64","","Horizontal vector max.",null,[[["float64x2_t",3]]]],[5,"vminv_s8","","Horizontal vector min.",null,[[["int8x8_t",3]]]],[5,"vminvq_s8","","Horizontal vector min.",null,[[["int8x16_t",3]]]],[5,"vminv_s16","","Horizontal vector min.",null,[[["int16x4_t",3]]]],[5,"vminvq_s16","","Horizontal vector min.",null,[[["int16x8_t",3]]]],[5,"vminv_s32","","Horizontal vector min.",null,[[["int32x2_t",3]]]],[5,"vminvq_s32","","Horizontal vector min.",null,[[["int32x4_t",3]]]],[5,"vminv_u8","","Horizontal vector min.",null,[[["uint8x8_t",3]]]],[5,"vminvq_u8","","Horizontal vector min.",null,[[["uint8x16_t",3]]]],[5,"vminv_u16","","Horizontal vector min.",null,[[["uint16x4_t",3]]]],[5,"vminvq_u16","","Horizontal vector min.",null,[[["uint16x8_t",3]]]],[5,"vminv_u32","","Horizontal vector min.",null,[[["uint32x2_t",3]]]],[5,"vminvq_u32","","Horizontal vector min.",null,[[["uint32x4_t",3]]]],[5,"vminv_f32","","Horizontal vector min.",null,[[["float32x2_t",3]]]],[5,"vminvq_f32","","Horizontal vector min.",null,[[["float32x4_t",3]]]],[5,"vminvq_f64","","Horizontal vector min.",null,[[["float64x2_t",3]]]],[5,"vpminq_s8","","Folding minimum of adjacent pairs",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vpminq_s16","","Folding minimum of adjacent pairs",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vpminq_s32","","Folding minimum of adjacent pairs",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vpminq_u8","","Folding minimum of adjacent pairs",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vpminq_u16","","Folding minimum of adjacent pairs",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vpminq_u32","","Folding minimum of adjacent pairs",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vpminq_f32","","Folding minimum of adjacent pairs",null,[[["float32x4_t",3]],["float32x4_t",3]]],[5,"vpminq_f64","","Folding minimum of adjacent pairs",null,[[["float64x2_t",3]],["float64x2_t",3]]],[5,"vpmaxq_s8","","Folding maximum of adjacent pairs",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vpmaxq_s16","","Folding maximum of adjacent pairs",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vpmaxq_s32","","Folding maximum of adjacent pairs",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vpmaxq_u8","","Folding maximum of adjacent pairs",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vpmaxq_u16","","Folding maximum of adjacent pairs",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vpmaxq_u32","","Folding maximum of adjacent pairs",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vpmaxq_f32","","Folding maximum of adjacent pairs",null,[[["float32x4_t",3]],["float32x4_t",3]]],[5,"vpmaxq_f64","","Folding maximum of adjacent pairs",null,[[["float64x2_t",3]],["float64x2_t",3]]],[5,"vcombine_s8","","Vector combine",null,[[["int8x8_t",3]],["int8x16_t",3]]],[5,"vcombine_s16","","Vector combine",null,[[["int16x4_t",3]],["int16x8_t",3]]],[5,"vcombine_s32","","Vector combine",null,[[["int32x2_t",3]],["int32x4_t",3]]],[5,"vcombine_s64","","Vector combine",null,[[["int64x1_t",3]],["int64x2_t",3]]],[5,"vcombine_u8","","Vector combine",null,[[["uint8x8_t",3]],["uint8x16_t",3]]],[5,"vcombine_u16","","Vector combine",null,[[["uint16x4_t",3]],["uint16x8_t",3]]],[5,"vcombine_u32","","Vector combine",null,[[["uint32x2_t",3]],["uint32x4_t",3]]],[5,"vcombine_u64","","Vector combine",null,[[["uint64x1_t",3]],["uint64x2_t",3]]],[5,"vcombine_p64","","Vector combine",null,[[["poly64x1_t",3]],["poly64x2_t",3]]],[5,"vcombine_f32","","Vector combine",null,[[["float32x2_t",3]],["float32x4_t",3]]],[5,"vcombine_p8","","Vector combine",null,[[["poly8x8_t",3]],["poly8x16_t",3]]],[5,"vcombine_p16","","Vector combine",null,[[["poly16x4_t",3]],["poly16x8_t",3]]],[5,"vcombine_f64","","Vector combine",null,[[["float64x1_t",3]],["float64x2_t",3]]],[5,"vtbl1_s8","","Table look-up",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vtbl1_u8","","Table look-up",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vtbl1_p8","","Table look-up",null,[[["poly8x8_t",3],["uint8x8_t",3]],["poly8x8_t",3]]],[5,"vtbl2_s8","","Table look-up",null,[[["int8x8x2_t",3],["int8x8_t",3]],["int8x8_t",3]]],[5,"vtbl2_u8","","Table look-up",null,[[["uint8x8x2_t",3],["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vtbl2_p8","","Table look-up",null,[[["uint8x8_t",3],["poly8x8x2_t",3]],["poly8x8_t",3]]],[5,"vtbl3_s8","","Table look-up",null,[[["int8x8_t",3],["int8x8x3_t",3]],["int8x8_t",3]]],[5,"vtbl3_u8","","Table look-up",null,[[["uint8x8_t",3],["uint8x8x3_t",3]],["uint8x8_t",3]]],[5,"vtbl3_p8","","Table look-up",null,[[["poly8x8x3_t",3],["uint8x8_t",3]],["poly8x8_t",3]]],[5,"vtbl4_s8","","Table look-up",null,[[["int8x8x4_t",3],["int8x8_t",3]],["int8x8_t",3]]],[5,"vtbl4_u8","","Table look-up",null,[[["uint8x8_t",3],["uint8x8x4_t",3]],["uint8x8_t",3]]],[5,"vtbl4_p8","","Table look-up",null,[[["poly8x8x4_t",3],["uint8x8_t",3]],["poly8x8_t",3]]],[5,"vtbx1_s8","","Extended table look-up",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vtbx1_u8","","Extended table look-up",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vtbx1_p8","","Extended table look-up",null,[[["poly8x8_t",3],["uint8x8_t",3]],["poly8x8_t",3]]],[5,"vtbx2_s8","","Extended table look-up",null,[[["int8x8x2_t",3],["int8x8_t",3]],["int8x8_t",3]]],[5,"vtbx2_u8","","Extended table look-up",null,[[["uint8x8x2_t",3],["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vtbx2_p8","","Extended table look-up",null,[[["poly8x8_t",3],["uint8x8_t",3],["poly8x8x2_t",3]],["poly8x8_t",3]]],[5,"vtbx3_s8","","Extended table look-up",null,[[["int8x8x3_t",3],["int8x8_t",3]],["int8x8_t",3]]],[5,"vtbx3_u8","","Extended table look-up",null,[[["uint8x8_t",3],["uint8x8x3_t",3]],["uint8x8_t",3]]],[5,"vtbx3_p8","","Extended table look-up",null,[[["poly8x8x3_t",3],["poly8x8_t",3],["uint8x8_t",3]],["poly8x8_t",3]]],[5,"vtbx4_s8","","Extended table look-up",null,[[["int8x8x4_t",3],["int8x8_t",3]],["int8x8_t",3]]],[5,"vtbx4_u8","","Extended table look-up",null,[[["uint8x8_t",3],["uint8x8x4_t",3]],["uint8x8_t",3]]],[5,"vtbx4_p8","","Extended table look-up",null,[[["poly8x8x4_t",3],["poly8x8_t",3],["uint8x8_t",3]],["poly8x8_t",3]]],[5,"vqtbl1_s8","","Table look-up",null,[[["int8x16_t",3],["uint8x8_t",3]],["int8x8_t",3]]],[5,"vqtbl1q_s8","","Table look-up",null,[[["int8x16_t",3],["uint8x16_t",3]],["int8x16_t",3]]],[5,"vqtbl1_u8","","Table look-up",null,[[["uint8x8_t",3],["uint8x16_t",3]],["uint8x8_t",3]]],[5,"vqtbl1q_u8","","Table look-up",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vqtbl1_p8","","Table look-up",null,[[["uint8x8_t",3],["poly8x16_t",3]],["poly8x8_t",3]]],[5,"vqtbl1q_p8","","Table look-up",null,[[["uint8x16_t",3],["poly8x16_t",3]],["poly8x16_t",3]]],[5,"vqtbx1_s8","","Extended table look-up",null,[[["int8x16_t",3],["uint8x8_t",3],["int8x8_t",3]],["int8x8_t",3]]],[5,"vqtbx1q_s8","","Extended table look-up",null,[[["int8x16_t",3],["uint8x16_t",3]],["int8x16_t",3]]],[5,"vqtbx1_u8","","Extended table look-up",null,[[["uint8x8_t",3],["uint8x16_t",3]],["uint8x8_t",3]]],[5,"vqtbx1q_u8","","Extended table look-up",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vqtbx1_p8","","Extended table look-up",null,[[["poly8x8_t",3],["uint8x8_t",3],["poly8x16_t",3]],["poly8x8_t",3]]],[5,"vqtbx1q_p8","","Extended table look-up",null,[[["uint8x16_t",3],["poly8x16_t",3]],["poly8x16_t",3]]],[5,"vqtbl2_s8","","Table look-up",null,[[["int8x16x2_t",3],["uint8x8_t",3]],["int8x8_t",3]]],[5,"vqtbl2q_s8","","Table look-up",null,[[["int8x16x2_t",3],["uint8x16_t",3]],["int8x16_t",3]]],[5,"vqtbl2_u8","","Table look-up",null,[[["uint8x16x2_t",3],["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vqtbl2q_u8","","Table look-up",null,[[["uint8x16x2_t",3],["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vqtbl2_p8","","Table look-up",null,[[["poly8x16x2_t",3],["uint8x8_t",3]],["poly8x8_t",3]]],[5,"vqtbl2q_p8","","Table look-up",null,[[["poly8x16x2_t",3],["uint8x16_t",3]],["poly8x16_t",3]]],[5,"vqtbx2_s8","","Extended table look-up",null,[[["int8x16x2_t",3],["uint8x8_t",3],["int8x8_t",3]],["int8x8_t",3]]],[5,"vqtbx2q_s8","","Extended table look-up",null,[[["int8x16x2_t",3],["int8x16_t",3],["uint8x16_t",3]],["int8x16_t",3]]],[5,"vqtbx2_u8","","Extended table look-up",null,[[["uint8x16x2_t",3],["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vqtbx2q_u8","","Extended table look-up",null,[[["uint8x16x2_t",3],["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vqtbx2_p8","","Extended table look-up",null,[[["poly8x16x2_t",3],["poly8x8_t",3],["uint8x8_t",3]],["poly8x8_t",3]]],[5,"vqtbx2q_p8","","Extended table look-up",null,[[["poly8x16x2_t",3],["uint8x16_t",3],["poly8x16_t",3]],["poly8x16_t",3]]],[5,"vqtbl3_s8","","Table look-up",null,[[["int8x16x3_t",3],["uint8x8_t",3]],["int8x8_t",3]]],[5,"vqtbl3q_s8","","Table look-up",null,[[["int8x16x3_t",3],["uint8x16_t",3]],["int8x16_t",3]]],[5,"vqtbl3_u8","","Table look-up",null,[[["uint8x16x3_t",3],["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vqtbl3q_u8","","Table look-up",null,[[["uint8x16x3_t",3],["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vqtbl3_p8","","Table look-up",null,[[["uint8x8_t",3],["poly8x16x3_t",3]],["poly8x8_t",3]]],[5,"vqtbl3q_p8","","Table look-up",null,[[["uint8x16_t",3],["poly8x16x3_t",3]],["poly8x16_t",3]]],[5,"vqtbx3_s8","","Extended table look-up",null,[[["int8x16x3_t",3],["uint8x8_t",3],["int8x8_t",3]],["int8x8_t",3]]],[5,"vqtbx3q_s8","","Extended table look-up",null,[[["int8x16_t",3],["int8x16x3_t",3],["uint8x16_t",3]],["int8x16_t",3]]],[5,"vqtbx3_u8","","Extended table look-up",null,[[["uint8x8_t",3],["uint8x16x3_t",3]],["uint8x8_t",3]]],[5,"vqtbx3q_u8","","Extended table look-up",null,[[["uint8x16x3_t",3],["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vqtbx3_p8","","Extended table look-up",null,[[["poly8x8_t",3],["uint8x8_t",3],["poly8x16x3_t",3]],["poly8x8_t",3]]],[5,"vqtbx3q_p8","","Extended table look-up",null,[[["poly8x16x3_t",3],["uint8x16_t",3],["poly8x16_t",3]],["poly8x16_t",3]]],[5,"vqtbl4_s8","","Table look-up",null,[[["int8x16x4_t",3],["uint8x8_t",3]],["int8x8_t",3]]],[5,"vqtbl4q_s8","","Table look-up",null,[[["int8x16x4_t",3],["uint8x16_t",3]],["int8x16_t",3]]],[5,"vqtbl4_u8","","Table look-up",null,[[["uint8x8_t",3],["uint8x16x4_t",3]],["uint8x8_t",3]]],[5,"vqtbl4q_u8","","Table look-up",null,[[["uint8x16_t",3],["uint8x16x4_t",3]],["uint8x16_t",3]]],[5,"vqtbl4_p8","","Table look-up",null,[[["uint8x8_t",3],["poly8x16x4_t",3]],["poly8x8_t",3]]],[5,"vqtbl4q_p8","","Table look-up",null,[[["uint8x16_t",3],["poly8x16x4_t",3]],["poly8x16_t",3]]],[5,"vqtbx4_s8","","Extended table look-up",null,[[["int8x16x4_t",3],["uint8x8_t",3],["int8x8_t",3]],["int8x8_t",3]]],[5,"vqtbx4q_s8","","Extended table look-up",null,[[["int8x16x4_t",3],["int8x16_t",3],["uint8x16_t",3]],["int8x16_t",3]]],[5,"vqtbx4_u8","","Extended table look-up",null,[[["uint8x8_t",3],["uint8x16x4_t",3]],["uint8x8_t",3]]],[5,"vqtbx4q_u8","","Extended table look-up",null,[[["uint8x16x4_t",3],["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vqtbx4_p8","","Extended table look-up",null,[[["poly8x8_t",3],["uint8x8_t",3],["poly8x16x4_t",3]],["poly8x8_t",3]]],[5,"vqtbx4q_p8","","Extended table look-up",null,[[["poly8x16x4_t",3],["uint8x16_t",3],["poly8x16_t",3]],["poly8x16_t",3]]],[5,"vcvtq_s32_f32","","",null,[[["float32x4_t",3]],["int32x4_t",3]]],[5,"vcvtq_u32_f32","","Floating-point Convert to Unsigned fixed-point, rounding …",null,[[["float32x4_t",3]],["uint32x4_t",3]]],[5,"vsli_n_s8","","Shift Left and Insert (immediate)",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vsliq_n_s8","","Shift Left and Insert (immediate)",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vsli_n_s16","","Shift Left and Insert (immediate)",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vsliq_n_s16","","Shift Left and Insert (immediate)",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vsli_n_s32","","Shift Left and Insert (immediate)",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vsliq_n_s32","","Shift Left and Insert (immediate)",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vsli_n_s64","","Shift Left and Insert (immediate)",null,[[["int64x1_t",3]],["int64x1_t",3]]],[5,"vsliq_n_s64","","Shift Left and Insert (immediate)",null,[[["int64x2_t",3]],["int64x2_t",3]]],[5,"vsli_n_u8","","Shift Left and Insert (immediate)",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vsliq_n_u8","","Shift Left and Insert (immediate)",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vsli_n_u16","","Shift Left and Insert (immediate)",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vsliq_n_u16","","Shift Left and Insert (immediate)",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vsli_n_u32","","Shift Left and Insert (immediate)",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vsliq_n_u32","","Shift Left and Insert (immediate)",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vsli_n_u64","","Shift Left and Insert (immediate)",null,[[["uint64x1_t",3]],["uint64x1_t",3]]],[5,"vsliq_n_u64","","Shift Left and Insert (immediate)",null,[[["uint64x2_t",3]],["uint64x2_t",3]]],[5,"vsli_n_p8","","Shift Left and Insert (immediate)",null,[[["poly8x8_t",3]],["poly8x8_t",3]]],[5,"vsliq_n_p8","","Shift Left and Insert (immediate)",null,[[["poly8x16_t",3]],["poly8x16_t",3]]],[5,"vsli_n_p16","","Shift Left and Insert (immediate)",null,[[["poly16x4_t",3]],["poly16x4_t",3]]],[5,"vsliq_n_p16","","Shift Left and Insert (immediate)",null,[[["poly16x8_t",3]],["poly16x8_t",3]]],[5,"vsri_n_s8","","Shift Right and Insert (immediate)",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vsriq_n_s8","","Shift Right and Insert (immediate)",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vsri_n_s16","","Shift Right and Insert (immediate)",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vsriq_n_s16","","Shift Right and Insert (immediate)",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vsri_n_s32","","Shift Right and Insert (immediate)",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vsriq_n_s32","","Shift Right and Insert (immediate)",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vsri_n_s64","","Shift Right and Insert (immediate)",null,[[["int64x1_t",3]],["int64x1_t",3]]],[5,"vsriq_n_s64","","Shift Right and Insert (immediate)",null,[[["int64x2_t",3]],["int64x2_t",3]]],[5,"vsri_n_u8","","Shift Right and Insert (immediate)",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vsriq_n_u8","","Shift Right and Insert (immediate)",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vsri_n_u16","","Shift Right and Insert (immediate)",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vsriq_n_u16","","Shift Right and Insert (immediate)",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vsri_n_u32","","Shift Right and Insert (immediate)",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vsriq_n_u32","","Shift Right and Insert (immediate)",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vsri_n_u64","","Shift Right and Insert (immediate)",null,[[["uint64x1_t",3]],["uint64x1_t",3]]],[5,"vsriq_n_u64","","Shift Right and Insert (immediate)",null,[[["uint64x2_t",3]],["uint64x2_t",3]]],[5,"vsri_n_p8","","Shift Right and Insert (immediate)",null,[[["poly8x8_t",3]],["poly8x8_t",3]]],[5,"vsriq_n_p8","","Shift Right and Insert (immediate)",null,[[["poly8x16_t",3]],["poly8x16_t",3]]],[5,"vsri_n_p16","","Shift Right and Insert (immediate)",null,[[["poly16x4_t",3]],["poly16x4_t",3]]],[5,"vsriq_n_p16","","Shift Right and Insert (immediate)",null,[[["poly16x8_t",3]],["poly16x8_t",3]]],[17,"_TMSTART_SUCCESS","","Transaction successfully started.",null,null],[17,"_TMFAILURE_REASON","","Extraction mask for failure reason",null,null],[17,"_TMFAILURE_RTRY","","Transaction retry is possible.",null,null],[17,"_TMFAILURE_CNCL","","Transaction executed a TCANCEL instruction",null,null],[17,"_TMFAILURE_MEM","","Transaction aborted because a conflict occurred",null,null],[17,"_TMFAILURE_IMP","","Fallback error type for any other reason",null,null],[17,"_TMFAILURE_ERR","","Transaction aborted because a non-permissible operation …",null,null],[17,"_TMFAILURE_SIZE","","Transaction aborted due to read or write set limit was …",null,null],[17,"_TMFAILURE_NEST","","Transaction aborted due to transactional nesting level …",null,null],[17,"_TMFAILURE_DBG","","Transaction aborted due to a debug trap.",null,null],[17,"_TMFAILURE_INT","","Transaction failed from interrupt",null,null],[17,"_TMFAILURE_TRIVIAL","","Indicates a TRIVIAL version of TM is available",null,null],[5,"__tstart","","Starts a new transaction. When the transaction starts …",null,[[]]],[5,"__tcommit","","Commits the current transaction. For a nested …",null,[[]]],[5,"__tcancel","","Cancels the current transaction and discards all state …",null,[[]]],[5,"__ttest","","Tests if executing inside a transaction. If no …",null,[[]]],[5,"__crc32d","","CRC32 single round checksum for quad words (64 bits).",null,[[]]],[5,"__crc32cd","","CRC32-C single round checksum for quad words (64 bits).",null,[[]]],[17,"_PREFETCH_READ","","See <code>prefetch</code>.",null,null],[17,"_PREFETCH_WRITE","","See <code>prefetch</code>.",null,null],[17,"_PREFETCH_LOCALITY0","","See <code>prefetch</code>.",null,null],[17,"_PREFETCH_LOCALITY1","","See <code>prefetch</code>.",null,null],[17,"_PREFETCH_LOCALITY2","","See <code>prefetch</code>.",null,null],[17,"_PREFETCH_LOCALITY3","","See <code>prefetch</code>.",null,null],[5,"_prefetch","","Fetch the cache line that contains address <code>p</code> using the …",null,[[]]],[3,"SY","","Full system is the required shareability domain, reads …",null,null],[5,"__dmb","","Generates a DMB (data memory barrier) instruction or …",null,[[]]],[5,"__dsb","","Generates a DSB (data synchronization barrier) …",null,[[]]],[5,"__isb","","Generates an ISB (instruction synchronization barrier) …",null,[[]]],[5,"__nop","","Generates an unspecified no-op instruction.",null,[[]]],[3,"APSR","","Application Program Status Register",null,null],[5,"__rsr","","Reads a 32-bit system register",null,[[]]],[5,"__rsrp","","Reads a system register containing an address",null,[[]]],[5,"__wsr","","Writes a 32-bit system register",null,[[]]],[5,"__wsrp","","Writes a system register containing an address",null,[[]]],[5,"brk","","Generates the trap instruction <code>BRK 1</code>",null,[[]]],[5,"__breakpoint","","Inserts a breakpoint instruction.",null,[[]]],[5,"_rev_u16","","Reverse the order of the bytes.",null,[[]]],[5,"_rev_u32","","Reverse the order of the bytes.",null,[[]]],[5,"vand_s8","","Vector bitwise and",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vandq_s8","","Vector bitwise and",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vand_s16","","Vector bitwise and",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vandq_s16","","Vector bitwise and",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vand_s32","","Vector bitwise and",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vandq_s32","","Vector bitwise and",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vand_u8","","Vector bitwise and",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vandq_u8","","Vector bitwise and",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vand_u16","","Vector bitwise and",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vandq_u16","","Vector bitwise and",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vand_u32","","Vector bitwise and",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vandq_u32","","Vector bitwise and",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vand_s64","","Vector bitwise and",null,[[["int64x1_t",3]],["int64x1_t",3]]],[5,"vandq_s64","","Vector bitwise and",null,[[["int64x2_t",3]],["int64x2_t",3]]],[5,"vand_u64","","Vector bitwise and",null,[[["uint64x1_t",3]],["uint64x1_t",3]]],[5,"vandq_u64","","Vector bitwise and",null,[[["uint64x2_t",3]],["uint64x2_t",3]]],[5,"vorr_s8","","Vector bitwise or (immediate, inclusive)",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vorrq_s8","","Vector bitwise or (immediate, inclusive)",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vorr_s16","","Vector bitwise or (immediate, inclusive)",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vorrq_s16","","Vector bitwise or (immediate, inclusive)",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vorr_s32","","Vector bitwise or (immediate, inclusive)",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vorrq_s32","","Vector bitwise or (immediate, inclusive)",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vorr_u8","","Vector bitwise or (immediate, inclusive)",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vorrq_u8","","Vector bitwise or (immediate, inclusive)",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vorr_u16","","Vector bitwise or (immediate, inclusive)",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vorrq_u16","","Vector bitwise or (immediate, inclusive)",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vorr_u32","","Vector bitwise or (immediate, inclusive)",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vorrq_u32","","Vector bitwise or (immediate, inclusive)",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vorr_s64","","Vector bitwise or (immediate, inclusive)",null,[[["int64x1_t",3]],["int64x1_t",3]]],[5,"vorrq_s64","","Vector bitwise or (immediate, inclusive)",null,[[["int64x2_t",3]],["int64x2_t",3]]],[5,"vorr_u64","","Vector bitwise or (immediate, inclusive)",null,[[["uint64x1_t",3]],["uint64x1_t",3]]],[5,"vorrq_u64","","Vector bitwise or (immediate, inclusive)",null,[[["uint64x2_t",3]],["uint64x2_t",3]]],[5,"veor_s8","","Vector bitwise exclusive or (vector)",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"veorq_s8","","Vector bitwise exclusive or (vector)",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"veor_s16","","Vector bitwise exclusive or (vector)",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"veorq_s16","","Vector bitwise exclusive or (vector)",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"veor_s32","","Vector bitwise exclusive or (vector)",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"veorq_s32","","Vector bitwise exclusive or (vector)",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"veor_u8","","Vector bitwise exclusive or (vector)",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"veorq_u8","","Vector bitwise exclusive or (vector)",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"veor_u16","","Vector bitwise exclusive or (vector)",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"veorq_u16","","Vector bitwise exclusive or (vector)",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"veor_u32","","Vector bitwise exclusive or (vector)",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"veorq_u32","","Vector bitwise exclusive or (vector)",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"veor_s64","","Vector bitwise exclusive or (vector)",null,[[["int64x1_t",3]],["int64x1_t",3]]],[5,"veorq_s64","","Vector bitwise exclusive or (vector)",null,[[["int64x2_t",3]],["int64x2_t",3]]],[5,"veor_u64","","Vector bitwise exclusive or (vector)",null,[[["uint64x1_t",3]],["uint64x1_t",3]]],[5,"veorq_u64","","Vector bitwise exclusive or (vector)",null,[[["uint64x2_t",3]],["uint64x2_t",3]]],[5,"vceq_u8","","Compare bitwise Equal (vector)",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vceqq_u8","","Compare bitwise Equal (vector)",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vceq_u16","","Compare bitwise Equal (vector)",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vceqq_u16","","Compare bitwise Equal (vector)",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vceq_u32","","Compare bitwise Equal (vector)",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vceqq_u32","","Compare bitwise Equal (vector)",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vceq_s8","","Compare bitwise Equal (vector)",null,[[["int8x8_t",3]],["uint8x8_t",3]]],[5,"vceqq_s8","","Compare bitwise Equal (vector)",null,[[["int8x16_t",3]],["uint8x16_t",3]]],[5,"vceq_s16","","Compare bitwise Equal (vector)",null,[[["int16x4_t",3]],["uint16x4_t",3]]],[5,"vceqq_s16","","Compare bitwise Equal (vector)",null,[[["int16x8_t",3]],["uint16x8_t",3]]],[5,"vceq_s32","","Compare bitwise Equal (vector)",null,[[["int32x2_t",3]],["uint32x2_t",3]]],[5,"vceqq_s32","","Compare bitwise Equal (vector)",null,[[["int32x4_t",3]],["uint32x4_t",3]]],[5,"vceq_f32","","Floating-point compare equal",null,[[["float32x2_t",3]],["uint32x2_t",3]]],[5,"vceqq_f32","","Floating-point compare equal",null,[[["float32x4_t",3]],["uint32x4_t",3]]],[5,"vcgt_s8","","Compare signed greater than",null,[[["int8x8_t",3]],["uint8x8_t",3]]],[5,"vcgtq_s8","","Compare signed greater than",null,[[["int8x16_t",3]],["uint8x16_t",3]]],[5,"vcgt_s16","","Compare signed greater than",null,[[["int16x4_t",3]],["uint16x4_t",3]]],[5,"vcgtq_s16","","Compare signed greater than",null,[[["int16x8_t",3]],["uint16x8_t",3]]],[5,"vcgt_s32","","Compare signed greater than",null,[[["int32x2_t",3]],["uint32x2_t",3]]],[5,"vcgtq_s32","","Compare signed greater than",null,[[["int32x4_t",3]],["uint32x4_t",3]]],[5,"vcgt_u8","","Compare unsigned highe",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vcgtq_u8","","Compare unsigned highe",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vcgt_u16","","Compare unsigned highe",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vcgtq_u16","","Compare unsigned highe",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vcgt_u32","","Compare unsigned highe",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vcgtq_u32","","Compare unsigned highe",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vcgt_f32","","Floating-point compare greater than",null,[[["float32x2_t",3]],["uint32x2_t",3]]],[5,"vcgtq_f32","","Floating-point compare greater than",null,[[["float32x4_t",3]],["uint32x4_t",3]]],[5,"vclt_s8","","Compare signed less than",null,[[["int8x8_t",3]],["uint8x8_t",3]]],[5,"vcltq_s8","","Compare signed less than",null,[[["int8x16_t",3]],["uint8x16_t",3]]],[5,"vclt_s16","","Compare signed less than",null,[[["int16x4_t",3]],["uint16x4_t",3]]],[5,"vcltq_s16","","Compare signed less than",null,[[["int16x8_t",3]],["uint16x8_t",3]]],[5,"vclt_s32","","Compare signed less than",null,[[["int32x2_t",3]],["uint32x2_t",3]]],[5,"vcltq_s32","","Compare signed less than",null,[[["int32x4_t",3]],["uint32x4_t",3]]],[5,"vclt_u8","","Compare unsigned less than",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vcltq_u8","","Compare unsigned less than",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vclt_u16","","Compare unsigned less than",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vcltq_u16","","Compare unsigned less than",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vclt_u32","","Compare unsigned less than",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vcltq_u32","","Compare unsigned less than",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vclt_f32","","Floating-point compare less than",null,[[["float32x2_t",3]],["uint32x2_t",3]]],[5,"vcltq_f32","","Floating-point compare less than",null,[[["float32x4_t",3]],["uint32x4_t",3]]],[5,"vcle_s8","","Compare signed less than or equal",null,[[["int8x8_t",3]],["uint8x8_t",3]]],[5,"vcleq_s8","","Compare signed less than or equal",null,[[["int8x16_t",3]],["uint8x16_t",3]]],[5,"vcle_s16","","Compare signed less than or equal",null,[[["int16x4_t",3]],["uint16x4_t",3]]],[5,"vcleq_s16","","Compare signed less than or equal",null,[[["int16x8_t",3]],["uint16x8_t",3]]],[5,"vcle_s32","","Compare signed less than or equal",null,[[["int32x2_t",3]],["uint32x2_t",3]]],[5,"vcleq_s32","","Compare signed less than or equal",null,[[["int32x4_t",3]],["uint32x4_t",3]]],[5,"vcle_u8","","Compare unsigned less than or equal",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vcleq_u8","","Compare unsigned less than or equal",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vcle_u16","","Compare unsigned less than or equal",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vcleq_u16","","Compare unsigned less than or equal",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vcle_u32","","Compare unsigned less than or equal",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vcleq_u32","","Compare unsigned less than or equal",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vcle_f32","","Floating-point compare less than or equal",null,[[["float32x2_t",3]],["uint32x2_t",3]]],[5,"vcleq_f32","","Floating-point compare less than or equal",null,[[["float32x4_t",3]],["uint32x4_t",3]]],[5,"vcge_s8","","Compare signed greater than or equal",null,[[["int8x8_t",3]],["uint8x8_t",3]]],[5,"vcgeq_s8","","Compare signed greater than or equal",null,[[["int8x16_t",3]],["uint8x16_t",3]]],[5,"vcge_s16","","Compare signed greater than or equal",null,[[["int16x4_t",3]],["uint16x4_t",3]]],[5,"vcgeq_s16","","Compare signed greater than or equal",null,[[["int16x8_t",3]],["uint16x8_t",3]]],[5,"vcge_s32","","Compare signed greater than or equal",null,[[["int32x2_t",3]],["uint32x2_t",3]]],[5,"vcgeq_s32","","Compare signed greater than or equal",null,[[["int32x4_t",3]],["uint32x4_t",3]]],[5,"vcge_u8","","Compare unsigned greater than or equal",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vcgeq_u8","","Compare unsigned greater than or equal",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vcge_u16","","Compare unsigned greater than or equal",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vcgeq_u16","","Compare unsigned greater than or equal",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vcge_u32","","Compare unsigned greater than or equal",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vcgeq_u32","","Compare unsigned greater than or equal",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vcge_f32","","Floating-point compare greater than or equal",null,[[["float32x2_t",3]],["uint32x2_t",3]]],[5,"vcgeq_f32","","Floating-point compare greater than or equal",null,[[["float32x4_t",3]],["uint32x4_t",3]]],[5,"vqsub_u8","","Saturating subtract",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vqsubq_u8","","Saturating subtract",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vqsub_u16","","Saturating subtract",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vqsubq_u16","","Saturating subtract",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vqsub_u32","","Saturating subtract",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vqsubq_u32","","Saturating subtract",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vqsub_s8","","Saturating subtract",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vqsubq_s8","","Saturating subtract",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vqsub_s16","","Saturating subtract",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vqsubq_s16","","Saturating subtract",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vqsub_s32","","Saturating subtract",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vqsubq_s32","","Saturating subtract",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vhadd_u8","","Halving add",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vhaddq_u8","","Halving add",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vhadd_u16","","Halving add",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vhaddq_u16","","Halving add",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vhadd_u32","","Halving add",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vhaddq_u32","","Halving add",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vhadd_s8","","Halving add",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vhaddq_s8","","Halving add",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vhadd_s16","","Halving add",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vhaddq_s16","","Halving add",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vhadd_s32","","Halving add",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vhaddq_s32","","Halving add",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vrhadd_u8","","Rounding halving add",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vrhaddq_u8","","Rounding halving add",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vrhadd_u16","","Rounding halving add",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vrhaddq_u16","","Rounding halving add",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vrhadd_u32","","Rounding halving add",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vrhaddq_u32","","Rounding halving add",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vrhadd_s8","","Rounding halving add",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vrhaddq_s8","","Rounding halving add",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vrhadd_s16","","Rounding halving add",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vrhaddq_s16","","Rounding halving add",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vrhadd_s32","","Rounding halving add",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vrhaddq_s32","","Rounding halving add",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vqadd_u8","","Saturating add",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vqaddq_u8","","Saturating add",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vqadd_u16","","Saturating add",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vqaddq_u16","","Saturating add",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vqadd_u32","","Saturating add",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vqaddq_u32","","Saturating add",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vqadd_s8","","Saturating add",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vqaddq_s8","","Saturating add",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vqadd_s16","","Saturating add",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vqaddq_s16","","Saturating add",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vqadd_s32","","Saturating add",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vqaddq_s32","","Saturating add",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vmul_s8","","Multiply",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vmulq_s8","","Multiply",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vmul_s16","","Multiply",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vmulq_s16","","Multiply",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vmul_s32","","Multiply",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vmulq_s32","","Multiply",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vmul_u8","","Multiply",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vmulq_u8","","Multiply",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vmul_u16","","Multiply",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vmulq_u16","","Multiply",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vmul_u32","","Multiply",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vmulq_u32","","Multiply",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vmul_f32","","Multiply",null,[[["float32x2_t",3]],["float32x2_t",3]]],[5,"vmulq_f32","","Multiply",null,[[["float32x4_t",3]],["float32x4_t",3]]],[5,"vsub_s8","","Subtract",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vsubq_s8","","Subtract",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vsub_s16","","Subtract",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vsubq_s16","","Subtract",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vsub_s32","","Subtract",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vsubq_s32","","Subtract",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vsub_u8","","Subtract",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vsubq_u8","","Subtract",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vsub_u16","","Subtract",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vsubq_u16","","Subtract",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vsub_u32","","Subtract",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vsubq_u32","","Subtract",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vsub_s64","","Subtract",null,[[["int64x1_t",3]],["int64x1_t",3]]],[5,"vsubq_s64","","Subtract",null,[[["int64x2_t",3]],["int64x2_t",3]]],[5,"vsub_u64","","Subtract",null,[[["uint64x1_t",3]],["uint64x1_t",3]]],[5,"vsubq_u64","","Subtract",null,[[["uint64x2_t",3]],["uint64x2_t",3]]],[5,"vsub_f32","","Subtract",null,[[["float32x2_t",3]],["float32x2_t",3]]],[5,"vsubq_f32","","Subtract",null,[[["float32x4_t",3]],["float32x4_t",3]]],[5,"vhsub_u8","","Signed halving subtract",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vhsubq_u8","","Signed halving subtract",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vhsub_u16","","Signed halving subtract",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vhsubq_u16","","Signed halving subtract",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vhsub_u32","","Signed halving subtract",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vhsubq_u32","","Signed halving subtract",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vhsub_s8","","Signed halving subtract",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vhsubq_s8","","Signed halving subtract",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vhsub_s16","","Signed halving subtract",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vhsubq_s16","","Signed halving subtract",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vhsub_s32","","Signed halving subtract",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vhsubq_s32","","Signed halving subtract",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vmax_s8","","Maximum (vector)",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vmaxq_s8","","Maximum (vector)",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vmax_s16","","Maximum (vector)",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vmaxq_s16","","Maximum (vector)",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vmax_s32","","Maximum (vector)",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vmaxq_s32","","Maximum (vector)",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vmax_u8","","Maximum (vector)",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vmaxq_u8","","Maximum (vector)",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vmax_u16","","Maximum (vector)",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vmaxq_u16","","Maximum (vector)",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vmax_u32","","Maximum (vector)",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vmaxq_u32","","Maximum (vector)",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vmax_f32","","Maximum (vector)",null,[[["float32x2_t",3]],["float32x2_t",3]]],[5,"vmaxq_f32","","Maximum (vector)",null,[[["float32x4_t",3]],["float32x4_t",3]]],[5,"vmin_s8","","Minimum (vector)",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vminq_s8","","Minimum (vector)",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vmin_s16","","Minimum (vector)",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vminq_s16","","Minimum (vector)",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vmin_s32","","Minimum (vector)",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vminq_s32","","Minimum (vector)",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vmin_u8","","Minimum (vector)",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vminq_u8","","Minimum (vector)",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vmin_u16","","Minimum (vector)",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vminq_u16","","Minimum (vector)",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vmin_u32","","Minimum (vector)",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vminq_u32","","Minimum (vector)",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vmin_f32","","Minimum (vector)",null,[[["float32x2_t",3]],["float32x2_t",3]]],[5,"vminq_f32","","Minimum (vector)",null,[[["float32x4_t",3]],["float32x4_t",3]]],[3,"int8x8_t","","ARM-specific 64-bit wide vector of eight packed <code>i8</code>.",null,null],[3,"uint8x8_t","","ARM-specific 64-bit wide vector of eight packed <code>u8</code>.",null,null],[3,"poly8x8_t","","ARM-specific 64-bit wide polynomial vector of eight …",null,null],[3,"int16x4_t","","ARM-specific 64-bit wide vector of four packed <code>i16</code>.",null,null],[3,"uint16x4_t","","ARM-specific 64-bit wide vector of four packed <code>u16</code>.",null,null],[3,"poly16x4_t","","ARM-specific 64-bit wide vector of four packed <code>p16</code>.",null,null],[3,"int32x2_t","","ARM-specific 64-bit wide vector of two packed <code>i32</code>.",null,null],[3,"uint32x2_t","","ARM-specific 64-bit wide vector of two packed <code>u32</code>.",null,null],[3,"float32x2_t","","ARM-specific 64-bit wide vector of two packed <code>f32</code>.",null,null],[3,"int64x1_t","","ARM-specific 64-bit wide vector of one packed <code>i64</code>.",null,null],[3,"uint64x1_t","","ARM-specific 64-bit wide vector of one packed <code>u64</code>.",null,null],[3,"poly64x1_t","","ARM-specific 64-bit wide vector of one packed <code>p64</code>.",null,null],[3,"int8x16_t","","ARM-specific 128-bit wide vector of sixteen packed <code>i8</code>.",null,null],[3,"uint8x16_t","","ARM-specific 128-bit wide vector of sixteen packed <code>u8</code>.",null,null],[3,"poly8x16_t","","ARM-specific 128-bit wide vector of sixteen packed <code>p8</code>.",null,null],[3,"int16x8_t","","ARM-specific 128-bit wide vector of eight packed <code>i16</code>.",null,null],[3,"uint16x8_t","","ARM-specific 128-bit wide vector of eight packed <code>u16</code>.",null,null],[3,"poly16x8_t","","ARM-specific 128-bit wide vector of eight packed <code>p16</code>.",null,null],[3,"int32x4_t","","ARM-specific 128-bit wide vector of four packed <code>i32</code>.",null,null],[3,"uint32x4_t","","ARM-specific 128-bit wide vector of four packed <code>u32</code>.",null,null],[3,"float32x4_t","","ARM-specific 128-bit wide vector of four packed <code>f32</code>.",null,null],[3,"int64x2_t","","ARM-specific 128-bit wide vector of two packed <code>i64</code>.",null,null],[3,"uint64x2_t","","ARM-specific 128-bit wide vector of two packed <code>u64</code>.",null,null],[3,"poly64x2_t","","ARM-specific 128-bit wide vector of two packed <code>p64</code>.",null,null],[3,"int8x8x2_t","","ARM-specific type containing two <code>int8x8_t</code> vectors.",null,null],[12,"0","","",129,null],[12,"1","","",129,null],[3,"int8x8x3_t","","ARM-specific type containing three <code>int8x8_t</code> vectors.",null,null],[12,"0","","",130,null],[12,"1","","",130,null],[12,"2","","",130,null],[3,"int8x8x4_t","","ARM-specific type containing four <code>int8x8_t</code> vectors.",null,null],[12,"0","","",131,null],[12,"1","","",131,null],[12,"2","","",131,null],[12,"3","","",131,null],[3,"uint8x8x2_t","","ARM-specific type containing two <code>uint8x8_t</code> vectors.",null,null],[12,"0","","",132,null],[12,"1","","",132,null],[3,"uint8x8x3_t","","ARM-specific type containing three <code>uint8x8_t</code> vectors.",null,null],[12,"0","","",133,null],[12,"1","","",133,null],[12,"2","","",133,null],[3,"uint8x8x4_t","","ARM-specific type containing four <code>uint8x8_t</code> vectors.",null,null],[12,"0","","",134,null],[12,"1","","",134,null],[12,"2","","",134,null],[12,"3","","",134,null],[3,"poly8x8x2_t","","ARM-specific type containing two <code>poly8x8_t</code> vectors.",null,null],[12,"0","","",135,null],[12,"1","","",135,null],[3,"poly8x8x3_t","","ARM-specific type containing three <code>poly8x8_t</code> vectors.",null,null],[12,"0","","",136,null],[12,"1","","",136,null],[12,"2","","",136,null],[3,"poly8x8x4_t","","ARM-specific type containing four <code>poly8x8_t</code> vectors.",null,null],[12,"0","","",137,null],[12,"1","","",137,null],[12,"2","","",137,null],[12,"3","","",137,null],[5,"vld1_lane_s8","","Load one single-element structure to one lane of one …",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vld1q_lane_s8","","Load one single-element structure to one lane of one …",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vld1_lane_s16","","Load one single-element structure to one lane of one …",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vld1q_lane_s16","","Load one single-element structure to one lane of one …",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vld1_lane_s32","","Load one single-element structure to one lane of one …",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vld1q_lane_s32","","Load one single-element structure to one lane of one …",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vld1_lane_s64","","Load one single-element structure to one lane of one …",null,[[["int64x1_t",3]],["int64x1_t",3]]],[5,"vld1q_lane_s64","","Load one single-element structure to one lane of one …",null,[[["int64x2_t",3]],["int64x2_t",3]]],[5,"vld1_lane_u8","","Load one single-element structure to one lane of one …",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vld1q_lane_u8","","Load one single-element structure to one lane of one …",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vld1_lane_u16","","Load one single-element structure to one lane of one …",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vld1q_lane_u16","","Load one single-element structure to one lane of one …",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vld1_lane_u32","","Load one single-element structure to one lane of one …",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vld1q_lane_u32","","Load one single-element structure to one lane of one …",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vld1_lane_u64","","Load one single-element structure to one lane of one …",null,[[["uint64x1_t",3]],["uint64x1_t",3]]],[5,"vld1q_lane_u64","","Load one single-element structure to one lane of one …",null,[[["uint64x2_t",3]],["uint64x2_t",3]]],[5,"vld1_lane_p8","","Load one single-element structure to one lane of one …",null,[[["poly8x8_t",3]],["poly8x8_t",3]]],[5,"vld1q_lane_p8","","Load one single-element structure to one lane of one …",null,[[["poly8x16_t",3]],["poly8x16_t",3]]],[5,"vld1_lane_p16","","Load one single-element structure to one lane of one …",null,[[["poly16x4_t",3]],["poly16x4_t",3]]],[5,"vld1q_lane_p16","","Load one single-element structure to one lane of one …",null,[[["poly16x8_t",3]],["poly16x8_t",3]]],[5,"vld1_lane_f32","","Load one single-element structure to one lane of one …",null,[[["float32x2_t",3]],["float32x2_t",3]]],[5,"vld1q_lane_f32","","Load one single-element structure to one lane of one …",null,[[["float32x4_t",3]],["float32x4_t",3]]],[5,"vld1_dup_s8","","Load one single-element structure and Replicate to all …",null,[[],["int8x8_t",3]]],[5,"vld1q_dup_s8","","Load one single-element structure and Replicate to all …",null,[[],["int8x16_t",3]]],[5,"vld1_dup_s16","","Load one single-element structure and Replicate to all …",null,[[],["int16x4_t",3]]],[5,"vld1q_dup_s16","","Load one single-element structure and Replicate to all …",null,[[],["int16x8_t",3]]],[5,"vld1_dup_s32","","Load one single-element structure and Replicate to all …",null,[[],["int32x2_t",3]]],[5,"vld1q_dup_s32","","Load one single-element structure and Replicate to all …",null,[[],["int32x4_t",3]]],[5,"vld1_dup_s64","","Load one single-element structure and Replicate to all …",null,[[],["int64x1_t",3]]],[5,"vld1q_dup_s64","","Load one single-element structure and Replicate to all …",null,[[],["int64x2_t",3]]],[5,"vld1_dup_u8","","Load one single-element structure and Replicate to all …",null,[[],["uint8x8_t",3]]],[5,"vld1q_dup_u8","","Load one single-element structure and Replicate to all …",null,[[],["uint8x16_t",3]]],[5,"vld1_dup_u16","","Load one single-element structure and Replicate to all …",null,[[],["uint16x4_t",3]]],[5,"vld1q_dup_u16","","Load one single-element structure and Replicate to all …",null,[[],["uint16x8_t",3]]],[5,"vld1_dup_u32","","Load one single-element structure and Replicate to all …",null,[[],["uint32x2_t",3]]],[5,"vld1q_dup_u32","","Load one single-element structure and Replicate to all …",null,[[],["uint32x4_t",3]]],[5,"vld1_dup_u64","","Load one single-element structure and Replicate to all …",null,[[],["uint64x1_t",3]]],[5,"vld1q_dup_u64","","Load one single-element structure and Replicate to all …",null,[[],["uint64x2_t",3]]],[5,"vld1_dup_p8","","Load one single-element structure and Replicate to all …",null,[[],["poly8x8_t",3]]],[5,"vld1q_dup_p8","","Load one single-element structure and Replicate to all …",null,[[],["poly8x16_t",3]]],[5,"vld1_dup_p16","","Load one single-element structure and Replicate to all …",null,[[],["poly16x4_t",3]]],[5,"vld1q_dup_p16","","Load one single-element structure and Replicate to all …",null,[[],["poly16x8_t",3]]],[5,"vld1_dup_f32","","Load one single-element structure and Replicate to all …",null,[[],["float32x2_t",3]]],[5,"vld1q_dup_f32","","Load one single-element structure and Replicate to all …",null,[[],["float32x4_t",3]]],[5,"vabs_s8","","Absolute value (wrapping).",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vabs_s16","","Absolute value (wrapping).",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vabs_s32","","Absolute value (wrapping).",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vabsq_s8","","Absolute value (wrapping).",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vabsq_s16","","Absolute value (wrapping).",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vabsq_s32","","Absolute value (wrapping).",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vpadd_s16","","Add pairwise.",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vpadd_s32","","Add pairwise.",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vpadd_s8","","Add pairwise.",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vpadd_u16","","Add pairwise.",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vpadd_u32","","Add pairwise.",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vpadd_u8","","Add pairwise.",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vqmovn_u64","","Unsigned saturating extract narrow.",null,[[["uint64x2_t",3]],["uint32x2_t",3]]],[5,"vadd_s8","","Vector add.",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vaddq_s8","","Vector add.",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vadd_s16","","Vector add.",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vaddq_s16","","Vector add.",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vadd_s32","","Vector add.",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vaddq_s32","","Vector add.",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vaddq_s64","","Vector add.",null,[[["int64x2_t",3]],["int64x2_t",3]]],[5,"vadd_u8","","Vector add.",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vaddq_u8","","Vector add.",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vadd_u16","","Vector add.",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vaddq_u16","","Vector add.",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vadd_u32","","Vector add.",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vaddq_u32","","Vector add.",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vaddq_u64","","Vector add.",null,[[["uint64x2_t",3]],["uint64x2_t",3]]],[5,"vadd_f32","","Vector add.",null,[[["float32x2_t",3]],["float32x2_t",3]]],[5,"vaddq_f32","","Vector add.",null,[[["float32x4_t",3]],["float32x4_t",3]]],[5,"vaddl_s8","","Signed Add Long (vector).",null,[[["int8x8_t",3]],["int16x8_t",3]]],[5,"vaddl_s16","","Signed Add Long (vector).",null,[[["int16x4_t",3]],["int32x4_t",3]]],[5,"vaddl_s32","","Signed Add Long (vector).",null,[[["int32x2_t",3]],["int64x2_t",3]]],[5,"vaddl_u8","","Unsigned Add Long (vector).",null,[[["uint8x8_t",3]],["uint16x8_t",3]]],[5,"vaddl_u16","","Unsigned Add Long (vector).",null,[[["uint16x4_t",3]],["uint32x4_t",3]]],[5,"vaddl_u32","","Unsigned Add Long (vector).",null,[[["uint32x2_t",3]],["uint64x2_t",3]]],[5,"vaddl_high_s8","","Signed Add Long (vector, high half).",null,[[["int8x16_t",3]],["int16x8_t",3]]],[5,"vaddl_high_s16","","Signed Add Long (vector, high half).",null,[[["int16x8_t",3]],["int32x4_t",3]]],[5,"vaddl_high_s32","","Signed Add Long (vector, high half).",null,[[["int32x4_t",3]],["int64x2_t",3]]],[5,"vaddl_high_u8","","Unsigned Add Long (vector, high half).",null,[[["uint8x16_t",3]],["uint16x8_t",3]]],[5,"vaddl_high_u16","","Unsigned Add Long (vector, high half).",null,[[["uint16x8_t",3]],["uint32x4_t",3]]],[5,"vaddl_high_u32","","Unsigned Add Long (vector, high half).",null,[[["uint32x4_t",3]],["uint64x2_t",3]]],[5,"vaddw_s8","","Signed Add Wide.",null,[[["int16x8_t",3],["int8x8_t",3]],["int16x8_t",3]]],[5,"vaddw_s16","","Signed Add Wide.",null,[[["int32x4_t",3],["int16x4_t",3]],["int32x4_t",3]]],[5,"vaddw_s32","","Signed Add Wide.",null,[[["int64x2_t",3],["int32x2_t",3]],["int64x2_t",3]]],[5,"vaddw_u8","","Unsigned Add Wide.",null,[[["uint16x8_t",3],["uint8x8_t",3]],["uint16x8_t",3]]],[5,"vaddw_u16","","Unsigned Add Wide.",null,[[["uint16x4_t",3],["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vaddw_u32","","Unsigned Add Wide.",null,[[["uint64x2_t",3],["uint32x2_t",3]],["uint64x2_t",3]]],[5,"vaddw_high_s8","","Signed Add Wide (high half).",null,[[["int16x8_t",3],["int8x16_t",3]],["int16x8_t",3]]],[5,"vaddw_high_s16","","Signed Add Wide (high half).",null,[[["int16x8_t",3],["int32x4_t",3]],["int32x4_t",3]]],[5,"vaddw_high_s32","","Signed Add Wide (high half).",null,[[["int64x2_t",3],["int32x4_t",3]],["int64x2_t",3]]],[5,"vaddw_high_u8","","Unsigned Add Wide (high half).",null,[[["uint16x8_t",3],["uint8x16_t",3]],["uint16x8_t",3]]],[5,"vaddw_high_u16","","Unsigned Add Wide (high half).",null,[[["uint16x8_t",3],["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vaddw_high_u32","","Unsigned Add Wide (high half).",null,[[["uint64x2_t",3],["uint32x4_t",3]],["uint64x2_t",3]]],[5,"vaddhn_s16","","Add returning High Narrow.",null,[[["int16x8_t",3]],["int8x8_t",3]]],[5,"vaddhn_s32","","Add returning High Narrow.",null,[[["int32x4_t",3]],["int16x4_t",3]]],[5,"vaddhn_s64","","Add returning High Narrow.",null,[[["int64x2_t",3]],["int32x2_t",3]]],[5,"vaddhn_u16","","Add returning High Narrow.",null,[[["uint16x8_t",3]],["uint8x8_t",3]]],[5,"vaddhn_u32","","Add returning High Narrow.",null,[[["uint32x4_t",3]],["uint16x4_t",3]]],[5,"vaddhn_u64","","Add returning High Narrow.",null,[[["uint64x2_t",3]],["uint32x2_t",3]]],[5,"vaddhn_high_s16","","Add returning High Narrow (high half).",null,[[["int16x8_t",3],["int8x8_t",3]],["int8x16_t",3]]],[5,"vaddhn_high_s32","","Add returning High Narrow (high half).",null,[[["int16x4_t",3],["int32x4_t",3]],["int16x8_t",3]]],[5,"vaddhn_high_s64","","Add returning High Narrow (high half).",null,[[["int64x2_t",3],["int32x2_t",3]],["int32x4_t",3]]],[5,"vaddhn_high_u16","","Add returning High Narrow (high half).",null,[[["uint16x8_t",3],["uint8x8_t",3]],["uint8x16_t",3]]],[5,"vaddhn_high_u32","","Add returning High Narrow (high half).",null,[[["uint16x4_t",3],["uint32x4_t",3]],["uint16x8_t",3]]],[5,"vaddhn_high_u64","","Add returning High Narrow (high half).",null,[[["uint32x2_t",3],["uint64x2_t",3]],["uint32x4_t",3]]],[5,"vraddhn_s16","","Rounding Add returning High Narrow.",null,[[["int16x8_t",3]],["int8x8_t",3]]],[5,"vraddhn_s32","","Rounding Add returning High Narrow.",null,[[["int32x4_t",3]],["int16x4_t",3]]],[5,"vraddhn_s64","","Rounding Add returning High Narrow.",null,[[["int64x2_t",3]],["int32x2_t",3]]],[5,"vraddhn_u16","","Rounding Add returning High Narrow.",null,[[["uint16x8_t",3]],["uint8x8_t",3]]],[5,"vraddhn_u32","","Rounding Add returning High Narrow.",null,[[["uint32x4_t",3]],["uint16x4_t",3]]],[5,"vraddhn_u64","","Rounding Add returning High Narrow.",null,[[["uint64x2_t",3]],["uint32x2_t",3]]],[5,"vraddhn_high_s16","","Rounding Add returning High Narrow (high half).",null,[[["int16x8_t",3],["int8x8_t",3]],["int8x16_t",3]]],[5,"vraddhn_high_s32","","Rounding Add returning High Narrow (high half).",null,[[["int16x4_t",3],["int32x4_t",3]],["int16x8_t",3]]],[5,"vraddhn_high_s64","","Rounding Add returning High Narrow (high half).",null,[[["int64x2_t",3],["int32x2_t",3]],["int32x4_t",3]]],[5,"vraddhn_high_u16","","Rounding Add returning High Narrow (high half).",null,[[["uint16x8_t",3],["uint8x8_t",3]],["uint8x16_t",3]]],[5,"vraddhn_high_u32","","Rounding Add returning High Narrow (high half).",null,[[["uint16x4_t",3],["uint32x4_t",3]],["uint16x8_t",3]]],[5,"vraddhn_high_u64","","Rounding Add returning High Narrow (high half).",null,[[["uint32x2_t",3],["uint64x2_t",3]],["uint32x4_t",3]]],[5,"vpaddl_s8","","Signed Add Long Pairwise.",null,[[["int8x8_t",3]],["int16x4_t",3]]],[5,"vpaddl_s16","","Signed Add Long Pairwise.",null,[[["int16x4_t",3]],["int32x2_t",3]]],[5,"vpaddl_s32","","Signed Add Long Pairwise.",null,[[["int32x2_t",3]],["int64x1_t",3]]],[5,"vpaddlq_s8","","Signed Add Long Pairwise.",null,[[["int8x16_t",3]],["int16x8_t",3]]],[5,"vpaddlq_s16","","Signed Add Long Pairwise.",null,[[["int16x8_t",3]],["int32x4_t",3]]],[5,"vpaddlq_s32","","Signed Add Long Pairwise.",null,[[["int32x4_t",3]],["int64x2_t",3]]],[5,"vpaddl_u8","","Unsigned Add Long Pairwise.",null,[[["uint8x8_t",3]],["uint16x4_t",3]]],[5,"vpaddl_u16","","Unsigned Add Long Pairwise.",null,[[["uint16x4_t",3]],["uint32x2_t",3]]],[5,"vpaddl_u32","","Unsigned Add Long Pairwise.",null,[[["uint32x2_t",3]],["uint64x1_t",3]]],[5,"vpaddlq_u8","","Unsigned Add Long Pairwise.",null,[[["uint8x16_t",3]],["uint16x8_t",3]]],[5,"vpaddlq_u16","","Unsigned Add Long Pairwise.",null,[[["uint16x8_t",3]],["uint32x4_t",3]]],[5,"vpaddlq_u32","","Unsigned Add Long Pairwise.",null,[[["uint32x4_t",3]],["uint64x2_t",3]]],[5,"vpadal_s8","","Signed Add and Accumulate Long Pairwise.",null,[[["int16x4_t",3],["int8x8_t",3]],["int16x4_t",3]]],[5,"vpadal_s16","","Signed Add and Accumulate Long Pairwise.",null,[[["int32x2_t",3],["int16x4_t",3]],["int32x2_t",3]]],[5,"vpadal_s32","","Signed Add and Accumulate Long Pairwise.",null,[[["int64x1_t",3],["int32x2_t",3]],["int64x1_t",3]]],[5,"vpadalq_s8","","Signed Add and Accumulate Long Pairwise.",null,[[["int16x8_t",3],["int8x16_t",3]],["int16x8_t",3]]],[5,"vpadalq_s16","","Signed Add and Accumulate Long Pairwise.",null,[[["int16x8_t",3],["int32x4_t",3]],["int32x4_t",3]]],[5,"vpadalq_s32","","Signed Add and Accumulate Long Pairwise.",null,[[["int64x2_t",3],["int32x4_t",3]],["int64x2_t",3]]],[5,"vpadal_u8","","Unsigned Add and Accumulate Long Pairwise.",null,[[["uint16x4_t",3],["uint8x8_t",3]],["uint16x4_t",3]]],[5,"vpadal_u16","","Unsigned Add and Accumulate Long Pairwise.",null,[[["uint32x2_t",3],["uint16x4_t",3]],["uint32x2_t",3]]],[5,"vpadal_u32","","Unsigned Add and Accumulate Long Pairwise.",null,[[["uint32x2_t",3],["uint64x1_t",3]],["uint64x1_t",3]]],[5,"vpadalq_u8","","Unsigned Add and Accumulate Long Pairwise.",null,[[["uint16x8_t",3],["uint8x16_t",3]],["uint16x8_t",3]]],[5,"vpadalq_u16","","Unsigned Add and Accumulate Long Pairwise.",null,[[["uint16x8_t",3],["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vpadalq_u32","","Unsigned Add and Accumulate Long Pairwise.",null,[[["uint64x2_t",3],["uint32x4_t",3]],["uint64x2_t",3]]],[5,"vmovn_s16","","Vector narrow integer.",null,[[["int16x8_t",3]],["int8x8_t",3]]],[5,"vmovn_s32","","Vector narrow integer.",null,[[["int32x4_t",3]],["int16x4_t",3]]],[5,"vmovn_s64","","Vector narrow integer.",null,[[["int64x2_t",3]],["int32x2_t",3]]],[5,"vmovn_u16","","Vector narrow integer.",null,[[["uint16x8_t",3]],["uint8x8_t",3]]],[5,"vmovn_u32","","Vector narrow integer.",null,[[["uint32x4_t",3]],["uint16x4_t",3]]],[5,"vmovn_u64","","Vector narrow integer.",null,[[["uint64x2_t",3]],["uint32x2_t",3]]],[5,"vmovl_s8","","Vector long move.",null,[[["int8x8_t",3]],["int16x8_t",3]]],[5,"vmovl_s16","","Vector long move.",null,[[["int16x4_t",3]],["int32x4_t",3]]],[5,"vmovl_s32","","Vector long move.",null,[[["int32x2_t",3]],["int64x2_t",3]]],[5,"vmovl_u8","","Vector long move.",null,[[["uint8x8_t",3]],["uint16x8_t",3]]],[5,"vmovl_u16","","Vector long move.",null,[[["uint16x4_t",3]],["uint32x4_t",3]]],[5,"vmovl_u32","","Vector long move.",null,[[["uint32x2_t",3]],["uint64x2_t",3]]],[5,"vrsqrte_f32","","Reciprocal square-root estimate.",null,[[["float32x2_t",3]],["float32x2_t",3]]],[5,"vmvn_s8","","Vector bitwise not.",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vmvnq_s8","","Vector bitwise not.",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vmvn_s16","","Vector bitwise not.",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vmvnq_s16","","Vector bitwise not.",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vmvn_s32","","Vector bitwise not.",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vmvnq_s32","","Vector bitwise not.",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vmvn_u8","","Vector bitwise not.",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vmvnq_u8","","Vector bitwise not.",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vmvn_u16","","Vector bitwise not.",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vmvnq_u16","","Vector bitwise not.",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vmvn_u32","","Vector bitwise not.",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vmvnq_u32","","Vector bitwise not.",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vmvn_p8","","Vector bitwise not.",null,[[["poly8x8_t",3]],["poly8x8_t",3]]],[5,"vmvnq_p8","","Vector bitwise not.",null,[[["poly8x16_t",3]],["poly8x16_t",3]]],[5,"vpmin_s8","","Folding minimum of adjacent pairs",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vpmin_s16","","Folding minimum of adjacent pairs",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vpmin_s32","","Folding minimum of adjacent pairs",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vpmin_u8","","Folding minimum of adjacent pairs",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vpmin_u16","","Folding minimum of adjacent pairs",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vpmin_u32","","Folding minimum of adjacent pairs",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vpmin_f32","","Folding minimum of adjacent pairs",null,[[["float32x2_t",3]],["float32x2_t",3]]],[5,"vpmax_s8","","Folding maximum of adjacent pairs",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vpmax_s16","","Folding maximum of adjacent pairs",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vpmax_s32","","Folding maximum of adjacent pairs",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vpmax_u8","","Folding maximum of adjacent pairs",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vpmax_u16","","Folding maximum of adjacent pairs",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vpmax_u32","","Folding maximum of adjacent pairs",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vpmax_f32","","Folding maximum of adjacent pairs",null,[[["float32x2_t",3]],["float32x2_t",3]]],[5,"vgetq_lane_u64","","Move vector element to general-purpose register",null,[[["uint64x2_t",3]]]],[5,"vget_lane_u64","","Move vector element to general-purpose register",null,[[["uint64x1_t",3]]]],[5,"vgetq_lane_u16","","Move vector element to general-purpose register",null,[[["uint16x8_t",3]]]],[5,"vgetq_lane_u32","","Move vector element to general-purpose register",null,[[["uint32x4_t",3]]]],[5,"vgetq_lane_s32","","Move vector element to general-purpose register",null,[[["int32x4_t",3]]]],[5,"vget_lane_u8","","Move vector element to general-purpose register",null,[[["uint8x8_t",3]]]],[5,"vdupq_n_s8","","Duplicate vector element to vector or scalar",null,[[],["int8x16_t",3]]],[5,"vdupq_n_u8","","Duplicate vector element to vector or scalar",null,[[],["uint8x16_t",3]]],[5,"vmovq_n_u8","","Duplicate vector element to vector or scalar",null,[[],["uint8x16_t",3]]],[5,"vreinterpret_u64_u32","","Vector reinterpret cast operation",null,[[["uint32x2_t",3]],["uint64x1_t",3]]],[5,"vreinterpretq_s8_u8","","Vector reinterpret cast operation",null,[[["uint8x16_t",3]],["int8x16_t",3]]],[5,"vreinterpretq_u16_u8","","Vector reinterpret cast operation",null,[[["uint8x16_t",3]],["uint16x8_t",3]]],[5,"vreinterpretq_u32_u8","","Vector reinterpret cast operation",null,[[["uint8x16_t",3]],["uint32x4_t",3]]],[5,"vreinterpretq_u64_u8","","Vector reinterpret cast operation",null,[[["uint8x16_t",3]],["uint64x2_t",3]]],[5,"vreinterpretq_u8_s8","","Vector reinterpret cast operation",null,[[["int8x16_t",3]],["uint8x16_t",3]]],[5,"vshrq_n_u8","","Unsigned shift right",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vshlq_n_u8","","Shift right",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vextq_s8","","Extract vector from pair of vectors",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vextq_u8","","Extract vector from pair of vectors",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vcnt_s8","","Population count per byte.",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vcntq_s8","","Population count per byte.",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vcnt_u8","","Population count per byte.",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vcntq_u8","","Population count per byte.",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vcnt_p8","","Population count per byte.",null,[[["poly8x8_t",3]],["poly8x8_t",3]]],[5,"vcntq_p8","","Population count per byte.",null,[[["poly8x16_t",3]],["poly8x16_t",3]]],[5,"vrev16_s8","","Reversing vector elements (swap endianness)",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vrev16q_s8","","Reversing vector elements (swap endianness)",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vrev16_u8","","Reversing vector elements (swap endianness)",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vrev16q_u8","","Reversing vector elements (swap endianness)",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vrev16_p8","","Reversing vector elements (swap endianness)",null,[[["poly8x8_t",3]],["poly8x8_t",3]]],[5,"vrev16q_p8","","Reversing vector elements (swap endianness)",null,[[["poly8x16_t",3]],["poly8x16_t",3]]],[5,"vrev32_s8","","Reversing vector elements (swap endianness)",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vrev32q_s8","","Reversing vector elements (swap endianness)",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vrev32_u8","","Reversing vector elements (swap endianness)",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vrev32q_u8","","Reversing vector elements (swap endianness)",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vrev32_u16","","Reversing vector elements (swap endianness)",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vrev32q_u16","","Reversing vector elements (swap endianness)",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vrev32_p8","","Reversing vector elements (swap endianness)",null,[[["poly8x8_t",3]],["poly8x8_t",3]]],[5,"vrev32q_p8","","Reversing vector elements (swap endianness)",null,[[["poly8x16_t",3]],["poly8x16_t",3]]],[5,"vrev64_s8","","Reversing vector elements (swap endianness)",null,[[["int8x8_t",3]],["int8x8_t",3]]],[5,"vrev64q_s8","","Reversing vector elements (swap endianness)",null,[[["int8x16_t",3]],["int8x16_t",3]]],[5,"vrev64_s16","","Reversing vector elements (swap endianness)",null,[[["int16x4_t",3]],["int16x4_t",3]]],[5,"vrev64q_s16","","Reversing vector elements (swap endianness)",null,[[["int16x8_t",3]],["int16x8_t",3]]],[5,"vrev64_s32","","Reversing vector elements (swap endianness)",null,[[["int32x2_t",3]],["int32x2_t",3]]],[5,"vrev64q_s32","","Reversing vector elements (swap endianness)",null,[[["int32x4_t",3]],["int32x4_t",3]]],[5,"vrev64_u8","","Reversing vector elements (swap endianness)",null,[[["uint8x8_t",3]],["uint8x8_t",3]]],[5,"vrev64q_u8","","Reversing vector elements (swap endianness)",null,[[["uint8x16_t",3]],["uint8x16_t",3]]],[5,"vrev64_u16","","Reversing vector elements (swap endianness)",null,[[["uint16x4_t",3]],["uint16x4_t",3]]],[5,"vrev64q_u16","","Reversing vector elements (swap endianness)",null,[[["uint16x8_t",3]],["uint16x8_t",3]]],[5,"vrev64_u32","","Reversing vector elements (swap endianness)",null,[[["uint32x2_t",3]],["uint32x2_t",3]]],[5,"vrev64q_u32","","Reversing vector elements (swap endianness)",null,[[["uint32x4_t",3]],["uint32x4_t",3]]],[5,"vrev64_f32","","Reversing vector elements (swap endianness)",null,[[["float32x2_t",3]],["float32x2_t",3]]],[5,"vrev64q_f32","","Reversing vector elements (swap endianness)",null,[[["float32x4_t",3]],["float32x4_t",3]]],[5,"vrev64_p8","","Reversing vector elements (swap endianness)",null,[[["poly8x8_t",3]],["poly8x8_t",3]]],[5,"vrev64q_p8","","Reversing vector elements (swap endianness)",null,[[["poly8x16_t",3]],["poly8x16_t",3]]],[5,"vrev64_p16","","Reversing vector elements (swap endianness)",null,[[["poly16x4_t",3]],["poly16x4_t",3]]],[5,"vrev64q_p16","","Reversing vector elements (swap endianness)",null,[[["poly16x8_t",3]],["poly16x8_t",3]]],[3,"SY","","Full system is the required shareability domain, reads …",null,null],[5,"__dmb","","Generates a DMB (data memory barrier) instruction or …",null,[[]]],[5,"__dsb","","Generates a DSB (data synchronization barrier) …",null,[[]]],[5,"__isb","","Generates an ISB (instruction synchronization barrier) …",null,[[]]],[5,"__nop","","Generates an unspecified no-op instruction.",null,[[]]],[3,"APSR","","Application Program Status Register",null,null],[5,"__rsr","","Reads a 32-bit system register",null,[[]]],[5,"__rsrp","","Reads a system register containing an address",null,[[]]],[5,"__wsr","","Writes a 32-bit system register",null,[[]]],[5,"__wsrp","","Writes a system register containing an address",null,[[]]],[0,"wasm32","core::arch","Platform-specific intrinsics for the <code>wasm32</code> platform.",null,null],[5,"memory_atomic_wait32","core::arch::wasm32","Corresponding intrinsic to wasm\'s <code>memory.atomic.wait32</code> …",null,[[]]],[5,"memory_atomic_wait64","","Corresponding intrinsic to wasm\'s <code>memory.atomic.wait64</code> …",null,[[]]],[5,"memory_atomic_notify","","Corresponding intrinsic to wasm\'s <code>memory.atomic.notify</code> …",null,[[]]],[3,"v128","","WASM-specific 128-bit wide SIMD vector type.",null,null],[5,"v128_load","","Loads a <code>v128</code> vector from the given heap address.",null,[[],["v128",3]]],[5,"i16x8_load8x8_s","","Load eight 8-bit integers and sign extend each one to a …",null,[[],["v128",3]]],[5,"i16x8_load8x8_u","","Load eight 8-bit integers and zero extend each one to a …",null,[[],["v128",3]]],[5,"i32x4_load16x4_s","","Load four 16-bit integers and sign extend each one to a …",null,[[],["v128",3]]],[5,"i32x4_load16x4_u","","Load four 16-bit integers and zero extend each one to a …",null,[[],["v128",3]]],[5,"i64x2_load32x2_s","","Load two 32-bit integers and sign extend each one to a …",null,[[],["v128",3]]],[5,"i64x2_load32x2_u","","Load two 32-bit integers and zero extend each one to a …",null,[[],["v128",3]]],[5,"v8x16_load_splat","","Load a single element and splat to all lanes of a v128 …",null,[[],["v128",3]]],[5,"v16x8_load_splat","","Load a single element and splat to all lanes of a v128 …",null,[[],["v128",3]]],[5,"v32x4_load_splat","","Load a single element and splat to all lanes of a v128 …",null,[[],["v128",3]]],[5,"v64x2_load_splat","","Load a single element and splat to all lanes of a v128 …",null,[[],["v128",3]]],[5,"v128_store","","Stores a <code>v128</code> vector to the given heap address.",null,[[["v128",3]]]],[5,"i8x16_const","","Materializes a constant SIMD value from the immediate …",null,[[],["v128",3]]],[5,"i16x8_const","","Materializes a constant SIMD value from the immediate …",null,[[],["v128",3]]],[5,"i32x4_const","","Materializes a constant SIMD value from the immediate …",null,[[],["v128",3]]],[5,"i64x2_const","","Materializes a constant SIMD value from the immediate …",null,[[],["v128",3]]],[5,"f32x4_const","","Materializes a constant SIMD value from the immediate …",null,[[],["v128",3]]],[5,"f64x2_const","","Materializes a constant SIMD value from the immediate …",null,[[],["v128",3]]],[5,"v8x16_shuffle","","Returns a new vector with lanes selected from the lanes …",null,[[["v128",3]],["v128",3]]],[5,"v16x8_shuffle","","Same as [<code>v8x16_shuffle</code>], except operates as if the inputs …",null,[[["v128",3]],["v128",3]]],[5,"v32x4_shuffle","","Same as [<code>v8x16_shuffle</code>], except operates as if the inputs …",null,[[["v128",3]],["v128",3]]],[5,"v64x2_shuffle","","Same as [<code>v8x16_shuffle</code>], except operates as if the inputs …",null,[[["v128",3]],["v128",3]]],[5,"v8x16_swizzle","","Returns a new vector with lanes selected from the lanes …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_splat","","Creates a vector with identical lanes.",null,[[],["v128",3]]],[5,"i16x8_splat","","Creates a vector with identical lanes.",null,[[],["v128",3]]],[5,"i32x4_splat","","Creates a vector with identical lanes.",null,[[],["v128",3]]],[5,"i64x2_splat","","Creates a vector with identical lanes.",null,[[],["v128",3]]],[5,"f32x4_splat","","Creates a vector with identical lanes.",null,[[],["v128",3]]],[5,"f64x2_splat","","Creates a vector with identical lanes.",null,[[],["v128",3]]],[5,"i8x16_extract_lane","","Extracts a lane from a 128-bit vector interpreted as 16 …",null,[[["v128",3]]]],[5,"i8x16_replace_lane","","Replaces a lane from a 128-bit vector interpreted as 16 …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_extract_lane","","Extracts a lane from a 128-bit vector interpreted as 8 …",null,[[["v128",3]]]],[5,"i16x8_replace_lane","","Replaces a lane from a 128-bit vector interpreted as 8 …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_extract_lane","","Extracts a lane from a 128-bit vector interpreted as 4 …",null,[[["v128",3]]]],[5,"i32x4_replace_lane","","Replaces a lane from a 128-bit vector interpreted as 4 …",null,[[["v128",3]],["v128",3]]],[5,"i64x2_extract_lane","","Extracts a lane from a 128-bit vector interpreted as 2 …",null,[[["v128",3]]]],[5,"i64x2_replace_lane","","Replaces a lane from a 128-bit vector interpreted as 2 …",null,[[["v128",3]],["v128",3]]],[5,"f32x4_extract_lane","","Extracts a lane from a 128-bit vector interpreted as 4 …",null,[[["v128",3]]]],[5,"f32x4_replace_lane","","Replaces a lane from a 128-bit vector interpreted as 4 …",null,[[["v128",3]],["v128",3]]],[5,"f64x2_extract_lane","","Extracts a lane from a 128-bit vector interpreted as 2 …",null,[[["v128",3]]]],[5,"f64x2_replace_lane","","Replaces a lane from a 128-bit vector interpreted as 2 …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_eq","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_ne","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_lt_s","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_lt_u","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_gt_s","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_gt_u","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_le_s","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_le_u","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_ge_s","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_ge_u","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_eq","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_ne","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_lt_s","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_lt_u","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_gt_s","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_gt_u","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_le_s","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_le_u","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_ge_s","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_ge_u","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_eq","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_ne","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_lt_s","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_lt_u","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_gt_s","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_gt_u","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_le_s","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_le_u","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_ge_s","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_ge_u","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"f32x4_eq","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"f32x4_ne","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"f32x4_lt","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"f32x4_gt","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"f32x4_le","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"f32x4_ge","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"f64x2_eq","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"f64x2_ne","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"f64x2_lt","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"f64x2_gt","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"f64x2_le","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"f64x2_ge","","Compares two 128-bit vectors as if they were two vectors …",null,[[["v128",3]],["v128",3]]],[5,"v128_not","","Flips each bit of the 128-bit input vector.",null,[[["v128",3]],["v128",3]]],[5,"v128_and","","Performs a bitwise and of the two input 128-bit vectors, …",null,[[["v128",3]],["v128",3]]],[5,"v128_andnot","","Bitwise AND of bits of <code>a</code> and the logical inverse of bits …",null,[[["v128",3]],["v128",3]]],[5,"v128_or","","Performs a bitwise or of the two input 128-bit vectors, …",null,[[["v128",3]],["v128",3]]],[5,"v128_xor","","Performs a bitwise xor of the two input 128-bit vectors, …",null,[[["v128",3]],["v128",3]]],[5,"v128_bitselect","","Use the bitmask in <code>c</code> to select bits from <code>v1</code> when 1 and <code>v2</code> …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_abs","","Lane-wise wrapping absolute value.",null,[[["v128",3]],["v128",3]]],[5,"i8x16_neg","","Negates a 128-bit vectors intepreted as sixteen 8-bit …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_any_true","","Returns 1 if any lane is nonzero or 0 if all lanes are …",null,[[["v128",3]]]],[5,"i8x16_all_true","","Returns 1 if all lanes are nonzero or 0 if any lane is …",null,[[["v128",3]]]],[5,"i8x16_narrow_i16x8_s","","Converts two input vectors into a smaller lane vector by …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_narrow_i16x8_u","","Converts two input vectors into a smaller lane vector by …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_shl","","Shifts each lane to the left by the specified number of …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_shr_s","","Shifts each lane to the right by the specified number of …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_shr_u","","Shifts each lane to the right by the specified number of …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_add","","Adds two 128-bit vectors as if they were two packed …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_add_saturate_s","","Adds two 128-bit vectors as if they were two packed …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_add_saturate_u","","Adds two 128-bit vectors as if they were two packed …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_sub","","Subtracts two 128-bit vectors as if they were two packed …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_sub_saturate_s","","Subtracts two 128-bit vectors as if they were two packed …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_sub_saturate_u","","Subtracts two 128-bit vectors as if they were two packed …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_min_s","","Compares lane-wise signed integers, and returns the …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_min_u","","Compares lane-wise unsigned integers, and returns the …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_max_s","","Compares lane-wise signed integers, and returns the …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_max_u","","Compares lane-wise unsigned integers, and returns the …",null,[[["v128",3]],["v128",3]]],[5,"i8x16_avgr_u","","Lane-wise rounding average.",null,[[["v128",3]],["v128",3]]],[5,"i16x8_abs","","Lane-wise wrapping absolute value.",null,[[["v128",3]],["v128",3]]],[5,"i16x8_neg","","Negates a 128-bit vectors intepreted as eight 16-bit …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_any_true","","Returns 1 if any lane is nonzero or 0 if all lanes are …",null,[[["v128",3]]]],[5,"i16x8_all_true","","Returns 1 if all lanes are nonzero or 0 if any lane is …",null,[[["v128",3]]]],[5,"i16x8_narrow_i32x4_s","","Converts two input vectors into a smaller lane vector by …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_narrow_i32x4_u","","Converts two input vectors into a smaller lane vector by …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_widen_low_i8x16_s","","Converts low half of the smaller lane vector to a larger …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_widen_high_i8x16_s","","Converts high half of the smaller lane vector to a larger …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_widen_low_i8x16_u","","Converts low half of the smaller lane vector to a larger …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_widen_high_i8x16_u","","Converts high half of the smaller lane vector to a larger …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_shl","","Shifts each lane to the left by the specified number of …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_shr_s","","Shifts each lane to the right by the specified number of …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_shr_u","","Shifts each lane to the right by the specified number of …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_add","","Adds two 128-bit vectors as if they were two packed eight …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_add_saturate_s","","Adds two 128-bit vectors as if they were two packed eight …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_add_saturate_u","","Adds two 128-bit vectors as if they were two packed eight …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_sub","","Subtracts two 128-bit vectors as if they were two packed …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_sub_saturate_s","","Subtracts two 128-bit vectors as if they were two packed …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_sub_saturate_u","","Subtracts two 128-bit vectors as if they were two packed …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_mul","","Multiplies two 128-bit vectors as if they were two packed …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_min_s","","Compares lane-wise signed integers, and returns the …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_min_u","","Compares lane-wise unsigned integers, and returns the …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_max_s","","Compares lane-wise signed integers, and returns the …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_max_u","","Compares lane-wise unsigned integers, and returns the …",null,[[["v128",3]],["v128",3]]],[5,"i16x8_avgr_u","","Lane-wise rounding average.",null,[[["v128",3]],["v128",3]]],[5,"i32x4_abs","","Lane-wise wrapping absolute value.",null,[[["v128",3]],["v128",3]]],[5,"i32x4_neg","","Negates a 128-bit vectors intepreted as four 32-bit …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_any_true","","Returns 1 if any lane is nonzero or 0 if all lanes are …",null,[[["v128",3]]]],[5,"i32x4_all_true","","Returns 1 if all lanes are nonzero or 0 if any lane is …",null,[[["v128",3]]]],[5,"i32x4_widen_low_i16x8_s","","Converts low half of the smaller lane vector to a larger …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_widen_high_i16x8_s","","Converts high half of the smaller lane vector to a larger …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_widen_low_i16x8_u","","Converts low half of the smaller lane vector to a larger …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_widen_high_i16x8_u","","Converts high half of the smaller lane vector to a larger …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_shl","","Shifts each lane to the left by the specified number of …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_shr_s","","Shifts each lane to the right by the specified number of …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_shr_u","","Shifts each lane to the right by the specified number of …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_add","","Adds two 128-bit vectors as if they were two packed four …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_sub","","Subtracts two 128-bit vectors as if they were two packed …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_mul","","Multiplies two 128-bit vectors as if they were two packed …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_min_s","","Compares lane-wise signed integers, and returns the …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_min_u","","Compares lane-wise unsigned integers, and returns the …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_max_s","","Compares lane-wise signed integers, and returns the …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_max_u","","Compares lane-wise unsigned integers, and returns the …",null,[[["v128",3]],["v128",3]]],[5,"i64x2_neg","","Negates a 128-bit vectors intepreted as two 64-bit signed …",null,[[["v128",3]],["v128",3]]],[5,"i64x2_shl","","Shifts each lane to the left by the specified number of …",null,[[["v128",3]],["v128",3]]],[5,"i64x2_shr_s","","Shifts each lane to the right by the specified number of …",null,[[["v128",3]],["v128",3]]],[5,"i64x2_shr_u","","Shifts each lane to the right by the specified number of …",null,[[["v128",3]],["v128",3]]],[5,"i64x2_add","","Adds two 128-bit vectors as if they were two packed two …",null,[[["v128",3]],["v128",3]]],[5,"i64x2_sub","","Subtracts two 128-bit vectors as if they were two packed …",null,[[["v128",3]],["v128",3]]],[5,"i64x2_mul","","Multiplies two 128-bit vectors as if they were two packed …",null,[[["v128",3]],["v128",3]]],[5,"f32x4_abs","","Calculates the absolute value of each lane of a 128-bit …",null,[[["v128",3]],["v128",3]]],[5,"f32x4_neg","","Negates each lane of a 128-bit vector interpreted as four …",null,[[["v128",3]],["v128",3]]],[5,"f32x4_sqrt","","Calculates the square root of each lane of a 128-bit …",null,[[["v128",3]],["v128",3]]],[5,"f32x4_add","","Adds pairwise lanes of two 128-bit vectors interpreted as …",null,[[["v128",3]],["v128",3]]],[5,"f32x4_sub","","Subtracts pairwise lanes of two 128-bit vectors …",null,[[["v128",3]],["v128",3]]],[5,"f32x4_mul","","Multiplies pairwise lanes of two 128-bit vectors …",null,[[["v128",3]],["v128",3]]],[5,"f32x4_div","","Divides pairwise lanes of two 128-bit vectors interpreted …",null,[[["v128",3]],["v128",3]]],[5,"f32x4_min","","Calculates the minimum of pairwise lanes of two 128-bit …",null,[[["v128",3]],["v128",3]]],[5,"f32x4_max","","Calculates the maximum of pairwise lanes of two 128-bit …",null,[[["v128",3]],["v128",3]]],[5,"f64x2_abs","","Calculates the absolute value of each lane of a 128-bit …",null,[[["v128",3]],["v128",3]]],[5,"f64x2_neg","","Negates each lane of a 128-bit vector interpreted as two …",null,[[["v128",3]],["v128",3]]],[5,"f64x2_sqrt","","Calculates the square root of each lane of a 128-bit …",null,[[["v128",3]],["v128",3]]],[5,"f64x2_add","","Adds pairwise lanes of two 128-bit vectors interpreted as …",null,[[["v128",3]],["v128",3]]],[5,"f64x2_sub","","Subtracts pairwise lanes of two 128-bit vectors …",null,[[["v128",3]],["v128",3]]],[5,"f64x2_mul","","Multiplies pairwise lanes of two 128-bit vectors …",null,[[["v128",3]],["v128",3]]],[5,"f64x2_div","","Divides pairwise lanes of two 128-bit vectors interpreted …",null,[[["v128",3]],["v128",3]]],[5,"f64x2_min","","Calculates the minimum of pairwise lanes of two 128-bit …",null,[[["v128",3]],["v128",3]]],[5,"f64x2_max","","Calculates the maximum of pairwise lanes of two 128-bit …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_trunc_sat_f32x4_s","","Converts a 128-bit vector interpreted as four 32-bit …",null,[[["v128",3]],["v128",3]]],[5,"i32x4_trunc_sat_f32x4_u","","Converts a 128-bit vector interpreted as four 32-bit …",null,[[["v128",3]],["v128",3]]],[5,"f32x4_convert_i32x4_s","","Converts a 128-bit vector interpreted as four 32-bit …",null,[[["v128",3]],["v128",3]]],[5,"f32x4_convert_i32x4_u","","Converts a 128-bit vector interpreted as four 32-bit …",null,[[["v128",3]],["v128",3]]],[5,"memory_size","","Corresponding intrinsic to wasm\'s <code>memory.size</code> instruction",null,[[]]],[5,"memory_grow","","Corresponding intrinsic to wasm\'s <code>memory.grow</code> instruction",null,[[]]],[5,"unreachable","","Generates the trap instruction <code>UNREACHABLE</code>",null,[[]]],[0,"mips","core::arch","Platform-specific intrinsics for the <code>mips</code> platform.",null,null],[5,"break_","core::arch::mips","Generates the trap instruction <code>BREAK</code>",null,[[]]],[0,"mips64","core::arch","Platform-specific intrinsics for the <code>mips64</code> platform.",null,null],[5,"break_","core::arch::mips64","Generates the trap instruction <code>BREAK</code>",null,[[]]],[0,"powerpc","core::arch","Platform-specific intrinsics for the <code>PowerPC</code> platform.",null,null],[3,"vector_signed_long","core::arch::powerpc","PowerPC-specific 128-bit wide vector of two packed <code>i64</code>",null,null],[3,"vector_unsigned_long","","PowerPC-specific 128-bit wide vector of two packed <code>u64</code>",null,null],[3,"vector_bool_long","","PowerPC-specific 128-bit wide vector mask of two elements",null,null],[3,"vector_double","","PowerPC-specific 128-bit wide vector of two packed <code>f64</code>",null,null],[5,"vec_xxpermdi","","Vector permute.",null,[[]]],[5,"trap","","Generates the trap instruction <code>TRAP</code>",null,[[]]],[0,"powerpc64","core::arch","Platform-specific intrinsics for the <code>PowerPC64</code> platform.",null,null],[3,"vector_signed_long","core::arch::powerpc64","PowerPC-specific 128-bit wide vector of two packed <code>i64</code>",null,null],[3,"vector_unsigned_long","","PowerPC-specific 128-bit wide vector of two packed <code>u64</code>",null,null],[3,"vector_bool_long","","PowerPC-specific 128-bit wide vector mask of two elements",null,null],[3,"vector_double","","PowerPC-specific 128-bit wide vector of two packed <code>f64</code>",null,null],[5,"vec_xxpermdi","","Vector permute.",null,[[]]],[5,"trap","","Generates the trap instruction <code>TRAP</code>",null,[[]]],[0,"nvptx","core::arch","Platform-specific intrinsics for the <code>NVPTX</code> platform.",null,null],[5,"vprintf","core::arch::nvptx","Print formatted output from a kernel to a host-side …",null,null],[5,"malloc","","Allocate memory dynamically from a fixed-size heap in …",null,null],[5,"free","","Free previously dynamically allocated memory.",null,null],[5,"_syncthreads","","Synchronizes all threads in the block.",null,[[]]],[5,"_block_dim_x","","x-th thread-block dimension.",null,[[]]],[5,"_block_dim_y","","y-th thread-block dimension.",null,[[]]],[5,"_block_dim_z","","z-th thread-block dimension.",null,[[]]],[5,"_block_idx_x","","x-th thread-block index.",null,[[]]],[5,"_block_idx_y","","y-th thread-block index.",null,[[]]],[5,"_block_idx_z","","z-th thread-block index.",null,[[]]],[5,"_grid_dim_x","","x-th block-grid dimension.",null,[[]]],[5,"_grid_dim_y","","y-th block-grid dimension.",null,[[]]],[5,"_grid_dim_z","","z-th block-grid dimension.",null,[[]]],[5,"_thread_idx_x","","x-th thread index.",null,[[]]],[5,"_thread_idx_y","","y-th thread index.",null,[[]]],[5,"_thread_idx_z","","z-th thread index.",null,[[]]],[5,"trap","","Generates the trap instruction <code>TRAP</code>",null,[[]]],[5,"__assert_fail","","Syscall to be used whenever the <em>assert expression …",null,[[]]],[14,"panic","core","Panics the current thread.",null,null],[14,"assert_eq","","Asserts that two expressions are equal to each other …",null,null],[14,"assert_ne","","Asserts that two expressions are not equal to each other …",null,null],[14,"debug_assert","","Asserts that a boolean expression is <code>true</code> at runtime.",null,null],[14,"debug_assert_eq","","Asserts that two expressions are equal to each other.",null,null],[14,"debug_assert_ne","","Asserts that two expressions are not equal to each other.",null,null],[14,"matches","","Returns whether the given expression matches any of the …",null,null],[14,"try","","Unwraps a result or propagates its error.",null,null],[14,"write","","Writes formatted data into a buffer.",null,null],[14,"writeln","","Write formatted data into a buffer, with a newline …",null,null],[14,"unreachable","","Indicates unreachable code.",null,null],[14,"unimplemented","","Indicates unimplemented code by panicking with a message …",null,null],[14,"todo","","Indicates unfinished code.",null,null],[14,"compile_error","","Causes compilation to fail with the given error message …",null,null],[14,"format_args","","Constructs parameters for the other string-formatting …",null,null],[14,"format_args_nl","","Same as <code>format_args</code>, but adds a newline in the end.",null,null],[14,"env","","Inspects an environment variable at compile time.",null,null],[14,"option_env","","Optionally inspects an environment variable at compile …",null,null],[14,"concat_idents","","Concatenates identifiers into one identifier.",null,null],[14,"concat","","Concatenates literals into a static string slice.",null,null],[14,"line","","Expands to the line number on which it was invoked.",null,null],[14,"column","","Expands to the column number at which it was invoked.",null,null],[14,"file","","Expands to the file name in which it was invoked.",null,null],[14,"stringify","","Stringifies its arguments.",null,null],[14,"include_str","","Includes a UTF-8 encoded file as a string.",null,null],[14,"include_bytes","","Includes a file as a reference to a byte array.",null,null],[14,"module_path","","Expands to a string that represents the current module …",null,null],[14,"cfg","","Evaluates boolean combinations of configuration flags at …",null,null],[14,"include","","Parses a file as an expression or an item according to …",null,null],[14,"assert","","Asserts that a boolean expression is <code>true</code> at runtime.",null,null],[14,"asm","","Inline assembly.",null,null],[14,"llvm_asm","","LLVM-style inline assembly.",null,null],[14,"global_asm","","Module-level inline assembly.",null,null],[14,"log_syntax","","Prints passed tokens into the standard output.",null,null],[14,"trace_macros","","Enables or disables tracing functionality used for …",null,null],[14,"test","","Attribute macro applied to a function to turn it into a …",null,null],[14,"bench","","Attribute macro applied to a function to turn it into a …",null,null],[14,"test_case","","An implementation detail of the <code>#[test]</code> and <code>#[bench]</code> …",null,null],[14,"global_allocator","","Attribute macro applied to a static to register it as a …",null,null],[14,"cfg_accessible","","Keeps the item it\'s applied to if the passed path is …",null,null],[14,"RustcDecodable","","Unstable implementation detail of the <code>rustc</code> compiler, do …",null,null],[14,"RustcEncodable","","Unstable implementation detail of the <code>rustc</code> compiler, do …",null,null],[14,"raw_const","","Create a <code>const</code> raw pointer to a place, without creating …",null,null],[14,"raw_mut","","Create a <code>mut</code> raw pointer to a place, without creating an …",null,null],[14,"Clone","","Derive macro generating an impl of the trait <code>Clone</code>.",null,null],[14,"PartialEq","","Derive macro generating an impl of the trait <code>PartialEq</code>.",null,null],[14,"Eq","","Derive macro generating an impl of the trait <code>Eq</code>.",null,null],[14,"Ord","","Derive macro generating an impl of the trait <code>Ord</code>.",null,null],[14,"PartialOrd","","Derive macro generating an impl of the trait <code>PartialOrd</code>.",null,null],[14,"Default","","Derive macro generating an impl of the trait <code>Default</code>.",null,null],[14,"Copy","","Derive macro generating an impl of the trait <code>Copy</code>.",null,null],[14,"Debug","","Derive macro generating an impl of the trait <code>Debug</code>.",null,null],[14,"Hash","","Derive macro generating an impl of the trait <code>Hash</code>.",null,null],[14,"ready","","Extracts the successful type of a <code>Poll<T></code>.",null,null],[11,"borrow","core::num","",147,[[]]],[11,"borrow_mut","","",147,[[]]],[11,"into","","",147,[[]]],[11,"from","","",147,[[]]],[11,"try_into","","",147,[[],["result",4]]],[11,"try_from","","",147,[[],["result",4]]],[11,"type_id","","",147,[[],["typeid",3]]],[11,"borrow","","",148,[[]]],[11,"borrow_mut","","",148,[[]]],[11,"into","","",148,[[]]],[11,"from","","",148,[[]]],[11,"from","","",148,[[]]],[11,"try_into","","",148,[[],["result",4]]],[11,"try_from","","",148,[[],["result",4]]],[11,"type_id","","",148,[[],["typeid",3]]],[11,"borrow","","",149,[[]]],[11,"borrow_mut","","",149,[[]]],[11,"into","","",149,[[]]],[11,"from","","",149,[[]]],[11,"try_into","","",149,[[],["result",4]]],[11,"try_from","","",149,[[],["result",4]]],[11,"type_id","","",149,[[],["typeid",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"into","","",1,[[]]],[11,"from","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"try_from","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"borrow","","",150,[[]]],[11,"borrow_mut","","",150,[[]]],[11,"into","","",150,[[]]],[11,"from","","",150,[[]]],[11,"try_into","","",150,[[],["result",4]]],[11,"try_from","","",150,[[],["result",4]]],[11,"type_id","","",150,[[],["typeid",3]]],[11,"borrow","","",151,[[]]],[11,"borrow_mut","","",151,[[]]],[11,"into","","",151,[[]]],[11,"from","","",151,[[]]],[11,"try_into","","",151,[[],["result",4]]],[11,"try_from","","",151,[[],["result",4]]],[11,"type_id","","",151,[[],["typeid",3]]],[11,"borrow","","",152,[[]]],[11,"borrow_mut","","",152,[[]]],[11,"into","","",152,[[]]],[11,"from","","",152,[[]]],[11,"try_into","","",152,[[],["result",4]]],[11,"try_from","","",152,[[],["result",4]]],[11,"type_id","","",152,[[],["typeid",3]]],[11,"borrow","","",153,[[]]],[11,"borrow_mut","","",153,[[]]],[11,"into","","",153,[[]]],[11,"from","","",153,[[]]],[11,"try_into","","",153,[[],["result",4]]],[11,"try_from","","",153,[[],["result",4]]],[11,"type_id","","",153,[[],["typeid",3]]],[11,"borrow","","",154,[[]]],[11,"borrow_mut","","",154,[[]]],[11,"into","","",154,[[]]],[11,"from","","",154,[[]]],[11,"try_into","","",154,[[],["result",4]]],[11,"try_from","","",154,[[],["result",4]]],[11,"type_id","","",154,[[],["typeid",3]]],[11,"borrow","","",155,[[]]],[11,"borrow_mut","","",155,[[]]],[11,"into","","",155,[[]]],[11,"from","","",155,[[]]],[11,"try_into","","",155,[[],["result",4]]],[11,"try_from","","",155,[[],["result",4]]],[11,"type_id","","",155,[[],["typeid",3]]],[11,"borrow","","",156,[[]]],[11,"borrow_mut","","",156,[[]]],[11,"into","","",156,[[]]],[11,"from","","",156,[[]]],[11,"try_into","","",156,[[],["result",4]]],[11,"try_from","","",156,[[],["result",4]]],[11,"type_id","","",156,[[],["typeid",3]]],[11,"borrow","","",157,[[]]],[11,"borrow_mut","","",157,[[]]],[11,"into","","",157,[[]]],[11,"from","","",157,[[]]],[11,"try_into","","",157,[[],["result",4]]],[11,"try_from","","",157,[[],["result",4]]],[11,"type_id","","",157,[[],["typeid",3]]],[11,"borrow","","",158,[[]]],[11,"borrow_mut","","",158,[[]]],[11,"into","","",158,[[]]],[11,"from","","",158,[[]]],[11,"try_into","","",158,[[],["result",4]]],[11,"try_from","","",158,[[],["result",4]]],[11,"type_id","","",158,[[],["typeid",3]]],[11,"borrow","","",159,[[]]],[11,"borrow_mut","","",159,[[]]],[11,"into","","",159,[[]]],[11,"from","","",159,[[]]],[11,"try_into","","",159,[[],["result",4]]],[11,"try_from","","",159,[[],["result",4]]],[11,"type_id","","",159,[[],["typeid",3]]],[11,"borrow","","",160,[[]]],[11,"borrow_mut","","",160,[[]]],[11,"into","","",160,[[]]],[11,"from","","",160,[[]]],[11,"try_into","","",160,[[],["result",4]]],[11,"try_from","","",160,[[],["result",4]]],[11,"type_id","","",160,[[],["typeid",3]]],[11,"borrow","","",161,[[]]],[11,"borrow_mut","","",161,[[]]],[11,"into","","",161,[[]]],[11,"from","","",161,[[]]],[11,"try_into","","",161,[[],["result",4]]],[11,"try_from","","",161,[[],["result",4]]],[11,"type_id","","",161,[[],["typeid",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"into","","",0,[[]]],[11,"from","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"try_from","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"into","","",2,[[]]],[11,"from","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"try_from","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"borrow","core::mem","",162,[[]]],[11,"borrow_mut","","",162,[[]]],[11,"into","","",162,[[]]],[11,"from","","",162,[[]]],[11,"try_into","","",162,[[],["result",4]]],[11,"try_from","","",162,[[],["result",4]]],[11,"type_id","","",162,[[],["typeid",3]]],[11,"borrow","","",163,[[]]],[11,"borrow_mut","","",163,[[]]],[11,"into","","",163,[[]]],[11,"from","","",163,[[]]],[11,"try_into","","",163,[[],["result",4]]],[11,"try_from","","",163,[[],["result",4]]],[11,"type_id","","",163,[[],["typeid",3]]],[11,"borrow","","",164,[[]]],[11,"borrow_mut","","",164,[[]]],[11,"into","","",164,[[]]],[11,"from","","",164,[[]]],[11,"try_into","","",164,[[],["result",4]]],[11,"try_from","","",164,[[],["result",4]]],[11,"type_id","","",164,[[],["typeid",3]]],[11,"borrow","core::ptr","",165,[[]]],[11,"borrow_mut","","",165,[[]]],[11,"into","","",165,[[]]],[11,"from","","",165,[[]]],[11,"try_into","","",165,[[],["result",4]]],[11,"try_from","","",165,[[],["result",4]]],[11,"type_id","","",165,[[],["typeid",3]]],[11,"borrow","core::cmp","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"into","","",7,[[]]],[11,"from","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"try_from","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"into","","",8,[[]]],[11,"from","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"try_from","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"borrow","core::convert","",166,[[]]],[11,"borrow_mut","","",166,[[]]],[11,"into","","",166,[[]]],[11,"from","","",166,[[]]],[11,"from","","",166,[[]]],[11,"try_into","","",166,[[],["result",4]]],[11,"try_from","","",166,[[],["result",4]]],[11,"type_id","","",166,[[],["typeid",3]]],[11,"borrow","core::marker","",167,[[]]],[11,"borrow_mut","","",167,[[]]],[11,"into","","",167,[[]]],[11,"from","","",167,[[]]],[11,"try_into","","",167,[[],["result",4]]],[11,"try_from","","",167,[[],["result",4]]],[11,"type_id","","",167,[[],["typeid",3]]],[11,"borrow","","",168,[[]]],[11,"borrow_mut","","",168,[[]]],[11,"into","","",168,[[]]],[11,"from","","",168,[[]]],[11,"try_into","","",168,[[],["result",4]]],[11,"try_from","","",168,[[],["result",4]]],[11,"type_id","","",168,[[],["typeid",3]]],[11,"borrow","core::ops","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"into","","",58,[[]]],[11,"from","","",58,[[]]],[11,"try_into","","",58,[[],["result",4]]],[11,"try_from","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"into","","",57,[[]]],[11,"from","","",57,[[]]],[11,"try_into","","",57,[[],["result",4]]],[11,"try_from","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"borrow","","",169,[[]]],[11,"borrow_mut","","",169,[[]]],[11,"into","","",169,[[]]],[11,"from","","",169,[[]]],[11,"try_into","","",169,[[],["result",4]]],[11,"try_from","","",169,[[],["result",4]]],[11,"type_id","","",169,[[],["typeid",3]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"into","","",49,[[]]],[11,"from","","",49,[[]]],[11,"try_into","","",49,[[],["result",4]]],[11,"try_from","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"into","","",50,[[]]],[11,"from","","",50,[[]]],[11,"try_into","","",50,[[],["result",4]]],[11,"try_from","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"into","","",51,[[]]],[11,"from","","",51,[[]]],[11,"try_into","","",51,[[],["result",4]]],[11,"try_from","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"borrow","","",170,[[]]],[11,"borrow_mut","","",170,[[]]],[11,"into","","",170,[[]]],[11,"from","","",170,[[]]],[11,"try_into","","",170,[[],["result",4]]],[11,"try_from","","",170,[[],["result",4]]],[11,"type_id","","",170,[[],["typeid",3]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"into","","",54,[[]]],[11,"from","","",54,[[]]],[11,"try_into","","",54,[[],["result",4]]],[11,"try_from","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"into","","",52,[[]]],[11,"from","","",52,[[]]],[11,"try_into","","",52,[[],["result",4]]],[11,"try_from","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"borrow","core::any","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"into","","",60,[[]]],[11,"from","","",60,[[]]],[11,"try_into","","",60,[[],["result",4]]],[11,"try_from","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"borrow","core::array","",171,[[]]],[11,"borrow_mut","","",171,[[]]],[11,"into","","",171,[[]]],[11,"from","","",171,[[]]],[11,"try_into","","",171,[[],["result",4]]],[11,"try_from","","",171,[[],["result",4]]],[11,"type_id","","",171,[[],["typeid",3]]],[11,"borrow","","",172,[[]]],[11,"borrow_mut","","",172,[[]]],[11,"into","","",172,[[]]],[11,"from","","",172,[[]]],[11,"try_into","","",172,[[],["result",4]]],[11,"try_from","","",172,[[],["result",4]]],[11,"type_id","","",172,[[],["typeid",3]]],[11,"borrow","core::ascii","",173,[[]]],[11,"borrow_mut","","",173,[[]]],[11,"into","","",173,[[]]],[11,"from","","",173,[[]]],[11,"try_into","","",173,[[],["result",4]]],[11,"try_from","","",173,[[],["result",4]]],[11,"type_id","","",173,[[],["typeid",3]]],[11,"borrow","core::cell","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"into","","",62,[[]]],[11,"from","","",62,[[]]],[11,"from","","",62,[[]]],[11,"try_into","","",62,[[],["result",4]]],[11,"try_from","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"into","","",63,[[]]],[11,"from","","",63,[[]]],[11,"from","","",63,[[]]],[11,"try_into","","",63,[[],["result",4]]],[11,"try_from","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"borrow","","",174,[[]]],[11,"borrow_mut","","",174,[[]]],[11,"into","","",174,[[]]],[11,"from","","",174,[[]]],[11,"try_into","","",174,[[],["result",4]]],[11,"try_from","","",174,[[],["result",4]]],[11,"type_id","","",174,[[],["typeid",3]]],[11,"borrow","","",175,[[]]],[11,"borrow_mut","","",175,[[]]],[11,"into","","",175,[[]]],[11,"from","","",175,[[]]],[11,"try_into","","",175,[[],["result",4]]],[11,"try_from","","",175,[[],["result",4]]],[11,"type_id","","",175,[[],["typeid",3]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"into","","",64,[[]]],[11,"from","","",64,[[]]],[11,"try_into","","",64,[[],["result",4]]],[11,"try_from","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"borrow","","",176,[[]]],[11,"borrow_mut","","",176,[[]]],[11,"into","","",176,[[]]],[11,"from","","",176,[[]]],[11,"try_into","","",176,[[],["result",4]]],[11,"try_from","","",176,[[],["result",4]]],[11,"type_id","","",176,[[],["typeid",3]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"into","","",65,[[]]],[11,"from","","",65,[[]]],[11,"from","","",65,[[]]],[11,"try_into","","",65,[[],["result",4]]],[11,"try_from","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"borrow","core::char","",177,[[]]],[11,"borrow_mut","","",177,[[]]],[11,"into","","",177,[[]]],[11,"from","","",177,[[]]],[11,"try_into","","",177,[[],["result",4]]],[11,"try_from","","",177,[[],["result",4]]],[11,"type_id","","",177,[[],["typeid",3]]],[11,"borrow","","",178,[[]]],[11,"borrow_mut","","",178,[[]]],[11,"into","","",178,[[]]],[11,"from","","",178,[[]]],[11,"try_into","","",178,[[],["result",4]]],[11,"try_from","","",178,[[],["result",4]]],[11,"type_id","","",178,[[],["typeid",3]]],[11,"borrow","","",179,[[]]],[11,"borrow_mut","","",179,[[]]],[11,"into","","",179,[[]]],[11,"from","","",179,[[]]],[11,"try_into","","",179,[[],["result",4]]],[11,"try_from","","",179,[[],["result",4]]],[11,"type_id","","",179,[[],["typeid",3]]],[11,"borrow","","",180,[[]]],[11,"borrow_mut","","",180,[[]]],[11,"into","","",180,[[]]],[11,"from","","",180,[[]]],[11,"try_into","","",180,[[],["result",4]]],[11,"try_from","","",180,[[],["result",4]]],[11,"type_id","","",180,[[],["typeid",3]]],[11,"borrow","","",181,[[]]],[11,"borrow_mut","","",181,[[]]],[11,"into","","",181,[[]]],[11,"from","","",181,[[]]],[11,"try_into","","",181,[[],["result",4]]],[11,"try_from","","",181,[[],["result",4]]],[11,"type_id","","",181,[[],["typeid",3]]],[11,"borrow","","",182,[[]]],[11,"borrow_mut","","",182,[[]]],[11,"into","","",182,[[]]],[11,"from","","",182,[[]]],[11,"try_into","","",182,[[],["result",4]]],[11,"try_from","","",182,[[],["result",4]]],[11,"type_id","","",182,[[],["typeid",3]]],[11,"borrow","","",183,[[]]],[11,"borrow_mut","","",183,[[]]],[11,"into","","",183,[[]]],[11,"from","","",183,[[]]],[11,"try_into","","",183,[[],["result",4]]],[11,"try_from","","",183,[[],["result",4]]],[11,"type_id","","",183,[[],["typeid",3]]],[11,"borrow","","",184,[[]]],[11,"borrow_mut","","",184,[[]]],[11,"into","","",184,[[]]],[11,"from","","",184,[[]]],[11,"try_into","","",184,[[],["result",4]]],[11,"try_from","","",184,[[],["result",4]]],[11,"type_id","","",184,[[],["typeid",3]]],[11,"borrow","","",185,[[]]],[11,"borrow_mut","","",185,[[]]],[11,"into","","",185,[[]]],[11,"from","","",185,[[]]],[11,"try_into","","",185,[[],["result",4]]],[11,"try_from","","",185,[[],["result",4]]],[11,"type_id","","",185,[[],["typeid",3]]],[11,"borrow","core::ffi","",186,[[]]],[11,"borrow_mut","","",186,[[]]],[11,"into","","",186,[[]]],[11,"from","","",186,[[]]],[11,"try_into","","",186,[[],["result",4]]],[11,"try_from","","",186,[[],["result",4]]],[11,"type_id","","",186,[[],["typeid",3]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"into","","",66,[[]]],[11,"from","","",66,[[]]],[11,"try_into","","",66,[[],["result",4]]],[11,"try_from","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"borrow","","",187,[[]]],[11,"borrow_mut","","",187,[[]]],[11,"into","","",187,[[]]],[11,"from","","",187,[[]]],[11,"try_into","","",187,[[],["result",4]]],[11,"try_from","","",187,[[],["result",4]]],[11,"type_id","","",187,[[],["typeid",3]]],[11,"borrow","core::iter","",188,[[]]],[11,"borrow_mut","","",188,[[]]],[11,"into","","",188,[[]]],[11,"from","","",188,[[]]],[11,"try_into","","",188,[[],["result",4]]],[11,"try_from","","",188,[[],["result",4]]],[11,"type_id","","",188,[[],["typeid",3]]],[11,"borrow","","",189,[[]]],[11,"borrow_mut","","",189,[[]]],[11,"into","","",189,[[]]],[11,"from","","",189,[[]]],[11,"try_into","","",189,[[],["result",4]]],[11,"try_from","","",189,[[],["result",4]]],[11,"type_id","","",189,[[],["typeid",3]]],[11,"borrow","","",190,[[]]],[11,"borrow_mut","","",190,[[]]],[11,"into","","",190,[[]]],[11,"from","","",190,[[]]],[11,"try_into","","",190,[[],["result",4]]],[11,"try_from","","",190,[[],["result",4]]],[11,"type_id","","",190,[[],["typeid",3]]],[11,"borrow","","",191,[[]]],[11,"borrow_mut","","",191,[[]]],[11,"into","","",191,[[]]],[11,"from","","",191,[[]]],[11,"try_into","","",191,[[],["result",4]]],[11,"try_from","","",191,[[],["result",4]]],[11,"type_id","","",191,[[],["typeid",3]]],[11,"borrow","","",192,[[]]],[11,"borrow_mut","","",192,[[]]],[11,"into","","",192,[[]]],[11,"from","","",192,[[]]],[11,"try_into","","",192,[[],["result",4]]],[11,"try_from","","",192,[[],["result",4]]],[11,"type_id","","",192,[[],["typeid",3]]],[11,"borrow","","",193,[[]]],[11,"borrow_mut","","",193,[[]]],[11,"into","","",193,[[]]],[11,"from","","",193,[[]]],[11,"try_into","","",193,[[],["result",4]]],[11,"try_from","","",193,[[],["result",4]]],[11,"type_id","","",193,[[],["typeid",3]]],[11,"borrow","","",194,[[]]],[11,"borrow_mut","","",194,[[]]],[11,"into","","",194,[[]]],[11,"from","","",194,[[]]],[11,"try_into","","",194,[[],["result",4]]],[11,"try_from","","",194,[[],["result",4]]],[11,"type_id","","",194,[[],["typeid",3]]],[11,"borrow","","",195,[[]]],[11,"borrow_mut","","",195,[[]]],[11,"into","","",195,[[]]],[11,"from","","",195,[[]]],[11,"try_into","","",195,[[],["result",4]]],[11,"try_from","","",195,[[],["result",4]]],[11,"type_id","","",195,[[],["typeid",3]]],[11,"borrow","","",196,[[]]],[11,"borrow_mut","","",196,[[]]],[11,"into","","",196,[[]]],[11,"from","","",196,[[]]],[11,"try_into","","",196,[[],["result",4]]],[11,"try_from","","",196,[[],["result",4]]],[11,"type_id","","",196,[[],["typeid",3]]],[11,"borrow","","",197,[[]]],[11,"borrow_mut","","",197,[[]]],[11,"into","","",197,[[]]],[11,"from","","",197,[[]]],[11,"try_into","","",197,[[],["result",4]]],[11,"try_from","","",197,[[],["result",4]]],[11,"type_id","","",197,[[],["typeid",3]]],[11,"borrow","","",198,[[]]],[11,"borrow_mut","","",198,[[]]],[11,"into","","",198,[[]]],[11,"from","","",198,[[]]],[11,"try_into","","",198,[[],["result",4]]],[11,"try_from","","",198,[[],["result",4]]],[11,"type_id","","",198,[[],["typeid",3]]],[11,"borrow","","",199,[[]]],[11,"borrow_mut","","",199,[[]]],[11,"into","","",199,[[]]],[11,"from","","",199,[[]]],[11,"try_into","","",199,[[],["result",4]]],[11,"try_from","","",199,[[],["result",4]]],[11,"type_id","","",199,[[],["typeid",3]]],[11,"borrow","","",200,[[]]],[11,"borrow_mut","","",200,[[]]],[11,"into","","",200,[[]]],[11,"from","","",200,[[]]],[11,"try_into","","",200,[[],["result",4]]],[11,"try_from","","",200,[[],["result",4]]],[11,"type_id","","",200,[[],["typeid",3]]],[11,"borrow","","",201,[[]]],[11,"borrow_mut","","",201,[[]]],[11,"into","","",201,[[]]],[11,"from","","",201,[[]]],[11,"try_into","","",201,[[],["result",4]]],[11,"try_from","","",201,[[],["result",4]]],[11,"type_id","","",201,[[],["typeid",3]]],[11,"borrow","","",202,[[]]],[11,"borrow_mut","","",202,[[]]],[11,"into","","",202,[[]]],[11,"from","","",202,[[]]],[11,"try_into","","",202,[[],["result",4]]],[11,"try_from","","",202,[[],["result",4]]],[11,"type_id","","",202,[[],["typeid",3]]],[11,"borrow","","",203,[[]]],[11,"borrow_mut","","",203,[[]]],[11,"into","","",203,[[]]],[11,"from","","",203,[[]]],[11,"try_into","","",203,[[],["result",4]]],[11,"try_from","","",203,[[],["result",4]]],[11,"type_id","","",203,[[],["typeid",3]]],[11,"borrow","","",204,[[]]],[11,"borrow_mut","","",204,[[]]],[11,"into","","",204,[[]]],[11,"from","","",204,[[]]],[11,"try_into","","",204,[[],["result",4]]],[11,"try_from","","",204,[[],["result",4]]],[11,"type_id","","",204,[[],["typeid",3]]],[11,"borrow","","",205,[[]]],[11,"borrow_mut","","",205,[[]]],[11,"into","","",205,[[]]],[11,"from","","",205,[[]]],[11,"try_into","","",205,[[],["result",4]]],[11,"try_from","","",205,[[],["result",4]]],[11,"type_id","","",205,[[],["typeid",3]]],[11,"borrow","","",206,[[]]],[11,"borrow_mut","","",206,[[]]],[11,"into","","",206,[[]]],[11,"from","","",206,[[]]],[11,"try_into","","",206,[[],["result",4]]],[11,"try_from","","",206,[[],["result",4]]],[11,"type_id","","",206,[[],["typeid",3]]],[11,"borrow","","",207,[[]]],[11,"borrow_mut","","",207,[[]]],[11,"into","","",207,[[]]],[11,"from","","",207,[[]]],[11,"try_into","","",207,[[],["result",4]]],[11,"try_from","","",207,[[],["result",4]]],[11,"type_id","","",207,[[],["typeid",3]]],[11,"borrow","","",208,[[]]],[11,"borrow_mut","","",208,[[]]],[11,"into","","",208,[[]]],[11,"from","","",208,[[]]],[11,"try_into","","",208,[[],["result",4]]],[11,"try_from","","",208,[[],["result",4]]],[11,"type_id","","",208,[[],["typeid",3]]],[11,"borrow","","",209,[[]]],[11,"borrow_mut","","",209,[[]]],[11,"into","","",209,[[]]],[11,"from","","",209,[[]]],[11,"try_into","","",209,[[],["result",4]]],[11,"try_from","","",209,[[],["result",4]]],[11,"type_id","","",209,[[],["typeid",3]]],[11,"borrow","","",210,[[]]],[11,"borrow_mut","","",210,[[]]],[11,"into","","",210,[[]]],[11,"from","","",210,[[]]],[11,"try_into","","",210,[[],["result",4]]],[11,"try_from","","",210,[[],["result",4]]],[11,"type_id","","",210,[[],["typeid",3]]],[11,"borrow","","",211,[[]]],[11,"borrow_mut","","",211,[[]]],[11,"into","","",211,[[]]],[11,"from","","",211,[[]]],[11,"try_into","","",211,[[],["result",4]]],[11,"try_from","","",211,[[],["result",4]]],[11,"type_id","","",211,[[],["typeid",3]]],[11,"borrow","","",212,[[]]],[11,"borrow_mut","","",212,[[]]],[11,"into","","",212,[[]]],[11,"from","","",212,[[]]],[11,"try_into","","",212,[[],["result",4]]],[11,"try_from","","",212,[[],["result",4]]],[11,"type_id","","",212,[[],["typeid",3]]],[11,"borrow","","",213,[[]]],[11,"borrow_mut","","",213,[[]]],[11,"into","","",213,[[]]],[11,"from","","",213,[[]]],[11,"try_into","","",213,[[],["result",4]]],[11,"try_from","","",213,[[],["result",4]]],[11,"type_id","","",213,[[],["typeid",3]]],[11,"borrow","","",214,[[]]],[11,"borrow_mut","","",214,[[]]],[11,"into","","",214,[[]]],[11,"from","","",214,[[]]],[11,"try_into","","",214,[[],["result",4]]],[11,"try_from","","",214,[[],["result",4]]],[11,"type_id","","",214,[[],["typeid",3]]],[11,"borrow","","",215,[[]]],[11,"borrow_mut","","",215,[[]]],[11,"into","","",215,[[]]],[11,"from","","",215,[[]]],[11,"try_into","","",215,[[],["result",4]]],[11,"try_from","","",215,[[],["result",4]]],[11,"type_id","","",215,[[],["typeid",3]]],[11,"borrow","","",216,[[]]],[11,"borrow_mut","","",216,[[]]],[11,"into","","",216,[[]]],[11,"from","","",216,[[]]],[11,"try_into","","",216,[[],["result",4]]],[11,"try_from","","",216,[[],["result",4]]],[11,"type_id","","",216,[[],["typeid",3]]],[11,"borrow","core::lazy","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"into","","",77,[[]]],[11,"from","","",77,[[]]],[11,"from","","",77,[[]]],[11,"try_into","","",77,[[],["result",4]]],[11,"try_from","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"into","","",78,[[]]],[11,"from","","",78,[[]]],[11,"try_into","","",78,[[],["result",4]]],[11,"try_from","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"borrow","core::option","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"into","","",79,[[]]],[11,"from","","",79,[[]]],[11,"from","","",79,[[]]],[11,"try_into","","",79,[[],["result",4]]],[11,"try_from","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"borrow","","",217,[[]]],[11,"borrow_mut","","",217,[[]]],[11,"into","","",217,[[]]],[11,"from","","",217,[[]]],[11,"try_into","","",217,[[],["result",4]]],[11,"try_from","","",217,[[],["result",4]]],[11,"type_id","","",217,[[],["typeid",3]]],[11,"borrow","","",218,[[]]],[11,"borrow_mut","","",218,[[]]],[11,"into","","",218,[[]]],[11,"from","","",218,[[]]],[11,"try_into","","",218,[[],["result",4]]],[11,"try_from","","",218,[[],["result",4]]],[11,"type_id","","",218,[[],["typeid",3]]],[11,"borrow","","",219,[[]]],[11,"borrow_mut","","",219,[[]]],[11,"into","","",219,[[]]],[11,"from","","",219,[[]]],[11,"try_into","","",219,[[],["result",4]]],[11,"try_from","","",219,[[],["result",4]]],[11,"type_id","","",219,[[],["typeid",3]]],[11,"borrow","","",220,[[]]],[11,"borrow_mut","","",220,[[]]],[11,"into","","",220,[[]]],[11,"from","","",220,[[]]],[11,"try_into","","",220,[[],["result",4]]],[11,"try_from","","",220,[[],["result",4]]],[11,"type_id","","",220,[[],["typeid",3]]],[11,"borrow","core::panic","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"into","","",80,[[]]],[11,"from","","",80,[[]]],[11,"try_into","","",80,[[],["result",4]]],[11,"try_from","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"into","","",81,[[]]],[11,"from","","",81,[[]]],[11,"try_into","","",81,[[],["result",4]]],[11,"try_from","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"borrow","core::pin","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"into","","",82,[[]]],[11,"from","","",82,[[]]],[11,"try_into","","",82,[[],["result",4]]],[11,"try_from","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"borrow","core::raw","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"into","","",83,[[]]],[11,"from","","",83,[[]]],[11,"try_into","","",83,[[],["result",4]]],[11,"try_from","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"borrow","core::result","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"into","","",84,[[]]],[11,"from","","",84,[[]]],[11,"try_into","","",84,[[],["result",4]]],[11,"try_from","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"borrow","","",221,[[]]],[11,"borrow_mut","","",221,[[]]],[11,"into","","",221,[[]]],[11,"from","","",221,[[]]],[11,"try_into","","",221,[[],["result",4]]],[11,"try_from","","",221,[[],["result",4]]],[11,"type_id","","",221,[[],["typeid",3]]],[11,"borrow","","",222,[[]]],[11,"borrow_mut","","",222,[[]]],[11,"into","","",222,[[]]],[11,"from","","",222,[[]]],[11,"try_into","","",222,[[],["result",4]]],[11,"try_from","","",222,[[],["result",4]]],[11,"type_id","","",222,[[],["typeid",3]]],[11,"borrow","","",223,[[]]],[11,"borrow_mut","","",223,[[]]],[11,"into","","",223,[[]]],[11,"from","","",223,[[]]],[11,"try_into","","",223,[[],["result",4]]],[11,"try_from","","",223,[[],["result",4]]],[11,"type_id","","",223,[[],["typeid",3]]],[11,"borrow","core::sync::atomic","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"into","","",86,[[]]],[11,"from","","",86,[[]]],[11,"try_into","","",86,[[],["result",4]]],[11,"try_from","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"into","","",87,[[]]],[11,"from","","",87,[[]]],[11,"try_into","","",87,[[],["result",4]]],[11,"try_from","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"into","","",85,[[]]],[11,"from","","",85,[[]]],[11,"try_into","","",85,[[],["result",4]]],[11,"try_from","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"into","","",88,[[]]],[11,"from","","",88,[[]]],[11,"try_into","","",88,[[],["result",4]]],[11,"try_from","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"into","","",89,[[]]],[11,"from","","",89,[[]]],[11,"try_into","","",89,[[],["result",4]]],[11,"try_from","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"into","","",90,[[]]],[11,"from","","",90,[[]]],[11,"try_into","","",90,[[],["result",4]]],[11,"try_from","","",90,[[],["result",4]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"into","","",91,[[]]],[11,"from","","",91,[[]]],[11,"try_into","","",91,[[],["result",4]]],[11,"try_from","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"into","","",92,[[]]],[11,"from","","",92,[[]]],[11,"try_into","","",92,[[],["result",4]]],[11,"try_from","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"into","","",93,[[]]],[11,"from","","",93,[[]]],[11,"try_into","","",93,[[],["result",4]]],[11,"try_from","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"into","","",94,[[]]],[11,"from","","",94,[[]]],[11,"try_into","","",94,[[],["result",4]]],[11,"try_from","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"into","","",95,[[]]],[11,"from","","",95,[[]]],[11,"try_into","","",95,[[],["result",4]]],[11,"try_from","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"into","","",96,[[]]],[11,"from","","",96,[[]]],[11,"try_into","","",96,[[],["result",4]]],[11,"try_from","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"into","","",97,[[]]],[11,"from","","",97,[[]]],[11,"try_into","","",97,[[],["result",4]]],[11,"try_from","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"borrow","core::fmt","",224,[[]]],[11,"borrow_mut","","",224,[[]]],[11,"into","","",224,[[]]],[11,"from","","",224,[[]]],[11,"try_into","","",224,[[],["result",4]]],[11,"try_from","","",224,[[],["result",4]]],[11,"type_id","","",224,[[],["typeid",3]]],[11,"borrow","","",225,[[]]],[11,"borrow_mut","","",225,[[]]],[11,"into","","",225,[[]]],[11,"from","","",225,[[]]],[11,"try_into","","",225,[[],["result",4]]],[11,"try_from","","",225,[[],["result",4]]],[11,"type_id","","",225,[[],["typeid",3]]],[11,"borrow","","",226,[[]]],[11,"borrow_mut","","",226,[[]]],[11,"into","","",226,[[]]],[11,"from","","",226,[[]]],[11,"try_into","","",226,[[],["result",4]]],[11,"try_from","","",226,[[],["result",4]]],[11,"type_id","","",226,[[],["typeid",3]]],[11,"borrow","","",227,[[]]],[11,"borrow_mut","","",227,[[]]],[11,"into","","",227,[[]]],[11,"from","","",227,[[]]],[11,"try_into","","",227,[[],["result",4]]],[11,"try_from","","",227,[[],["result",4]]],[11,"type_id","","",227,[[],["typeid",3]]],[11,"borrow","","",228,[[]]],[11,"borrow_mut","","",228,[[]]],[11,"into","","",228,[[]]],[11,"from","","",228,[[]]],[11,"try_into","","",228,[[],["result",4]]],[11,"try_from","","",228,[[],["result",4]]],[11,"type_id","","",228,[[],["typeid",3]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"into","","",98,[[]]],[11,"from","","",98,[[]]],[11,"try_into","","",98,[[],["result",4]]],[11,"try_from","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"borrow","","",229,[[]]],[11,"borrow_mut","","",229,[[]]],[11,"into","","",229,[[]]],[11,"from","","",229,[[]]],[11,"try_into","","",229,[[],["result",4]]],[11,"try_from","","",229,[[],["result",4]]],[11,"type_id","","",229,[[],["typeid",3]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"into","","",110,[[]]],[11,"from","","",110,[[]]],[11,"try_into","","",110,[[],["result",4]]],[11,"try_from","","",110,[[],["result",4]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"into","","",100,[[]]],[11,"from","","",100,[[]]],[11,"try_into","","",100,[[],["result",4]]],[11,"try_from","","",100,[[],["result",4]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"borrow","core::hash","",230,[[]]],[11,"borrow_mut","","",230,[[]]],[11,"into","","",230,[[]]],[11,"from","","",230,[[]]],[11,"try_into","","",230,[[],["result",4]]],[11,"try_from","","",230,[[],["result",4]]],[11,"type_id","","",230,[[],["typeid",3]]],[11,"borrow","","",231,[[]]],[11,"borrow_mut","","",231,[[]]],[11,"into","","",231,[[]]],[11,"from","","",231,[[]]],[11,"try_into","","",231,[[],["result",4]]],[11,"try_from","","",231,[[],["result",4]]],[11,"type_id","","",231,[[],["typeid",3]]],[11,"borrow","core::slice","",232,[[]]],[11,"borrow_mut","","",232,[[]]],[11,"into","","",232,[[]]],[11,"from","","",232,[[]]],[11,"try_into","","",232,[[],["result",4]]],[11,"try_from","","",232,[[],["result",4]]],[11,"type_id","","",232,[[],["typeid",3]]],[11,"borrow","","",233,[[]]],[11,"borrow_mut","","",233,[[]]],[11,"into","","",233,[[]]],[11,"from","","",233,[[]]],[11,"try_into","","",233,[[],["result",4]]],[11,"try_from","","",233,[[],["result",4]]],[11,"type_id","","",233,[[],["typeid",3]]],[11,"borrow","","",234,[[]]],[11,"borrow_mut","","",234,[[]]],[11,"into","","",234,[[]]],[11,"from","","",234,[[]]],[11,"try_into","","",234,[[],["result",4]]],[11,"try_from","","",234,[[],["result",4]]],[11,"type_id","","",234,[[],["typeid",3]]],[11,"borrow","","",235,[[]]],[11,"borrow_mut","","",235,[[]]],[11,"into","","",235,[[]]],[11,"from","","",235,[[]]],[11,"try_into","","",235,[[],["result",4]]],[11,"try_from","","",235,[[],["result",4]]],[11,"type_id","","",235,[[],["typeid",3]]],[11,"borrow","","",236,[[]]],[11,"borrow_mut","","",236,[[]]],[11,"into","","",236,[[]]],[11,"from","","",236,[[]]],[11,"try_into","","",236,[[],["result",4]]],[11,"try_from","","",236,[[],["result",4]]],[11,"type_id","","",236,[[],["typeid",3]]],[11,"borrow","","",237,[[]]],[11,"borrow_mut","","",237,[[]]],[11,"into","","",237,[[]]],[11,"from","","",237,[[]]],[11,"try_into","","",237,[[],["result",4]]],[11,"try_from","","",237,[[],["result",4]]],[11,"type_id","","",237,[[],["typeid",3]]],[11,"borrow","","",238,[[]]],[11,"borrow_mut","","",238,[[]]],[11,"into","","",238,[[]]],[11,"from","","",238,[[]]],[11,"try_into","","",238,[[],["result",4]]],[11,"try_from","","",238,[[],["result",4]]],[11,"type_id","","",238,[[],["typeid",3]]],[11,"borrow","","",239,[[]]],[11,"borrow_mut","","",239,[[]]],[11,"into","","",239,[[]]],[11,"from","","",239,[[]]],[11,"try_into","","",239,[[],["result",4]]],[11,"try_from","","",239,[[],["result",4]]],[11,"type_id","","",239,[[],["typeid",3]]],[11,"borrow","","",240,[[]]],[11,"borrow_mut","","",240,[[]]],[11,"into","","",240,[[]]],[11,"from","","",240,[[]]],[11,"try_into","","",240,[[],["result",4]]],[11,"try_from","","",240,[[],["result",4]]],[11,"type_id","","",240,[[],["typeid",3]]],[11,"borrow","","",241,[[]]],[11,"borrow_mut","","",241,[[]]],[11,"into","","",241,[[]]],[11,"from","","",241,[[]]],[11,"try_into","","",241,[[],["result",4]]],[11,"try_from","","",241,[[],["result",4]]],[11,"type_id","","",241,[[],["typeid",3]]],[11,"borrow","","",242,[[]]],[11,"borrow_mut","","",242,[[]]],[11,"into","","",242,[[]]],[11,"from","","",242,[[]]],[11,"try_into","","",242,[[],["result",4]]],[11,"try_from","","",242,[[],["result",4]]],[11,"type_id","","",242,[[],["typeid",3]]],[11,"borrow","","",243,[[]]],[11,"borrow_mut","","",243,[[]]],[11,"into","","",243,[[]]],[11,"from","","",243,[[]]],[11,"try_into","","",243,[[],["result",4]]],[11,"try_from","","",243,[[],["result",4]]],[11,"type_id","","",243,[[],["typeid",3]]],[11,"borrow","","",244,[[]]],[11,"borrow_mut","","",244,[[]]],[11,"into","","",244,[[]]],[11,"from","","",244,[[]]],[11,"try_into","","",244,[[],["result",4]]],[11,"try_from","","",244,[[],["result",4]]],[11,"type_id","","",244,[[],["typeid",3]]],[11,"borrow","","",245,[[]]],[11,"borrow_mut","","",245,[[]]],[11,"into","","",245,[[]]],[11,"from","","",245,[[]]],[11,"try_into","","",245,[[],["result",4]]],[11,"try_from","","",245,[[],["result",4]]],[11,"type_id","","",245,[[],["typeid",3]]],[11,"borrow","","",246,[[]]],[11,"borrow_mut","","",246,[[]]],[11,"into","","",246,[[]]],[11,"from","","",246,[[]]],[11,"try_into","","",246,[[],["result",4]]],[11,"try_from","","",246,[[],["result",4]]],[11,"type_id","","",246,[[],["typeid",3]]],[11,"borrow","","",247,[[]]],[11,"borrow_mut","","",247,[[]]],[11,"into","","",247,[[]]],[11,"from","","",247,[[]]],[11,"try_into","","",247,[[],["result",4]]],[11,"try_from","","",247,[[],["result",4]]],[11,"type_id","","",247,[[],["typeid",3]]],[11,"borrow","","",248,[[]]],[11,"borrow_mut","","",248,[[]]],[11,"into","","",248,[[]]],[11,"from","","",248,[[]]],[11,"try_into","","",248,[[],["result",4]]],[11,"try_from","","",248,[[],["result",4]]],[11,"type_id","","",248,[[],["typeid",3]]],[11,"borrow","","",249,[[]]],[11,"borrow_mut","","",249,[[]]],[11,"into","","",249,[[]]],[11,"from","","",249,[[]]],[11,"try_into","","",249,[[],["result",4]]],[11,"try_from","","",249,[[],["result",4]]],[11,"type_id","","",249,[[],["typeid",3]]],[11,"borrow","","",250,[[]]],[11,"borrow_mut","","",250,[[]]],[11,"into","","",250,[[]]],[11,"from","","",250,[[]]],[11,"try_into","","",250,[[],["result",4]]],[11,"try_from","","",250,[[],["result",4]]],[11,"type_id","","",250,[[],["typeid",3]]],[11,"borrow","","",251,[[]]],[11,"borrow_mut","","",251,[[]]],[11,"into","","",251,[[]]],[11,"from","","",251,[[]]],[11,"try_into","","",251,[[],["result",4]]],[11,"try_from","","",251,[[],["result",4]]],[11,"type_id","","",251,[[],["typeid",3]]],[11,"borrow","","",252,[[]]],[11,"borrow_mut","","",252,[[]]],[11,"into","","",252,[[]]],[11,"from","","",252,[[]]],[11,"try_into","","",252,[[],["result",4]]],[11,"try_from","","",252,[[],["result",4]]],[11,"type_id","","",252,[[],["typeid",3]]],[11,"borrow","","",253,[[]]],[11,"borrow_mut","","",253,[[]]],[11,"into","","",253,[[]]],[11,"from","","",253,[[]]],[11,"try_into","","",253,[[],["result",4]]],[11,"try_from","","",253,[[],["result",4]]],[11,"type_id","","",253,[[],["typeid",3]]],[11,"borrow","","",254,[[]]],[11,"borrow_mut","","",254,[[]]],[11,"into","","",254,[[]]],[11,"from","","",254,[[]]],[11,"try_into","","",254,[[],["result",4]]],[11,"try_from","","",254,[[],["result",4]]],[11,"type_id","","",254,[[],["typeid",3]]],[11,"borrow","","",255,[[]]],[11,"borrow_mut","","",255,[[]]],[11,"into","","",255,[[]]],[11,"from","","",255,[[]]],[11,"try_into","","",255,[[],["result",4]]],[11,"try_from","","",255,[[],["result",4]]],[11,"type_id","","",255,[[],["typeid",3]]],[11,"borrow","core::str","",256,[[]]],[11,"borrow_mut","","",256,[[]]],[11,"into","","",256,[[]]],[11,"from","","",256,[[]]],[11,"try_into","","",256,[[],["result",4]]],[11,"try_from","","",256,[[],["result",4]]],[11,"type_id","","",256,[[],["typeid",3]]],[11,"borrow","","",257,[[]]],[11,"borrow_mut","","",257,[[]]],[11,"into","","",257,[[]]],[11,"from","","",257,[[]]],[11,"try_into","","",257,[[],["result",4]]],[11,"try_from","","",257,[[],["result",4]]],[11,"type_id","","",257,[[],["typeid",3]]],[11,"borrow","","",258,[[]]],[11,"borrow_mut","","",258,[[]]],[11,"into","","",258,[[]]],[11,"from","","",258,[[]]],[11,"try_into","","",258,[[],["result",4]]],[11,"try_from","","",258,[[],["result",4]]],[11,"type_id","","",258,[[],["typeid",3]]],[11,"borrow","","",259,[[]]],[11,"borrow_mut","","",259,[[]]],[11,"into","","",259,[[]]],[11,"from","","",259,[[]]],[11,"try_into","","",259,[[],["result",4]]],[11,"try_from","","",259,[[],["result",4]]],[11,"type_id","","",259,[[],["typeid",3]]],[11,"borrow","","",260,[[]]],[11,"borrow_mut","","",260,[[]]],[11,"into","","",260,[[]]],[11,"from","","",260,[[]]],[11,"try_into","","",260,[[],["result",4]]],[11,"try_from","","",260,[[],["result",4]]],[11,"type_id","","",260,[[],["typeid",3]]],[11,"borrow","","",261,[[]]],[11,"borrow_mut","","",261,[[]]],[11,"into","","",261,[[]]],[11,"from","","",261,[[]]],[11,"try_into","","",261,[[],["result",4]]],[11,"try_from","","",261,[[],["result",4]]],[11,"type_id","","",261,[[],["typeid",3]]],[11,"borrow","","",262,[[]]],[11,"borrow_mut","","",262,[[]]],[11,"into","","",262,[[]]],[11,"from","","",262,[[]]],[11,"try_into","","",262,[[],["result",4]]],[11,"try_from","","",262,[[],["result",4]]],[11,"type_id","","",262,[[],["typeid",3]]],[11,"borrow","","",263,[[]]],[11,"borrow_mut","","",263,[[]]],[11,"into","","",263,[[]]],[11,"from","","",263,[[]]],[11,"try_into","","",263,[[],["result",4]]],[11,"try_from","","",263,[[],["result",4]]],[11,"type_id","","",263,[[],["typeid",3]]],[11,"borrow","","",264,[[]]],[11,"borrow_mut","","",264,[[]]],[11,"into","","",264,[[]]],[11,"from","","",264,[[]]],[11,"try_into","","",264,[[],["result",4]]],[11,"try_from","","",264,[[],["result",4]]],[11,"type_id","","",264,[[],["typeid",3]]],[11,"borrow","","",265,[[]]],[11,"borrow_mut","","",265,[[]]],[11,"into","","",265,[[]]],[11,"from","","",265,[[]]],[11,"try_into","","",265,[[],["result",4]]],[11,"try_from","","",265,[[],["result",4]]],[11,"type_id","","",265,[[],["typeid",3]]],[11,"borrow","","",266,[[]]],[11,"borrow_mut","","",266,[[]]],[11,"into","","",266,[[]]],[11,"from","","",266,[[]]],[11,"try_into","","",266,[[],["result",4]]],[11,"try_from","","",266,[[],["result",4]]],[11,"type_id","","",266,[[],["typeid",3]]],[11,"borrow","","",267,[[]]],[11,"borrow_mut","","",267,[[]]],[11,"into","","",267,[[]]],[11,"from","","",267,[[]]],[11,"try_into","","",267,[[],["result",4]]],[11,"try_from","","",267,[[],["result",4]]],[11,"type_id","","",267,[[],["typeid",3]]],[11,"borrow","","",268,[[]]],[11,"borrow_mut","","",268,[[]]],[11,"into","","",268,[[]]],[11,"from","","",268,[[]]],[11,"try_into","","",268,[[],["result",4]]],[11,"try_from","","",268,[[],["result",4]]],[11,"type_id","","",268,[[],["typeid",3]]],[11,"borrow","","",269,[[]]],[11,"borrow_mut","","",269,[[]]],[11,"into","","",269,[[]]],[11,"from","","",269,[[]]],[11,"try_into","","",269,[[],["result",4]]],[11,"try_from","","",269,[[],["result",4]]],[11,"type_id","","",269,[[],["typeid",3]]],[11,"borrow","","",270,[[]]],[11,"borrow_mut","","",270,[[]]],[11,"into","","",270,[[]]],[11,"from","","",270,[[]]],[11,"try_into","","",270,[[],["result",4]]],[11,"try_from","","",270,[[],["result",4]]],[11,"type_id","","",270,[[],["typeid",3]]],[11,"borrow","","",271,[[]]],[11,"borrow_mut","","",271,[[]]],[11,"into","","",271,[[]]],[11,"from","","",271,[[]]],[11,"try_into","","",271,[[],["result",4]]],[11,"try_from","","",271,[[],["result",4]]],[11,"type_id","","",271,[[],["typeid",3]]],[11,"borrow","","",272,[[]]],[11,"borrow_mut","","",272,[[]]],[11,"into","","",272,[[]]],[11,"from","","",272,[[]]],[11,"try_into","","",272,[[],["result",4]]],[11,"try_from","","",272,[[],["result",4]]],[11,"type_id","","",272,[[],["typeid",3]]],[11,"borrow","","",273,[[]]],[11,"borrow_mut","","",273,[[]]],[11,"into","","",273,[[]]],[11,"from","","",273,[[]]],[11,"try_into","","",273,[[],["result",4]]],[11,"try_from","","",273,[[],["result",4]]],[11,"type_id","","",273,[[],["typeid",3]]],[11,"borrow","","",274,[[]]],[11,"borrow_mut","","",274,[[]]],[11,"into","","",274,[[]]],[11,"from","","",274,[[]]],[11,"try_into","","",274,[[],["result",4]]],[11,"try_from","","",274,[[],["result",4]]],[11,"type_id","","",274,[[],["typeid",3]]],[11,"borrow","","",275,[[]]],[11,"borrow_mut","","",275,[[]]],[11,"into","","",275,[[]]],[11,"from","","",275,[[]]],[11,"try_into","","",275,[[],["result",4]]],[11,"try_from","","",275,[[],["result",4]]],[11,"type_id","","",275,[[],["typeid",3]]],[11,"borrow","","",276,[[]]],[11,"borrow_mut","","",276,[[]]],[11,"into","","",276,[[]]],[11,"from","","",276,[[]]],[11,"try_into","","",276,[[],["result",4]]],[11,"try_from","","",276,[[],["result",4]]],[11,"type_id","","",276,[[],["typeid",3]]],[11,"borrow","","",277,[[]]],[11,"borrow_mut","","",277,[[]]],[11,"into","","",277,[[]]],[11,"from","","",277,[[]]],[11,"try_into","","",277,[[],["result",4]]],[11,"try_from","","",277,[[],["result",4]]],[11,"type_id","","",277,[[],["typeid",3]]],[11,"borrow","","",278,[[]]],[11,"borrow_mut","","",278,[[]]],[11,"into","","",278,[[]]],[11,"from","","",278,[[]]],[11,"try_into","","",278,[[],["result",4]]],[11,"try_from","","",278,[[],["result",4]]],[11,"type_id","","",278,[[],["typeid",3]]],[11,"borrow","core::str::pattern","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"into","","",116,[[]]],[11,"from","","",116,[[]]],[11,"try_into","","",116,[[],["result",4]]],[11,"try_from","","",116,[[],["result",4]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"borrow","","",279,[[]]],[11,"borrow_mut","","",279,[[]]],[11,"into","","",279,[[]]],[11,"from","","",279,[[]]],[11,"try_into","","",279,[[],["result",4]]],[11,"try_from","","",279,[[],["result",4]]],[11,"type_id","","",279,[[],["typeid",3]]],[11,"borrow","","",280,[[]]],[11,"borrow_mut","","",280,[[]]],[11,"into","","",280,[[]]],[11,"from","","",280,[[]]],[11,"try_into","","",280,[[],["result",4]]],[11,"try_from","","",280,[[],["result",4]]],[11,"type_id","","",280,[[],["typeid",3]]],[11,"borrow","","",281,[[]]],[11,"borrow_mut","","",281,[[]]],[11,"into","","",281,[[]]],[11,"from","","",281,[[]]],[11,"try_into","","",281,[[],["result",4]]],[11,"try_from","","",281,[[],["result",4]]],[11,"type_id","","",281,[[],["typeid",3]]],[11,"borrow","","",282,[[]]],[11,"borrow_mut","","",282,[[]]],[11,"into","","",282,[[]]],[11,"from","","",282,[[]]],[11,"try_into","","",282,[[],["result",4]]],[11,"try_from","","",282,[[],["result",4]]],[11,"type_id","","",282,[[],["typeid",3]]],[11,"borrow","core::str::lossy","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"borrow","","",283,[[]]],[11,"borrow_mut","","",283,[[]]],[11,"into","","",283,[[]]],[11,"from","","",283,[[]]],[11,"try_into","","",283,[[],["result",4]]],[11,"try_from","","",283,[[],["result",4]]],[11,"type_id","","",283,[[],["typeid",3]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"into","","",120,[[]]],[11,"from","","",120,[[]]],[11,"try_into","","",120,[[],["result",4]]],[11,"try_from","","",120,[[],["result",4]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"borrow","core::time","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"into","","",122,[[]]],[11,"from","","",122,[[]]],[11,"try_into","","",122,[[],["result",4]]],[11,"try_from","","",122,[[],["result",4]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"borrow","core::future","",284,[[]]],[11,"borrow_mut","","",284,[[]]],[11,"into","","",284,[[]]],[11,"from","","",284,[[]]],[11,"try_into","","",284,[[],["result",4]]],[11,"try_from","","",284,[[],["result",4]]],[11,"type_id","","",284,[[],["typeid",3]]],[11,"borrow","","",285,[[]]],[11,"borrow_mut","","",285,[[]]],[11,"into","","",285,[[]]],[11,"from","","",285,[[]]],[11,"try_into","","",285,[[],["result",4]]],[11,"try_from","","",285,[[],["result",4]]],[11,"type_id","","",285,[[],["typeid",3]]],[11,"borrow","","",286,[[]]],[11,"borrow_mut","","",286,[[]]],[11,"into","","",286,[[]]],[11,"from","","",286,[[]]],[11,"try_into","","",286,[[],["result",4]]],[11,"try_from","","",286,[[],["result",4]]],[11,"type_id","","",286,[[],["typeid",3]]],[11,"borrow","core::task","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"into","","",125,[[]]],[11,"from","","",125,[[]]],[11,"from","","",125,[[]]],[11,"try_into","","",125,[[],["result",4]]],[11,"try_from","","",125,[[],["result",4]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"borrow","","",287,[[]]],[11,"borrow_mut","","",287,[[]]],[11,"into","","",287,[[]]],[11,"from","","",287,[[]]],[11,"try_into","","",287,[[],["result",4]]],[11,"try_from","","",287,[[],["result",4]]],[11,"type_id","","",287,[[],["typeid",3]]],[11,"borrow","","",288,[[]]],[11,"borrow_mut","","",288,[[]]],[11,"into","","",288,[[]]],[11,"from","","",288,[[]]],[11,"try_into","","",288,[[],["result",4]]],[11,"try_from","","",288,[[],["result",4]]],[11,"type_id","","",288,[[],["typeid",3]]],[11,"borrow","","",289,[[]]],[11,"borrow_mut","","",289,[[]]],[11,"into","","",289,[[]]],[11,"from","","",289,[[]]],[11,"try_into","","",289,[[],["result",4]]],[11,"try_from","","",289,[[],["result",4]]],[11,"type_id","","",289,[[],["typeid",3]]],[11,"borrow","","",290,[[]]],[11,"borrow_mut","","",290,[[]]],[11,"into","","",290,[[]]],[11,"from","","",290,[[]]],[11,"try_into","","",290,[[],["result",4]]],[11,"try_from","","",290,[[],["result",4]]],[11,"type_id","","",290,[[],["typeid",3]]],[11,"borrow","core::alloc","",291,[[]]],[11,"borrow_mut","","",291,[[]]],[11,"into","","",291,[[]]],[11,"from","","",291,[[]]],[11,"try_into","","",291,[[],["result",4]]],[11,"try_from","","",291,[[],["result",4]]],[11,"type_id","","",291,[[],["typeid",3]]],[11,"borrow","","",292,[[]]],[11,"borrow_mut","","",292,[[]]],[11,"into","","",292,[[]]],[11,"from","","",292,[[]]],[11,"try_into","","",292,[[],["result",4]]],[11,"try_from","","",292,[[],["result",4]]],[11,"type_id","","",292,[[],["typeid",3]]],[11,"borrow","","",293,[[]]],[11,"borrow_mut","","",293,[[]]],[11,"into","","",293,[[]]],[11,"from","","",293,[[]]],[11,"try_into","","",293,[[],["result",4]]],[11,"try_from","","",293,[[],["result",4]]],[11,"type_id","","",293,[[],["typeid",3]]],[11,"borrow","core::arch::arm","",294,[[]]],[11,"borrow_mut","","",294,[[]]],[11,"into","","",294,[[]]],[11,"from","","",294,[[]]],[11,"try_into","","",294,[[],["result",4]]],[11,"try_from","","",294,[[],["result",4]]],[11,"type_id","","",294,[[],["typeid",3]]],[11,"borrow","","",295,[[]]],[11,"borrow_mut","","",295,[[]]],[11,"into","","",295,[[]]],[11,"from","","",295,[[]]],[11,"try_into","","",295,[[],["result",4]]],[11,"try_from","","",295,[[],["result",4]]],[11,"type_id","","",295,[[],["typeid",3]]],[11,"borrow","core::arch::x86","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"into","","",128,[[]]],[11,"from","","",128,[[]]],[11,"try_into","","",128,[[],["result",4]]],[11,"try_from","","",128,[[],["result",4]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"borrow","","",296,[[]]],[11,"borrow_mut","","",296,[[]]],[11,"into","","",296,[[]]],[11,"from","","",296,[[]]],[11,"try_into","","",296,[[],["result",4]]],[11,"try_from","","",296,[[],["result",4]]],[11,"type_id","","",296,[[],["typeid",3]]],[11,"borrow","","",297,[[]]],[11,"borrow_mut","","",297,[[]]],[11,"into","","",297,[[]]],[11,"from","","",297,[[]]],[11,"try_into","","",297,[[],["result",4]]],[11,"try_from","","",297,[[],["result",4]]],[11,"type_id","","",297,[[],["typeid",3]]],[11,"borrow","","",298,[[]]],[11,"borrow_mut","","",298,[[]]],[11,"into","","",298,[[]]],[11,"from","","",298,[[]]],[11,"try_into","","",298,[[],["result",4]]],[11,"try_from","","",298,[[],["result",4]]],[11,"type_id","","",298,[[],["typeid",3]]],[11,"borrow","","",299,[[]]],[11,"borrow_mut","","",299,[[]]],[11,"into","","",299,[[]]],[11,"from","","",299,[[]]],[11,"try_into","","",299,[[],["result",4]]],[11,"try_from","","",299,[[],["result",4]]],[11,"type_id","","",299,[[],["typeid",3]]],[11,"borrow","","",300,[[]]],[11,"borrow_mut","","",300,[[]]],[11,"into","","",300,[[]]],[11,"from","","",300,[[]]],[11,"try_into","","",300,[[],["result",4]]],[11,"try_from","","",300,[[],["result",4]]],[11,"type_id","","",300,[[],["typeid",3]]],[11,"borrow","","",301,[[]]],[11,"borrow_mut","","",301,[[]]],[11,"into","","",301,[[]]],[11,"from","","",301,[[]]],[11,"try_into","","",301,[[],["result",4]]],[11,"try_from","","",301,[[],["result",4]]],[11,"type_id","","",301,[[],["typeid",3]]],[11,"borrow","","",302,[[]]],[11,"borrow_mut","","",302,[[]]],[11,"into","","",302,[[]]],[11,"from","","",302,[[]]],[11,"try_into","","",302,[[],["result",4]]],[11,"try_from","","",302,[[],["result",4]]],[11,"type_id","","",302,[[],["typeid",3]]],[11,"borrow","","",303,[[]]],[11,"borrow_mut","","",303,[[]]],[11,"into","","",303,[[]]],[11,"from","","",303,[[]]],[11,"try_into","","",303,[[],["result",4]]],[11,"try_from","","",303,[[],["result",4]]],[11,"type_id","","",303,[[],["typeid",3]]],[11,"borrow","","",304,[[]]],[11,"borrow_mut","","",304,[[]]],[11,"into","","",304,[[]]],[11,"from","","",304,[[]]],[11,"try_into","","",304,[[],["result",4]]],[11,"try_from","","",304,[[],["result",4]]],[11,"type_id","","",304,[[],["typeid",3]]],[11,"borrow","core::arch::aarch64","",305,[[]]],[11,"borrow_mut","","",305,[[]]],[11,"into","","",305,[[]]],[11,"from","","",305,[[]]],[11,"try_into","","",305,[[],["result",4]]],[11,"try_from","","",305,[[],["result",4]]],[11,"type_id","","",305,[[],["typeid",3]]],[11,"borrow","","",306,[[]]],[11,"borrow_mut","","",306,[[]]],[11,"into","","",306,[[]]],[11,"from","","",306,[[]]],[11,"try_into","","",306,[[],["result",4]]],[11,"try_from","","",306,[[],["result",4]]],[11,"type_id","","",306,[[],["typeid",3]]],[11,"borrow","","",138,[[]]],[11,"borrow_mut","","",138,[[]]],[11,"into","","",138,[[]]],[11,"from","","",138,[[]]],[11,"try_into","","",138,[[],["result",4]]],[11,"try_from","","",138,[[],["result",4]]],[11,"type_id","","",138,[[],["typeid",3]]],[11,"borrow","","",139,[[]]],[11,"borrow_mut","","",139,[[]]],[11,"into","","",139,[[]]],[11,"from","","",139,[[]]],[11,"try_into","","",139,[[],["result",4]]],[11,"try_from","","",139,[[],["result",4]]],[11,"type_id","","",139,[[],["typeid",3]]],[11,"borrow","","",140,[[]]],[11,"borrow_mut","","",140,[[]]],[11,"into","","",140,[[]]],[11,"from","","",140,[[]]],[11,"try_into","","",140,[[],["result",4]]],[11,"try_from","","",140,[[],["result",4]]],[11,"type_id","","",140,[[],["typeid",3]]],[11,"borrow","","",141,[[]]],[11,"borrow_mut","","",141,[[]]],[11,"into","","",141,[[]]],[11,"from","","",141,[[]]],[11,"try_into","","",141,[[],["result",4]]],[11,"try_from","","",141,[[],["result",4]]],[11,"type_id","","",141,[[],["typeid",3]]],[11,"borrow","","",142,[[]]],[11,"borrow_mut","","",142,[[]]],[11,"into","","",142,[[]]],[11,"from","","",142,[[]]],[11,"try_into","","",142,[[],["result",4]]],[11,"try_from","","",142,[[],["result",4]]],[11,"type_id","","",142,[[],["typeid",3]]],[11,"borrow","","",143,[[]]],[11,"borrow_mut","","",143,[[]]],[11,"into","","",143,[[]]],[11,"from","","",143,[[]]],[11,"try_into","","",143,[[],["result",4]]],[11,"try_from","","",143,[[],["result",4]]],[11,"type_id","","",143,[[],["typeid",3]]],[11,"borrow","","",144,[[]]],[11,"borrow_mut","","",144,[[]]],[11,"into","","",144,[[]]],[11,"from","","",144,[[]]],[11,"try_into","","",144,[[],["result",4]]],[11,"try_from","","",144,[[],["result",4]]],[11,"type_id","","",144,[[],["typeid",3]]],[11,"borrow","","",145,[[]]],[11,"borrow_mut","","",145,[[]]],[11,"into","","",145,[[]]],[11,"from","","",145,[[]]],[11,"try_into","","",145,[[],["result",4]]],[11,"try_from","","",145,[[],["result",4]]],[11,"type_id","","",145,[[],["typeid",3]]],[11,"borrow","","",146,[[]]],[11,"borrow_mut","","",146,[[]]],[11,"into","","",146,[[]]],[11,"from","","",146,[[]]],[11,"try_into","","",146,[[],["result",4]]],[11,"try_from","","",146,[[],["result",4]]],[11,"type_id","","",146,[[],["typeid",3]]],[11,"borrow","core::arch::arm","",307,[[]]],[11,"borrow_mut","","",307,[[]]],[11,"into","","",307,[[]]],[11,"from","","",307,[[]]],[11,"try_into","","",307,[[],["result",4]]],[11,"try_from","","",307,[[],["result",4]]],[11,"type_id","","",307,[[],["typeid",3]]],[11,"borrow","","",308,[[]]],[11,"borrow_mut","","",308,[[]]],[11,"into","","",308,[[]]],[11,"from","","",308,[[]]],[11,"try_into","","",308,[[],["result",4]]],[11,"try_from","","",308,[[],["result",4]]],[11,"type_id","","",308,[[],["typeid",3]]],[11,"borrow","","",309,[[]]],[11,"borrow_mut","","",309,[[]]],[11,"into","","",309,[[]]],[11,"from","","",309,[[]]],[11,"try_into","","",309,[[],["result",4]]],[11,"try_from","","",309,[[],["result",4]]],[11,"type_id","","",309,[[],["typeid",3]]],[11,"borrow","","",310,[[]]],[11,"borrow_mut","","",310,[[]]],[11,"into","","",310,[[]]],[11,"from","","",310,[[]]],[11,"try_into","","",310,[[],["result",4]]],[11,"try_from","","",310,[[],["result",4]]],[11,"type_id","","",310,[[],["typeid",3]]],[11,"borrow","","",311,[[]]],[11,"borrow_mut","","",311,[[]]],[11,"into","","",311,[[]]],[11,"from","","",311,[[]]],[11,"try_into","","",311,[[],["result",4]]],[11,"try_from","","",311,[[],["result",4]]],[11,"type_id","","",311,[[],["typeid",3]]],[11,"borrow","","",312,[[]]],[11,"borrow_mut","","",312,[[]]],[11,"into","","",312,[[]]],[11,"from","","",312,[[]]],[11,"try_into","","",312,[[],["result",4]]],[11,"try_from","","",312,[[],["result",4]]],[11,"type_id","","",312,[[],["typeid",3]]],[11,"borrow","","",313,[[]]],[11,"borrow_mut","","",313,[[]]],[11,"into","","",313,[[]]],[11,"from","","",313,[[]]],[11,"try_into","","",313,[[],["result",4]]],[11,"try_from","","",313,[[],["result",4]]],[11,"type_id","","",313,[[],["typeid",3]]],[11,"borrow","","",314,[[]]],[11,"borrow_mut","","",314,[[]]],[11,"into","","",314,[[]]],[11,"from","","",314,[[]]],[11,"try_into","","",314,[[],["result",4]]],[11,"try_from","","",314,[[],["result",4]]],[11,"type_id","","",314,[[],["typeid",3]]],[11,"borrow","","",315,[[]]],[11,"borrow_mut","","",315,[[]]],[11,"into","","",315,[[]]],[11,"from","","",315,[[]]],[11,"try_into","","",315,[[],["result",4]]],[11,"try_from","","",315,[[],["result",4]]],[11,"type_id","","",315,[[],["typeid",3]]],[11,"borrow","","",316,[[]]],[11,"borrow_mut","","",316,[[]]],[11,"into","","",316,[[]]],[11,"from","","",316,[[]]],[11,"try_into","","",316,[[],["result",4]]],[11,"try_from","","",316,[[],["result",4]]],[11,"type_id","","",316,[[],["typeid",3]]],[11,"borrow","","",317,[[]]],[11,"borrow_mut","","",317,[[]]],[11,"into","","",317,[[]]],[11,"from","","",317,[[]]],[11,"try_into","","",317,[[],["result",4]]],[11,"try_from","","",317,[[],["result",4]]],[11,"type_id","","",317,[[],["typeid",3]]],[11,"borrow","","",318,[[]]],[11,"borrow_mut","","",318,[[]]],[11,"into","","",318,[[]]],[11,"from","","",318,[[]]],[11,"try_into","","",318,[[],["result",4]]],[11,"try_from","","",318,[[],["result",4]]],[11,"type_id","","",318,[[],["typeid",3]]],[11,"borrow","","",319,[[]]],[11,"borrow_mut","","",319,[[]]],[11,"into","","",319,[[]]],[11,"from","","",319,[[]]],[11,"try_into","","",319,[[],["result",4]]],[11,"try_from","","",319,[[],["result",4]]],[11,"type_id","","",319,[[],["typeid",3]]],[11,"borrow","","",320,[[]]],[11,"borrow_mut","","",320,[[]]],[11,"into","","",320,[[]]],[11,"from","","",320,[[]]],[11,"try_into","","",320,[[],["result",4]]],[11,"try_from","","",320,[[],["result",4]]],[11,"type_id","","",320,[[],["typeid",3]]],[11,"borrow","","",321,[[]]],[11,"borrow_mut","","",321,[[]]],[11,"into","","",321,[[]]],[11,"from","","",321,[[]]],[11,"try_into","","",321,[[],["result",4]]],[11,"try_from","","",321,[[],["result",4]]],[11,"type_id","","",321,[[],["typeid",3]]],[11,"borrow","","",322,[[]]],[11,"borrow_mut","","",322,[[]]],[11,"into","","",322,[[]]],[11,"from","","",322,[[]]],[11,"try_into","","",322,[[],["result",4]]],[11,"try_from","","",322,[[],["result",4]]],[11,"type_id","","",322,[[],["typeid",3]]],[11,"borrow","","",323,[[]]],[11,"borrow_mut","","",323,[[]]],[11,"into","","",323,[[]]],[11,"from","","",323,[[]]],[11,"try_into","","",323,[[],["result",4]]],[11,"try_from","","",323,[[],["result",4]]],[11,"type_id","","",323,[[],["typeid",3]]],[11,"borrow","","",324,[[]]],[11,"borrow_mut","","",324,[[]]],[11,"into","","",324,[[]]],[11,"from","","",324,[[]]],[11,"try_into","","",324,[[],["result",4]]],[11,"try_from","","",324,[[],["result",4]]],[11,"type_id","","",324,[[],["typeid",3]]],[11,"borrow","","",325,[[]]],[11,"borrow_mut","","",325,[[]]],[11,"into","","",325,[[]]],[11,"from","","",325,[[]]],[11,"try_into","","",325,[[],["result",4]]],[11,"try_from","","",325,[[],["result",4]]],[11,"type_id","","",325,[[],["typeid",3]]],[11,"borrow","","",326,[[]]],[11,"borrow_mut","","",326,[[]]],[11,"into","","",326,[[]]],[11,"from","","",326,[[]]],[11,"try_into","","",326,[[],["result",4]]],[11,"try_from","","",326,[[],["result",4]]],[11,"type_id","","",326,[[],["typeid",3]]],[11,"borrow","","",327,[[]]],[11,"borrow_mut","","",327,[[]]],[11,"into","","",327,[[]]],[11,"from","","",327,[[]]],[11,"try_into","","",327,[[],["result",4]]],[11,"try_from","","",327,[[],["result",4]]],[11,"type_id","","",327,[[],["typeid",3]]],[11,"borrow","","",328,[[]]],[11,"borrow_mut","","",328,[[]]],[11,"into","","",328,[[]]],[11,"from","","",328,[[]]],[11,"try_into","","",328,[[],["result",4]]],[11,"try_from","","",328,[[],["result",4]]],[11,"type_id","","",328,[[],["typeid",3]]],[11,"borrow","","",329,[[]]],[11,"borrow_mut","","",329,[[]]],[11,"into","","",329,[[]]],[11,"from","","",329,[[]]],[11,"try_into","","",329,[[],["result",4]]],[11,"try_from","","",329,[[],["result",4]]],[11,"type_id","","",329,[[],["typeid",3]]],[11,"borrow","","",330,[[]]],[11,"borrow_mut","","",330,[[]]],[11,"into","","",330,[[]]],[11,"from","","",330,[[]]],[11,"try_into","","",330,[[],["result",4]]],[11,"try_from","","",330,[[],["result",4]]],[11,"type_id","","",330,[[],["typeid",3]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"into","","",129,[[]]],[11,"from","","",129,[[]]],[11,"try_into","","",129,[[],["result",4]]],[11,"try_from","","",129,[[],["result",4]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"into","","",130,[[]]],[11,"from","","",130,[[]]],[11,"try_into","","",130,[[],["result",4]]],[11,"try_from","","",130,[[],["result",4]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"borrow","","",131,[[]]],[11,"borrow_mut","","",131,[[]]],[11,"into","","",131,[[]]],[11,"from","","",131,[[]]],[11,"try_into","","",131,[[],["result",4]]],[11,"try_from","","",131,[[],["result",4]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"into","","",132,[[]]],[11,"from","","",132,[[]]],[11,"try_into","","",132,[[],["result",4]]],[11,"try_from","","",132,[[],["result",4]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"borrow","","",133,[[]]],[11,"borrow_mut","","",133,[[]]],[11,"into","","",133,[[]]],[11,"from","","",133,[[]]],[11,"try_into","","",133,[[],["result",4]]],[11,"try_from","","",133,[[],["result",4]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"borrow","","",134,[[]]],[11,"borrow_mut","","",134,[[]]],[11,"into","","",134,[[]]],[11,"from","","",134,[[]]],[11,"try_into","","",134,[[],["result",4]]],[11,"try_from","","",134,[[],["result",4]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"borrow","","",135,[[]]],[11,"borrow_mut","","",135,[[]]],[11,"into","","",135,[[]]],[11,"from","","",135,[[]]],[11,"try_into","","",135,[[],["result",4]]],[11,"try_from","","",135,[[],["result",4]]],[11,"type_id","","",135,[[],["typeid",3]]],[11,"borrow","","",136,[[]]],[11,"borrow_mut","","",136,[[]]],[11,"into","","",136,[[]]],[11,"from","","",136,[[]]],[11,"try_into","","",136,[[],["result",4]]],[11,"try_from","","",136,[[],["result",4]]],[11,"type_id","","",136,[[],["typeid",3]]],[11,"borrow","","",137,[[]]],[11,"borrow_mut","","",137,[[]]],[11,"into","","",137,[[]]],[11,"from","","",137,[[]]],[11,"try_into","","",137,[[],["result",4]]],[11,"try_from","","",137,[[],["result",4]]],[11,"type_id","","",137,[[],["typeid",3]]],[11,"borrow","core::arch::wasm32","",331,[[]]],[11,"borrow_mut","","",331,[[]]],[11,"into","","",331,[[]]],[11,"from","","",331,[[]]],[11,"try_into","","",331,[[],["result",4]]],[11,"try_from","","",331,[[],["result",4]]],[11,"type_id","","",331,[[],["typeid",3]]],[11,"borrow","core::arch::powerpc","",332,[[]]],[11,"borrow_mut","","",332,[[]]],[11,"into","","",332,[[]]],[11,"from","","",332,[[]]],[11,"try_into","","",332,[[],["result",4]]],[11,"try_from","","",332,[[],["result",4]]],[11,"type_id","","",332,[[],["typeid",3]]],[11,"borrow","","",333,[[]]],[11,"borrow_mut","","",333,[[]]],[11,"into","","",333,[[]]],[11,"from","","",333,[[]]],[11,"try_into","","",333,[[],["result",4]]],[11,"try_from","","",333,[[],["result",4]]],[11,"type_id","","",333,[[],["typeid",3]]],[11,"borrow","","",334,[[]]],[11,"borrow_mut","","",334,[[]]],[11,"into","","",334,[[]]],[11,"from","","",334,[[]]],[11,"try_into","","",334,[[],["result",4]]],[11,"try_from","","",334,[[],["result",4]]],[11,"type_id","","",334,[[],["typeid",3]]],[11,"borrow","","",335,[[]]],[11,"borrow_mut","","",335,[[]]],[11,"into","","",335,[[]]],[11,"from","","",335,[[]]],[11,"try_into","","",335,[[],["result",4]]],[11,"try_from","","",335,[[],["result",4]]],[11,"type_id","","",335,[[],["typeid",3]]],[11,"clone","core::num","",147,[[],["parsefloaterror",3]]],[11,"clone","","",148,[[],["tryfrominterror",3]]],[11,"clone","","",149,[[],["parseinterror",3]]],[11,"clone","","",1,[[],["interrorkind",4]]],[11,"clone","","",150,[[],["nonzerou8",3]]],[11,"clone","","",151,[[],["nonzerou16",3]]],[11,"clone","","",152,[[],["nonzerou32",3]]],[11,"clone","","",153,[[],["nonzerou64",3]]],[11,"clone","","",154,[[],["nonzerou128",3]]],[11,"clone","","",155,[[],["nonzerousize",3]]],[11,"clone","","",156,[[],["nonzeroi8",3]]],[11,"clone","","",157,[[],["nonzeroi16",3]]],[11,"clone","","",158,[[],["nonzeroi32",3]]],[11,"clone","","",159,[[],["nonzeroi64",3]]],[11,"clone","","",160,[[],["nonzeroi128",3]]],[11,"clone","","",161,[[],["nonzeroisize",3]]],[11,"clone","","",0,[[],["wrapping",3]]],[11,"clone","","",2,[[],["fpcategory",4]]],[11,"clone","core::mem","",162,[[],["manuallydrop",3]]],[11,"clone","","",163,[[]]],[11,"clone","","",164,[[]]],[11,"clone","core::ptr","",165,[[]]],[11,"clone","core::cmp","",7,[[],["ordering",4]]],[11,"clone","","",8,[[],["reverse",3]]],[11,"clone","core::convert","",166,[[],["infallible",4]]],[11,"clone","core::marker","",167,[[]]],[11,"clone","","",168,[[],["phantompinned",3]]],[11,"clone","core::ops","",58,[[],["controlflow",4]]],[11,"clone","","",57,[[],["generatorstate",4]]],[11,"clone","","",169,[[],["rangefull",3]]],[11,"clone","","",49,[[],["range",3]]],[11,"clone","","",50,[[],["rangefrom",3]]],[11,"clone","","",51,[[],["rangeto",3]]],[11,"clone","","",170,[[],["rangeinclusive",3]]],[11,"clone","","",54,[[],["rangetoinclusive",3]]],[11,"clone","","",52,[[],["bound",4]]],[11,"clone","core::any","",60,[[],["typeid",3]]],[11,"clone","core::array","",171,[[]]],[11,"clone","","",172,[[],["tryfromsliceerror",3]]],[11,"clone","core::ascii","",173,[[],["escapedefault",3]]],[11,"clone","core::cell","",62,[[],["cell",3]]],[11,"clone","","PanicsPanics if the value is currently mutably borrowed.",63,[[],["refcell",3]]],[11,"clone","core::char","",177,[[],["parsecharerror",3]]],[11,"clone","","",178,[[],["chartryfromerror",3]]],[11,"clone","","",179,[[],["decodeutf16",3]]],[11,"clone","","",180,[[],["decodeutf16error",3]]],[11,"clone","","",181,[[],["escapeunicode",3]]],[11,"clone","","",182,[[],["escapedefault",3]]],[11,"clone","","",183,[[],["escapedebug",3]]],[11,"clone","","",184,[[],["tolowercase",3]]],[11,"clone","","",185,[[],["touppercase",3]]],[11,"clone","core::ffi","",66,[[]]],[11,"clone","core::iter","",188,[[],["chain",3]]],[11,"clone","","",189,[[],["cloned",3]]],[11,"clone","","",190,[[],["copied",3]]],[11,"clone","","",191,[[],["cycle",3]]],[11,"clone","","",192,[[],["enumerate",3]]],[11,"clone","","",193,[[],["filter",3]]],[11,"clone","","",194,[[],["filtermap",3]]],[11,"clone","","",195,[[]]],[11,"clone","","",196,[[]]],[11,"clone","","",197,[[],["fuse",3]]],[11,"clone","","",198,[[],["inspect",3]]],[11,"clone","","",199,[[],["map",3]]],[11,"clone","","",200,[[],["mapwhile",3]]],[11,"clone","","",201,[[],["peekable",3]]],[11,"clone","","",202,[[],["rev",3]]],[11,"clone","","",203,[[],["scan",3]]],[11,"clone","","",204,[[],["skip",3]]],[11,"clone","","",205,[[],["skipwhile",3]]],[11,"clone","","",206,[[],["stepby",3]]],[11,"clone","","",207,[[],["take",3]]],[11,"clone","","",208,[[],["takewhile",3]]],[11,"clone","","",209,[[],["zip",3]]],[11,"clone","","",210,[[],["empty",3]]],[11,"clone","","",211,[[],["fromfn",3]]],[11,"clone","","",212,[[],["once",3]]],[11,"clone","","",213,[[],["oncewith",3]]],[11,"clone","","",214,[[],["repeat",3]]],[11,"clone","","",215,[[],["repeatwith",3]]],[11,"clone","","",216,[[],["successors",3]]],[11,"clone","core::lazy","",77,[[],["oncecell",3]]],[11,"clone","core::option","",79,[[]]],[11,"clone_from","","",79,[[]]],[11,"clone","","",217,[[]]],[11,"clone","","",219,[[],["intoiter",3]]],[11,"clone","","",220,[[],["noneerror",3]]],[11,"clone","core::panic","",81,[[],["location",3]]],[11,"clone","core::pin","",82,[[],["pin",3]]],[11,"clone","core::raw","",83,[[],["traitobject",3]]],[11,"clone","core::result","",84,[[]]],[11,"clone_from","","",84,[[]]],[11,"clone","","",221,[[]]],[11,"clone","","",223,[[],["intoiter",3]]],[11,"clone","core::sync::atomic","",85,[[],["ordering",4]]],[11,"clone","core::fmt","",229,[[],["error",3]]],[11,"clone","","",100,[[],["arguments",3]]],[11,"clone","core::hash","",230,[[],["siphasher",3]]],[11,"clone","","",231,[[],["buildhasherdefault",3]]],[11,"clone","core::slice","",232,[[]]],[11,"clone","","",234,[[]]],[11,"clone","","",235,[[]]],[11,"clone","","",238,[[],["rsplit",3]]],[11,"clone","","",244,[[]]],[11,"clone","","",245,[[]]],[11,"clone","","",247,[[]]],[11,"clone","","",249,[[],["arraywindows",3]]],[11,"clone","","",250,[[]]],[11,"clone","","",252,[[]]],[11,"clone","","",254,[[],["rchunksexact",3]]],[11,"clone","core::str","",256,[[],["utf8error",3]]],[11,"clone","","",257,[[],["parseboolerror",3]]],[11,"clone","","",258,[[],["chars",3]]],[11,"clone","","",259,[[],["charindices",3]]],[11,"clone","","",260,[[],["bytes",3]]],[11,"clone","","",261,[[]]],[11,"clone","","",262,[[]]],[11,"clone","","",263,[[]]],[11,"clone","","",264,[[]]],[11,"clone","","",265,[[]]],[11,"clone","","",266,[[]]],[11,"clone","","",267,[[]]],[11,"clone","","",268,[[]]],[11,"clone","","",269,[[]]],[11,"clone","","",270,[[]]],[11,"clone","","",271,[[],["lines",3]]],[11,"clone","","",272,[[],["linesany",3]]],[11,"clone","","",273,[[],["splitwhitespace",3]]],[11,"clone","","",274,[[],["splitasciiwhitespace",3]]],[11,"clone","","",275,[[],["encodeutf16",3]]],[11,"clone","","",276,[[],["escapedebug",3]]],[11,"clone","","",277,[[],["escapedefault",3]]],[11,"clone","","",278,[[],["escapeunicode",3]]],[11,"clone","core::str::pattern","",116,[[],["searchstep",4]]],[11,"clone","","",279,[[],["charsearcher",3]]],[11,"clone","","",280,[[],["charslicesearcher",3]]],[11,"clone","","",281,[[],["charpredicatesearcher",3]]],[11,"clone","","",282,[[],["strsearcher",3]]],[11,"clone","core::time","",122,[[],["duration",3]]],[11,"clone","core::future","",284,[[]]],[11,"clone","","",286,[[],["ready",3]]],[11,"clone","core::task","",125,[[],["poll",4]]],[11,"clone","","",288,[[],["rawwakervtable",3]]],[11,"clone","","",290,[[]]],[11,"clone","core::alloc","",291,[[],["layout",3]]],[11,"clone","","",292,[[],["layouterror",3]]],[11,"clone","","",293,[[],["allocerror",3]]],[11,"clone","core::arch::x86","",296,[[],["__m128i",3]]],[11,"clone","","",297,[[],["__m128",3]]],[11,"clone","","",298,[[],["__m128d",3]]],[11,"clone","","",299,[[],["__m256i",3]]],[11,"clone","","",300,[[],["__m256",3]]],[11,"clone","","",301,[[],["__m256d",3]]],[11,"clone","","",302,[[],["__m512i",3]]],[11,"clone","","",303,[[],["__m512",3]]],[11,"clone","","",304,[[],["__m512d",3]]],[11,"clone","","",128,[[],["cpuidresult",3]]],[11,"clone","core::arch::aarch64","",305,[[],["float64x1_t",3]]],[11,"clone","","",306,[[],["float64x2_t",3]]],[11,"clone","","",138,[[],["int8x16x2_t",3]]],[11,"clone","","",139,[[],["int8x16x3_t",3]]],[11,"clone","","",140,[[],["int8x16x4_t",3]]],[11,"clone","","",141,[[],["uint8x16x2_t",3]]],[11,"clone","","",142,[[],["uint8x16x3_t",3]]],[11,"clone","","",143,[[],["uint8x16x4_t",3]]],[11,"clone","","",144,[[],["poly8x16x2_t",3]]],[11,"clone","","",145,[[],["poly8x16x3_t",3]]],[11,"clone","","",146,[[],["poly8x16x4_t",3]]],[11,"clone","core::arch::arm","",307,[[],["int8x8_t",3]]],[11,"clone","","",308,[[],["uint8x8_t",3]]],[11,"clone","","",309,[[],["poly8x8_t",3]]],[11,"clone","","",310,[[],["int16x4_t",3]]],[11,"clone","","",311,[[],["uint16x4_t",3]]],[11,"clone","","",312,[[],["poly16x4_t",3]]],[11,"clone","","",313,[[],["int32x2_t",3]]],[11,"clone","","",314,[[],["uint32x2_t",3]]],[11,"clone","","",315,[[],["float32x2_t",3]]],[11,"clone","","",316,[[],["int64x1_t",3]]],[11,"clone","","",317,[[],["uint64x1_t",3]]],[11,"clone","","",318,[[],["poly64x1_t",3]]],[11,"clone","","",319,[[],["int8x16_t",3]]],[11,"clone","","",320,[[],["uint8x16_t",3]]],[11,"clone","","",321,[[],["poly8x16_t",3]]],[11,"clone","","",322,[[],["int16x8_t",3]]],[11,"clone","","",323,[[],["uint16x8_t",3]]],[11,"clone","","",324,[[],["poly16x8_t",3]]],[11,"clone","","",325,[[],["int32x4_t",3]]],[11,"clone","","",326,[[],["uint32x4_t",3]]],[11,"clone","","",327,[[],["float32x4_t",3]]],[11,"clone","","",328,[[],["int64x2_t",3]]],[11,"clone","","",329,[[],["uint64x2_t",3]]],[11,"clone","","",330,[[],["poly64x2_t",3]]],[11,"clone","","",129,[[],["int8x8x2_t",3]]],[11,"clone","","",130,[[],["int8x8x3_t",3]]],[11,"clone","","",131,[[],["int8x8x4_t",3]]],[11,"clone","","",132,[[],["uint8x8x2_t",3]]],[11,"clone","","",133,[[],["uint8x8x3_t",3]]],[11,"clone","","",134,[[],["uint8x8x4_t",3]]],[11,"clone","","",135,[[],["poly8x8x2_t",3]]],[11,"clone","","",136,[[],["poly8x8x3_t",3]]],[11,"clone","","",137,[[],["poly8x8x4_t",3]]],[11,"clone","core::arch::wasm32","",331,[[],["v128",3]]],[11,"clone","core::arch::powerpc","",332,[[],["vector_signed_long",3]]],[11,"clone","","",333,[[],["vector_unsigned_long",3]]],[11,"clone","","",334,[[],["vector_bool_long",3]]],[11,"clone","","",335,[[],["vector_double",3]]],[11,"eq","core::num","",147,[[["parsefloaterror",3]]]],[11,"ne","","",147,[[["parsefloaterror",3]]]],[11,"eq","","",148,[[["tryfrominterror",3]]]],[11,"ne","","",148,[[["tryfrominterror",3]]]],[11,"eq","","",149,[[["parseinterror",3]]]],[11,"ne","","",149,[[["parseinterror",3]]]],[11,"eq","","",1,[[["interrorkind",4]]]],[11,"eq","","",150,[[["nonzerou8",3]]]],[11,"ne","","",150,[[["nonzerou8",3]]]],[11,"eq","","",151,[[["nonzerou16",3]]]],[11,"ne","","",151,[[["nonzerou16",3]]]],[11,"eq","","",152,[[["nonzerou32",3]]]],[11,"ne","","",152,[[["nonzerou32",3]]]],[11,"eq","","",153,[[["nonzerou64",3]]]],[11,"ne","","",153,[[["nonzerou64",3]]]],[11,"eq","","",154,[[["nonzerou128",3]]]],[11,"ne","","",154,[[["nonzerou128",3]]]],[11,"eq","","",155,[[["nonzerousize",3]]]],[11,"ne","","",155,[[["nonzerousize",3]]]],[11,"eq","","",156,[[["nonzeroi8",3]]]],[11,"ne","","",156,[[["nonzeroi8",3]]]],[11,"eq","","",157,[[["nonzeroi16",3]]]],[11,"ne","","",157,[[["nonzeroi16",3]]]],[11,"eq","","",158,[[["nonzeroi32",3]]]],[11,"ne","","",158,[[["nonzeroi32",3]]]],[11,"eq","","",159,[[["nonzeroi64",3]]]],[11,"ne","","",159,[[["nonzeroi64",3]]]],[11,"eq","","",160,[[["nonzeroi128",3]]]],[11,"ne","","",160,[[["nonzeroi128",3]]]],[11,"eq","","",161,[[["nonzeroisize",3]]]],[11,"ne","","",161,[[["nonzeroisize",3]]]],[11,"eq","","",0,[[["wrapping",3]]]],[11,"ne","","",0,[[["wrapping",3]]]],[11,"eq","","",2,[[["fpcategory",4]]]],[11,"eq","core::mem","",162,[[["manuallydrop",3]]]],[11,"ne","","",162,[[["manuallydrop",3]]]],[11,"eq","","",164,[[]]],[11,"eq","core::ptr","",165,[[]]],[11,"eq","core::cmp","",7,[[["ordering",4]]]],[11,"eq","","",8,[[["reverse",3]]]],[11,"ne","","",8,[[["reverse",3]]]],[11,"eq","core::convert","",166,[[["infallible",4]]]],[11,"eq","core::marker","",167,[[["phantomdata",3]]]],[11,"eq","","",168,[[["phantompinned",3]]]],[11,"eq","core::ops","",58,[[["controlflow",4]]]],[11,"ne","","",58,[[["controlflow",4]]]],[11,"eq","","",57,[[["generatorstate",4]]]],[11,"ne","","",57,[[["generatorstate",4]]]],[11,"eq","","",169,[[["rangefull",3]]]],[11,"eq","","",49,[[["range",3]]]],[11,"ne","","",49,[[["range",3]]]],[11,"eq","","",50,[[["rangefrom",3]]]],[11,"ne","","",50,[[["rangefrom",3]]]],[11,"eq","","",51,[[["rangeto",3]]]],[11,"ne","","",51,[[["rangeto",3]]]],[11,"eq","","",170,[[["rangeinclusive",3]]]],[11,"ne","","",170,[[["rangeinclusive",3]]]],[11,"eq","","",54,[[["rangetoinclusive",3]]]],[11,"ne","","",54,[[["rangetoinclusive",3]]]],[11,"eq","","",52,[[["bound",4]]]],[11,"ne","","",52,[[["bound",4]]]],[11,"eq","core::any","",60,[[["typeid",3]]]],[11,"ne","","",60,[[["typeid",3]]]],[11,"eq","core::cell","",62,[[["cell",3]]]],[11,"eq","","PanicsPanics if the value in either <code>RefCell</code> is currently …",63,[[["refcell",3]]]],[11,"eq","core::char","",177,[[["parsecharerror",3]]]],[11,"ne","","",177,[[["parsecharerror",3]]]],[11,"eq","","",178,[[["chartryfromerror",3]]]],[11,"ne","","",178,[[["chartryfromerror",3]]]],[11,"eq","","",180,[[["decodeutf16error",3]]]],[11,"ne","","",180,[[["decodeutf16error",3]]]],[11,"eq","core::lazy","",77,[[]]],[11,"eq","core::option","",79,[[["option",4]]]],[11,"ne","","",79,[[["option",4]]]],[11,"eq","","",220,[[["noneerror",3]]]],[11,"eq","core::panic","",81,[[["location",3]]]],[11,"ne","","",81,[[["location",3]]]],[11,"eq","core::pin","",82,[[["pin",3]]]],[11,"ne","","",82,[[["pin",3]]]],[11,"eq","core::result","",84,[[["result",4]]]],[11,"ne","","",84,[[["result",4]]]],[11,"eq","core::sync::atomic","",85,[[["ordering",4]]]],[11,"eq","core::fmt","",229,[[["error",3]]]],[11,"eq","core::hash","",231,[[["buildhasherdefault",3]]]],[11,"eq","core::str","",256,[[["utf8error",3]]]],[11,"ne","","",256,[[["utf8error",3]]]],[11,"eq","","",257,[[["parseboolerror",3]]]],[11,"ne","","",257,[[["parseboolerror",3]]]],[11,"eq","core::str::pattern","",116,[[["searchstep",4]]]],[11,"ne","","",116,[[["searchstep",4]]]],[11,"eq","core::str::lossy","",120,[[["utf8lossychunk",3]]]],[11,"ne","","",120,[[["utf8lossychunk",3]]]],[11,"eq","core::time","",122,[[["duration",3]]]],[11,"ne","","",122,[[["duration",3]]]],[11,"eq","core::task","",125,[[["poll",4]]]],[11,"ne","","",125,[[["poll",4]]]],[11,"eq","","",287,[[["rawwaker",3]]]],[11,"ne","","",287,[[["rawwaker",3]]]],[11,"eq","","",288,[[["rawwakervtable",3]]]],[11,"ne","","",288,[[["rawwakervtable",3]]]],[11,"eq","core::alloc","",291,[[["layout",3]]]],[11,"ne","","",291,[[["layout",3]]]],[11,"eq","","",292,[[["layouterror",3]]]],[11,"ne","","",292,[[["layouterror",3]]]],[11,"eq","","",293,[[["allocerror",3]]]],[11,"eq","core::arch::x86","",128,[[["cpuidresult",3]]]],[11,"ne","","",128,[[["cpuidresult",3]]]],[11,"cmp","core::num","",150,[[["nonzerou8",3]],["ordering",4]]],[11,"cmp","","",151,[[["nonzerou16",3]],["ordering",4]]],[11,"cmp","","",152,[[["nonzerou32",3]],["ordering",4]]],[11,"cmp","","",153,[[["nonzerou64",3]],["ordering",4]]],[11,"cmp","","",154,[[["nonzerou128",3]],["ordering",4]]],[11,"cmp","","",155,[[["nonzerousize",3]],["ordering",4]]],[11,"cmp","","",156,[[["nonzeroi8",3]],["ordering",4]]],[11,"cmp","","",157,[[["nonzeroi16",3]],["ordering",4]]],[11,"cmp","","",158,[[["nonzeroi32",3]],["ordering",4]]],[11,"cmp","","",159,[[["nonzeroi64",3]],["ordering",4]]],[11,"cmp","","",160,[[["nonzeroi128",3]],["ordering",4]]],[11,"cmp","","",161,[[["nonzeroisize",3]],["ordering",4]]],[11,"cmp","","",0,[[["wrapping",3]],["ordering",4]]],[11,"cmp","core::mem","",162,[[["manuallydrop",3]],["ordering",4]]],[11,"cmp","core::ptr","",165,[[],["ordering",4]]],[11,"cmp","core::cmp","",8,[[["reverse",3]],["ordering",4]]],[11,"cmp","","",7,[[["ordering",4]],["ordering",4]]],[11,"cmp","core::convert","",166,[[],["ordering",4]]],[11,"cmp","core::marker","",167,[[["phantomdata",3]],["ordering",4]]],[11,"cmp","","",168,[[["phantompinned",3]],["ordering",4]]],[11,"cmp","core::ops","",57,[[["generatorstate",4]],["ordering",4]]],[11,"cmp","core::any","",60,[[["typeid",3]],["ordering",4]]],[11,"cmp","core::cell","",62,[[["cell",3]],["ordering",4]]],[11,"cmp","","PanicsPanics if the value in either <code>RefCell</code> is currently …",63,[[["refcell",3]],["ordering",4]]],[11,"cmp","core::option","",79,[[["option",4]],["ordering",4]]],[11,"cmp","","",220,[[["noneerror",3]],["ordering",4]]],[11,"cmp","core::panic","",81,[[["location",3]],["ordering",4]]],[11,"cmp","core::pin","",82,[[],["ordering",4]]],[11,"cmp","core::result","",84,[[["result",4]],["ordering",4]]],[11,"cmp","core::fmt","",229,[[["error",3]],["ordering",4]]],[11,"cmp","core::time","",122,[[["duration",3]],["ordering",4]]],[11,"cmp","core::task","",125,[[["poll",4]],["ordering",4]]],[11,"cmp","core::arch::x86","",128,[[["cpuidresult",3]],["ordering",4]]],[11,"partial_cmp","core::num","",150,[[["nonzerou8",3]],[["option",4],["ordering",4]]]],[11,"lt","","",150,[[["nonzerou8",3]]]],[11,"le","","",150,[[["nonzerou8",3]]]],[11,"gt","","",150,[[["nonzerou8",3]]]],[11,"ge","","",150,[[["nonzerou8",3]]]],[11,"partial_cmp","","",151,[[["nonzerou16",3]],[["option",4],["ordering",4]]]],[11,"lt","","",151,[[["nonzerou16",3]]]],[11,"le","","",151,[[["nonzerou16",3]]]],[11,"gt","","",151,[[["nonzerou16",3]]]],[11,"ge","","",151,[[["nonzerou16",3]]]],[11,"partial_cmp","","",152,[[["nonzerou32",3]],[["option",4],["ordering",4]]]],[11,"lt","","",152,[[["nonzerou32",3]]]],[11,"le","","",152,[[["nonzerou32",3]]]],[11,"gt","","",152,[[["nonzerou32",3]]]],[11,"ge","","",152,[[["nonzerou32",3]]]],[11,"partial_cmp","","",153,[[["nonzerou64",3]],[["option",4],["ordering",4]]]],[11,"lt","","",153,[[["nonzerou64",3]]]],[11,"le","","",153,[[["nonzerou64",3]]]],[11,"gt","","",153,[[["nonzerou64",3]]]],[11,"ge","","",153,[[["nonzerou64",3]]]],[11,"partial_cmp","","",154,[[["nonzerou128",3]],[["option",4],["ordering",4]]]],[11,"lt","","",154,[[["nonzerou128",3]]]],[11,"le","","",154,[[["nonzerou128",3]]]],[11,"gt","","",154,[[["nonzerou128",3]]]],[11,"ge","","",154,[[["nonzerou128",3]]]],[11,"partial_cmp","","",155,[[["nonzerousize",3]],[["option",4],["ordering",4]]]],[11,"lt","","",155,[[["nonzerousize",3]]]],[11,"le","","",155,[[["nonzerousize",3]]]],[11,"gt","","",155,[[["nonzerousize",3]]]],[11,"ge","","",155,[[["nonzerousize",3]]]],[11,"partial_cmp","","",156,[[["nonzeroi8",3]],[["option",4],["ordering",4]]]],[11,"lt","","",156,[[["nonzeroi8",3]]]],[11,"le","","",156,[[["nonzeroi8",3]]]],[11,"gt","","",156,[[["nonzeroi8",3]]]],[11,"ge","","",156,[[["nonzeroi8",3]]]],[11,"partial_cmp","","",157,[[["nonzeroi16",3]],[["option",4],["ordering",4]]]],[11,"lt","","",157,[[["nonzeroi16",3]]]],[11,"le","","",157,[[["nonzeroi16",3]]]],[11,"gt","","",157,[[["nonzeroi16",3]]]],[11,"ge","","",157,[[["nonzeroi16",3]]]],[11,"partial_cmp","","",158,[[["nonzeroi32",3]],[["option",4],["ordering",4]]]],[11,"lt","","",158,[[["nonzeroi32",3]]]],[11,"le","","",158,[[["nonzeroi32",3]]]],[11,"gt","","",158,[[["nonzeroi32",3]]]],[11,"ge","","",158,[[["nonzeroi32",3]]]],[11,"partial_cmp","","",159,[[["nonzeroi64",3]],[["option",4],["ordering",4]]]],[11,"lt","","",159,[[["nonzeroi64",3]]]],[11,"le","","",159,[[["nonzeroi64",3]]]],[11,"gt","","",159,[[["nonzeroi64",3]]]],[11,"ge","","",159,[[["nonzeroi64",3]]]],[11,"partial_cmp","","",160,[[["nonzeroi128",3]],[["option",4],["ordering",4]]]],[11,"lt","","",160,[[["nonzeroi128",3]]]],[11,"le","","",160,[[["nonzeroi128",3]]]],[11,"gt","","",160,[[["nonzeroi128",3]]]],[11,"ge","","",160,[[["nonzeroi128",3]]]],[11,"partial_cmp","","",161,[[["nonzeroisize",3]],[["option",4],["ordering",4]]]],[11,"lt","","",161,[[["nonzeroisize",3]]]],[11,"le","","",161,[[["nonzeroisize",3]]]],[11,"gt","","",161,[[["nonzeroisize",3]]]],[11,"ge","","",161,[[["nonzeroisize",3]]]],[11,"partial_cmp","","",0,[[["wrapping",3]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["wrapping",3]]]],[11,"le","","",0,[[["wrapping",3]]]],[11,"gt","","",0,[[["wrapping",3]]]],[11,"ge","","",0,[[["wrapping",3]]]],[11,"partial_cmp","core::mem","",162,[[["manuallydrop",3]],[["option",4],["ordering",4]]]],[11,"lt","","",162,[[["manuallydrop",3]]]],[11,"le","","",162,[[["manuallydrop",3]]]],[11,"gt","","",162,[[["manuallydrop",3]]]],[11,"ge","","",162,[[["manuallydrop",3]]]],[11,"partial_cmp","core::ptr","",165,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","core::cmp","",8,[[["reverse",3]],[["option",4],["ordering",4]]]],[11,"lt","","",8,[[]]],[11,"le","","",8,[[]]],[11,"gt","","",8,[[]]],[11,"ge","","",8,[[]]],[11,"partial_cmp","","",7,[[["ordering",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","core::convert","",166,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","core::marker","",167,[[["phantomdata",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",168,[[["phantompinned",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","core::ops","",57,[[["generatorstate",4]],[["option",4],["ordering",4]]]],[11,"lt","","",57,[[["generatorstate",4]]]],[11,"le","","",57,[[["generatorstate",4]]]],[11,"gt","","",57,[[["generatorstate",4]]]],[11,"ge","","",57,[[["generatorstate",4]]]],[11,"partial_cmp","core::any","",60,[[["typeid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",60,[[["typeid",3]]]],[11,"le","","",60,[[["typeid",3]]]],[11,"gt","","",60,[[["typeid",3]]]],[11,"ge","","",60,[[["typeid",3]]]],[11,"partial_cmp","core::cell","",62,[[["cell",3]],[["option",4],["ordering",4]]]],[11,"lt","","",62,[[["cell",3]]]],[11,"le","","",62,[[["cell",3]]]],[11,"gt","","",62,[[["cell",3]]]],[11,"ge","","",62,[[["cell",3]]]],[11,"partial_cmp","","PanicsPanics if the value in either <code>RefCell</code> is currently …",63,[[["refcell",3]],[["option",4],["ordering",4]]]],[11,"lt","","PanicsPanics if the value in either <code>RefCell</code> is currently …",63,[[["refcell",3]]]],[11,"le","","PanicsPanics if the value in either <code>RefCell</code> is currently …",63,[[["refcell",3]]]],[11,"gt","","PanicsPanics if the value in either <code>RefCell</code> is currently …",63,[[["refcell",3]]]],[11,"ge","","PanicsPanics if the value in either <code>RefCell</code> is currently …",63,[[["refcell",3]]]],[11,"partial_cmp","core::option","",79,[[["option",4]],[["option",4],["ordering",4]]]],[11,"lt","","",79,[[["option",4]]]],[11,"le","","",79,[[["option",4]]]],[11,"gt","","",79,[[["option",4]]]],[11,"ge","","",79,[[["option",4]]]],[11,"partial_cmp","","",220,[[["noneerror",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","core::panic","",81,[[["location",3]],[["option",4],["ordering",4]]]],[11,"lt","","",81,[[["location",3]]]],[11,"le","","",81,[[["location",3]]]],[11,"gt","","",81,[[["location",3]]]],[11,"ge","","",81,[[["location",3]]]],[11,"partial_cmp","core::pin","",82,[[["pin",3]],[["ordering",4],["option",4]]]],[11,"lt","","",82,[[["pin",3]]]],[11,"le","","",82,[[["pin",3]]]],[11,"gt","","",82,[[["pin",3]]]],[11,"ge","","",82,[[["pin",3]]]],[11,"partial_cmp","core::result","",84,[[["result",4]],[["option",4],["ordering",4]]]],[11,"lt","","",84,[[["result",4]]]],[11,"le","","",84,[[["result",4]]]],[11,"gt","","",84,[[["result",4]]]],[11,"ge","","",84,[[["result",4]]]],[11,"partial_cmp","core::fmt","",229,[[["error",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","core::time","",122,[[["duration",3]],[["option",4],["ordering",4]]]],[11,"lt","","",122,[[["duration",3]]]],[11,"le","","",122,[[["duration",3]]]],[11,"gt","","",122,[[["duration",3]]]],[11,"ge","","",122,[[["duration",3]]]],[11,"partial_cmp","core::task","",125,[[["poll",4]],[["option",4],["ordering",4]]]],[11,"lt","","",125,[[["poll",4]]]],[11,"le","","",125,[[["poll",4]]]],[11,"gt","","",125,[[["poll",4]]]],[11,"ge","","",125,[[["poll",4]]]],[11,"partial_cmp","core::arch::x86","",128,[[["cpuidresult",3]],[["option",4],["ordering",4]]]],[11,"lt","","",128,[[["cpuidresult",3]]]],[11,"le","","",128,[[["cpuidresult",3]]]],[11,"gt","","",128,[[["cpuidresult",3]]]],[11,"ge","","",128,[[["cpuidresult",3]]]],[11,"as_ref","core::slice","",232,[[]]],[11,"from","core::num","",148,[[["infallible",4]],["tryfrominterror",3]]],[11,"from","","",148,[[],["tryfrominterror",3]]],[11,"from","core::ptr","",165,[[]]],[11,"from","","",165,[[]]],[11,"from","core::num","",151,[[["nonzerou8",3]]]],[11,"from","","",152,[[["nonzerou8",3]]]],[11,"from","","",153,[[["nonzerou8",3]]]],[11,"from","","",154,[[["nonzerou8",3]]]],[11,"from","","",155,[[["nonzerou8",3]]]],[11,"from","","",152,[[["nonzerou16",3]]]],[11,"from","","",153,[[["nonzerou16",3]]]],[11,"from","","",154,[[["nonzerou16",3]]]],[11,"from","","",155,[[["nonzerou16",3]]]],[11,"from","","",153,[[["nonzerou32",3]]]],[11,"from","","",154,[[["nonzerou32",3]]]],[11,"from","","",154,[[["nonzerou64",3]]]],[11,"from","","",157,[[["nonzeroi8",3]]]],[11,"from","","",158,[[["nonzeroi8",3]]]],[11,"from","","",159,[[["nonzeroi8",3]]]],[11,"from","","",160,[[["nonzeroi8",3]]]],[11,"from","","",161,[[["nonzeroi8",3]]]],[11,"from","","",158,[[["nonzeroi16",3]]]],[11,"from","","",159,[[["nonzeroi16",3]]]],[11,"from","","",160,[[["nonzeroi16",3]]]],[11,"from","","",161,[[["nonzeroi16",3]]]],[11,"from","","",159,[[["nonzeroi32",3]]]],[11,"from","","",160,[[["nonzeroi32",3]]]],[11,"from","","",160,[[["nonzeroi64",3]]]],[11,"from","","",157,[[["nonzerou8",3]]]],[11,"from","","",158,[[["nonzerou8",3]]]],[11,"from","","",159,[[["nonzerou8",3]]]],[11,"from","","",160,[[["nonzerou8",3]]]],[11,"from","","",161,[[["nonzerou8",3]]]],[11,"from","","",158,[[["nonzerou16",3]]]],[11,"from","","",159,[[["nonzerou16",3]]]],[11,"from","","",160,[[["nonzerou16",3]]]],[11,"from","","",159,[[["nonzerou32",3]]]],[11,"from","","",160,[[["nonzerou32",3]]]],[11,"from","","",160,[[["nonzerou64",3]]]],[11,"from","core::convert","",166,[[]]],[11,"from","core::array","",172,[[["infallible",4]],["tryfromsliceerror",3]]],[11,"from","core::cell","",62,[[],["cell",3]]],[11,"from","","",63,[[],["refcell",3]]],[11,"from","","",65,[[],["unsafecell",3]]],[11,"from","core::lazy","",77,[[]]],[11,"from","core::option","Copies <code>val</code> into a new <code>Some</code>.",79,[[],["option",4]]],[11,"from","","Converts from <code>&Option<T></code> to <code>Option<&T></code>.",79,[[["option",4]],["option",4]]],[11,"from","","Converts from <code>&mut Option<T></code> to <code>Option<&mut T></code>",79,[[["option",4]],["option",4]]],[11,"from","core::sync::atomic","Converts a <code>bool</code> into an <code>AtomicBool</code>.",86,[[]]],[11,"from","","",87,[[]]],[11,"from","","Converts an <code>i8</code> into an <code>AtomicI8</code>.",88,[[]]],[11,"from","","Converts an <code>u8</code> into an <code>AtomicU8</code>.",89,[[]]],[11,"from","","Converts an <code>i16</code> into an <code>AtomicI16</code>.",90,[[]]],[11,"from","","Converts an <code>u16</code> into an <code>AtomicU16</code>.",91,[[]]],[11,"from","","Converts an <code>i32</code> into an <code>AtomicI32</code>.",92,[[]]],[11,"from","","Converts an <code>u32</code> into an <code>AtomicU32</code>.",93,[[]]],[11,"from","","Converts an <code>i64</code> into an <code>AtomicI64</code>.",94,[[]]],[11,"from","","Converts an <code>u64</code> into an <code>AtomicU64</code>.",95,[[]]],[11,"from","","Converts an <code>isize</code> into an <code>AtomicIsize</code>.",96,[[]]],[11,"from","","Converts an <code>usize</code> into an <code>AtomicUsize</code>.",97,[[]]],[11,"from","core::task","Convert to a <code>Ready</code> variant.",125,[[],["poll",4]]],[11,"try_from","core::num","",150,[[],["result",4]]],[11,"try_from","","",151,[[],["result",4]]],[11,"try_from","","",152,[[],["result",4]]],[11,"try_from","","",153,[[],["result",4]]],[11,"try_from","","",154,[[],["result",4]]],[11,"try_from","","",155,[[],["result",4]]],[11,"try_from","","",156,[[],["result",4]]],[11,"try_from","","",157,[[],["result",4]]],[11,"try_from","","",158,[[],["result",4]]],[11,"try_from","","",159,[[],["result",4]]],[11,"try_from","","",160,[[],["result",4]]],[11,"try_from","","",161,[[],["result",4]]],[11,"try_from","","",150,[[["nonzeroi8",3]],["result",4]]],[11,"try_from","","",150,[[["nonzerou16",3]],["result",4]]],[11,"try_from","","",150,[[["nonzeroi16",3]],["result",4]]],[11,"try_from","","",150,[[["nonzerou32",3]],["result",4]]],[11,"try_from","","",150,[[["nonzeroi32",3]],["result",4]]],[11,"try_from","","",150,[[["nonzerou64",3]],["result",4]]],[11,"try_from","","",150,[[["nonzeroi64",3]],["result",4]]],[11,"try_from","","",150,[[["nonzerou128",3]],["result",4]]],[11,"try_from","","",150,[[["nonzeroi128",3]],["result",4]]],[11,"try_from","","",150,[[["nonzerousize",3]],["result",4]]],[11,"try_from","","",150,[[["nonzeroisize",3]],["result",4]]],[11,"try_from","","",151,[[["nonzeroi8",3]],["result",4]]],[11,"try_from","","",151,[[["nonzeroi16",3]],["result",4]]],[11,"try_from","","",151,[[["nonzerou32",3]],["result",4]]],[11,"try_from","","",151,[[["nonzeroi32",3]],["result",4]]],[11,"try_from","","",151,[[["nonzerou64",3]],["result",4]]],[11,"try_from","","",151,[[["nonzeroi64",3]],["result",4]]],[11,"try_from","","",151,[[["nonzerou128",3]],["result",4]]],[11,"try_from","","",151,[[["nonzeroi128",3]],["result",4]]],[11,"try_from","","",151,[[["nonzerousize",3]],["result",4]]],[11,"try_from","","",151,[[["nonzeroisize",3]],["result",4]]],[11,"try_from","","",152,[[["nonzeroi8",3]],["result",4]]],[11,"try_from","","",152,[[["nonzeroi16",3]],["result",4]]],[11,"try_from","","",152,[[["nonzeroi32",3]],["result",4]]],[11,"try_from","","",152,[[["nonzerou64",3]],["result",4]]],[11,"try_from","","",152,[[["nonzeroi64",3]],["result",4]]],[11,"try_from","","",152,[[["nonzerou128",3]],["result",4]]],[11,"try_from","","",152,[[["nonzeroi128",3]],["result",4]]],[11,"try_from","","",152,[[["nonzerousize",3]],["result",4]]],[11,"try_from","","",152,[[["nonzeroisize",3]],["result",4]]],[11,"try_from","","",153,[[["nonzeroi8",3]],["result",4]]],[11,"try_from","","",153,[[["nonzeroi16",3]],["result",4]]],[11,"try_from","","",153,[[["nonzeroi32",3]],["result",4]]],[11,"try_from","","",153,[[["nonzeroi64",3]],["result",4]]],[11,"try_from","","",153,[[["nonzerou128",3]],["result",4]]],[11,"try_from","","",153,[[["nonzeroi128",3]],["result",4]]],[11,"try_from","","",153,[[["nonzerousize",3]],["result",4]]],[11,"try_from","","",153,[[["nonzeroisize",3]],["result",4]]],[11,"try_from","","",154,[[["nonzeroi8",3]],["result",4]]],[11,"try_from","","",154,[[["nonzeroi16",3]],["result",4]]],[11,"try_from","","",154,[[["nonzeroi32",3]],["result",4]]],[11,"try_from","","",154,[[["nonzeroi64",3]],["result",4]]],[11,"try_from","","",154,[[["nonzeroi128",3]],["result",4]]],[11,"try_from","","",154,[[["nonzerousize",3]],["result",4]]],[11,"try_from","","",154,[[["nonzeroisize",3]],["result",4]]],[11,"try_from","","",155,[[["nonzeroi8",3]],["result",4]]],[11,"try_from","","",155,[[["nonzeroi16",3]],["result",4]]],[11,"try_from","","",155,[[["nonzerou32",3]],["result",4]]],[11,"try_from","","",155,[[["nonzeroi32",3]],["result",4]]],[11,"try_from","","",155,[[["nonzerou64",3]],["result",4]]],[11,"try_from","","",155,[[["nonzeroi64",3]],["result",4]]],[11,"try_from","","",155,[[["nonzerou128",3]],["result",4]]],[11,"try_from","","",155,[[["nonzeroi128",3]],["result",4]]],[11,"try_from","","",155,[[["nonzeroisize",3]],["result",4]]],[11,"try_from","","",156,[[["nonzerou8",3]],["result",4]]],[11,"try_from","","",156,[[["nonzerou16",3]],["result",4]]],[11,"try_from","","",156,[[["nonzeroi16",3]],["result",4]]],[11,"try_from","","",156,[[["nonzerou32",3]],["result",4]]],[11,"try_from","","",156,[[["nonzeroi32",3]],["result",4]]],[11,"try_from","","",156,[[["nonzerou64",3]],["result",4]]],[11,"try_from","","",156,[[["nonzeroi64",3]],["result",4]]],[11,"try_from","","",156,[[["nonzerou128",3]],["result",4]]],[11,"try_from","","",156,[[["nonzeroi128",3]],["result",4]]],[11,"try_from","","",156,[[["nonzerousize",3]],["result",4]]],[11,"try_from","","",156,[[["nonzeroisize",3]],["result",4]]],[11,"try_from","","",157,[[["nonzerou16",3]],["result",4]]],[11,"try_from","","",157,[[["nonzerou32",3]],["result",4]]],[11,"try_from","","",157,[[["nonzeroi32",3]],["result",4]]],[11,"try_from","","",157,[[["nonzerou64",3]],["result",4]]],[11,"try_from","","",157,[[["nonzeroi64",3]],["result",4]]],[11,"try_from","","",157,[[["nonzerou128",3]],["result",4]]],[11,"try_from","","",157,[[["nonzeroi128",3]],["result",4]]],[11,"try_from","","",157,[[["nonzerousize",3]],["result",4]]],[11,"try_from","","",157,[[["nonzeroisize",3]],["result",4]]],[11,"try_from","","",158,[[["nonzerou32",3]],["result",4]]],[11,"try_from","","",158,[[["nonzerou64",3]],["result",4]]],[11,"try_from","","",158,[[["nonzeroi64",3]],["result",4]]],[11,"try_from","","",158,[[["nonzerou128",3]],["result",4]]],[11,"try_from","","",158,[[["nonzeroi128",3]],["result",4]]],[11,"try_from","","",158,[[["nonzerousize",3]],["result",4]]],[11,"try_from","","",158,[[["nonzeroisize",3]],["result",4]]],[11,"try_from","","",159,[[["nonzerou64",3]],["result",4]]],[11,"try_from","","",159,[[["nonzerou128",3]],["result",4]]],[11,"try_from","","",159,[[["nonzeroi128",3]],["result",4]]],[11,"try_from","","",159,[[["nonzerousize",3]],["result",4]]],[11,"try_from","","",159,[[["nonzeroisize",3]],["result",4]]],[11,"try_from","","",160,[[["nonzerou128",3]],["result",4]]],[11,"try_from","","",160,[[["nonzerousize",3]],["result",4]]],[11,"try_from","","",160,[[["nonzeroisize",3]],["result",4]]],[11,"try_from","","",161,[[["nonzerou16",3]],["result",4]]],[11,"try_from","","",161,[[["nonzerou32",3]],["result",4]]],[11,"try_from","","",161,[[["nonzeroi32",3]],["result",4]]],[11,"try_from","","",161,[[["nonzerou64",3]],["result",4]]],[11,"try_from","","",161,[[["nonzeroi64",3]],["result",4]]],[11,"try_from","","",161,[[["nonzerou128",3]],["result",4]]],[11,"try_from","","",161,[[["nonzeroi128",3]],["result",4]]],[11,"try_from","","",161,[[["nonzerousize",3]],["result",4]]],[11,"default","","",0,[[],["wrapping",3]]],[11,"default","core::mem","",162,[[],["manuallydrop",3]]],[11,"default","core::cmp","",8,[[],["reverse",3]]],[11,"default","core::marker","",167,[[]]],[11,"default","","",168,[[],["phantompinned",3]]],[11,"default","core::ops","",169,[[],["rangefull",3]]],[11,"default","","",49,[[],["range",3]]],[11,"default","core::cell","Creates a <code>Cell<T></code>, with the <code>Default</code> value for T.",62,[[],["cell",3]]],[11,"default","","Creates a <code>RefCell<T></code>, with the <code>Default</code> value for T.",63,[[],["refcell",3]]],[11,"default","","Creates an <code>UnsafeCell</code>, with the <code>Default</code> value for T.",65,[[],["unsafecell",3]]],[11,"default","core::iter","",210,[[],["empty",3]]],[11,"default","core::lazy","",77,[[]]],[11,"default","","Creates a new lazy value using <code>Default</code> as the …",78,[[],["lazy",3]]],[11,"default","core::option","Returns [<code>None</code>][Option::None].",79,[[],["option",4]]],[11,"default","core::sync::atomic","Creates an <code>AtomicBool</code> initialized to <code>false</code>.",86,[[]]],[11,"default","","Creates a null <code>AtomicPtr<T></code>.",87,[[],["atomicptr",3]]],[11,"default","","",88,[[]]],[11,"default","","",89,[[]]],[11,"default","","",90,[[]]],[11,"default","","",91,[[]]],[11,"default","","",92,[[]]],[11,"default","","",93,[[]]],[11,"default","","",94,[[]]],[11,"default","","",95,[[]]],[11,"default","","",96,[[]]],[11,"default","","",97,[[]]],[11,"default","core::fmt","",229,[[],["error",3]]],[11,"default","core::hash","",230,[[],["siphasher",3]]],[11,"default","","",231,[[],["buildhasherdefault",3]]],[11,"default","core::time","",122,[[],["duration",3]]],[11,"add","core::num","",0,[[["wrapping",3]],["wrapping",3]]],[11,"add","","",0,[[["wrapping",3]]]],[11,"add","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"add","","",0,[[["wrapping",3]]]],[11,"add","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"add","","",0,[[["wrapping",3]]]],[11,"add","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"add","","",0,[[["wrapping",3]]]],[11,"add","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"add","","",0,[[["wrapping",3]]]],[11,"add","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"add","","",0,[[["wrapping",3]]]],[11,"add","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"add","","",0,[[["wrapping",3]]]],[11,"add","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"add","","",0,[[["wrapping",3]]]],[11,"add","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"add","","",0,[[["wrapping",3]]]],[11,"add","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"add","","",0,[[["wrapping",3]]]],[11,"add","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"add","","",0,[[["wrapping",3]]]],[11,"add","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"add","","",0,[[["wrapping",3]]]],[11,"add","core::time","",122,[[["duration",3]],["duration",3]]],[11,"sub","core::num","",0,[[["wrapping",3]],["wrapping",3]]],[11,"sub","","",0,[[["wrapping",3]]]],[11,"sub","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"sub","","",0,[[["wrapping",3]]]],[11,"sub","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"sub","","",0,[[["wrapping",3]]]],[11,"sub","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"sub","","",0,[[["wrapping",3]]]],[11,"sub","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"sub","","",0,[[["wrapping",3]]]],[11,"sub","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"sub","","",0,[[["wrapping",3]]]],[11,"sub","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"sub","","",0,[[["wrapping",3]]]],[11,"sub","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"sub","","",0,[[["wrapping",3]]]],[11,"sub","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"sub","","",0,[[["wrapping",3]]]],[11,"sub","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"sub","","",0,[[["wrapping",3]]]],[11,"sub","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"sub","","",0,[[["wrapping",3]]]],[11,"sub","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"sub","","",0,[[["wrapping",3]]]],[11,"sub","core::time","",122,[[["duration",3]],["duration",3]]],[11,"mul","core::num","",0,[[["wrapping",3]],["wrapping",3]]],[11,"mul","","",0,[[["wrapping",3]]]],[11,"mul","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"mul","","",0,[[["wrapping",3]]]],[11,"mul","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"mul","","",0,[[["wrapping",3]]]],[11,"mul","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"mul","","",0,[[["wrapping",3]]]],[11,"mul","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"mul","","",0,[[["wrapping",3]]]],[11,"mul","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"mul","","",0,[[["wrapping",3]]]],[11,"mul","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"mul","","",0,[[["wrapping",3]]]],[11,"mul","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"mul","","",0,[[["wrapping",3]]]],[11,"mul","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"mul","","",0,[[["wrapping",3]]]],[11,"mul","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"mul","","",0,[[["wrapping",3]]]],[11,"mul","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"mul","","",0,[[["wrapping",3]]]],[11,"mul","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"mul","","",0,[[["wrapping",3]]]],[11,"mul","core::time","",122,[[],["duration",3]]],[11,"div","core::num","",0,[[["wrapping",3]],["wrapping",3]]],[11,"div","","",0,[[["wrapping",3]]]],[11,"div","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"div","","",0,[[["wrapping",3]]]],[11,"div","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"div","","",0,[[["wrapping",3]]]],[11,"div","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"div","","",0,[[["wrapping",3]]]],[11,"div","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"div","","",0,[[["wrapping",3]]]],[11,"div","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"div","","",0,[[["wrapping",3]]]],[11,"div","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"div","","",0,[[["wrapping",3]]]],[11,"div","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"div","","",0,[[["wrapping",3]]]],[11,"div","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"div","","",0,[[["wrapping",3]]]],[11,"div","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"div","","",0,[[["wrapping",3]]]],[11,"div","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"div","","",0,[[["wrapping",3]]]],[11,"div","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"div","","",0,[[["wrapping",3]]]],[11,"div","core::time","",122,[[],["duration",3]]],[11,"rem","core::num","",0,[[["wrapping",3]],["wrapping",3]]],[11,"rem","","",0,[[["wrapping",3]]]],[11,"rem","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"rem","","",0,[[["wrapping",3]]]],[11,"rem","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"rem","","",0,[[["wrapping",3]]]],[11,"rem","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"rem","","",0,[[["wrapping",3]]]],[11,"rem","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"rem","","",0,[[["wrapping",3]]]],[11,"rem","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"rem","","",0,[[["wrapping",3]]]],[11,"rem","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"rem","","",0,[[["wrapping",3]]]],[11,"rem","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"rem","","",0,[[["wrapping",3]]]],[11,"rem","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"rem","","",0,[[["wrapping",3]]]],[11,"rem","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"rem","","",0,[[["wrapping",3]]]],[11,"rem","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"rem","","",0,[[["wrapping",3]]]],[11,"rem","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"rem","","",0,[[["wrapping",3]]]],[11,"neg","","",0,[[]]],[11,"neg","","",0,[[]]],[11,"neg","","",0,[[]]],[11,"neg","","",0,[[]]],[11,"neg","","",0,[[]]],[11,"neg","","",0,[[]]],[11,"neg","","",0,[[]]],[11,"neg","","",0,[[]]],[11,"neg","","",0,[[]]],[11,"neg","","",0,[[]]],[11,"neg","","",0,[[]]],[11,"neg","","",0,[[]]],[11,"add_assign","","",0,[[["wrapping",3]]]],[11,"add_assign","","",0,[[["wrapping",3]]]],[11,"add_assign","","",0,[[["wrapping",3]]]],[11,"add_assign","","",0,[[["wrapping",3]]]],[11,"add_assign","","",0,[[["wrapping",3]]]],[11,"add_assign","","",0,[[["wrapping",3]]]],[11,"add_assign","","",0,[[["wrapping",3]]]],[11,"add_assign","","",0,[[["wrapping",3]]]],[11,"add_assign","","",0,[[["wrapping",3]]]],[11,"add_assign","","",0,[[["wrapping",3]]]],[11,"add_assign","","",0,[[["wrapping",3]]]],[11,"add_assign","","",0,[[["wrapping",3]]]],[11,"add_assign","","",0,[[["wrapping",3]]]],[11,"add_assign","","",0,[[["wrapping",3]]]],[11,"add_assign","","",0,[[["wrapping",3]]]],[11,"add_assign","","",0,[[["wrapping",3]]]],[11,"add_assign","","",0,[[["wrapping",3]]]],[11,"add_assign","","",0,[[["wrapping",3]]]],[11,"add_assign","","",0,[[["wrapping",3]]]],[11,"add_assign","","",0,[[["wrapping",3]]]],[11,"add_assign","","",0,[[["wrapping",3]]]],[11,"add_assign","","",0,[[["wrapping",3]]]],[11,"add_assign","","",0,[[["wrapping",3]]]],[11,"add_assign","","",0,[[["wrapping",3]]]],[11,"add_assign","core::time","",122,[[["duration",3]]]],[11,"sub_assign","core::num","",0,[[["wrapping",3]]]],[11,"sub_assign","","",0,[[["wrapping",3]]]],[11,"sub_assign","","",0,[[["wrapping",3]]]],[11,"sub_assign","","",0,[[["wrapping",3]]]],[11,"sub_assign","","",0,[[["wrapping",3]]]],[11,"sub_assign","","",0,[[["wrapping",3]]]],[11,"sub_assign","","",0,[[["wrapping",3]]]],[11,"sub_assign","","",0,[[["wrapping",3]]]],[11,"sub_assign","","",0,[[["wrapping",3]]]],[11,"sub_assign","","",0,[[["wrapping",3]]]],[11,"sub_assign","","",0,[[["wrapping",3]]]],[11,"sub_assign","","",0,[[["wrapping",3]]]],[11,"sub_assign","","",0,[[["wrapping",3]]]],[11,"sub_assign","","",0,[[["wrapping",3]]]],[11,"sub_assign","","",0,[[["wrapping",3]]]],[11,"sub_assign","","",0,[[["wrapping",3]]]],[11,"sub_assign","","",0,[[["wrapping",3]]]],[11,"sub_assign","","",0,[[["wrapping",3]]]],[11,"sub_assign","","",0,[[["wrapping",3]]]],[11,"sub_assign","","",0,[[["wrapping",3]]]],[11,"sub_assign","","",0,[[["wrapping",3]]]],[11,"sub_assign","","",0,[[["wrapping",3]]]],[11,"sub_assign","","",0,[[["wrapping",3]]]],[11,"sub_assign","","",0,[[["wrapping",3]]]],[11,"sub_assign","core::time","",122,[[["duration",3]]]],[11,"mul_assign","core::num","",0,[[["wrapping",3]]]],[11,"mul_assign","","",0,[[["wrapping",3]]]],[11,"mul_assign","","",0,[[["wrapping",3]]]],[11,"mul_assign","","",0,[[["wrapping",3]]]],[11,"mul_assign","","",0,[[["wrapping",3]]]],[11,"mul_assign","","",0,[[["wrapping",3]]]],[11,"mul_assign","","",0,[[["wrapping",3]]]],[11,"mul_assign","","",0,[[["wrapping",3]]]],[11,"mul_assign","","",0,[[["wrapping",3]]]],[11,"mul_assign","","",0,[[["wrapping",3]]]],[11,"mul_assign","","",0,[[["wrapping",3]]]],[11,"mul_assign","","",0,[[["wrapping",3]]]],[11,"mul_assign","","",0,[[["wrapping",3]]]],[11,"mul_assign","","",0,[[["wrapping",3]]]],[11,"mul_assign","","",0,[[["wrapping",3]]]],[11,"mul_assign","","",0,[[["wrapping",3]]]],[11,"mul_assign","","",0,[[["wrapping",3]]]],[11,"mul_assign","","",0,[[["wrapping",3]]]],[11,"mul_assign","","",0,[[["wrapping",3]]]],[11,"mul_assign","","",0,[[["wrapping",3]]]],[11,"mul_assign","","",0,[[["wrapping",3]]]],[11,"mul_assign","","",0,[[["wrapping",3]]]],[11,"mul_assign","","",0,[[["wrapping",3]]]],[11,"mul_assign","","",0,[[["wrapping",3]]]],[11,"mul_assign","core::time","",122,[[]]],[11,"div_assign","core::num","",0,[[["wrapping",3]]]],[11,"div_assign","","",0,[[["wrapping",3]]]],[11,"div_assign","","",0,[[["wrapping",3]]]],[11,"div_assign","","",0,[[["wrapping",3]]]],[11,"div_assign","","",0,[[["wrapping",3]]]],[11,"div_assign","","",0,[[["wrapping",3]]]],[11,"div_assign","","",0,[[["wrapping",3]]]],[11,"div_assign","","",0,[[["wrapping",3]]]],[11,"div_assign","","",0,[[["wrapping",3]]]],[11,"div_assign","","",0,[[["wrapping",3]]]],[11,"div_assign","","",0,[[["wrapping",3]]]],[11,"div_assign","","",0,[[["wrapping",3]]]],[11,"div_assign","","",0,[[["wrapping",3]]]],[11,"div_assign","","",0,[[["wrapping",3]]]],[11,"div_assign","","",0,[[["wrapping",3]]]],[11,"div_assign","","",0,[[["wrapping",3]]]],[11,"div_assign","","",0,[[["wrapping",3]]]],[11,"div_assign","","",0,[[["wrapping",3]]]],[11,"div_assign","","",0,[[["wrapping",3]]]],[11,"div_assign","","",0,[[["wrapping",3]]]],[11,"div_assign","","",0,[[["wrapping",3]]]],[11,"div_assign","","",0,[[["wrapping",3]]]],[11,"div_assign","","",0,[[["wrapping",3]]]],[11,"div_assign","","",0,[[["wrapping",3]]]],[11,"div_assign","core::time","",122,[[]]],[11,"rem_assign","core::num","",0,[[["wrapping",3]]]],[11,"rem_assign","","",0,[[["wrapping",3]]]],[11,"rem_assign","","",0,[[["wrapping",3]]]],[11,"rem_assign","","",0,[[["wrapping",3]]]],[11,"rem_assign","","",0,[[["wrapping",3]]]],[11,"rem_assign","","",0,[[["wrapping",3]]]],[11,"rem_assign","","",0,[[["wrapping",3]]]],[11,"rem_assign","","",0,[[["wrapping",3]]]],[11,"rem_assign","","",0,[[["wrapping",3]]]],[11,"rem_assign","","",0,[[["wrapping",3]]]],[11,"rem_assign","","",0,[[["wrapping",3]]]],[11,"rem_assign","","",0,[[["wrapping",3]]]],[11,"rem_assign","","",0,[[["wrapping",3]]]],[11,"rem_assign","","",0,[[["wrapping",3]]]],[11,"rem_assign","","",0,[[["wrapping",3]]]],[11,"rem_assign","","",0,[[["wrapping",3]]]],[11,"rem_assign","","",0,[[["wrapping",3]]]],[11,"rem_assign","","",0,[[["wrapping",3]]]],[11,"rem_assign","","",0,[[["wrapping",3]]]],[11,"rem_assign","","",0,[[["wrapping",3]]]],[11,"rem_assign","","",0,[[["wrapping",3]]]],[11,"rem_assign","","",0,[[["wrapping",3]]]],[11,"rem_assign","","",0,[[["wrapping",3]]]],[11,"rem_assign","","",0,[[["wrapping",3]]]],[11,"not","","",0,[[],["wrapping",3]]],[11,"not","","",0,[[],["wrapping",3]]],[11,"not","","",0,[[],["wrapping",3]]],[11,"not","","",0,[[],["wrapping",3]]],[11,"not","","",0,[[],["wrapping",3]]],[11,"not","","",0,[[],["wrapping",3]]],[11,"not","","",0,[[],["wrapping",3]]],[11,"not","","",0,[[],["wrapping",3]]],[11,"not","","",0,[[],["wrapping",3]]],[11,"not","","",0,[[],["wrapping",3]]],[11,"not","","",0,[[],["wrapping",3]]],[11,"not","","",0,[[],["wrapping",3]]],[11,"bitand","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitand","","",0,[[["wrapping",3]]]],[11,"bitand","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitand","","",0,[[["wrapping",3]]]],[11,"bitand","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitand","","",0,[[["wrapping",3]]]],[11,"bitand","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitand","","",0,[[["wrapping",3]]]],[11,"bitand","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitand","","",0,[[["wrapping",3]]]],[11,"bitand","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitand","","",0,[[["wrapping",3]]]],[11,"bitand","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitand","","",0,[[["wrapping",3]]]],[11,"bitand","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitand","","",0,[[["wrapping",3]]]],[11,"bitand","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitand","","",0,[[["wrapping",3]]]],[11,"bitand","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitand","","",0,[[["wrapping",3]]]],[11,"bitand","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitand","","",0,[[["wrapping",3]]]],[11,"bitand","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitand","","",0,[[["wrapping",3]]]],[11,"bitor","","",150,[[]]],[11,"bitor","","",150,[[]]],[11,"bitor","","",151,[[]]],[11,"bitor","","",151,[[]]],[11,"bitor","","",152,[[]]],[11,"bitor","","",152,[[]]],[11,"bitor","","",153,[[]]],[11,"bitor","","",153,[[]]],[11,"bitor","","",154,[[]]],[11,"bitor","","",154,[[]]],[11,"bitor","","",155,[[]]],[11,"bitor","","",155,[[]]],[11,"bitor","","",156,[[]]],[11,"bitor","","",156,[[]]],[11,"bitor","","",157,[[]]],[11,"bitor","","",157,[[]]],[11,"bitor","","",158,[[]]],[11,"bitor","","",158,[[]]],[11,"bitor","","",159,[[]]],[11,"bitor","","",159,[[]]],[11,"bitor","","",160,[[]]],[11,"bitor","","",160,[[]]],[11,"bitor","","",161,[[]]],[11,"bitor","","",161,[[]]],[11,"bitor","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitor","","",0,[[["wrapping",3]]]],[11,"bitor","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitor","","",0,[[["wrapping",3]]]],[11,"bitor","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitor","","",0,[[["wrapping",3]]]],[11,"bitor","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitor","","",0,[[["wrapping",3]]]],[11,"bitor","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitor","","",0,[[["wrapping",3]]]],[11,"bitor","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitor","","",0,[[["wrapping",3]]]],[11,"bitor","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitor","","",0,[[["wrapping",3]]]],[11,"bitor","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitor","","",0,[[["wrapping",3]]]],[11,"bitor","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitor","","",0,[[["wrapping",3]]]],[11,"bitor","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitor","","",0,[[["wrapping",3]]]],[11,"bitor","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitor","","",0,[[["wrapping",3]]]],[11,"bitor","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitor","","",0,[[["wrapping",3]]]],[11,"bitxor","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitxor","","",0,[[["wrapping",3]]]],[11,"bitxor","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitxor","","",0,[[["wrapping",3]]]],[11,"bitxor","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitxor","","",0,[[["wrapping",3]]]],[11,"bitxor","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitxor","","",0,[[["wrapping",3]]]],[11,"bitxor","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitxor","","",0,[[["wrapping",3]]]],[11,"bitxor","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitxor","","",0,[[["wrapping",3]]]],[11,"bitxor","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitxor","","",0,[[["wrapping",3]]]],[11,"bitxor","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitxor","","",0,[[["wrapping",3]]]],[11,"bitxor","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitxor","","",0,[[["wrapping",3]]]],[11,"bitxor","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitxor","","",0,[[["wrapping",3]]]],[11,"bitxor","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitxor","","",0,[[["wrapping",3]]]],[11,"bitxor","","",0,[[["wrapping",3]],["wrapping",3]]],[11,"bitxor","","",0,[[["wrapping",3]]]],[11,"shl","","",0,[[],["wrapping",3]]],[11,"shl","","",0,[[]]],[11,"shl","","",0,[[],["wrapping",3]]],[11,"shl","","",0,[[]]],[11,"shl","","",0,[[],["wrapping",3]]],[11,"shl","","",0,[[]]],[11,"shl","","",0,[[],["wrapping",3]]],[11,"shl","","",0,[[]]],[11,"shl","","",0,[[],["wrapping",3]]],[11,"shl","","",0,[[]]],[11,"shl","","",0,[[],["wrapping",3]]],[11,"shl","","",0,[[]]],[11,"shl","","",0,[[],["wrapping",3]]],[11,"shl","","",0,[[]]],[11,"shl","","",0,[[],["wrapping",3]]],[11,"shl","","",0,[[]]],[11,"shl","","",0,[[],["wrapping",3]]],[11,"shl","","",0,[[]]],[11,"shl","","",0,[[],["wrapping",3]]],[11,"shl","","",0,[[]]],[11,"shl","","",0,[[],["wrapping",3]]],[11,"shl","","",0,[[]]],[11,"shl","","",0,[[],["wrapping",3]]],[11,"shl","","",0,[[]]],[11,"shr","","",0,[[],["wrapping",3]]],[11,"shr","","",0,[[]]],[11,"shr","","",0,[[],["wrapping",3]]],[11,"shr","","",0,[[]]],[11,"shr","","",0,[[],["wrapping",3]]],[11,"shr","","",0,[[]]],[11,"shr","","",0,[[],["wrapping",3]]],[11,"shr","","",0,[[]]],[11,"shr","","",0,[[],["wrapping",3]]],[11,"shr","","",0,[[]]],[11,"shr","","",0,[[],["wrapping",3]]],[11,"shr","","",0,[[]]],[11,"shr","","",0,[[],["wrapping",3]]],[11,"shr","","",0,[[]]],[11,"shr","","",0,[[],["wrapping",3]]],[11,"shr","","",0,[[]]],[11,"shr","","",0,[[],["wrapping",3]]],[11,"shr","","",0,[[]]],[11,"shr","","",0,[[],["wrapping",3]]],[11,"shr","","",0,[[]]],[11,"shr","","",0,[[],["wrapping",3]]],[11,"shr","","",0,[[]]],[11,"shr","","",0,[[],["wrapping",3]]],[11,"shr","","",0,[[]]],[11,"bitand_assign","","",0,[[["wrapping",3]]]],[11,"bitand_assign","","",0,[[["wrapping",3]]]],[11,"bitand_assign","","",0,[[["wrapping",3]]]],[11,"bitand_assign","","",0,[[["wrapping",3]]]],[11,"bitand_assign","","",0,[[["wrapping",3]]]],[11,"bitand_assign","","",0,[[["wrapping",3]]]],[11,"bitand_assign","","",0,[[["wrapping",3]]]],[11,"bitand_assign","","",0,[[["wrapping",3]]]],[11,"bitand_assign","","",0,[[["wrapping",3]]]],[11,"bitand_assign","","",0,[[["wrapping",3]]]],[11,"bitand_assign","","",0,[[["wrapping",3]]]],[11,"bitand_assign","","",0,[[["wrapping",3]]]],[11,"bitand_assign","","",0,[[["wrapping",3]]]],[11,"bitand_assign","","",0,[[["wrapping",3]]]],[11,"bitand_assign","","",0,[[["wrapping",3]]]],[11,"bitand_assign","","",0,[[["wrapping",3]]]],[11,"bitand_assign","","",0,[[["wrapping",3]]]],[11,"bitand_assign","","",0,[[["wrapping",3]]]],[11,"bitand_assign","","",0,[[["wrapping",3]]]],[11,"bitand_assign","","",0,[[["wrapping",3]]]],[11,"bitand_assign","","",0,[[["wrapping",3]]]],[11,"bitand_assign","","",0,[[["wrapping",3]]]],[11,"bitand_assign","","",0,[[["wrapping",3]]]],[11,"bitand_assign","","",0,[[["wrapping",3]]]],[11,"bitor_assign","","",150,[[]]],[11,"bitor_assign","","",150,[[]]],[11,"bitor_assign","","",151,[[]]],[11,"bitor_assign","","",151,[[]]],[11,"bitor_assign","","",152,[[]]],[11,"bitor_assign","","",152,[[]]],[11,"bitor_assign","","",153,[[]]],[11,"bitor_assign","","",153,[[]]],[11,"bitor_assign","","",154,[[]]],[11,"bitor_assign","","",154,[[]]],[11,"bitor_assign","","",155,[[]]],[11,"bitor_assign","","",155,[[]]],[11,"bitor_assign","","",156,[[]]],[11,"bitor_assign","","",156,[[]]],[11,"bitor_assign","","",157,[[]]],[11,"bitor_assign","","",157,[[]]],[11,"bitor_assign","","",158,[[]]],[11,"bitor_assign","","",158,[[]]],[11,"bitor_assign","","",159,[[]]],[11,"bitor_assign","","",159,[[]]],[11,"bitor_assign","","",160,[[]]],[11,"bitor_assign","","",160,[[]]],[11,"bitor_assign","","",161,[[]]],[11,"bitor_assign","","",161,[[]]],[11,"bitor_assign","","",0,[[["wrapping",3]]]],[11,"bitor_assign","","",0,[[["wrapping",3]]]],[11,"bitor_assign","","",0,[[["wrapping",3]]]],[11,"bitor_assign","","",0,[[["wrapping",3]]]],[11,"bitor_assign","","",0,[[["wrapping",3]]]],[11,"bitor_assign","","",0,[[["wrapping",3]]]],[11,"bitor_assign","","",0,[[["wrapping",3]]]],[11,"bitor_assign","","",0,[[["wrapping",3]]]],[11,"bitor_assign","","",0,[[["wrapping",3]]]],[11,"bitor_assign","","",0,[[["wrapping",3]]]],[11,"bitor_assign","","",0,[[["wrapping",3]]]],[11,"bitor_assign","","",0,[[["wrapping",3]]]],[11,"bitor_assign","","",0,[[["wrapping",3]]]],[11,"bitor_assign","","",0,[[["wrapping",3]]]],[11,"bitor_assign","","",0,[[["wrapping",3]]]],[11,"bitor_assign","","",0,[[["wrapping",3]]]],[11,"bitor_assign","","",0,[[["wrapping",3]]]],[11,"bitor_assign","","",0,[[["wrapping",3]]]],[11,"bitor_assign","","",0,[[["wrapping",3]]]],[11,"bitor_assign","","",0,[[["wrapping",3]]]],[11,"bitor_assign","","",0,[[["wrapping",3]]]],[11,"bitor_assign","","",0,[[["wrapping",3]]]],[11,"bitor_assign","","",0,[[["wrapping",3]]]],[11,"bitor_assign","","",0,[[["wrapping",3]]]],[11,"bitxor_assign","","",0,[[["wrapping",3]]]],[11,"bitxor_assign","","",0,[[["wrapping",3]]]],[11,"bitxor_assign","","",0,[[["wrapping",3]]]],[11,"bitxor_assign","","",0,[[["wrapping",3]]]],[11,"bitxor_assign","","",0,[[["wrapping",3]]]],[11,"bitxor_assign","","",0,[[["wrapping",3]]]],[11,"bitxor_assign","","",0,[[["wrapping",3]]]],[11,"bitxor_assign","","",0,[[["wrapping",3]]]],[11,"bitxor_assign","","",0,[[["wrapping",3]]]],[11,"bitxor_assign","","",0,[[["wrapping",3]]]],[11,"bitxor_assign","","",0,[[["wrapping",3]]]],[11,"bitxor_assign","","",0,[[["wrapping",3]]]],[11,"bitxor_assign","","",0,[[["wrapping",3]]]],[11,"bitxor_assign","","",0,[[["wrapping",3]]]],[11,"bitxor_assign","","",0,[[["wrapping",3]]]],[11,"bitxor_assign","","",0,[[["wrapping",3]]]],[11,"bitxor_assign","","",0,[[["wrapping",3]]]],[11,"bitxor_assign","","",0,[[["wrapping",3]]]],[11,"bitxor_assign","","",0,[[["wrapping",3]]]],[11,"bitxor_assign","","",0,[[["wrapping",3]]]],[11,"bitxor_assign","","",0,[[["wrapping",3]]]],[11,"bitxor_assign","","",0,[[["wrapping",3]]]],[11,"bitxor_assign","","",0,[[["wrapping",3]]]],[11,"bitxor_assign","","",0,[[["wrapping",3]]]],[11,"shl_assign","","",0,[[]]],[11,"shl_assign","","",0,[[]]],[11,"shl_assign","","",0,[[]]],[11,"shl_assign","","",0,[[]]],[11,"shl_assign","","",0,[[]]],[11,"shl_assign","","",0,[[]]],[11,"shl_assign","","",0,[[]]],[11,"shl_assign","","",0,[[]]],[11,"shl_assign","","",0,[[]]],[11,"shl_assign","","",0,[[]]],[11,"shl_assign","","",0,[[]]],[11,"shl_assign","","",0,[[]]],[11,"shl_assign","","",0,[[]]],[11,"shl_assign","","",0,[[]]],[11,"shl_assign","","",0,[[]]],[11,"shl_assign","","",0,[[]]],[11,"shl_assign","","",0,[[]]],[11,"shl_assign","","",0,[[]]],[11,"shl_assign","","",0,[[]]],[11,"shl_assign","","",0,[[]]],[11,"shl_assign","","",0,[[]]],[11,"shl_assign","","",0,[[]]],[11,"shl_assign","","",0,[[]]],[11,"shl_assign","","",0,[[]]],[11,"shr_assign","","",0,[[]]],[11,"shr_assign","","",0,[[]]],[11,"shr_assign","","",0,[[]]],[11,"shr_assign","","",0,[[]]],[11,"shr_assign","","",0,[[]]],[11,"shr_assign","","",0,[[]]],[11,"shr_assign","","",0,[[]]],[11,"shr_assign","","",0,[[]]],[11,"shr_assign","","",0,[[]]],[11,"shr_assign","","",0,[[]]],[11,"shr_assign","","",0,[[]]],[11,"shr_assign","","",0,[[]]],[11,"shr_assign","","",0,[[]]],[11,"shr_assign","","",0,[[]]],[11,"shr_assign","","",0,[[]]],[11,"shr_assign","","",0,[[]]],[11,"shr_assign","","",0,[[]]],[11,"shr_assign","","",0,[[]]],[11,"shr_assign","","",0,[[]]],[11,"shr_assign","","",0,[[]]],[11,"shr_assign","","",0,[[]]],[11,"shr_assign","","",0,[[]]],[11,"shr_assign","","",0,[[]]],[11,"shr_assign","","",0,[[]]],[11,"deref","core::mem","",162,[[]]],[11,"deref","core::cell","",64,[[]]],[11,"deref","","",176,[[]]],[11,"deref","core::ffi","",187,[[],["valistimpl",3]]],[11,"deref","core::lazy","",78,[[]]],[11,"deref","core::pin","",82,[[]]],[11,"deref_mut","core::mem","",162,[[]]],[11,"deref_mut","core::cell","",176,[[]]],[11,"deref_mut","core::ffi","",187,[[],["valistimpl",3]]],[11,"deref_mut","core::pin","",82,[[]]],[11,"drop","core::array","",171,[[]]],[11,"drop","core::ffi","",66,[[]]],[11,"drop","core::task","",290,[[]]],[11,"resume","core::pin","",82,[[["pin",3]],["generatorstate",4]]],[11,"start_bound","core::ops","",169,[[],["bound",4]]],[11,"end_bound","","",169,[[],["bound",4]]],[11,"start_bound","","",50,[[],["bound",4]]],[11,"end_bound","","",50,[[],["bound",4]]],[11,"start_bound","","",51,[[],["bound",4]]],[11,"end_bound","","",51,[[],["bound",4]]],[11,"start_bound","","",49,[[],["bound",4]]],[11,"end_bound","","",49,[[],["bound",4]]],[11,"start_bound","","",170,[[],["bound",4]]],[11,"end_bound","","",170,[[],["bound",4]]],[11,"start_bound","","",54,[[],["bound",4]]],[11,"end_bound","","",54,[[],["bound",4]]],[11,"start_bound","","",50,[[],["bound",4]]],[11,"end_bound","","",50,[[],["bound",4]]],[11,"start_bound","","",51,[[],["bound",4]]],[11,"end_bound","","",51,[[],["bound",4]]],[11,"start_bound","","",49,[[],["bound",4]]],[11,"end_bound","","",49,[[],["bound",4]]],[11,"start_bound","","",170,[[],["bound",4]]],[11,"end_bound","","",170,[[],["bound",4]]],[11,"start_bound","","",54,[[],["bound",4]]],[11,"end_bound","","",54,[[],["bound",4]]],[11,"into_result","","",58,[[],["result",4]]],[11,"from_error","","",58,[[]]],[11,"from_ok","","",58,[[]]],[11,"into_result","core::option","",79,[[],[["noneerror",3],["result",4]]]],[11,"from_ok","","",79,[[]]],[11,"from_error","","",79,[[["noneerror",3]]]],[11,"into_result","core::result","",84,[[]]],[11,"from_ok","","",84,[[]]],[11,"from_error","","",84,[[]]],[11,"into_result","core::task","",125,[[],["result",4]]],[11,"from_error","","",125,[[]]],[11,"from_ok","","",125,[[]]],[11,"into_result","","",125,[[],["result",4]]],[11,"from_error","","",125,[[]]],[11,"from_ok","","",125,[[]]],[11,"as_inner","core::iter","",192,[[]]],[11,"as_inner","","",193,[[]]],[11,"as_inner","","",194,[[]]],[11,"as_inner","","",197,[[]]],[11,"as_inner","","",198,[[]]],[11,"as_inner","","",199,[[]]],[11,"as_inner","","",200,[[]]],[11,"as_inner","","",201,[[]]],[11,"as_inner","","",203,[[]]],[11,"as_inner","","",204,[[]]],[11,"as_inner","","",205,[[]]],[11,"as_inner","","",207,[[]]],[11,"as_inner","","",208,[[]]],[11,"as_inner","","",209,[[]]],[11,"sum","core::num","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"sum","","",0,[[["iterator",8]]]],[11,"sum","core::result","Takes each element in the [<code>Iterator</code>]: if it is an [<code>Err</code>], …",84,[[],["result",4]]],[11,"sum","core::option","Takes each element in the [<code>Iterator</code>]: if it is a [<code>None</code>], …",79,[[],["option",4]]],[11,"sum","core::time","",122,[[["iterator",8]],["duration",3]]],[11,"sum","","",122,[[["iterator",8]],["duration",3]]],[11,"product","core::num","",0,[[["iterator",8]]]],[11,"product","","",0,[[["iterator",8]]]],[11,"product","","",0,[[["iterator",8]]]],[11,"product","","",0,[[["iterator",8]]]],[11,"product","","",0,[[["iterator",8]]]],[11,"product","","",0,[[["iterator",8]]]],[11,"product","","",0,[[["iterator",8]]]],[11,"product","","",0,[[["iterator",8]]]],[11,"product","","",0,[[["iterator",8]]]],[11,"product","","",0,[[["iterator",8]]]],[11,"product","","",0,[[["iterator",8]]]],[11,"product","","",0,[[["iterator",8]]]],[11,"product","","",0,[[["iterator",8]]]],[11,"product","","",0,[[["iterator",8]]]],[11,"product","","",0,[[["iterator",8]]]],[11,"product","","",0,[[["iterator",8]]]],[11,"product","","",0,[[["iterator",8]]]],[11,"product","","",0,[[["iterator",8]]]],[11,"product","","",0,[[["iterator",8]]]],[11,"product","","",0,[[["iterator",8]]]],[11,"product","","",0,[[["iterator",8]]]],[11,"product","","",0,[[["iterator",8]]]],[11,"product","","",0,[[["iterator",8]]]],[11,"product","","",0,[[["iterator",8]]]],[11,"product","core::result","Takes each element in the [<code>Iterator</code>]: if it is an [<code>Err</code>], …",84,[[],["result",4]]],[11,"product","core::option","Takes each element in the [<code>Iterator</code>]: if it is a [<code>None</code>], …",79,[[],["option",4]]],[11,"from_iter","","Takes each element in the [<code>Iterator</code>]: if it is [<code>None</code>][…",79,[[["intoiterator",8]],["option",4]]],[11,"from_iter","core::result","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …",84,[[["intoiterator",8]],["result",4]]],[11,"into_iter","core::option","Returns a consuming iterator over the possibly contained …",79,[[],["intoiter",3]]],[11,"into_iter","core::result","Returns a consuming iterator over the possibly contained …",84,[[],["intoiter",3]]],[11,"next_back","core::array","",171,[[],["option",4]]],[11,"next_back","core::ascii","",173,[[],["option",4]]],[11,"next_back","core::iter","",188,[[],["option",4]]],[11,"advance_back_by","","",188,[[],["result",4]]],[11,"nth_back","","",188,[[],["option",4]]],[11,"rfind","","",188,[[],["option",4]]],[11,"try_rfold","","",188,[[]]],[11,"rfold","","",188,[[]]],[11,"next_back","","",189,[[],["option",4]]],[11,"try_rfold","","",189,[[]]],[11,"rfold","","",189,[[]]],[11,"next_back","","",190,[[],["option",4]]],[11,"try_rfold","","",190,[[]]],[11,"rfold","","",190,[[]]],[11,"next_back","","",192,[[],["option",4]]],[11,"nth_back","","",192,[[],["option",4]]],[11,"try_rfold","","",192,[[]]],[11,"rfold","","",192,[[]]],[11,"next_back","","",193,[[],["option",4]]],[11,"try_rfold","","",193,[[]]],[11,"rfold","","",193,[[]]],[11,"next_back","","",194,[[],["option",4]]],[11,"try_rfold","","",194,[[]]],[11,"rfold","","",194,[[]]],[11,"next_back","","",195,[[],["option",4]]],[11,"try_rfold","","",195,[[]]],[11,"rfold","","",195,[[]]],[11,"next_back","","",196,[[],["option",4]]],[11,"try_rfold","","",196,[[]]],[11,"rfold","","",196,[[]]],[11,"next_back","","",197,[[],["option",4]]],[11,"nth_back","","",197,[[],["option",4]]],[11,"try_rfold","","",197,[[]]],[11,"rfold","","",197,[[]]],[11,"rfind","","",197,[[],["option",4]]],[11,"next_back","","",198,[[],["option",4]]],[11,"try_rfold","","",198,[[]]],[11,"rfold","","",198,[[]]],[11,"next_back","","",199,[[],["option",4]]],[11,"try_rfold","","",199,[[]]],[11,"rfold","","",199,[[]]],[11,"next_back","","",201,[[],["option",4]]],[11,"try_rfold","","",201,[[]]],[11,"rfold","","",201,[[]]],[11,"next_back","","",202,[[],["option",4]]],[11,"advance_back_by","","",202,[[],["result",4]]],[11,"nth_back","","",202,[[],["option",4]]],[11,"try_rfold","","",202,[[]]],[11,"rfold","","",202,[[]]],[11,"rfind","","",202,[[],["option",4]]],[11,"next_back","","",204,[[],["option",4]]],[11,"nth_back","","",204,[[],["option",4]]],[11,"try_rfold","","",204,[[]]],[11,"rfold","","",204,[[]]],[11,"next_back","","",206,[[],["option",4]]],[11,"nth_back","","",206,[[],["option",4]]],[11,"try_rfold","","",206,[[]]],[11,"rfold","","",206,[[]]],[11,"next_back","","",207,[[],["option",4]]],[11,"nth_back","","",207,[[],["option",4]]],[11,"try_rfold","","",207,[[]]],[11,"rfold","","",207,[[]]],[11,"next_back","","",209,[[],["option",4]]],[11,"next_back","core::ops","",49,[[],["option",4]]],[11,"nth_back","","",49,[[],["option",4]]],[11,"next_back","","",170,[[],["option",4]]],[11,"nth_back","","",170,[[],["option",4]]],[11,"try_rfold","","",170,[[]]],[11,"rfold","","",170,[[]]],[11,"next_back","core::iter","",210,[[],["option",4]]],[11,"next_back","","",212,[[],["option",4]]],[11,"next_back","","",213,[[],["option",4]]],[11,"next_back","","",214,[[],["option",4]]],[11,"next_back","core::option","",217,[[],["option",4]]],[11,"next_back","","",218,[[],["option",4]]],[11,"next_back","","",219,[[],["option",4]]],[11,"next_back","core::result","",221,[[],["option",4]]],[11,"next_back","","",222,[[],["option",4]]],[11,"next_back","","",223,[[],["option",4]]],[11,"next_back","core::slice","",232,[[],["option",4]]],[11,"nth_back","","",232,[[],["option",4]]],[11,"next_back","","",233,[[],["option",4]]],[11,"nth_back","","",233,[[],["option",4]]],[11,"next_back","","",234,[[],["option",4]]],[11,"next_back","","",235,[[],["option",4]]],[11,"next_back","","",236,[[],["option",4]]],[11,"next_back","","",237,[[],["option",4]]],[11,"next_back","","",238,[[],["option",4]]],[11,"next_back","","",239,[[],["option",4]]],[11,"next_back","","",244,[[],["option",4]]],[11,"nth_back","","",244,[[],["option",4]]],[11,"next_back","","",245,[[],["option",4]]],[11,"nth_back","","",245,[[],["option",4]]],[11,"next_back","","",246,[[],["option",4]]],[11,"nth_back","","",246,[[],["option",4]]],[11,"next_back","","",247,[[],["option",4]]],[11,"nth_back","","",247,[[],["option",4]]],[11,"next_back","","",248,[[],["option",4]]],[11,"nth_back","","",248,[[],["option",4]]],[11,"next_back","","",249,[[],["option",4]]],[11,"nth_back","","",249,[[],["option",4]]],[11,"next_back","","",250,[[],["option",4]]],[11,"nth_back","","",250,[[],["option",4]]],[11,"next_back","","",251,[[],["option",4]]],[11,"nth_back","","",251,[[],["option",4]]],[11,"next_back","","",252,[[],["option",4]]],[11,"nth_back","","",252,[[],["option",4]]],[11,"next_back","","",253,[[],["option",4]]],[11,"nth_back","","",253,[[],["option",4]]],[11,"next_back","","",254,[[],["option",4]]],[11,"nth_back","","",254,[[],["option",4]]],[11,"next_back","","",255,[[],["option",4]]],[11,"nth_back","","",255,[[],["option",4]]],[11,"next_back","core::str","",258,[[],["option",4]]],[11,"next_back","","",259,[[],["option",4]]],[11,"next_back","","",260,[[],["option",4]]],[11,"nth_back","","",260,[[],["option",4]]],[11,"rfind","","",260,[[],["option",4]]],[11,"next_back","","",261,[[],["option",4]]],[11,"next_back","","",262,[[],["option",4]]],[11,"next_back","","",263,[[],["option",4]]],[11,"next_back","","",264,[[],["option",4]]],[11,"next_back","","",267,[[],["option",4]]],[11,"next_back","","",268,[[],["option",4]]],[11,"next_back","","",269,[[],["option",4]]],[11,"next_back","","",270,[[],["option",4]]],[11,"next_back","","",271,[[],["option",4]]],[11,"next_back","","",272,[[],["option",4]]],[11,"next_back","","",273,[[],["option",4]]],[11,"next_back","","",274,[[],["option",4]]],[11,"len","core::array","",171,[[]]],[11,"is_empty","","",171,[[]]],[11,"len","core::char","",181,[[]]],[11,"len","","",182,[[]]],[11,"len","core::iter","",189,[[]]],[11,"is_empty","","",189,[[]]],[11,"len","","",190,[[]]],[11,"is_empty","","",190,[[]]],[11,"len","","",192,[[]]],[11,"is_empty","","",192,[[]]],[11,"len","","",197,[[]]],[11,"is_empty","","",197,[[]]],[11,"len","","",198,[[]]],[11,"is_empty","","",198,[[]]],[11,"len","","",199,[[]]],[11,"is_empty","","",199,[[]]],[11,"len","","",202,[[]]],[11,"is_empty","","",202,[[]]],[11,"len","","",210,[[]]],[11,"len","","",212,[[]]],[11,"len","","",213,[[]]],[11,"len","core::slice","",232,[[]]],[11,"is_empty","","",232,[[]]],[11,"len","","",233,[[]]],[11,"is_empty","","",233,[[]]],[11,"is_empty","","",247,[[]]],[11,"is_empty","","",248,[[]]],[11,"is_empty","","",249,[[]]],[11,"is_empty","","",250,[[]]],[11,"is_empty","","",251,[[]]],[11,"is_empty","","",254,[[]]],[11,"is_empty","","",255,[[]]],[11,"len","core::str","",260,[[]]],[11,"is_empty","","",260,[[]]],[11,"next","core::array","",171,[[],["option",4]]],[11,"size_hint","","",171,[[]]],[11,"count","","",171,[[]]],[11,"last","","",171,[[],["option",4]]],[11,"next","core::ascii","",173,[[],["option",4]]],[11,"size_hint","","",173,[[]]],[11,"last","","",173,[[],["option",4]]],[11,"next","core::char","",179,[[],[["result",4],["option",4]]]],[11,"size_hint","","",179,[[]]],[11,"next","","",181,[[],["option",4]]],[11,"size_hint","","",181,[[]]],[11,"count","","",181,[[]]],[11,"last","","",181,[[],["option",4]]],[11,"next","","",182,[[],["option",4]]],[11,"size_hint","","",182,[[]]],[11,"count","","",182,[[]]],[11,"nth","","",182,[[],["option",4]]],[11,"last","","",182,[[],["option",4]]],[11,"next","","",183,[[],["option",4]]],[11,"size_hint","","",183,[[]]],[11,"next","","",184,[[],["option",4]]],[11,"size_hint","","",184,[[]]],[11,"next","","",185,[[],["option",4]]],[11,"size_hint","","",185,[[]]],[11,"next","core::iter","",188,[[],["option",4]]],[11,"count","","",188,[[]]],[11,"try_fold","","",188,[[]]],[11,"fold","","",188,[[]]],[11,"advance_by","","",188,[[],["result",4]]],[11,"nth","","",188,[[],["option",4]]],[11,"find","","",188,[[],["option",4]]],[11,"last","","",188,[[],["option",4]]],[11,"size_hint","","",188,[[]]],[11,"next","","",189,[[],["option",4]]],[11,"size_hint","","",189,[[]]],[11,"try_fold","","",189,[[]]],[11,"fold","","",189,[[]]],[11,"__iterator_get_unchecked","","",189,[[]]],[11,"next","","",190,[[],["option",4]]],[11,"size_hint","","",190,[[]]],[11,"try_fold","","",190,[[]]],[11,"fold","","",190,[[]]],[11,"nth","","",190,[[],["option",4]]],[11,"last","","",190,[[],["option",4]]],[11,"count","","",190,[[]]],[11,"__iterator_get_unchecked","","",190,[[]]],[11,"next","","",191,[[],["option",4]]],[11,"size_hint","","",191,[[]]],[11,"try_fold","","",191,[[]]],[11,"next","","Overflow BehaviorThe method does no guarding against …",192,[[],["option",4]]],[11,"size_hint","","",192,[[]]],[11,"nth","","",192,[[],["option",4]]],[11,"count","","",192,[[]]],[11,"try_fold","","",192,[[]]],[11,"fold","","",192,[[]]],[11,"__iterator_get_unchecked","","",192,[[]]],[11,"next","","",193,[[],["option",4]]],[11,"size_hint","","",193,[[]]],[11,"count","","",193,[[]]],[11,"try_fold","","",193,[[]]],[11,"fold","","",193,[[]]],[11,"next","","",194,[[],["option",4]]],[11,"size_hint","","",194,[[]]],[11,"try_fold","","",194,[[]]],[11,"fold","","",194,[[]]],[11,"next","","",195,[[],["option",4]]],[11,"size_hint","","",195,[[]]],[11,"try_fold","","",195,[[]]],[11,"fold","","",195,[[]]],[11,"next","","",196,[[],["option",4]]],[11,"size_hint","","",196,[[]]],[11,"try_fold","","",196,[[]]],[11,"fold","","",196,[[]]],[11,"next","","",197,[[],["option",4]]],[11,"nth","","",197,[[],["option",4]]],[11,"last","","",197,[[],["option",4]]],[11,"count","","",197,[[]]],[11,"size_hint","","",197,[[]]],[11,"try_fold","","",197,[[]]],[11,"fold","","",197,[[]]],[11,"find","","",197,[[],["option",4]]],[11,"__iterator_get_unchecked","","",197,[[]]],[11,"next","","",198,[[],["option",4]]],[11,"size_hint","","",198,[[]]],[11,"try_fold","","",198,[[]]],[11,"fold","","",198,[[]]],[11,"next","","",199,[[],["option",4]]],[11,"size_hint","","",199,[[]]],[11,"try_fold","","",199,[[]]],[11,"fold","","",199,[[]]],[11,"__iterator_get_unchecked","","",199,[[]]],[11,"next","","",200,[[],["option",4]]],[11,"size_hint","","",200,[[]]],[11,"try_fold","","",200,[[]]],[11,"fold","","",200,[[]]],[11,"next","","",201,[[],["option",4]]],[11,"count","","",201,[[]]],[11,"nth","","",201,[[],["option",4]]],[11,"last","","",201,[[],["option",4]]],[11,"size_hint","","",201,[[]]],[11,"try_fold","","",201,[[]]],[11,"fold","","",201,[[]]],[11,"next","","",202,[[],["option",4]]],[11,"size_hint","","",202,[[]]],[11,"advance_by","","",202,[[],["result",4]]],[11,"nth","","",202,[[],["option",4]]],[11,"try_fold","","",202,[[]]],[11,"fold","","",202,[[]]],[11,"find","","",202,[[],["option",4]]],[11,"next","","",203,[[],["option",4]]],[11,"size_hint","","",203,[[]]],[11,"try_fold","","",203,[[]]],[11,"fold","","",203,[[]]],[11,"next","","",204,[[],["option",4]]],[11,"nth","","",204,[[],["option",4]]],[11,"count","","",204,[[]]],[11,"last","","",204,[[],["option",4]]],[11,"size_hint","","",204,[[]]],[11,"try_fold","","",204,[[]]],[11,"fold","","",204,[[]]],[11,"next","","",205,[[],["option",4]]],[11,"size_hint","","",205,[[]]],[11,"try_fold","","",205,[[]]],[11,"fold","","",205,[[]]],[11,"next","","",206,[[],["option",4]]],[11,"size_hint","","",206,[[]]],[11,"nth","","",206,[[],["option",4]]],[11,"try_fold","","",206,[[]]],[11,"fold","","",206,[[]]],[11,"next","","",207,[[],["option",4]]],[11,"nth","","",207,[[],["option",4]]],[11,"size_hint","","",207,[[]]],[11,"try_fold","","",207,[[]]],[11,"fold","","",207,[[]]],[11,"next","","",208,[[],["option",4]]],[11,"size_hint","","",208,[[]]],[11,"try_fold","","",208,[[]]],[11,"fold","","",208,[[]]],[11,"next","","",209,[[],["option",4]]],[11,"size_hint","","",209,[[]]],[11,"nth","","",209,[[],["option",4]]],[11,"__iterator_get_unchecked","","",209,[[]]],[11,"next","core::ops","",49,[[],["option",4]]],[11,"size_hint","","",49,[[]]],[11,"nth","","",49,[[],["option",4]]],[11,"last","","",49,[[],["option",4]]],[11,"min","","",49,[[],["option",4]]],[11,"max","","",49,[[],["option",4]]],[11,"next","","",50,[[],["option",4]]],[11,"size_hint","","",50,[[]]],[11,"nth","","",50,[[],["option",4]]],[11,"next","","",170,[[],["option",4]]],[11,"size_hint","","",170,[[]]],[11,"nth","","",170,[[],["option",4]]],[11,"try_fold","","",170,[[]]],[11,"fold","","",170,[[]]],[11,"last","","",170,[[],["option",4]]],[11,"min","","",170,[[],["option",4]]],[11,"max","","",170,[[],["option",4]]],[11,"next","core::iter","",210,[[],["option",4]]],[11,"size_hint","","",210,[[]]],[11,"next","","",211,[[],["option",4]]],[11,"next","","",212,[[],["option",4]]],[11,"size_hint","","",212,[[]]],[11,"next","","",213,[[],["option",4]]],[11,"size_hint","","",213,[[]]],[11,"next","","",214,[[],["option",4]]],[11,"size_hint","","",214,[[]]],[11,"next","","",215,[[],["option",4]]],[11,"size_hint","","",215,[[]]],[11,"next","","",216,[[],["option",4]]],[11,"size_hint","","",216,[[]]],[11,"next","core::option","",217,[[],["option",4]]],[11,"size_hint","","",217,[[]]],[11,"next","","",218,[[],["option",4]]],[11,"size_hint","","",218,[[]]],[11,"next","","",219,[[],["option",4]]],[11,"size_hint","","",219,[[]]],[11,"next","core::result","",221,[[],["option",4]]],[11,"size_hint","","",221,[[]]],[11,"next","","",222,[[],["option",4]]],[11,"size_hint","","",222,[[]]],[11,"next","","",223,[[],["option",4]]],[11,"size_hint","","",223,[[]]],[11,"next","core::slice","",232,[[],["option",4]]],[11,"size_hint","","",232,[[]]],[11,"count","","",232,[[]]],[11,"nth","","",232,[[],["option",4]]],[11,"last","","",232,[[],["option",4]]],[11,"for_each","","",232,[[]]],[11,"all","","",232,[[]]],[11,"any","","",232,[[]]],[11,"find","","",232,[[],["option",4]]],[11,"find_map","","",232,[[],["option",4]]],[11,"position","","",232,[[],["option",4]]],[11,"rposition","","",232,[[],["option",4]]],[11,"is_sorted_by","","",232,[[]]],[11,"next","","",233,[[],["option",4]]],[11,"size_hint","","",233,[[]]],[11,"count","","",233,[[]]],[11,"nth","","",233,[[],["option",4]]],[11,"last","","",233,[[],["option",4]]],[11,"for_each","","",233,[[]]],[11,"all","","",233,[[]]],[11,"any","","",233,[[]]],[11,"find","","",233,[[],["option",4]]],[11,"find_map","","",233,[[],["option",4]]],[11,"position","","",233,[[],["option",4]]],[11,"rposition","","",233,[[],["option",4]]],[11,"next","","",234,[[],["option",4]]],[11,"size_hint","","",234,[[]]],[11,"next","","",235,[[],["option",4]]],[11,"size_hint","","",235,[[]]],[11,"next","","",236,[[],["option",4]]],[11,"size_hint","","",236,[[]]],[11,"next","","",237,[[],["option",4]]],[11,"size_hint","","",237,[[]]],[11,"next","","",238,[[],["option",4]]],[11,"size_hint","","",238,[[]]],[11,"next","","",239,[[],["option",4]]],[11,"size_hint","","",239,[[]]],[11,"next","","",240,[[],["option",4]]],[11,"size_hint","","",240,[[]]],[11,"next","","",241,[[],["option",4]]],[11,"size_hint","","",241,[[]]],[11,"next","","",242,[[],["option",4]]],[11,"size_hint","","",242,[[]]],[11,"next","","",243,[[],["option",4]]],[11,"size_hint","","",243,[[]]],[11,"next","","",244,[[],["option",4]]],[11,"size_hint","","",244,[[]]],[11,"count","","",244,[[]]],[11,"nth","","",244,[[],["option",4]]],[11,"last","","",244,[[],["option",4]]],[11,"next","","",245,[[],["option",4]]],[11,"size_hint","","",245,[[]]],[11,"count","","",245,[[]]],[11,"nth","","",245,[[],["option",4]]],[11,"last","","",245,[[],["option",4]]],[11,"next","","",246,[[],["option",4]]],[11,"size_hint","","",246,[[]]],[11,"count","","",246,[[]]],[11,"nth","","",246,[[],["option",4]]],[11,"last","","",246,[[],["option",4]]],[11,"next","","",247,[[],["option",4]]],[11,"size_hint","","",247,[[]]],[11,"count","","",247,[[]]],[11,"nth","","",247,[[],["option",4]]],[11,"last","","",247,[[],["option",4]]],[11,"next","","",248,[[],["option",4]]],[11,"size_hint","","",248,[[]]],[11,"count","","",248,[[]]],[11,"nth","","",248,[[],["option",4]]],[11,"last","","",248,[[],["option",4]]],[11,"next","","",249,[[],["option",4]]],[11,"size_hint","","",249,[[]]],[11,"count","","",249,[[]]],[11,"nth","","",249,[[],["option",4]]],[11,"last","","",249,[[],["option",4]]],[11,"next","","",250,[[],["option",4]]],[11,"size_hint","","",250,[[]]],[11,"count","","",250,[[]]],[11,"nth","","",250,[[],["option",4]]],[11,"last","","",250,[[],["option",4]]],[11,"__iterator_get_unchecked","","",250,[[]]],[11,"next","","",251,[[],["option",4]]],[11,"size_hint","","",251,[[]]],[11,"count","","",251,[[]]],[11,"nth","","",251,[[],["option",4]]],[11,"last","","",251,[[],["option",4]]],[11,"__iterator_get_unchecked","","",251,[[]]],[11,"next","","",252,[[],["option",4]]],[11,"size_hint","","",252,[[]]],[11,"count","","",252,[[]]],[11,"nth","","",252,[[],["option",4]]],[11,"last","","",252,[[],["option",4]]],[11,"next","","",253,[[],["option",4]]],[11,"size_hint","","",253,[[]]],[11,"count","","",253,[[]]],[11,"nth","","",253,[[],["option",4]]],[11,"last","","",253,[[],["option",4]]],[11,"next","","",254,[[],["option",4]]],[11,"size_hint","","",254,[[]]],[11,"count","","",254,[[]]],[11,"nth","","",254,[[],["option",4]]],[11,"last","","",254,[[],["option",4]]],[11,"next","","",255,[[],["option",4]]],[11,"size_hint","","",255,[[]]],[11,"count","","",255,[[]]],[11,"nth","","",255,[[],["option",4]]],[11,"last","","",255,[[],["option",4]]],[11,"next","core::str","",258,[[],["option",4]]],[11,"count","","",258,[[]]],[11,"size_hint","","",258,[[]]],[11,"last","","",258,[[],["option",4]]],[11,"next","","",259,[[],["option",4]]],[11,"count","","",259,[[]]],[11,"size_hint","","",259,[[]]],[11,"last","","",259,[[],["option",4]]],[11,"next","","",260,[[],["option",4]]],[11,"size_hint","","",260,[[]]],[11,"count","","",260,[[]]],[11,"last","","",260,[[],["option",4]]],[11,"nth","","",260,[[],["option",4]]],[11,"all","","",260,[[]]],[11,"any","","",260,[[]]],[11,"find","","",260,[[],["option",4]]],[11,"position","","",260,[[],["option",4]]],[11,"rposition","","",260,[[],["option",4]]],[11,"__iterator_get_unchecked","","",260,[[]]],[11,"next","","",261,[[],["option",4]]],[11,"next","","",262,[[],["option",4]]],[11,"next","","",263,[[],["option",4]]],[11,"next","","",264,[[],["option",4]]],[11,"next","","",265,[[],["option",4]]],[11,"next","","",266,[[],["option",4]]],[11,"next","","",267,[[],["option",4]]],[11,"next","","",268,[[],["option",4]]],[11,"next","","",269,[[],["option",4]]],[11,"next","","",270,[[],["option",4]]],[11,"next","","",271,[[],["option",4]]],[11,"size_hint","","",271,[[]]],[11,"last","","",271,[[],["option",4]]],[11,"next","","",272,[[],["option",4]]],[11,"size_hint","","",272,[[]]],[11,"next","","",273,[[],["option",4]]],[11,"size_hint","","",273,[[]]],[11,"last","","",273,[[],["option",4]]],[11,"next","","",274,[[],["option",4]]],[11,"size_hint","","",274,[[]]],[11,"last","","",274,[[],["option",4]]],[11,"next","","",275,[[],["option",4]]],[11,"size_hint","","",275,[[]]],[11,"next","","",276,[[],["option",4]]],[11,"size_hint","","",276,[[]]],[11,"try_fold","","",276,[[]]],[11,"fold","","",276,[[]]],[11,"next","","",277,[[],["option",4]]],[11,"size_hint","","",277,[[]]],[11,"try_fold","","",277,[[]]],[11,"fold","","",277,[[]]],[11,"next","","",278,[[],["option",4]]],[11,"size_hint","","",278,[[]]],[11,"try_fold","","",278,[[]]],[11,"fold","","",278,[[]]],[11,"next","core::str::lossy","",283,[[],[["utf8lossychunk",3],["option",4]]]],[11,"write_str","core::fmt","",110,[[],["result",6]]],[11,"write_char","","",110,[[],["result",6]]],[11,"write_fmt","","",110,[[["arguments",3]],["result",6]]],[11,"fmt","core::num","",147,[[["formatter",3]],["result",6]]],[11,"fmt","","",148,[[["formatter",3]],["result",6]]],[11,"fmt","","",149,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",150,[[["formatter",3]],["result",6]]],[11,"fmt","","",151,[[["formatter",3]],["result",6]]],[11,"fmt","","",152,[[["formatter",3]],["result",6]]],[11,"fmt","","",153,[[["formatter",3]],["result",6]]],[11,"fmt","","",154,[[["formatter",3]],["result",6]]],[11,"fmt","","",155,[[["formatter",3]],["result",6]]],[11,"fmt","","",156,[[["formatter",3]],["result",6]]],[11,"fmt","","",157,[[["formatter",3]],["result",6]]],[11,"fmt","","",158,[[["formatter",3]],["result",6]]],[11,"fmt","","",159,[[["formatter",3]],["result",6]]],[11,"fmt","","",160,[[["formatter",3]],["result",6]]],[11,"fmt","","",161,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","core::mem","",162,[[["formatter",3]],["result",6]]],[11,"fmt","","",163,[[["formatter",3]],["result",6]]],[11,"fmt","","",164,[[["formatter",3]],["result",6]]],[11,"fmt","core::ptr","",165,[[["formatter",3]],["result",6]]],[11,"fmt","core::cmp","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","core::convert","",166,[[["formatter",3]],["result",6]]],[11,"fmt","core::marker","",168,[[["formatter",3]],["result",6]]],[11,"fmt","core::ops","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",169,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",170,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","core::any","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","core::array","",171,[[["formatter",3]],["result",6]]],[11,"fmt","","",172,[[["formatter",3]],["result",6]]],[11,"fmt","core::ascii","",173,[[["formatter",3]],["result",6]]],[11,"fmt","core::cell","",174,[[["formatter",3]],["result",6]]],[11,"fmt","","",175,[[["formatter",3]],["result",6]]],[11,"fmt","core::char","",177,[[["formatter",3]],["result",6]]],[11,"fmt","","",178,[[["formatter",3]],["result",6]]],[11,"fmt","","",179,[[["formatter",3]],["result",6]]],[11,"fmt","","",180,[[["formatter",3]],["result",6]]],[11,"fmt","","",181,[[["formatter",3]],["result",6]]],[11,"fmt","","",182,[[["formatter",3]],["result",6]]],[11,"fmt","","",183,[[["formatter",3]],["result",6]]],[11,"fmt","","",184,[[["formatter",3]],["result",6]]],[11,"fmt","","",185,[[["formatter",3]],["result",6]]],[11,"fmt","core::ffi","",186,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",187,[[["formatter",3]],["result",6]]],[11,"fmt","core::iter","",188,[[["formatter",3]],["result",6]]],[11,"fmt","","",189,[[["formatter",3]],["result",6]]],[11,"fmt","","",190,[[["formatter",3]],["result",6]]],[11,"fmt","","",191,[[["formatter",3]],["result",6]]],[11,"fmt","","",192,[[["formatter",3]],["result",6]]],[11,"fmt","","",193,[[["formatter",3]],["result",6]]],[11,"fmt","","",194,[[["formatter",3]],["result",6]]],[11,"fmt","","",195,[[["formatter",3]],["result",6]]],[11,"fmt","","",196,[[["formatter",3]],["result",6]]],[11,"fmt","","",197,[[["formatter",3]],["result",6]]],[11,"fmt","","",198,[[["formatter",3]],["result",6]]],[11,"fmt","","",199,[[["formatter",3]],["result",6]]],[11,"fmt","","",200,[[["formatter",3]],["result",6]]],[11,"fmt","","",201,[[["formatter",3]],["result",6]]],[11,"fmt","","",202,[[["formatter",3]],["result",6]]],[11,"fmt","","",203,[[["formatter",3]],["result",6]]],[11,"fmt","","",204,[[["formatter",3]],["result",6]]],[11,"fmt","","",205,[[["formatter",3]],["result",6]]],[11,"fmt","","",206,[[["formatter",3]],["result",6]]],[11,"fmt","","",207,[[["formatter",3]],["result",6]]],[11,"fmt","","",208,[[["formatter",3]],["result",6]]],[11,"fmt","","",209,[[["formatter",3]],["result",6]]],[11,"fmt","","",210,[[["formatter",3]],["result",6]]],[11,"fmt","","",211,[[["formatter",3]],["result",6]]],[11,"fmt","","",212,[[["formatter",3]],["result",6]]],[11,"fmt","","",213,[[["formatter",3]],["result",6]]],[11,"fmt","","",214,[[["formatter",3]],["result",6]]],[11,"fmt","","",215,[[["formatter",3]],["result",6]]],[11,"fmt","","",216,[[["formatter",3]],["result",6]]],[11,"fmt","core::lazy","",77,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","core::option","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",217,[[["formatter",3]],["result",6]]],[11,"fmt","","",218,[[["formatter",3]],["result",6]]],[11,"fmt","","",219,[[["formatter",3]],["result",6]]],[11,"fmt","","",220,[[["formatter",3]],["result",6]]],[11,"fmt","core::panic","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"fmt","core::pin","",82,[[["formatter",3]],["result",6]]],[11,"fmt","core::result","",84,[[["formatter",3]],["result",6]]],[11,"fmt","","",221,[[["formatter",3]],["result",6]]],[11,"fmt","","",222,[[["formatter",3]],["result",6]]],[11,"fmt","","",223,[[["formatter",3]],["result",6]]],[11,"fmt","core::sync::atomic","",85,[[["formatter",3]],["result",6]]],[11,"fmt","","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",89,[[["formatter",3]],["result",6]]],[11,"fmt","","",90,[[["formatter",3]],["result",6]]],[11,"fmt","","",91,[[["formatter",3]],["result",6]]],[11,"fmt","","",92,[[["formatter",3]],["result",6]]],[11,"fmt","","",93,[[["formatter",3]],["result",6]]],[11,"fmt","","",94,[[["formatter",3]],["result",6]]],[11,"fmt","","",95,[[["formatter",3]],["result",6]]],[11,"fmt","","",96,[[["formatter",3]],["result",6]]],[11,"fmt","","",97,[[["formatter",3]],["result",6]]],[11,"fmt","","",86,[[["formatter",3]],["result",6]]],[11,"fmt","","",87,[[["formatter",3]],["result",6]]],[11,"fmt","core::fmt","",98,[[["formatter",3]],["result",6]]],[11,"fmt","","",229,[[["formatter",3]],["result",6]]],[11,"fmt","","",100,[[["formatter",3]],["result",6]]],[11,"fmt","core::marker","",167,[[["formatter",3]],["result",6]]],[11,"fmt","core::cell","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",176,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","core::hash","",230,[[["formatter",3]],["result",6]]],[11,"fmt","","",231,[[["formatter",3]],["result",6]]],[11,"fmt","core::slice","",232,[[["formatter",3]],["result",6]]],[11,"fmt","","",233,[[["formatter",3]],["result",6]]],[11,"fmt","","",234,[[["formatter",3]],["result",6]]],[11,"fmt","","",235,[[["formatter",3]],["result",6]]],[11,"fmt","","",236,[[["formatter",3]],["result",6]]],[11,"fmt","","",237,[[["formatter",3]],["result",6]]],[11,"fmt","","",238,[[["formatter",3]],["result",6]]],[11,"fmt","","",239,[[["formatter",3]],["result",6]]],[11,"fmt","","",240,[[["formatter",3]],["result",6]]],[11,"fmt","","",241,[[["formatter",3]],["result",6]]],[11,"fmt","","",242,[[["formatter",3]],["result",6]]],[11,"fmt","","",243,[[["formatter",3]],["result",6]]],[11,"fmt","","",244,[[["formatter",3]],["result",6]]],[11,"fmt","","",245,[[["formatter",3]],["result",6]]],[11,"fmt","","",246,[[["formatter",3]],["result",6]]],[11,"fmt","","",247,[[["formatter",3]],["result",6]]],[11,"fmt","","",248,[[["formatter",3]],["result",6]]],[11,"fmt","","",249,[[["formatter",3]],["result",6]]],[11,"fmt","","",250,[[["formatter",3]],["result",6]]],[11,"fmt","","",251,[[["formatter",3]],["result",6]]],[11,"fmt","","",252,[[["formatter",3]],["result",6]]],[11,"fmt","","",253,[[["formatter",3]],["result",6]]],[11,"fmt","","",254,[[["formatter",3]],["result",6]]],[11,"fmt","","",255,[[["formatter",3]],["result",6]]],[11,"fmt","core::str","",256,[[["formatter",3]],["result",6]]],[11,"fmt","","",257,[[["formatter",3]],["result",6]]],[11,"fmt","","",258,[[["formatter",3]],["result",6]]],[11,"fmt","","",259,[[["formatter",3]],["result",6]]],[11,"fmt","","",260,[[["formatter",3]],["result",6]]],[11,"fmt","","",261,[[["formatter",3]],["result",6]]],[11,"fmt","","",262,[[["formatter",3]],["result",6]]],[11,"fmt","","",263,[[["formatter",3]],["result",6]]],[11,"fmt","","",264,[[["formatter",3]],["result",6]]],[11,"fmt","","",265,[[["formatter",3]],["result",6]]],[11,"fmt","","",266,[[["formatter",3]],["result",6]]],[11,"fmt","","",267,[[["formatter",3]],["result",6]]],[11,"fmt","","",268,[[["formatter",3]],["result",6]]],[11,"fmt","","",269,[[["formatter",3]],["result",6]]],[11,"fmt","","",270,[[["formatter",3]],["result",6]]],[11,"fmt","","",271,[[["formatter",3]],["result",6]]],[11,"fmt","","",272,[[["formatter",3]],["result",6]]],[11,"fmt","","",273,[[["formatter",3]],["result",6]]],[11,"fmt","","",274,[[["formatter",3]],["result",6]]],[11,"fmt","","",275,[[["formatter",3]],["result",6]]],[11,"fmt","","",276,[[["formatter",3]],["result",6]]],[11,"fmt","","",277,[[["formatter",3]],["result",6]]],[11,"fmt","","",278,[[["formatter",3]],["result",6]]],[11,"fmt","core::str::pattern","",116,[[["formatter",3]],["result",6]]],[11,"fmt","","",279,[[["formatter",3]],["result",6]]],[11,"fmt","","",280,[[["formatter",3]],["result",6]]],[11,"fmt","","",281,[[["formatter",3]],["result",6]]],[11,"fmt","","",282,[[["formatter",3]],["result",6]]],[11,"fmt","core::str::lossy","",120,[[["formatter",3]],["result",6]]],[11,"fmt","","",119,[[["formatter",3]],["result",6]]],[11,"fmt","core::time","",122,[[["formatter",3]],["result",6]]],[11,"fmt","core::future","",284,[[["formatter",3]],["result",6]]],[11,"fmt","","",285,[[["formatter",3]],["result",6]]],[11,"fmt","","",286,[[["formatter",3]],["result",6]]],[11,"fmt","core::task","",125,[[["formatter",3]],["result",6]]],[11,"fmt","","",287,[[["formatter",3]],["result",6]]],[11,"fmt","","",288,[[["formatter",3]],["result",6]]],[11,"fmt","","",289,[[["formatter",3]],["result",6]]],[11,"fmt","","",290,[[["formatter",3]],["result",6]]],[11,"fmt","core::alloc","",291,[[["formatter",3]],["result",6]]],[11,"fmt","","",292,[[["formatter",3]],["result",6]]],[11,"fmt","","",293,[[["formatter",3]],["result",6]]],[11,"fmt","core::arch::x86","",296,[[["formatter",3]],["result",6]]],[11,"fmt","","",297,[[["formatter",3]],["result",6]]],[11,"fmt","","",298,[[["formatter",3]],["result",6]]],[11,"fmt","","",299,[[["formatter",3]],["result",6]]],[11,"fmt","","",300,[[["formatter",3]],["result",6]]],[11,"fmt","","",301,[[["formatter",3]],["result",6]]],[11,"fmt","","",302,[[["formatter",3]],["result",6]]],[11,"fmt","","",303,[[["formatter",3]],["result",6]]],[11,"fmt","","",304,[[["formatter",3]],["result",6]]],[11,"fmt","","",128,[[["formatter",3]],["result",6]]],[11,"fmt","core::arch::aarch64","",305,[[["formatter",3]],["result",6]]],[11,"fmt","","",306,[[["formatter",3]],["result",6]]],[11,"fmt","core::arch::arm","",307,[[["formatter",3]],["result",6]]],[11,"fmt","","",308,[[["formatter",3]],["result",6]]],[11,"fmt","","",309,[[["formatter",3]],["result",6]]],[11,"fmt","","",310,[[["formatter",3]],["result",6]]],[11,"fmt","","",311,[[["formatter",3]],["result",6]]],[11,"fmt","","",312,[[["formatter",3]],["result",6]]],[11,"fmt","","",313,[[["formatter",3]],["result",6]]],[11,"fmt","","",314,[[["formatter",3]],["result",6]]],[11,"fmt","","",315,[[["formatter",3]],["result",6]]],[11,"fmt","","",316,[[["formatter",3]],["result",6]]],[11,"fmt","","",317,[[["formatter",3]],["result",6]]],[11,"fmt","","",318,[[["formatter",3]],["result",6]]],[11,"fmt","","",319,[[["formatter",3]],["result",6]]],[11,"fmt","","",320,[[["formatter",3]],["result",6]]],[11,"fmt","","",321,[[["formatter",3]],["result",6]]],[11,"fmt","","",322,[[["formatter",3]],["result",6]]],[11,"fmt","","",323,[[["formatter",3]],["result",6]]],[11,"fmt","","",324,[[["formatter",3]],["result",6]]],[11,"fmt","","",325,[[["formatter",3]],["result",6]]],[11,"fmt","","",326,[[["formatter",3]],["result",6]]],[11,"fmt","","",327,[[["formatter",3]],["result",6]]],[11,"fmt","","",328,[[["formatter",3]],["result",6]]],[11,"fmt","","",329,[[["formatter",3]],["result",6]]],[11,"fmt","","",330,[[["formatter",3]],["result",6]]],[11,"fmt","core::arch::wasm32","",331,[[["formatter",3]],["result",6]]],[11,"fmt","core::arch::powerpc","",332,[[["formatter",3]],["result",6]]],[11,"fmt","","",333,[[["formatter",3]],["result",6]]],[11,"fmt","","",334,[[["formatter",3]],["result",6]]],[11,"fmt","","",335,[[["formatter",3]],["result",6]]],[11,"fmt","core::num","",147,[[["formatter",3]],["result",6]]],[11,"fmt","","",148,[[["formatter",3]],["result",6]]],[11,"fmt","","",149,[[["formatter",3]],["result",6]]],[11,"fmt","","",150,[[["formatter",3]],["result",6]]],[11,"fmt","","",151,[[["formatter",3]],["result",6]]],[11,"fmt","","",152,[[["formatter",3]],["result",6]]],[11,"fmt","","",153,[[["formatter",3]],["result",6]]],[11,"fmt","","",154,[[["formatter",3]],["result",6]]],[11,"fmt","","",155,[[["formatter",3]],["result",6]]],[11,"fmt","","",156,[[["formatter",3]],["result",6]]],[11,"fmt","","",157,[[["formatter",3]],["result",6]]],[11,"fmt","","",158,[[["formatter",3]],["result",6]]],[11,"fmt","","",159,[[["formatter",3]],["result",6]]],[11,"fmt","","",160,[[["formatter",3]],["result",6]]],[11,"fmt","","",161,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","core::convert","",166,[[["formatter",3]],["result",6]]],[11,"fmt","core::array","",172,[[["formatter",3]],["result",6]]],[11,"fmt","core::ascii","",173,[[["formatter",3]],["result",6]]],[11,"fmt","core::cell","",174,[[["formatter",3]],["result",6]]],[11,"fmt","","",175,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",176,[[["formatter",3]],["result",6]]],[11,"fmt","core::char","",177,[[["formatter",3]],["result",6]]],[11,"fmt","","",178,[[["formatter",3]],["result",6]]],[11,"fmt","","",180,[[["formatter",3]],["result",6]]],[11,"fmt","","",181,[[["formatter",3]],["result",6]]],[11,"fmt","","",182,[[["formatter",3]],["result",6]]],[11,"fmt","","",183,[[["formatter",3]],["result",6]]],[11,"fmt","","",184,[[["formatter",3]],["result",6]]],[11,"fmt","","",185,[[["formatter",3]],["result",6]]],[11,"fmt","core::panic","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"fmt","core::pin","",82,[[["formatter",3]],["result",6]]],[11,"fmt","core::fmt","",100,[[["formatter",3]],["result",6]]],[11,"fmt","","",229,[[["formatter",3]],["result",6]]],[11,"fmt","core::str","",256,[[["formatter",3]],["result",6]]],[11,"fmt","","",257,[[["formatter",3]],["result",6]]],[11,"fmt","","",276,[[["formatter",3]],["result",6]]],[11,"fmt","","",277,[[["formatter",3]],["result",6]]],[11,"fmt","","",278,[[["formatter",3]],["result",6]]],[11,"fmt","core::str::lossy","",119,[[["formatter",3]],["result",6]]],[11,"fmt","core::alloc","",292,[[["formatter",3]],["result",6]]],[11,"fmt","","",293,[[["formatter",3]],["result",6]]],[11,"fmt","core::num","",150,[[["formatter",3]],["result",6]]],[11,"fmt","","",151,[[["formatter",3]],["result",6]]],[11,"fmt","","",152,[[["formatter",3]],["result",6]]],[11,"fmt","","",153,[[["formatter",3]],["result",6]]],[11,"fmt","","",154,[[["formatter",3]],["result",6]]],[11,"fmt","","",155,[[["formatter",3]],["result",6]]],[11,"fmt","","",156,[[["formatter",3]],["result",6]]],[11,"fmt","","",157,[[["formatter",3]],["result",6]]],[11,"fmt","","",158,[[["formatter",3]],["result",6]]],[11,"fmt","","",159,[[["formatter",3]],["result",6]]],[11,"fmt","","",160,[[["formatter",3]],["result",6]]],[11,"fmt","","",161,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",150,[[["formatter",3]],["result",6]]],[11,"fmt","","",151,[[["formatter",3]],["result",6]]],[11,"fmt","","",152,[[["formatter",3]],["result",6]]],[11,"fmt","","",153,[[["formatter",3]],["result",6]]],[11,"fmt","","",154,[[["formatter",3]],["result",6]]],[11,"fmt","","",155,[[["formatter",3]],["result",6]]],[11,"fmt","","",156,[[["formatter",3]],["result",6]]],[11,"fmt","","",157,[[["formatter",3]],["result",6]]],[11,"fmt","","",158,[[["formatter",3]],["result",6]]],[11,"fmt","","",159,[[["formatter",3]],["result",6]]],[11,"fmt","","",160,[[["formatter",3]],["result",6]]],[11,"fmt","","",161,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",150,[[["formatter",3]],["result",6]]],[11,"fmt","","",151,[[["formatter",3]],["result",6]]],[11,"fmt","","",152,[[["formatter",3]],["result",6]]],[11,"fmt","","",153,[[["formatter",3]],["result",6]]],[11,"fmt","","",154,[[["formatter",3]],["result",6]]],[11,"fmt","","",155,[[["formatter",3]],["result",6]]],[11,"fmt","","",156,[[["formatter",3]],["result",6]]],[11,"fmt","","",157,[[["formatter",3]],["result",6]]],[11,"fmt","","",158,[[["formatter",3]],["result",6]]],[11,"fmt","","",159,[[["formatter",3]],["result",6]]],[11,"fmt","","",160,[[["formatter",3]],["result",6]]],[11,"fmt","","",161,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",150,[[["formatter",3]],["result",6]]],[11,"fmt","","",151,[[["formatter",3]],["result",6]]],[11,"fmt","","",152,[[["formatter",3]],["result",6]]],[11,"fmt","","",153,[[["formatter",3]],["result",6]]],[11,"fmt","","",154,[[["formatter",3]],["result",6]]],[11,"fmt","","",155,[[["formatter",3]],["result",6]]],[11,"fmt","","",156,[[["formatter",3]],["result",6]]],[11,"fmt","","",157,[[["formatter",3]],["result",6]]],[11,"fmt","","",158,[[["formatter",3]],["result",6]]],[11,"fmt","","",159,[[["formatter",3]],["result",6]]],[11,"fmt","","",160,[[["formatter",3]],["result",6]]],[11,"fmt","","",161,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","core::ptr","",165,[[["formatter",3]],["result",6]]],[11,"fmt","core::pin","",82,[[["formatter",3]],["result",6]]],[11,"fmt","core::sync::atomic","",87,[[["formatter",3]],["result",6]]],[11,"hash","core::num","",150,[[]]],[11,"hash","","",151,[[]]],[11,"hash","","",152,[[]]],[11,"hash","","",153,[[]]],[11,"hash","","",154,[[]]],[11,"hash","","",155,[[]]],[11,"hash","","",156,[[]]],[11,"hash","","",157,[[]]],[11,"hash","","",158,[[]]],[11,"hash","","",159,[[]]],[11,"hash","","",160,[[]]],[11,"hash","","",161,[[]]],[11,"hash","","",0,[[]]],[11,"hash","core::mem","",162,[[]]],[11,"hash","","",164,[[]]],[11,"hash","core::ptr","",165,[[]]],[11,"hash","core::cmp","",7,[[]]],[11,"hash","","",8,[[]]],[11,"hash","core::convert","",166,[[]]],[11,"hash","core::marker","",167,[[]]],[11,"hash","","",168,[[]]],[11,"hash","core::ops","",57,[[]]],[11,"hash","","",169,[[]]],[11,"hash","","",49,[[]]],[11,"hash","","",50,[[]]],[11,"hash","","",51,[[]]],[11,"hash","","",170,[[]]],[11,"hash","","",54,[[]]],[11,"hash","","",52,[[]]],[11,"hash","core::any","",60,[[]]],[11,"hash","core::option","",79,[[]]],[11,"hash","","",220,[[]]],[11,"hash","core::panic","",81,[[]]],[11,"hash","core::pin","",82,[[]]],[11,"hash","core::result","",84,[[]]],[11,"hash","core::sync::atomic","",85,[[]]],[11,"hash","core::fmt","",229,[[]]],[11,"hash","core::time","",122,[[]]],[11,"hash","core::task","",125,[[]]],[11,"write","core::hash","",230,[[]]],[11,"finish","","",230,[[]]],[11,"build_hasher","","",231,[[]]],[11,"get","core::ops","",49,[[],["option",4]]],[11,"get_mut","","",49,[[],["option",4]]],[11,"get_unchecked","","",49,[[]]],[11,"get_unchecked_mut","","",49,[[]]],[11,"index","","",49,[[]]],[11,"index_mut","","",49,[[]]],[11,"get","","",51,[[],["option",4]]],[11,"get_mut","","",51,[[],["option",4]]],[11,"get_unchecked","","",51,[[]]],[11,"get_unchecked_mut","","",51,[[]]],[11,"index","","",51,[[]]],[11,"index_mut","","",51,[[]]],[11,"get","","",50,[[],["option",4]]],[11,"get_mut","","",50,[[],["option",4]]],[11,"get_unchecked","","",50,[[]]],[11,"get_unchecked_mut","","",50,[[]]],[11,"index","","",50,[[]]],[11,"index_mut","","",50,[[]]],[11,"get","","",169,[[],["option",4]]],[11,"get_mut","","",169,[[],["option",4]]],[11,"get_unchecked","","",169,[[]]],[11,"get_unchecked_mut","","",169,[[]]],[11,"index","","",169,[[]]],[11,"index_mut","","",169,[[]]],[11,"get","","",170,[[],["option",4]]],[11,"get_mut","","",170,[[],["option",4]]],[11,"get_unchecked","","",170,[[]]],[11,"get_unchecked_mut","","",170,[[]]],[11,"index","","",170,[[]]],[11,"index_mut","","",170,[[]]],[11,"get","","",54,[[],["option",4]]],[11,"get_mut","","",54,[[],["option",4]]],[11,"get_unchecked","","",54,[[]]],[11,"get_unchecked_mut","","",54,[[]]],[11,"index","","",54,[[]]],[11,"index_mut","","",54,[[]]],[11,"get","","",169,[[],["option",4]]],[11,"get_mut","","",169,[[],["option",4]]],[11,"get_unchecked","","",169,[[]]],[11,"get_unchecked_mut","","",169,[[]]],[11,"index","","",169,[[]]],[11,"index_mut","","",169,[[]]],[11,"get","","",49,[[],["option",4]]],[11,"get_mut","","",49,[[],["option",4]]],[11,"get_unchecked","","",49,[[]]],[11,"get_unchecked_mut","","",49,[[]]],[11,"index","","",49,[[]]],[11,"index_mut","","",49,[[]]],[11,"get","","",51,[[],["option",4]]],[11,"get_mut","","",51,[[],["option",4]]],[11,"get_unchecked","","",51,[[]]],[11,"get_unchecked_mut","","",51,[[]]],[11,"index","","",51,[[]]],[11,"index_mut","","",51,[[]]],[11,"get","","",50,[[],["option",4]]],[11,"get_mut","","",50,[[],["option",4]]],[11,"get_unchecked","","",50,[[]]],[11,"get_unchecked_mut","","",50,[[]]],[11,"index","","",50,[[]]],[11,"index_mut","","",50,[[]]],[11,"get","","",170,[[],["option",4]]],[11,"get_mut","","",170,[[],["option",4]]],[11,"get_unchecked","","",170,[[]]],[11,"get_unchecked_mut","","",170,[[]]],[11,"index","","",170,[[]]],[11,"index_mut","","",170,[[]]],[11,"get","","",54,[[],["option",4]]],[11,"get_mut","","",54,[[],["option",4]]],[11,"get_unchecked","","",54,[[]]],[11,"get_unchecked_mut","","",54,[[]]],[11,"index","","",54,[[]]],[11,"index_mut","","",54,[[]]],[11,"from_str","core::num","",150,[[],["result",4]]],[11,"from_str","","",151,[[],["result",4]]],[11,"from_str","","",152,[[],["result",4]]],[11,"from_str","","",153,[[],["result",4]]],[11,"from_str","","",154,[[],["result",4]]],[11,"from_str","","",155,[[],["result",4]]],[11,"from_str","","",156,[[],["result",4]]],[11,"from_str","","",157,[[],["result",4]]],[11,"from_str","","",158,[[],["result",4]]],[11,"from_str","","",159,[[],["result",4]]],[11,"from_str","","",160,[[],["result",4]]],[11,"from_str","","",161,[[],["result",4]]],[11,"haystack","core::str::pattern","",279,[[]]],[11,"next","","",279,[[],["searchstep",4]]],[11,"next_match","","",279,[[],["option",4]]],[11,"haystack","","",280,[[]]],[11,"next","","",280,[[],["searchstep",4]]],[11,"next_match","","",280,[[],["option",4]]],[11,"next_reject","","",280,[[],["option",4]]],[11,"haystack","","",281,[[]]],[11,"next","","",281,[[],["searchstep",4]]],[11,"next_match","","",281,[[],["option",4]]],[11,"next_reject","","",281,[[],["option",4]]],[11,"haystack","","",282,[[]]],[11,"next","","",282,[[],["searchstep",4]]],[11,"next_match","","",282,[[],["option",4]]],[11,"next_back","","",279,[[],["searchstep",4]]],[11,"next_match_back","","",279,[[],["option",4]]],[11,"next_back","","",280,[[],["searchstep",4]]],[11,"next_match_back","","",280,[[],["option",4]]],[11,"next_reject_back","","",280,[[],["option",4]]],[11,"next_back","","",281,[[],["searchstep",4]]],[11,"next_match_back","","",281,[[],["option",4]]],[11,"next_reject_back","","",281,[[],["option",4]]],[11,"next_back","","",282,[[],["searchstep",4]]],[11,"next_match_back","","",282,[[],["option",4]]],[11,"poll","core::pin","",82,[[["context",3],["pin",3]],["poll",4]]],[11,"poll","core::future","",284,[[["context",3],["pin",3]],["poll",4]]],[11,"poll","","",285,[[["context",3],["pin",3]],["poll",4]]],[11,"poll","","",286,[[["context",3],["pin",3]],["poll",4]]],[11,"kind","core::num","Outputs the detailed cause of parsing an integer failing.",149,[[],["interrorkind",4]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",150,[[]]],[11,"new","","Creates a non-zero if the given value is not zero.",150,[[],["option",4]]],[11,"get","","Returns the value as a primitive type.",150,[[]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",151,[[]]],[11,"new","","Creates a non-zero if the given value is not zero.",151,[[],["option",4]]],[11,"get","","Returns the value as a primitive type.",151,[[]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",152,[[]]],[11,"new","","Creates a non-zero if the given value is not zero.",152,[[],["option",4]]],[11,"get","","Returns the value as a primitive type.",152,[[]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",153,[[]]],[11,"new","","Creates a non-zero if the given value is not zero.",153,[[],["option",4]]],[11,"get","","Returns the value as a primitive type.",153,[[]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",154,[[]]],[11,"new","","Creates a non-zero if the given value is not zero.",154,[[],["option",4]]],[11,"get","","Returns the value as a primitive type.",154,[[]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",155,[[]]],[11,"new","","Creates a non-zero if the given value is not zero.",155,[[],["option",4]]],[11,"get","","Returns the value as a primitive type.",155,[[]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",156,[[]]],[11,"new","","Creates a non-zero if the given value is not zero.",156,[[],["option",4]]],[11,"get","","Returns the value as a primitive type.",156,[[]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",157,[[]]],[11,"new","","Creates a non-zero if the given value is not zero.",157,[[],["option",4]]],[11,"get","","Returns the value as a primitive type.",157,[[]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",158,[[]]],[11,"new","","Creates a non-zero if the given value is not zero.",158,[[],["option",4]]],[11,"get","","Returns the value as a primitive type.",158,[[]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",159,[[]]],[11,"new","","Creates a non-zero if the given value is not zero.",159,[[],["option",4]]],[11,"get","","Returns the value as a primitive type.",159,[[]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",160,[[]]],[11,"new","","Creates a non-zero if the given value is not zero.",160,[[],["option",4]]],[11,"get","","Returns the value as a primitive type.",160,[[]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",161,[[]]],[11,"new","","Creates a non-zero if the given value is not zero.",161,[[],["option",4]]],[11,"get","","Returns the value as a primitive type.",161,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",150,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",150,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",151,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",151,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",152,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",152,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",153,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",153,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",154,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",154,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",155,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",155,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",156,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",156,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",157,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",157,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",158,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",158,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",159,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",159,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",160,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",160,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",161,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",161,[[]]],[18,"MIN","","Returns the smallest value that can be represented by …",0,null],[18,"MAX","","Returns the largest value that can be represented by this …",0,null],[11,"count_ones","","Returns the number of ones in the binary representation …",0,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",0,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",0,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",0,[[]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",0,[[]]],[11,"swap_bytes","","Reverses the byte order of the integer.",0,[[]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",0,[[]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",0,[[]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",0,[[]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",0,[[]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",0,[[]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",0,[[]]],[18,"MIN","","Returns the smallest value that can be represented by …",0,null],[18,"MAX","","Returns the largest value that can be represented by this …",0,null],[11,"count_ones","","Returns the number of ones in the binary representation …",0,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",0,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",0,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",0,[[]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",0,[[]]],[11,"swap_bytes","","Reverses the byte order of the integer.",0,[[]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",0,[[]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",0,[[]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",0,[[]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",0,[[]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",0,[[]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",0,[[]]],[18,"MIN","","Returns the smallest value that can be represented by …",0,null],[18,"MAX","","Returns the largest value that can be represented by this …",0,null],[11,"count_ones","","Returns the number of ones in the binary representation …",0,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",0,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",0,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",0,[[]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",0,[[]]],[11,"swap_bytes","","Reverses the byte order of the integer.",0,[[]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",0,[[]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",0,[[]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",0,[[]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",0,[[]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",0,[[]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",0,[[]]],[18,"MIN","","Returns the smallest value that can be represented by …",0,null],[18,"MAX","","Returns the largest value that can be represented by this …",0,null],[11,"count_ones","","Returns the number of ones in the binary representation …",0,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",0,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",0,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",0,[[]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",0,[[]]],[11,"swap_bytes","","Reverses the byte order of the integer.",0,[[]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",0,[[]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",0,[[]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",0,[[]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",0,[[]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",0,[[]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",0,[[]]],[18,"MIN","","Returns the smallest value that can be represented by …",0,null],[18,"MAX","","Returns the largest value that can be represented by this …",0,null],[11,"count_ones","","Returns the number of ones in the binary representation …",0,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",0,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",0,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",0,[[]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",0,[[]]],[11,"swap_bytes","","Reverses the byte order of the integer.",0,[[]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",0,[[]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",0,[[]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",0,[[]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",0,[[]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",0,[[]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",0,[[]]],[18,"MIN","","Returns the smallest value that can be represented by …",0,null],[18,"MAX","","Returns the largest value that can be represented by this …",0,null],[11,"count_ones","","Returns the number of ones in the binary representation …",0,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",0,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",0,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",0,[[]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",0,[[]]],[11,"swap_bytes","","Reverses the byte order of the integer.",0,[[]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",0,[[]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",0,[[]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",0,[[]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",0,[[]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",0,[[]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",0,[[]]],[18,"MIN","","Returns the smallest value that can be represented by …",0,null],[18,"MAX","","Returns the largest value that can be represented by this …",0,null],[11,"count_ones","","Returns the number of ones in the binary representation …",0,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",0,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",0,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",0,[[]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",0,[[]]],[11,"swap_bytes","","Reverses the byte order of the integer.",0,[[]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",0,[[]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",0,[[]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",0,[[]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",0,[[]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",0,[[]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",0,[[]]],[18,"MIN","","Returns the smallest value that can be represented by …",0,null],[18,"MAX","","Returns the largest value that can be represented by this …",0,null],[11,"count_ones","","Returns the number of ones in the binary representation …",0,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",0,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",0,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",0,[[]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",0,[[]]],[11,"swap_bytes","","Reverses the byte order of the integer.",0,[[]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",0,[[]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",0,[[]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",0,[[]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",0,[[]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",0,[[]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",0,[[]]],[18,"MIN","","Returns the smallest value that can be represented by …",0,null],[18,"MAX","","Returns the largest value that can be represented by this …",0,null],[11,"count_ones","","Returns the number of ones in the binary representation …",0,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",0,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",0,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",0,[[]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",0,[[]]],[11,"swap_bytes","","Reverses the byte order of the integer.",0,[[]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",0,[[]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",0,[[]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",0,[[]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",0,[[]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",0,[[]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",0,[[]]],[18,"MIN","","Returns the smallest value that can be represented by …",0,null],[18,"MAX","","Returns the largest value that can be represented by this …",0,null],[11,"count_ones","","Returns the number of ones in the binary representation …",0,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",0,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",0,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",0,[[]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",0,[[]]],[11,"swap_bytes","","Reverses the byte order of the integer.",0,[[]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",0,[[]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",0,[[]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",0,[[]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",0,[[]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",0,[[]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",0,[[]]],[18,"MIN","","Returns the smallest value that can be represented by …",0,null],[18,"MAX","","Returns the largest value that can be represented by this …",0,null],[11,"count_ones","","Returns the number of ones in the binary representation …",0,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",0,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",0,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",0,[[]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",0,[[]]],[11,"swap_bytes","","Reverses the byte order of the integer.",0,[[]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",0,[[]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",0,[[]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",0,[[]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",0,[[]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",0,[[]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",0,[[]]],[18,"MIN","","Returns the smallest value that can be represented by …",0,null],[18,"MAX","","Returns the largest value that can be represented by this …",0,null],[11,"count_ones","","Returns the number of ones in the binary representation …",0,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",0,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",0,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",0,[[]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",0,[[]]],[11,"swap_bytes","","Reverses the byte order of the integer.",0,[[]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",0,[[]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",0,[[]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",0,[[]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",0,[[]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",0,[[]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",0,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",0,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>, wrapping around at …",0,[[],["wrapping",3]]],[11,"signum","","Returns a number representing sign of <code>self</code>.",0,[[],["wrapping",3]]],[11,"is_positive","","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …",0,[[]]],[11,"is_negative","","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …",0,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",0,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>, wrapping around at …",0,[[],["wrapping",3]]],[11,"signum","","Returns a number representing sign of <code>self</code>.",0,[[],["wrapping",3]]],[11,"is_positive","","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …",0,[[]]],[11,"is_negative","","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …",0,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",0,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>, wrapping around at …",0,[[],["wrapping",3]]],[11,"signum","","Returns a number representing sign of <code>self</code>.",0,[[],["wrapping",3]]],[11,"is_positive","","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …",0,[[]]],[11,"is_negative","","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …",0,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",0,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>, wrapping around at …",0,[[],["wrapping",3]]],[11,"signum","","Returns a number representing sign of <code>self</code>.",0,[[],["wrapping",3]]],[11,"is_positive","","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …",0,[[]]],[11,"is_negative","","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …",0,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",0,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>, wrapping around at …",0,[[],["wrapping",3]]],[11,"signum","","Returns a number representing sign of <code>self</code>.",0,[[],["wrapping",3]]],[11,"is_positive","","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …",0,[[]]],[11,"is_negative","","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …",0,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",0,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>, wrapping around at …",0,[[],["wrapping",3]]],[11,"signum","","Returns a number representing sign of <code>self</code>.",0,[[],["wrapping",3]]],[11,"is_positive","","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …",0,[[]]],[11,"is_negative","","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …",0,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",0,[[]]],[11,"is_power_of_two","","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.",0,[[]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal …",0,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",0,[[]]],[11,"is_power_of_two","","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.",0,[[]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal …",0,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",0,[[]]],[11,"is_power_of_two","","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.",0,[[]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal …",0,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",0,[[]]],[11,"is_power_of_two","","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.",0,[[]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal …",0,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",0,[[]]],[11,"is_power_of_two","","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.",0,[[]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal …",0,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",0,[[]]],[11,"is_power_of_two","","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.",0,[[]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal …",0,[[]]],[11,"new","core::mem","Wrap a value to be manually dropped.",162,[[],["manuallydrop",3]]],[11,"into_inner","","Extracts the value from the <code>ManuallyDrop</code> container.",162,[[["manuallydrop",3]]]],[11,"take","","Takes the value from the <code>ManuallyDrop<T></code> container out.",162,[[["manuallydrop",3]]]],[11,"drop","","Manually drops the contained value. This is exactly …",162,[[["manuallydrop",3]]]],[11,"new","","Creates a new <code>MaybeUninit<T></code> initialized with the given …",163,[[],["maybeuninit",19]]],[11,"uninit","","Creates a new <code>MaybeUninit<T></code> in an uninitialized state.",163,[[],["maybeuninit",19]]],[11,"uninit_array","","Create a new array of <code>MaybeUninit<T></code> items, in an …",163,[[]]],[11,"zeroed","","Creates a new <code>MaybeUninit<T></code> in an uninitialized state, …",163,[[],["maybeuninit",19]]],[11,"write","","Sets the value of the <code>MaybeUninit<T></code>. This overwrites any …",163,[[]]],[11,"as_ptr","","Gets a pointer to the contained value. Reading from this …",163,[[]]],[11,"as_mut_ptr","","Gets a mutable pointer to the contained value. Reading …",163,[[]]],[11,"assume_init","","Extracts the value from the <code>MaybeUninit<T></code> container. …",163,[[]]],[11,"assume_init_read","","Reads the value from the <code>MaybeUninit<T></code> container. The …",163,[[]]],[11,"assume_init_drop","","Drops the contained value in place.",163,[[]]],[11,"assume_init_ref","","Gets a shared reference to the contained value.",163,[[]]],[11,"assume_init_mut","","Gets a mutable (unique) reference to the contained value.",163,[[]]],[11,"slice_assume_init_ref","","Assuming all the elements are initialized, get a slice to …",163,[[]]],[11,"slice_assume_init_mut","","Assuming all the elements are initialized, get a mutable …",163,[[]]],[11,"slice_as_ptr","","Gets a pointer to the first element of the array.",163,[[]]],[11,"slice_as_mut_ptr","","Gets a mutable pointer to the first element of the array.",163,[[]]],[11,"write_slice","","Copies the elements from <code>src</code> to <code>this</code>, returning a mutable …",163,[[]]],[11,"write_slice_cloned","","Clones the elements from <code>src</code> to <code>this</code>, returning a mutable …",163,[[]]],[11,"dangling","core::ptr","Creates a new <code>NonNull</code> that is dangling, but well-aligned.",165,[[]]],[11,"as_uninit_ref","","Returns a shared references to the value. In contrast to …",165,[[],["maybeuninit",19]]],[11,"as_uninit_mut","","Returns a unique references to the value. In contrast to …",165,[[],["maybeuninit",19]]],[11,"new_unchecked","","Creates a new <code>NonNull</code>.",165,[[]]],[11,"new","","Creates a new <code>NonNull</code> if <code>ptr</code> is non-null.",165,[[],["option",4]]],[11,"as_ptr","","Acquires the underlying <code>*mut</code> pointer.",165,[[]]],[11,"as_ref","","Returns a shared reference to the value. If the value may …",165,[[]]],[11,"as_mut","","Returns a unique reference to the value. If the value may …",165,[[]]],[11,"cast","","Casts to a pointer of another type.",165,[[],["nonnull",3]]],[11,"slice_from_raw_parts","","Creates a non-null raw slice from a thin pointer and a …",165,[[["nonnull",3]]]],[11,"len","","Returns the length of a non-null raw slice.",165,[[]]],[11,"as_non_null_ptr","","Returns a non-null pointer to the slice\'s buffer.",165,[[],["nonnull",3]]],[11,"as_mut_ptr","","Returns a raw pointer to the slice\'s buffer.",165,[[]]],[11,"as_uninit_slice","","Returns a shared reference to a slice of possibly …",165,[[]]],[11,"as_uninit_slice_mut","","Returns a unique reference to a slice of possibly …",165,[[]]],[11,"get_unchecked_mut","","Returns a raw pointer to an element or subslice, without …",165,[[],["nonnull",3]]],[11,"is_break","core::ops","Returns <code>true</code> if this is a <code>Break</code> variant.",58,[[]]],[11,"is_continue","","Returns <code>true</code> if this is a <code>Continue</code> variant.",58,[[]]],[11,"break_value","","Converts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …",58,[[],["option",4]]],[11,"map_break","","Maps <code>ControlFlow<B, C></code> to <code>ControlFlow<T, C></code> by applying a …",58,[[],["controlflow",4]]],[11,"from_try","","Create a <code>ControlFlow</code> from any type implementing <code>Try</code>.",58,[[]]],[11,"into_try","","Convert a <code>ControlFlow</code> into any type implementing <code>Try</code>;",58,[[]]],[18,"CONTINUE","","It\'s frequently the case that there\'s no value needed …",58,null],[18,"BREAK","","APIs like <code>try_for_each</code> don\'t need values with <code>Break</code>, so …",58,null],[11,"contains","","Returns <code>true</code> if <code>item</code> is contained in the range.",49,[[]]],[11,"is_empty","","Returns <code>true</code> if the range contains no items.",49,[[]]],[11,"contains","","Returns <code>true</code> if <code>item</code> is contained in the range.",50,[[]]],[11,"contains","","Returns <code>true</code> if <code>item</code> is contained in the range.",51,[[]]],[11,"new","","Creates a new inclusive range. Equivalent to writing …",170,[[]]],[11,"start","","Returns the lower bound of the range (inclusive).",170,[[]]],[11,"end","","Returns the upper bound of the range (inclusive).",170,[[]]],[11,"into_inner","","Destructures the <code>RangeInclusive</code> into (lower bound, upper …",170,[[]]],[11,"contains","","Returns <code>true</code> if <code>item</code> is contained in the range.",170,[[]]],[11,"is_empty","","Returns <code>true</code> if the range contains no items.",170,[[]]],[11,"contains","","Returns <code>true</code> if <code>item</code> is contained in the range.",54,[[]]],[11,"cloned","","Map a <code>Bound<&T></code> to a <code>Bound<T></code> by cloning the contents of …",52,[[],["bound",4]]],[11,"assert_len","","Performs bounds-checking of this range.",53,[[],["range",3]]],[11,"contains","","Returns <code>true</code> if <code>item</code> is contained in the range.",53,[[]]],[11,"new","core::array","Creates a new iterator over the given <code>array</code>.",171,[[]]],[11,"as_slice","","Returns an immutable slice of all elements that have not …",171,[[]]],[11,"as_mut_slice","","Returns a mutable slice of all elements that have not …",171,[[]]],[11,"map","core::cell","Makes a new <code>RefMut</code> for a component of the borrowed data, …",176,[[["refmut",3]],[["sized",8],["refmut",3]]]],[11,"map_split","","Splits a <code>RefMut</code> into multiple <code>RefMut</code>s for different …",176,[[["refmut",3]]]],[11,"leak","","Convert into a mutable reference to the underlying data.",176,[[["refmut",3]]]],[11,"unpaired_surrogate","core::char","Returns the unpaired surrogate which caused this error.",180,[[]]],[11,"peek","core::iter","Returns a reference to the next() value without advancing …",201,[[],["option",4]]],[11,"peek_mut","","Returns a mutable reference to the next() value without …",201,[[],["option",4]]],[11,"next_if","","Consume and return the next value of this iterator if a …",201,[[],["option",4]]],[11,"next_if_eq","","Consume and return the next item if it is equal to …",201,[[],["option",4]]],[11,"forward","","Returns the value that would be obtained by taking the <em>…",68,[[]]],[11,"forward_unchecked","","Returns the value that would be obtained by taking the <em>…",68,[[]]],[11,"backward","","Returns the value that would be obtained by taking the <em>…",68,[[]]],[11,"backward_unchecked","","Returns the value that would be obtained by taking the <em>…",68,[[]]],[11,"extend_one","","Extends a collection with exactly one element.",71,[[]]],[11,"extend_reserve","","Reserves capacity in a collection for the given number of …",71,[[]]],[11,"advance_back_by","","Advances the iterator from the back by <code>n</code> elements.",69,[[],["result",4]]],[11,"nth_back","","Returns the <code>n</code>th element from the end of the iterator.",69,[[],["option",4]]],[11,"try_rfold","","This is the reverse version of [<code>Iterator::try_fold()</code>]: it …",69,[[]]],[11,"rfold","","An iterator method that reduces the iterator\'s elements …",69,[[]]],[11,"rfind","","Searches for an element of an iterator from the back that …",69,[[],["option",4]]],[11,"len","","Returns the exact length of the iterator.",70,[[]]],[11,"is_empty","","Returns <code>true</code> if the iterator is empty.",70,[[]]],[11,"size_hint","","Returns the bounds on the remaining length of the …",67,[[]]],[11,"count","","Consumes the iterator, counting the number of iterations …",67,[[]]],[11,"last","","Consumes the iterator, returning the last element.",67,[[],["option",4]]],[11,"advance_by","","Advances the iterator by <code>n</code> elements.",67,[[],["result",4]]],[11,"nth","","Returns the <code>n</code>th element of the iterator.",67,[[],["option",4]]],[11,"step_by","","Creates an iterator starting at the same point, but …",67,[[],["stepby",3]]],[11,"chain","","Takes two iterators and creates a new iterator over both …",67,[[],["chain",3]]],[11,"zip","","\'Zips up\' two iterators into a single iterator of pairs.",67,[[],["zip",3]]],[11,"map","","Takes a closure and creates an iterator which calls that …",67,[[],["map",3]]],[11,"for_each","","Calls a closure on each element of an iterator.",67,[[]]],[11,"filter","","Creates an iterator which uses a closure to determine if …",67,[[],["filter",3]]],[11,"filter_map","","Creates an iterator that both filters and maps.",67,[[],["filtermap",3]]],[11,"enumerate","","Creates an iterator which gives the current iteration …",67,[[],["enumerate",3]]],[11,"peekable","","Creates an iterator which can use <code>peek</code> to look at the …",67,[[],["peekable",3]]],[11,"skip_while","","Creates an iterator that <code>skip</code>s elements based on a …",67,[[],["skipwhile",3]]],[11,"take_while","","Creates an iterator that yields elements based on a …",67,[[],["takewhile",3]]],[11,"map_while","","Creates an iterator that both yields elements based on a …",67,[[],["mapwhile",3]]],[11,"skip","","Creates an iterator that skips the first <code>n</code> elements.",67,[[],["skip",3]]],[11,"take","","Creates an iterator that yields its first <code>n</code> elements.",67,[[],["take",3]]],[11,"scan","","An iterator adaptor similar to <code>fold</code> that holds internal …",67,[[],["scan",3]]],[11,"flat_map","","Creates an iterator that works like map, but flattens …",67,[[],["flatmap",3]]],[11,"flatten","","Creates an iterator that flattens nested structure.",67,[[],["flatten",3]]],[11,"fuse","","Creates an iterator which ends after the first [<code>None</code>].",67,[[],["fuse",3]]],[11,"inspect","","Does something with each element of an iterator, passing …",67,[[],["inspect",3]]],[11,"by_ref","","Borrows an iterator, rather than consuming it.",67,[[]]],[11,"collect","","Transforms an iterator into a collection.",67,[[],["fromiterator",8]]],[11,"partition","","Consumes an iterator, creating two collections from it.",67,[[]]],[11,"partition_in_place","","Reorders the elements of this iterator <em>in-place</em> according …",67,[[]]],[11,"is_partitioned","","Checks if the elements of this iterator are partitioned …",67,[[]]],[11,"try_fold","","An iterator method that applies a function as long as it …",67,[[]]],[11,"try_for_each","","An iterator method that applies a fallible function to …",67,[[]]],[11,"fold","","An iterator method that applies a function, producing a …",67,[[]]],[11,"fold_first","","The same as <code>fold()</code>, but uses the first element in the …",67,[[],["option",4]]],[11,"all","","Tests if every element of the iterator matches a …",67,[[]]],[11,"any","","Tests if any element of the iterator matches a predicate.",67,[[]]],[11,"find","","Searches for an element of an iterator that satisfies a …",67,[[],["option",4]]],[11,"find_map","","Applies function to the elements of iterator and returns …",67,[[],["option",4]]],[11,"try_find","","Applies function to the elements of iterator and returns …",67,[[],[["option",4],["result",4]]]],[11,"position","","Searches for an element in an iterator, returning its …",67,[[],["option",4]]],[11,"rposition","","Searches for an element in an iterator from the right, …",67,[[],["option",4]]],[11,"max","","Returns the maximum element of an iterator.",67,[[],["option",4]]],[11,"min","","Returns the minimum element of an iterator.",67,[[],["option",4]]],[11,"max_by_key","","Returns the element that gives the maximum value from the …",67,[[],["option",4]]],[11,"max_by","","Returns the element that gives the maximum value with …",67,[[],["option",4]]],[11,"min_by_key","","Returns the element that gives the minimum value from the …",67,[[],["option",4]]],[11,"min_by","","Returns the element that gives the minimum value with …",67,[[],["option",4]]],[11,"rev","","Reverses an iterator\'s direction.",67,[[],["rev",3]]],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",67,[[]]],[11,"copied","","Creates an iterator which copies all of its elements.",67,[[],["copied",3]]],[11,"cloned","","Creates an iterator which <code>clone</code>s all of its elements.",67,[[],["cloned",3]]],[11,"cycle","","Repeats an iterator endlessly.",67,[[],["cycle",3]]],[11,"sum","","Sums the elements of an iterator.",67,[[]]],[11,"product","","Iterates over the entire iterator, multiplying all the …",67,[[]]],[11,"cmp","","Lexicographically compares the elements of this [<code>Iterator</code>]…",67,[[],["ordering",4]]],[11,"cmp_by","","Lexicographically compares the elements of this [<code>Iterator</code>]…",67,[[],["ordering",4]]],[11,"partial_cmp","","Lexicographically compares the elements of this [<code>Iterator</code>]…",67,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp_by","","Lexicographically compares the elements of this [<code>Iterator</code>]…",67,[[],[["option",4],["ordering",4]]]],[11,"eq","","Determines if the elements of this [<code>Iterator</code>] are equal …",67,[[]]],[11,"eq_by","","Determines if the elements of this [<code>Iterator</code>] are equal …",67,[[]]],[11,"ne","","Determines if the elements of this [<code>Iterator</code>] are unequal …",67,[[]]],[11,"lt","","Determines if the elements of this [<code>Iterator</code>] are …",67,[[]]],[11,"le","","Determines if the elements of this [<code>Iterator</code>] are …",67,[[]]],[11,"gt","","Determines if the elements of this [<code>Iterator</code>] are …",67,[[]]],[11,"ge","","Determines if the elements of this [<code>Iterator</code>] are …",67,[[]]],[11,"is_sorted","","Checks if the elements of this iterator are sorted.",67,[[]]],[11,"is_sorted_by","","Checks if the elements of this iterator are sorted using …",67,[[]]],[11,"is_sorted_by_key","","Checks if the elements of this iterator are sorted using …",67,[[]]],[11,"field","core::fmt","Adds a new field to the generated struct output.",224,[[["debug",8]]]],[11,"finish_non_exhaustive","","Marks the struct as non-exhaustive, indicating to the …",224,[[],["result",6]]],[11,"finish","","Finishes output and returns any error encountered.",224,[[],["result",6]]],[11,"field","","Adds a new field to the generated tuple struct output.",225,[[["debug",8]]]],[11,"finish","","Finishes output and returns any error encountered.",225,[[],["result",6]]],[11,"entry","","Adds a new entry to the set output.",226,[[["debug",8]]]],[11,"entries","","Adds the contents of an iterator of entries to the set …",226,[[]]],[11,"finish","","Finishes output and returns any error encountered.",226,[[],["result",6]]],[11,"entry","","Adds a new entry to the list output.",227,[[["debug",8]]]],[11,"entries","","Adds the contents of an iterator of entries to the list …",227,[[]]],[11,"finish","","Finishes output and returns any error encountered.",227,[[],["result",6]]],[11,"entry","","Adds a new entry to the map output.",228,[[["debug",8]]]],[11,"key","","Adds the key part of a new entry to the map output.",228,[[["debug",8]]]],[11,"value","","Adds the value part of a new entry to the map output.",228,[[["debug",8]]]],[11,"entries","","Adds the contents of an iterator of entries to the map …",228,[[]]],[11,"finish","","Finishes output and returns any error encountered.",228,[[],["result",6]]],[11,"new","core::hash","Creates a new <code>SipHasher</code> with the two initial keys set to …",230,[[],["siphasher",3]]],[11,"new_with_keys","","Creates a <code>SipHasher</code> that is keyed off the provided keys.",230,[[],["siphasher",3]]],[11,"as_slice","core::slice","Views the underlying data as a subslice of the original …",232,[[]]],[11,"into_slice","","Views the underlying data as a subslice of the original …",233,[[]]],[11,"as_slice","","Views the underlying data as a subslice of the original …",233,[[]]],[11,"remainder","","Returns the remainder of the original slice that is not …",247,[[]]],[11,"into_remainder","","Returns the remainder of the original slice that is not …",248,[[]]],[11,"remainder","","Returns the remainder of the original slice that is not …",250,[[]]],[11,"into_remainder","","Returns the remainder of the original slice that is not …",251,[[]]],[11,"remainder","","Returns the remainder of the original slice that is not …",254,[[]]],[11,"into_remainder","","Returns the remainder of the original slice that is not …",255,[[]]],[11,"valid_up_to","core::str","Returns the index in the given string up to which valid …",256,[[]]],[11,"error_len","","Provides more information about the failure:",256,[[],["option",4]]],[11,"as_str","","Views the underlying data as a subslice of the original …",258,[[]]],[11,"as_str","","Views the underlying data as a subslice of the original …",259,[[]]],[11,"as_str","","Returns remainder of the splitted string",261,[[]]],[11,"as_str","","Returns remainder of the splitted string",262,[[]]],[11,"as_str","","Returns remainder of the splitted string",263,[[]]],[11,"as_str","","Returns remainder of the splitted string",264,[[]]],[11,"as_str","","Returns remainder of the splitted string",265,[[]]],[11,"as_str","","Returns remainder of the splitted string",266,[[]]],[11,"map","core::task","Changes the ready value of this <code>Poll</code> with the closure …",125,[[],["poll",4]]],[11,"is_ready","","Returns <code>true</code> if this is <code>Poll::Ready</code>",125,[[]]],[11,"is_pending","","Returns <code>true</code> if this is <code>Poll::Pending</code>",125,[[]]],[11,"map_ok","","Changes the success value of this <code>Poll</code> with the closure …",125,[[],[["poll",4],["result",4]]]],[11,"map_err","","Changes the error value of this <code>Poll</code> with the closure …",125,[[],[["result",4],["poll",4]]]],[11,"map_ok","","Changes the success value of this <code>Poll</code> with the closure …",125,[[],[["poll",4],["option",4]]]],[11,"map_err","","Changes the error value of this <code>Poll</code> with the closure …",125,[[],[["option",4],["poll",4]]]],[11,"new","","Creates a new <code>RawWaker</code> from the provided <code>data</code> pointer and …",287,[[["rawwakervtable",3]],["rawwaker",3]]],[11,"new","","Creates a new <code>RawWakerVTable</code> from the provided <code>clone</code>, <code>wake</code>…",288,[[]]],[11,"from_waker","","Create a new <code>Context</code> from a <code>&Waker</code>.",289,[[["waker",3]]]],[11,"waker","","Returns a reference to the <code>Waker</code> for the current task.",289,[[],["waker",3]]],[11,"wake","","Wake up the task associated with this <code>Waker</code>.",290,[[]]],[11,"wake_by_ref","","Wake up the task associated with this <code>Waker</code> without …",290,[[]]],[11,"will_wake","","Returns <code>true</code> if this <code>Waker</code> and another <code>Waker</code> have awoken …",290,[[["waker",3]]]],[11,"from_raw","","Creates a new <code>Waker</code> from [<code>RawWaker</code>].",290,[[["rawwaker",3]],["waker",3]]],[11,"alloc_zeroed","core::alloc","Behaves like <code>alloc</code>, but also ensures that the contents …",126,[[["layout",3]]]],[11,"realloc","","Shrink or grow a block of memory to the given <code>new_size</code>. …",126,[[["layout",3]]]],[11,"from_size_align","","Constructs a <code>Layout</code> from a given <code>size</code> and <code>align</code>, or …",291,[[],[["result",4],["layouterror",3]]]],[11,"from_size_align_unchecked","","Creates a layout, bypassing all checks.",291,[[]]],[11,"size","","The minimum size in bytes for a memory block of this …",291,[[]]],[11,"align","","The minimum byte alignment for a memory block of this …",291,[[]]],[11,"new","","Constructs a <code>Layout</code> suitable for holding a value of type <code>T</code>…",291,[[]]],[11,"for_value","","Produces layout describing a record that could be used to …",291,[[]]],[11,"for_value_raw","","Produces layout describing a record that could be used to …",291,[[]]],[11,"dangling","","Creates a <code>NonNull</code> that is dangling, but well-aligned for …",291,[[],["nonnull",3]]],[11,"align_to","","Creates a layout describing the record that can hold a …",291,[[],[["result",4],["layouterror",3]]]],[11,"padding_needed_for","","Returns the amount of padding we must insert after <code>self</code> …",291,[[]]],[11,"pad_to_align","","Creates a layout by rounding the size of this layout up …",291,[[],["layout",3]]],[11,"repeat","","Creates a layout describing the record for <code>n</code> instances of …",291,[[],[["layouterror",3],["result",4]]]],[11,"extend","","Creates a layout describing the record for <code>self</code> followed …",291,[[],[["layouterror",3],["result",4]]]],[11,"repeat_packed","","Creates a layout describing the record for <code>n</code> instances of …",291,[[],[["result",4],["layouterror",3]]]],[11,"extend_packed","","Creates a layout describing the record for <code>self</code> followed …",291,[[],[["result",4],["layouterror",3]]]],[11,"array","","Creates a layout describing the record for a <code>[T; n]</code>.",291,[[],[["result",4],["layouterror",3]]]]],"p":[[3,"Wrapping"],[4,"IntErrorKind"],[4,"FpCategory"],[8,"Borrow"],[8,"BorrowMut"],[8,"Clone"],[8,"PartialEq"],[4,"Ordering"],[3,"Reverse"],[8,"Ord"],[8,"PartialOrd"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"TryInto"],[8,"TryFrom"],[8,"Default"],[8,"DiscriminantKind"],[8,"Add"],[8,"Div"],[8,"Mul"],[8,"Neg"],[8,"Rem"],[8,"Sub"],[8,"AddAssign"],[8,"DivAssign"],[8,"MulAssign"],[8,"RemAssign"],[8,"SubAssign"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Not"],[8,"Shl"],[8,"Shr"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Deref"],[8,"DerefMut"],[8,"Drop"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Index"],[8,"IndexMut"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Bound"],[8,"RangeBounds"],[3,"RangeToInclusive"],[8,"Try"],[8,"Generator"],[4,"GeneratorState"],[4,"ControlFlow"],[8,"Any"],[3,"TypeId"],[8,"FixedSizeArray"],[3,"Cell"],[3,"RefCell"],[3,"Ref"],[3,"UnsafeCell"],[3,"VaListImpl"],[8,"Iterator"],[8,"Step"],[8,"DoubleEndedIterator"],[8,"ExactSizeIterator"],[8,"Extend"],[8,"FromIterator"],[8,"IntoIterator"],[8,"Product"],[8,"Sum"],[8,"SourceIter"],[3,"OnceCell"],[3,"Lazy"],[4,"Option"],[3,"PanicInfo"],[3,"Location"],[3,"Pin"],[3,"TraitObject"],[4,"Result"],[4,"Ordering"],[3,"AtomicBool"],[3,"AtomicPtr"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[4,"Alignment"],[8,"Write"],[3,"Arguments"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[3,"Formatter"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"SliceIndex"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"Utf8Lossy"],[3,"Utf8LossyChunk"],[8,"FromStr"],[3,"Duration"],[8,"Future"],[8,"IntoFuture"],[4,"Poll"],[8,"GlobalAlloc"],[8,"Allocator"],[3,"CpuidResult"],[3,"int8x8x2_t"],[3,"int8x8x3_t"],[3,"int8x8x4_t"],[3,"uint8x8x2_t"],[3,"uint8x8x3_t"],[3,"uint8x8x4_t"],[3,"poly8x8x2_t"],[3,"poly8x8x3_t"],[3,"poly8x8x4_t"],[3,"int8x16x2_t"],[3,"int8x16x3_t"],[3,"int8x16x4_t"],[3,"uint8x16x2_t"],[3,"uint8x16x3_t"],[3,"uint8x16x4_t"],[3,"poly8x16x2_t"],[3,"poly8x16x3_t"],[3,"poly8x16x4_t"],[3,"ParseFloatError"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZeroU8"],[3,"NonZeroU16"],[3,"NonZeroU32"],[3,"NonZeroU64"],[3,"NonZeroU128"],[3,"NonZeroUsize"],[3,"NonZeroI8"],[3,"NonZeroI16"],[3,"NonZeroI32"],[3,"NonZeroI64"],[3,"NonZeroI128"],[3,"NonZeroIsize"],[3,"ManuallyDrop"],[19,"MaybeUninit"],[3,"Discriminant"],[3,"NonNull"],[4,"Infallible"],[3,"PhantomData"],[3,"PhantomPinned"],[3,"RangeFull"],[3,"RangeInclusive"],[3,"IntoIter"],[3,"TryFromSliceError"],[3,"EscapeDefault"],[3,"BorrowError"],[3,"BorrowMutError"],[3,"RefMut"],[3,"ParseCharError"],[3,"CharTryFromError"],[3,"DecodeUtf16"],[3,"DecodeUtf16Error"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EscapeDebug"],[3,"ToLowercase"],[3,"ToUppercase"],[4,"c_void"],[3,"VaList"],[3,"Chain"],[3,"Cloned"],[3,"Copied"],[3,"Cycle"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[3,"Flatten"],[3,"Fuse"],[3,"Inspect"],[3,"Map"],[3,"MapWhile"],[3,"Peekable"],[3,"Rev"],[3,"Scan"],[3,"Skip"],[3,"SkipWhile"],[3,"StepBy"],[3,"Take"],[3,"TakeWhile"],[3,"Zip"],[3,"Empty"],[3,"FromFn"],[3,"Once"],[3,"OnceWith"],[3,"Repeat"],[3,"RepeatWith"],[3,"Successors"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"NoneError"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitInclusive"],[3,"SplitMut"],[3,"SplitInclusiveMut"],[3,"RSplit"],[3,"RSplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"ChunksExact"],[3,"ChunksExactMut"],[3,"ArrayWindows"],[3,"ArrayChunks"],[3,"ArrayChunksMut"],[3,"RChunks"],[3,"RChunksMut"],[3,"RChunksExact"],[3,"RChunksExactMut"],[3,"Utf8Error"],[3,"ParseBoolError"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"SplitWhitespace"],[3,"SplitAsciiWhitespace"],[3,"EncodeUtf16"],[3,"EscapeDebug"],[3,"EscapeDefault"],[3,"EscapeUnicode"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"Utf8LossyChunksIter"],[3,"Pending"],[3,"PollFn"],[3,"Ready"],[3,"RawWaker"],[3,"RawWakerVTable"],[3,"Context"],[3,"Waker"],[3,"Layout"],[3,"LayoutError"],[3,"AllocError"],[3,"SY"],[3,"APSR"],[3,"__m128i"],[3,"__m128"],[3,"__m128d"],[3,"__m256i"],[3,"__m256"],[3,"__m256d"],[3,"__m512i"],[3,"__m512"],[3,"__m512d"],[3,"float64x1_t"],[3,"float64x2_t"],[3,"int8x8_t"],[3,"uint8x8_t"],[3,"poly8x8_t"],[3,"int16x4_t"],[3,"uint16x4_t"],[3,"poly16x4_t"],[3,"int32x2_t"],[3,"uint32x2_t"],[3,"float32x2_t"],[3,"int64x1_t"],[3,"uint64x1_t"],[3,"poly64x1_t"],[3,"int8x16_t"],[3,"uint8x16_t"],[3,"poly8x16_t"],[3,"int16x8_t"],[3,"uint16x8_t"],[3,"poly16x8_t"],[3,"int32x4_t"],[3,"uint32x4_t"],[3,"float32x4_t"],[3,"int64x2_t"],[3,"uint64x2_t"],[3,"poly64x2_t"],[3,"v128"],[3,"vector_signed_long"],[3,"vector_unsigned_long"],[3,"vector_bool_long"],[3,"vector_double"]],"a":{"!=":[407,410],"%":[491,503],"%=":[503],"&":[507],"&*":[535],"&=":[525],"*":[485,501,535,538],"*=":[501],"+":[479,497],"+=":[497],"-":[488,494,505],"-=":[505],"..":[554,557,559,560],"..=":[571,572],"/":[482,499],"/=":[499],"<":[426,431],"<<":[519],"<<=":[531],"<=":[426,431],"==":[407,410],">":[426,431],">=":[426,431],">>":[522],">>=":[533],"?":[574,9797],"[":[549,552],"[]":[549,552],"]":[549,552],"^":[513],"^=":[529],"compare_and_swap":[989,990],"inject":[720,14388],"memcpy":[348,377],"memmove":[349,378],"popcnt":[14059,14073,14087,14101,14115,14129,14143,14157,14171,14185,14199,14213],"popcount":[14059,14073,14087,14101,14115,14129,14143,14157,14171,14185,14199,14213],"reduce":[720,14388],"{:?}":[1249],"{}":[1251],"|":[510],"|=":[527]}},\
"proc_macro":{"doc":"A support library for macro authors when defining new …","i":[[0,"token_stream","proc_macro","Public implementation details for the <code>TokenStream</code> type, …",null,null],[3,"IntoIter","proc_macro::token_stream","An iterator over <code>TokenStream</code>\'s <code>TokenTree</code>s. The iteration …",null,null],[0,"tracked_env","proc_macro","Tracked access to environment variables.",null,null],[5,"var","proc_macro::tracked_env","Retrieve an environment variable and add it to build …",null,[[["asref",8],["asref",8],["osstr",3]],[["result",4],["string",3],["varerror",4]]]],[3,"Diagnostic","proc_macro","A structure representing a diagnostic message and …",null,null],[4,"Level","","An enum representing a diagnostic level.",null,null],[13,"Error","","An error.",0,null],[13,"Warning","","A warning.",0,null],[13,"Note","","A note.",0,null],[13,"Help","","A help message.",0,null],[8,"MultiSpan","","Trait implemented by types that can be converted into a …",null,null],[10,"into_spans","","Converts <code>self</code> into a <code>Vec<Span></code>.",1,[[],[["span",3],["vec",3]]]],[5,"is_available","","Determines whether proc_macro has been made accessible to …",null,[[]]],[3,"TokenStream","","The main type provided by this crate, representing an …",null,null],[3,"LexError","","Error returned from <code>TokenStream::from_str</code>.",null,null],[11,"new","","Returns an empty <code>TokenStream</code> containing no token trees.",2,[[],["tokenstream",3]]],[11,"is_empty","","Checks if this <code>TokenStream</code> is empty.",2,[[]]],[5,"quote","","Quote a <code>TokenStream</code> into a <code>TokenStream</code>. This is the …",null,[[["tokenstream",3]],["tokenstream",3]]],[5,"quote_span","","Quote a <code>Span</code> into a <code>TokenStream</code>. This is needed to …",null,[[["span",3]],["tokenstream",3]]],[3,"Span","","A region of source code, along with macro expansion …",null,null],[11,"def_site","","A span that resolves at the macro definition site.",3,[[],["span",3]]],[11,"call_site","","The span of the invocation of the current procedural …",3,[[],["span",3]]],[11,"mixed_site","","A span that represents <code>macro_rules</code> hygiene, and sometimes …",3,[[],["span",3]]],[11,"source_file","","The original source file into which this span points.",3,[[],["sourcefile",3]]],[11,"parent","","The <code>Span</code> for the tokens in the previous macro expansion …",3,[[],[["option",4],["span",3]]]],[11,"source","","The span for the origin source code that <code>self</code> was …",3,[[],["span",3]]],[11,"start","","Gets the starting line/column in the source file for this …",3,[[],["linecolumn",3]]],[11,"end","","Gets the ending line/column in the source file for this …",3,[[],["linecolumn",3]]],[11,"join","","Creates a new span encompassing <code>self</code> and <code>other</code>.",3,[[["span",3]],[["option",4],["span",3]]]],[11,"resolved_at","","Creates a new span with the same line/column information …",3,[[["span",3]],["span",3]]],[11,"located_at","","Creates a new span with the same name resolution behavior …",3,[[["span",3]],["span",3]]],[11,"eq","","Compares to spans to see if they\'re equal.",3,[[["span",3]]]],[11,"source_text","","Returns the source text behind a span. This preserves the …",3,[[],[["option",4],["string",3]]]],[11,"error","","Creates a new <code>Diagnostic</code> with the given <code>message</code> at the …",3,[[["into",8],["string",3]],["diagnostic",3]]],[11,"warning","","Creates a new <code>Diagnostic</code> with the given <code>message</code> at the …",3,[[["into",8],["string",3]],["diagnostic",3]]],[11,"note","","Creates a new <code>Diagnostic</code> with the given <code>message</code> at the …",3,[[["into",8],["string",3]],["diagnostic",3]]],[11,"help","","Creates a new <code>Diagnostic</code> with the given <code>message</code> at the …",3,[[["into",8],["string",3]],["diagnostic",3]]],[3,"LineColumn","","A line-column pair representing the start or end of a <code>Span</code>…",null,null],[12,"line","","The 1-indexed line in the source file on which the span …",4,null],[12,"column","","The 0-indexed column (in UTF-8 characters) in the source …",4,null],[3,"SourceFile","","The source file of a given <code>Span</code>.",null,null],[11,"path","","Gets the path to this source file.",5,[[],["pathbuf",3]]],[11,"is_real","","Returns <code>true</code> if this source file is a real source file, …",5,[[]]],[4,"TokenTree","","A single token or a delimited sequence of token trees …",null,null],[13,"Group","","A token stream surrounded by bracket delimiters.",6,null],[13,"Ident","","An identifier.",6,null],[13,"Punct","","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).",6,null],[13,"Literal","","A literal character (<code>\'a\'</code>), string (<code>\\\"hello\\\"</code>), number (<code>2.3</code>…",6,null],[11,"span","","Returns the span of this tree, delegating to the <code>span</code> …",6,[[],["span",3]]],[11,"set_span","","Configures the span for <em>only this token</em>.",6,[[["span",3]]]],[3,"Group","","A delimited token stream.",null,null],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",null,null],[13,"Parenthesis","","<code>( ... )</code>",7,null],[13,"Brace","","<code>{ ... }</code>",7,null],[13,"Bracket","","<code>[ ... ]</code>",7,null],[13,"None","","<code>Ø ... Ø</code> An implicit delimiter, that may, for example, …",7,null],[11,"new","","Creates a new <code>Group</code> with the given delimiter and token …",8,[[["tokenstream",3],["delimiter",4]],["group",3]]],[11,"delimiter","","Returns the delimiter of this <code>Group</code>",8,[[],["delimiter",4]]],[11,"stream","","Returns the <code>TokenStream</code> of tokens that are delimited in …",8,[[],["tokenstream",3]]],[11,"span","","Returns the span for the delimiters of this token stream, …",8,[[],["span",3]]],[11,"span_open","","Returns the span pointing to the opening delimiter of …",8,[[],["span",3]]],[11,"span_close","","Returns the span pointing to the closing delimiter of …",8,[[],["span",3]]],[11,"set_span","","Configures the span for this <code>Group</code>\'s delimiters, but not …",8,[[["span",3]]]],[3,"Punct","","An <code>Punct</code> is an single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>…",null,null],[4,"Spacing","","Whether an <code>Punct</code> is followed immediately by another <code>Punct</code> …",null,null],[13,"Alone","","e.g., <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.",9,null],[13,"Joint","","e.g., <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>\'#</code>. Additionally, single quote <code>\'</code>…",9,null],[11,"new","","Creates a new <code>Punct</code> from the given character and spacing. …",10,[[["spacing",4]],["punct",3]]],[11,"as_char","","Returns the value of this punctuation character as <code>char</code>.",10,[[]]],[11,"spacing","","Returns the spacing of this punctuation character, …",10,[[],["spacing",4]]],[11,"span","","Returns the span for this punctuation character.",10,[[],["span",3]]],[11,"set_span","","Configure the span for this punctuation character.",10,[[["span",3]]]],[3,"Ident","","An identifier (<code>ident</code>).",null,null],[11,"new","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …",11,[[["span",3]],["ident",3]]],[11,"new_raw","","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…",11,[[["span",3]],["ident",3]]],[11,"span","","Returns the span of this <code>Ident</code>, encompassing the entire …",11,[[],["span",3]]],[11,"set_span","","Configures the span of this <code>Ident</code>, possibly changing its …",11,[[["span",3]]]],[3,"Literal","","A literal string (<code>\\\"hello\\\"</code>), byte string (<code>b\\\"hello\\\"</code>), …",null,null],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified …",12,[[],["literal",3]]],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified …",12,[[],["literal",3]]],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified …",12,[[],["literal",3]]],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified …",12,[[],["literal",3]]],[11,"u128_suffixed","","Creates a new suffixed integer literal with the specified …",12,[[],["literal",3]]],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified …",12,[[],["literal",3]]],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified …",12,[[],["literal",3]]],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified …",12,[[],["literal",3]]],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified …",12,[[],["literal",3]]],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified …",12,[[],["literal",3]]],[11,"i128_suffixed","","Creates a new suffixed integer literal with the specified …",12,[[],["literal",3]]],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified …",12,[[],["literal",3]]],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the …",12,[[],["literal",3]]],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the …",12,[[],["literal",3]]],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the …",12,[[],["literal",3]]],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the …",12,[[],["literal",3]]],[11,"u128_unsuffixed","","Creates a new unsuffixed integer literal with the …",12,[[],["literal",3]]],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the …",12,[[],["literal",3]]],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the …",12,[[],["literal",3]]],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the …",12,[[],["literal",3]]],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the …",12,[[],["literal",3]]],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the …",12,[[],["literal",3]]],[11,"i128_unsuffixed","","Creates a new unsuffixed integer literal with the …",12,[[],["literal",3]]],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the …",12,[[],["literal",3]]],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",12,[[],["literal",3]]],[11,"f32_suffixed","","Creates a new suffixed floating-point literal.",12,[[],["literal",3]]],[11,"f64_unsuffixed","","Creates a new unsuffixed floating-point literal.",12,[[],["literal",3]]],[11,"f64_suffixed","","Creates a new suffixed floating-point literal.",12,[[],["literal",3]]],[11,"string","","String literal.",12,[[],["literal",3]]],[11,"character","","Character literal.",12,[[],["literal",3]]],[11,"byte_string","","Byte string literal.",12,[[],["literal",3]]],[11,"span","","Returns the span encompassing this literal.",12,[[],["span",3]]],[11,"set_span","","Configures the span associated for this literal.",12,[[["span",3]]]],[11,"subspan","","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …",12,[[["rangebounds",8]],[["option",4],["span",3]]]],[14,"quote","","<code>quote!(..)</code> accepts arbitrary tokens and expands into a …",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","proc_macro::token_stream","",14,[[]]],[11,"into","","",14,[[]]],[11,"into_iter","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","proc_macro","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_string","","",15,[[],["string",3]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"into_spans","","",3,[[],[["span",3],["vec",3]]]],[11,"from","","",2,[[["tokentree",4]],["tokenstream",3]]],[11,"from","","",6,[[["group",3]],["tokentree",4]]],[11,"from","","",6,[[["ident",3]],["tokentree",4]]],[11,"from","","",6,[[["punct",3]],["tokentree",4]]],[11,"from","","",6,[[["literal",3]],["tokentree",4]]],[11,"extend","","",2,[[["intoiterator",8]]]],[11,"extend","","",2,[[["intoiterator",8]]]],[11,"into_iter","","",2,[[],["intoiter",3]]],[11,"next","proc_macro::token_stream","",14,[[],[["tokentree",4],["option",4]]]],[11,"clone","proc_macro","",0,[[],["level",4]]],[11,"clone","","",13,[[],["diagnostic",3]]],[11,"clone","","",2,[[],["tokenstream",3]]],[11,"clone","proc_macro::token_stream","",14,[[],["intoiter",3]]],[11,"clone","proc_macro","",3,[[],["span",3]]],[11,"clone","","",4,[[],["linecolumn",3]]],[11,"clone","","",5,[[],["sourcefile",3]]],[11,"clone","","",6,[[],["tokentree",4]]],[11,"clone","","",8,[[],["group",3]]],[11,"clone","","",7,[[],["delimiter",4]]],[11,"clone","","",10,[[],["punct",3]]],[11,"clone","","",9,[[],["spacing",4]]],[11,"clone","","",11,[[],["ident",3]]],[11,"clone","","",12,[[],["literal",3]]],[11,"default","","",2,[[]]],[11,"cmp","","",4,[[],["ordering",4]]],[11,"eq","","",4,[[["linecolumn",3]]]],[11,"ne","","",4,[[["linecolumn",3]]]],[11,"eq","","",5,[[]]],[11,"eq","","",7,[[["delimiter",4]]]],[11,"eq","","",9,[[["spacing",4]]]],[11,"eq","","",10,[[]]],[11,"partial_cmp","","",4,[[],[["option",4],["ordering",4]]]],[11,"to_string","","",2,[[],["string",3]]],[11,"to_string","","",6,[[],["string",3]]],[11,"to_string","","",8,[[],["string",3]]],[11,"to_string","","",10,[[],["string",3]]],[11,"to_string","","",11,[[],["string",3]]],[11,"to_string","","",12,[[],["string",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"from_str","","",2,[[],[["tokenstream",3],["lexerror",3],["result",4]]]],[11,"from_iter","","",2,[[["intoiterator",8]]]],[11,"from_iter","","",2,[[["intoiterator",8]]]],[11,"new","","Creates a new diagnostic with the given <code>level</code> and <code>message</code>.",13,[[["into",8],["level",4],["string",3]],["diagnostic",3]]],[11,"spanned","","Creates a new diagnostic with the given <code>level</code> and <code>message</code> …",13,[[["level",4]],["diagnostic",3]]],[11,"span_error","","Adds a new child diagnostic message to <code>self</code> with the level…",13,[[],["diagnostic",3]]],[11,"error","","Adds a new child diagnostic message to <code>self</code> with the level…",13,[[["into",8],["string",3]],["diagnostic",3]]],[11,"span_warning","","Adds a new child diagnostic message to <code>self</code> with the level…",13,[[],["diagnostic",3]]],[11,"warning","","Adds a new child diagnostic message to <code>self</code> with the level…",13,[[["into",8],["string",3]],["diagnostic",3]]],[11,"span_note","","Adds a new child diagnostic message to <code>self</code> with the level…",13,[[],["diagnostic",3]]],[11,"note","","Adds a new child diagnostic message to <code>self</code> with the level…",13,[[["into",8],["string",3]],["diagnostic",3]]],[11,"span_help","","Adds a new child diagnostic message to <code>self</code> with the level…",13,[[],["diagnostic",3]]],[11,"help","","Adds a new child diagnostic message to <code>self</code> with the level…",13,[[["into",8],["string",3]],["diagnostic",3]]],[11,"level","","Returns the diagnostic <code>level</code> for <code>self</code>.",13,[[],["level",4]]],[11,"set_level","","Sets the level in <code>self</code> to <code>level</code>.",13,[[["level",4]]]],[11,"message","","Returns the message in <code>self</code>.",13,[[]]],[11,"set_message","","Sets the message in <code>self</code> to <code>message</code>.",13,[[["into",8],["string",3]]]],[11,"spans","","Returns the <code>Span</code>s in <code>self</code>.",13,[[]]],[11,"set_spans","","Sets the <code>Span</code>s in <code>self</code> to <code>spans</code>.",13,[[["multispan",8]]]],[11,"children","","Returns an iterator over the children diagnostics of <code>self</code>.",13,[[],["children",3]]],[11,"emit","","Emit the diagnostic.",13,[[]]]],"p":[[4,"Level"],[8,"MultiSpan"],[3,"TokenStream"],[3,"Span"],[3,"LineColumn"],[3,"SourceFile"],[4,"TokenTree"],[4,"Delimiter"],[3,"Group"],[4,"Spacing"],[3,"Punct"],[3,"Ident"],[3,"Literal"],[3,"Diagnostic"],[3,"IntoIter"],[3,"LexError"]]},\
"std":{"doc":"The Rust Standard LibraryThe Rust Standard Library is the …","i":[[0,"borrow","std","A module for working with borrowed data.",null,null],[8,"ToOwned","std::borrow","A generalization of <code>Clone</code> to borrowed data.",null,null],[16,"Owned","","The resulting type after obtaining ownership.",0,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",0,[[]]],[11,"clone_into","","Uses borrowed data to replace owned data, usually by …",0,[[]]],[4,"Cow","","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",1,null],[13,"Owned","","Owned data.",1,null],[8,"Borrow","","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",2,[[]]],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",3,[[]]],[0,"boxed","std","A pointer type for heap allocation.",null,null],[3,"Box","std::boxed","A pointer type for heap allocation.",null,null],[0,"fmt","std","Utilities for formatting and printing <code>String</code>s.",null,null],[5,"format","std::fmt","The <code>format</code> function takes an [<code>Arguments</code>] struct and …",null,[[["arguments",3]],["string",3]]],[4,"Alignment","","Possible alignments returned by <code>Formatter::align</code>",null,null],[13,"Left","","Indication that contents should be left-aligned.",4,null],[13,"Right","","Indication that contents should be right-aligned.",4,null],[13,"Center","","Indication that contents should be center-aligned.",4,null],[3,"Error","","The error type which is returned from formatting a …",null,null],[5,"write","","The <code>write</code> function takes an output stream, and an …",null,[[["arguments",3],["write",8]],[["result",4],["error",3]]]],[3,"Arguments","","This structure represents a safely precompiled version of …",null,null],[8,"Binary","","<code>b</code> formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",5,[[["formatter",3]],[["result",4],["error",3]]]],[8,"Octal","","<code>o</code> formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",6,[[["formatter",3]],[["result",4],["error",3]]]],[8,"Debug","","<code>?</code> formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",7,[[["formatter",3]],[["result",4],["error",3]]]],[14,"Debug","","Derive macro generating an impl of the trait <code>Debug</code>.",null,null],[8,"Display","","Format trait for an empty format, <code>{}</code>.",null,null],[10,"fmt","","Formats the value using the given formatter.",8,[[["formatter",3]],[["result",4],["error",3]]]],[3,"DebugList","","A struct to help with <code>fmt::Debug</code> implementations.",null,null],[3,"DebugMap","","A struct to help with <code>fmt::Debug</code> implementations.",null,null],[3,"DebugSet","","A struct to help with <code>fmt::Debug</code> implementations.",null,null],[3,"DebugStruct","","A struct to help with <code>fmt::Debug</code> implementations.",null,null],[3,"DebugTuple","","A struct to help with <code>fmt::Debug</code> implementations.",null,null],[3,"Formatter","","Configuration for formatting.",null,null],[6,"Result","","The type returned by formatter methods.",null,null],[8,"Write","","A trait for writing or formatting into Unicode-accepting …",null,null],[10,"write_str","","Writes a string slice into this writer, returning whether …",9,[[],[["result",4],["error",3]]]],[11,"write_char","","Writes a [<code>char</code>] into this writer, returning whether the …",9,[[],[["result",4],["error",3]]]],[11,"write_fmt","","Glue for usage of the [<code>write!</code>] macro with implementors of …",9,[[["arguments",3]],[["result",4],["error",3]]]],[8,"LowerExp","","<code>e</code> formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",10,[[["formatter",3]],[["result",4],["error",3]]]],[8,"UpperExp","","<code>E</code> formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",11,[[["formatter",3]],[["result",4],["error",3]]]],[8,"LowerHex","","<code>x</code> formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",12,[[["formatter",3]],[["result",4],["error",3]]]],[8,"Pointer","","<code>p</code> formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",13,[[["formatter",3]],[["result",4],["error",3]]]],[8,"UpperHex","","<code>X</code> formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",14,[[["formatter",3]],[["result",4],["error",3]]]],[14,"format","std","Creates a <code>String</code> using interpolation of runtime …",null,null],[0,"rc","","Single-threaded reference-counting pointers. \'Rc\' stands …",null,null],[3,"Rc","std::rc","A single-threaded reference-counting pointer. \'Rc\' stands …",null,null],[3,"Weak","","<code>Weak</code> is a version of [<code>Rc</code>] that holds a non-owning …",null,null],[0,"slice","std","A dynamically-sized view into a contiguous sequence, <code>[T]</code>.",null,null],[8,"Concat","std::slice","Helper trait for <code>[T]::concat</code>.",null,null],[16,"Output","","The resulting type after concatenation",15,null],[10,"concat","","Implementation of <code>[T]::concat</code>",15,[[]]],[8,"Join","","Helper trait for <code>[T]::join</code>",null,null],[16,"Output","","The resulting type after concatenation",16,null],[10,"join","","Implementation of <code>[T]::join</code>",16,[[]]],[3,"ArrayChunks","","An iterator over a slice in (non-overlapping) chunks (<code>N</code> …",null,null],[3,"ArrayChunksMut","","An iterator over a slice in (non-overlapping) mutable …",null,null],[3,"ArrayWindows","","A windowed iterator over a slice in overlapping chunks (<code>N</code> …",null,null],[8,"SliceIndex","","A helper trait used for indexing operations.",null,null],[16,"Output","","The output type returned by methods.",17,null],[10,"get","","Returns a shared reference to the output at this …",17,[[],["option",4]]],[10,"get_mut","","Returns a mutable reference to the output at this …",17,[[],["option",4]]],[10,"get_unchecked","","Returns a shared reference to the output at this …",17,[[]]],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this …",17,[[]]],[10,"index","","Returns a shared reference to the output at this …",17,[[]]],[10,"index_mut","","Returns a mutable reference to the output at this …",17,[[]]],[5,"from_mut","","Converts a reference to T into a slice of length 1 …",null,[[]]],[5,"from_ref","","Converts a reference to T into a slice of length 1 …",null,[[]]],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,[[]]],[5,"from_raw_parts_mut","","Performs the same functionality as [<code>from_raw_parts</code>], …",null,[[]]],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (…",null,null],[3,"Windows","","An iterator over overlapping subslices of length <code>size</code>.",null,null],[3,"ChunksExact","","An iterator over a slice in (non-overlapping) chunks (…",null,null],[3,"ChunksExactMut","","An iterator over a slice in (non-overlapping) mutable …",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable …",null,null],[3,"Split","","An iterator over subslices separated by elements that …",null,null],[3,"SplitMut","","An iterator over the mutable subslices of the vector …",null,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"RChunks","","An iterator over a slice in (non-overlapping) chunks (…",null,null],[3,"RChunksExact","","An iterator over a slice in (non-overlapping) chunks (…",null,null],[3,"RChunksExactMut","","An iterator over a slice in (non-overlapping) mutable …",null,null],[3,"RChunksMut","","An iterator over a slice in (non-overlapping) mutable …",null,null],[3,"RSplit","","An iterator over subslices separated by elements that …",null,null],[3,"RSplitMut","","An iterator over the subslices of the vector which are …",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that …",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that …",null,null],[3,"SplitN","","An iterator over subslices separated by elements that …",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that …",null,null],[0,"str","std","Unicode string slices.",null,null],[5,"from_boxed_utf8_unchecked","std::str","Converts a boxed slice of bytes to a boxed string slice …",null,[[["box",3],["global",3]],[["box",3],["global",3]]]],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","std::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",18,null],[10,"into_searcher","","Constructs the associated searcher from <code>self</code> and the …",18,[[]]],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the …",18,[[]]],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the …",18,[[]]],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the …",18,[[]]],[11,"strip_prefix_of","","Removes the pattern from the front of haystack, if it …",18,[[],["option",4]]],[11,"strip_suffix_of","","Removes the pattern from the back of haystack, if it …",18,[[],["option",4]]],[4,"SearchStep","","Result of calling [<code>Searcher::next()</code>] or […",null,null],[13,"Match","","Expresses that a match of the pattern has been found at …",19,null],[13,"Reject","","Expresses that <code>haystack[a..b]</code> has been rejected as a …",19,null],[13,"Done","","Expresses that every byte of the haystack has been …",19,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlying string to be searched in",20,[[]]],[10,"next","","Performs the next search step starting from the front.",20,[[],["searchstep",4]]],[11,"next_match","","Finds the next [<code>Match</code>][SearchStep::Match] result. See […",20,[[],["option",4]]],[11,"next_reject","","Finds the next [<code>Reject</code>][SearchStep::Reject] result. See […",20,[[],["option",4]]],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",21,[[],["searchstep",4]]],[11,"next_match_back","","Finds the next [<code>Match</code>][SearchStep::Match] result. See […",21,[[],["option",4]]],[11,"next_reject_back","","Finds the next [<code>Reject</code>][SearchStep::Reject] result. See […",21,[[],["option",4]]],[8,"DoubleEndedSearcher","","A marker trait to express that a [<code>ReverseSearcher</code>] can be …",null,null],[3,"CharSearcher","","Associated type for <code><char as Pattern<\'a>>::Searcher</code>.",null,null],[3,"CharSliceSearcher","","Associated type for <code><&[char] as Pattern<\'a>>::Searcher</code>.",null,null],[3,"CharPredicateSearcher","","Associated type for <code><F as Pattern<\'a>>::Searcher</code>.",null,null],[3,"StrSearcher","","Associated type for <code><&str as Pattern<\'a>>::Searcher</code>.",null,null],[3,"EncodeUtf16","std::str","An iterator of [<code>u16</code>] over the string encoded as UTF-16.",null,null],[3,"SplitAsciiWhitespace","","An iterator over the non-ASCII-whitespace substrings of a …",null,null],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a …",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,[[],[["utf8error",3],["result",4]]]],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string …",null,[[],[["utf8error",3],["result",4]]]],[3,"Bytes","","An iterator over the bytes of a string slice.",null,null],[3,"CharIndices","","An iterator over the <code>char</code>s of a string slice, and their …",null,null],[3,"Chars","","An iterator over the <code>char</code>s of a string slice.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without …",null,[[]]],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without …",null,[[]]],[3,"ParseBoolError","","An error returned when parsing a <code>bool</code> using <code>from_str</code> fails",null,null],[3,"EscapeDebug","","The return type of [<code>str::escape_debug</code>].",null,null],[3,"EscapeDefault","","The return type of [<code>str::escape_default</code>].",null,null],[3,"EscapeUnicode","","The return type of [<code>str::escape_unicode</code>].",null,null],[8,"FromStr","","Parse a value from a string",null,null],[16,"Err","","The associated error which can be returned from parsing.",22,null],[10,"from_str","","Parses a string <code>s</code> to return a value of this type.",22,[[],["result",4]]],[3,"Utf8Error","","Errors which can occur when attempting to interpret a …",null,null],[3,"Lines","","An iterator over the lines of a string, as string slices.",null,null],[3,"LinesAny","","Created with the method <code>lines_any</code>.",null,null],[3,"MatchIndices","","Created with the method <code>match_indices</code>.",null,null],[3,"RMatchIndices","","Created with the method <code>rmatch_indices</code>.",null,null],[3,"Matches","","Created with the method <code>matches</code>.",null,null],[3,"RMatches","","Created with the method <code>rmatches</code>.",null,null],[3,"RSplit","","Created with the method <code>rsplit</code>.",null,null],[3,"Split","","Created with the method <code>split</code>.",null,null],[3,"RSplitN","","Created with the method <code>rsplitn</code>.",null,null],[3,"SplitN","","Created with the method <code>splitn</code>.",null,null],[3,"RSplitTerminator","","Created with the method <code>rsplit_terminator</code>.",null,null],[3,"SplitTerminator","","Created with the method <code>split_terminator</code>.",null,null],[0,"string","std","A UTF-8–encoded, growable string.",null,null],[3,"String","std::string","A UTF-8–encoded, growable string.",null,null],[3,"FromUtf8Error","","A possible error value when converting a <code>String</code> from a …",null,null],[3,"FromUtf16Error","","A possible error value when converting a <code>String</code> from a …",null,null],[6,"ParseError","","A type alias for <code>Infallible</code>.",null,null],[8,"ToString","","A trait for converting a value to a <code>String</code>.",null,null],[10,"to_string","","Converts the given value to a <code>String</code>.",23,[[],["string",3]]],[3,"Drain","","A draining iterator for <code>String</code>.",null,null],[0,"vec","std","A contiguous growable array type with heap-allocated …",null,null],[3,"Vec","std::vec","A contiguous growable array type, written <code>Vec<T></code> but …",null,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[3,"Drain","","A draining iterator for <code>Vec<T></code>.",null,null],[3,"Splice","","A splicing iterator for <code>Vec</code>.",null,null],[3,"DrainFilter","","An iterator which uses a closure to determine if an …",null,null],[14,"vec","std","Creates a <code>Vec</code> containing the arguments.",null,null],[0,"any","","This module implements the <code>Any</code> trait, which enables …",null,null],[8,"Any","std::any","A trait to emulate dynamic typing.",null,null],[10,"type_id","","Gets the <code>TypeId</code> of <code>self</code>.",24,[[],["typeid",3]]],[3,"TypeId","","A <code>TypeId</code> represents a globally unique identifier for a …",null,null],[5,"type_name","","Returns the name of a type as a string slice.",null,[[]]],[5,"type_name_of_val","","Returns the name of the type of the pointed-to value as a …",null,[[]]],[0,"array","std","Implementations of things like <code>Eq</code> for fixed-length arrays …",null,null],[5,"from_ref","std::array","Converts a reference to <code>T</code> into a reference to an array of …",null,[[]]],[5,"from_mut","","Converts a mutable reference to <code>T</code> into a mutable …",null,[[]]],[8,"FixedSizeArray","","Utility trait implemented only on arrays of fixed size",null,null],[10,"as_slice","","Converts the array to immutable slice",25,[[]]],[10,"as_mut_slice","","Converts the array to mutable slice",25,[[]]],[3,"TryFromSliceError","","The error type returned when a conversion from a slice to …",null,null],[3,"IntoIter","","A by-value array iterator.",null,null],[0,"cell","std","Shareable mutable containers.",null,null],[3,"Cell","std::cell","A mutable memory location.",null,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow …",null,null],[3,"BorrowError","","An error returned by [<code>RefCell::try_borrow</code>].",null,null],[3,"BorrowMutError","","An error returned by [<code>RefCell::try_borrow_mut</code>].",null,null],[3,"Ref","","Wraps a borrowed reference to a value in a <code>RefCell</code> box. A …",null,null],[3,"RefMut","","A wrapper type for a mutably borrowed value from a …",null,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[0,"char","std","A character type.",null,null],[17,"MAX","std::char","The highest valid code point a <code>char</code> can have.",null,null],[17,"REPLACEMENT_CHARACTER","","<code>U+FFFD REPLACEMENT CHARACTER</code> (�) is used in Unicode to …",null,null],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode …",null,null],[3,"EscapeDefault","","An iterator that yields the literal escape code of a <code>char</code>.",null,null],[3,"EscapeDebug","","An iterator that yields the literal escape code of a <code>char</code>.",null,null],[3,"ToLowercase","","Returns an iterator that yields the lowercase equivalent …",null,null],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent …",null,null],[5,"from_u32_unchecked","","Converts a <code>u32</code> to a <code>char</code>, ignoring validity.",null,[[]]],[3,"CharTryFromError","","The error type returned when a conversion from u32 to …",null,null],[3,"ParseCharError","","An error which can be returned when parsing a char.",null,null],[5,"from_digit","","Converts a digit in the given radix to a <code>char</code>.",null,[[],["option",4]]],[5,"from_u32","","Converts a <code>u32</code> to a <code>char</code>.",null,[[],["option",4]]],[5,"decode_utf16","","Creates an iterator over the UTF-16 encoded code points …",null,[[],["decodeutf16",3]]],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from …",null,null],[3,"DecodeUtf16Error","","An error that can be returned when decoding UTF-16 code …",null,null],[17,"UNICODE_VERSION","","The version of Unicode that the Unicode parts of <code>char</code> and …",null,null],[0,"clone","std","The <code>Clone</code> trait for types that cannot be \'implicitly …",null,null],[8,"Clone","std::clone","A common trait for the ability to explicitly duplicate an …",null,null],[10,"clone","","Returns a copy of the value.",26,[[]]],[11,"clone_from","","Performs copy-assignment from <code>source</code>.",26,[[]]],[14,"Clone","","Derive macro generating an impl of the trait <code>Clone</code>.",null,null],[0,"cmp","std","Functionality for ordering and comparison.",null,null],[8,"PartialEq","std::cmp","Trait for equality comparisons which are partial …",null,null],[10,"eq","","This method tests for <code>self</code> and <code>other</code> values to be equal, …",27,[[]]],[11,"ne","","This method tests for <code>!=</code>.",27,[[]]],[8,"Eq","","Trait for equality comparisons which are equivalence …",null,null],[4,"Ordering","","An <code>Ordering</code> is the result of a comparison between two …",null,null],[13,"Less","","An ordering where a compared value is less than another.",28,null],[13,"Equal","","An ordering where a compared value is equal to another.",28,null],[13,"Greater","","An ordering where a compared value is greater than …",28,null],[3,"Reverse","","A helper struct for reverse ordering.",null,null],[12,"0","","",29,null],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an [<code>Ordering</code>] between <code>self</code> and <code>other</code>.",30,[[],["ordering",4]]],[11,"max","","Compares and returns the maximum of two values.",30,[[]]],[11,"min","","Compares and returns the minimum of two values.",30,[[]]],[11,"clamp","","Restrict a value to a certain interval.",30,[[]]],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between <code>self</code> and <code>other</code> …",31,[[],[["ordering",4],["option",4]]]],[11,"lt","","This method tests less than (for <code>self</code> and <code>other</code>) and is …",31,[[]]],[11,"le","","This method tests less than or equal to (for <code>self</code> and …",31,[[]]],[11,"gt","","This method tests greater than (for <code>self</code> and <code>other</code>) and …",31,[[]]],[11,"ge","","This method tests greater than or equal to (for <code>self</code> and …",31,[[]]],[5,"min","","Compares and returns the minimum of two values.",null,[[]]],[5,"min_by","","Returns the minimum of two values with respect to the …",null,[[]]],[5,"min_by_key","","Returns the element that gives the minimum value from the …",null,[[]]],[5,"max","","Compares and returns the maximum of two values.",null,[[]]],[5,"max_by","","Returns the maximum of two values with respect to the …",null,[[]]],[5,"max_by_key","","Returns the element that gives the maximum value from the …",null,[[]]],[14,"PartialEq","","Derive macro generating an impl of the trait <code>PartialEq</code>.",null,null],[14,"Eq","","Derive macro generating an impl of the trait <code>Eq</code>.",null,null],[14,"Ord","","Derive macro generating an impl of the trait <code>Ord</code>.",null,null],[14,"PartialOrd","","Derive macro generating an impl of the trait <code>PartialOrd</code>.",null,null],[0,"convert","std","Traits for conversions between types.",null,null],[5,"identity","std::convert","The identity function.",null,[[]]],[8,"AsRef","","Used to do a cheap reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",32,[[]]],[8,"AsMut","","Used to do a cheap mutable-to-mutable reference …",null,null],[10,"as_mut","","Performs the conversion.",33,[[]]],[8,"Into","","A value-to-value conversion that consumes the input …",null,null],[10,"into","","Performs the conversion.",34,[[]]],[8,"From","","Used to do value-to-value conversions while consuming the …",null,null],[10,"from","","Performs the conversion.",35,[[]]],[8,"TryInto","","An attempted conversion that consumes <code>self</code>, which may or …",null,null],[16,"Error","","The type returned in the event of a conversion error.",36,null],[10,"try_into","","Performs the conversion.",36,[[],["result",4]]],[8,"TryFrom","","Simple and safe type conversions that may fail in a …",null,null],[16,"Error","","The type returned in the event of a conversion error.",37,null],[10,"try_from","","Performs the conversion.",37,[[],["result",4]]],[4,"Infallible","","The error type for errors that can never happen.",null,null],[8,"FloatToInt","","Supporting trait for inherent methods of <code>f32</code> and <code>f64</code> such …",null,null],[0,"default","std","The <code>Default</code> trait for types which may have meaningful …",null,null],[8,"Default","std::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \\\"default value\\\" for a type.",38,[[]]],[5,"default","","Return the default value of a type according to the …",null,[[]]],[14,"Default","","Derive macro generating an impl of the trait <code>Default</code>.",null,null],[0,"hash","std","Generic hashing support.",null,null],[8,"Hash","std::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the given [<code>Hasher</code>].",39,[[]]],[11,"hash_slice","","Feeds a slice of this type into the given [<code>Hasher</code>].",39,[[]]],[8,"Hasher","","A trait for hashing an arbitrary stream of bytes.",null,null],[10,"finish","","Returns the hash value for the values written so far.",40,[[]]],[10,"write","","Writes some data into this <code>Hasher</code>.",40,[[]]],[11,"write_u8","","Writes a single <code>u8</code> into this hasher.",40,[[]]],[11,"write_u16","","Writes a single <code>u16</code> into this hasher.",40,[[]]],[11,"write_u32","","Writes a single <code>u32</code> into this hasher.",40,[[]]],[11,"write_u64","","Writes a single <code>u64</code> into this hasher.",40,[[]]],[11,"write_u128","","Writes a single <code>u128</code> into this hasher.",40,[[]]],[11,"write_usize","","Writes a single <code>usize</code> into this hasher.",40,[[]]],[11,"write_i8","","Writes a single <code>i8</code> into this hasher.",40,[[]]],[11,"write_i16","","Writes a single <code>i16</code> into this hasher.",40,[[]]],[11,"write_i32","","Writes a single <code>i32</code> into this hasher.",40,[[]]],[11,"write_i64","","Writes a single <code>i64</code> into this hasher.",40,[[]]],[11,"write_i128","","Writes a single <code>i128</code> into this hasher.",40,[[]]],[11,"write_isize","","Writes a single <code>isize</code> into this hasher.",40,[[]]],[8,"BuildHasher","","A trait for creating instances of [<code>Hasher</code>].",null,null],[16,"Hasher","","Type of the hasher that will be created.",41,null],[10,"build_hasher","","Creates a new hasher.",41,[[]]],[3,"BuildHasherDefault","","Used to create a default [<code>BuildHasher</code>] instance for types …",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[14,"Hash","","Derive macro generating an impl of the trait <code>Hash</code>.",null,null],[0,"hint","std","Hints to compiler that affects how code should be emitted …",null,null],[5,"unreachable_unchecked","std::hint","Informs the compiler that this point in the code is not …",null,[[]]],[5,"spin_loop","","Emits a machine instruction to signal the processor that …",null,[[]]],[5,"black_box","","An identity function that <em><strong>hints</strong></em> to the compiler to be …",null,[[]]],[0,"i128","std","The 128-bit signed integer type.",null,null],[17,"MIN","std::i128","The smallest value that can be represented by this …",null,null],[17,"MAX","","The largest value that can be represented by this integer …",null,null],[0,"i16","std","The 16-bit signed integer type.",null,null],[17,"MIN","std::i16","The smallest value that can be represented by this …",null,null],[17,"MAX","","The largest value that can be represented by this integer …",null,null],[0,"i32","std","The 32-bit signed integer type.",null,null],[17,"MIN","std::i32","The smallest value that can be represented by this …",null,null],[17,"MAX","","The largest value that can be represented by this integer …",null,null],[0,"i64","std","The 64-bit signed integer type.",null,null],[17,"MIN","std::i64","The smallest value that can be represented by this …",null,null],[17,"MAX","","The largest value that can be represented by this integer …",null,null],[0,"i8","std","The 8-bit signed integer type.",null,null],[17,"MIN","std::i8","The smallest value that can be represented by this …",null,null],[17,"MAX","","The largest value that can be represented by this integer …",null,null],[0,"intrinsics","std","Compiler intrinsics.",null,null],[5,"atomic_cxchg","std::intrinsics","Stores a value if the current value is the same as the <code>old</code>…",null,[[]]],[5,"atomic_cxchg_acq","","Stores a value if the current value is the same as the <code>old</code>…",null,[[]]],[5,"atomic_cxchg_rel","","Stores a value if the current value is the same as the <code>old</code>…",null,[[]]],[5,"atomic_cxchg_acqrel","","Stores a value if the current value is the same as the <code>old</code>…",null,[[]]],[5,"atomic_cxchg_relaxed","","Stores a value if the current value is the same as the <code>old</code>…",null,[[]]],[5,"atomic_cxchg_failrelaxed","","Stores a value if the current value is the same as the <code>old</code>…",null,[[]]],[5,"atomic_cxchg_failacq","","Stores a value if the current value is the same as the <code>old</code>…",null,[[]]],[5,"atomic_cxchg_acq_failrelaxed","","Stores a value if the current value is the same as the <code>old</code>…",null,[[]]],[5,"atomic_cxchg_acqrel_failrelaxed","","Stores a value if the current value is the same as the <code>old</code>…",null,[[]]],[5,"atomic_cxchgweak","","Stores a value if the current value is the same as the <code>old</code>…",null,[[]]],[5,"atomic_cxchgweak_acq","","Stores a value if the current value is the same as the <code>old</code>…",null,[[]]],[5,"atomic_cxchgweak_rel","","Stores a value if the current value is the same as the <code>old</code>…",null,[[]]],[5,"atomic_cxchgweak_acqrel","","Stores a value if the current value is the same as the <code>old</code>…",null,[[]]],[5,"atomic_cxchgweak_relaxed","","Stores a value if the current value is the same as the <code>old</code>…",null,[[]]],[5,"atomic_cxchgweak_failrelaxed","","Stores a value if the current value is the same as the <code>old</code>…",null,[[]]],[5,"atomic_cxchgweak_failacq","","Stores a value if the current value is the same as the <code>old</code>…",null,[[]]],[5,"atomic_cxchgweak_acq_failrelaxed","","Stores a value if the current value is the same as the <code>old</code>…",null,[[]]],[5,"atomic_cxchgweak_acqrel_failrelaxed","","Stores a value if the current value is the same as the <code>old</code>…",null,[[]]],[5,"atomic_load","","Loads the current value of the pointer.",null,[[]]],[5,"atomic_load_acq","","Loads the current value of the pointer.",null,[[]]],[5,"atomic_load_relaxed","","Loads the current value of the pointer.",null,[[]]],[5,"atomic_load_unordered","","",null,[[]]],[5,"atomic_store","","Stores the value at the specified memory location.",null,[[]]],[5,"atomic_store_rel","","Stores the value at the specified memory location.",null,[[]]],[5,"atomic_store_relaxed","","Stores the value at the specified memory location.",null,[[]]],[5,"atomic_store_unordered","","",null,[[]]],[5,"atomic_xchg","","Stores the value at the specified memory location, …",null,[[]]],[5,"atomic_xchg_acq","","Stores the value at the specified memory location, …",null,[[]]],[5,"atomic_xchg_rel","","Stores the value at the specified memory location, …",null,[[]]],[5,"atomic_xchg_acqrel","","Stores the value at the specified memory location, …",null,[[]]],[5,"atomic_xchg_relaxed","","Stores the value at the specified memory location, …",null,[[]]],[5,"atomic_xadd","","Adds to the current value, returning the previous value.",null,[[]]],[5,"atomic_xadd_acq","","Adds to the current value, returning the previous value.",null,[[]]],[5,"atomic_xadd_rel","","Adds to the current value, returning the previous value.",null,[[]]],[5,"atomic_xadd_acqrel","","Adds to the current value, returning the previous value.",null,[[]]],[5,"atomic_xadd_relaxed","","Adds to the current value, returning the previous value.",null,[[]]],[5,"atomic_xsub","","Subtract from the current value, returning the previous …",null,[[]]],[5,"atomic_xsub_acq","","Subtract from the current value, returning the previous …",null,[[]]],[5,"atomic_xsub_rel","","Subtract from the current value, returning the previous …",null,[[]]],[5,"atomic_xsub_acqrel","","Subtract from the current value, returning the previous …",null,[[]]],[5,"atomic_xsub_relaxed","","Subtract from the current value, returning the previous …",null,[[]]],[5,"atomic_and","","Bitwise and with the current value, returning the …",null,[[]]],[5,"atomic_and_acq","","Bitwise and with the current value, returning the …",null,[[]]],[5,"atomic_and_rel","","Bitwise and with the current value, returning the …",null,[[]]],[5,"atomic_and_acqrel","","Bitwise and with the current value, returning the …",null,[[]]],[5,"atomic_and_relaxed","","Bitwise and with the current value, returning the …",null,[[]]],[5,"atomic_nand","","Bitwise nand with the current value, returning the …",null,[[]]],[5,"atomic_nand_acq","","Bitwise nand with the current value, returning the …",null,[[]]],[5,"atomic_nand_rel","","Bitwise nand with the current value, returning the …",null,[[]]],[5,"atomic_nand_acqrel","","Bitwise nand with the current value, returning the …",null,[[]]],[5,"atomic_nand_relaxed","","Bitwise nand with the current value, returning the …",null,[[]]],[5,"atomic_or","","Bitwise or with the current value, returning the previous …",null,[[]]],[5,"atomic_or_acq","","Bitwise or with the current value, returning the previous …",null,[[]]],[5,"atomic_or_rel","","Bitwise or with the current value, returning the previous …",null,[[]]],[5,"atomic_or_acqrel","","Bitwise or with the current value, returning the previous …",null,[[]]],[5,"atomic_or_relaxed","","Bitwise or with the current value, returning the previous …",null,[[]]],[5,"atomic_xor","","Bitwise xor with the current value, returning the …",null,[[]]],[5,"atomic_xor_acq","","Bitwise xor with the current value, returning the …",null,[[]]],[5,"atomic_xor_rel","","Bitwise xor with the current value, returning the …",null,[[]]],[5,"atomic_xor_acqrel","","Bitwise xor with the current value, returning the …",null,[[]]],[5,"atomic_xor_relaxed","","Bitwise xor with the current value, returning the …",null,[[]]],[5,"atomic_max","","Maximum with the current value using a signed comparison.",null,[[]]],[5,"atomic_max_acq","","Maximum with the current value using a signed comparison.",null,[[]]],[5,"atomic_max_rel","","Maximum with the current value using a signed comparison.",null,[[]]],[5,"atomic_max_acqrel","","Maximum with the current value using a signed comparison.",null,[[]]],[5,"atomic_max_relaxed","","Maximum with the current value.",null,[[]]],[5,"atomic_min","","Minimum with the current value using a signed comparison.",null,[[]]],[5,"atomic_min_acq","","Minimum with the current value using a signed comparison.",null,[[]]],[5,"atomic_min_rel","","Minimum with the current value using a signed comparison.",null,[[]]],[5,"atomic_min_acqrel","","Minimum with the current value using a signed comparison.",null,[[]]],[5,"atomic_min_relaxed","","Minimum with the current value using a signed comparison.",null,[[]]],[5,"atomic_umin","","Minimum with the current value using an unsigned …",null,[[]]],[5,"atomic_umin_acq","","Minimum with the current value using an unsigned …",null,[[]]],[5,"atomic_umin_rel","","Minimum with the current value using an unsigned …",null,[[]]],[5,"atomic_umin_acqrel","","Minimum with the current value using an unsigned …",null,[[]]],[5,"atomic_umin_relaxed","","Minimum with the current value using an unsigned …",null,[[]]],[5,"atomic_umax","","Maximum with the current value using an unsigned …",null,[[]]],[5,"atomic_umax_acq","","Maximum with the current value using an unsigned …",null,[[]]],[5,"atomic_umax_rel","","Maximum with the current value using an unsigned …",null,[[]]],[5,"atomic_umax_acqrel","","Maximum with the current value using an unsigned …",null,[[]]],[5,"atomic_umax_relaxed","","Maximum with the current value using an unsigned …",null,[[]]],[5,"prefetch_read_data","","The <code>prefetch</code> intrinsic is a hint to the code generator to …",null,[[]]],[5,"prefetch_write_data","","The <code>prefetch</code> intrinsic is a hint to the code generator to …",null,[[]]],[5,"prefetch_read_instruction","","The <code>prefetch</code> intrinsic is a hint to the code generator to …",null,[[]]],[5,"prefetch_write_instruction","","The <code>prefetch</code> intrinsic is a hint to the code generator to …",null,[[]]],[5,"atomic_fence","","An atomic fence.",null,[[]]],[5,"atomic_fence_acq","","An atomic fence.",null,[[]]],[5,"atomic_fence_rel","","An atomic fence.",null,[[]]],[5,"atomic_fence_acqrel","","An atomic fence.",null,[[]]],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,[[]]],[5,"atomic_singlethreadfence_acq","","A compiler-only memory barrier.",null,[[]]],[5,"atomic_singlethreadfence_rel","","A compiler-only memory barrier.",null,[[]]],[5,"atomic_singlethreadfence_acqrel","","A compiler-only memory barrier.",null,[[]]],[5,"rustc_peek","","Magic intrinsic that derives its meaning from attributes …",null,[[]]],[5,"abort","","Aborts the execution of the process.",null,[[]]],[5,"unreachable","","Tells LLVM that this point in the code is not reachable, …",null,[[]]],[5,"assume","","Informs the optimizer that a condition is always true. If …",null,[[]]],[5,"likely","","Hints to the compiler that branch condition is likely to …",null,[[]]],[5,"unlikely","","Hints to the compiler that branch condition is likely to …",null,[[]]],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,[[]]],[5,"size_of","","The size of a type in bytes.",null,[[]]],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,[[]]],[5,"min_align_of","","The minimum alignment of a type.",null,[[]]],[5,"pref_align_of","","The preferred alignment of a type.",null,[[]]],[5,"size_of_val","","The size of the referenced value in bytes.",null,[[]]],[5,"min_align_of_val","","The required alignment of the referenced value.",null,[[]]],[5,"type_name","","Gets a static string slice containing the name of a type.",null,[[]]],[5,"type_id","","Gets an identifier which is globally unique to the …",null,[[]]],[5,"assert_inhabited","","A guard for unsafe functions that cannot ever be executed …",null,[[]]],[5,"assert_zero_valid","","A guard for unsafe functions that cannot ever be executed …",null,[[]]],[5,"assert_uninit_valid","","A guard for unsafe functions that cannot ever be executed …",null,[[]]],[5,"caller_location","","Gets a reference to a static <code>Location</code> indicating where it …",null,[[],["location",3]]],[5,"forget","","Moves a value out of scope without running drop glue.",null,[[]]],[5,"transmute","","Reinterprets the bits of a value of one type as another …",null,[[]]],[5,"needs_drop","","Returns <code>true</code> if the actual type given as <code>T</code> requires drop …",null,[[]]],[5,"offset","","Calculates the offset from a pointer.",null,[[]]],[5,"arith_offset","","Calculates the offset from a pointer, potentially …",null,[[]]],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate <code>llvm.memcpy.p0i8.0i8.*</code> …",null,[[]]],[5,"volatile_copy_memory","","Equivalent to the appropriate <code>llvm.memmove.p0i8.0i8.*</code> …",null,[[]]],[5,"volatile_set_memory","","Equivalent to the appropriate <code>llvm.memset.p0i8.*</code> …",null,[[]]],[5,"volatile_load","","Performs a volatile load from the <code>src</code> pointer.",null,[[]]],[5,"volatile_store","","Performs a volatile store to the <code>dst</code> pointer.",null,[[]]],[5,"unaligned_volatile_load","","Performs a volatile load from the <code>src</code> pointer The pointer …",null,[[]]],[5,"unaligned_volatile_store","","Performs a volatile store to the <code>dst</code> pointer. The pointer …",null,[[]]],[5,"sqrtf32","","Returns the square root of an <code>f32</code>",null,[[]]],[5,"sqrtf64","","Returns the square root of an <code>f64</code>",null,[[]]],[5,"powif32","","Raises an <code>f32</code> to an integer power.",null,[[]]],[5,"powif64","","Raises an <code>f64</code> to an integer power.",null,[[]]],[5,"sinf32","","Returns the sine of an <code>f32</code>.",null,[[]]],[5,"sinf64","","Returns the sine of an <code>f64</code>.",null,[[]]],[5,"cosf32","","Returns the cosine of an <code>f32</code>.",null,[[]]],[5,"cosf64","","Returns the cosine of an <code>f64</code>.",null,[[]]],[5,"powf32","","Raises an <code>f32</code> to an <code>f32</code> power.",null,[[]]],[5,"powf64","","Raises an <code>f64</code> to an <code>f64</code> power.",null,[[]]],[5,"expf32","","Returns the exponential of an <code>f32</code>.",null,[[]]],[5,"expf64","","Returns the exponential of an <code>f64</code>.",null,[[]]],[5,"exp2f32","","Returns 2 raised to the power of an <code>f32</code>.",null,[[]]],[5,"exp2f64","","Returns 2 raised to the power of an <code>f64</code>.",null,[[]]],[5,"logf32","","Returns the natural logarithm of an <code>f32</code>.",null,[[]]],[5,"logf64","","Returns the natural logarithm of an <code>f64</code>.",null,[[]]],[5,"log10f32","","Returns the base 10 logarithm of an <code>f32</code>.",null,[[]]],[5,"log10f64","","Returns the base 10 logarithm of an <code>f64</code>.",null,[[]]],[5,"log2f32","","Returns the base 2 logarithm of an <code>f32</code>.",null,[[]]],[5,"log2f64","","Returns the base 2 logarithm of an <code>f64</code>.",null,[[]]],[5,"fmaf32","","Returns <code>a * b + c</code> for <code>f32</code> values.",null,[[]]],[5,"fmaf64","","Returns <code>a * b + c</code> for <code>f64</code> values.",null,[[]]],[5,"fabsf32","","Returns the absolute value of an <code>f32</code>.",null,[[]]],[5,"fabsf64","","Returns the absolute value of an <code>f64</code>.",null,[[]]],[5,"minnumf32","","Returns the minimum of two <code>f32</code> values.",null,[[]]],[5,"minnumf64","","Returns the minimum of two <code>f64</code> values.",null,[[]]],[5,"maxnumf32","","Returns the maximum of two <code>f32</code> values.",null,[[]]],[5,"maxnumf64","","Returns the maximum of two <code>f64</code> values.",null,[[]]],[5,"copysignf32","","Copies the sign from <code>y</code> to <code>x</code> for <code>f32</code> values.",null,[[]]],[5,"copysignf64","","Copies the sign from <code>y</code> to <code>x</code> for <code>f64</code> values.",null,[[]]],[5,"floorf32","","Returns the largest integer less than or equal to an <code>f32</code>.",null,[[]]],[5,"floorf64","","Returns the largest integer less than or equal to an <code>f64</code>.",null,[[]]],[5,"ceilf32","","Returns the smallest integer greater than or equal to an …",null,[[]]],[5,"ceilf64","","Returns the smallest integer greater than or equal to an …",null,[[]]],[5,"truncf32","","Returns the integer part of an <code>f32</code>.",null,[[]]],[5,"truncf64","","Returns the integer part of an <code>f64</code>.",null,[[]]],[5,"rintf32","","Returns the nearest integer to an <code>f32</code>. May raise an …",null,[[]]],[5,"rintf64","","Returns the nearest integer to an <code>f64</code>. May raise an …",null,[[]]],[5,"nearbyintf32","","Returns the nearest integer to an <code>f32</code>.",null,[[]]],[5,"nearbyintf64","","Returns the nearest integer to an <code>f64</code>.",null,[[]]],[5,"roundf32","","Returns the nearest integer to an <code>f32</code>. Rounds half-way …",null,[[]]],[5,"roundf64","","Returns the nearest integer to an <code>f64</code>. Rounds half-way …",null,[[]]],[5,"fadd_fast","","Float addition that allows optimizations based on …",null,[[]]],[5,"fsub_fast","","Float subtraction that allows optimizations based on …",null,[[]]],[5,"fmul_fast","","Float multiplication that allows optimizations based on …",null,[[]]],[5,"fdiv_fast","","Float division that allows optimizations based on …",null,[[]]],[5,"frem_fast","","Float remainder that allows optimizations based on …",null,[[]]],[5,"float_to_int_unchecked","","Convert with LLVM’s fptoui/fptosi, which may return …",null,[[]]],[5,"ctpop","","Returns the number of bits set in an integer type <code>T</code>",null,[[]]],[5,"ctlz","","Returns the number of leading unset bits (zeroes) in an …",null,[[]]],[5,"ctlz_nonzero","","Like <code>ctlz</code>, but extra-unsafe as it returns <code>undef</code> when …",null,[[]]],[5,"cttz","","Returns the number of trailing unset bits (zeroes) in an …",null,[[]]],[5,"cttz_nonzero","","Like <code>cttz</code>, but extra-unsafe as it returns <code>undef</code> when …",null,[[]]],[5,"bswap","","Reverses the bytes in an integer type <code>T</code>.",null,[[]]],[5,"bitreverse","","Reverses the bits in an integer type <code>T</code>.",null,[[]]],[5,"add_with_overflow","","Performs checked integer addition.",null,[[]]],[5,"sub_with_overflow","","Performs checked integer subtraction",null,[[]]],[5,"mul_with_overflow","","Performs checked integer multiplication",null,[[]]],[5,"exact_div","","Performs an exact division, resulting in undefined …",null,[[]]],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined …",null,[[]]],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting …",null,[[]]],[5,"unchecked_shl","","Performs an unchecked left shift, resulting in undefined …",null,[[]]],[5,"unchecked_shr","","Performs an unchecked right shift, resulting in undefined …",null,[[]]],[5,"unchecked_add","","Returns the result of an unchecked addition, resulting in …",null,[[]]],[5,"unchecked_sub","","Returns the result of an unchecked subtraction, resulting …",null,[[]]],[5,"unchecked_mul","","Returns the result of an unchecked multiplication, …",null,[[]]],[5,"rotate_left","","Performs rotate left.",null,[[]]],[5,"rotate_right","","Performs rotate right.",null,[[]]],[5,"wrapping_add","","Returns (a + b) mod 2N, where N is the width of T in bits.",null,[[]]],[5,"wrapping_sub","","Returns (a - b) mod 2N, where N is the width of T in bits.",null,[[]]],[5,"wrapping_mul","","Returns (a * b) mod 2N, where N is the width of T in bits.",null,[[]]],[5,"saturating_add","","Computes <code>a + b</code>, while saturating at numeric bounds.",null,[[]]],[5,"saturating_sub","","Computes <code>a - b</code>, while saturating at numeric bounds.",null,[[]]],[5,"discriminant_value","","Returns the value of the discriminant for the variant in …",null,[[]]],[5,"variant_count","","Returns the number of variants of the type <code>T</code> cast to a …",null,[[]]],[5,"try","","Rust\'s \\\"try catch\\\" construct which invokes the function …",null,[[]]],[5,"nontemporal_store","","Emits a <code>!nontemporal</code> store according to LLVM (see their …",null,[[]]],[5,"ptr_offset_from","","See documentation of <code><*const T>::offset_from</code> for details.",null,[[]]],[5,"ptr_guaranteed_eq","","See documentation of <code><*const T>::guaranteed_eq</code> for …",null,[[]]],[5,"ptr_guaranteed_ne","","See documentation of <code><*const T>::guaranteed_ne</code> for …",null,[[]]],[5,"const_allocate","","Allocate at compile time. Should not be called at runtime.",null,[[]]],[5,"copy_nonoverlapping","","Copies <code>count * size_of::<T>()</code> bytes from <code>src</code> to <code>dst</code>. The …",null,[[]]],[5,"copy","","Copies <code>count * size_of::<T>()</code> bytes from <code>src</code> to <code>dst</code>. The …",null,[[]]],[5,"write_bytes","","Sets <code>count * size_of::<T>()</code> bytes of memory starting at …",null,[[]]],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,[[]]],[0,"isize","std","The pointer-sized signed integer type.",null,null],[17,"MIN","std::isize","The smallest value that can be represented by this …",null,null],[17,"MAX","","The largest value that can be represented by this integer …",null,null],[0,"iter","std","Composable external iteration.",null,null],[8,"Iterator","std::iter","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",42,null],[10,"next","","Advances the iterator and returns the next value.",42,[[],["option",4]]],[11,"size_hint","","Returns the bounds on the remaining length of the …",42,[[]]],[11,"count","","Consumes the iterator, counting the number of iterations …",42,[[]]],[11,"last","","Consumes the iterator, returning the last element.",42,[[],["option",4]]],[11,"advance_by","","Advances the iterator by <code>n</code> elements.",42,[[],["result",4]]],[11,"nth","","Returns the <code>n</code>th element of the iterator.",42,[[],["option",4]]],[11,"step_by","","Creates an iterator starting at the same point, but …",42,[[],["stepby",3]]],[11,"chain","","Takes two iterators and creates a new iterator over both …",42,[[],["chain",3]]],[11,"zip","","\'Zips up\' two iterators into a single iterator of pairs.",42,[[],["zip",3]]],[11,"map","","Takes a closure and creates an iterator which calls that …",42,[[],["map",3]]],[11,"for_each","","Calls a closure on each element of an iterator.",42,[[]]],[11,"filter","","Creates an iterator which uses a closure to determine if …",42,[[],["filter",3]]],[11,"filter_map","","Creates an iterator that both filters and maps.",42,[[],["filtermap",3]]],[11,"enumerate","","Creates an iterator which gives the current iteration …",42,[[],["enumerate",3]]],[11,"peekable","","Creates an iterator which can use <code>peek</code> to look at the …",42,[[],["peekable",3]]],[11,"skip_while","","Creates an iterator that <code>skip</code>s elements based on a …",42,[[],["skipwhile",3]]],[11,"take_while","","Creates an iterator that yields elements based on a …",42,[[],["takewhile",3]]],[11,"map_while","","Creates an iterator that both yields elements based on a …",42,[[],["mapwhile",3]]],[11,"skip","","Creates an iterator that skips the first <code>n</code> elements.",42,[[],["skip",3]]],[11,"take","","Creates an iterator that yields its first <code>n</code> elements.",42,[[],["take",3]]],[11,"scan","","An iterator adaptor similar to <code>fold</code> that holds internal …",42,[[],["scan",3]]],[11,"flat_map","","Creates an iterator that works like map, but flattens …",42,[[],["flatmap",3]]],[11,"flatten","","Creates an iterator that flattens nested structure.",42,[[],["flatten",3]]],[11,"fuse","","Creates an iterator which ends after the first [<code>None</code>].",42,[[],["fuse",3]]],[11,"inspect","","Does something with each element of an iterator, passing …",42,[[],["inspect",3]]],[11,"by_ref","","Borrows an iterator, rather than consuming it.",42,[[]]],[11,"collect","","Transforms an iterator into a collection.",42,[[]]],[11,"partition","","Consumes an iterator, creating two collections from it.",42,[[]]],[11,"partition_in_place","","Reorders the elements of this iterator <em>in-place</em> according …",42,[[]]],[11,"is_partitioned","","Checks if the elements of this iterator are partitioned …",42,[[]]],[11,"try_fold","","An iterator method that applies a function as long as it …",42,[[]]],[11,"try_for_each","","An iterator method that applies a fallible function to …",42,[[]]],[11,"fold","","An iterator method that applies a function, producing a …",42,[[]]],[11,"fold_first","","The same as <code>fold()</code>, but uses the first element in the …",42,[[],["option",4]]],[11,"all","","Tests if every element of the iterator matches a …",42,[[]]],[11,"any","","Tests if any element of the iterator matches a predicate.",42,[[]]],[11,"find","","Searches for an element of an iterator that satisfies a …",42,[[],["option",4]]],[11,"find_map","","Applies function to the elements of iterator and returns …",42,[[],["option",4]]],[11,"try_find","","Applies function to the elements of iterator and returns …",42,[[],[["result",4],["option",4]]]],[11,"position","","Searches for an element in an iterator, returning its …",42,[[],["option",4]]],[11,"rposition","","Searches for an element in an iterator from the right, …",42,[[],["option",4]]],[11,"max","","Returns the maximum element of an iterator.",42,[[],["option",4]]],[11,"min","","Returns the minimum element of an iterator.",42,[[],["option",4]]],[11,"max_by_key","","Returns the element that gives the maximum value from the …",42,[[],["option",4]]],[11,"max_by","","Returns the element that gives the maximum value with …",42,[[],["option",4]]],[11,"min_by_key","","Returns the element that gives the minimum value from the …",42,[[],["option",4]]],[11,"min_by","","Returns the element that gives the minimum value with …",42,[[],["option",4]]],[11,"rev","","Reverses an iterator\'s direction.",42,[[],["rev",3]]],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",42,[[]]],[11,"copied","","Creates an iterator which copies all of its elements.",42,[[],["copied",3]]],[11,"cloned","","Creates an iterator which <code>clone</code>s all of its elements.",42,[[],["cloned",3]]],[11,"cycle","","Repeats an iterator endlessly.",42,[[],["cycle",3]]],[11,"sum","","Sums the elements of an iterator.",42,[[]]],[11,"product","","Iterates over the entire iterator, multiplying all the …",42,[[]]],[11,"cmp","","Lexicographically compares the elements of this [<code>Iterator</code>]…",42,[[],["ordering",4]]],[11,"cmp_by","","Lexicographically compares the elements of this [<code>Iterator</code>]…",42,[[],["ordering",4]]],[11,"partial_cmp","","Lexicographically compares the elements of this [<code>Iterator</code>]…",42,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp_by","","Lexicographically compares the elements of this [<code>Iterator</code>]…",42,[[],[["ordering",4],["option",4]]]],[11,"eq","","Determines if the elements of this [<code>Iterator</code>] are equal …",42,[[]]],[11,"eq_by","","Determines if the elements of this [<code>Iterator</code>] are equal …",42,[[]]],[11,"ne","","Determines if the elements of this [<code>Iterator</code>] are unequal …",42,[[]]],[11,"lt","","Determines if the elements of this [<code>Iterator</code>] are …",42,[[]]],[11,"le","","Determines if the elements of this [<code>Iterator</code>] are …",42,[[]]],[11,"gt","","Determines if the elements of this [<code>Iterator</code>] are …",42,[[]]],[11,"ge","","Determines if the elements of this [<code>Iterator</code>] are …",42,[[]]],[11,"is_sorted","","Checks if the elements of this iterator are sorted.",42,[[]]],[11,"is_sorted_by","","Checks if the elements of this iterator are sorted using …",42,[[]]],[11,"is_sorted_by_key","","Checks if the elements of this iterator are sorted using …",42,[[]]],[8,"Step","","Objects that have a notion of <em>successor</em> and <em>predecessor</em> …",null,null],[10,"steps_between","","Returns the number of <em>successor</em> steps required to get …",43,[[],["option",4]]],[10,"forward_checked","","Returns the value that would be obtained by taking the <em>…",43,[[],["option",4]]],[11,"forward","","Returns the value that would be obtained by taking the <em>…",43,[[]]],[11,"forward_unchecked","","Returns the value that would be obtained by taking the <em>…",43,[[]]],[10,"backward_checked","","Returns the value that would be obtained by taking the <em>…",43,[[],["option",4]]],[11,"backward","","Returns the value that would be obtained by taking the <em>…",43,[[]]],[11,"backward_unchecked","","Returns the value that would be obtained by taking the <em>…",43,[[]]],[5,"empty","","Creates an iterator that yields nothing.",null,[[],["empty",3]]],[3,"Empty","","An iterator that yields nothing.",null,null],[5,"from_fn","","Creates a new iterator where each iteration calls the …",null,[[],["fromfn",3]]],[3,"FromFn","","An iterator where each iteration calls the provided …",null,null],[5,"once","","Creates an iterator that yields an element exactly once.",null,[[],["once",3]]],[3,"Once","","An iterator that yields an element exactly once.",null,null],[5,"once_with","","Creates an iterator that lazily generates a value exactly …",null,[[],["oncewith",3]]],[3,"OnceWith","","An iterator that yields a single element of type <code>A</code> by …",null,null],[5,"repeat","","Creates a new iterator that endlessly repeats a single …",null,[[],["repeat",3]]],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[5,"repeat_with","","Creates a new iterator that repeats elements of type <code>A</code> …",null,[[],["repeatwith",3]]],[3,"RepeatWith","","An iterator that repeats elements of type <code>A</code> endlessly by …",null,null],[5,"successors","","Creates a new iterator where each successive item is …",null,[[["option",4]],["successors",3]]],[3,"Successors","","An new iterator where each successive item is computed …",null,null],[8,"FusedIterator","","An iterator that always continues to yield <code>None</code> when …",null,null],[8,"InPlaceIterable","","An iterator that when yielding an item will have taken at …",null,null],[8,"TrustedLen","","An iterator that reports an accurate length using …",null,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","Removes and returns an element from the end of the …",44,[[],["option",4]]],[11,"advance_back_by","","Advances the iterator from the back by <code>n</code> elements.",44,[[],["result",4]]],[11,"nth_back","","Returns the <code>n</code>th element from the end of the iterator.",44,[[],["option",4]]],[11,"try_rfold","","This is the reverse version of [<code>Iterator::try_fold()</code>]: it …",44,[[]]],[11,"rfold","","An iterator method that reduces the iterator\'s elements …",44,[[]]],[11,"rfind","","Searches for an element of an iterator from the back that …",44,[[],["option",4]]],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact length of the iterator.",45,[[]]],[11,"is_empty","","Returns <code>true</code> if the iterator is empty.",45,[[]]],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",46,[[]]],[11,"extend_one","","Extends a collection with exactly one element.",46,[[]]],[11,"extend_reserve","","Reserves capacity in a collection for the given number of …",46,[[]]],[8,"FromIterator","","Conversion from an [<code>Iterator</code>].",null,null],[10,"from_iter","","Creates a value from an iterator.",47,[[]]],[8,"IntoIterator","","Conversion into an [<code>Iterator</code>].",null,null],[16,"Item","","The type of the elements being iterated over.",48,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",48,null],[10,"into_iter","","Creates an iterator from a value.",48,[[]]],[8,"Product","","Trait to represent types that can be created by …",null,null],[10,"product","","Method which takes an iterator and generates <code>Self</code> from …",49,[[]]],[8,"Sum","","Trait to represent types that can be created by summing …",null,null],[10,"sum","","Method which takes an iterator and generates <code>Self</code> from …",50,[[]]],[3,"Cloned","","An iterator that clones the elements of an underlying …",null,null],[3,"Copied","","An iterator that copies the elements of an underlying …",null,null],[3,"Flatten","","An iterator that flattens one level of nesting in an …",null,null],[3,"MapWhile","","An iterator that only accepts elements while <code>predicate</code> …",null,null],[8,"SourceIter","","This trait provides transitive access to source-stage in …",null,null],[16,"Source","","A source stage in an iterator pipeline.",51,null],[10,"as_inner","","Retrieve the source of an iterator pipeline.",51,[[]]],[3,"StepBy","","An iterator for stepping iterators by a custom amount.",null,null],[3,"Chain","","An iterator that links two iterators together, in a chain.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element …",null,null],[3,"Filter","","An iterator that filters the elements of <code>iter</code> with …",null,null],[3,"FilterMap","","An iterator that uses <code>f</code> to both filter and map elements …",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and …",null,null],[3,"Fuse","","An iterator that yields <code>None</code> forever after the underlying …",null,null],[3,"Inspect","","An iterator that calls a function with a reference to …",null,null],[3,"Map","","An iterator that maps the values of <code>iter</code> with <code>f</code>.",null,null],[3,"Peekable","","An iterator with a <code>peek()</code> that returns an optional …",null,null],[3,"Rev","","A double-ended iterator with the direction inverted.",null,null],[3,"Scan","","An iterator to maintain state while iterating another …",null,null],[3,"Skip","","An iterator that skips over <code>n</code> elements of <code>iter</code>.",null,null],[3,"SkipWhile","","An iterator that rejects elements while <code>predicate</code> returns …",null,null],[3,"Take","","An iterator that only iterates over the first <code>n</code> …",null,null],[3,"TakeWhile","","An iterator that only accepts elements while <code>predicate</code> …",null,null],[3,"Zip","","An iterator that iterates two other iterators …",null,null],[0,"marker","std","Primitive traits and types representing basic properties …",null,null],[8,"Send","std::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile time.",null,null],[8,"Unsize","","Types that can be \\\"unsized\\\" to a dynamically-sized type.",null,null],[8,"StructuralPartialEq","","Required trait for constants used in pattern matches.",null,null],[8,"StructuralEq","","Required trait for constants used in pattern matches.",null,null],[8,"Copy","","Types whose values can be duplicated simply by copying …",null,null],[8,"Sync","","Types for which it is safe to share references between …",null,null],[3,"PhantomData","","Zero-sized type used to mark things that \\\"act like\\\" they …",null,null],[8,"DiscriminantKind","","Compiler-internal trait used to indicate the type of enum …",null,null],[16,"Discriminant","","The type of the discriminant, which must satisfy the trait…",52,null],[8,"Unpin","","Types that can be safely moved after being pinned.",null,null],[3,"PhantomPinned","","A marker type which does not implement <code>Unpin</code>.",null,null],[14,"Copy","","Derive macro generating an impl of the trait <code>Copy</code>.",null,null],[0,"mem","std","Basic functions for dealing with memory.",null,null],[5,"forget","std::mem","Takes ownership and \\\"forgets\\\" about the value <strong>without …",null,[[]]],[5,"forget_unsized","","Like [<code>forget</code>], but also accepts unsized values.",null,[[]]],[5,"size_of","","Returns the size of a type in bytes.",null,[[]]],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",null,[[]]],[5,"size_of_val_raw","","Returns the size of the pointed-to value in bytes.",null,[[]]],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type.",null,[[]]],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of …",null,[[]]],[5,"align_of","","Returns the ABI-required minimum alignment of a type.",null,[[]]],[5,"align_of_val","","Returns the ABI-required minimum alignment of the type of …",null,[[]]],[5,"align_of_val_raw","","Returns the ABI-required minimum alignment of the type of …",null,[[]]],[5,"needs_drop","","Returns <code>true</code> if dropping values of type <code>T</code> matters.",null,[[]]],[5,"zeroed","","Returns the value of type <code>T</code> represented by the all-zero …",null,[[]]],[5,"uninitialized","","Bypasses Rust\'s normal memory-initialization checks by …",null,[[]]],[5,"swap","","Swaps the values at two mutable locations, without …",null,[[]]],[5,"take","","Replaces <code>dest</code> with the default value of <code>T</code>, returning the …",null,[[]]],[5,"replace","","Moves <code>src</code> into the referenced <code>dest</code>, returning the …",null,[[]]],[5,"drop","","Disposes of a value.",null,[[]]],[5,"transmute_copy","","Interprets <code>src</code> as having type <code>&U</code>, and then reads <code>src</code> …",null,[[]]],[3,"Discriminant","","Opaque type representing the discriminant of an enum.",null,null],[5,"discriminant","","Returns a value uniquely identifying the enum variant in <code>v</code>…",null,[[],["discriminant",3]]],[5,"variant_count","","Returns the number of variants in the enum type <code>T</code>.",null,[[]]],[3,"ManuallyDrop","","A wrapper to inhibit compiler from automatically calling <code>T</code>…",null,null],[19,"MaybeUninit","","A wrapper type to construct uninitialized instances of <code>T</code>.",null,null],[5,"transmute","","Reinterprets the bits of a value of one type as another …",null,[[]]],[0,"ops","std","Overloadable operators.",null,null],[8,"Add","std::ops","The addition operator <code>+</code>.",null,null],[16,"Output","","The resulting type after applying the <code>+</code> operator.",53,null],[10,"add","","Performs the <code>+</code> operation.",53,[[]]],[8,"Div","","The division operator <code>/</code>.",null,null],[16,"Output","","The resulting type after applying the <code>/</code> operator.",54,null],[10,"div","","Performs the <code>/</code> operation.",54,[[]]],[8,"Mul","","The multiplication operator <code>*</code>.",null,null],[16,"Output","","The resulting type after applying the <code>*</code> operator.",55,null],[10,"mul","","Performs the <code>*</code> operation.",55,[[]]],[8,"Neg","","The unary negation operator <code>-</code>.",null,null],[16,"Output","","The resulting type after applying the <code>-</code> operator.",56,null],[10,"neg","","Performs the unary <code>-</code> operation.",56,[[]]],[8,"Rem","","The remainder operator <code>%</code>.",null,null],[16,"Output","","The resulting type after applying the <code>%</code> operator.",57,null],[10,"rem","","Performs the <code>%</code> operation.",57,[[]]],[8,"Sub","","The subtraction operator <code>-</code>.",null,null],[16,"Output","","The resulting type after applying the <code>-</code> operator.",58,null],[10,"sub","","Performs the <code>-</code> operation.",58,[[]]],[8,"AddAssign","","The addition assignment operator <code>+=</code>.",null,null],[10,"add_assign","","Performs the <code>+=</code> operation.",59,[[]]],[8,"DivAssign","","The division assignment operator <code>/=</code>.",null,null],[10,"div_assign","","Performs the <code>/=</code> operation.",60,[[]]],[8,"MulAssign","","The multiplication assignment operator <code>*=</code>.",null,null],[10,"mul_assign","","Performs the <code>*=</code> operation.",61,[[]]],[8,"RemAssign","","The remainder assignment operator <code>%=</code>.",null,null],[10,"rem_assign","","Performs the <code>%=</code> operation.",62,[[]]],[8,"SubAssign","","The subtraction assignment operator <code>-=</code>.",null,null],[10,"sub_assign","","Performs the <code>-=</code> operation.",63,[[]]],[8,"BitAnd","","The bitwise AND operator <code>&</code>.",null,null],[16,"Output","","The resulting type after applying the <code>&</code> operator.",64,null],[10,"bitand","","Performs the <code>&</code> operation.",64,[[]]],[8,"BitOr","","The bitwise OR operator <code>|</code>.",null,null],[16,"Output","","The resulting type after applying the <code>|</code> operator.",65,null],[10,"bitor","","Performs the <code>|</code> operation.",65,[[]]],[8,"BitXor","","The bitwise XOR operator <code>^</code>.",null,null],[16,"Output","","The resulting type after applying the <code>^</code> operator.",66,null],[10,"bitxor","","Performs the <code>^</code> operation.",66,[[]]],[8,"Not","","The unary logical negation operator <code>!</code>.",null,null],[16,"Output","","The resulting type after applying the <code>!</code> operator.",67,null],[10,"not","","Performs the unary <code>!</code> operation.",67,[[]]],[8,"Shl","","The left shift operator <code><<</code>. Note that because this trait …",null,null],[16,"Output","","The resulting type after applying the <code><<</code> operator.",68,null],[10,"shl","","Performs the <code><<</code> operation.",68,[[]]],[8,"Shr","","The right shift operator <code>>></code>. Note that because this trait …",null,null],[16,"Output","","The resulting type after applying the <code>>></code> operator.",69,null],[10,"shr","","Performs the <code>>></code> operation.",69,[[]]],[8,"BitAndAssign","","The bitwise AND assignment operator <code>&=</code>.",null,null],[10,"bitand_assign","","Performs the <code>&=</code> operation.",70,[[]]],[8,"BitOrAssign","","The bitwise OR assignment operator <code>|=</code>.",null,null],[10,"bitor_assign","","Performs the <code>|=</code> operation.",71,[[]]],[8,"BitXorAssign","","The bitwise XOR assignment operator <code>^=</code>.",null,null],[10,"bitxor_assign","","Performs the <code>^=</code> operation.",72,[[]]],[8,"ShlAssign","","The left shift assignment operator <code><<=</code>.",null,null],[10,"shl_assign","","Performs the <code><<=</code> operation.",73,[[]]],[8,"ShrAssign","","The right shift assignment operator <code>>>=</code>.",null,null],[10,"shr_assign","","Performs the <code>>>=</code> operation.",74,[[]]],[8,"Deref","","Used for immutable dereferencing operations, like <code>*v</code>.",null,null],[16,"Target","","The resulting type after dereferencing.",75,null],[10,"deref","","Dereferences the value.",75,[[]]],[8,"DerefMut","","Used for mutable dereferencing operations, like in <code>*v = 1;</code>…",null,null],[10,"deref_mut","","Mutably dereferences the value.",76,[[]]],[8,"Drop","","Custom code within the destructor.",null,null],[10,"drop","","Executes the destructor for this type.",77,[[]]],[8,"Fn","","The version of the call operator that takes an immutable …",null,null],[10,"call","","Performs the call operation.",78,[[]]],[8,"FnMut","","The version of the call operator that takes a mutable …",null,null],[10,"call_mut","","Performs the call operation.",79,[[]]],[8,"FnOnce","","The version of the call operator that takes a by-value …",null,null],[16,"Output","","The returned type after the call operator is used.",80,null],[10,"call_once","","Performs the call operation.",80,[[]]],[8,"Index","","Used for indexing operations (<code>container[index]</code>) in …",null,null],[16,"Output","","The returned type after indexing.",81,null],[10,"index","","Performs the indexing (<code>container[index]</code>) operation.",81,[[]]],[8,"IndexMut","","Used for indexing operations (<code>container[index]</code>) in …",null,null],[10,"index_mut","","Performs the mutable indexing (<code>container[index]</code>) …",82,[[]]],[3,"Range","","A (half-open) range bounded inclusively below and …",null,null],[12,"start","","The lower bound of the range (inclusive).",83,null],[12,"end","","The upper bound of the range (exclusive).",83,null],[3,"RangeFrom","","A range only bounded inclusively below (<code>start..</code>).",null,null],[12,"start","","The lower bound of the range (inclusive).",84,null],[3,"RangeFull","","An unbounded range (<code>..</code>).",null,null],[3,"RangeTo","","A range only bounded exclusively above (<code>..end</code>).",null,null],[12,"end","","The upper bound of the range (exclusive).",85,null],[4,"Bound","","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",86,null],[13,"Excluded","","An exclusive bound.",86,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in …",86,null],[8,"RangeBounds","","<code>RangeBounds</code> is implemented by Rust\'s built-in range …",null,null],[10,"start_bound","","Start index bound.",87,[[],["bound",4]]],[10,"end_bound","","End index bound.",87,[[],["bound",4]]],[11,"assert_len","","Performs bounds-checking of this range.",87,[[],["range",3]]],[11,"contains","","Returns <code>true</code> if <code>item</code> is contained in the range.",87,[[]]],[3,"RangeInclusive","","A range bounded inclusively below and above (<code>start..=end</code>).",null,null],[3,"RangeToInclusive","","A range only bounded inclusively above (<code>..=end</code>).",null,null],[12,"end","","The upper bound of the range (inclusive)",88,null],[8,"Try","","A trait for customizing the behavior of the <code>?</code> operator.",null,null],[16,"Ok","","The type of this value when viewed as successful.",89,null],[16,"Error","","The type of this value when viewed as failed.",89,null],[10,"into_result","","Applies the \\\"?\\\" operator. A return of <code>Ok(t)</code> means that the…",89,[[],["result",4]]],[10,"from_error","","Wrap an error value to construct the composite result. …",89,[[]]],[10,"from_ok","","Wrap an OK value to construct the composite result. For …",89,[[]]],[8,"Generator","","The trait implemented by builtin generator types.",null,null],[16,"Yield","","The type of value this generator yields.",90,null],[16,"Return","","The type of value this generator returns.",90,null],[10,"resume","","Resumes the execution of this generator.",90,[[["pin",3]],["generatorstate",4]]],[4,"GeneratorState","","The result of a generator resumption.",null,null],[13,"Yielded","","The generator suspended with a value.",91,null],[13,"Complete","","The generator completed with a return value.",91,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper …",null,null],[8,"DispatchFromDyn","","This is used for object safety, to check that a method\'s …",null,null],[4,"ControlFlow","","Used to make try_fold closures more like normal loops",null,null],[13,"Continue","","Continue in the loop, using the given value for the next …",92,null],[13,"Break","","Exit the loop, yielding the given value",92,null],[0,"option","std","Optional values.",null,null],[4,"Option","std::option","The <code>Option</code> type. See the module level documentation for …",null,null],[13,"None","","No value",93,null],[13,"Some","","Some value <code>T</code>",93,null],[3,"Iter","","An iterator over a reference to the [<code>Some</code>] variant of an […",null,null],[3,"IterMut","","An iterator over a mutable reference to the [<code>Some</code>] …",null,null],[3,"IntoIter","","An iterator over the value in [<code>Some</code>] variant of an [<code>Option</code>…",null,null],[3,"NoneError","","The error type that results from applying the try …",null,null],[0,"pin","std","Types that pin data to its location in memory.",null,null],[3,"Pin","std::pin","A pinned pointer.",null,null],[0,"ptr","std","Manually manage memory through raw pointers.",null,null],[5,"drop_in_place","std::ptr","Executes the destructor (if any) of the pointed-to value.",null,[[]]],[5,"null","","Creates a null raw pointer.",null,[[]]],[5,"null_mut","","Creates a null mutable raw pointer.",null,[[]]],[5,"slice_from_raw_parts","","Forms a raw slice from a pointer and a length.",null,[[]]],[5,"slice_from_raw_parts_mut","","Performs the same functionality as [<code>slice_from_raw_parts</code>]…",null,[[]]],[5,"swap","","Swaps the values at two mutable locations of the same …",null,[[]]],[5,"swap_nonoverlapping","","Swaps <code>count * size_of::<T>()</code> bytes between the two …",null,[[]]],[5,"replace","","Moves <code>src</code> into the pointed <code>dst</code>, returning the previous <code>dst</code>…",null,[[]]],[5,"read","","Reads the value from <code>src</code> without moving it. This leaves …",null,[[]]],[5,"read_unaligned","","Reads the value from <code>src</code> without moving it. This leaves …",null,[[]]],[5,"write","","Overwrites a memory location with the given value without …",null,[[]]],[5,"write_unaligned","","Overwrites a memory location with the given value without …",null,[[]]],[5,"read_volatile","","Performs a volatile read of the value from <code>src</code> without …",null,[[]]],[5,"write_volatile","","Performs a volatile write of a memory location with the …",null,[[]]],[5,"eq","","Compares raw pointers for equality.",null,[[]]],[5,"hash","","Hash a raw pointer.",null,[[]]],[5,"copy_nonoverlapping","","Copies <code>count * size_of::<T>()</code> bytes from <code>src</code> to <code>dst</code>. The …",null,[[]]],[5,"copy","","Copies <code>count * size_of::<T>()</code> bytes from <code>src</code> to <code>dst</code>. The …",null,[[]]],[5,"write_bytes","","Sets <code>count * size_of::<T>()</code> bytes of memory starting at …",null,[[]]],[3,"NonNull","","<code>*mut T</code> but non-zero and covariant.",null,null],[14,"raw_const","","Create a <code>const</code> raw pointer to a place, without creating …",null,null],[14,"raw_mut","","Create a <code>mut</code> raw pointer to a place, without creating an …",null,null],[0,"raw","std","Contains struct definitions for the layout of compiler …",null,null],[3,"TraitObject","std::raw","The representation of a trait object like <code>&dyn SomeTrait</code>.",null,null],[12,"data","","",94,null],[12,"vtable","","",94,null],[0,"result","std","Error handling with the <code>Result</code> type.",null,null],[4,"Result","std::result","<code>Result</code> is a type that represents either success ([<code>Ok</code>]) or …",null,null],[13,"Ok","","Contains the success value",95,null],[13,"Err","","Contains the error value",95,null],[3,"Iter","","An iterator over a reference to the [<code>Ok</code>] variant of a […",null,null],[3,"IterMut","","An iterator over a mutable reference to the [<code>Ok</code>] variant …",null,null],[3,"IntoIter","","An iterator over the value in a [<code>Ok</code>] variant of a [<code>Result</code>]…",null,null],[0,"u128","std","The 128-bit unsigned integer type.",null,null],[17,"MIN","std::u128","The smallest value that can be represented by this …",null,null],[17,"MAX","","The largest value that can be represented by this integer …",null,null],[0,"u16","std","The 16-bit unsigned integer type.",null,null],[17,"MIN","std::u16","The smallest value that can be represented by this …",null,null],[17,"MAX","","The largest value that can be represented by this integer …",null,null],[0,"u32","std","The 32-bit unsigned integer type.",null,null],[17,"MIN","std::u32","The smallest value that can be represented by this …",null,null],[17,"MAX","","The largest value that can be represented by this integer …",null,null],[0,"u64","std","The 64-bit unsigned integer type.",null,null],[17,"MIN","std::u64","The smallest value that can be represented by this …",null,null],[17,"MAX","","The largest value that can be represented by this integer …",null,null],[0,"u8","std","The 8-bit unsigned integer type.",null,null],[17,"MIN","std::u8","The smallest value that can be represented by this …",null,null],[17,"MAX","","The largest value that can be represented by this integer …",null,null],[0,"usize","std","The pointer-sized unsigned integer type.",null,null],[17,"MIN","std::usize","The smallest value that can be represented by this …",null,null],[17,"MAX","","The largest value that can be represented by this integer …",null,null],[14,"assert_eq","std","Asserts that two expressions are equal to each other …",null,null],[14,"assert_ne","","Asserts that two expressions are not equal to each other …",null,null],[14,"debug_assert","","Asserts that a boolean expression is <code>true</code> at runtime.",null,null],[14,"debug_assert_eq","","Asserts that two expressions are equal to each other.",null,null],[14,"debug_assert_ne","","Asserts that two expressions are not equal to each other.",null,null],[14,"matches","","Returns whether the given expression matches any of the …",null,null],[14,"try","","Unwraps a result or propagates its error.",null,null],[14,"todo","","Indicates unfinished code.",null,null],[14,"unimplemented","","Indicates unimplemented code by panicking with a message …",null,null],[14,"unreachable","","Indicates unreachable code.",null,null],[14,"write","","Writes formatted data into a buffer.",null,null],[14,"writeln","","Write formatted data into a buffer, with a newline …",null,null],[14,"asm","","Inline assembly.",null,null],[14,"assert","","Asserts that a boolean expression is <code>true</code> at runtime.",null,null],[14,"cfg","","Evaluates boolean combinations of configuration flags at …",null,null],[14,"column","","Expands to the column number at which it was invoked.",null,null],[14,"compile_error","","Causes compilation to fail with the given error message …",null,null],[14,"concat","","Concatenates literals into a static string slice.",null,null],[14,"concat_idents","","Concatenates identifiers into one identifier.",null,null],[14,"env","","Inspects an environment variable at compile time.",null,null],[14,"file","","Expands to the file name in which it was invoked.",null,null],[14,"format_args","","Constructs parameters for the other string-formatting …",null,null],[14,"format_args_nl","","Same as <code>format_args</code>, but adds a newline in the end.",null,null],[14,"global_asm","","Module-level inline assembly.",null,null],[14,"include","","Parses a file as an expression or an item according to …",null,null],[14,"include_bytes","","Includes a file as a reference to a byte array.",null,null],[14,"include_str","","Includes a UTF-8 encoded file as a string.",null,null],[14,"line","","Expands to the line number on which it was invoked.",null,null],[14,"llvm_asm","","LLVM-style inline assembly.",null,null],[14,"log_syntax","","Prints passed tokens into the standard output.",null,null],[14,"module_path","","Expands to a string that represents the current module …",null,null],[14,"option_env","","Optionally inspects an environment variable at compile …",null,null],[14,"stringify","","Stringifies its arguments.",null,null],[14,"trace_macros","","Enables or disables tracing functionality used for …",null,null],[0,"primitive","","This module reexports the primitive types to allow usage …",null,null],[0,"prelude","","The Rust Prelude.",null,null],[0,"v1","std::prelude","The first version of the prelude of The Rust Standard …",null,null],[0,"f32","std","This module provides constants which are specific to the …",null,null],[0,"consts","std::f32","Basic mathematical constants.",null,null],[17,"PI","std::f32::consts","Archimedes\' constant (π)",null,null],[17,"TAU","","The full circle constant (τ)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler\'s number (e)",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG2_10","","log2(10)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LOG10_2","","log10(2)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[17,"DIGITS","std::f32","Approximate number of significant digits in base 10. Use …",null,null],[17,"EPSILON","","Machine epsilon value for <code>f32</code>. Use <code>f32::EPSILON</code> instead.",null,null],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2. Use …",null,null],[17,"RADIX","","The radix or base of the internal representation of <code>f32</code>. …",null,null],[17,"INFINITY","","Infinity (∞). Use <code>f32::INFINITY</code> instead.",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent. Use <code>f32::MAX_10_EXP</code>…",null,null],[17,"NAN","","Not a Number (NaN). Use <code>f32::NAN</code> instead.",null,null],[17,"NEG_INFINITY","","Negative infinity (−∞). Use <code>f32::NEG_INFINITY</code> instead.",null,null],[17,"MAX","","Largest finite <code>f32</code> value. Use <code>f32::MAX</code> instead.",null,null],[17,"MIN","","Smallest finite <code>f32</code> value. Use <code>f32::MIN</code> instead.",null,null],[17,"MIN_POSITIVE","","Smallest positive normal <code>f32</code> value. Use <code>f32::MIN_POSITIVE</code> …",null,null],[17,"MAX_EXP","","Maximum possible power of 2 exponent. Use <code>f32::MAX_EXP</code> …",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent. Use …",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 …",null,null],[0,"f64","std","This module provides constants which are specific to the …",null,null],[0,"consts","std::f64","Basic mathematical constants.",null,null],[17,"PI","std::f64::consts","Archimedes\' constant (π)",null,null],[17,"TAU","","The full circle constant (τ)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler\'s number (e)",null,null],[17,"LOG2_10","","log2(10)",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_2","","log10(2)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[17,"DIGITS","std::f64","Approximate number of significant digits in base 10. Use …",null,null],[17,"EPSILON","","Machine epsilon value for <code>f64</code>. Use <code>f64::EPSILON</code> instead.",null,null],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2. Use …",null,null],[17,"RADIX","","The radix or base of the internal representation of <code>f64</code>. …",null,null],[17,"INFINITY","","Infinity (∞). Use <code>f64::INFINITY</code> instead.",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent. Use <code>f64::MAX_10_EXP</code>…",null,null],[17,"NAN","","Not a Number (NaN). Use <code>f64::NAN</code> instead.",null,null],[17,"NEG_INFINITY","","Negative infinity (−∞). Use <code>f64::NEG_INFINITY</code> instead.",null,null],[17,"MAX","","Largest finite <code>f64</code> value. Use <code>f64::MAX</code> instead.",null,null],[17,"MIN","","Smallest finite <code>f64</code> value. Use <code>f64::MIN</code> instead.",null,null],[17,"MIN_POSITIVE","","Smallest positive normal <code>f64</code> value. Use <code>f64::MIN_POSITIVE</code> …",null,null],[17,"MAX_EXP","","Maximum possible power of 2 exponent. Use <code>f64::MAX_EXP</code> …",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent. Use …",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 …",null,null],[0,"thread","std","Native threads.",null,null],[3,"AccessError","std::thread","An error returned by <code>LocalKey::try_with</code>.",null,null],[3,"LocalKey","","A thread local storage key which owns its contents.",null,null],[5,"available_concurrency","","Returns the number of hardware threads available to the …",null,[[],[["result",6],["nonzerousize",3]]]],[3,"Builder","","Thread factory, which can be used in order to configure …",null,null],[11,"new","","Generates the base configuration for spawning a thread, …",96,[[],["builder",3]]],[11,"name","","Names the thread-to-be. Currently the name is used for …",96,[[["string",3]],["builder",3]]],[11,"stack_size","","Sets the size of the stack (in bytes) for the new thread.",96,[[],["builder",3]]],[11,"spawn","","Spawns a new thread by taking ownership of the <code>Builder</code>, …",96,[[],[["result",6],["joinhandle",3]]]],[11,"spawn_unchecked","","Spawns a new thread without any lifetime restrictions by …",96,[[],[["result",6],["joinhandle",3]]]],[5,"spawn","","Spawns a new thread, returning a [<code>JoinHandle</code>] for it.",null,[[],["joinhandle",3]]],[5,"current","","Gets a handle to the thread that invokes it.",null,[[],["thread",3]]],[5,"yield_now","","Cooperatively gives up a timeslice to the OS scheduler.",null,[[]]],[5,"panicking","","Determines whether the current thread is unwinding …",null,[[]]],[5,"sleep_ms","","Puts the current thread to sleep for at least the …",null,[[]]],[5,"sleep","","Puts the current thread to sleep for at least the …",null,[[["duration",3]]]],[5,"park","","Blocks unless or until the current thread\'s token is made …",null,[[]]],[5,"park_timeout_ms","","Use [<code>park_timeout</code>].",null,[[]]],[5,"park_timeout","","Blocks unless or until the current thread\'s token is made …",null,[[["duration",3]]]],[3,"ThreadId","","A unique identifier for a running thread.",null,null],[11,"as_u64","","This returns a numeric identifier for the thread …",97,[[],["nonzerou64",3]]],[3,"Thread","","A handle to a thread.",null,null],[11,"unpark","","Atomically makes the handle\'s token available if it is …",98,[[]]],[11,"id","","Gets the thread\'s unique identifier.",98,[[],["threadid",3]]],[11,"name","","Gets the thread\'s name.",98,[[],["option",4]]],[6,"Result","","A specialized <code>Result</code> type for threads.",null,null],[3,"JoinHandle","","An owned permission to join on a thread (block on its …",null,null],[11,"thread","","Extracts a handle to the underlying thread.",99,[[],["thread",3]]],[11,"join","","Waits for the associated thread to finish.",99,[[],["result",6]]],[0,"ascii","std","Operations on ASCII strings and characters.",null,null],[5,"escape_default","std::ascii","Returns an iterator that produces an escaped version of a …",null,[[],["escapedefault",3]]],[3,"EscapeDefault","","An iterator over the escaped version of a byte.",null,null],[8,"AsciiExt","","Extension methods for ASCII-subset only operations.",null,null],[16,"Owned","","Container type for copied ASCII characters.",100,null],[10,"is_ascii","","Checks if the value is within the ASCII range.",100,[[]]],[10,"to_ascii_uppercase","","Makes a copy of the value in its ASCII upper case …",100,[[]]],[10,"to_ascii_lowercase","","Makes a copy of the value in its ASCII lower case …",100,[[]]],[10,"eq_ignore_ascii_case","","Checks that two values are an ASCII case-insensitive …",100,[[]]],[10,"make_ascii_uppercase","","Converts this type to its ASCII upper case equivalent …",100,[[]]],[10,"make_ascii_lowercase","","Converts this type to its ASCII lower case equivalent …",100,[[]]],[0,"backtrace","std","Support for capturing a stack backtrace of an OS thread",null,null],[3,"Backtrace","std::backtrace","A captured OS thread stack backtrace.",null,null],[4,"BacktraceStatus","","The current status of a backtrace, indicating whether it …",null,null],[13,"Unsupported","","Capturing a backtrace is not supported, likely because …",101,null],[13,"Disabled","","Capturing a backtrace has been disabled through either the…",101,null],[13,"Captured","","A backtrace has been captured and the <code>Backtrace</code> should …",101,null],[11,"capture","","Capture a stack backtrace of the current thread.",102,[[],["backtrace",3]]],[11,"force_capture","","Forcibly captures a full backtrace, regardless of …",102,[[],["backtrace",3]]],[11,"disabled","","Forcibly captures a disabled backtrace, regardless of …",102,[[],["backtrace",3]]],[11,"status","","Returns the status of this backtrace, indicating whether …",102,[[],["backtracestatus",4]]],[0,"collections","std","Collection types.",null,null],[0,"binary_heap","std::collections","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","std::collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[3,"PeekMut","","Structure wrapping a mutable reference to the greatest …",null,null],[3,"Iter","","An iterator over the elements of a <code>BinaryHeap</code>.",null,null],[3,"IntoIter","","An owning iterator over the elements of a <code>BinaryHeap</code>.",null,null],[3,"IntoIterSorted","","",null,null],[3,"Drain","","A draining iterator over the elements of a <code>BinaryHeap</code>.",null,null],[3,"DrainSorted","","A draining iterator over the elements of a <code>BinaryHeap</code>.",null,null],[0,"btree_map","std::collections","A map based on a B-Tree.",null,null],[4,"Entry","std::collections::btree_map","A view into a single entry in a map, which may either be …",null,null],[13,"Vacant","","A vacant entry.",103,null],[13,"Occupied","","An occupied entry.",103,null],[3,"OccupiedEntry","","A view into an occupied entry in a <code>BTreeMap</code>. It is part …",null,null],[3,"VacantEntry","","A view into a vacant entry in a <code>BTreeMap</code>. It is part of …",null,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[3,"Iter","","An iterator over the entries of a <code>BTreeMap</code>.",null,null],[3,"IntoIter","","An owning iterator over the entries of a <code>BTreeMap</code>.",null,null],[3,"Keys","","An iterator over the keys of a <code>BTreeMap</code>.",null,null],[3,"Values","","An iterator over the values of a <code>BTreeMap</code>.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a <code>BTreeMap</code>.",null,null],[3,"IntoKeys","","An owning iterator over the keys of a <code>BTreeMap</code>.",null,null],[3,"IntoValues","","An owning iterator over the values of a <code>BTreeMap</code>.",null,null],[3,"Range","","An iterator over a sub-range of entries in a <code>BTreeMap</code>.",null,null],[3,"RangeMut","","A mutable iterator over a sub-range of entries in a …",null,null],[3,"DrainFilter","","An iterator produced by calling <code>drain_filter</code> on BTreeMap.",null,null],[3,"IterMut","","A mutable iterator over the entries of a <code>BTreeMap</code>.",null,null],[0,"btree_set","std::collections","A set based on a B-Tree.",null,null],[3,"Iter","std::collections::btree_set","An iterator over the items of a <code>BTreeSet</code>.",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of …",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric …",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of …",null,null],[3,"Union","","A lazy iterator producing elements in the union of …",null,null],[3,"DrainFilter","","An iterator produced by calling <code>drain_filter</code> on BTreeSet.",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[3,"IntoIter","","An owning iterator over the items of a <code>BTreeSet</code>.",null,null],[3,"Range","","An iterator over a sub-range of items in a <code>BTreeSet</code>.",null,null],[0,"linked_list","std::collections","A doubly-linked list with owned nodes.",null,null],[3,"LinkedList","std::collections::linked_list","A doubly-linked list with owned nodes.",null,null],[3,"Iter","","An iterator over the elements of a <code>LinkedList</code>.",null,null],[3,"IterMut","","A mutable iterator over the elements of a <code>LinkedList</code>.",null,null],[3,"IntoIter","","An owning iterator over the elements of a <code>LinkedList</code>.",null,null],[3,"Cursor","","A cursor over a <code>LinkedList</code>.",null,null],[3,"CursorMut","","A cursor over a <code>LinkedList</code> with editing operations.",null,null],[3,"DrainFilter","","An iterator produced by calling <code>drain_filter</code> on …",null,null],[0,"vec_deque","std::collections","A double-ended queue implemented with a growable ring …",null,null],[3,"VecDeque","std::collections::vec_deque","A double-ended queue implemented with a growable ring …",null,null],[3,"Drain","","A draining iterator over the elements of a <code>VecDeque</code>.",null,null],[3,"IterMut","","A mutable iterator over the elements of a <code>VecDeque</code>.",null,null],[3,"IntoIter","","An owning iterator over the elements of a <code>VecDeque</code>.",null,null],[3,"Iter","","An iterator over the elements of a <code>VecDeque</code>.",null,null],[3,"BTreeMap","std::collections","A map based on a B-Tree.",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[3,"BinaryHeap","","A priority queue implemented with a binary heap.",null,null],[3,"LinkedList","","A doubly-linked list with owned nodes.",null,null],[3,"VecDeque","","A double-ended queue implemented with a growable ring …",null,null],[4,"TryReserveError","","The error type for <code>try_reserve</code> methods.",null,null],[13,"CapacityOverflow","","Error due to the computed capacity exceeding the …",104,null],[13,"AllocError","","The memory allocator returned an error",104,null],[12,"layout","std::collections::TryReserveError","The layout of allocation request that failed",105,null],[0,"hash_map","std::collections","A hash map implemented with quadratic probing and SIMD …",null,null],[3,"HashMap","std::collections::hash_map","A hash map implemented with quadratic probing and SIMD …",null,null],[3,"Iter","","An iterator over the entries of a <code>HashMap</code>.",null,null],[3,"IterMut","","A mutable iterator over the entries of a <code>HashMap</code>.",null,null],[3,"IntoIter","","An owning iterator over the entries of a <code>HashMap</code>.",null,null],[3,"Keys","","An iterator over the keys of a <code>HashMap</code>.",null,null],[3,"Values","","An iterator over the values of a <code>HashMap</code>.",null,null],[3,"Drain","","A draining iterator over the entries of a <code>HashMap</code>.",null,null],[3,"DrainFilter","","A draining, filtering iterator over the entries of a …",null,null],[3,"ValuesMut","","A mutable iterator over the values of a <code>HashMap</code>.",null,null],[3,"IntoKeys","","An owning iterator over the keys of a <code>HashMap</code>.",null,null],[3,"IntoValues","","An owning iterator over the values of a <code>HashMap</code>.",null,null],[3,"RawEntryBuilderMut","","A builder for computing where in a HashMap a key-value …",null,null],[4,"RawEntryMut","","A view into a single entry in a map, which may either be …",null,null],[13,"Occupied","","An occupied entry.",106,null],[13,"Vacant","","A vacant entry.",106,null],[3,"RawOccupiedEntryMut","","A view into an occupied entry in a <code>HashMap</code>. It is part of …",null,null],[3,"RawVacantEntryMut","","A view into a vacant entry in a <code>HashMap</code>. It is part of …",null,null],[3,"RawEntryBuilder","","A builder for computing where in a HashMap a key-value …",null,null],[4,"Entry","","A view into a single entry in a map, which may either be …",null,null],[13,"Occupied","","An occupied entry.",107,null],[13,"Vacant","","A vacant entry.",107,null],[3,"OccupiedEntry","","A view into an occupied entry in a <code>HashMap</code>. It is part of …",null,null],[3,"VacantEntry","","A view into a vacant entry in a <code>HashMap</code>. It is part of …",null,null],[3,"RandomState","","<code>RandomState</code> is the default state for [<code>HashMap</code>] types.",null,null],[3,"DefaultHasher","","The default [<code>Hasher</code>] used by [<code>RandomState</code>].",null,null],[0,"hash_set","std::collections","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.",null,null],[3,"HashSet","std::collections::hash_set","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.",null,null],[3,"Iter","","An iterator over the items of a <code>HashSet</code>.",null,null],[3,"IntoIter","","An owning iterator over the items of a <code>HashSet</code>.",null,null],[3,"Drain","","A draining iterator over the items of a <code>HashSet</code>.",null,null],[3,"DrainFilter","","A draining, filtering iterator over the items of a <code>HashSet</code>…",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of …",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of …",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric …",null,null],[3,"Union","","A lazy iterator producing elements in the union of <code>HashSet</code>…",null,null],[3,"HashMap","std::collections","A hash map implemented with quadratic probing and SIMD …",null,null],[3,"HashSet","","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.",null,null],[0,"env","std","Inspection and manipulation of the process\'s environment.",null,null],[0,"consts","std::env","Constants associated with the current target",null,null],[17,"ARCH","std::env::consts","A string describing the architecture of the CPU that is …",null,null],[17,"FAMILY","","The family of the operating system. Example value is <code>unix</code>.",null,null],[17,"OS","","A string describing the specific operating system in use. …",null,null],[17,"DLL_PREFIX","","Specifies the filename prefix used for shared libraries …",null,null],[17,"DLL_SUFFIX","","Specifies the filename suffix used for shared libraries …",null,null],[17,"DLL_EXTENSION","","Specifies the file extension used for shared libraries on …",null,null],[17,"EXE_SUFFIX","","Specifies the filename suffix used for executable …",null,null],[17,"EXE_EXTENSION","","Specifies the file extension, if any, used for executable …",null,null],[5,"current_dir","std::env","Returns the current working directory as a [<code>PathBuf</code>].",null,[[],[["pathbuf",3],["result",6]]]],[5,"set_current_dir","","Changes the current working directory to the specified …",null,[[["asref",8],["path",3]],["result",6]]],[3,"Vars","","An iterator over a snapshot of the environment variables …",null,null],[3,"VarsOs","","An iterator over a snapshot of the environment variables …",null,null],[5,"vars","","Returns an iterator of (variable, value) pairs of …",null,[[],["vars",3]]],[5,"vars_os","","Returns an iterator of (variable, value) pairs of OS …",null,[[],["varsos",3]]],[5,"var","","Fetches the environment variable <code>key</code> from the current …",null,[[["asref",8],["osstr",3]],[["result",4],["string",3],["varerror",4]]]],[5,"var_os","","Fetches the environment variable <code>key</code> from the current …",null,[[["asref",8],["osstr",3]],[["osstring",3],["option",4]]]],[4,"VarError","","The error type for operations interacting with …",null,null],[13,"NotPresent","","The specified environment variable was not present in the …",108,null],[13,"NotUnicode","","The specified environment variable was found, but it did …",108,null],[5,"set_var","","Sets the environment variable <code>k</code> to the value <code>v</code> for the …",null,[[["asref",8],["osstr",3]]]],[5,"remove_var","","Removes an environment variable from the environment of …",null,[[["asref",8],["osstr",3]]]],[3,"SplitPaths","","An iterator that splits an environment variable into …",null,null],[5,"split_paths","","Parses input according to platform conventions for the …",null,[[],["splitpaths",3]]],[3,"JoinPathsError","","The error type for operations on the <code>PATH</code> variable. …",null,null],[5,"join_paths","","Joins a collection of [<code>Path</code>]s appropriately for the <code>PATH</code> …",null,[[],[["joinpathserror",3],["result",4],["osstring",3]]]],[5,"home_dir","","Returns the path of the current user\'s home directory if …",null,[[],[["option",4],["pathbuf",3]]]],[5,"temp_dir","","Returns the path of a temporary directory.",null,[[],["pathbuf",3]]],[5,"current_exe","","Returns the full filesystem path of the current running …",null,[[],[["pathbuf",3],["result",6]]]],[3,"Args","","An iterator over the arguments of a process, yielding a […",null,null],[3,"ArgsOs","","An iterator over the arguments of a process, yielding an […",null,null],[5,"args","","Returns the arguments that this program was started with …",null,[[],["args",3]]],[5,"args_os","","Returns the arguments which this program was started with …",null,[[],["argsos",3]]],[0,"error","std","Traits for working with Errors.",null,null],[8,"Error","std::error","<code>Error</code> is a trait representing the basic expectations for …",null,null],[11,"source","","The lower-level source of this error, if any.",109,[[],[["option",4],["error",8]]]],[11,"backtrace","","Returns a stack backtrace, if available, of where this …",109,[[],[["backtrace",3],["option",4]]]],[11,"description","","",109,[[]]],[11,"cause","","",109,[[],[["error",8],["option",4]]]],[11,"is","","Returns <code>true</code> if the boxed type is the same as <code>T</code>",109,[[]]],[11,"downcast_ref","","Returns some reference to the boxed value if it is of …",109,[[],["option",4]]],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it …",109,[[],["option",4]]],[11,"is","","Forwards to the method defined on the type <code>dyn Error</code>.",109,[[]]],[11,"downcast_ref","","Forwards to the method defined on the type <code>dyn Error</code>.",109,[[],["option",4]]],[11,"downcast_mut","","Forwards to the method defined on the type <code>dyn Error</code>.",109,[[],["option",4]]],[11,"is","","Forwards to the method defined on the type <code>dyn Error</code>.",109,[[]]],[11,"downcast_ref","","Forwards to the method defined on the type <code>dyn Error</code>.",109,[[],["option",4]]],[11,"downcast_mut","","Forwards to the method defined on the type <code>dyn Error</code>.",109,[[],["option",4]]],[11,"downcast","","Attempts to downcast the box to a concrete type.",109,[[["box",3]],[["box",3],["result",4],["box",3]]]],[11,"chain","","Returns an iterator starting with the current error and …",109,[[],["chain",3]]],[3,"Chain","","An iterator over an [<code>Error</code>] and its sources.",null,null],[11,"downcast","","Attempts to downcast the box to a concrete type.",109,[[["box",3]],[["box",3],["result",4],["box",3]]]],[11,"downcast","","Attempts to downcast the box to a concrete type.",109,[[["box",3]],[["box",3],["result",4],["box",3]]]],[0,"ffi","std","Utilities related to FFI bindings.",null,null],[4,"c_void","std::ffi","Equivalent to C\'s <code>void</code> type when used as a pointer.",null,null],[3,"VaList","","A wrapper for a <code>va_list</code>",null,null],[3,"VaListImpl","","x86_64 ABI implementation of a <code>va_list</code>.",null,null],[3,"FromBytesWithNulError","","An error indicating that a nul byte was not in the …",null,null],[3,"FromVecWithNulError","","An error indicating that a nul byte was not in the …",null,null],[3,"CStr","","Representation of a borrowed C string.",null,null],[3,"CString","","A type representing an owned, C-compatible, …",null,null],[3,"IntoStringError","","An error indicating invalid UTF-8 when converting a […",null,null],[3,"NulError","","An error indicating that an interior nul byte was found.",null,null],[3,"OsStr","","Borrowed reference to an OS string (see [<code>OsString</code>]).",null,null],[3,"OsString","","A type that can represent owned, mutable platform-native …",null,null],[0,"fs","std","Filesystem manipulation operations.",null,null],[3,"File","std::fs","A reference to an open file on the filesystem.",null,null],[3,"Metadata","","Metadata information about a file.",null,null],[3,"ReadDir","","Iterator over the entries in a directory.",null,null],[3,"DirEntry","","Entries returned by the [<code>ReadDir</code>] iterator.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a …",null,null],[3,"Permissions","","Representation of the various permissions on a file.",null,null],[3,"FileType","","A structure representing a type of file with accessors …",null,null],[3,"DirBuilder","","A builder used to create directories in various manners.",null,null],[5,"read","","Read the entire contents of a file into a bytes vector.",null,[[["asref",8],["path",3]],[["result",6],["vec",3]]]],[5,"read_to_string","","Read the entire contents of a file into a string.",null,[[["asref",8],["path",3]],[["result",6],["string",3]]]],[5,"write","","Write a slice as the entire contents of a file.",null,[[["asref",8],["asref",8],["path",3]],["result",6]]],[11,"open","","Attempts to open a file in read-only mode.",110,[[["asref",8],["path",3]],[["result",6],["file",3]]]],[11,"create","","Opens a file in write-only mode.",110,[[["asref",8],["path",3]],[["result",6],["file",3]]]],[11,"with_options","","Returns a new OpenOptions object.",110,[[],["openoptions",3]]],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",110,[[],["result",6]]],[11,"sync_data","","This function is similar to <code>sync_all</code>, except that it may …",110,[[],["result",6]]],[11,"set_len","","Truncates or extends the underlying file, updating the …",110,[[],["result",6]]],[11,"metadata","","Queries metadata about the underlying file.",110,[[],[["result",6],["metadata",3]]]],[11,"try_clone","","Creates a new <code>File</code> instance that shares the same …",110,[[],[["result",6],["file",3]]]],[11,"set_permissions","","Changes the permissions on the underlying file.",110,[[["permissions",3]],["result",6]]],[11,"new","","Creates a blank new set of options ready for …",111,[[]]],[11,"read","","Sets the option for read access.",111,[[]]],[11,"write","","Sets the option for write access.",111,[[]]],[11,"append","","Sets the option for the append mode.",111,[[]]],[11,"truncate","","Sets the option for truncating a previous file.",111,[[]]],[11,"create","","Sets the option to create a new file, or open it if it …",111,[[]]],[11,"create_new","","Sets the option to create a new file, failing if it …",111,[[]]],[11,"open","","Opens a file at <code>path</code> with the options specified by <code>self</code>.",111,[[["asref",8],["path",3]],[["result",6],["file",3]]]],[11,"file_type","","Returns the file type for this metadata.",112,[[],["filetype",3]]],[11,"is_dir","","Returns <code>true</code> if this metadata is for a directory. The …",112,[[]]],[11,"is_file","","Returns <code>true</code> if this metadata is for a regular file. The …",112,[[]]],[11,"len","","Returns the size of the file, in bytes, this metadata is …",112,[[]]],[11,"permissions","","Returns the permissions of the file this metadata is for.",112,[[],["permissions",3]]],[11,"modified","","Returns the last modification time listed in this …",112,[[],[["systemtime",3],["result",6]]]],[11,"accessed","","Returns the last access time of this metadata.",112,[[],[["systemtime",3],["result",6]]]],[11,"created","","Returns the creation time listed in this metadata.",112,[[],[["systemtime",3],["result",6]]]],[11,"readonly","","Returns <code>true</code> if these permissions describe a readonly …",113,[[]]],[11,"set_readonly","","Modifies the readonly flag for this set of permissions. …",113,[[]]],[11,"is_dir","","Tests whether this file type represents a directory. The …",114,[[]]],[11,"is_file","","Tests whether this file type represents a regular file. …",114,[[]]],[11,"is_symlink","","Tests whether this file type represents a symbolic link. …",114,[[]]],[11,"path","","Returns the full path to the file that this entry …",115,[[],["pathbuf",3]]],[11,"metadata","","Returns the metadata for the file that this entry points …",115,[[],[["result",6],["metadata",3]]]],[11,"file_type","","Returns the file type for the file that this entry points …",115,[[],[["filetype",3],["result",6]]]],[11,"file_name","","Returns the bare file name of this directory entry …",115,[[],["osstring",3]]],[5,"remove_file","","Removes a file from the filesystem.",null,[[["asref",8],["path",3]],["result",6]]],[5,"metadata","","Given a path, query the file system to get information …",null,[[["asref",8],["path",3]],[["result",6],["metadata",3]]]],[5,"symlink_metadata","","Query the metadata about a file without following …",null,[[["asref",8],["path",3]],[["result",6],["metadata",3]]]],[5,"rename","","Rename a file or directory to a new name, replacing the …",null,[[["asref",8],["path",3]],["result",6]]],[5,"copy","","Copies the contents of one file to another. This function …",null,[[["asref",8],["path",3]],["result",6]]],[5,"hard_link","","Creates a new hard link on the filesystem.",null,[[["asref",8],["path",3]],["result",6]]],[5,"soft_link","","Creates a new symbolic link on the filesystem.",null,[[["asref",8],["path",3]],["result",6]]],[5,"read_link","","Reads a symbolic link, returning the file that the link …",null,[[["asref",8],["path",3]],[["pathbuf",3],["result",6]]]],[5,"canonicalize","","Returns the canonical, absolute form of a path with all …",null,[[["asref",8],["path",3]],[["pathbuf",3],["result",6]]]],[5,"create_dir","","Creates a new, empty directory at the provided path",null,[[["asref",8],["path",3]],["result",6]]],[5,"create_dir_all","","Recursively create a directory and all of its parent …",null,[[["asref",8],["path",3]],["result",6]]],[5,"remove_dir","","Removes an empty directory.",null,[[["asref",8],["path",3]],["result",6]]],[5,"remove_dir_all","","Removes a directory at this path, after removing all its …",null,[[["asref",8],["path",3]],["result",6]]],[5,"read_dir","","Returns an iterator over the entries within a directory.",null,[[["asref",8],["path",3]],[["result",6],["readdir",3]]]],[5,"set_permissions","","Changes the permissions found on a file or a directory.",null,[[["permissions",3],["asref",8],["path",3]],["result",6]]],[11,"new","","Creates a new set of options with default mode/security …",116,[[],["dirbuilder",3]]],[11,"recursive","","Indicates that directories should be created recursively, …",116,[[]]],[11,"create","","Creates the specified directory with the options …",116,[[["asref",8],["path",3]],["result",6]]],[0,"io","std","Traits, helpers, and type definitions for core I/O …",null,null],[0,"prelude","std::io","The I/O Prelude",null,null],[3,"IntoInnerError","","An error returned by [<code>BufWriter::into_inner</code>] which …",null,null],[3,"BufReader","","The <code>BufReader<R></code> struct adds buffering to any reader.",null,null],[3,"BufWriter","","Wraps a writer and buffers its output.",null,null],[3,"LineWriter","","Wraps a writer and buffers output to it, flushing …",null,null],[5,"copy","","Copies the entire contents of a reader into a writer.",null,[[],["result",6]]],[3,"Cursor","","A <code>Cursor</code> wraps an in-memory buffer and provides it with a …",null,null],[3,"Error","","The error type for I/O operations of the <code>Read</code>, <code>Write</code>, <code>Seek</code>…",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",117,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",117,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",117,null],[13,"ConnectionReset","","The connection was reset by the remote server.",117,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote …",117,null],[13,"NotConnected","","The network operation failed because it was not connected …",117,null],[13,"AddrInUse","","A socket address could not be bound because the address …",117,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested …",117,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",117,null],[13,"AlreadyExists","","An entity already exists, often a file.",117,null],[13,"WouldBlock","","The operation needs to block to complete, but the …",117,null],[13,"InvalidInput","","A parameter was incorrect.",117,null],[13,"InvalidData","","Data not valid for the operation were encountered.",117,null],[13,"TimedOut","","The I/O operation\'s timeout expired, causing it to be …",117,null],[13,"WriteZero","","An error returned when an operation could not be …",117,null],[13,"Interrupted","","This operation was interrupted.",117,null],[13,"Other","","Any I/O error not part of this list.",117,null],[13,"UnexpectedEof","","An error returned when an operation could not be …",117,null],[6,"Result","","A specialized <code>Result</code> type for I/O operations.",null,null],[5,"stderr","","Constructs a new handle to the standard error of the …",null,[[],["stderr",3]]],[5,"stdin","","Constructs a new handle to the standard input of the …",null,[[],["stdin",3]]],[5,"stdout","","Constructs a new handle to the standard output of the …",null,[[],["stdout",3]]],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[3,"Stdout","","A handle to the global standard output stream of the …",null,null],[3,"StderrLock","","A locked reference to the <code>Stderr</code> handle.",null,null],[3,"StdinLock","","A locked reference to the <code>Stdin</code> handle.",null,null],[3,"StdoutLock","","A locked reference to the <code>Stdout</code> handle.",null,null],[5,"empty","","Constructs a new handle to an empty reader.",null,[[],["empty",3]]],[5,"repeat","","Creates an instance of a reader that infinitely repeats …",null,[[],["repeat",3]]],[5,"sink","","Creates an instance of a writer which will successfully …",null,[[],["sink",3]]],[3,"Empty","","A reader which is always at EOF.",null,null],[3,"Repeat","","A reader which yields one byte over and over and over and …",null,null],[3,"Sink","","A writer which will move data into the void.",null,null],[8,"Read","","The <code>Read</code> trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified …",118,[[],["result",6]]],[11,"read_vectored","","Like <code>read</code>, except that it reads into a slice of buffers.",118,[[],["result",6]]],[11,"is_read_vectored","","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …",118,[[]]],[11,"initializer","","Determines if this <code>Read</code>er can work with buffers of …",118,[[],["initializer",3]]],[11,"read_to_end","","Read all bytes until EOF in this source, placing them …",118,[[["vec",3]],["result",6]]],[11,"read_to_string","","Read all bytes until EOF in this source, appending them …",118,[[["string",3]],["result",6]]],[11,"read_exact","","Read the exact number of bytes required to fill <code>buf</code>.",118,[[],["result",6]]],[11,"by_ref","","Creates a \\\"by reference\\\" adaptor for this instance of <code>Read</code>…",118,[[]]],[11,"bytes","","Transforms this <code>Read</code> instance to an [<code>Iterator</code>] over its …",118,[[],["bytes",3]]],[11,"chain","","Creates an adaptor which will chain this stream with …",118,[[["read",8]],[["read",8],["chain",3]]]],[11,"take","","Creates an adaptor which will read at most <code>limit</code> bytes …",118,[[],["take",3]]],[3,"IoSliceMut","","A buffer type used with <code>Read::read_vectored</code>.",null,null],[11,"new","","Creates a new <code>IoSliceMut</code> wrapping a byte slice.",119,[[],["ioslicemut",3]]],[11,"advance","","Advance the internal cursor of the slice.",119,[[]]],[3,"IoSlice","","A buffer type used with <code>Write::write_vectored</code>.",null,null],[11,"new","","Creates a new <code>IoSlice</code> wrapping a byte slice.",120,[[],["ioslice",3]]],[11,"advance","","Advance the internal cursor of the slice.",120,[[]]],[3,"Initializer","","A type used to conditionally initialize buffers passed to …",null,null],[11,"zeroing","","Returns a new <code>Initializer</code> which will zero out buffers.",121,[[],["initializer",3]]],[11,"nop","","Returns a new <code>Initializer</code> which will not zero out buffers.",121,[[],["initializer",3]]],[11,"should_initialize","","Indicates if a buffer should be initialized.",121,[[]]],[11,"initialize","","Initializes a buffer if necessary.",121,[[]]],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this writer, returning how many bytes …",122,[[],["result",6]]],[11,"write_vectored","","Like <code>write</code>, except that it writes from a slice of buffers.",122,[[],["result",6]]],[11,"is_write_vectored","","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …",122,[[]]],[10,"flush","","Flush this output stream, ensuring that all …",122,[[],["result",6]]],[11,"write_all","","Attempts to write an entire buffer into this writer.",122,[[],["result",6]]],[11,"write_all_vectored","","Attempts to write multiple buffers into this writer.",122,[[],["result",6]]],[11,"write_fmt","","Writes a formatted string into this writer, returning any …",122,[[["arguments",3]],["result",6]]],[11,"by_ref","","Creates a \\\"by reference\\\" adaptor for this instance of …",122,[[]]],[8,"Seek","","The <code>Seek</code> trait provides a cursor which can be moved …",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",123,[[["seekfrom",4]],["result",6]]],[11,"stream_len","","Returns the length of this stream (in bytes).",123,[[],["result",6]]],[11,"stream_position","","Returns the current seek position from the start of the …",123,[[],["result",6]]],[4,"SeekFrom","","Enumeration of possible methods to seek within an I/O …",null,null],[13,"Start","","Sets the offset to the provided number of bytes.",124,null],[13,"End","","Sets the offset to the size of this object plus the …",124,null],[13,"Current","","Sets the offset to the current position plus the …",124,null],[8,"BufRead","","A <code>BufRead</code> is a type of <code>Read</code>er which has an internal …",null,null],[10,"fill_buf","","Returns the contents of the internal buffer, filling it …",125,[[],["result",6]]],[10,"consume","","Tells this buffer that <code>amt</code> bytes have been consumed from …",125,[[]]],[11,"read_until","","Read all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF …",125,[[["vec",3]],["result",6]]],[11,"read_line","","Read all bytes until a newline (the <code>0xA</code> byte) is reached, …",125,[[["string",3]],["result",6]]],[11,"split","","Returns an iterator over the contents of this reader …",125,[[],["split",3]]],[11,"lines","","Returns an iterator over the lines of this reader.",125,[[],["lines",3]]],[3,"Chain","","Adaptor to chain together two readers.",null,null],[11,"into_inner","","Consumes the <code>Chain</code>, returning the wrapped readers.",126,[[]]],[11,"get_ref","","Gets references to the underlying readers in this <code>Chain</code>.",126,[[]]],[11,"get_mut","","Gets mutable references to the underlying readers in this …",126,[[]]],[3,"Take","","Reader adaptor which limits the bytes read from an …",null,null],[11,"limit","","Returns the number of bytes that can be read before this …",127,[[]]],[11,"set_limit","","Sets the number of bytes that can be read before this …",127,[[]]],[11,"into_inner","","Consumes the <code>Take</code>, returning the wrapped reader.",127,[[]]],[11,"get_ref","","Gets a reference to the underlying reader.",127,[[]]],[11,"get_mut","","Gets a mutable reference to the underlying reader.",127,[[]]],[3,"Bytes","","An iterator over <code>u8</code> values of a reader.",null,null],[3,"Split","","An iterator over the contents of an instance of <code>BufRead</code> …",null,null],[3,"Lines","","An iterator over the lines of an instance of <code>BufRead</code>.",null,null],[0,"net","std","Networking primitives for TCP/UDP communication.",null,null],[4,"SocketAddr","std::net","An internet socket address, either IPv4 or IPv6.",null,null],[13,"V4","","An IPv4 socket address.",128,null],[13,"V6","","An IPv6 socket address.",128,null],[3,"SocketAddrV4","","An IPv4 socket address.",null,null],[3,"SocketAddrV6","","An IPv6 socket address.",null,null],[8,"ToSocketAddrs","","A trait for objects which can be converted or resolved to …",null,null],[16,"Iter","","Returned iterator over socket addresses which this type …",129,null],[10,"to_socket_addrs","","Converts this object to an iterator of resolved <code>SocketAddr</code>…",129,[[],["result",6]]],[4,"IpAddr","","An IP address, either IPv4 or IPv6.",null,null],[13,"V4","","An IPv4 address.",130,null],[13,"V6","","An IPv6 address.",130,null],[3,"Ipv4Addr","","An IPv4 address.",null,null],[3,"Ipv6Addr","","An IPv6 address.",null,null],[4,"Ipv6MulticastScope","","",null,null],[13,"InterfaceLocal","","",131,null],[13,"LinkLocal","","",131,null],[13,"RealmLocal","","",131,null],[13,"AdminLocal","","",131,null],[13,"SiteLocal","","",131,null],[13,"OrganizationLocal","","",131,null],[13,"Global","","",131,null],[3,"AddrParseError","","An error which can be returned when parsing an IP address …",null,null],[3,"Incoming","","An iterator that infinitely <code>accept</code>s connections on a […",null,null],[3,"TcpListener","","A TCP socket server, listening for connections.",null,null],[3,"TcpStream","","A TCP stream between a local and a remote socket.",null,null],[3,"UdpSocket","","A UDP socket.",null,null],[4,"Shutdown","","Possible values which can be passed to the […",null,null],[13,"Read","","The reading portion of the [<code>TcpStream</code>] should be shut …",132,null],[13,"Write","","The writing portion of the [<code>TcpStream</code>] should be shut …",132,null],[13,"Both","","Both the reading and the writing portions of the […",132,null],[0,"num","std","Additional functionality for numerics.",null,null],[3,"Wrapping","std::num","Provides intentionally-wrapped arithmetic on <code>T</code>.",null,null],[12,"0","","",133,null],[4,"FpCategory","","A classification of floating point numbers.",null,null],[13,"Nan","","\\\"Not a Number\\\", often obtained by dividing by zero.",134,null],[13,"Infinite","","Positive or negative infinity.",134,null],[13,"Zero","","Positive or negative zero.",134,null],[13,"Subnormal","","De-normalized floating point representation (less precise …",134,null],[13,"Normal","","A regular floating point number.",134,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[3,"TryFromIntError","","The error type returned when a checked integral type …",null,null],[3,"NonZeroI128","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI16","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI32","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI64","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI8","","An integer that is known not to equal zero.",null,null],[3,"NonZeroIsize","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU128","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU16","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU32","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU64","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU8","","An integer that is known not to equal zero.",null,null],[3,"NonZeroUsize","","An integer that is known not to equal zero.",null,null],[4,"IntErrorKind","","Enum to store the various types of errors that can cause …",null,null],[13,"Empty","","Value being parsed is empty.",135,null],[13,"InvalidDigit","","Contains an invalid digit in its context.",135,null],[13,"PosOverflow","","Integer is too large to store in target integer type.",135,null],[13,"NegOverflow","","Integer is too small to store in target integer type.",135,null],[13,"Zero","","Value was Zero",135,null],[0,"os","std","OS-specific functionality.",null,null],[0,"unix","std::os","Platform-specific extensions to <code>std</code> for Unix platforms.",null,null],[0,"ffi","std::os::unix","Unix-specific extension to the primitives in the <code>std::ffi</code> …",null,null],[8,"OsStringExt","std::os::unix::ffi","Platform-specific extensions to [<code>OsString</code>].",null,null],[10,"from_vec","","Creates an [<code>OsString</code>] from a byte vector.",136,[[["vec",3]]]],[10,"into_vec","","Yields the underlying byte vector of this [<code>OsString</code>].",136,[[],["vec",3]]],[8,"OsStrExt","","Platform-specific extensions to [<code>OsStr</code>].",null,null],[10,"from_bytes","","Creates an [<code>OsStr</code>] from a byte slice.",137,[[]]],[10,"as_bytes","","Gets the underlying byte view of the [<code>OsStr</code>] slice.",137,[[]]],[0,"fs","std::os::unix","Unix-specific extensions to primitives in the <code>std::fs</code> …",null,null],[8,"FileExt","std::os::unix::fs","Unix-specific extensions to [<code>fs::File</code>].",null,null],[10,"read_at","","Reads a number of bytes starting from a given offset.",138,[[],["result",6]]],[11,"read_exact_at","","Reads the exact number of byte required to fill <code>buf</code> from …",138,[[],["result",6]]],[10,"write_at","","Writes a number of bytes starting from a given offset.",138,[[],["result",6]]],[11,"write_all_at","","Attempts to write an entire buffer starting from a given …",138,[[],["result",6]]],[8,"PermissionsExt","","Unix-specific extensions to [<code>fs::Permissions</code>].",null,null],[10,"mode","","Returns the underlying raw <code>st_mode</code> bits that contain the …",139,[[]]],[10,"set_mode","","Sets the underlying raw bits for this set of permissions.",139,[[]]],[10,"from_mode","","Creates a new instance of <code>Permissions</code> from the given set …",139,[[]]],[8,"OpenOptionsExt","","Unix-specific extensions to [<code>fs::OpenOptions</code>].",null,null],[10,"mode","","Sets the mode bits that a new file will be created with.",140,[[]]],[10,"custom_flags","","Pass custom flags to the <code>flags</code> argument of <code>open</code>.",140,[[]]],[8,"MetadataExt","","Unix-specific extensions to [<code>fs::Metadata</code>].",null,null],[10,"dev","","Returns the ID of the device containing the file.",141,[[]]],[10,"ino","","Returns the inode number.",141,[[]]],[10,"mode","","Returns the rights applied to this file.",141,[[]]],[10,"nlink","","Returns the number of hard links pointing to this file.",141,[[]]],[10,"uid","","Returns the user ID of the owner of this file.",141,[[]]],[10,"gid","","Returns the group ID of the owner of this file.",141,[[]]],[10,"rdev","","Returns the device ID of this file (if it is a special …",141,[[]]],[10,"size","","Returns the total size of this file in bytes.",141,[[]]],[10,"atime","","Returns the last access time of the file, in seconds …",141,[[]]],[10,"atime_nsec","","Returns the last access time of the file, in nanoseconds …",141,[[]]],[10,"mtime","","Returns the last modification time of the file, in …",141,[[]]],[10,"mtime_nsec","","Returns the last modification time of the file, in …",141,[[]]],[10,"ctime","","Returns the last status change time of the file, in …",141,[[]]],[10,"ctime_nsec","","Returns the last status change time of the file, in …",141,[[]]],[10,"blksize","","Returns the block size for filesystem I/O.",141,[[]]],[10,"blocks","","Returns the number of blocks allocated to the file, in …",141,[[]]],[8,"FileTypeExt","","Unix-specific extensions for [<code>fs::FileType</code>].",null,null],[10,"is_block_device","","Returns <code>true</code> if this file type is a block device.",142,[[]]],[10,"is_char_device","","Returns <code>true</code> if this file type is a char device.",142,[[]]],[10,"is_fifo","","Returns <code>true</code> if this file type is a fifo.",142,[[]]],[10,"is_socket","","Returns <code>true</code> if this file type is a socket.",142,[[]]],[8,"DirEntryExt","","Unix-specific extension methods for [<code>fs::DirEntry</code>].",null,null],[10,"ino","","Returns the underlying <code>d_ino</code> field in the contained <code>dirent</code>…",143,[[]]],[5,"symlink","","Creates a new symbolic link on the filesystem.",null,[[["asref",8],["path",3]],["result",6]]],[8,"DirBuilderExt","","Unix-specific extensions to [<code>fs::DirBuilder</code>].",null,null],[10,"mode","","Sets the mode to create new directories with. This option …",144,[[]]],[0,"io","std::os::unix","Unix-specific extensions to general I/O primitives.",null,null],[6,"RawFd","std::os::unix::io","Raw file descriptors.",null,null],[8,"AsRawFd","","A trait to extract the raw unix file descriptor from an …",null,null],[10,"as_raw_fd","","Extracts the raw file descriptor.",145,[[],["rawfd",6]]],[8,"FromRawFd","","A trait to express the ability to construct an object …",null,null],[10,"from_raw_fd","","Constructs a new instance of <code>Self</code> from the given raw file …",146,[[["rawfd",6]]]],[8,"IntoRawFd","","A trait to express the ability to consume an object and …",null,null],[10,"into_raw_fd","","Consumes this object, returning the raw underlying file …",147,[[],["rawfd",6]]],[0,"net","std::os::unix","Unix-specific networking functionality",null,null],[3,"SocketAddr","std::os::unix::net","An address associated with a Unix socket.",null,null],[3,"SocketCred","","Unix credential.",null,null],[3,"ScmRights","","This control message contains file descriptors.",null,null],[3,"ScmCredentials","","This control message contains unix credentials.",null,null],[4,"AncillaryError","","The error type which is returned from parsing the type a …",null,null],[13,"Unknown","","",148,null],[12,"cmsg_level","std::os::unix::net::AncillaryError","",149,null],[12,"cmsg_type","","",149,null],[4,"AncillaryData","std::os::unix::net","This enum represent one control message of variable type.",null,null],[13,"ScmRights","","",150,null],[13,"ScmCredentials","","",150,null],[3,"Messages","","This struct is used to iterate through the control …",null,null],[3,"SocketAncillary","","A Unix socket Ancillary data struct.",null,null],[3,"UnixDatagram","","A Unix datagram socket.",null,null],[3,"UnixListener","","A structure representing a Unix domain socket server.",null,null],[3,"Incoming","","An iterator over incoming connections to a [<code>UnixListener</code>].",null,null],[3,"UCred","","Credentials for a UNIX process for credentials passing.",null,null],[12,"uid","","The UID part of the peer credential. This is the …",151,null],[12,"gid","","The GID part of the peer credential. This is the …",151,null],[12,"pid","","The PID part of the peer credential. This field is …",151,null],[3,"UnixStream","","A Unix stream socket.",null,null],[0,"process","std::os::unix","Unix-specific extensions to primitives in the <code>std::process</code>…",null,null],[8,"CommandExt","std::os::unix::process","Unix-specific extensions to the [<code>process::Command</code>] …",null,null],[10,"uid","","Sets the child process\'s user ID. This translates to a …",152,[[],["command",3]]],[10,"gid","","Similar to <code>uid</code>, but sets the group ID of the child …",152,[[],["command",3]]],[10,"pre_exec","","Schedules a closure to be run just before the <code>exec</code> …",152,[[],["command",3]]],[11,"before_exec","","Schedules a closure to be run just before the <code>exec</code> …",152,[[],["command",3]]],[10,"exec","","Performs all the required setup by this <code>Command</code>, followed …",152,[[],["error",3]]],[10,"arg0","","Set executable argument",152,[[],["command",3]]],[8,"ExitStatusExt","","Unix-specific extensions to [<code>process::ExitStatus</code>].",null,null],[10,"from_raw","","Creates a new <code>ExitStatus</code> from the raw underlying <code>i32</code> …",153,[[]]],[10,"signal","","If the process was terminated by a signal, returns that …",153,[[],["option",4]]],[5,"parent_id","","Returns the OS-assigned process identifier associated …",null,[[]]],[0,"raw","std::os::unix","Unix-specific primitives available on all unix platforms.",null,null],[6,"uid_t","std::os::unix::raw","",null,null],[6,"gid_t","","",null,null],[6,"pid_t","","",null,null],[6,"pthread_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"time_t","","",null,null],[6,"blksize_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"off_t","","",null,null],[0,"thread","std::os::unix","Unix-specific extensions to primitives in the <code>std::thread</code> …",null,null],[6,"RawPthread","std::os::unix::thread","",null,null],[8,"JoinHandleExt","","Unix-specific extensions to [<code>JoinHandle</code>].",null,null],[10,"as_pthread_t","","Extracts the raw pthread_t without taking ownership",154,[[],["rawpthread",6]]],[10,"into_pthread_t","","Consumes the thread, returning the raw pthread_t",154,[[],["rawpthread",6]]],[0,"ucred","std::os::unix","Unix peer credentials.",null,null],[0,"impl_linux","std::os::unix::ucred","",null,null],[5,"peer_cred","std::os::unix::ucred::impl_linux","",null,[[["unixstream",3]],[["result",6],["ucred",3]]]],[3,"UCred","std::os::unix::ucred","Credentials for a UNIX process for credentials passing.",null,null],[12,"uid","","The UID part of the peer credential. This is the …",151,null],[12,"gid","","The GID part of the peer credential. This is the …",151,null],[12,"pid","","The PID part of the peer credential. This field is …",151,null],[5,"peer_cred","","",null,[[["unixstream",3]],[["result",6],["ucred",3]]]],[0,"prelude","std::os::unix","A prelude for conveniently writing platform-specific code.",null,null],[0,"windows","std::os","Platform-specific extensions to <code>std</code> for Windows.",null,null],[0,"ffi","std::os::windows","Windows-specific extensions to the primitives in the …",null,null],[3,"EncodeWide","std::os::windows::ffi","Generates a wide character sequence for potentially …",null,null],[8,"OsStringExt","","Windows-specific extensions to [<code>OsString</code>].",null,null],[10,"from_wide","","Creates an <code>OsString</code> from a potentially ill-formed UTF-16 …",155,[[]]],[8,"OsStrExt","","Windows-specific extensions to [<code>OsStr</code>].",null,null],[10,"encode_wide","","Re-encodes an <code>OsStr</code> as a wide character sequence, i.e., …",156,[[],["encodewide",3]]],[0,"fs","std::os::windows","Windows-specific extensions for the primitives in the …",null,null],[8,"FileExt","std::os::windows::fs","Windows-specific extensions to [<code>fs::File</code>].",null,null],[10,"seek_read","","Seeks to a given position and reads a number of bytes.",157,[[],["result",6]]],[10,"seek_write","","Seeks to a given position and writes a number of bytes.",157,[[],["result",6]]],[8,"OpenOptionsExt","","Windows-specific extensions to [<code>fs::OpenOptions</code>].",null,null],[10,"access_mode","","Overrides the <code>dwDesiredAccess</code> argument to the call to …",158,[[]]],[10,"share_mode","","Overrides the <code>dwShareMode</code> argument to the call to …",158,[[]]],[10,"custom_flags","","Sets extra flags for the <code>dwFileFlags</code> argument to the call …",158,[[]]],[10,"attributes","","Sets the <code>dwFileAttributes</code> argument to the call to …",158,[[]]],[10,"security_qos_flags","","Sets the <code>dwSecurityQosFlags</code> argument to the call to …",158,[[]]],[8,"MetadataExt","","Windows-specific extensions to [<code>fs::Metadata</code>].",null,null],[10,"file_attributes","","Returns the value of the <code>dwFileAttributes</code> field of this …",159,[[]]],[10,"creation_time","","Returns the value of the <code>ftCreationTime</code> field of this …",159,[[]]],[10,"last_access_time","","Returns the value of the <code>ftLastAccessTime</code> field of this …",159,[[]]],[10,"last_write_time","","Returns the value of the <code>ftLastWriteTime</code> field of this …",159,[[]]],[10,"file_size","","Returns the value of the <code>nFileSize{High,Low}</code> fields of …",159,[[]]],[10,"volume_serial_number","","Returns the value of the <code>dwVolumeSerialNumber</code> field of …",159,[[],["option",4]]],[10,"number_of_links","","Returns the value of the <code>nNumberOfLinks</code> field of this …",159,[[],["option",4]]],[10,"file_index","","Returns the value of the <code>nFileIndex{Low,High}</code> fields of …",159,[[],["option",4]]],[8,"FileTypeExt","","Windows-specific extensions to [<code>fs::FileType</code>].",null,null],[10,"is_symlink_dir","","Returns <code>true</code> if this file type is a symbolic link that is …",160,[[]]],[10,"is_symlink_file","","Returns <code>true</code> if this file type is a symbolic link that is …",160,[[]]],[5,"symlink_file","","Creates a new file symbolic link on the filesystem.",null,[[["asref",8],["path",3]],["result",6]]],[5,"symlink_dir","","Creates a new directory symlink on the filesystem.",null,[[["asref",8],["path",3]],["result",6]]],[0,"io","std::os::windows","Windows-specific extensions to general I/O primitives.",null,null],[6,"RawHandle","std::os::windows::io","Raw HANDLEs.",null,null],[6,"RawSocket","","Raw SOCKETs.",null,null],[8,"AsRawHandle","","Extracts raw handles.",null,null],[10,"as_raw_handle","","Extracts the raw handle, without taking any ownership.",161,[[],["rawhandle",6]]],[8,"FromRawHandle","","Construct I/O objects from raw handles.",null,null],[10,"from_raw_handle","","Constructs a new I/O object from the specified raw handle.",162,[[["rawhandle",6]]]],[8,"IntoRawHandle","","A trait to express the ability to consume an object and …",null,null],[10,"into_raw_handle","","Consumes this object, returning the raw underlying handle.",163,[[],["rawhandle",6]]],[8,"AsRawSocket","","Extracts raw sockets.",null,null],[10,"as_raw_socket","","Extracts the underlying raw socket from this object.",164,[[],["rawsocket",6]]],[8,"FromRawSocket","","Creates I/O objects from raw sockets.",null,null],[10,"from_raw_socket","","Creates a new I/O object from the given raw socket.",165,[[["rawsocket",6]]]],[8,"IntoRawSocket","","A trait to express the ability to consume an object and …",null,null],[10,"into_raw_socket","","Consumes this object, returning the raw underlying socket.",166,[[],["rawsocket",6]]],[0,"process","std::os::windows","Extensions to <code>std::process</code> for Windows.",null,null],[8,"ExitStatusExt","std::os::windows::process","Windows-specific extensions to [<code>process::ExitStatus</code>].",null,null],[10,"from_raw","","Creates a new <code>ExitStatus</code> from the raw underlying <code>u32</code> …",167,[[]]],[8,"CommandExt","","Windows-specific extensions to the [<code>process::Command</code>] …",null,null],[10,"creation_flags","","Sets the process creation flags to be passed to …",168,[[],["command",3]]],[0,"raw","std::os::windows","Windows-specific primitives.",null,null],[6,"HANDLE","std::os::windows::raw","",null,null],[6,"SOCKET","","",null,null],[0,"thread","std::os::windows","Extensions to <code>std::thread</code> for Windows.",null,null],[0,"prelude","","A prelude for conveniently writing platform-specific code.",null,null],[0,"linux","std::os","Linux-specific definitions.",null,null],[0,"fs","std::os::linux","Linux-specific extensions to primitives in the <code>std::fs</code> …",null,null],[8,"MetadataExt","std::os::linux::fs","OS-specific extensions to <code>fs::Metadata</code>.",null,null],[10,"as_raw_stat","","Gain a reference to the underlying <code>stat</code> structure which …",169,[[],["stat",3]]],[10,"st_dev","","Returns the device ID on which this file resides.",169,[[]]],[10,"st_ino","","Returns the inode number.",169,[[]]],[10,"st_mode","","Returns the file type and mode.",169,[[]]],[10,"st_nlink","","Returns the number of hard links to file.",169,[[]]],[10,"st_uid","","Returns the user ID of the file owner.",169,[[]]],[10,"st_gid","","Returns the group ID of the file owner.",169,[[]]],[10,"st_rdev","","Returns the device ID that this file represents. Only …",169,[[]]],[10,"st_size","","Returns the size of the file (if it is a regular file or …",169,[[]]],[10,"st_atime","","Returns the last access time of the file, in seconds …",169,[[]]],[10,"st_atime_nsec","","Returns the last access time of the file, in nanoseconds …",169,[[]]],[10,"st_mtime","","Returns the last modification time of the file, in …",169,[[]]],[10,"st_mtime_nsec","","Returns the last modification time of the file, in …",169,[[]]],[10,"st_ctime","","Returns the last status change time of the file, in …",169,[[]]],[10,"st_ctime_nsec","","Returns the last status change time of the file, in …",169,[[]]],[10,"st_blksize","","Returns the \\\"preferred\\\" block size for efficient …",169,[[]]],[10,"st_blocks","","Returns the number of blocks allocated to the file, …",169,[[]]],[0,"raw","std::os::linux","Linux-specific raw type definitions.",null,null],[6,"dev_t","std::os::linux::raw","",null,null],[6,"mode_t","","",null,null],[6,"pthread_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"blksize_t","","",null,null],[6,"ino_t","","",null,null],[6,"nlink_t","","",null,null],[6,"off_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",170,null],[12,"st_ino","","",170,null],[12,"st_nlink","","",170,null],[12,"st_mode","","",170,null],[12,"st_uid","","",170,null],[12,"st_gid","","",170,null],[12,"__pad0","","",170,null],[12,"st_rdev","","",170,null],[12,"st_size","","",170,null],[12,"st_blksize","","",170,null],[12,"st_blocks","","",170,null],[12,"st_atime","","",170,null],[12,"st_atime_nsec","","",170,null],[12,"st_mtime","","",170,null],[12,"st_mtime_nsec","","",170,null],[12,"st_ctime","","",170,null],[12,"st_ctime_nsec","","",170,null],[12,"__unused","","",170,null],[6,"time_t","","",null,null],[0,"raw","std::os","Platform-specific types, as defined by C.",null,null],[6,"c_char","std::os::raw","Equivalent to C\'s <code>char</code> type.",null,null],[6,"c_schar","","Equivalent to C\'s <code>signed char</code> type.",null,null],[6,"c_uchar","","Equivalent to C\'s <code>unsigned char</code> type.",null,null],[6,"c_short","","Equivalent to C\'s <code>signed short</code> (<code>short</code>) type.",null,null],[6,"c_ushort","","Equivalent to C\'s <code>unsigned short</code> type.",null,null],[6,"c_int","","Equivalent to C\'s <code>signed int</code> (<code>int</code>) type.",null,null],[6,"c_uint","","Equivalent to C\'s <code>unsigned int</code> type.",null,null],[6,"c_long","","Equivalent to C\'s <code>signed long</code> (<code>long</code>) type.",null,null],[6,"c_ulong","","Equivalent to C\'s <code>unsigned long</code> type.",null,null],[6,"c_longlong","","Equivalent to C\'s <code>signed long long</code> (<code>long long</code>) type.",null,null],[6,"c_ulonglong","","Equivalent to C\'s <code>unsigned long long</code> type.",null,null],[6,"c_float","","Equivalent to C\'s <code>float</code> type.",null,null],[6,"c_double","","Equivalent to C\'s <code>double</code> type.",null,null],[0,"panic","std","Panic support in the standard library.",null,null],[3,"Location","std::panic","A struct containing information about the location of a …",null,null],[3,"PanicInfo","","A struct providing information about a panic.",null,null],[5,"set_hook","","Registers a custom panic hook, replacing any that was …",null,[[["box",3],["fn",8]]]],[5,"take_hook","","Unregisters the current panic hook, returning it.",null,[[],[["box",3],["fn",8]]]],[5,"panic_any","","Panic the current thread with the given message as the …",null,[[["send",8],["any",8]]]],[8,"UnwindSafe","","A marker trait which represents \\\"panic safe\\\" types in …",null,null],[8,"RefUnwindSafe","","A marker trait representing types where a shared …",null,null],[3,"AssertUnwindSafe","","A simple wrapper around a type to assert that it is …",null,null],[12,"0","","",171,null],[5,"catch_unwind","","Invokes a closure, capturing the cause of an unwinding …",null,[[["unwindsafe",8],["fnonce",8]],["result",6]]],[5,"resume_unwind","","Triggers a panic without invoking the panic hook.",null,[[["box",3],["any",8]]]],[0,"path","std","Cross-platform path manipulation.",null,null],[4,"Prefix","std::path","Windows path prefixes, e.g., <code>C:</code> or <code>\\\\\\\\server\\\\share</code>.",null,null],[13,"Verbatim","","Verbatim prefix, e.g., <code>\\\\\\\\?\\\\cat_pics</code>.",172,null],[13,"VerbatimUNC","","Verbatim prefix using Windows\' <em><strong>U</strong>niform <strong>N</strong>aming <strong>C</strong>onvention</em>, …",172,null],[13,"VerbatimDisk","","Verbatim disk prefix, e.g., <code>\\\\\\\\?\\\\C:</code>.",172,null],[13,"DeviceNS","","Device namespace prefix, e.g., <code>\\\\\\\\.\\\\COM42</code>.",172,null],[13,"UNC","","Prefix using Windows\' <em><strong>U</strong>niform <strong>N</strong>aming <strong>C</strong>onvention</em>, e.g. …",172,null],[13,"Disk","","Prefix <code>C:</code> for the given disk drive.",172,null],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e., begins with …",172,[[]]],[5,"is_separator","","Determines whether the character is one of the permitted …",null,[[]]],[17,"MAIN_SEPARATOR","","The primary separator of path components for the current …",null,null],[3,"PrefixComponent","","A structure wrapping a Windows path prefix as well as its …",null,null],[11,"kind","","Returns the parsed prefix data.",173,[[],["prefix",4]]],[11,"as_os_str","","Returns the raw [<code>OsStr</code>] slice for this prefix.",173,[[],["osstr",3]]],[4,"Component","","A single component of a path.",null,null],[13,"Prefix","","A Windows path prefix, e.g., <code>C:</code> or <code>\\\\\\\\server\\\\share</code>.",174,null],[13,"RootDir","","The root directory component, appears after any prefix …",174,null],[13,"CurDir","","A reference to the current directory, i.e., <code>.</code>.",174,null],[13,"ParentDir","","A reference to the parent directory, i.e., <code>..</code>.",174,null],[13,"Normal","","A normal component, e.g., <code>a</code> and <code>b</code> in <code>a/b</code>.",174,null],[11,"as_os_str","","Extracts the underlying [<code>OsStr</code>] slice.",174,[[],["osstr",3]]],[3,"Components","","An iterator over the [<code>Component</code>]s of a [<code>Path</code>].",null,null],[3,"Iter","","An iterator over the [<code>Component</code>]s of a [<code>Path</code>], as [<code>OsStr</code>] …",null,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path …",175,[[],["path",3]]],[11,"as_path","","Extracts a slice corresponding to the portion of the path …",176,[[],["path",3]]],[3,"Ancestors","","An iterator over [<code>Path</code>] and its ancestors.",null,null],[3,"PathBuf","","An owned, mutable path (akin to [<code>String</code>]).",null,null],[11,"new","","Allocates an empty <code>PathBuf</code>.",177,[[],["pathbuf",3]]],[11,"with_capacity","","Creates a new <code>PathBuf</code> with a given capacity used to …",177,[[],["pathbuf",3]]],[11,"as_path","","Coerces to a [<code>Path</code>] slice.",177,[[],["path",3]]],[11,"push","","Extends <code>self</code> with <code>path</code>.",177,[[["asref",8],["path",3]]]],[11,"pop","","Truncates <code>self</code> to <code>self.parent</code>.",177,[[]]],[11,"set_file_name","","Updates <code>self.file_name</code> to <code>file_name</code>.",177,[[["asref",8],["osstr",3]]]],[11,"set_extension","","Updates <code>self.extension</code> to <code>extension</code>.",177,[[["asref",8],["osstr",3]]]],[11,"into_os_string","","Consumes the <code>PathBuf</code>, yielding its internal [<code>OsString</code>] …",177,[[],["osstring",3]]],[11,"into_boxed_path","","Converts this <code>PathBuf</code> into a boxed [<code>Path</code>].",177,[[],[["path",3],["box",3]]]],[11,"capacity","","Invokes <code>capacity</code> on the underlying instance of [<code>OsString</code>].",177,[[]]],[11,"clear","","Invokes <code>clear</code> on the underlying instance of [<code>OsString</code>].",177,[[]]],[11,"reserve","","Invokes <code>reserve</code> on the underlying instance of [<code>OsString</code>].",177,[[]]],[11,"reserve_exact","","Invokes <code>reserve_exact</code> on the underlying instance of […",177,[[]]],[11,"shrink_to_fit","","Invokes <code>shrink_to_fit</code> on the underlying instance of […",177,[[]]],[11,"shrink_to","","Invokes <code>shrink_to</code> on the underlying instance of [<code>OsString</code>]…",177,[[]]],[3,"Path","","A slice of a path (akin to [<code>str</code>]).",null,null],[3,"StripPrefixError","","An error returned from [<code>Path::strip_prefix</code>] if the prefix …",null,null],[11,"new","","Directly wraps a string slice as a <code>Path</code> slice.",178,[[],["path",3]]],[11,"as_os_str","","Yields the underlying [<code>OsStr</code>] slice.",178,[[],["osstr",3]]],[11,"to_str","","Yields a <code>&str</code> slice if the <code>Path</code> is valid unicode.",178,[[],["option",4]]],[11,"to_string_lossy","","Converts a <code>Path</code> to a <code>Cow<str></code>.",178,[[],["cow",4]]],[11,"to_path_buf","","Converts a <code>Path</code> to an owned [<code>PathBuf</code>].",178,[[],["pathbuf",3]]],[11,"is_absolute","","Returns <code>true</code> if the <code>Path</code> is absolute, i.e., if it is …",178,[[]]],[11,"is_relative","","Returns <code>true</code> if the <code>Path</code> is relative, i.e., not absolute.",178,[[]]],[11,"has_root","","Returns <code>true</code> if the <code>Path</code> has a root.",178,[[]]],[11,"parent","","Returns the <code>Path</code> without its final component, if there is …",178,[[],[["option",4],["path",3]]]],[11,"ancestors","","Produces an iterator over <code>Path</code> and its ancestors.",178,[[],["ancestors",3]]],[11,"file_name","","Returns the final component of the <code>Path</code>, if there is one.",178,[[],[["osstr",3],["option",4]]]],[11,"strip_prefix","","Returns a path that, when joined onto <code>base</code>, yields <code>self</code>.",178,[[],[["path",3],["result",4],["stripprefixerror",3]]]],[11,"starts_with","","Determines whether <code>base</code> is a prefix of <code>self</code>.",178,[[["asref",8],["path",3]]]],[11,"ends_with","","Determines whether <code>child</code> is a suffix of <code>self</code>.",178,[[["asref",8],["path",3]]]],[11,"file_stem","","Extracts the stem (non-extension) portion of …",178,[[],[["osstr",3],["option",4]]]],[11,"extension","","Extracts the extension of <code>self.file_name</code>, if possible.",178,[[],[["osstr",3],["option",4]]]],[11,"join","","Creates an owned [<code>PathBuf</code>] with <code>path</code> adjoined to <code>self</code>.",178,[[["asref",8],["path",3]],["pathbuf",3]]],[11,"with_file_name","","Creates an owned [<code>PathBuf</code>] like <code>self</code> but with the given …",178,[[["asref",8],["osstr",3]],["pathbuf",3]]],[11,"with_extension","","Creates an owned [<code>PathBuf</code>] like <code>self</code> but with the given …",178,[[["asref",8],["osstr",3]],["pathbuf",3]]],[11,"components","","Produces an iterator over the [<code>Component</code>]s of the path.",178,[[],["components",3]]],[11,"iter","","Produces an iterator over the path\'s components viewed as …",178,[[],["iter",3]]],[11,"display","","Returns an object that implements <code>Display</code> for safely …",178,[[],["display",3]]],[11,"metadata","","Queries the file system to get information about a file, …",178,[[],[["result",6],["metadata",3]]]],[11,"symlink_metadata","","Queries the metadata about a file without following …",178,[[],[["result",6],["metadata",3]]]],[11,"canonicalize","","Returns the canonical, absolute form of the path with all …",178,[[],[["pathbuf",3],["result",6]]]],[11,"read_link","","Reads a symbolic link, returning the file that the link …",178,[[],[["pathbuf",3],["result",6]]]],[11,"read_dir","","Returns an iterator over the entries within a directory.",178,[[],[["readdir",3],["result",6]]]],[11,"exists","","Returns <code>true</code> if the path points at an existing entity.",178,[[]]],[11,"is_file","","Returns <code>true</code> if the path exists on disk and is pointing …",178,[[]]],[11,"is_dir","","Returns <code>true</code> if the path exists on disk and is pointing …",178,[[]]],[11,"into_path_buf","","Converts a <code>Box<Path></code> into a [<code>PathBuf</code>] without copying or …",178,[[["path",3],["box",3]],["pathbuf",3]]],[3,"Display","","Helper struct for safely printing paths with <code>format!</code> and …",null,null],[0,"process","std","A module for working with processes.",null,null],[3,"CommandEnvs","std::process","An iterator over the command environment variables.",null,null],[3,"Child","","Representation of a running or exited child process.",null,null],[12,"stdin","","The handle for writing to the child\'s standard input …",179,null],[12,"stdout","","The handle for reading from the child\'s standard output …",179,null],[12,"stderr","","The handle for reading from the child\'s standard error …",179,null],[3,"ChildStdin","","A handle to a child process\'s standard input (stdin).",null,null],[3,"ChildStdout","","A handle to a child process\'s standard output (stdout).",null,null],[3,"ChildStderr","","A handle to a child process\'s stderr.",null,null],[3,"Command","","A process builder, providing fine-grained control over …",null,null],[11,"new","","Constructs a new <code>Command</code> for launching the program at …",180,[[["asref",8],["osstr",3]],["command",3]]],[11,"arg","","Adds an argument to pass to the program.",180,[[["asref",8],["osstr",3]],["command",3]]],[11,"args","","Adds multiple arguments to pass to the program.",180,[[],["command",3]]],[11,"env","","Inserts or updates an environment variable mapping.",180,[[],["command",3]]],[11,"envs","","Adds or updates multiple environment variable mappings.",180,[[],["command",3]]],[11,"env_remove","","Removes an environment variable mapping.",180,[[["asref",8],["osstr",3]],["command",3]]],[11,"env_clear","","Clears the entire environment map for the child process.",180,[[],["command",3]]],[11,"current_dir","","Sets the working directory for the child process.",180,[[["asref",8],["path",3]],["command",3]]],[11,"stdin","","Configuration for the child process\'s standard input …",180,[[["stdio",3],["into",8]],["command",3]]],[11,"stdout","","Configuration for the child process\'s standard output …",180,[[["stdio",3],["into",8]],["command",3]]],[11,"stderr","","Configuration for the child process\'s standard error …",180,[[["stdio",3],["into",8]],["command",3]]],[11,"spawn","","Executes the command as a child process, returning a …",180,[[],[["child",3],["result",6]]]],[11,"output","","Executes the command as a child process, waiting for it …",180,[[],[["output",3],["result",6]]]],[11,"status","","Executes a command as a child process, waiting for it to …",180,[[],[["exitstatus",3],["result",6]]]],[11,"get_program","","Returns the path to the program that was given to […",180,[[],["osstr",3]]],[11,"get_args","","Returns an iterator of the arguments that will be passed …",180,[[],["commandargs",3]]],[11,"get_envs","","Returns an iterator of the environment variables that …",180,[[],["commandenvs",3]]],[11,"get_current_dir","","Returns the working directory for the child process.",180,[[],[["option",4],["path",3]]]],[3,"CommandArgs","","An iterator over the command arguments.",null,null],[3,"Output","","The output of a finished process.",null,null],[12,"status","","The status (exit code) of the process.",181,null],[12,"stdout","","The data that the process wrote to stdout.",181,null],[12,"stderr","","The data that the process wrote to stderr.",181,null],[3,"Stdio","","Describes what to do with a standard I/O stream for a …",null,null],[11,"piped","","A new pipe should be arranged to connect the parent and …",182,[[],["stdio",3]]],[11,"inherit","","The child inherits from the corresponding parent …",182,[[],["stdio",3]]],[11,"null","","This stream will be ignored. This is the equivalent of …",182,[[],["stdio",3]]],[3,"ExitStatus","","Describes the result of a process after it has terminated.",null,null],[11,"success","","Was termination successful? Signal termination is not …",183,[[]]],[11,"code","","Returns the exit code of the process, if any.",183,[[],["option",4]]],[3,"ExitCode","","This type represents the status code a process can return …",null,null],[18,"SUCCESS","","The canonical ExitCode for successful termination on this …",184,null],[18,"FAILURE","","The canonical ExitCode for unsuccessful termination on …",184,null],[11,"kill","","Forces the child process to exit. If the child has …",179,[[],["result",6]]],[11,"id","","Returns the OS-assigned process identifier associated …",179,[[]]],[11,"wait","","Waits for the child to exit completely, returning the …",179,[[],[["exitstatus",3],["result",6]]]],[11,"try_wait","","Attempts to collect the exit status of the child if it …",179,[[],[["option",4],["result",6]]]],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect …",179,[[],[["output",3],["result",6]]]],[5,"exit","","Terminates the current process with the specified exit …",null,[[]]],[5,"abort","","Terminates the process in an abnormal fashion.",null,[[]]],[5,"id","","Returns the OS-assigned process identifier associated …",null,[[]]],[8,"Termination","","A trait for implementing arbitrary return types in the …",null,null],[10,"report","","Is called to get the representation of the value as …",185,[[]]],[0,"sync","std","Useful synchronization primitives.",null,null],[3,"Arc","std::sync","A thread-safe reference-counting pointer. \'Arc\' stands …",null,null],[3,"Weak","","<code>Weak</code> is a version of [<code>Arc</code>] that holds a non-owning …",null,null],[0,"atomic","","Atomic types",null,null],[5,"spin_loop_hint","std::sync::atomic","Signals the processor that it is inside a busy-wait …",null,[[]]],[3,"AtomicBool","","A boolean type which can be safely shared between threads.",null,null],[3,"AtomicPtr","","A raw pointer type which can be safely shared between …",null,null],[4,"Ordering","","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations.",186,null],[13,"Release","","When coupled with a store, all previous operations become …",186,null],[13,"Acquire","","When coupled with a load, if the loaded value was written …",186,null],[13,"AcqRel","","Has the effects of both [<code>Acquire</code>] and [<code>Release</code>] together: …",186,null],[13,"SeqCst","","Like [<code>Acquire</code>]/[<code>Release</code>]/[<code>AcqRel</code>] (for load, store, and …",186,null],[17,"ATOMIC_BOOL_INIT","","An [<code>AtomicBool</code>] initialized to <code>false</code>.",null,null],[3,"AtomicI8","","An integer type which can be safely shared between …",null,null],[17,"ATOMIC_I8_INIT","","An atomic integer initialized to <code>0</code>.",null,null],[3,"AtomicU8","","An integer type which can be safely shared between …",null,null],[17,"ATOMIC_U8_INIT","","An atomic integer initialized to <code>0</code>.",null,null],[3,"AtomicI16","","An integer type which can be safely shared between …",null,null],[17,"ATOMIC_I16_INIT","","An atomic integer initialized to <code>0</code>.",null,null],[3,"AtomicU16","","An integer type which can be safely shared between …",null,null],[17,"ATOMIC_U16_INIT","","An atomic integer initialized to <code>0</code>.",null,null],[3,"AtomicI32","","An integer type which can be safely shared between …",null,null],[17,"ATOMIC_I32_INIT","","An atomic integer initialized to <code>0</code>.",null,null],[3,"AtomicU32","","An integer type which can be safely shared between …",null,null],[17,"ATOMIC_U32_INIT","","An atomic integer initialized to <code>0</code>.",null,null],[3,"AtomicI64","","An integer type which can be safely shared between …",null,null],[17,"ATOMIC_I64_INIT","","An atomic integer initialized to <code>0</code>.",null,null],[3,"AtomicU64","","An integer type which can be safely shared between …",null,null],[17,"ATOMIC_U64_INIT","","An atomic integer initialized to <code>0</code>.",null,null],[3,"AtomicIsize","","An integer type which can be safely shared between …",null,null],[17,"ATOMIC_ISIZE_INIT","","An atomic integer initialized to <code>0</code>.",null,null],[3,"AtomicUsize","","An integer type which can be safely shared between …",null,null],[17,"ATOMIC_USIZE_INIT","","An atomic integer initialized to <code>0</code>.",null,null],[5,"fence","","An atomic fence.",null,[[["ordering",4]]]],[5,"compiler_fence","","A compiler memory fence.",null,[[["ordering",4]]]],[0,"mpsc","std::sync","Multi-producer, single-consumer FIFO queue communication …",null,null],[3,"Receiver","std::sync::mpsc","The receiving half of Rust\'s [<code>channel</code>] (or [<code>sync_channel</code>]…",null,null],[3,"Iter","","An iterator over messages on a [<code>Receiver</code>], created by <code>iter</code>…",null,null],[3,"TryIter","","An iterator that attempts to yield all pending values for …",null,null],[3,"IntoIter","","An owning iterator over messages on a [<code>Receiver</code>], created …",null,null],[3,"Sender","","The sending-half of Rust\'s asynchronous [<code>channel</code>] type. …",null,null],[3,"SyncSender","","The sending-half of Rust\'s synchronous [<code>sync_channel</code>] …",null,null],[3,"SendError","","An error returned from the [<code>Sender::send</code>] or […",null,null],[12,"0","","",187,null],[3,"RecvError","","An error returned from the <code>recv</code> function on a [<code>Receiver</code>].",null,null],[4,"TryRecvError","","This enumeration is the list of the possible reasons that …",null,null],[13,"Empty","","This <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …",188,null],[13,"Disconnected","","The <strong>channel</strong>\'s sending half has become disconnected, and …",188,null],[4,"RecvTimeoutError","","This enumeration is the list of possible errors that made …",null,null],[13,"Timeout","","This <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …",189,null],[13,"Disconnected","","The <strong>channel</strong>\'s sending half has become disconnected, and …",189,null],[4,"TrySendError","","This enumeration is the list of the possible error …",null,null],[13,"Full","","The data could not be sent on the [<code>sync_channel</code>] because …",190,null],[13,"Disconnected","","This [<code>sync_channel</code>]\'s receiving half has disconnected, so …",190,null],[5,"channel","","Creates a new asynchronous channel, returning the …",null,[[]]],[5,"sync_channel","","Creates a new synchronous, bounded channel. All data sent …",null,[[]]],[11,"send","","Attempts to send a value on this channel, returning it …",191,[[],[["senderror",3],["result",4]]]],[11,"send","","Sends a value on this synchronous channel.",192,[[],[["senderror",3],["result",4]]]],[11,"try_send","","Attempts to send a value on this channel without blocking.",192,[[],[["result",4],["trysenderror",4]]]],[11,"try_recv","","Attempts to return a pending value on this receiver …",193,[[],[["tryrecverror",4],["result",4]]]],[11,"recv","","Attempts to wait for a value on this receiver, returning …",193,[[],[["result",4],["recverror",3]]]],[11,"recv_timeout","","Attempts to wait for a value on this receiver, returning …",193,[[["duration",3]],[["recvtimeouterror",4],["result",4]]]],[11,"recv_deadline","","Attempts to wait for a value on this receiver, returning …",193,[[["instant",3]],[["recvtimeouterror",4],["result",4]]]],[11,"iter","","Returns an iterator that will block waiting for messages, …",193,[[],["iter",3]]],[11,"try_iter","","Returns an iterator that will attempt to yield all …",193,[[],["tryiter",3]]],[3,"Barrier","std::sync","A barrier enables multiple threads to synchronize the …",null,null],[3,"BarrierWaitResult","","A <code>BarrierWaitResult</code> is returned by [<code>Barrier::wait()</code>] when …",null,null],[3,"Condvar","","A Condition Variable",null,null],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition …",null,null],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared …",null,null],[3,"MutexGuard","","An RAII implementation of a \\\"scoped lock\\\" of a mutex. …",null,null],[3,"Once","","A synchronization primitive which can be used to run a …",null,null],[3,"OnceState","","State yielded to [<code>Once::call_once_force()</code>]’s closure …",null,null],[17,"ONCE_INIT","","Initialization value for static [<code>Once</code>] values.",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of …",null,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access …",null,null],[6,"LockResult","","A type alias for the result of a lock method which can be …",null,null],[3,"PoisonError","","A type of error which can be returned whenever a lock is …",null,null],[4,"TryLockError","","An enumeration of possible errors associated with a […",null,null],[13,"Poisoned","","The lock could not be acquired because another thread …",194,null],[13,"WouldBlock","","The lock could not be acquired at this time because the …",194,null],[6,"TryLockResult","","A type alias for the result of a nonblocking locking …",null,null],[0,"time","std","Temporal quantification.",null,null],[3,"Duration","std::time","A <code>Duration</code> type to represent a span of time, typically …",null,null],[3,"Instant","","A measurement of a monotonically nondecreasing clock. …",null,null],[3,"SystemTime","","A measurement of the system clock, useful for talking to …",null,null],[3,"SystemTimeError","","An error returned from the <code>duration_since</code> and <code>elapsed</code> …",null,null],[11,"now","","Returns an instant corresponding to \\\"now\\\".",195,[[],["instant",3]]],[11,"duration_since","","Returns the amount of time elapsed from another instant …",195,[[["instant",3]],["duration",3]]],[11,"checked_duration_since","","Returns the amount of time elapsed from another instant …",195,[[["instant",3]],[["option",4],["duration",3]]]],[11,"saturating_duration_since","","Returns the amount of time elapsed from another instant …",195,[[["instant",3]],["duration",3]]],[11,"elapsed","","Returns the amount of time elapsed since this instant was …",195,[[],["duration",3]]],[11,"checked_add","","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …",195,[[["duration",3]],[["option",4],["instant",3]]]],[11,"checked_sub","","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …",195,[[["duration",3]],[["option",4],["instant",3]]]],[18,"UNIX_EPOCH","","An anchor in time which can be used to create new …",196,null],[11,"now","","Returns the system time corresponding to \\\"now\\\".",196,[[],["systemtime",3]]],[11,"duration_since","","Returns the amount of time elapsed from an earlier point …",196,[[["systemtime",3]],[["result",4],["systemtimeerror",3],["duration",3]]]],[11,"elapsed","","Returns the difference between the clock time when this …",196,[[],[["result",4],["systemtimeerror",3],["duration",3]]]],[11,"checked_add","","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …",196,[[["duration",3]],[["systemtime",3],["option",4]]]],[11,"checked_sub","","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …",196,[[["duration",3]],[["systemtime",3],["option",4]]]],[17,"UNIX_EPOCH","","An anchor in time which can be used to create new …",null,null],[11,"duration","","Returns the positive duration which represents how far …",197,[[],["duration",3]]],[0,"lazy","std","Lazy values and one-time initialization of static data.",null,null],[3,"OnceCell","std::lazy","A cell which can be written to only once.",null,null],[3,"Lazy","","A value which is initialized on the first access.",null,null],[3,"SyncOnceCell","","A synchronization primitive which can be written to only …",null,null],[11,"new","","Creates a new empty cell.",198,[[],["synconcecell",3]]],[11,"get","","Gets the reference to the underlying value.",198,[[],["option",4]]],[11,"get_mut","","Gets the mutable reference to the underlying value.",198,[[],["option",4]]],[11,"set","","Sets the contents of this cell to <code>value</code>.",198,[[],["result",4]]],[11,"get_or_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",198,[[]]],[11,"get_or_try_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",198,[[],["result",4]]],[11,"into_inner","","Consumes the <code>SyncOnceCell</code>, returning the wrapped value. …",198,[[],["option",4]]],[11,"take","","Takes the value out of this <code>SyncOnceCell</code>, moving it back …",198,[[],["option",4]]],[3,"SyncLazy","","A value which is initialized on the first access.",null,null],[11,"new","","Creates a new lazy value with the given initializing …",199,[[],["synclazy",3]]],[11,"force","","Forces the evaluation of this lazy value and returns a …",199,[[["synclazy",3]]]],[0,"task","std","Types and Traits for working with asynchronous tasks.",null,null],[4,"Poll","std::task","Indicates whether a value is available or if the current …",null,null],[13,"Ready","","Represents that a value is immediately ready.",200,null],[13,"Pending","","Represents that a value is not ready yet.",200,null],[3,"Context","","The <code>Context</code> of an asynchronous task.",null,null],[3,"RawWaker","","A <code>RawWaker</code> allows the implementor of a task executor to …",null,null],[3,"RawWakerVTable","","A virtual function pointer table (vtable) that specifies …",null,null],[3,"Waker","","A <code>Waker</code> is a handle for waking up a task by notifying its …",null,null],[14,"ready","","Extracts the successful type of a <code>Poll<T></code>.",null,null],[8,"Wake","","The implementation of waking a task on an executor.",null,null],[10,"wake","","Wake this task.",201,[[["arc",3]]]],[11,"wake_by_ref","","Wake this task without consuming the waker.",201,[[["arc",3]]]],[0,"future","std","Asynchronous values.",null,null],[8,"Future","std::future","A future represents an asynchronous computation.",null,null],[16,"Output","","The type of value produced on completion.",202,null],[10,"poll","","Attempt to resolve the future to a final value, …",202,[[["context",3],["pin",3]],["poll",4]]],[5,"pending","","Creates a future which never resolves, representing a …",null,[[],["pending",3]]],[5,"ready","","Creates a future that is immediately ready with a value.",null,[[],["ready",3]]],[3,"Pending","","Creates a future which never resolves, representing a …",null,null],[3,"Ready","","Creates a future that is immediately ready with a value.",null,null],[8,"IntoFuture","","Conversion into a <code>Future</code>.",null,null],[16,"Output","","The output that the future will produce on completion.",203,null],[16,"Future","","Which kind of future are we turning this into?",203,null],[10,"into_future","","Creates a future from a value.",203,[[]]],[11,"new","std::sync","Creates a <code>PoisonError</code>.",204,[[],["poisonerror",3]]],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, …",204,[[]]],[11,"get_ref","","Reaches into this error indicating that a lock is …",204,[[]]],[11,"get_mut","","Reaches into this error indicating that a lock is …",204,[[]]],[11,"read_exact_at","std::os::unix::fs","Reads the exact number of byte required to fill <code>buf</code> from …",138,[[],["result",6]]],[11,"write_all_at","","Attempts to write an entire buffer starting from a given …",138,[[],["result",6]]],[11,"is_unnamed","std::os::unix::net","Returns <code>true</code> if the address is unnamed.",205,[[]]],[11,"as_pathname","","Returns the contents of this address if it is a <code>pathname</code> …",205,[[],[["option",4],["path",3]]]],[11,"new","","Create a Unix credential struct.",206,[[],["socketcred",3]]],[11,"set_pid","","Set the PID.",206,[[["pid_t",6]]]],[11,"get_pid","","Get the current PID.",206,[[],["pid_t",6]]],[11,"set_uid","","Set the UID.",206,[[["uid_t",6]]]],[11,"get_uid","","Get the current UID.",206,[[],["uid_t",6]]],[11,"set_gid","","Set the GID.",206,[[["gid_t",6]]]],[11,"get_gid","","Get the current GID.",206,[[],["gid_t",6]]],[11,"new","","Create an ancillary data with the given buffer.",207,[[]]],[11,"capacity","","Returns the capacity of the buffer.",207,[[]]],[11,"len","","Returns the number of used bytes.",207,[[]]],[11,"messages","","Returns the iterator of the control messages.",207,[[],["messages",3]]],[11,"truncated","","Is <code>true</code> if during a recv operation the ancillary was …",207,[[]]],[11,"add_fds","","Add file descriptors to the ancillary data.",207,[[]]],[11,"add_creds","","Add credentials to the ancillary data.",207,[[]]],[11,"clear","","Clears the ancillary data, removing all values.",207,[[]]],[11,"bind","","Creates a Unix datagram socket bound to the given path.",208,[[["asref",8],["path",3]],[["unixdatagram",3],["result",6]]]],[11,"unbound","","Creates a Unix Datagram socket which is not bound to any …",208,[[],[["unixdatagram",3],["result",6]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",208,[[],["result",6]]],[11,"connect","","Connects the socket to the specified address.",208,[[["asref",8],["path",3]],["result",6]]],[11,"try_clone","","Creates a new independently owned handle to the …",208,[[],[["unixdatagram",3],["result",6]]]],[11,"local_addr","","Returns the address of this socket.",208,[[],[["socketaddr",3],["result",6]]]],[11,"peer_addr","","Returns the address of this socket\'s peer.",208,[[],[["socketaddr",3],["result",6]]]],[11,"recv_from","","Receives data from the socket.",208,[[],["result",6]]],[11,"recv","","Receives data from the socket.",208,[[],["result",6]]],[11,"recv_vectored_with_ancillary_from","","Receives data and ancillary data from socket.",208,[[["socketancillary",3]],["result",6]]],[11,"recv_vectored_with_ancillary","","Receives data and ancillary data from socket.",208,[[["socketancillary",3]],["result",6]]],[11,"send_to","","Sends data on the socket to the specified address.",208,[[["asref",8],["path",3]],["result",6]]],[11,"send","","Sends data on the socket to the socket\'s peer.",208,[[],["result",6]]],[11,"send_vectored_with_ancillary_to","","Sends data and ancillary data on the socket to the …",208,[[["path",3],["asref",8],["socketancillary",3]],["result",6]]],[11,"send_vectored_with_ancillary","","Sends data and ancillary data on the socket.",208,[[["socketancillary",3]],["result",6]]],[11,"set_read_timeout","","Sets the read timeout for the socket.",208,[[["option",4],["duration",3]],["result",6]]],[11,"set_write_timeout","","Sets the write timeout for the socket.",208,[[["option",4],["duration",3]],["result",6]]],[11,"read_timeout","","Returns the read timeout of this socket.",208,[[],[["option",4],["result",6]]]],[11,"write_timeout","","Returns the write timeout of this socket.",208,[[],[["option",4],["result",6]]]],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",208,[[],["result",6]]],[11,"set_passcred","","Moves the socket to pass unix credentials as control …",208,[[],["result",6]]],[11,"passcred","","Get the current value of the socket for passing unix …",208,[[],["result",6]]],[11,"take_error","","Returns the value of the <code>SO_ERROR</code> option.",208,[[],[["option",4],["result",6]]]],[11,"shutdown","","Shut down the read, write, or both halves of this …",208,[[["shutdown",4]],["result",6]]],[11,"peek","","Receives data on the socket from the remote address to …",208,[[],["result",6]]],[11,"peek_from","","Receives a single datagram message on the socket, without …",208,[[],["result",6]]],[11,"bind","","Creates a new <code>UnixListener</code> bound to the specified socket.",209,[[["asref",8],["path",3]],[["result",6],["unixlistener",3]]]],[11,"accept","","Accepts a new incoming connection to this listener.",209,[[],["result",6]]],[11,"try_clone","","Creates a new independently owned handle to the …",209,[[],[["result",6],["unixlistener",3]]]],[11,"local_addr","","Returns the local socket address of this listener.",209,[[],[["socketaddr",3],["result",6]]]],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",209,[[],["result",6]]],[11,"take_error","","Returns the value of the <code>SO_ERROR</code> option.",209,[[],[["option",4],["result",6]]]],[11,"incoming","","Returns an iterator over incoming connections.",209,[[],["incoming",3]]],[11,"connect","","Connects to the socket named by <code>path</code>.",210,[[["asref",8],["path",3]],[["unixstream",3],["result",6]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",210,[[],["result",6]]],[11,"try_clone","","Creates a new independently owned handle to the …",210,[[],[["unixstream",3],["result",6]]]],[11,"local_addr","","Returns the socket address of the local half of this …",210,[[],[["socketaddr",3],["result",6]]]],[11,"peer_addr","","Returns the socket address of the remote half of this …",210,[[],[["socketaddr",3],["result",6]]]],[11,"peer_cred","","Gets the peer credentials for this Unix domain socket.",210,[[],[["result",6],["ucred",3]]]],[11,"set_read_timeout","","Sets the read timeout for the socket.",210,[[["option",4],["duration",3]],["result",6]]],[11,"set_write_timeout","","Sets the write timeout for the socket.",210,[[["option",4],["duration",3]],["result",6]]],[11,"read_timeout","","Returns the read timeout of this socket.",210,[[],[["option",4],["result",6]]]],[11,"write_timeout","","Returns the write timeout of this socket.",210,[[],[["option",4],["result",6]]]],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",210,[[],["result",6]]],[11,"set_passcred","","Moves the socket to pass unix credentials as control …",210,[[],["result",6]]],[11,"passcred","","Get the current value of the socket for passing unix …",210,[[],["result",6]]],[11,"take_error","","Returns the value of the <code>SO_ERROR</code> option.",210,[[],[["option",4],["result",6]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this …",210,[[["shutdown",4]],["result",6]]],[11,"peek","","Receives data on the socket from the remote address to …",210,[[],["result",6]]],[11,"recv_vectored_with_ancillary","","Receives data and ancillary data from socket.",210,[[["socketancillary",3]],["result",6]]],[11,"send_vectored_with_ancillary","","Sends data and ancillary data on the socket.",210,[[["socketancillary",3]],["result",6]]],[11,"before_exec","std::os::unix::process","Schedules a closure to be run just before the <code>exec</code> …",152,[[],["command",3]]],[0,"alloc","std","Memory allocation APIs.",null,null],[3,"Global","std::alloc","The global memory allocator.",null,null],[5,"alloc","","Allocate memory with the global allocator.",null,[[["layout",3]]]],[5,"dealloc","","Deallocate memory with the global allocator.",null,[[["layout",3]]]],[5,"realloc","","Reallocate memory with the global allocator.",null,[[["layout",3]]]],[5,"alloc_zeroed","","Allocate zero-initialized memory with the global …",null,[[["layout",3]]]],[5,"handle_alloc_error","","Abort on memory allocation error or failure.",null,[[["layout",3]]]],[3,"AllocError","","The <code>AllocError</code> error indicates an allocation failure that …",null,null],[8,"Allocator","","An implementation of <code>Allocator</code> can allocate, grow, …",null,null],[10,"allocate","","Attempts to allocate a block of memory.",211,[[["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"allocate_zeroed","","Behaves like <code>allocate</code>, but also ensures that the returned …",211,[[["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[10,"deallocate","","Deallocates the memory referenced by <code>ptr</code>.",211,[[["nonnull",3],["layout",3]]]],[11,"grow","","Attempts to extend the memory block.",211,[[["nonnull",3],["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"grow_zeroed","","Behaves like <code>grow</code>, but also ensures that the new contents …",211,[[["nonnull",3],["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"shrink","","Attempts to shrink the memory block.",211,[[["nonnull",3],["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"by_ref","","Creates a \\\"by reference\\\" adaptor for this instance of …",211,[[]]],[8,"GlobalAlloc","","A memory allocator that can be registered as the standard …",null,null],[10,"alloc","","Allocate memory as described by the given <code>layout</code>.",212,[[["layout",3]]]],[10,"dealloc","","Deallocate the block of memory at the given <code>ptr</code> pointer …",212,[[["layout",3]]]],[11,"alloc_zeroed","","Behaves like <code>alloc</code>, but also ensures that the contents …",212,[[["layout",3]]]],[11,"realloc","","Shrink or grow a block of memory to the given <code>new_size</code>. …",212,[[["layout",3]]]],[3,"Layout","","Layout of a block of memory.",null,null],[6,"LayoutErr","","",null,null],[3,"LayoutError","","The parameters given to <code>Layout::from_size_align</code> or some …",null,null],[3,"System","","The default memory allocator provided by the operating …",null,null],[5,"set_alloc_error_hook","","Registers a custom allocation error hook, replacing any …",null,[[]]],[5,"take_alloc_error_hook","","Unregisters the current allocation error hook, returning …",null,[[]]],[14,"panic","std","Panics the current thread.",null,null],[14,"print","","Prints to the standard output.",null,null],[14,"println","","Prints to the standard output, with a newline.",null,null],[14,"eprint","","Prints to the standard error.",null,null],[14,"eprintln","","Prints to the standard error, with a newline.",null,null],[14,"dbg","","Prints and returns the value of a given expression for …",null,null],[14,"thread_local","","Declare a new thread local storage key of type …",null,null],[14,"is_arm_feature_detected","","Prevents compilation if <code>is_arm_feature_detected</code> is used …",null,null],[14,"is_aarch64_feature_detected","","Prevents compilation if <code>is_aarch64_feature_detected</code> is …",null,null],[14,"is_powerpc_feature_detected","","Prevents compilation if <code>is_powerpc_feature_detected</code> is …",null,null],[14,"is_powerpc64_feature_detected","","Prevents compilation if <code>is_powerpc64_feature_detected</code> is …",null,null],[14,"is_mips_feature_detected","","Prevents compilation if <code>is_mips_feature_detected</code> is used …",null,null],[14,"is_mips64_feature_detected","","Prevents compilation if <code>is_mips64_feature_detected</code> is …",null,null],[14,"is_x86_feature_detected","","A macro to test at <em>runtime</em> whether a CPU feature is …",null,null],[15,"bool","","The boolean type.",null,null],[15,"never","","The <code>!</code> type, also called \\\"never\\\".",null,null],[15,"char","","A character type.",null,null],[15,"unit","","The <code>()</code> type, also called \\\"unit\\\".",null,null],[15,"pointer","","Raw, unsafe pointers, <code>*const T</code>, and <code>*mut T</code>.",null,null],[15,"array","","A fixed-size array, denoted <code>[T; N]</code>, for the element type, …",null,null],[15,"slice","","A dynamically-sized view into a contiguous sequence, <code>[T]</code>. …",null,null],[15,"str","","String slices.",null,null],[15,"tuple","","A finite heterogeneous sequence, <code>(T, U, ..)</code>.",null,null],[15,"f32","","A 32-bit floating point type (specifically, the …",null,null],[15,"f64","","A 64-bit floating point type (specifically, the …",null,null],[15,"i8","","The 8-bit signed integer type.",null,null],[15,"i16","","The 16-bit signed integer type.",null,null],[15,"i32","","The 32-bit signed integer type.",null,null],[15,"i64","","The 64-bit signed integer type.",null,null],[15,"i128","","The 128-bit signed integer type.",null,null],[15,"u8","","The 8-bit unsigned integer type.",null,null],[15,"u16","","The 16-bit unsigned integer type.",null,null],[15,"u32","","The 32-bit unsigned integer type.",null,null],[15,"u64","","The 64-bit unsigned integer type.",null,null],[15,"u128","","The 128-bit unsigned integer type.",null,null],[15,"isize","","The pointer-sized signed integer type.",null,null],[15,"usize","","The pointer-sized unsigned integer type.",null,null],[15,"reference","","References, both shared and mutable.",null,null],[15,"fn","","Function pointers, like <code>fn(usize) -> bool</code>.",null,null],[21,"as","","Cast between types, or rename an import.",null,null],[21,"break","","Exit early from a loop.",null,null],[21,"const","","Compile-time constants and compile-time evaluable …",null,null],[21,"continue","","Skip to the next iteration of a loop.",null,null],[21,"crate","","A Rust binary or library.",null,null],[21,"else","","What expression to evaluate when an <code>if</code> condition …",null,null],[21,"enum","","A type that can be any one of several variants.",null,null],[21,"extern","","Link to or import external code.",null,null],[21,"false","","A value of type [<code>bool</code>] representing logical <strong>false</strong>.",null,null],[21,"fn","","A function or function pointer.",null,null],[21,"for","","Iteration with <code>in</code>, trait implementation with <code>impl</code>, or …",null,null],[21,"if","","Evaluate a block if a condition holds.",null,null],[21,"impl","","Implement some functionality for a type.",null,null],[21,"in","","Iterate over a series of values with <code>for</code>.",null,null],[21,"let","","Bind a value to a variable.",null,null],[21,"while","","Loop while a condition is upheld.",null,null],[21,"loop","","Loop indefinitely.",null,null],[21,"match","","Control flow based on pattern matching.",null,null],[21,"mod","","Organize code into modules.",null,null],[21,"move","","Capture a closure\'s environment by value.",null,null],[21,"mut","","A mutable variable, reference, or pointer.",null,null],[21,"pub","","Make an item visible to others.",null,null],[21,"ref","","Bind by reference during pattern matching.",null,null],[21,"return","","Return a value from a function.",null,null],[21,"self","","The receiver of a method, or the current module.",null,null],[21,"Self","","The implementing type within a <code>trait</code> or <code>impl</code> block, or …",null,null],[21,"static","","A static item is a value which is valid for the entire …",null,null],[21,"struct","","A type that is composed of other types.",null,null],[21,"super","","The parent of the current module.",null,null],[21,"trait","","A common interface for a group of types.",null,null],[21,"true","","A value of type [<code>bool</code>] representing logical <strong>true</strong>.",null,null],[21,"type","","Define an alias for an existing type.",null,null],[21,"unsafe","","Code or interfaces whose memory safety cannot be verified …",null,null],[21,"use","","Import or rename items from other crates or modules.",null,null],[21,"where","","Add constraints that must be upheld to use an item.",null,null],[21,"async","","Return a <code>Future</code> instead of blocking the current thread.",null,null],[21,"await","","Suspend execution until the result of a <code>Future</code> is ready.",null,null],[21,"dyn","","<code>dyn</code> is a prefix of a trait object\'s type.",null,null],[21,"union","","The Rust equivalent of a C-style union.",null,null],[11,"from","std::borrow","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"from","std::boxed","",213,[[]]],[11,"from","","",213,[[]]],[11,"borrow","","",213,[[]]],[11,"borrow_mut","","",213,[[]]],[11,"try_from","","",213,[[],["result",4]]],[11,"into","","",213,[[]]],[11,"try_into","","",213,[[],["result",4]]],[11,"into_searcher","","",213,[[],["charpredicatesearcher",3]]],[11,"is_contained_in","","",213,[[]]],[11,"is_prefix_of","","",213,[[]]],[11,"strip_prefix_of","","",213,[[],["option",4]]],[11,"is_suffix_of","","",213,[[]]],[11,"strip_suffix_of","","",213,[[],["option",4]]],[11,"into_iter","","",213,[[]]],[11,"type_id","","",213,[[],["typeid",3]]],[11,"into_future","","",213,[[]]],[11,"to_owned","","",213,[[]]],[11,"clone_into","","",213,[[]]],[11,"to_string","","",213,[[],["string",3]]],[11,"from","std::fmt","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",214,[[]]],[11,"borrow","","",214,[[]]],[11,"borrow_mut","","",214,[[]]],[11,"try_from","","",214,[[],["result",4]]],[11,"into","","",214,[[]]],[11,"try_into","","",214,[[],["result",4]]],[11,"type_id","","",214,[[],["typeid",3]]],[11,"to_owned","","",214,[[]]],[11,"clone_into","","",214,[[]]],[11,"to_string","","",214,[[],["string",3]]],[11,"from","","",215,[[]]],[11,"borrow","","",215,[[]]],[11,"borrow_mut","","",215,[[]]],[11,"try_from","","",215,[[],["result",4]]],[11,"into","","",215,[[]]],[11,"try_into","","",215,[[],["result",4]]],[11,"type_id","","",215,[[],["typeid",3]]],[11,"to_owned","","",215,[[]]],[11,"clone_into","","",215,[[]]],[11,"to_string","","",215,[[],["string",3]]],[11,"from","","",216,[[]]],[11,"borrow","","",216,[[]]],[11,"borrow_mut","","",216,[[]]],[11,"try_from","","",216,[[],["result",4]]],[11,"into","","",216,[[]]],[11,"try_into","","",216,[[],["result",4]]],[11,"type_id","","",216,[[],["typeid",3]]],[11,"from","","",217,[[]]],[11,"borrow","","",217,[[]]],[11,"borrow_mut","","",217,[[]]],[11,"try_from","","",217,[[],["result",4]]],[11,"into","","",217,[[]]],[11,"try_into","","",217,[[],["result",4]]],[11,"type_id","","",217,[[],["typeid",3]]],[11,"from","","",218,[[]]],[11,"borrow","","",218,[[]]],[11,"borrow_mut","","",218,[[]]],[11,"try_from","","",218,[[],["result",4]]],[11,"into","","",218,[[]]],[11,"try_into","","",218,[[],["result",4]]],[11,"type_id","","",218,[[],["typeid",3]]],[11,"from","","",219,[[]]],[11,"borrow","","",219,[[]]],[11,"borrow_mut","","",219,[[]]],[11,"try_from","","",219,[[],["result",4]]],[11,"into","","",219,[[]]],[11,"try_into","","",219,[[],["result",4]]],[11,"type_id","","",219,[[],["typeid",3]]],[11,"from","","",220,[[]]],[11,"borrow","","",220,[[]]],[11,"borrow_mut","","",220,[[]]],[11,"try_from","","",220,[[],["result",4]]],[11,"into","","",220,[[]]],[11,"try_into","","",220,[[],["result",4]]],[11,"type_id","","",220,[[],["typeid",3]]],[11,"from","","",221,[[]]],[11,"borrow","","",221,[[]]],[11,"borrow_mut","","",221,[[]]],[11,"try_from","","",221,[[],["result",4]]],[11,"into","","",221,[[]]],[11,"try_into","","",221,[[],["result",4]]],[11,"type_id","","",221,[[],["typeid",3]]],[11,"from","std::rc","",222,[[]]],[11,"from","","",222,[[]]],[11,"borrow","","",222,[[]]],[11,"borrow_mut","","",222,[[]]],[11,"try_from","","",222,[[],["result",4]]],[11,"into","","",222,[[]]],[11,"try_into","","",222,[[],["result",4]]],[11,"type_id","","",222,[[],["typeid",3]]],[11,"to_owned","","",222,[[]]],[11,"clone_into","","",222,[[]]],[11,"to_string","","",222,[[],["string",3]]],[11,"from","","",223,[[]]],[11,"borrow","","",223,[[]]],[11,"borrow_mut","","",223,[[]]],[11,"try_from","","",223,[[],["result",4]]],[11,"into","","",223,[[]]],[11,"try_into","","",223,[[],["result",4]]],[11,"type_id","","",223,[[],["typeid",3]]],[11,"to_owned","","",223,[[]]],[11,"clone_into","","",223,[[]]],[11,"from","std::slice","",224,[[]]],[11,"borrow","","",224,[[]]],[11,"borrow_mut","","",224,[[]]],[11,"try_from","","",224,[[],["result",4]]],[11,"into","","",224,[[]]],[11,"try_into","","",224,[[],["result",4]]],[11,"into_iter","","",224,[[]]],[11,"type_id","","",224,[[],["typeid",3]]],[11,"to_owned","","",224,[[]]],[11,"clone_into","","",224,[[]]],[11,"from","","",225,[[]]],[11,"borrow","","",225,[[]]],[11,"borrow_mut","","",225,[[]]],[11,"try_from","","",225,[[],["result",4]]],[11,"into","","",225,[[]]],[11,"try_into","","",225,[[],["result",4]]],[11,"into_iter","","",225,[[]]],[11,"type_id","","",225,[[],["typeid",3]]],[11,"from","","",226,[[]]],[11,"borrow","","",226,[[]]],[11,"borrow_mut","","",226,[[]]],[11,"try_from","","",226,[[],["result",4]]],[11,"into","","",226,[[]]],[11,"try_into","","",226,[[],["result",4]]],[11,"into_iter","","",226,[[]]],[11,"type_id","","",226,[[],["typeid",3]]],[11,"to_owned","","",226,[[]]],[11,"clone_into","","",226,[[]]],[11,"from","","",227,[[]]],[11,"borrow","","",227,[[]]],[11,"borrow_mut","","",227,[[]]],[11,"try_from","","",227,[[],["result",4]]],[11,"into","","",227,[[]]],[11,"try_into","","",227,[[],["result",4]]],[11,"into_iter","","",227,[[]]],[11,"type_id","","",227,[[],["typeid",3]]],[11,"to_owned","","",227,[[]]],[11,"clone_into","","",227,[[]]],[11,"from","","",228,[[]]],[11,"borrow","","",228,[[]]],[11,"borrow_mut","","",228,[[]]],[11,"try_from","","",228,[[],["result",4]]],[11,"into","","",228,[[]]],[11,"try_into","","",228,[[],["result",4]]],[11,"into_iter","","",228,[[]]],[11,"type_id","","",228,[[],["typeid",3]]],[11,"to_owned","","",228,[[]]],[11,"clone_into","","",228,[[]]],[11,"from","","",229,[[]]],[11,"borrow","","",229,[[]]],[11,"borrow_mut","","",229,[[]]],[11,"try_from","","",229,[[],["result",4]]],[11,"into","","",229,[[]]],[11,"try_into","","",229,[[],["result",4]]],[11,"into_iter","","",229,[[]]],[11,"type_id","","",229,[[],["typeid",3]]],[11,"to_owned","","",229,[[]]],[11,"clone_into","","",229,[[]]],[11,"from","","",230,[[]]],[11,"borrow","","",230,[[]]],[11,"borrow_mut","","",230,[[]]],[11,"try_from","","",230,[[],["result",4]]],[11,"into","","",230,[[]]],[11,"try_into","","",230,[[],["result",4]]],[11,"into_iter","","",230,[[]]],[11,"type_id","","",230,[[],["typeid",3]]],[11,"from","","",231,[[]]],[11,"borrow","","",231,[[]]],[11,"borrow_mut","","",231,[[]]],[11,"try_from","","",231,[[],["result",4]]],[11,"into","","",231,[[]]],[11,"try_into","","",231,[[],["result",4]]],[11,"into_iter","","",231,[[]]],[11,"type_id","","",231,[[],["typeid",3]]],[11,"from","","",232,[[]]],[11,"borrow","","",232,[[]]],[11,"borrow_mut","","",232,[[]]],[11,"try_from","","",232,[[],["result",4]]],[11,"into","","",232,[[]]],[11,"try_into","","",232,[[],["result",4]]],[11,"into_iter","","",232,[[]]],[11,"type_id","","",232,[[],["typeid",3]]],[11,"to_owned","","",232,[[]]],[11,"clone_into","","",232,[[]]],[11,"from","","",233,[[]]],[11,"borrow","","",233,[[]]],[11,"borrow_mut","","",233,[[]]],[11,"try_from","","",233,[[],["result",4]]],[11,"into","","",233,[[]]],[11,"try_into","","",233,[[],["result",4]]],[11,"into_iter","","",233,[[]]],[11,"type_id","","",233,[[],["typeid",3]]],[11,"from","","",234,[[]]],[11,"borrow","","",234,[[]]],[11,"borrow_mut","","",234,[[]]],[11,"try_from","","",234,[[],["result",4]]],[11,"into","","",234,[[]]],[11,"try_into","","",234,[[],["result",4]]],[11,"into_iter","","",234,[[]]],[11,"type_id","","",234,[[],["typeid",3]]],[11,"to_owned","","",234,[[]]],[11,"clone_into","","",234,[[]]],[11,"from","","",235,[[]]],[11,"borrow","","",235,[[]]],[11,"borrow_mut","","",235,[[]]],[11,"try_from","","",235,[[],["result",4]]],[11,"into","","",235,[[]]],[11,"try_into","","",235,[[],["result",4]]],[11,"into_iter","","",235,[[]]],[11,"type_id","","",235,[[],["typeid",3]]],[11,"from","","",236,[[]]],[11,"borrow","","",236,[[]]],[11,"borrow_mut","","",236,[[]]],[11,"try_from","","",236,[[],["result",4]]],[11,"into","","",236,[[]]],[11,"try_into","","",236,[[],["result",4]]],[11,"into_iter","","",236,[[]]],[11,"type_id","","",236,[[],["typeid",3]]],[11,"to_owned","","",236,[[]]],[11,"clone_into","","",236,[[]]],[11,"from","","",237,[[]]],[11,"borrow","","",237,[[]]],[11,"borrow_mut","","",237,[[]]],[11,"try_from","","",237,[[],["result",4]]],[11,"into","","",237,[[]]],[11,"try_into","","",237,[[],["result",4]]],[11,"into_iter","","",237,[[]]],[11,"type_id","","",237,[[],["typeid",3]]],[11,"to_owned","","",237,[[]]],[11,"clone_into","","",237,[[]]],[11,"from","","",238,[[]]],[11,"borrow","","",238,[[]]],[11,"borrow_mut","","",238,[[]]],[11,"try_from","","",238,[[],["result",4]]],[11,"into","","",238,[[]]],[11,"try_into","","",238,[[],["result",4]]],[11,"into_iter","","",238,[[]]],[11,"type_id","","",238,[[],["typeid",3]]],[11,"from","","",239,[[]]],[11,"borrow","","",239,[[]]],[11,"borrow_mut","","",239,[[]]],[11,"try_from","","",239,[[],["result",4]]],[11,"into","","",239,[[]]],[11,"try_into","","",239,[[],["result",4]]],[11,"into_iter","","",239,[[]]],[11,"type_id","","",239,[[],["typeid",3]]],[11,"from","","",240,[[]]],[11,"borrow","","",240,[[]]],[11,"borrow_mut","","",240,[[]]],[11,"try_from","","",240,[[],["result",4]]],[11,"into","","",240,[[]]],[11,"try_into","","",240,[[],["result",4]]],[11,"into_iter","","",240,[[]]],[11,"type_id","","",240,[[],["typeid",3]]],[11,"to_owned","","",240,[[]]],[11,"clone_into","","",240,[[]]],[11,"from","","",241,[[]]],[11,"borrow","","",241,[[]]],[11,"borrow_mut","","",241,[[]]],[11,"try_from","","",241,[[],["result",4]]],[11,"into","","",241,[[]]],[11,"try_into","","",241,[[],["result",4]]],[11,"into_iter","","",241,[[]]],[11,"type_id","","",241,[[],["typeid",3]]],[11,"from","","",242,[[]]],[11,"borrow","","",242,[[]]],[11,"borrow_mut","","",242,[[]]],[11,"try_from","","",242,[[],["result",4]]],[11,"into","","",242,[[]]],[11,"try_into","","",242,[[],["result",4]]],[11,"into_iter","","",242,[[]]],[11,"type_id","","",242,[[],["typeid",3]]],[11,"from","","",243,[[]]],[11,"borrow","","",243,[[]]],[11,"borrow_mut","","",243,[[]]],[11,"try_from","","",243,[[],["result",4]]],[11,"into","","",243,[[]]],[11,"try_into","","",243,[[],["result",4]]],[11,"into_iter","","",243,[[]]],[11,"type_id","","",243,[[],["typeid",3]]],[11,"from","","",244,[[]]],[11,"borrow","","",244,[[]]],[11,"borrow_mut","","",244,[[]]],[11,"try_from","","",244,[[],["result",4]]],[11,"into","","",244,[[]]],[11,"try_into","","",244,[[],["result",4]]],[11,"into_iter","","",244,[[]]],[11,"type_id","","",244,[[],["typeid",3]]],[11,"from","","",245,[[]]],[11,"borrow","","",245,[[]]],[11,"borrow_mut","","",245,[[]]],[11,"try_from","","",245,[[],["result",4]]],[11,"into","","",245,[[]]],[11,"try_into","","",245,[[],["result",4]]],[11,"into_iter","","",245,[[]]],[11,"type_id","","",245,[[],["typeid",3]]],[11,"from","std::str::pattern","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"from","","",246,[[]]],[11,"borrow","","",246,[[]]],[11,"borrow_mut","","",246,[[]]],[11,"try_from","","",246,[[],["result",4]]],[11,"into","","",246,[[]]],[11,"try_into","","",246,[[],["result",4]]],[11,"type_id","","",246,[[],["typeid",3]]],[11,"to_owned","","",246,[[]]],[11,"clone_into","","",246,[[]]],[11,"from","","",247,[[]]],[11,"borrow","","",247,[[]]],[11,"borrow_mut","","",247,[[]]],[11,"try_from","","",247,[[],["result",4]]],[11,"into","","",247,[[]]],[11,"try_into","","",247,[[],["result",4]]],[11,"type_id","","",247,[[],["typeid",3]]],[11,"to_owned","","",247,[[]]],[11,"clone_into","","",247,[[]]],[11,"from","","",248,[[]]],[11,"borrow","","",248,[[]]],[11,"borrow_mut","","",248,[[]]],[11,"try_from","","",248,[[],["result",4]]],[11,"into","","",248,[[]]],[11,"try_into","","",248,[[],["result",4]]],[11,"type_id","","",248,[[],["typeid",3]]],[11,"to_owned","","",248,[[]]],[11,"clone_into","","",248,[[]]],[11,"from","","",249,[[]]],[11,"borrow","","",249,[[]]],[11,"borrow_mut","","",249,[[]]],[11,"try_from","","",249,[[],["result",4]]],[11,"into","","",249,[[]]],[11,"try_into","","",249,[[],["result",4]]],[11,"type_id","","",249,[[],["typeid",3]]],[11,"to_owned","","",249,[[]]],[11,"clone_into","","",249,[[]]],[11,"from","std::str","",250,[[]]],[11,"borrow","","",250,[[]]],[11,"borrow_mut","","",250,[[]]],[11,"try_from","","",250,[[],["result",4]]],[11,"into","","",250,[[]]],[11,"try_into","","",250,[[],["result",4]]],[11,"into_iter","","",250,[[]]],[11,"type_id","","",250,[[],["typeid",3]]],[11,"to_owned","","",250,[[]]],[11,"clone_into","","",250,[[]]],[11,"from","","",251,[[]]],[11,"borrow","","",251,[[]]],[11,"borrow_mut","","",251,[[]]],[11,"try_from","","",251,[[],["result",4]]],[11,"into","","",251,[[]]],[11,"try_into","","",251,[[],["result",4]]],[11,"into_iter","","",251,[[]]],[11,"type_id","","",251,[[],["typeid",3]]],[11,"to_owned","","",251,[[]]],[11,"clone_into","","",251,[[]]],[11,"from","","",252,[[]]],[11,"borrow","","",252,[[]]],[11,"borrow_mut","","",252,[[]]],[11,"try_from","","",252,[[],["result",4]]],[11,"into","","",252,[[]]],[11,"try_into","","",252,[[],["result",4]]],[11,"into_iter","","",252,[[]]],[11,"type_id","","",252,[[],["typeid",3]]],[11,"to_owned","","",252,[[]]],[11,"clone_into","","",252,[[]]],[11,"from","","",253,[[]]],[11,"borrow","","",253,[[]]],[11,"borrow_mut","","",253,[[]]],[11,"try_from","","",253,[[],["result",4]]],[11,"into","","",253,[[]]],[11,"try_into","","",253,[[],["result",4]]],[11,"into_iter","","",253,[[]]],[11,"type_id","","",253,[[],["typeid",3]]],[11,"to_owned","","",253,[[]]],[11,"clone_into","","",253,[[]]],[11,"from","","",254,[[]]],[11,"borrow","","",254,[[]]],[11,"borrow_mut","","",254,[[]]],[11,"try_from","","",254,[[],["result",4]]],[11,"into","","",254,[[]]],[11,"try_into","","",254,[[],["result",4]]],[11,"into_iter","","",254,[[]]],[11,"type_id","","",254,[[],["typeid",3]]],[11,"to_owned","","",254,[[]]],[11,"clone_into","","",254,[[]]],[11,"from","","",255,[[]]],[11,"borrow","","",255,[[]]],[11,"borrow_mut","","",255,[[]]],[11,"try_from","","",255,[[],["result",4]]],[11,"into","","",255,[[]]],[11,"try_into","","",255,[[],["result",4]]],[11,"into_iter","","",255,[[]]],[11,"type_id","","",255,[[],["typeid",3]]],[11,"to_owned","","",255,[[]]],[11,"clone_into","","",255,[[]]],[11,"from","","",256,[[]]],[11,"borrow","","",256,[[]]],[11,"borrow_mut","","",256,[[]]],[11,"try_from","","",256,[[],["result",4]]],[11,"into","","",256,[[]]],[11,"try_into","","",256,[[],["result",4]]],[11,"type_id","","",256,[[],["typeid",3]]],[11,"to_owned","","",256,[[]]],[11,"clone_into","","",256,[[]]],[11,"to_string","","",256,[[],["string",3]]],[11,"from","","",257,[[]]],[11,"borrow","","",257,[[]]],[11,"borrow_mut","","",257,[[]]],[11,"try_from","","",257,[[],["result",4]]],[11,"into","","",257,[[]]],[11,"try_into","","",257,[[],["result",4]]],[11,"into_iter","","",257,[[]]],[11,"type_id","","",257,[[],["typeid",3]]],[11,"to_owned","","",257,[[]]],[11,"clone_into","","",257,[[]]],[11,"to_string","","",257,[[],["string",3]]],[11,"from","","",258,[[]]],[11,"borrow","","",258,[[]]],[11,"borrow_mut","","",258,[[]]],[11,"try_from","","",258,[[],["result",4]]],[11,"into","","",258,[[]]],[11,"try_into","","",258,[[],["result",4]]],[11,"into_iter","","",258,[[]]],[11,"type_id","","",258,[[],["typeid",3]]],[11,"to_owned","","",258,[[]]],[11,"clone_into","","",258,[[]]],[11,"to_string","","",258,[[],["string",3]]],[11,"from","","",259,[[]]],[11,"borrow","","",259,[[]]],[11,"borrow_mut","","",259,[[]]],[11,"try_from","","",259,[[],["result",4]]],[11,"into","","",259,[[]]],[11,"try_into","","",259,[[],["result",4]]],[11,"into_iter","","",259,[[]]],[11,"type_id","","",259,[[],["typeid",3]]],[11,"to_owned","","",259,[[]]],[11,"clone_into","","",259,[[]]],[11,"to_string","","",259,[[],["string",3]]],[11,"from","","",260,[[]]],[11,"borrow","","",260,[[]]],[11,"borrow_mut","","",260,[[]]],[11,"try_from","","",260,[[],["result",4]]],[11,"into","","",260,[[]]],[11,"try_into","","",260,[[],["result",4]]],[11,"type_id","","",260,[[],["typeid",3]]],[11,"to_owned","","",260,[[]]],[11,"clone_into","","",260,[[]]],[11,"to_string","","",260,[[],["string",3]]],[11,"from","","",261,[[]]],[11,"borrow","","",261,[[]]],[11,"borrow_mut","","",261,[[]]],[11,"try_from","","",261,[[],["result",4]]],[11,"into","","",261,[[]]],[11,"try_into","","",261,[[],["result",4]]],[11,"into_iter","","",261,[[]]],[11,"type_id","","",261,[[],["typeid",3]]],[11,"to_owned","","",261,[[]]],[11,"clone_into","","",261,[[]]],[11,"from","","",262,[[]]],[11,"borrow","","",262,[[]]],[11,"borrow_mut","","",262,[[]]],[11,"try_from","","",262,[[],["result",4]]],[11,"into","","",262,[[]]],[11,"try_into","","",262,[[],["result",4]]],[11,"into_iter","","",262,[[]]],[11,"type_id","","",262,[[],["typeid",3]]],[11,"to_owned","","",262,[[]]],[11,"clone_into","","",262,[[]]],[11,"from","","",263,[[]]],[11,"borrow","","",263,[[]]],[11,"borrow_mut","","",263,[[]]],[11,"try_from","","",263,[[],["result",4]]],[11,"into","","",263,[[]]],[11,"try_into","","",263,[[],["result",4]]],[11,"into_iter","","",263,[[]]],[11,"type_id","","",263,[[],["typeid",3]]],[11,"to_owned","","",263,[[]]],[11,"clone_into","","",263,[[]]],[11,"from","","",264,[[]]],[11,"borrow","","",264,[[]]],[11,"borrow_mut","","",264,[[]]],[11,"try_from","","",264,[[],["result",4]]],[11,"into","","",264,[[]]],[11,"try_into","","",264,[[],["result",4]]],[11,"into_iter","","",264,[[]]],[11,"type_id","","",264,[[],["typeid",3]]],[11,"to_owned","","",264,[[]]],[11,"clone_into","","",264,[[]]],[11,"from","","",265,[[]]],[11,"borrow","","",265,[[]]],[11,"borrow_mut","","",265,[[]]],[11,"try_from","","",265,[[],["result",4]]],[11,"into","","",265,[[]]],[11,"try_into","","",265,[[],["result",4]]],[11,"into_iter","","",265,[[]]],[11,"type_id","","",265,[[],["typeid",3]]],[11,"to_owned","","",265,[[]]],[11,"clone_into","","",265,[[]]],[11,"from","","",266,[[]]],[11,"borrow","","",266,[[]]],[11,"borrow_mut","","",266,[[]]],[11,"try_from","","",266,[[],["result",4]]],[11,"into","","",266,[[]]],[11,"try_into","","",266,[[],["result",4]]],[11,"into_iter","","",266,[[]]],[11,"type_id","","",266,[[],["typeid",3]]],[11,"to_owned","","",266,[[]]],[11,"clone_into","","",266,[[]]],[11,"from","","",267,[[]]],[11,"borrow","","",267,[[]]],[11,"borrow_mut","","",267,[[]]],[11,"try_from","","",267,[[],["result",4]]],[11,"into","","",267,[[]]],[11,"try_into","","",267,[[],["result",4]]],[11,"into_iter","","",267,[[]]],[11,"type_id","","",267,[[],["typeid",3]]],[11,"to_owned","","",267,[[]]],[11,"clone_into","","",267,[[]]],[11,"from","","",268,[[]]],[11,"borrow","","",268,[[]]],[11,"borrow_mut","","",268,[[]]],[11,"try_from","","",268,[[],["result",4]]],[11,"into","","",268,[[]]],[11,"try_into","","",268,[[],["result",4]]],[11,"into_iter","","",268,[[]]],[11,"type_id","","",268,[[],["typeid",3]]],[11,"to_owned","","",268,[[]]],[11,"clone_into","","",268,[[]]],[11,"from","","",269,[[]]],[11,"borrow","","",269,[[]]],[11,"borrow_mut","","",269,[[]]],[11,"try_from","","",269,[[],["result",4]]],[11,"into","","",269,[[]]],[11,"try_into","","",269,[[],["result",4]]],[11,"into_iter","","",269,[[]]],[11,"type_id","","",269,[[],["typeid",3]]],[11,"to_owned","","",269,[[]]],[11,"clone_into","","",269,[[]]],[11,"from","","",270,[[]]],[11,"borrow","","",270,[[]]],[11,"borrow_mut","","",270,[[]]],[11,"try_from","","",270,[[],["result",4]]],[11,"into","","",270,[[]]],[11,"try_into","","",270,[[],["result",4]]],[11,"into_iter","","",270,[[]]],[11,"type_id","","",270,[[],["typeid",3]]],[11,"to_owned","","",270,[[]]],[11,"clone_into","","",270,[[]]],[11,"from","","",271,[[]]],[11,"borrow","","",271,[[]]],[11,"borrow_mut","","",271,[[]]],[11,"try_from","","",271,[[],["result",4]]],[11,"into","","",271,[[]]],[11,"try_into","","",271,[[],["result",4]]],[11,"into_iter","","",271,[[]]],[11,"type_id","","",271,[[],["typeid",3]]],[11,"to_owned","","",271,[[]]],[11,"clone_into","","",271,[[]]],[11,"from","","",272,[[]]],[11,"borrow","","",272,[[]]],[11,"borrow_mut","","",272,[[]]],[11,"try_from","","",272,[[],["result",4]]],[11,"into","","",272,[[]]],[11,"try_into","","",272,[[],["result",4]]],[11,"into_iter","","",272,[[]]],[11,"type_id","","",272,[[],["typeid",3]]],[11,"to_owned","","",272,[[]]],[11,"clone_into","","",272,[[]]],[11,"from","std::string","",273,[[]]],[11,"borrow","","",273,[[]]],[11,"borrow_mut","","",273,[[]]],[11,"try_from","","",273,[[],["result",4]]],[11,"into","","",273,[[]]],[11,"try_into","","",273,[[],["result",4]]],[11,"type_id","","",273,[[],["typeid",3]]],[11,"to_owned","","",273,[[]]],[11,"clone_into","","",273,[[]]],[11,"to_string","","",273,[[],["string",3]]],[11,"from","","",274,[[]]],[11,"borrow","","",274,[[]]],[11,"borrow_mut","","",274,[[]]],[11,"try_from","","",274,[[],["result",4]]],[11,"into","","",274,[[]]],[11,"try_into","","",274,[[],["result",4]]],[11,"type_id","","",274,[[],["typeid",3]]],[11,"to_owned","","",274,[[]]],[11,"clone_into","","",274,[[]]],[11,"to_string","","",274,[[],["string",3]]],[11,"from","","",275,[[]]],[11,"borrow","","",275,[[]]],[11,"borrow_mut","","",275,[[]]],[11,"try_from","","",275,[[],["result",4]]],[11,"into","","",275,[[]]],[11,"try_into","","",275,[[],["result",4]]],[11,"type_id","","",275,[[],["typeid",3]]],[11,"to_string","","",275,[[],["string",3]]],[11,"from","","",276,[[]]],[11,"borrow","","",276,[[]]],[11,"borrow_mut","","",276,[[]]],[11,"try_from","","",276,[[],["result",4]]],[11,"into","","",276,[[]]],[11,"try_into","","",276,[[],["result",4]]],[11,"into_iter","","",276,[[]]],[11,"type_id","","",276,[[],["typeid",3]]],[11,"from","std::vec","",277,[[]]],[11,"borrow","","",277,[[]]],[11,"borrow_mut","","",277,[[]]],[11,"try_from","","",277,[[],["result",4]]],[11,"into","","",277,[[]]],[11,"try_into","","",277,[[],["result",4]]],[11,"type_id","","",277,[[],["typeid",3]]],[11,"to_owned","","",277,[[]]],[11,"clone_into","","",277,[[]]],[11,"from","","",278,[[]]],[11,"borrow","","",278,[[]]],[11,"borrow_mut","","",278,[[]]],[11,"try_from","","",278,[[],["result",4]]],[11,"into","","",278,[[]]],[11,"try_into","","",278,[[],["result",4]]],[11,"into_iter","","",278,[[]]],[11,"type_id","","",278,[[],["typeid",3]]],[11,"to_owned","","",278,[[]]],[11,"clone_into","","",278,[[]]],[11,"from","","",279,[[]]],[11,"borrow","","",279,[[]]],[11,"borrow_mut","","",279,[[]]],[11,"try_from","","",279,[[],["result",4]]],[11,"into","","",279,[[]]],[11,"try_into","","",279,[[],["result",4]]],[11,"into_iter","","",279,[[]]],[11,"type_id","","",279,[[],["typeid",3]]],[11,"from","","",280,[[]]],[11,"borrow","","",280,[[]]],[11,"borrow_mut","","",280,[[]]],[11,"try_from","","",280,[[],["result",4]]],[11,"into","","",280,[[]]],[11,"try_into","","",280,[[],["result",4]]],[11,"into_iter","","",280,[[]]],[11,"type_id","","",280,[[],["typeid",3]]],[11,"from","","",281,[[]]],[11,"borrow","","",281,[[]]],[11,"borrow_mut","","",281,[[]]],[11,"try_from","","",281,[[],["result",4]]],[11,"into","","",281,[[]]],[11,"try_into","","",281,[[],["result",4]]],[11,"into_iter","","",281,[[]]],[11,"type_id","","",281,[[],["typeid",3]]],[11,"from","std::any","",282,[[]]],[11,"borrow","","",282,[[]]],[11,"borrow_mut","","",282,[[]]],[11,"try_from","","",282,[[],["result",4]]],[11,"into","","",282,[[]]],[11,"try_into","","",282,[[],["result",4]]],[11,"type_id","","",282,[[],["typeid",3]]],[11,"to_owned","","",282,[[]]],[11,"clone_into","","",282,[[]]],[11,"from","std::array","",283,[[]]],[11,"borrow","","",283,[[]]],[11,"borrow_mut","","",283,[[]]],[11,"try_from","","",283,[[],["result",4]]],[11,"into","","",283,[[]]],[11,"try_into","","",283,[[],["result",4]]],[11,"type_id","","",283,[[],["typeid",3]]],[11,"to_owned","","",283,[[]]],[11,"clone_into","","",283,[[]]],[11,"to_string","","",283,[[],["string",3]]],[11,"from","","",284,[[]]],[11,"borrow","","",284,[[]]],[11,"borrow_mut","","",284,[[]]],[11,"try_from","","",284,[[],["result",4]]],[11,"into","","",284,[[]]],[11,"try_into","","",284,[[],["result",4]]],[11,"into_iter","","",284,[[]]],[11,"type_id","","",284,[[],["typeid",3]]],[11,"to_owned","","",284,[[]]],[11,"clone_into","","",284,[[]]],[11,"from","std::cell","",285,[[]]],[11,"from","","",285,[[]]],[11,"borrow","","",285,[[]]],[11,"borrow_mut","","",285,[[]]],[11,"try_from","","",285,[[],["result",4]]],[11,"into","","",285,[[]]],[11,"try_into","","",285,[[],["result",4]]],[11,"type_id","","",285,[[],["typeid",3]]],[11,"to_owned","","",285,[[]]],[11,"clone_into","","",285,[[]]],[11,"from","","",286,[[]]],[11,"from","","",286,[[]]],[11,"borrow","","",286,[[]]],[11,"borrow_mut","","",286,[[]]],[11,"try_from","","",286,[[],["result",4]]],[11,"into","","",286,[[]]],[11,"try_into","","",286,[[],["result",4]]],[11,"type_id","","",286,[[],["typeid",3]]],[11,"to_owned","","",286,[[]]],[11,"clone_into","","",286,[[]]],[11,"from","","",287,[[]]],[11,"borrow","","",287,[[]]],[11,"borrow_mut","","",287,[[]]],[11,"try_from","","",287,[[],["result",4]]],[11,"into","","",287,[[]]],[11,"try_into","","",287,[[],["result",4]]],[11,"type_id","","",287,[[],["typeid",3]]],[11,"to_string","","",287,[[],["string",3]]],[11,"from","","",288,[[]]],[11,"borrow","","",288,[[]]],[11,"borrow_mut","","",288,[[]]],[11,"try_from","","",288,[[],["result",4]]],[11,"into","","",288,[[]]],[11,"try_into","","",288,[[],["result",4]]],[11,"type_id","","",288,[[],["typeid",3]]],[11,"to_string","","",288,[[],["string",3]]],[11,"from","","",289,[[]]],[11,"borrow","","",289,[[]]],[11,"borrow_mut","","",289,[[]]],[11,"try_from","","",289,[[],["result",4]]],[11,"into","","",289,[[]]],[11,"try_into","","",289,[[],["result",4]]],[11,"type_id","","",289,[[],["typeid",3]]],[11,"to_string","","",289,[[],["string",3]]],[11,"from","","",290,[[]]],[11,"borrow","","",290,[[]]],[11,"borrow_mut","","",290,[[]]],[11,"try_from","","",290,[[],["result",4]]],[11,"into","","",290,[[]]],[11,"try_into","","",290,[[],["result",4]]],[11,"type_id","","",290,[[],["typeid",3]]],[11,"to_string","","",290,[[],["string",3]]],[11,"from","","",291,[[]]],[11,"from","","",291,[[]]],[11,"borrow","","",291,[[]]],[11,"borrow_mut","","",291,[[]]],[11,"try_from","","",291,[[],["result",4]]],[11,"into","","",291,[[]]],[11,"try_into","","",291,[[],["result",4]]],[11,"type_id","","",291,[[],["typeid",3]]],[11,"from","std::char","",292,[[]]],[11,"borrow","","",292,[[]]],[11,"borrow_mut","","",292,[[]]],[11,"try_from","","",292,[[],["result",4]]],[11,"into","","",292,[[]]],[11,"try_into","","",292,[[],["result",4]]],[11,"into_iter","","",292,[[]]],[11,"type_id","","",292,[[],["typeid",3]]],[11,"to_owned","","",292,[[]]],[11,"clone_into","","",292,[[]]],[11,"to_string","","",292,[[],["string",3]]],[11,"from","","",293,[[]]],[11,"borrow","","",293,[[]]],[11,"borrow_mut","","",293,[[]]],[11,"try_from","","",293,[[],["result",4]]],[11,"into","","",293,[[]]],[11,"try_into","","",293,[[],["result",4]]],[11,"into_iter","","",293,[[]]],[11,"type_id","","",293,[[],["typeid",3]]],[11,"to_owned","","",293,[[]]],[11,"clone_into","","",293,[[]]],[11,"to_string","","",293,[[],["string",3]]],[11,"from","","",294,[[]]],[11,"borrow","","",294,[[]]],[11,"borrow_mut","","",294,[[]]],[11,"try_from","","",294,[[],["result",4]]],[11,"into","","",294,[[]]],[11,"try_into","","",294,[[],["result",4]]],[11,"into_iter","","",294,[[]]],[11,"type_id","","",294,[[],["typeid",3]]],[11,"to_owned","","",294,[[]]],[11,"clone_into","","",294,[[]]],[11,"to_string","","",294,[[],["string",3]]],[11,"from","","",295,[[]]],[11,"borrow","","",295,[[]]],[11,"borrow_mut","","",295,[[]]],[11,"try_from","","",295,[[],["result",4]]],[11,"into","","",295,[[]]],[11,"try_into","","",295,[[],["result",4]]],[11,"into_iter","","",295,[[]]],[11,"type_id","","",295,[[],["typeid",3]]],[11,"to_owned","","",295,[[]]],[11,"clone_into","","",295,[[]]],[11,"to_string","","",295,[[],["string",3]]],[11,"from","","",296,[[]]],[11,"borrow","","",296,[[]]],[11,"borrow_mut","","",296,[[]]],[11,"try_from","","",296,[[],["result",4]]],[11,"into","","",296,[[]]],[11,"try_into","","",296,[[],["result",4]]],[11,"into_iter","","",296,[[]]],[11,"type_id","","",296,[[],["typeid",3]]],[11,"to_owned","","",296,[[]]],[11,"clone_into","","",296,[[]]],[11,"to_string","","",296,[[],["string",3]]],[11,"from","","",297,[[]]],[11,"borrow","","",297,[[]]],[11,"borrow_mut","","",297,[[]]],[11,"try_from","","",297,[[],["result",4]]],[11,"into","","",297,[[]]],[11,"try_into","","",297,[[],["result",4]]],[11,"type_id","","",297,[[],["typeid",3]]],[11,"to_owned","","",297,[[]]],[11,"clone_into","","",297,[[]]],[11,"to_string","","",297,[[],["string",3]]],[11,"from","","",298,[[]]],[11,"borrow","","",298,[[]]],[11,"borrow_mut","","",298,[[]]],[11,"try_from","","",298,[[],["result",4]]],[11,"into","","",298,[[]]],[11,"try_into","","",298,[[],["result",4]]],[11,"type_id","","",298,[[],["typeid",3]]],[11,"to_owned","","",298,[[]]],[11,"clone_into","","",298,[[]]],[11,"to_string","","",298,[[],["string",3]]],[11,"from","","",299,[[]]],[11,"borrow","","",299,[[]]],[11,"borrow_mut","","",299,[[]]],[11,"try_from","","",299,[[],["result",4]]],[11,"into","","",299,[[]]],[11,"try_into","","",299,[[],["result",4]]],[11,"into_iter","","",299,[[]]],[11,"type_id","","",299,[[],["typeid",3]]],[11,"to_owned","","",299,[[]]],[11,"clone_into","","",299,[[]]],[11,"from","","",300,[[]]],[11,"borrow","","",300,[[]]],[11,"borrow_mut","","",300,[[]]],[11,"try_from","","",300,[[],["result",4]]],[11,"into","","",300,[[]]],[11,"try_into","","",300,[[],["result",4]]],[11,"type_id","","",300,[[],["typeid",3]]],[11,"to_owned","","",300,[[]]],[11,"clone_into","","",300,[[]]],[11,"to_string","","",300,[[],["string",3]]],[11,"from","std::cmp","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"into","","",28,[[]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"from","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"into","","",29,[[]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"from","std::convert","",301,[[]]],[11,"from","","",301,[[]]],[11,"borrow","","",301,[[]]],[11,"borrow_mut","","",301,[[]]],[11,"try_from","","",301,[[],["result",4]]],[11,"into","","",301,[[]]],[11,"try_into","","",301,[[],["result",4]]],[11,"type_id","","",301,[[],["typeid",3]]],[11,"to_owned","","",301,[[]]],[11,"clone_into","","",301,[[]]],[11,"to_string","","",301,[[],["string",3]]],[11,"from","std::hash","",302,[[]]],[11,"borrow","","",302,[[]]],[11,"borrow_mut","","",302,[[]]],[11,"try_from","","",302,[[],["result",4]]],[11,"into","","",302,[[]]],[11,"try_into","","",302,[[],["result",4]]],[11,"type_id","","",302,[[],["typeid",3]]],[11,"to_owned","","",302,[[]]],[11,"clone_into","","",302,[[]]],[11,"from","","",303,[[]]],[11,"borrow","","",303,[[]]],[11,"borrow_mut","","",303,[[]]],[11,"try_from","","",303,[[],["result",4]]],[11,"into","","",303,[[]]],[11,"try_into","","",303,[[],["result",4]]],[11,"type_id","","",303,[[],["typeid",3]]],[11,"to_owned","","",303,[[]]],[11,"clone_into","","",303,[[]]],[11,"from","std::iter","",304,[[]]],[11,"borrow","","",304,[[]]],[11,"borrow_mut","","",304,[[]]],[11,"try_from","","",304,[[],["result",4]]],[11,"into","","",304,[[]]],[11,"try_into","","",304,[[],["result",4]]],[11,"into_iter","","",304,[[]]],[11,"type_id","","",304,[[],["typeid",3]]],[11,"to_owned","","",304,[[]]],[11,"clone_into","","",304,[[]]],[11,"from","","",305,[[]]],[11,"borrow","","",305,[[]]],[11,"borrow_mut","","",305,[[]]],[11,"try_from","","",305,[[],["result",4]]],[11,"into","","",305,[[]]],[11,"try_into","","",305,[[],["result",4]]],[11,"into_iter","","",305,[[]]],[11,"type_id","","",305,[[],["typeid",3]]],[11,"to_owned","","",305,[[]]],[11,"clone_into","","",305,[[]]],[11,"from","","",306,[[]]],[11,"borrow","","",306,[[]]],[11,"borrow_mut","","",306,[[]]],[11,"try_from","","",306,[[],["result",4]]],[11,"into","","",306,[[]]],[11,"try_into","","",306,[[],["result",4]]],[11,"into_iter","","",306,[[]]],[11,"type_id","","",306,[[],["typeid",3]]],[11,"to_owned","","",306,[[]]],[11,"clone_into","","",306,[[]]],[11,"from","","",307,[[]]],[11,"borrow","","",307,[[]]],[11,"borrow_mut","","",307,[[]]],[11,"try_from","","",307,[[],["result",4]]],[11,"into","","",307,[[]]],[11,"try_into","","",307,[[],["result",4]]],[11,"into_iter","","",307,[[]]],[11,"type_id","","",307,[[],["typeid",3]]],[11,"to_owned","","",307,[[]]],[11,"clone_into","","",307,[[]]],[11,"from","","",308,[[]]],[11,"borrow","","",308,[[]]],[11,"borrow_mut","","",308,[[]]],[11,"try_from","","",308,[[],["result",4]]],[11,"into","","",308,[[]]],[11,"try_into","","",308,[[],["result",4]]],[11,"into_iter","","",308,[[]]],[11,"type_id","","",308,[[],["typeid",3]]],[11,"to_owned","","",308,[[]]],[11,"clone_into","","",308,[[]]],[11,"from","","",309,[[]]],[11,"borrow","","",309,[[]]],[11,"borrow_mut","","",309,[[]]],[11,"try_from","","",309,[[],["result",4]]],[11,"into","","",309,[[]]],[11,"try_into","","",309,[[],["result",4]]],[11,"into_iter","","",309,[[]]],[11,"type_id","","",309,[[],["typeid",3]]],[11,"to_owned","","",309,[[]]],[11,"clone_into","","",309,[[]]],[11,"from","","",310,[[]]],[11,"borrow","","",310,[[]]],[11,"borrow_mut","","",310,[[]]],[11,"try_from","","",310,[[],["result",4]]],[11,"into","","",310,[[]]],[11,"try_into","","",310,[[],["result",4]]],[11,"into_iter","","",310,[[]]],[11,"type_id","","",310,[[],["typeid",3]]],[11,"to_owned","","",310,[[]]],[11,"clone_into","","",310,[[]]],[11,"from","","",311,[[]]],[11,"borrow","","",311,[[]]],[11,"borrow_mut","","",311,[[]]],[11,"try_from","","",311,[[],["result",4]]],[11,"into","","",311,[[]]],[11,"try_into","","",311,[[],["result",4]]],[11,"into_iter","","",311,[[]]],[11,"type_id","","",311,[[],["typeid",3]]],[11,"to_owned","","",311,[[]]],[11,"clone_into","","",311,[[]]],[11,"from","","",312,[[]]],[11,"borrow","","",312,[[]]],[11,"borrow_mut","","",312,[[]]],[11,"try_from","","",312,[[],["result",4]]],[11,"into","","",312,[[]]],[11,"try_into","","",312,[[],["result",4]]],[11,"into_iter","","",312,[[]]],[11,"type_id","","",312,[[],["typeid",3]]],[11,"to_owned","","",312,[[]]],[11,"clone_into","","",312,[[]]],[11,"from","","",313,[[]]],[11,"borrow","","",313,[[]]],[11,"borrow_mut","","",313,[[]]],[11,"try_from","","",313,[[],["result",4]]],[11,"into","","",313,[[]]],[11,"try_into","","",313,[[],["result",4]]],[11,"into_iter","","",313,[[]]],[11,"type_id","","",313,[[],["typeid",3]]],[11,"to_owned","","",313,[[]]],[11,"clone_into","","",313,[[]]],[11,"from","","",314,[[]]],[11,"borrow","","",314,[[]]],[11,"borrow_mut","","",314,[[]]],[11,"try_from","","",314,[[],["result",4]]],[11,"into","","",314,[[]]],[11,"try_into","","",314,[[],["result",4]]],[11,"into_iter","","",314,[[]]],[11,"type_id","","",314,[[],["typeid",3]]],[11,"to_owned","","",314,[[]]],[11,"clone_into","","",314,[[]]],[11,"from","","",315,[[]]],[11,"borrow","","",315,[[]]],[11,"borrow_mut","","",315,[[]]],[11,"try_from","","",315,[[],["result",4]]],[11,"into","","",315,[[]]],[11,"try_into","","",315,[[],["result",4]]],[11,"into_iter","","",315,[[]]],[11,"type_id","","",315,[[],["typeid",3]]],[11,"to_owned","","",315,[[]]],[11,"clone_into","","",315,[[]]],[11,"from","","",316,[[]]],[11,"borrow","","",316,[[]]],[11,"borrow_mut","","",316,[[]]],[11,"try_from","","",316,[[],["result",4]]],[11,"into","","",316,[[]]],[11,"try_into","","",316,[[],["result",4]]],[11,"into_iter","","",316,[[]]],[11,"type_id","","",316,[[],["typeid",3]]],[11,"to_owned","","",316,[[]]],[11,"clone_into","","",316,[[]]],[11,"from","","",317,[[]]],[11,"borrow","","",317,[[]]],[11,"borrow_mut","","",317,[[]]],[11,"try_from","","",317,[[],["result",4]]],[11,"into","","",317,[[]]],[11,"try_into","","",317,[[],["result",4]]],[11,"into_iter","","",317,[[]]],[11,"type_id","","",317,[[],["typeid",3]]],[11,"to_owned","","",317,[[]]],[11,"clone_into","","",317,[[]]],[11,"from","","",318,[[]]],[11,"borrow","","",318,[[]]],[11,"borrow_mut","","",318,[[]]],[11,"try_from","","",318,[[],["result",4]]],[11,"into","","",318,[[]]],[11,"try_into","","",318,[[],["result",4]]],[11,"into_iter","","",318,[[]]],[11,"type_id","","",318,[[],["typeid",3]]],[11,"to_owned","","",318,[[]]],[11,"clone_into","","",318,[[]]],[11,"from","","",319,[[]]],[11,"borrow","","",319,[[]]],[11,"borrow_mut","","",319,[[]]],[11,"try_from","","",319,[[],["result",4]]],[11,"into","","",319,[[]]],[11,"try_into","","",319,[[],["result",4]]],[11,"into_iter","","",319,[[]]],[11,"type_id","","",319,[[],["typeid",3]]],[11,"to_owned","","",319,[[]]],[11,"clone_into","","",319,[[]]],[11,"from","","",320,[[]]],[11,"borrow","","",320,[[]]],[11,"borrow_mut","","",320,[[]]],[11,"try_from","","",320,[[],["result",4]]],[11,"into","","",320,[[]]],[11,"try_into","","",320,[[],["result",4]]],[11,"into_iter","","",320,[[]]],[11,"type_id","","",320,[[],["typeid",3]]],[11,"to_owned","","",320,[[]]],[11,"clone_into","","",320,[[]]],[11,"from","","",321,[[]]],[11,"borrow","","",321,[[]]],[11,"borrow_mut","","",321,[[]]],[11,"try_from","","",321,[[],["result",4]]],[11,"into","","",321,[[]]],[11,"try_into","","",321,[[],["result",4]]],[11,"into_iter","","",321,[[]]],[11,"type_id","","",321,[[],["typeid",3]]],[11,"to_owned","","",321,[[]]],[11,"clone_into","","",321,[[]]],[11,"from","","",322,[[]]],[11,"borrow","","",322,[[]]],[11,"borrow_mut","","",322,[[]]],[11,"try_from","","",322,[[],["result",4]]],[11,"into","","",322,[[]]],[11,"try_into","","",322,[[],["result",4]]],[11,"into_iter","","",322,[[]]],[11,"type_id","","",322,[[],["typeid",3]]],[11,"to_owned","","",322,[[]]],[11,"clone_into","","",322,[[]]],[11,"from","","",323,[[]]],[11,"borrow","","",323,[[]]],[11,"borrow_mut","","",323,[[]]],[11,"try_from","","",323,[[],["result",4]]],[11,"into","","",323,[[]]],[11,"try_into","","",323,[[],["result",4]]],[11,"into_iter","","",323,[[]]],[11,"type_id","","",323,[[],["typeid",3]]],[11,"to_owned","","",323,[[]]],[11,"clone_into","","",323,[[]]],[11,"from","","",324,[[]]],[11,"borrow","","",324,[[]]],[11,"borrow_mut","","",324,[[]]],[11,"try_from","","",324,[[],["result",4]]],[11,"into","","",324,[[]]],[11,"try_into","","",324,[[],["result",4]]],[11,"into_iter","","",324,[[]]],[11,"type_id","","",324,[[],["typeid",3]]],[11,"to_owned","","",324,[[]]],[11,"clone_into","","",324,[[]]],[11,"from","","",325,[[]]],[11,"borrow","","",325,[[]]],[11,"borrow_mut","","",325,[[]]],[11,"try_from","","",325,[[],["result",4]]],[11,"into","","",325,[[]]],[11,"try_into","","",325,[[],["result",4]]],[11,"into_iter","","",325,[[]]],[11,"type_id","","",325,[[],["typeid",3]]],[11,"to_owned","","",325,[[]]],[11,"clone_into","","",325,[[]]],[11,"from","","",326,[[]]],[11,"borrow","","",326,[[]]],[11,"borrow_mut","","",326,[[]]],[11,"try_from","","",326,[[],["result",4]]],[11,"into","","",326,[[]]],[11,"try_into","","",326,[[],["result",4]]],[11,"into_iter","","",326,[[]]],[11,"type_id","","",326,[[],["typeid",3]]],[11,"to_owned","","",326,[[]]],[11,"clone_into","","",326,[[]]],[11,"from","","",327,[[]]],[11,"borrow","","",327,[[]]],[11,"borrow_mut","","",327,[[]]],[11,"try_from","","",327,[[],["result",4]]],[11,"into","","",327,[[]]],[11,"try_into","","",327,[[],["result",4]]],[11,"into_iter","","",327,[[]]],[11,"type_id","","",327,[[],["typeid",3]]],[11,"to_owned","","",327,[[]]],[11,"clone_into","","",327,[[]]],[11,"from","","",328,[[]]],[11,"borrow","","",328,[[]]],[11,"borrow_mut","","",328,[[]]],[11,"try_from","","",328,[[],["result",4]]],[11,"into","","",328,[[]]],[11,"try_into","","",328,[[],["result",4]]],[11,"into_iter","","",328,[[]]],[11,"type_id","","",328,[[],["typeid",3]]],[11,"to_owned","","",328,[[]]],[11,"clone_into","","",328,[[]]],[11,"from","","",329,[[]]],[11,"borrow","","",329,[[]]],[11,"borrow_mut","","",329,[[]]],[11,"try_from","","",329,[[],["result",4]]],[11,"into","","",329,[[]]],[11,"try_into","","",329,[[],["result",4]]],[11,"into_iter","","",329,[[]]],[11,"type_id","","",329,[[],["typeid",3]]],[11,"to_owned","","",329,[[]]],[11,"clone_into","","",329,[[]]],[11,"from","","",330,[[]]],[11,"borrow","","",330,[[]]],[11,"borrow_mut","","",330,[[]]],[11,"try_from","","",330,[[],["result",4]]],[11,"into","","",330,[[]]],[11,"try_into","","",330,[[],["result",4]]],[11,"into_iter","","",330,[[]]],[11,"type_id","","",330,[[],["typeid",3]]],[11,"to_owned","","",330,[[]]],[11,"clone_into","","",330,[[]]],[11,"from","","",331,[[]]],[11,"borrow","","",331,[[]]],[11,"borrow_mut","","",331,[[]]],[11,"try_from","","",331,[[],["result",4]]],[11,"into","","",331,[[]]],[11,"try_into","","",331,[[],["result",4]]],[11,"into_iter","","",331,[[]]],[11,"type_id","","",331,[[],["typeid",3]]],[11,"to_owned","","",331,[[]]],[11,"clone_into","","",331,[[]]],[11,"from","","",332,[[]]],[11,"borrow","","",332,[[]]],[11,"borrow_mut","","",332,[[]]],[11,"try_from","","",332,[[],["result",4]]],[11,"into","","",332,[[]]],[11,"try_into","","",332,[[],["result",4]]],[11,"into_iter","","",332,[[]]],[11,"type_id","","",332,[[],["typeid",3]]],[11,"to_owned","","",332,[[]]],[11,"clone_into","","",332,[[]]],[11,"from","std::marker","",333,[[]]],[11,"borrow","","",333,[[]]],[11,"borrow_mut","","",333,[[]]],[11,"try_from","","",333,[[],["result",4]]],[11,"into","","",333,[[]]],[11,"try_into","","",333,[[],["result",4]]],[11,"type_id","","",333,[[],["typeid",3]]],[11,"to_owned","","",333,[[]]],[11,"clone_into","","",333,[[]]],[11,"from","","",334,[[]]],[11,"borrow","","",334,[[]]],[11,"borrow_mut","","",334,[[]]],[11,"try_from","","",334,[[],["result",4]]],[11,"into","","",334,[[]]],[11,"try_into","","",334,[[],["result",4]]],[11,"type_id","","",334,[[],["typeid",3]]],[11,"to_owned","","",334,[[]]],[11,"clone_into","","",334,[[]]],[11,"from","std::mem","",335,[[]]],[11,"borrow","","",335,[[]]],[11,"borrow_mut","","",335,[[]]],[11,"try_from","","",335,[[],["result",4]]],[11,"into","","",335,[[]]],[11,"try_into","","",335,[[],["result",4]]],[11,"type_id","","",335,[[],["typeid",3]]],[11,"to_owned","","",335,[[]]],[11,"clone_into","","",335,[[]]],[11,"from","","",336,[[]]],[11,"borrow","","",336,[[]]],[11,"borrow_mut","","",336,[[]]],[11,"try_from","","",336,[[],["result",4]]],[11,"into","","",336,[[]]],[11,"try_into","","",336,[[],["result",4]]],[11,"type_id","","",336,[[],["typeid",3]]],[11,"to_owned","","",336,[[]]],[11,"clone_into","","",336,[[]]],[11,"from","","",337,[[]]],[11,"borrow","","",337,[[]]],[11,"borrow_mut","","",337,[[]]],[11,"try_from","","",337,[[],["result",4]]],[11,"into","","",337,[[]]],[11,"try_into","","",337,[[],["result",4]]],[11,"type_id","","",337,[[],["typeid",3]]],[11,"to_owned","","",337,[[]]],[11,"clone_into","","",337,[[]]],[11,"from","std::ops","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"into","","",83,[[]]],[11,"try_into","","",83,[[],["result",4]]],[11,"into_iter","","",83,[[]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"from","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"into","","",84,[[]]],[11,"try_into","","",84,[[],["result",4]]],[11,"into_iter","","",84,[[]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"to_owned","","",84,[[]]],[11,"clone_into","","",84,[[]]],[11,"from","","",338,[[]]],[11,"borrow","","",338,[[]]],[11,"borrow_mut","","",338,[[]]],[11,"try_from","","",338,[[],["result",4]]],[11,"into","","",338,[[]]],[11,"try_into","","",338,[[],["result",4]]],[11,"type_id","","",338,[[],["typeid",3]]],[11,"to_owned","","",338,[[]]],[11,"clone_into","","",338,[[]]],[11,"from","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"into","","",85,[[]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"from","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"into","","",86,[[]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"from","","",339,[[]]],[11,"borrow","","",339,[[]]],[11,"borrow_mut","","",339,[[]]],[11,"try_from","","",339,[[],["result",4]]],[11,"into","","",339,[[]]],[11,"try_into","","",339,[[],["result",4]]],[11,"into_iter","","",339,[[]]],[11,"type_id","","",339,[[],["typeid",3]]],[11,"to_owned","","",339,[[]]],[11,"clone_into","","",339,[[]]],[11,"from","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"into","","",88,[[]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"from","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"into","","",91,[[]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"to_owned","","",91,[[]]],[11,"clone_into","","",91,[[]]],[11,"from","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"into","","",92,[[]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"to_owned","","",92,[[]]],[11,"clone_into","","",92,[[]]],[11,"from","std::option","",93,[[]]],[11,"from","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"into","","",93,[[]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"from","","",340,[[]]],[11,"borrow","","",340,[[]]],[11,"borrow_mut","","",340,[[]]],[11,"try_from","","",340,[[],["result",4]]],[11,"into","","",340,[[]]],[11,"try_into","","",340,[[],["result",4]]],[11,"into_iter","","",340,[[]]],[11,"type_id","","",340,[[],["typeid",3]]],[11,"to_owned","","",340,[[]]],[11,"clone_into","","",340,[[]]],[11,"from","","",341,[[]]],[11,"borrow","","",341,[[]]],[11,"borrow_mut","","",341,[[]]],[11,"try_from","","",341,[[],["result",4]]],[11,"into","","",341,[[]]],[11,"try_into","","",341,[[],["result",4]]],[11,"into_iter","","",341,[[]]],[11,"type_id","","",341,[[],["typeid",3]]],[11,"from","","",342,[[]]],[11,"borrow","","",342,[[]]],[11,"borrow_mut","","",342,[[]]],[11,"try_from","","",342,[[],["result",4]]],[11,"into","","",342,[[]]],[11,"try_into","","",342,[[],["result",4]]],[11,"into_iter","","",342,[[]]],[11,"type_id","","",342,[[],["typeid",3]]],[11,"to_owned","","",342,[[]]],[11,"clone_into","","",342,[[]]],[11,"from","","",343,[[]]],[11,"borrow","","",343,[[]]],[11,"borrow_mut","","",343,[[]]],[11,"try_from","","",343,[[],["result",4]]],[11,"into","","",343,[[]]],[11,"try_into","","",343,[[],["result",4]]],[11,"type_id","","",343,[[],["typeid",3]]],[11,"to_owned","","",343,[[]]],[11,"clone_into","","",343,[[]]],[11,"from","std::pin","",344,[[]]],[11,"borrow","","",344,[[]]],[11,"borrow_mut","","",344,[[]]],[11,"try_from","","",344,[[],["result",4]]],[11,"into","","",344,[[]]],[11,"try_into","","",344,[[],["result",4]]],[11,"type_id","","",344,[[],["typeid",3]]],[11,"into_future","","",344,[[]]],[11,"to_owned","","",344,[[]]],[11,"clone_into","","",344,[[]]],[11,"to_string","","",344,[[],["string",3]]],[11,"from","std::ptr","",345,[[]]],[11,"borrow","","",345,[[]]],[11,"borrow_mut","","",345,[[]]],[11,"try_from","","",345,[[],["result",4]]],[11,"into","","",345,[[]]],[11,"try_into","","",345,[[],["result",4]]],[11,"type_id","","",345,[[],["typeid",3]]],[11,"to_owned","","",345,[[]]],[11,"clone_into","","",345,[[]]],[11,"from","std::raw","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"into","","",94,[[]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"to_owned","","",94,[[]]],[11,"clone_into","","",94,[[]]],[11,"from","std::result","",95,[[]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"into","","",95,[[]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"to_owned","","",95,[[]]],[11,"clone_into","","",95,[[]]],[11,"from","","",346,[[]]],[11,"borrow","","",346,[[]]],[11,"borrow_mut","","",346,[[]]],[11,"try_from","","",346,[[],["result",4]]],[11,"into","","",346,[[]]],[11,"try_into","","",346,[[],["result",4]]],[11,"into_iter","","",346,[[]]],[11,"type_id","","",346,[[],["typeid",3]]],[11,"to_owned","","",346,[[]]],[11,"clone_into","","",346,[[]]],[11,"from","","",347,[[]]],[11,"borrow","","",347,[[]]],[11,"borrow_mut","","",347,[[]]],[11,"try_from","","",347,[[],["result",4]]],[11,"into","","",347,[[]]],[11,"try_into","","",347,[[],["result",4]]],[11,"into_iter","","",347,[[]]],[11,"type_id","","",347,[[],["typeid",3]]],[11,"from","","",348,[[]]],[11,"borrow","","",348,[[]]],[11,"borrow_mut","","",348,[[]]],[11,"try_from","","",348,[[],["result",4]]],[11,"into","","",348,[[]]],[11,"try_into","","",348,[[],["result",4]]],[11,"into_iter","","",348,[[]]],[11,"type_id","","",348,[[],["typeid",3]]],[11,"to_owned","","",348,[[]]],[11,"clone_into","","",348,[[]]],[11,"from","std::thread","",349,[[]]],[11,"borrow","","",349,[[]]],[11,"borrow_mut","","",349,[[]]],[11,"try_from","","",349,[[],["result",4]]],[11,"into","","",349,[[]]],[11,"try_into","","",349,[[],["result",4]]],[11,"type_id","","",349,[[],["typeid",3]]],[11,"from","","",350,[[]]],[11,"borrow","","",350,[[]]],[11,"borrow_mut","","",350,[[]]],[11,"try_from","","",350,[[],["result",4]]],[11,"into","","",350,[[]]],[11,"try_into","","",350,[[],["result",4]]],[11,"type_id","","",350,[[],["typeid",3]]],[11,"to_owned","","",350,[[]]],[11,"clone_into","","",350,[[]]],[11,"to_string","","",350,[[],["string",3]]],[11,"from","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"into","","",96,[[]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"from","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"into","","",97,[[]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"to_owned","","",97,[[]]],[11,"clone_into","","",97,[[]]],[11,"from","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"into","","",98,[[]]],[11,"try_into","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"to_owned","","",98,[[]]],[11,"clone_into","","",98,[[]]],[11,"from","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"into","","",99,[[]]],[11,"try_into","","",99,[[],["result",4]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"from","std::ascii","",351,[[]]],[11,"borrow","","",351,[[]]],[11,"borrow_mut","","",351,[[]]],[11,"try_from","","",351,[[],["result",4]]],[11,"into","","",351,[[]]],[11,"try_into","","",351,[[],["result",4]]],[11,"into_iter","","",351,[[]]],[11,"type_id","","",351,[[],["typeid",3]]],[11,"to_owned","","",351,[[]]],[11,"clone_into","","",351,[[]]],[11,"to_string","","",351,[[],["string",3]]],[11,"from","std::backtrace","",102,[[]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"into","","",102,[[]]],[11,"try_into","","",102,[[],["result",4]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"to_string","","",102,[[],["string",3]]],[11,"from","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"into","","",101,[[]]],[11,"try_into","","",101,[[],["result",4]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"from","std::collections","",352,[[]]],[11,"borrow","","",352,[[]]],[11,"borrow_mut","","",352,[[]]],[11,"try_from","","",352,[[],["result",4]]],[11,"into","","",352,[[]]],[11,"try_into","","",352,[[],["result",4]]],[11,"type_id","","",352,[[],["typeid",3]]],[11,"to_owned","","",352,[[]]],[11,"clone_into","","",352,[[]]],[11,"from","std::collections::binary_heap","",353,[[]]],[11,"borrow","","",353,[[]]],[11,"borrow_mut","","",353,[[]]],[11,"try_from","","",353,[[],["result",4]]],[11,"into","","",353,[[]]],[11,"try_into","","",353,[[],["result",4]]],[11,"type_id","","",353,[[],["typeid",3]]],[11,"from","","",354,[[]]],[11,"borrow","","",354,[[]]],[11,"borrow_mut","","",354,[[]]],[11,"try_from","","",354,[[],["result",4]]],[11,"into","","",354,[[]]],[11,"try_into","","",354,[[],["result",4]]],[11,"into_iter","","",354,[[]]],[11,"type_id","","",354,[[],["typeid",3]]],[11,"to_owned","","",354,[[]]],[11,"clone_into","","",354,[[]]],[11,"from","","",355,[[]]],[11,"borrow","","",355,[[]]],[11,"borrow_mut","","",355,[[]]],[11,"try_from","","",355,[[],["result",4]]],[11,"into","","",355,[[]]],[11,"try_into","","",355,[[],["result",4]]],[11,"into_iter","","",355,[[]]],[11,"type_id","","",355,[[],["typeid",3]]],[11,"to_owned","","",355,[[]]],[11,"clone_into","","",355,[[]]],[11,"from","","",356,[[]]],[11,"borrow","","",356,[[]]],[11,"borrow_mut","","",356,[[]]],[11,"try_from","","",356,[[],["result",4]]],[11,"into","","",356,[[]]],[11,"try_into","","",356,[[],["result",4]]],[11,"into_iter","","",356,[[]]],[11,"type_id","","",356,[[],["typeid",3]]],[11,"to_owned","","",356,[[]]],[11,"clone_into","","",356,[[]]],[11,"from","","",357,[[]]],[11,"borrow","","",357,[[]]],[11,"borrow_mut","","",357,[[]]],[11,"try_from","","",357,[[],["result",4]]],[11,"into","","",357,[[]]],[11,"try_into","","",357,[[],["result",4]]],[11,"into_iter","","",357,[[]]],[11,"type_id","","",357,[[],["typeid",3]]],[11,"from","","",358,[[]]],[11,"borrow","","",358,[[]]],[11,"borrow_mut","","",358,[[]]],[11,"try_from","","",358,[[],["result",4]]],[11,"into","","",358,[[]]],[11,"try_into","","",358,[[],["result",4]]],[11,"into_iter","","",358,[[]]],[11,"type_id","","",358,[[],["typeid",3]]],[11,"from","std::collections::btree_map","",103,[[]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"into","","",103,[[]]],[11,"try_into","","",103,[[],["result",4]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"from","","",359,[[]]],[11,"borrow","","",359,[[]]],[11,"borrow_mut","","",359,[[]]],[11,"try_from","","",359,[[],["result",4]]],[11,"into","","",359,[[]]],[11,"try_into","","",359,[[],["result",4]]],[11,"type_id","","",359,[[],["typeid",3]]],[11,"from","","",360,[[]]],[11,"borrow","","",360,[[]]],[11,"borrow_mut","","",360,[[]]],[11,"try_from","","",360,[[],["result",4]]],[11,"into","","",360,[[]]],[11,"try_into","","",360,[[],["result",4]]],[11,"type_id","","",360,[[],["typeid",3]]],[11,"from","std::collections","",361,[[]]],[11,"borrow","","",361,[[]]],[11,"borrow_mut","","",361,[[]]],[11,"try_from","","",361,[[],["result",4]]],[11,"into","","",361,[[]]],[11,"try_into","","",361,[[],["result",4]]],[11,"type_id","","",361,[[],["typeid",3]]],[11,"to_owned","","",361,[[]]],[11,"clone_into","","",361,[[]]],[11,"from","std::collections::btree_map","",362,[[]]],[11,"borrow","","",362,[[]]],[11,"borrow_mut","","",362,[[]]],[11,"try_from","","",362,[[],["result",4]]],[11,"into","","",362,[[]]],[11,"try_into","","",362,[[],["result",4]]],[11,"into_iter","","",362,[[]]],[11,"type_id","","",362,[[],["typeid",3]]],[11,"to_owned","","",362,[[]]],[11,"clone_into","","",362,[[]]],[11,"from","","",363,[[]]],[11,"borrow","","",363,[[]]],[11,"borrow_mut","","",363,[[]]],[11,"try_from","","",363,[[],["result",4]]],[11,"into","","",363,[[]]],[11,"try_into","","",363,[[],["result",4]]],[11,"into_iter","","",363,[[]]],[11,"type_id","","",363,[[],["typeid",3]]],[11,"from","","",364,[[]]],[11,"borrow","","",364,[[]]],[11,"borrow_mut","","",364,[[]]],[11,"try_from","","",364,[[],["result",4]]],[11,"into","","",364,[[]]],[11,"try_into","","",364,[[],["result",4]]],[11,"into_iter","","",364,[[]]],[11,"type_id","","",364,[[],["typeid",3]]],[11,"to_owned","","",364,[[]]],[11,"clone_into","","",364,[[]]],[11,"from","","",365,[[]]],[11,"borrow","","",365,[[]]],[11,"borrow_mut","","",365,[[]]],[11,"try_from","","",365,[[],["result",4]]],[11,"into","","",365,[[]]],[11,"try_into","","",365,[[],["result",4]]],[11,"into_iter","","",365,[[]]],[11,"type_id","","",365,[[],["typeid",3]]],[11,"to_owned","","",365,[[]]],[11,"clone_into","","",365,[[]]],[11,"from","","",366,[[]]],[11,"borrow","","",366,[[]]],[11,"borrow_mut","","",366,[[]]],[11,"try_from","","",366,[[],["result",4]]],[11,"into","","",366,[[]]],[11,"try_into","","",366,[[],["result",4]]],[11,"into_iter","","",366,[[]]],[11,"type_id","","",366,[[],["typeid",3]]],[11,"from","","",367,[[]]],[11,"borrow","","",367,[[]]],[11,"borrow_mut","","",367,[[]]],[11,"try_from","","",367,[[],["result",4]]],[11,"into","","",367,[[]]],[11,"try_into","","",367,[[],["result",4]]],[11,"into_iter","","",367,[[]]],[11,"type_id","","",367,[[],["typeid",3]]],[11,"from","","",368,[[]]],[11,"borrow","","",368,[[]]],[11,"borrow_mut","","",368,[[]]],[11,"try_from","","",368,[[],["result",4]]],[11,"into","","",368,[[]]],[11,"try_into","","",368,[[],["result",4]]],[11,"into_iter","","",368,[[]]],[11,"type_id","","",368,[[],["typeid",3]]],[11,"from","","",369,[[]]],[11,"borrow","","",369,[[]]],[11,"borrow_mut","","",369,[[]]],[11,"try_from","","",369,[[],["result",4]]],[11,"into","","",369,[[]]],[11,"try_into","","",369,[[],["result",4]]],[11,"into_iter","","",369,[[]]],[11,"type_id","","",369,[[],["typeid",3]]],[11,"to_owned","","",369,[[]]],[11,"clone_into","","",369,[[]]],[11,"from","","",370,[[]]],[11,"borrow","","",370,[[]]],[11,"borrow_mut","","",370,[[]]],[11,"try_from","","",370,[[],["result",4]]],[11,"into","","",370,[[]]],[11,"try_into","","",370,[[],["result",4]]],[11,"into_iter","","",370,[[]]],[11,"type_id","","",370,[[],["typeid",3]]],[11,"from","","",371,[[]]],[11,"borrow","","",371,[[]]],[11,"borrow_mut","","",371,[[]]],[11,"try_from","","",371,[[],["result",4]]],[11,"into","","",371,[[]]],[11,"try_into","","",371,[[],["result",4]]],[11,"into_iter","","",371,[[]]],[11,"type_id","","",371,[[],["typeid",3]]],[11,"from","","",372,[[]]],[11,"borrow","","",372,[[]]],[11,"borrow_mut","","",372,[[]]],[11,"try_from","","",372,[[],["result",4]]],[11,"into","","",372,[[]]],[11,"try_into","","",372,[[],["result",4]]],[11,"into_iter","","",372,[[]]],[11,"type_id","","",372,[[],["typeid",3]]],[11,"from","std::collections::btree_set","",373,[[]]],[11,"borrow","","",373,[[]]],[11,"borrow_mut","","",373,[[]]],[11,"try_from","","",373,[[],["result",4]]],[11,"into","","",373,[[]]],[11,"try_into","","",373,[[],["result",4]]],[11,"into_iter","","",373,[[]]],[11,"type_id","","",373,[[],["typeid",3]]],[11,"to_owned","","",373,[[]]],[11,"clone_into","","",373,[[]]],[11,"from","","",374,[[]]],[11,"borrow","","",374,[[]]],[11,"borrow_mut","","",374,[[]]],[11,"try_from","","",374,[[],["result",4]]],[11,"into","","",374,[[]]],[11,"try_into","","",374,[[],["result",4]]],[11,"into_iter","","",374,[[]]],[11,"type_id","","",374,[[],["typeid",3]]],[11,"to_owned","","",374,[[]]],[11,"clone_into","","",374,[[]]],[11,"from","","",375,[[]]],[11,"borrow","","",375,[[]]],[11,"borrow_mut","","",375,[[]]],[11,"try_from","","",375,[[],["result",4]]],[11,"into","","",375,[[]]],[11,"try_into","","",375,[[],["result",4]]],[11,"into_iter","","",375,[[]]],[11,"type_id","","",375,[[],["typeid",3]]],[11,"to_owned","","",375,[[]]],[11,"clone_into","","",375,[[]]],[11,"from","","",376,[[]]],[11,"borrow","","",376,[[]]],[11,"borrow_mut","","",376,[[]]],[11,"try_from","","",376,[[],["result",4]]],[11,"into","","",376,[[]]],[11,"try_into","","",376,[[],["result",4]]],[11,"into_iter","","",376,[[]]],[11,"type_id","","",376,[[],["typeid",3]]],[11,"to_owned","","",376,[[]]],[11,"clone_into","","",376,[[]]],[11,"from","","",377,[[]]],[11,"borrow","","",377,[[]]],[11,"borrow_mut","","",377,[[]]],[11,"try_from","","",377,[[],["result",4]]],[11,"into","","",377,[[]]],[11,"try_into","","",377,[[],["result",4]]],[11,"into_iter","","",377,[[]]],[11,"type_id","","",377,[[],["typeid",3]]],[11,"to_owned","","",377,[[]]],[11,"clone_into","","",377,[[]]],[11,"from","","",378,[[]]],[11,"borrow","","",378,[[]]],[11,"borrow_mut","","",378,[[]]],[11,"try_from","","",378,[[],["result",4]]],[11,"into","","",378,[[]]],[11,"try_into","","",378,[[],["result",4]]],[11,"into_iter","","",378,[[]]],[11,"type_id","","",378,[[],["typeid",3]]],[11,"from","std::collections","",379,[[]]],[11,"borrow","","",379,[[]]],[11,"borrow_mut","","",379,[[]]],[11,"try_from","","",379,[[],["result",4]]],[11,"into","","",379,[[]]],[11,"try_into","","",379,[[],["result",4]]],[11,"type_id","","",379,[[],["typeid",3]]],[11,"to_owned","","",379,[[]]],[11,"clone_into","","",379,[[]]],[11,"from","std::collections::btree_set","",380,[[]]],[11,"borrow","","",380,[[]]],[11,"borrow_mut","","",380,[[]]],[11,"try_from","","",380,[[],["result",4]]],[11,"into","","",380,[[]]],[11,"try_into","","",380,[[],["result",4]]],[11,"into_iter","","",380,[[]]],[11,"type_id","","",380,[[],["typeid",3]]],[11,"from","","",381,[[]]],[11,"borrow","","",381,[[]]],[11,"borrow_mut","","",381,[[]]],[11,"try_from","","",381,[[],["result",4]]],[11,"into","","",381,[[]]],[11,"try_into","","",381,[[],["result",4]]],[11,"into_iter","","",381,[[]]],[11,"type_id","","",381,[[],["typeid",3]]],[11,"to_owned","","",381,[[]]],[11,"clone_into","","",381,[[]]],[11,"from","std::collections","",382,[[]]],[11,"borrow","","",382,[[]]],[11,"borrow_mut","","",382,[[]]],[11,"try_from","","",382,[[],["result",4]]],[11,"into","","",382,[[]]],[11,"try_into","","",382,[[],["result",4]]],[11,"type_id","","",382,[[],["typeid",3]]],[11,"to_owned","","",382,[[]]],[11,"clone_into","","",382,[[]]],[11,"from","std::collections::linked_list","",383,[[]]],[11,"borrow","","",383,[[]]],[11,"borrow_mut","","",383,[[]]],[11,"try_from","","",383,[[],["result",4]]],[11,"into","","",383,[[]]],[11,"try_into","","",383,[[],["result",4]]],[11,"into_iter","","",383,[[]]],[11,"type_id","","",383,[[],["typeid",3]]],[11,"to_owned","","",383,[[]]],[11,"clone_into","","",383,[[]]],[11,"from","","",384,[[]]],[11,"borrow","","",384,[[]]],[11,"borrow_mut","","",384,[[]]],[11,"try_from","","",384,[[],["result",4]]],[11,"into","","",384,[[]]],[11,"try_into","","",384,[[],["result",4]]],[11,"into_iter","","",384,[[]]],[11,"type_id","","",384,[[],["typeid",3]]],[11,"from","","",385,[[]]],[11,"borrow","","",385,[[]]],[11,"borrow_mut","","",385,[[]]],[11,"try_from","","",385,[[],["result",4]]],[11,"into","","",385,[[]]],[11,"try_into","","",385,[[],["result",4]]],[11,"into_iter","","",385,[[]]],[11,"type_id","","",385,[[],["typeid",3]]],[11,"to_owned","","",385,[[]]],[11,"clone_into","","",385,[[]]],[11,"from","","",386,[[]]],[11,"borrow","","",386,[[]]],[11,"borrow_mut","","",386,[[]]],[11,"try_from","","",386,[[],["result",4]]],[11,"into","","",386,[[]]],[11,"try_into","","",386,[[],["result",4]]],[11,"type_id","","",386,[[],["typeid",3]]],[11,"to_owned","","",386,[[]]],[11,"clone_into","","",386,[[]]],[11,"from","","",387,[[]]],[11,"borrow","","",387,[[]]],[11,"borrow_mut","","",387,[[]]],[11,"try_from","","",387,[[],["result",4]]],[11,"into","","",387,[[]]],[11,"try_into","","",387,[[],["result",4]]],[11,"type_id","","",387,[[],["typeid",3]]],[11,"from","","",388,[[]]],[11,"borrow","","",388,[[]]],[11,"borrow_mut","","",388,[[]]],[11,"try_from","","",388,[[],["result",4]]],[11,"into","","",388,[[]]],[11,"try_into","","",388,[[],["result",4]]],[11,"into_iter","","",388,[[]]],[11,"type_id","","",388,[[],["typeid",3]]],[11,"from","std::collections","",389,[[]]],[11,"borrow","","",389,[[]]],[11,"borrow_mut","","",389,[[]]],[11,"try_from","","",389,[[],["result",4]]],[11,"into","","",389,[[]]],[11,"try_into","","",389,[[],["result",4]]],[11,"type_id","","",389,[[],["typeid",3]]],[11,"to_owned","","",389,[[]]],[11,"clone_into","","",389,[[]]],[11,"from","std::collections::vec_deque","",390,[[]]],[11,"borrow","","",390,[[]]],[11,"borrow_mut","","",390,[[]]],[11,"try_from","","",390,[[],["result",4]]],[11,"into","","",390,[[]]],[11,"try_into","","",390,[[],["result",4]]],[11,"into_iter","","",390,[[]]],[11,"type_id","","",390,[[],["typeid",3]]],[11,"from","","",391,[[]]],[11,"borrow","","",391,[[]]],[11,"borrow_mut","","",391,[[]]],[11,"try_from","","",391,[[],["result",4]]],[11,"into","","",391,[[]]],[11,"try_into","","",391,[[],["result",4]]],[11,"into_iter","","",391,[[]]],[11,"type_id","","",391,[[],["typeid",3]]],[11,"from","","",392,[[]]],[11,"borrow","","",392,[[]]],[11,"borrow_mut","","",392,[[]]],[11,"try_from","","",392,[[],["result",4]]],[11,"into","","",392,[[]]],[11,"try_into","","",392,[[],["result",4]]],[11,"into_iter","","",392,[[]]],[11,"type_id","","",392,[[],["typeid",3]]],[11,"to_owned","","",392,[[]]],[11,"clone_into","","",392,[[]]],[11,"from","","",393,[[]]],[11,"borrow","","",393,[[]]],[11,"borrow_mut","","",393,[[]]],[11,"try_from","","",393,[[],["result",4]]],[11,"into","","",393,[[]]],[11,"try_into","","",393,[[],["result",4]]],[11,"into_iter","","",393,[[]]],[11,"type_id","","",393,[[],["typeid",3]]],[11,"to_owned","","",393,[[]]],[11,"clone_into","","",393,[[]]],[11,"from","std::collections","",104,[[]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"into","","",104,[[]]],[11,"try_into","","",104,[[],["result",4]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"to_owned","","",104,[[]]],[11,"clone_into","","",104,[[]]],[11,"to_string","","",104,[[],["string",3]]],[11,"from","std::collections::hash_map","",394,[[]]],[11,"borrow","","",394,[[]]],[11,"borrow_mut","","",394,[[]]],[11,"try_from","","",394,[[],["result",4]]],[11,"into","","",394,[[]]],[11,"try_into","","",394,[[],["result",4]]],[11,"type_id","","",394,[[],["typeid",3]]],[11,"to_owned","","",394,[[]]],[11,"clone_into","","",394,[[]]],[11,"from","","",395,[[]]],[11,"borrow","","",395,[[]]],[11,"borrow_mut","","",395,[[]]],[11,"try_from","","",395,[[],["result",4]]],[11,"into","","",395,[[]]],[11,"try_into","","",395,[[],["result",4]]],[11,"into_iter","","",395,[[]]],[11,"type_id","","",395,[[],["typeid",3]]],[11,"to_owned","","",395,[[]]],[11,"clone_into","","",395,[[]]],[11,"from","","",396,[[]]],[11,"borrow","","",396,[[]]],[11,"borrow_mut","","",396,[[]]],[11,"try_from","","",396,[[],["result",4]]],[11,"into","","",396,[[]]],[11,"try_into","","",396,[[],["result",4]]],[11,"into_iter","","",396,[[]]],[11,"type_id","","",396,[[],["typeid",3]]],[11,"from","","",397,[[]]],[11,"borrow","","",397,[[]]],[11,"borrow_mut","","",397,[[]]],[11,"try_from","","",397,[[],["result",4]]],[11,"into","","",397,[[]]],[11,"try_into","","",397,[[],["result",4]]],[11,"into_iter","","",397,[[]]],[11,"type_id","","",397,[[],["typeid",3]]],[11,"from","","",398,[[]]],[11,"borrow","","",398,[[]]],[11,"borrow_mut","","",398,[[]]],[11,"try_from","","",398,[[],["result",4]]],[11,"into","","",398,[[]]],[11,"try_into","","",398,[[],["result",4]]],[11,"into_iter","","",398,[[]]],[11,"type_id","","",398,[[],["typeid",3]]],[11,"to_owned","","",398,[[]]],[11,"clone_into","","",398,[[]]],[11,"from","","",399,[[]]],[11,"borrow","","",399,[[]]],[11,"borrow_mut","","",399,[[]]],[11,"try_from","","",399,[[],["result",4]]],[11,"into","","",399,[[]]],[11,"try_into","","",399,[[],["result",4]]],[11,"into_iter","","",399,[[]]],[11,"type_id","","",399,[[],["typeid",3]]],[11,"to_owned","","",399,[[]]],[11,"clone_into","","",399,[[]]],[11,"from","","",400,[[]]],[11,"borrow","","",400,[[]]],[11,"borrow_mut","","",400,[[]]],[11,"try_from","","",400,[[],["result",4]]],[11,"into","","",400,[[]]],[11,"try_into","","",400,[[],["result",4]]],[11,"into_iter","","",400,[[]]],[11,"type_id","","",400,[[],["typeid",3]]],[11,"from","","",401,[[]]],[11,"borrow","","",401,[[]]],[11,"borrow_mut","","",401,[[]]],[11,"try_from","","",401,[[],["result",4]]],[11,"into","","",401,[[]]],[11,"try_into","","",401,[[],["result",4]]],[11,"into_iter","","",401,[[]]],[11,"type_id","","",401,[[],["typeid",3]]],[11,"from","","",402,[[]]],[11,"borrow","","",402,[[]]],[11,"borrow_mut","","",402,[[]]],[11,"try_from","","",402,[[],["result",4]]],[11,"into","","",402,[[]]],[11,"try_into","","",402,[[],["result",4]]],[11,"into_iter","","",402,[[]]],[11,"type_id","","",402,[[],["typeid",3]]],[11,"from","","",403,[[]]],[11,"borrow","","",403,[[]]],[11,"borrow_mut","","",403,[[]]],[11,"try_from","","",403,[[],["result",4]]],[11,"into","","",403,[[]]],[11,"try_into","","",403,[[],["result",4]]],[11,"into_iter","","",403,[[]]],[11,"type_id","","",403,[[],["typeid",3]]],[11,"from","","",404,[[]]],[11,"borrow","","",404,[[]]],[11,"borrow_mut","","",404,[[]]],[11,"try_from","","",404,[[],["result",4]]],[11,"into","","",404,[[]]],[11,"try_into","","",404,[[],["result",4]]],[11,"into_iter","","",404,[[]]],[11,"type_id","","",404,[[],["typeid",3]]],[11,"from","","",405,[[]]],[11,"borrow","","",405,[[]]],[11,"borrow_mut","","",405,[[]]],[11,"try_from","","",405,[[],["result",4]]],[11,"into","","",405,[[]]],[11,"try_into","","",405,[[],["result",4]]],[11,"type_id","","",405,[[],["typeid",3]]],[11,"from","","",106,[[]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"into","","",106,[[]]],[11,"try_into","","",106,[[],["result",4]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"from","","",406,[[]]],[11,"borrow","","",406,[[]]],[11,"borrow_mut","","",406,[[]]],[11,"try_from","","",406,[[],["result",4]]],[11,"into","","",406,[[]]],[11,"try_into","","",406,[[],["result",4]]],[11,"type_id","","",406,[[],["typeid",3]]],[11,"from","","",407,[[]]],[11,"borrow","","",407,[[]]],[11,"borrow_mut","","",407,[[]]],[11,"try_from","","",407,[[],["result",4]]],[11,"into","","",407,[[]]],[11,"try_into","","",407,[[],["result",4]]],[11,"type_id","","",407,[[],["typeid",3]]],[11,"from","","",408,[[]]],[11,"borrow","","",408,[[]]],[11,"borrow_mut","","",408,[[]]],[11,"try_from","","",408,[[],["result",4]]],[11,"into","","",408,[[]]],[11,"try_into","","",408,[[],["result",4]]],[11,"type_id","","",408,[[],["typeid",3]]],[11,"from","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"into","","",107,[[]]],[11,"try_into","","",107,[[],["result",4]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"from","","",409,[[]]],[11,"borrow","","",409,[[]]],[11,"borrow_mut","","",409,[[]]],[11,"try_from","","",409,[[],["result",4]]],[11,"into","","",409,[[]]],[11,"try_into","","",409,[[],["result",4]]],[11,"type_id","","",409,[[],["typeid",3]]],[11,"from","","",410,[[]]],[11,"borrow","","",410,[[]]],[11,"borrow_mut","","",410,[[]]],[11,"try_from","","",410,[[],["result",4]]],[11,"into","","",410,[[]]],[11,"try_into","","",410,[[],["result",4]]],[11,"type_id","","",410,[[],["typeid",3]]],[11,"from","","",411,[[]]],[11,"borrow","","",411,[[]]],[11,"borrow_mut","","",411,[[]]],[11,"try_from","","",411,[[],["result",4]]],[11,"into","","",411,[[]]],[11,"try_into","","",411,[[],["result",4]]],[11,"type_id","","",411,[[],["typeid",3]]],[11,"to_owned","","",411,[[]]],[11,"clone_into","","",411,[[]]],[11,"from","","",412,[[]]],[11,"borrow","","",412,[[]]],[11,"borrow_mut","","",412,[[]]],[11,"try_from","","",412,[[],["result",4]]],[11,"into","","",412,[[]]],[11,"try_into","","",412,[[],["result",4]]],[11,"type_id","","",412,[[],["typeid",3]]],[11,"to_owned","","",412,[[]]],[11,"clone_into","","",412,[[]]],[11,"from","std::collections::hash_set","",413,[[]]],[11,"borrow","","",413,[[]]],[11,"borrow_mut","","",413,[[]]],[11,"try_from","","",413,[[],["result",4]]],[11,"into","","",413,[[]]],[11,"try_into","","",413,[[],["result",4]]],[11,"type_id","","",413,[[],["typeid",3]]],[11,"to_owned","","",413,[[]]],[11,"clone_into","","",413,[[]]],[11,"from","","",414,[[]]],[11,"borrow","","",414,[[]]],[11,"borrow_mut","","",414,[[]]],[11,"try_from","","",414,[[],["result",4]]],[11,"into","","",414,[[]]],[11,"try_into","","",414,[[],["result",4]]],[11,"into_iter","","",414,[[]]],[11,"type_id","","",414,[[],["typeid",3]]],[11,"to_owned","","",414,[[]]],[11,"clone_into","","",414,[[]]],[11,"from","","",415,[[]]],[11,"borrow","","",415,[[]]],[11,"borrow_mut","","",415,[[]]],[11,"try_from","","",415,[[],["result",4]]],[11,"into","","",415,[[]]],[11,"try_into","","",415,[[],["result",4]]],[11,"into_iter","","",415,[[]]],[11,"type_id","","",415,[[],["typeid",3]]],[11,"from","","",416,[[]]],[11,"borrow","","",416,[[]]],[11,"borrow_mut","","",416,[[]]],[11,"try_from","","",416,[[],["result",4]]],[11,"into","","",416,[[]]],[11,"try_into","","",416,[[],["result",4]]],[11,"into_iter","","",416,[[]]],[11,"type_id","","",416,[[],["typeid",3]]],[11,"from","","",417,[[]]],[11,"borrow","","",417,[[]]],[11,"borrow_mut","","",417,[[]]],[11,"try_from","","",417,[[],["result",4]]],[11,"into","","",417,[[]]],[11,"try_into","","",417,[[],["result",4]]],[11,"into_iter","","",417,[[]]],[11,"type_id","","",417,[[],["typeid",3]]],[11,"from","","",418,[[]]],[11,"borrow","","",418,[[]]],[11,"borrow_mut","","",418,[[]]],[11,"try_from","","",418,[[],["result",4]]],[11,"into","","",418,[[]]],[11,"try_into","","",418,[[],["result",4]]],[11,"into_iter","","",418,[[]]],[11,"type_id","","",418,[[],["typeid",3]]],[11,"to_owned","","",418,[[]]],[11,"clone_into","","",418,[[]]],[11,"from","","",419,[[]]],[11,"borrow","","",419,[[]]],[11,"borrow_mut","","",419,[[]]],[11,"try_from","","",419,[[],["result",4]]],[11,"into","","",419,[[]]],[11,"try_into","","",419,[[],["result",4]]],[11,"into_iter","","",419,[[]]],[11,"type_id","","",419,[[],["typeid",3]]],[11,"to_owned","","",419,[[]]],[11,"clone_into","","",419,[[]]],[11,"from","","",420,[[]]],[11,"borrow","","",420,[[]]],[11,"borrow_mut","","",420,[[]]],[11,"try_from","","",420,[[],["result",4]]],[11,"into","","",420,[[]]],[11,"try_into","","",420,[[],["result",4]]],[11,"into_iter","","",420,[[]]],[11,"type_id","","",420,[[],["typeid",3]]],[11,"to_owned","","",420,[[]]],[11,"clone_into","","",420,[[]]],[11,"from","","",421,[[]]],[11,"borrow","","",421,[[]]],[11,"borrow_mut","","",421,[[]]],[11,"try_from","","",421,[[],["result",4]]],[11,"into","","",421,[[]]],[11,"try_into","","",421,[[],["result",4]]],[11,"into_iter","","",421,[[]]],[11,"type_id","","",421,[[],["typeid",3]]],[11,"to_owned","","",421,[[]]],[11,"clone_into","","",421,[[]]],[11,"from","std::env","",422,[[]]],[11,"borrow","","",422,[[]]],[11,"borrow_mut","","",422,[[]]],[11,"try_from","","",422,[[],["result",4]]],[11,"into","","",422,[[]]],[11,"try_into","","",422,[[],["result",4]]],[11,"into_iter","","",422,[[]]],[11,"type_id","","",422,[[],["typeid",3]]],[11,"from","","",423,[[]]],[11,"borrow","","",423,[[]]],[11,"borrow_mut","","",423,[[]]],[11,"try_from","","",423,[[],["result",4]]],[11,"into","","",423,[[]]],[11,"try_into","","",423,[[],["result",4]]],[11,"into_iter","","",423,[[]]],[11,"type_id","","",423,[[],["typeid",3]]],[11,"from","","",108,[[]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"into","","",108,[[]]],[11,"try_into","","",108,[[],["result",4]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"to_owned","","",108,[[]]],[11,"clone_into","","",108,[[]]],[11,"to_string","","",108,[[],["string",3]]],[11,"from","","",424,[[]]],[11,"borrow","","",424,[[]]],[11,"borrow_mut","","",424,[[]]],[11,"try_from","","",424,[[],["result",4]]],[11,"into","","",424,[[]]],[11,"try_into","","",424,[[],["result",4]]],[11,"into_iter","","",424,[[]]],[11,"type_id","","",424,[[],["typeid",3]]],[11,"from","","",425,[[]]],[11,"borrow","","",425,[[]]],[11,"borrow_mut","","",425,[[]]],[11,"try_from","","",425,[[],["result",4]]],[11,"into","","",425,[[]]],[11,"try_into","","",425,[[],["result",4]]],[11,"type_id","","",425,[[],["typeid",3]]],[11,"to_string","","",425,[[],["string",3]]],[11,"from","","",426,[[]]],[11,"borrow","","",426,[[]]],[11,"borrow_mut","","",426,[[]]],[11,"try_from","","",426,[[],["result",4]]],[11,"into","","",426,[[]]],[11,"try_into","","",426,[[],["result",4]]],[11,"into_iter","","",426,[[]]],[11,"type_id","","",426,[[],["typeid",3]]],[11,"from","","",427,[[]]],[11,"borrow","","",427,[[]]],[11,"borrow_mut","","",427,[[]]],[11,"try_from","","",427,[[],["result",4]]],[11,"into","","",427,[[]]],[11,"try_into","","",427,[[],["result",4]]],[11,"into_iter","","",427,[[]]],[11,"type_id","","",427,[[],["typeid",3]]],[11,"from","std::error","",428,[[]]],[11,"borrow","","",428,[[]]],[11,"borrow_mut","","",428,[[]]],[11,"try_from","","",428,[[],["result",4]]],[11,"into","","",428,[[]]],[11,"try_into","","",428,[[],["result",4]]],[11,"into_iter","","",428,[[]]],[11,"type_id","","",428,[[],["typeid",3]]],[11,"to_owned","","",428,[[]]],[11,"clone_into","","",428,[[]]],[11,"from","std::ffi","",429,[[]]],[11,"borrow","","",429,[[]]],[11,"borrow_mut","","",429,[[]]],[11,"try_from","","",429,[[],["result",4]]],[11,"into","","",429,[[]]],[11,"try_into","","",429,[[],["result",4]]],[11,"type_id","","",429,[[],["typeid",3]]],[11,"from","","",430,[[]]],[11,"borrow","","",430,[[]]],[11,"borrow_mut","","",430,[[]]],[11,"try_from","","",430,[[],["result",4]]],[11,"into","","",430,[[]]],[11,"try_into","","",430,[[],["result",4]]],[11,"type_id","","",430,[[],["typeid",3]]],[11,"from","","",431,[[]]],[11,"borrow","","",431,[[]]],[11,"borrow_mut","","",431,[[]]],[11,"try_from","","",431,[[],["result",4]]],[11,"into","","",431,[[]]],[11,"try_into","","",431,[[],["result",4]]],[11,"type_id","","",431,[[],["typeid",3]]],[11,"to_owned","","",431,[[]]],[11,"clone_into","","",431,[[]]],[11,"from","","",432,[[]]],[11,"borrow","","",432,[[]]],[11,"borrow_mut","","",432,[[]]],[11,"try_from","","",432,[[],["result",4]]],[11,"into","","",432,[[]]],[11,"try_into","","",432,[[],["result",4]]],[11,"type_id","","",432,[[],["typeid",3]]],[11,"to_owned","","",432,[[]]],[11,"clone_into","","",432,[[]]],[11,"borrow","","",433,[[]]],[11,"borrow_mut","","",433,[[]]],[11,"type_id","","",433,[[],["typeid",3]]],[11,"from","","",434,[[]]],[11,"borrow","","",434,[[]]],[11,"borrow_mut","","",434,[[]]],[11,"try_from","","",434,[[],["result",4]]],[11,"into","","",434,[[]]],[11,"try_into","","",434,[[],["result",4]]],[11,"type_id","","",434,[[],["typeid",3]]],[11,"to_owned","","",434,[[]]],[11,"clone_into","","",434,[[]]],[11,"to_string","","",434,[[],["string",3]]],[11,"from","","",435,[[]]],[11,"borrow","","",435,[[]]],[11,"borrow_mut","","",435,[[]]],[11,"try_from","","",435,[[],["result",4]]],[11,"into","","",435,[[]]],[11,"try_into","","",435,[[],["result",4]]],[11,"type_id","","",435,[[],["typeid",3]]],[11,"to_owned","","",435,[[]]],[11,"clone_into","","",435,[[]]],[11,"to_string","","",435,[[],["string",3]]],[11,"from","","",436,[[]]],[11,"borrow","","",436,[[]]],[11,"borrow_mut","","",436,[[]]],[11,"try_from","","",436,[[],["result",4]]],[11,"into","","",436,[[]]],[11,"try_into","","",436,[[],["result",4]]],[11,"type_id","","",436,[[],["typeid",3]]],[11,"to_owned","","",436,[[]]],[11,"clone_into","","",436,[[]]],[11,"to_string","","",436,[[],["string",3]]],[11,"from","","",437,[[]]],[11,"borrow","","",437,[[]]],[11,"borrow_mut","","",437,[[]]],[11,"try_from","","",437,[[],["result",4]]],[11,"into","","",437,[[]]],[11,"try_into","","",437,[[],["result",4]]],[11,"type_id","","",437,[[],["typeid",3]]],[11,"to_owned","","",437,[[]]],[11,"clone_into","","",437,[[]]],[11,"to_string","","",437,[[],["string",3]]],[11,"from","","",438,[[]]],[11,"borrow","","",438,[[]]],[11,"borrow_mut","","",438,[[]]],[11,"try_from","","",438,[[],["result",4]]],[11,"into","","",438,[[]]],[11,"try_into","","",438,[[],["result",4]]],[11,"type_id","","",438,[[],["typeid",3]]],[11,"to_owned","","",438,[[]]],[11,"clone_into","","",438,[[]]],[11,"borrow","","",439,[[]]],[11,"borrow_mut","","",439,[[]]],[11,"type_id","","",439,[[],["typeid",3]]],[11,"from","std::fs","",110,[[]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"into","","",110,[[]]],[11,"try_into","","",110,[[],["result",4]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"from","","",112,[[]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"into","","",112,[[]]],[11,"try_into","","",112,[[],["result",4]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"to_owned","","",112,[[]]],[11,"clone_into","","",112,[[]]],[11,"from","","",440,[[]]],[11,"borrow","","",440,[[]]],[11,"borrow_mut","","",440,[[]]],[11,"try_from","","",440,[[],["result",4]]],[11,"into","","",440,[[]]],[11,"try_into","","",440,[[],["result",4]]],[11,"into_iter","","",440,[[]]],[11,"type_id","","",440,[[],["typeid",3]]],[11,"from","","",115,[[]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"into","","",115,[[]]],[11,"try_into","","",115,[[],["result",4]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"from","","",111,[[]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"into","","",111,[[]]],[11,"try_into","","",111,[[],["result",4]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"to_owned","","",111,[[]]],[11,"clone_into","","",111,[[]]],[11,"from","","",113,[[]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"into","","",113,[[]]],[11,"try_into","","",113,[[],["result",4]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"to_owned","","",113,[[]]],[11,"clone_into","","",113,[[]]],[11,"from","","",114,[[]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"into","","",114,[[]]],[11,"try_into","","",114,[[],["result",4]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"to_owned","","",114,[[]]],[11,"clone_into","","",114,[[]]],[11,"from","","",116,[[]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"into","","",116,[[]]],[11,"try_into","","",116,[[],["result",4]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"from","std::io","",441,[[]]],[11,"borrow","","",441,[[]]],[11,"borrow_mut","","",441,[[]]],[11,"try_from","","",441,[[],["result",4]]],[11,"into","","",441,[[]]],[11,"try_into","","",441,[[],["result",4]]],[11,"type_id","","",441,[[],["typeid",3]]],[11,"from","","",442,[[]]],[11,"borrow","","",442,[[]]],[11,"borrow_mut","","",442,[[]]],[11,"try_from","","",442,[[],["result",4]]],[11,"into","","",442,[[]]],[11,"try_into","","",442,[[],["result",4]]],[11,"type_id","","",442,[[],["typeid",3]]],[11,"from","","",443,[[]]],[11,"borrow","","",443,[[]]],[11,"borrow_mut","","",443,[[]]],[11,"try_from","","",443,[[],["result",4]]],[11,"into","","",443,[[]]],[11,"try_into","","",443,[[],["result",4]]],[11,"type_id","","",443,[[],["typeid",3]]],[11,"from","","",444,[[]]],[11,"borrow","","",444,[[]]],[11,"borrow_mut","","",444,[[]]],[11,"try_from","","",444,[[],["result",4]]],[11,"into","","",444,[[]]],[11,"try_into","","",444,[[],["result",4]]],[11,"type_id","","",444,[[],["typeid",3]]],[11,"to_string","","",444,[[],["string",3]]],[11,"from","","",445,[[]]],[11,"borrow","","",445,[[]]],[11,"borrow_mut","","",445,[[]]],[11,"try_from","","",445,[[],["result",4]]],[11,"into","","",445,[[]]],[11,"try_into","","",445,[[],["result",4]]],[11,"type_id","","",445,[[],["typeid",3]]],[11,"to_owned","","",445,[[]]],[11,"clone_into","","",445,[[]]],[11,"from","","",446,[[]]],[11,"borrow","","",446,[[]]],[11,"borrow_mut","","",446,[[]]],[11,"try_from","","",446,[[],["result",4]]],[11,"into","","",446,[[]]],[11,"try_into","","",446,[[],["result",4]]],[11,"type_id","","",446,[[],["typeid",3]]],[11,"to_string","","",446,[[],["string",3]]],[11,"from","","",117,[[]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"into","","",117,[[]]],[11,"try_into","","",117,[[],["result",4]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"to_owned","","",117,[[]]],[11,"clone_into","","",117,[[]]],[11,"from","","",447,[[]]],[11,"borrow","","",447,[[]]],[11,"borrow_mut","","",447,[[]]],[11,"try_from","","",447,[[],["result",4]]],[11,"into","","",447,[[]]],[11,"try_into","","",447,[[],["result",4]]],[11,"type_id","","",447,[[],["typeid",3]]],[11,"from","","",448,[[]]],[11,"borrow","","",448,[[]]],[11,"borrow_mut","","",448,[[]]],[11,"try_from","","",448,[[],["result",4]]],[11,"into","","",448,[[]]],[11,"try_into","","",448,[[],["result",4]]],[11,"type_id","","",448,[[],["typeid",3]]],[11,"from","","",449,[[]]],[11,"borrow","","",449,[[]]],[11,"borrow_mut","","",449,[[]]],[11,"try_from","","",449,[[],["result",4]]],[11,"into","","",449,[[]]],[11,"try_into","","",449,[[],["result",4]]],[11,"type_id","","",449,[[],["typeid",3]]],[11,"from","","",450,[[]]],[11,"borrow","","",450,[[]]],[11,"borrow_mut","","",450,[[]]],[11,"try_from","","",450,[[],["result",4]]],[11,"into","","",450,[[]]],[11,"try_into","","",450,[[],["result",4]]],[11,"type_id","","",450,[[],["typeid",3]]],[11,"from","","",451,[[]]],[11,"borrow","","",451,[[]]],[11,"borrow_mut","","",451,[[]]],[11,"try_from","","",451,[[],["result",4]]],[11,"into","","",451,[[]]],[11,"try_into","","",451,[[],["result",4]]],[11,"type_id","","",451,[[],["typeid",3]]],[11,"from","","",452,[[]]],[11,"borrow","","",452,[[]]],[11,"borrow_mut","","",452,[[]]],[11,"try_from","","",452,[[],["result",4]]],[11,"into","","",452,[[]]],[11,"try_into","","",452,[[],["result",4]]],[11,"type_id","","",452,[[],["typeid",3]]],[11,"from","","",453,[[]]],[11,"borrow","","",453,[[]]],[11,"borrow_mut","","",453,[[]]],[11,"try_from","","",453,[[],["result",4]]],[11,"into","","",453,[[]]],[11,"try_into","","",453,[[],["result",4]]],[11,"type_id","","",453,[[],["typeid",3]]],[11,"from","","",454,[[]]],[11,"borrow","","",454,[[]]],[11,"borrow_mut","","",454,[[]]],[11,"try_from","","",454,[[],["result",4]]],[11,"into","","",454,[[]]],[11,"try_into","","",454,[[],["result",4]]],[11,"type_id","","",454,[[],["typeid",3]]],[11,"from","","",455,[[]]],[11,"borrow","","",455,[[]]],[11,"borrow_mut","","",455,[[]]],[11,"try_from","","",455,[[],["result",4]]],[11,"into","","",455,[[]]],[11,"try_into","","",455,[[],["result",4]]],[11,"type_id","","",455,[[],["typeid",3]]],[11,"from","","",119,[[]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"into","","",119,[[]]],[11,"try_into","","",119,[[],["result",4]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"from","","",120,[[]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"into","","",120,[[]]],[11,"try_into","","",120,[[],["result",4]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"to_owned","","",120,[[]]],[11,"clone_into","","",120,[[]]],[11,"from","","",121,[[]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"into","","",121,[[]]],[11,"try_into","","",121,[[],["result",4]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"from","","",124,[[]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"into","","",124,[[]]],[11,"try_into","","",124,[[],["result",4]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"to_owned","","",124,[[]]],[11,"clone_into","","",124,[[]]],[11,"from","","",126,[[]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"into","","",126,[[]]],[11,"try_into","","",126,[[],["result",4]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"from","","",127,[[]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"into","","",127,[[]]],[11,"try_into","","",127,[[],["result",4]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"from","","",456,[[]]],[11,"borrow","","",456,[[]]],[11,"borrow_mut","","",456,[[]]],[11,"try_from","","",456,[[],["result",4]]],[11,"into","","",456,[[]]],[11,"try_into","","",456,[[],["result",4]]],[11,"into_iter","","",456,[[]]],[11,"type_id","","",456,[[],["typeid",3]]],[11,"from","","",457,[[]]],[11,"borrow","","",457,[[]]],[11,"borrow_mut","","",457,[[]]],[11,"try_from","","",457,[[],["result",4]]],[11,"into","","",457,[[]]],[11,"try_into","","",457,[[],["result",4]]],[11,"into_iter","","",457,[[]]],[11,"type_id","","",457,[[],["typeid",3]]],[11,"from","","",458,[[]]],[11,"borrow","","",458,[[]]],[11,"borrow_mut","","",458,[[]]],[11,"try_from","","",458,[[],["result",4]]],[11,"into","","",458,[[]]],[11,"try_into","","",458,[[],["result",4]]],[11,"into_iter","","",458,[[]]],[11,"type_id","","",458,[[],["typeid",3]]],[11,"from","std::net","",128,[[]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"into","","",128,[[]]],[11,"try_into","","",128,[[],["result",4]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"to_owned","","",128,[[]]],[11,"clone_into","","",128,[[]]],[11,"to_string","","",128,[[],["string",3]]],[11,"from","","",459,[[]]],[11,"borrow","","",459,[[]]],[11,"borrow_mut","","",459,[[]]],[11,"try_from","","",459,[[],["result",4]]],[11,"into","","",459,[[]]],[11,"try_into","","",459,[[],["result",4]]],[11,"type_id","","",459,[[],["typeid",3]]],[11,"to_owned","","",459,[[]]],[11,"clone_into","","",459,[[]]],[11,"to_string","","",459,[[],["string",3]]],[11,"from","","",460,[[]]],[11,"borrow","","",460,[[]]],[11,"borrow_mut","","",460,[[]]],[11,"try_from","","",460,[[],["result",4]]],[11,"into","","",460,[[]]],[11,"try_into","","",460,[[],["result",4]]],[11,"type_id","","",460,[[],["typeid",3]]],[11,"to_owned","","",460,[[]]],[11,"clone_into","","",460,[[]]],[11,"to_string","","",460,[[],["string",3]]],[11,"from","","",130,[[]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"try_from","","",130,[[],["result",4]]],[11,"into","","",130,[[]]],[11,"try_into","","",130,[[],["result",4]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"to_owned","","",130,[[]]],[11,"clone_into","","",130,[[]]],[11,"to_string","","",130,[[],["string",3]]],[11,"from","","",461,[[]]],[11,"borrow","","",461,[[]]],[11,"borrow_mut","","",461,[[]]],[11,"try_from","","",461,[[],["result",4]]],[11,"into","","",461,[[]]],[11,"try_into","","",461,[[],["result",4]]],[11,"type_id","","",461,[[],["typeid",3]]],[11,"to_owned","","",461,[[]]],[11,"clone_into","","",461,[[]]],[11,"to_string","","",461,[[],["string",3]]],[11,"from","","",462,[[]]],[11,"borrow","","",462,[[]]],[11,"borrow_mut","","",462,[[]]],[11,"try_from","","",462,[[],["result",4]]],[11,"into","","",462,[[]]],[11,"try_into","","",462,[[],["result",4]]],[11,"type_id","","",462,[[],["typeid",3]]],[11,"to_owned","","",462,[[]]],[11,"clone_into","","",462,[[]]],[11,"to_string","","",462,[[],["string",3]]],[11,"from","","",131,[[]]],[11,"borrow","","",131,[[]]],[11,"borrow_mut","","",131,[[]]],[11,"try_from","","",131,[[],["result",4]]],[11,"into","","",131,[[]]],[11,"try_into","","",131,[[],["result",4]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"to_owned","","",131,[[]]],[11,"clone_into","","",131,[[]]],[11,"from","","",463,[[]]],[11,"borrow","","",463,[[]]],[11,"borrow_mut","","",463,[[]]],[11,"try_from","","",463,[[],["result",4]]],[11,"into","","",463,[[]]],[11,"try_into","","",463,[[],["result",4]]],[11,"type_id","","",463,[[],["typeid",3]]],[11,"to_owned","","",463,[[]]],[11,"clone_into","","",463,[[]]],[11,"to_string","","",463,[[],["string",3]]],[11,"from","","",464,[[]]],[11,"borrow","","",464,[[]]],[11,"borrow_mut","","",464,[[]]],[11,"try_from","","",464,[[],["result",4]]],[11,"into","","",464,[[]]],[11,"try_into","","",464,[[],["result",4]]],[11,"type_id","","",464,[[],["typeid",3]]],[11,"from","","",465,[[]]],[11,"borrow","","",465,[[]]],[11,"borrow_mut","","",465,[[]]],[11,"try_from","","",465,[[],["result",4]]],[11,"into","","",465,[[]]],[11,"try_into","","",465,[[],["result",4]]],[11,"type_id","","",465,[[],["typeid",3]]],[11,"from","","",466,[[]]],[11,"borrow","","",466,[[]]],[11,"borrow_mut","","",466,[[]]],[11,"try_from","","",466,[[],["result",4]]],[11,"into","","",466,[[]]],[11,"try_into","","",466,[[],["result",4]]],[11,"into_iter","","",466,[[]]],[11,"type_id","","",466,[[],["typeid",3]]],[11,"from","","",467,[[]]],[11,"borrow","","",467,[[]]],[11,"borrow_mut","","",467,[[]]],[11,"try_from","","",467,[[],["result",4]]],[11,"into","","",467,[[]]],[11,"try_into","","",467,[[],["result",4]]],[11,"type_id","","",467,[[],["typeid",3]]],[11,"from","","",132,[[]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"try_from","","",132,[[],["result",4]]],[11,"into","","",132,[[]]],[11,"try_into","","",132,[[],["result",4]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"to_owned","","",132,[[]]],[11,"clone_into","","",132,[[]]],[11,"from","std::num","",133,[[]]],[11,"borrow","","",133,[[]]],[11,"borrow_mut","","",133,[[]]],[11,"try_from","","",133,[[],["result",4]]],[11,"into","","",133,[[]]],[11,"try_into","","",133,[[],["result",4]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"to_owned","","",133,[[]]],[11,"clone_into","","",133,[[]]],[11,"to_string","","",133,[[],["string",3]]],[11,"from","","",134,[[]]],[11,"borrow","","",134,[[]]],[11,"borrow_mut","","",134,[[]]],[11,"try_from","","",134,[[],["result",4]]],[11,"into","","",134,[[]]],[11,"try_into","","",134,[[],["result",4]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"to_owned","","",134,[[]]],[11,"clone_into","","",134,[[]]],[11,"from","","",468,[[]]],[11,"borrow","","",468,[[]]],[11,"borrow_mut","","",468,[[]]],[11,"try_from","","",468,[[],["result",4]]],[11,"into","","",468,[[]]],[11,"try_into","","",468,[[],["result",4]]],[11,"type_id","","",468,[[],["typeid",3]]],[11,"to_owned","","",468,[[]]],[11,"clone_into","","",468,[[]]],[11,"to_string","","",468,[[],["string",3]]],[11,"from","","",469,[[]]],[11,"borrow","","",469,[[]]],[11,"borrow_mut","","",469,[[]]],[11,"try_from","","",469,[[],["result",4]]],[11,"into","","",469,[[]]],[11,"try_into","","",469,[[],["result",4]]],[11,"type_id","","",469,[[],["typeid",3]]],[11,"to_owned","","",469,[[]]],[11,"clone_into","","",469,[[]]],[11,"to_string","","",469,[[],["string",3]]],[11,"from","","",470,[[]]],[11,"from","","",470,[[]]],[11,"borrow","","",470,[[]]],[11,"borrow_mut","","",470,[[]]],[11,"try_from","","",470,[[],["result",4]]],[11,"into","","",470,[[]]],[11,"try_into","","",470,[[],["result",4]]],[11,"type_id","","",470,[[],["typeid",3]]],[11,"to_owned","","",470,[[]]],[11,"clone_into","","",470,[[]]],[11,"to_string","","",470,[[],["string",3]]],[11,"from","","",471,[[]]],[11,"borrow","","",471,[[]]],[11,"borrow_mut","","",471,[[]]],[11,"try_from","","",471,[[],["result",4]]],[11,"into","","",471,[[]]],[11,"try_into","","",471,[[],["result",4]]],[11,"type_id","","",471,[[],["typeid",3]]],[11,"to_owned","","",471,[[]]],[11,"clone_into","","",471,[[]]],[11,"to_string","","",471,[[],["string",3]]],[11,"from","","",472,[[]]],[11,"borrow","","",472,[[]]],[11,"borrow_mut","","",472,[[]]],[11,"try_from","","",472,[[],["result",4]]],[11,"into","","",472,[[]]],[11,"try_into","","",472,[[],["result",4]]],[11,"type_id","","",472,[[],["typeid",3]]],[11,"to_owned","","",472,[[]]],[11,"clone_into","","",472,[[]]],[11,"to_string","","",472,[[],["string",3]]],[11,"from","","",473,[[]]],[11,"borrow","","",473,[[]]],[11,"borrow_mut","","",473,[[]]],[11,"try_from","","",473,[[],["result",4]]],[11,"into","","",473,[[]]],[11,"try_into","","",473,[[],["result",4]]],[11,"type_id","","",473,[[],["typeid",3]]],[11,"to_owned","","",473,[[]]],[11,"clone_into","","",473,[[]]],[11,"to_string","","",473,[[],["string",3]]],[11,"from","","",474,[[]]],[11,"borrow","","",474,[[]]],[11,"borrow_mut","","",474,[[]]],[11,"try_from","","",474,[[],["result",4]]],[11,"into","","",474,[[]]],[11,"try_into","","",474,[[],["result",4]]],[11,"type_id","","",474,[[],["typeid",3]]],[11,"to_owned","","",474,[[]]],[11,"clone_into","","",474,[[]]],[11,"to_string","","",474,[[],["string",3]]],[11,"from","","",475,[[]]],[11,"borrow","","",475,[[]]],[11,"borrow_mut","","",475,[[]]],[11,"try_from","","",475,[[],["result",4]]],[11,"into","","",475,[[]]],[11,"try_into","","",475,[[],["result",4]]],[11,"type_id","","",475,[[],["typeid",3]]],[11,"to_owned","","",475,[[]]],[11,"clone_into","","",475,[[]]],[11,"to_string","","",475,[[],["string",3]]],[11,"from","","",476,[[]]],[11,"borrow","","",476,[[]]],[11,"borrow_mut","","",476,[[]]],[11,"try_from","","",476,[[],["result",4]]],[11,"into","","",476,[[]]],[11,"try_into","","",476,[[],["result",4]]],[11,"type_id","","",476,[[],["typeid",3]]],[11,"to_owned","","",476,[[]]],[11,"clone_into","","",476,[[]]],[11,"to_string","","",476,[[],["string",3]]],[11,"from","","",477,[[]]],[11,"borrow","","",477,[[]]],[11,"borrow_mut","","",477,[[]]],[11,"try_from","","",477,[[],["result",4]]],[11,"into","","",477,[[]]],[11,"try_into","","",477,[[],["result",4]]],[11,"type_id","","",477,[[],["typeid",3]]],[11,"to_owned","","",477,[[]]],[11,"clone_into","","",477,[[]]],[11,"to_string","","",477,[[],["string",3]]],[11,"from","","",478,[[]]],[11,"borrow","","",478,[[]]],[11,"borrow_mut","","",478,[[]]],[11,"try_from","","",478,[[],["result",4]]],[11,"into","","",478,[[]]],[11,"try_into","","",478,[[],["result",4]]],[11,"type_id","","",478,[[],["typeid",3]]],[11,"to_owned","","",478,[[]]],[11,"clone_into","","",478,[[]]],[11,"to_string","","",478,[[],["string",3]]],[11,"from","","",479,[[]]],[11,"borrow","","",479,[[]]],[11,"borrow_mut","","",479,[[]]],[11,"try_from","","",479,[[],["result",4]]],[11,"into","","",479,[[]]],[11,"try_into","","",479,[[],["result",4]]],[11,"type_id","","",479,[[],["typeid",3]]],[11,"to_owned","","",479,[[]]],[11,"clone_into","","",479,[[]]],[11,"to_string","","",479,[[],["string",3]]],[11,"from","","",480,[[]]],[11,"borrow","","",480,[[]]],[11,"borrow_mut","","",480,[[]]],[11,"try_from","","",480,[[],["result",4]]],[11,"into","","",480,[[]]],[11,"try_into","","",480,[[],["result",4]]],[11,"type_id","","",480,[[],["typeid",3]]],[11,"to_owned","","",480,[[]]],[11,"clone_into","","",480,[[]]],[11,"to_string","","",480,[[],["string",3]]],[11,"from","","",481,[[]]],[11,"borrow","","",481,[[]]],[11,"borrow_mut","","",481,[[]]],[11,"try_from","","",481,[[],["result",4]]],[11,"into","","",481,[[]]],[11,"try_into","","",481,[[],["result",4]]],[11,"type_id","","",481,[[],["typeid",3]]],[11,"to_owned","","",481,[[]]],[11,"clone_into","","",481,[[]]],[11,"to_string","","",481,[[],["string",3]]],[11,"from","","",482,[[]]],[11,"borrow","","",482,[[]]],[11,"borrow_mut","","",482,[[]]],[11,"try_from","","",482,[[],["result",4]]],[11,"into","","",482,[[]]],[11,"try_into","","",482,[[],["result",4]]],[11,"type_id","","",482,[[],["typeid",3]]],[11,"to_owned","","",482,[[]]],[11,"clone_into","","",482,[[]]],[11,"to_string","","",482,[[],["string",3]]],[11,"from","","",135,[[]]],[11,"borrow","","",135,[[]]],[11,"borrow_mut","","",135,[[]]],[11,"try_from","","",135,[[],["result",4]]],[11,"into","","",135,[[]]],[11,"try_into","","",135,[[],["result",4]]],[11,"type_id","","",135,[[],["typeid",3]]],[11,"to_owned","","",135,[[]]],[11,"clone_into","","",135,[[]]],[11,"from","std::os::unix::net","",205,[[]]],[11,"borrow","","",205,[[]]],[11,"borrow_mut","","",205,[[]]],[11,"try_from","","",205,[[],["result",4]]],[11,"into","","",205,[[]]],[11,"try_into","","",205,[[],["result",4]]],[11,"type_id","","",205,[[],["typeid",3]]],[11,"to_owned","","",205,[[]]],[11,"clone_into","","",205,[[]]],[11,"from","","",206,[[]]],[11,"borrow","","",206,[[]]],[11,"borrow_mut","","",206,[[]]],[11,"try_from","","",206,[[],["result",4]]],[11,"into","","",206,[[]]],[11,"try_into","","",206,[[],["result",4]]],[11,"type_id","","",206,[[],["typeid",3]]],[11,"to_owned","","",206,[[]]],[11,"clone_into","","",206,[[]]],[11,"from","","",483,[[]]],[11,"borrow","","",483,[[]]],[11,"borrow_mut","","",483,[[]]],[11,"try_from","","",483,[[],["result",4]]],[11,"into","","",483,[[]]],[11,"try_into","","",483,[[],["result",4]]],[11,"into_iter","","",483,[[]]],[11,"type_id","","",483,[[],["typeid",3]]],[11,"from","","",484,[[]]],[11,"borrow","","",484,[[]]],[11,"borrow_mut","","",484,[[]]],[11,"try_from","","",484,[[],["result",4]]],[11,"into","","",484,[[]]],[11,"try_into","","",484,[[],["result",4]]],[11,"into_iter","","",484,[[]]],[11,"type_id","","",484,[[],["typeid",3]]],[11,"from","","",148,[[]]],[11,"borrow","","",148,[[]]],[11,"borrow_mut","","",148,[[]]],[11,"try_from","","",148,[[],["result",4]]],[11,"into","","",148,[[]]],[11,"try_into","","",148,[[],["result",4]]],[11,"type_id","","",148,[[],["typeid",3]]],[11,"from","","",150,[[]]],[11,"borrow","","",150,[[]]],[11,"borrow_mut","","",150,[[]]],[11,"try_from","","",150,[[],["result",4]]],[11,"into","","",150,[[]]],[11,"try_into","","",150,[[],["result",4]]],[11,"type_id","","",150,[[],["typeid",3]]],[11,"from","","",485,[[]]],[11,"borrow","","",485,[[]]],[11,"borrow_mut","","",485,[[]]],[11,"try_from","","",485,[[],["result",4]]],[11,"into","","",485,[[]]],[11,"try_into","","",485,[[],["result",4]]],[11,"into_iter","","",485,[[]]],[11,"type_id","","",485,[[],["typeid",3]]],[11,"from","","",207,[[]]],[11,"borrow","","",207,[[]]],[11,"borrow_mut","","",207,[[]]],[11,"try_from","","",207,[[],["result",4]]],[11,"into","","",207,[[]]],[11,"try_into","","",207,[[],["result",4]]],[11,"type_id","","",207,[[],["typeid",3]]],[11,"from","","",208,[[]]],[11,"borrow","","",208,[[]]],[11,"borrow_mut","","",208,[[]]],[11,"try_from","","",208,[[],["result",4]]],[11,"into","","",208,[[]]],[11,"try_into","","",208,[[],["result",4]]],[11,"type_id","","",208,[[],["typeid",3]]],[11,"from","","",209,[[]]],[11,"borrow","","",209,[[]]],[11,"borrow_mut","","",209,[[]]],[11,"try_from","","",209,[[],["result",4]]],[11,"into","","",209,[[]]],[11,"try_into","","",209,[[],["result",4]]],[11,"type_id","","",209,[[],["typeid",3]]],[11,"from","","",486,[[]]],[11,"borrow","","",486,[[]]],[11,"borrow_mut","","",486,[[]]],[11,"try_from","","",486,[[],["result",4]]],[11,"into","","",486,[[]]],[11,"try_into","","",486,[[],["result",4]]],[11,"into_iter","","",486,[[]]],[11,"type_id","","",486,[[],["typeid",3]]],[11,"from","","",151,[[]]],[11,"borrow","","",151,[[]]],[11,"borrow_mut","","",151,[[]]],[11,"try_from","","",151,[[],["result",4]]],[11,"into","","",151,[[]]],[11,"try_into","","",151,[[],["result",4]]],[11,"type_id","","",151,[[],["typeid",3]]],[11,"to_owned","","",151,[[]]],[11,"clone_into","","",151,[[]]],[11,"from","","",210,[[]]],[11,"borrow","","",210,[[]]],[11,"borrow_mut","","",210,[[]]],[11,"try_from","","",210,[[],["result",4]]],[11,"into","","",210,[[]]],[11,"try_into","","",210,[[],["result",4]]],[11,"type_id","","",210,[[],["typeid",3]]],[11,"from","std::os::windows::ffi","",487,[[]]],[11,"borrow","","",487,[[]]],[11,"borrow_mut","","",487,[[]]],[11,"try_from","","",487,[[],["result",4]]],[11,"into","","",487,[[]]],[11,"try_into","","",487,[[],["result",4]]],[11,"into_iter","","",487,[[]]],[11,"type_id","","",487,[[],["typeid",3]]],[11,"to_owned","","",487,[[]]],[11,"clone_into","","",487,[[]]],[11,"from","std::os::linux::raw","",170,[[]]],[11,"borrow","","",170,[[]]],[11,"borrow_mut","","",170,[[]]],[11,"try_from","","",170,[[],["result",4]]],[11,"into","","",170,[[]]],[11,"try_into","","",170,[[],["result",4]]],[11,"type_id","","",170,[[],["typeid",3]]],[11,"to_owned","","",170,[[]]],[11,"clone_into","","",170,[[]]],[11,"from","std::panic","",488,[[]]],[11,"borrow","","",488,[[]]],[11,"borrow_mut","","",488,[[]]],[11,"try_from","","",488,[[],["result",4]]],[11,"into","","",488,[[]]],[11,"try_into","","",488,[[],["result",4]]],[11,"type_id","","",488,[[],["typeid",3]]],[11,"to_owned","","",488,[[]]],[11,"clone_into","","",488,[[]]],[11,"to_string","","",488,[[],["string",3]]],[11,"from","","",489,[[]]],[11,"borrow","","",489,[[]]],[11,"borrow_mut","","",489,[[]]],[11,"try_from","","",489,[[],["result",4]]],[11,"into","","",489,[[]]],[11,"try_into","","",489,[[],["result",4]]],[11,"type_id","","",489,[[],["typeid",3]]],[11,"to_string","","",489,[[],["string",3]]],[11,"from","","",171,[[]]],[11,"borrow","","",171,[[]]],[11,"borrow_mut","","",171,[[]]],[11,"try_from","","",171,[[],["result",4]]],[11,"into","","",171,[[]]],[11,"try_into","","",171,[[],["result",4]]],[11,"type_id","","",171,[[],["typeid",3]]],[11,"into_future","","",171,[[]]],[11,"from","std::path","",172,[[]]],[11,"borrow","","",172,[[]]],[11,"borrow_mut","","",172,[[]]],[11,"try_from","","",172,[[],["result",4]]],[11,"into","","",172,[[]]],[11,"try_into","","",172,[[],["result",4]]],[11,"type_id","","",172,[[],["typeid",3]]],[11,"to_owned","","",172,[[]]],[11,"clone_into","","",172,[[]]],[11,"from","","",173,[[]]],[11,"borrow","","",173,[[]]],[11,"borrow_mut","","",173,[[]]],[11,"try_from","","",173,[[],["result",4]]],[11,"into","","",173,[[]]],[11,"try_into","","",173,[[],["result",4]]],[11,"type_id","","",173,[[],["typeid",3]]],[11,"to_owned","","",173,[[]]],[11,"clone_into","","",173,[[]]],[11,"from","","",174,[[]]],[11,"borrow","","",174,[[]]],[11,"borrow_mut","","",174,[[]]],[11,"try_from","","",174,[[],["result",4]]],[11,"into","","",174,[[]]],[11,"try_into","","",174,[[],["result",4]]],[11,"type_id","","",174,[[],["typeid",3]]],[11,"to_owned","","",174,[[]]],[11,"clone_into","","",174,[[]]],[11,"from","","",175,[[]]],[11,"borrow","","",175,[[]]],[11,"borrow_mut","","",175,[[]]],[11,"try_from","","",175,[[],["result",4]]],[11,"into","","",175,[[]]],[11,"try_into","","",175,[[],["result",4]]],[11,"into_iter","","",175,[[]]],[11,"type_id","","",175,[[],["typeid",3]]],[11,"to_owned","","",175,[[]]],[11,"clone_into","","",175,[[]]],[11,"from","","",176,[[]]],[11,"borrow","","",176,[[]]],[11,"borrow_mut","","",176,[[]]],[11,"try_from","","",176,[[],["result",4]]],[11,"into","","",176,[[]]],[11,"try_into","","",176,[[],["result",4]]],[11,"into_iter","","",176,[[]]],[11,"type_id","","",176,[[],["typeid",3]]],[11,"to_owned","","",176,[[]]],[11,"clone_into","","",176,[[]]],[11,"from","","",490,[[]]],[11,"borrow","","",490,[[]]],[11,"borrow_mut","","",490,[[]]],[11,"try_from","","",490,[[],["result",4]]],[11,"into","","",490,[[]]],[11,"try_into","","",490,[[],["result",4]]],[11,"into_iter","","",490,[[]]],[11,"type_id","","",490,[[],["typeid",3]]],[11,"to_owned","","",490,[[]]],[11,"clone_into","","",490,[[]]],[11,"from","","",177,[[]]],[11,"borrow","","",177,[[]]],[11,"borrow_mut","","",177,[[]]],[11,"try_from","","",177,[[],["result",4]]],[11,"into","","",177,[[]]],[11,"try_into","","",177,[[],["result",4]]],[11,"type_id","","",177,[[],["typeid",3]]],[11,"to_owned","","",177,[[]]],[11,"clone_into","","",177,[[]]],[11,"borrow","","",178,[[]]],[11,"borrow_mut","","",178,[[]]],[11,"type_id","","",178,[[],["typeid",3]]],[11,"from","","",491,[[]]],[11,"borrow","","",491,[[]]],[11,"borrow_mut","","",491,[[]]],[11,"try_from","","",491,[[],["result",4]]],[11,"into","","",491,[[]]],[11,"try_into","","",491,[[],["result",4]]],[11,"type_id","","",491,[[],["typeid",3]]],[11,"to_owned","","",491,[[]]],[11,"clone_into","","",491,[[]]],[11,"to_string","","",491,[[],["string",3]]],[11,"from","","",492,[[]]],[11,"borrow","","",492,[[]]],[11,"borrow_mut","","",492,[[]]],[11,"try_from","","",492,[[],["result",4]]],[11,"into","","",492,[[]]],[11,"try_into","","",492,[[],["result",4]]],[11,"type_id","","",492,[[],["typeid",3]]],[11,"to_string","","",492,[[],["string",3]]],[11,"from","std::process","",493,[[]]],[11,"borrow","","",493,[[]]],[11,"borrow_mut","","",493,[[]]],[11,"try_from","","",493,[[],["result",4]]],[11,"into","","",493,[[]]],[11,"try_into","","",493,[[],["result",4]]],[11,"into_iter","","",493,[[]]],[11,"type_id","","",493,[[],["typeid",3]]],[11,"from","","",179,[[]]],[11,"borrow","","",179,[[]]],[11,"borrow_mut","","",179,[[]]],[11,"try_from","","",179,[[],["result",4]]],[11,"into","","",179,[[]]],[11,"try_into","","",179,[[],["result",4]]],[11,"type_id","","",179,[[],["typeid",3]]],[11,"from","","",494,[[]]],[11,"borrow","","",494,[[]]],[11,"borrow_mut","","",494,[[]]],[11,"try_from","","",494,[[],["result",4]]],[11,"into","","",494,[[]]],[11,"try_into","","",494,[[],["result",4]]],[11,"type_id","","",494,[[],["typeid",3]]],[11,"from","","",495,[[]]],[11,"borrow","","",495,[[]]],[11,"borrow_mut","","",495,[[]]],[11,"try_from","","",495,[[],["result",4]]],[11,"into","","",495,[[]]],[11,"try_into","","",495,[[],["result",4]]],[11,"type_id","","",495,[[],["typeid",3]]],[11,"from","","",496,[[]]],[11,"borrow","","",496,[[]]],[11,"borrow_mut","","",496,[[]]],[11,"try_from","","",496,[[],["result",4]]],[11,"into","","",496,[[]]],[11,"try_into","","",496,[[],["result",4]]],[11,"type_id","","",496,[[],["typeid",3]]],[11,"from","","",180,[[]]],[11,"borrow","","",180,[[]]],[11,"borrow_mut","","",180,[[]]],[11,"try_from","","",180,[[],["result",4]]],[11,"into","","",180,[[]]],[11,"try_into","","",180,[[],["result",4]]],[11,"type_id","","",180,[[],["typeid",3]]],[11,"from","","",497,[[]]],[11,"borrow","","",497,[[]]],[11,"borrow_mut","","",497,[[]]],[11,"try_from","","",497,[[],["result",4]]],[11,"into","","",497,[[]]],[11,"try_into","","",497,[[],["result",4]]],[11,"into_iter","","",497,[[]]],[11,"type_id","","",497,[[],["typeid",3]]],[11,"from","","",181,[[]]],[11,"borrow","","",181,[[]]],[11,"borrow_mut","","",181,[[]]],[11,"try_from","","",181,[[],["result",4]]],[11,"into","","",181,[[]]],[11,"try_into","","",181,[[],["result",4]]],[11,"type_id","","",181,[[],["typeid",3]]],[11,"to_owned","","",181,[[]]],[11,"clone_into","","",181,[[]]],[11,"from","","",182,[[]]],[11,"borrow","","",182,[[]]],[11,"borrow_mut","","",182,[[]]],[11,"try_from","","",182,[[],["result",4]]],[11,"into","","",182,[[]]],[11,"try_into","","",182,[[],["result",4]]],[11,"type_id","","",182,[[],["typeid",3]]],[11,"from","","",183,[[]]],[11,"borrow","","",183,[[]]],[11,"borrow_mut","","",183,[[]]],[11,"try_from","","",183,[[],["result",4]]],[11,"into","","",183,[[]]],[11,"try_into","","",183,[[],["result",4]]],[11,"type_id","","",183,[[],["typeid",3]]],[11,"to_owned","","",183,[[]]],[11,"clone_into","","",183,[[]]],[11,"to_string","","",183,[[],["string",3]]],[11,"from","","",184,[[]]],[11,"borrow","","",184,[[]]],[11,"borrow_mut","","",184,[[]]],[11,"try_from","","",184,[[],["result",4]]],[11,"into","","",184,[[]]],[11,"try_into","","",184,[[],["result",4]]],[11,"type_id","","",184,[[],["typeid",3]]],[11,"to_owned","","",184,[[]]],[11,"clone_into","","",184,[[]]],[11,"from","std::sync","",498,[[]]],[11,"from","","",498,[[]]],[11,"borrow","","",498,[[]]],[11,"borrow_mut","","",498,[[]]],[11,"try_from","","",498,[[],["result",4]]],[11,"into","","",498,[[]]],[11,"try_into","","",498,[[],["result",4]]],[11,"type_id","","",498,[[],["typeid",3]]],[11,"to_owned","","",498,[[]]],[11,"clone_into","","",498,[[]]],[11,"to_string","","",498,[[],["string",3]]],[11,"from","","",499,[[]]],[11,"borrow","","",499,[[]]],[11,"borrow_mut","","",499,[[]]],[11,"try_from","","",499,[[],["result",4]]],[11,"into","","",499,[[]]],[11,"try_into","","",499,[[],["result",4]]],[11,"type_id","","",499,[[],["typeid",3]]],[11,"to_owned","","",499,[[]]],[11,"clone_into","","",499,[[]]],[11,"from","std::sync::atomic","",500,[[]]],[11,"borrow","","",500,[[]]],[11,"borrow_mut","","",500,[[]]],[11,"try_from","","",500,[[],["result",4]]],[11,"into","","",500,[[]]],[11,"try_into","","",500,[[],["result",4]]],[11,"type_id","","",500,[[],["typeid",3]]],[11,"from","","",501,[[]]],[11,"borrow","","",501,[[]]],[11,"borrow_mut","","",501,[[]]],[11,"try_from","","",501,[[],["result",4]]],[11,"into","","",501,[[]]],[11,"try_into","","",501,[[],["result",4]]],[11,"type_id","","",501,[[],["typeid",3]]],[11,"from","","",186,[[]]],[11,"borrow","","",186,[[]]],[11,"borrow_mut","","",186,[[]]],[11,"try_from","","",186,[[],["result",4]]],[11,"into","","",186,[[]]],[11,"try_into","","",186,[[],["result",4]]],[11,"type_id","","",186,[[],["typeid",3]]],[11,"to_owned","","",186,[[]]],[11,"clone_into","","",186,[[]]],[11,"from","","",502,[[]]],[11,"borrow","","",502,[[]]],[11,"borrow_mut","","",502,[[]]],[11,"try_from","","",502,[[],["result",4]]],[11,"into","","",502,[[]]],[11,"try_into","","",502,[[],["result",4]]],[11,"type_id","","",502,[[],["typeid",3]]],[11,"from","","",503,[[]]],[11,"borrow","","",503,[[]]],[11,"borrow_mut","","",503,[[]]],[11,"try_from","","",503,[[],["result",4]]],[11,"into","","",503,[[]]],[11,"try_into","","",503,[[],["result",4]]],[11,"type_id","","",503,[[],["typeid",3]]],[11,"from","","",504,[[]]],[11,"borrow","","",504,[[]]],[11,"borrow_mut","","",504,[[]]],[11,"try_from","","",504,[[],["result",4]]],[11,"into","","",504,[[]]],[11,"try_into","","",504,[[],["result",4]]],[11,"type_id","","",504,[[],["typeid",3]]],[11,"from","","",505,[[]]],[11,"borrow","","",505,[[]]],[11,"borrow_mut","","",505,[[]]],[11,"try_from","","",505,[[],["result",4]]],[11,"into","","",505,[[]]],[11,"try_into","","",505,[[],["result",4]]],[11,"type_id","","",505,[[],["typeid",3]]],[11,"from","","",506,[[]]],[11,"borrow","","",506,[[]]],[11,"borrow_mut","","",506,[[]]],[11,"try_from","","",506,[[],["result",4]]],[11,"into","","",506,[[]]],[11,"try_into","","",506,[[],["result",4]]],[11,"type_id","","",506,[[],["typeid",3]]],[11,"from","","",507,[[]]],[11,"borrow","","",507,[[]]],[11,"borrow_mut","","",507,[[]]],[11,"try_from","","",507,[[],["result",4]]],[11,"into","","",507,[[]]],[11,"try_into","","",507,[[],["result",4]]],[11,"type_id","","",507,[[],["typeid",3]]],[11,"from","","",508,[[]]],[11,"borrow","","",508,[[]]],[11,"borrow_mut","","",508,[[]]],[11,"try_from","","",508,[[],["result",4]]],[11,"into","","",508,[[]]],[11,"try_into","","",508,[[],["result",4]]],[11,"type_id","","",508,[[],["typeid",3]]],[11,"from","","",509,[[]]],[11,"borrow","","",509,[[]]],[11,"borrow_mut","","",509,[[]]],[11,"try_from","","",509,[[],["result",4]]],[11,"into","","",509,[[]]],[11,"try_into","","",509,[[],["result",4]]],[11,"type_id","","",509,[[],["typeid",3]]],[11,"from","","",510,[[]]],[11,"borrow","","",510,[[]]],[11,"borrow_mut","","",510,[[]]],[11,"try_from","","",510,[[],["result",4]]],[11,"into","","",510,[[]]],[11,"try_into","","",510,[[],["result",4]]],[11,"type_id","","",510,[[],["typeid",3]]],[11,"from","","",511,[[]]],[11,"borrow","","",511,[[]]],[11,"borrow_mut","","",511,[[]]],[11,"try_from","","",511,[[],["result",4]]],[11,"into","","",511,[[]]],[11,"try_into","","",511,[[],["result",4]]],[11,"type_id","","",511,[[],["typeid",3]]],[11,"from","std::sync::mpsc","",193,[[]]],[11,"borrow","","",193,[[]]],[11,"borrow_mut","","",193,[[]]],[11,"try_from","","",193,[[],["result",4]]],[11,"into","","",193,[[]]],[11,"try_into","","",193,[[],["result",4]]],[11,"type_id","","",193,[[],["typeid",3]]],[11,"from","","",512,[[]]],[11,"borrow","","",512,[[]]],[11,"borrow_mut","","",512,[[]]],[11,"try_from","","",512,[[],["result",4]]],[11,"into","","",512,[[]]],[11,"try_into","","",512,[[],["result",4]]],[11,"into_iter","","",512,[[]]],[11,"type_id","","",512,[[],["typeid",3]]],[11,"from","","",513,[[]]],[11,"borrow","","",513,[[]]],[11,"borrow_mut","","",513,[[]]],[11,"try_from","","",513,[[],["result",4]]],[11,"into","","",513,[[]]],[11,"try_into","","",513,[[],["result",4]]],[11,"into_iter","","",513,[[]]],[11,"type_id","","",513,[[],["typeid",3]]],[11,"from","","",514,[[]]],[11,"borrow","","",514,[[]]],[11,"borrow_mut","","",514,[[]]],[11,"try_from","","",514,[[],["result",4]]],[11,"into","","",514,[[]]],[11,"try_into","","",514,[[],["result",4]]],[11,"into_iter","","",514,[[]]],[11,"type_id","","",514,[[],["typeid",3]]],[11,"from","","",191,[[]]],[11,"borrow","","",191,[[]]],[11,"borrow_mut","","",191,[[]]],[11,"try_from","","",191,[[],["result",4]]],[11,"into","","",191,[[]]],[11,"try_into","","",191,[[],["result",4]]],[11,"type_id","","",191,[[],["typeid",3]]],[11,"to_owned","","",191,[[]]],[11,"clone_into","","",191,[[]]],[11,"from","","",192,[[]]],[11,"borrow","","",192,[[]]],[11,"borrow_mut","","",192,[[]]],[11,"try_from","","",192,[[],["result",4]]],[11,"into","","",192,[[]]],[11,"try_into","","",192,[[],["result",4]]],[11,"type_id","","",192,[[],["typeid",3]]],[11,"to_owned","","",192,[[]]],[11,"clone_into","","",192,[[]]],[11,"from","","",187,[[]]],[11,"borrow","","",187,[[]]],[11,"borrow_mut","","",187,[[]]],[11,"try_from","","",187,[[],["result",4]]],[11,"into","","",187,[[]]],[11,"try_into","","",187,[[],["result",4]]],[11,"type_id","","",187,[[],["typeid",3]]],[11,"to_owned","","",187,[[]]],[11,"clone_into","","",187,[[]]],[11,"to_string","","",187,[[],["string",3]]],[11,"from","","",515,[[]]],[11,"borrow","","",515,[[]]],[11,"borrow_mut","","",515,[[]]],[11,"try_from","","",515,[[],["result",4]]],[11,"into","","",515,[[]]],[11,"try_into","","",515,[[],["result",4]]],[11,"type_id","","",515,[[],["typeid",3]]],[11,"to_owned","","",515,[[]]],[11,"clone_into","","",515,[[]]],[11,"to_string","","",515,[[],["string",3]]],[11,"from","","",188,[[]]],[11,"borrow","","",188,[[]]],[11,"borrow_mut","","",188,[[]]],[11,"try_from","","",188,[[],["result",4]]],[11,"into","","",188,[[]]],[11,"try_into","","",188,[[],["result",4]]],[11,"type_id","","",188,[[],["typeid",3]]],[11,"to_owned","","",188,[[]]],[11,"clone_into","","",188,[[]]],[11,"to_string","","",188,[[],["string",3]]],[11,"from","","",189,[[]]],[11,"borrow","","",189,[[]]],[11,"borrow_mut","","",189,[[]]],[11,"try_from","","",189,[[],["result",4]]],[11,"into","","",189,[[]]],[11,"try_into","","",189,[[],["result",4]]],[11,"type_id","","",189,[[],["typeid",3]]],[11,"to_owned","","",189,[[]]],[11,"clone_into","","",189,[[]]],[11,"to_string","","",189,[[],["string",3]]],[11,"from","","",190,[[]]],[11,"borrow","","",190,[[]]],[11,"borrow_mut","","",190,[[]]],[11,"try_from","","",190,[[],["result",4]]],[11,"into","","",190,[[]]],[11,"try_into","","",190,[[],["result",4]]],[11,"type_id","","",190,[[],["typeid",3]]],[11,"to_owned","","",190,[[]]],[11,"clone_into","","",190,[[]]],[11,"to_string","","",190,[[],["string",3]]],[11,"from","std::sync","",516,[[]]],[11,"borrow","","",516,[[]]],[11,"borrow_mut","","",516,[[]]],[11,"try_from","","",516,[[],["result",4]]],[11,"into","","",516,[[]]],[11,"try_into","","",516,[[],["result",4]]],[11,"type_id","","",516,[[],["typeid",3]]],[11,"from","","",517,[[]]],[11,"borrow","","",517,[[]]],[11,"borrow_mut","","",517,[[]]],[11,"try_from","","",517,[[],["result",4]]],[11,"into","","",517,[[]]],[11,"try_into","","",517,[[],["result",4]]],[11,"type_id","","",517,[[],["typeid",3]]],[11,"from","","",518,[[]]],[11,"borrow","","",518,[[]]],[11,"borrow_mut","","",518,[[]]],[11,"try_from","","",518,[[],["result",4]]],[11,"into","","",518,[[]]],[11,"try_into","","",518,[[],["result",4]]],[11,"type_id","","",518,[[],["typeid",3]]],[11,"to_owned","","",518,[[]]],[11,"clone_into","","",518,[[]]],[11,"from","","",519,[[]]],[11,"borrow","","",519,[[]]],[11,"borrow_mut","","",519,[[]]],[11,"try_from","","",519,[[],["result",4]]],[11,"into","","",519,[[]]],[11,"try_into","","",519,[[],["result",4]]],[11,"type_id","","",519,[[],["typeid",3]]],[11,"from","","",520,[[]]],[11,"from","","",520,[[]]],[11,"borrow","","",520,[[]]],[11,"borrow_mut","","",520,[[]]],[11,"try_from","","",520,[[],["result",4]]],[11,"into","","",520,[[]]],[11,"try_into","","",520,[[],["result",4]]],[11,"type_id","","",520,[[],["typeid",3]]],[11,"from","","",521,[[]]],[11,"borrow","","",521,[[]]],[11,"borrow_mut","","",521,[[]]],[11,"try_from","","",521,[[],["result",4]]],[11,"into","","",521,[[]]],[11,"try_into","","",521,[[],["result",4]]],[11,"type_id","","",521,[[],["typeid",3]]],[11,"to_string","","",521,[[],["string",3]]],[11,"from","","",522,[[]]],[11,"borrow","","",522,[[]]],[11,"borrow_mut","","",522,[[]]],[11,"try_from","","",522,[[],["result",4]]],[11,"into","","",522,[[]]],[11,"try_into","","",522,[[],["result",4]]],[11,"type_id","","",522,[[],["typeid",3]]],[11,"from","","",523,[[]]],[11,"borrow","","",523,[[]]],[11,"borrow_mut","","",523,[[]]],[11,"try_from","","",523,[[],["result",4]]],[11,"into","","",523,[[]]],[11,"try_into","","",523,[[],["result",4]]],[11,"type_id","","",523,[[],["typeid",3]]],[11,"from","","",524,[[]]],[11,"from","","",524,[[]]],[11,"borrow","","",524,[[]]],[11,"borrow_mut","","",524,[[]]],[11,"try_from","","",524,[[],["result",4]]],[11,"into","","",524,[[]]],[11,"try_into","","",524,[[],["result",4]]],[11,"type_id","","",524,[[],["typeid",3]]],[11,"from","","",525,[[]]],[11,"borrow","","",525,[[]]],[11,"borrow_mut","","",525,[[]]],[11,"try_from","","",525,[[],["result",4]]],[11,"into","","",525,[[]]],[11,"try_into","","",525,[[],["result",4]]],[11,"type_id","","",525,[[],["typeid",3]]],[11,"to_string","","",525,[[],["string",3]]],[11,"from","","",526,[[]]],[11,"borrow","","",526,[[]]],[11,"borrow_mut","","",526,[[]]],[11,"try_from","","",526,[[],["result",4]]],[11,"into","","",526,[[]]],[11,"try_into","","",526,[[],["result",4]]],[11,"type_id","","",526,[[],["typeid",3]]],[11,"to_string","","",526,[[],["string",3]]],[11,"from","","",204,[[]]],[11,"borrow","","",204,[[]]],[11,"borrow_mut","","",204,[[]]],[11,"try_from","","",204,[[],["result",4]]],[11,"into","","",204,[[]]],[11,"try_into","","",204,[[],["result",4]]],[11,"type_id","","",204,[[],["typeid",3]]],[11,"to_string","","",204,[[],["string",3]]],[11,"from","","",194,[[]]],[11,"borrow","","",194,[[]]],[11,"borrow_mut","","",194,[[]]],[11,"try_from","","",194,[[],["result",4]]],[11,"into","","",194,[[]]],[11,"try_into","","",194,[[],["result",4]]],[11,"type_id","","",194,[[],["typeid",3]]],[11,"to_string","","",194,[[],["string",3]]],[11,"from","std::time","",527,[[]]],[11,"borrow","","",527,[[]]],[11,"borrow_mut","","",527,[[]]],[11,"try_from","","",527,[[],["result",4]]],[11,"into","","",527,[[]]],[11,"try_into","","",527,[[],["result",4]]],[11,"type_id","","",527,[[],["typeid",3]]],[11,"to_owned","","",527,[[]]],[11,"clone_into","","",527,[[]]],[11,"from","","",195,[[]]],[11,"borrow","","",195,[[]]],[11,"borrow_mut","","",195,[[]]],[11,"try_from","","",195,[[],["result",4]]],[11,"into","","",195,[[]]],[11,"try_into","","",195,[[],["result",4]]],[11,"type_id","","",195,[[],["typeid",3]]],[11,"to_owned","","",195,[[]]],[11,"clone_into","","",195,[[]]],[11,"from","","",196,[[]]],[11,"borrow","","",196,[[]]],[11,"borrow_mut","","",196,[[]]],[11,"try_from","","",196,[[],["result",4]]],[11,"into","","",196,[[]]],[11,"try_into","","",196,[[],["result",4]]],[11,"type_id","","",196,[[],["typeid",3]]],[11,"to_owned","","",196,[[]]],[11,"clone_into","","",196,[[]]],[11,"from","","",197,[[]]],[11,"borrow","","",197,[[]]],[11,"borrow_mut","","",197,[[]]],[11,"try_from","","",197,[[],["result",4]]],[11,"into","","",197,[[]]],[11,"try_into","","",197,[[],["result",4]]],[11,"type_id","","",197,[[],["typeid",3]]],[11,"to_owned","","",197,[[]]],[11,"clone_into","","",197,[[]]],[11,"to_string","","",197,[[],["string",3]]],[11,"from","std::lazy","",528,[[]]],[11,"from","","",528,[[]]],[11,"borrow","","",528,[[]]],[11,"borrow_mut","","",528,[[]]],[11,"try_from","","",528,[[],["result",4]]],[11,"into","","",528,[[]]],[11,"try_into","","",528,[[],["result",4]]],[11,"type_id","","",528,[[],["typeid",3]]],[11,"to_owned","","",528,[[]]],[11,"clone_into","","",528,[[]]],[11,"from","","",529,[[]]],[11,"borrow","","",529,[[]]],[11,"borrow_mut","","",529,[[]]],[11,"try_from","","",529,[[],["result",4]]],[11,"into","","",529,[[]]],[11,"try_into","","",529,[[],["result",4]]],[11,"type_id","","",529,[[],["typeid",3]]],[11,"from","","",198,[[]]],[11,"from","","",198,[[]]],[11,"borrow","","",198,[[]]],[11,"borrow_mut","","",198,[[]]],[11,"try_from","","",198,[[],["result",4]]],[11,"into","","",198,[[]]],[11,"try_into","","",198,[[],["result",4]]],[11,"type_id","","",198,[[],["typeid",3]]],[11,"to_owned","","",198,[[]]],[11,"clone_into","","",198,[[]]],[11,"from","","",199,[[]]],[11,"borrow","","",199,[[]]],[11,"borrow_mut","","",199,[[]]],[11,"try_from","","",199,[[],["result",4]]],[11,"into","","",199,[[]]],[11,"try_into","","",199,[[],["result",4]]],[11,"type_id","","",199,[[],["typeid",3]]],[11,"from","std::task","",200,[[]]],[11,"from","","",200,[[]]],[11,"borrow","","",200,[[]]],[11,"borrow_mut","","",200,[[]]],[11,"try_from","","",200,[[],["result",4]]],[11,"into","","",200,[[]]],[11,"try_into","","",200,[[],["result",4]]],[11,"type_id","","",200,[[],["typeid",3]]],[11,"to_owned","","",200,[[]]],[11,"clone_into","","",200,[[]]],[11,"from","","",530,[[]]],[11,"borrow","","",530,[[]]],[11,"borrow_mut","","",530,[[]]],[11,"try_from","","",530,[[],["result",4]]],[11,"into","","",530,[[]]],[11,"try_into","","",530,[[],["result",4]]],[11,"type_id","","",530,[[],["typeid",3]]],[11,"from","","",531,[[]]],[11,"borrow","","",531,[[]]],[11,"borrow_mut","","",531,[[]]],[11,"try_from","","",531,[[],["result",4]]],[11,"into","","",531,[[]]],[11,"try_into","","",531,[[],["result",4]]],[11,"type_id","","",531,[[],["typeid",3]]],[11,"from","","",532,[[]]],[11,"borrow","","",532,[[]]],[11,"borrow_mut","","",532,[[]]],[11,"try_from","","",532,[[],["result",4]]],[11,"into","","",532,[[]]],[11,"try_into","","",532,[[],["result",4]]],[11,"type_id","","",532,[[],["typeid",3]]],[11,"to_owned","","",532,[[]]],[11,"clone_into","","",532,[[]]],[11,"from","","",533,[[]]],[11,"borrow","","",533,[[]]],[11,"borrow_mut","","",533,[[]]],[11,"try_from","","",533,[[],["result",4]]],[11,"into","","",533,[[]]],[11,"try_into","","",533,[[],["result",4]]],[11,"type_id","","",533,[[],["typeid",3]]],[11,"to_owned","","",533,[[]]],[11,"clone_into","","",533,[[]]],[11,"from","std::future","",534,[[]]],[11,"borrow","","",534,[[]]],[11,"borrow_mut","","",534,[[]]],[11,"try_from","","",534,[[],["result",4]]],[11,"into","","",534,[[]]],[11,"try_into","","",534,[[],["result",4]]],[11,"type_id","","",534,[[],["typeid",3]]],[11,"into_future","","",534,[[]]],[11,"to_owned","","",534,[[]]],[11,"clone_into","","",534,[[]]],[11,"from","","",535,[[]]],[11,"borrow","","",535,[[]]],[11,"borrow_mut","","",535,[[]]],[11,"try_from","","",535,[[],["result",4]]],[11,"into","","",535,[[]]],[11,"try_into","","",535,[[],["result",4]]],[11,"type_id","","",535,[[],["typeid",3]]],[11,"into_future","","",535,[[]]],[11,"to_owned","","",535,[[]]],[11,"clone_into","","",535,[[]]],[11,"from","std::alloc","",536,[[]]],[11,"borrow","","",536,[[]]],[11,"borrow_mut","","",536,[[]]],[11,"try_from","","",536,[[],["result",4]]],[11,"into","","",536,[[]]],[11,"try_into","","",536,[[],["result",4]]],[11,"type_id","","",536,[[],["typeid",3]]],[11,"to_owned","","",536,[[]]],[11,"clone_into","","",536,[[]]],[11,"from","","",537,[[]]],[11,"borrow","","",537,[[]]],[11,"borrow_mut","","",537,[[]]],[11,"try_from","","",537,[[],["result",4]]],[11,"into","","",537,[[]]],[11,"try_into","","",537,[[],["result",4]]],[11,"type_id","","",537,[[],["typeid",3]]],[11,"to_owned","","",537,[[]]],[11,"clone_into","","",537,[[]]],[11,"to_string","","",537,[[],["string",3]]],[11,"from","","",538,[[]]],[11,"borrow","","",538,[[]]],[11,"borrow_mut","","",538,[[]]],[11,"try_from","","",538,[[],["result",4]]],[11,"into","","",538,[[]]],[11,"try_into","","",538,[[],["result",4]]],[11,"type_id","","",538,[[],["typeid",3]]],[11,"to_owned","","",538,[[]]],[11,"clone_into","","",538,[[]]],[11,"from","","",539,[[]]],[11,"borrow","","",539,[[]]],[11,"borrow_mut","","",539,[[]]],[11,"try_from","","",539,[[],["result",4]]],[11,"into","","",539,[[]]],[11,"try_into","","",539,[[],["result",4]]],[11,"type_id","","",539,[[],["typeid",3]]],[11,"to_owned","","",539,[[]]],[11,"clone_into","","",539,[[]]],[11,"to_string","","",539,[[],["string",3]]],[11,"from","","",540,[[]]],[11,"borrow","","",540,[[]]],[11,"borrow_mut","","",540,[[]]],[11,"try_from","","",540,[[],["result",4]]],[11,"into","","",540,[[]]],[11,"try_into","","",540,[[],["result",4]]],[11,"type_id","","",540,[[],["typeid",3]]],[11,"to_owned","","",540,[[]]],[11,"clone_into","","",540,[[]]],[11,"call_once","std","",541,[[]]],[11,"call_once","","",541,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",545,[[]]],[11,"shr","std::num","",133,[[],["wrapping",3]]],[11,"shr","std","",547,[[]]],[11,"shr","","",548,[[]]],[11,"shr","std::num","",133,[[]]],[11,"shr","std","",543,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",552,[[]]],[11,"shr","std::num","",133,[[],["wrapping",3]]],[11,"shr","std","",544,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",543,[[]]],[11,"shr","std::num","",133,[[],["wrapping",3]]],[11,"shr","std","",548,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",551,[[]]],[11,"shr","std::num","",133,[[]]],[11,"shr","std","",548,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",547,[[]]],[11,"shr","std::num","",133,[[]]],[11,"shr","std","",542,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",552,[[]]],[11,"shr","std::num","",133,[[]]],[11,"shr","std","",545,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",550,[[]]],[11,"shr","std::num","",133,[[],["wrapping",3]]],[11,"shr","std","",543,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",542,[[]]],[11,"shr","std::num","",133,[[],["wrapping",3]]],[11,"shr","std","",549,[[]]],[11,"shr","","",546,[[]]],[11,"shr","std::num","",133,[[]]],[11,"shr","std","",548,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",550,[[]]],[11,"shr","std::num","",133,[[],["wrapping",3]]],[11,"shr","std","",550,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",543,[[]]],[11,"shr","std::num","",133,[[],["wrapping",3]]],[11,"shr","std","",548,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",553,[[]]],[11,"shr","std::num","",133,[[]]],[11,"shr","std","",544,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",547,[[]]],[11,"shr","std::num","",133,[[]]],[11,"shr","std","",544,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",550,[[]]],[11,"shr","std::num","",133,[[],["wrapping",3]]],[11,"shr","std","",550,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",548,[[]]],[11,"shr","std::num","",133,[[],["wrapping",3]]],[11,"shr","std","",542,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",548,[[]]],[11,"shr","std::num","",133,[[],["wrapping",3]]],[11,"shr","std","",547,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",549,[[]]],[11,"shr","std::num","",133,[[],["wrapping",3]]],[11,"shr","std","",548,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",547,[[]]],[11,"shr","std::num","",133,[[]]],[11,"shr","std","",546,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",549,[[]]],[11,"shr","std::num","",133,[[],["wrapping",3]]],[11,"shr","std","",551,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",547,[[]]],[11,"shr","std::num","",133,[[]]],[11,"shr","std","",542,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",551,[[]]],[11,"shr","std::num","",133,[[]]],[11,"shr","std","",548,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",545,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",552,[[]]],[11,"shr","std::num","",133,[[]]],[11,"shr","std","",550,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",552,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",548,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",551,[[]]],[11,"shr","std::num","",133,[[]]],[11,"shr","std","",553,[[]]],[11,"shr","","",549,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",550,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",542,[[]]],[11,"shr","","",553,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",551,[[]]],[11,"shr","","",546,[[]]],[11,"shr","","",543,[[]]],[11,"shr","","",547,[[]]],[11,"shr","","",544,[[]]],[11,"shr","","",551,[[]]],[11,"mul","","",545,[[]]],[11,"mul","","",553,[[]]],[11,"mul","","",545,[[]]],[11,"mul","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"mul","std","",553,[[]]],[11,"mul","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"mul","std","",554,[[]]],[11,"mul","","",547,[[]]],[11,"mul","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"mul","std","",543,[[]]],[11,"mul","std::num","",133,[[["wrapping",3]]]],[11,"mul","","",133,[[["wrapping",3]]]],[11,"mul","std","",543,[[]]],[11,"mul","","",544,[[]]],[11,"mul","std::num","",133,[[["wrapping",3]]]],[11,"mul","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"mul","std","",551,[[]]],[11,"mul","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"mul","std","",552,[[]]],[11,"mul","","",545,[[]]],[11,"mul","","",555,[[]]],[11,"mul","std::num","",133,[[["wrapping",3]]]],[11,"mul","std","",551,[[]]],[11,"mul","std::num","",133,[[["wrapping",3]]]],[11,"mul","std","",552,[[]]],[11,"mul","std::num","",133,[[["wrapping",3]]]],[11,"mul","std","",553,[[]]],[11,"mul","","",544,[[]]],[11,"mul","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"mul","std","",554,[[]]],[11,"mul","","",551,[[]]],[11,"mul","","",548,[[]]],[11,"mul","","",546,[[]]],[11,"mul","","",549,[[]]],[11,"mul","","",548,[[]]],[11,"mul","","",554,[[]]],[11,"mul","","",542,[[]]],[11,"mul","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"mul","std","",547,[[]]],[11,"mul","std::num","",133,[[["wrapping",3]]]],[11,"mul","std","",545,[[]]],[11,"mul","","",551,[[]]],[11,"mul","std::time","",527,[[],["duration",3]]],[11,"mul","std","",544,[[]]],[11,"mul","","",555,[[]]],[11,"mul","","",550,[[]]],[11,"mul","std::num","",133,[[["wrapping",3]]]],[11,"mul","std","",554,[[]]],[11,"mul","","",544,[[]]],[11,"mul","std::num","",133,[[["wrapping",3]]]],[11,"mul","std","",550,[[]]],[11,"mul","","",542,[[]]],[11,"mul","","",547,[[]]],[11,"mul","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"mul","std","",549,[[]]],[11,"mul","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"mul","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"mul","std","",543,[[]]],[11,"mul","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"mul","std","",543,[[]]],[11,"mul","","",555,[[]]],[11,"mul","","",550,[[]]],[11,"mul","","",547,[[]]],[11,"mul","","",546,[[]]],[11,"mul","","",548,[[]]],[11,"mul","","",552,[[]]],[11,"mul","","",553,[[]]],[11,"mul","","",552,[[]]],[11,"mul","","",549,[[]]],[11,"mul","","",549,[[]]],[11,"mul","","",542,[[]]],[11,"mul","","",555,[[]]],[11,"mul","","",547,[[["duration",3]],["duration",3]]],[11,"mul","","",546,[[]]],[11,"mul","std::num","",133,[[["wrapping",3]]]],[11,"mul","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"mul","std","",546,[[]]],[11,"mul","std::num","",133,[[["wrapping",3]]]],[11,"mul","std","",548,[[]]],[11,"mul","std::num","",133,[[["wrapping",3]]]],[11,"mul","std","",542,[[]]],[11,"mul","","",550,[[]]],[11,"from_iter","std::result","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …",95,[[],["result",4]]],[11,"from_iter","std","",556,[[]]],[11,"from_iter","std::option","Takes each element in the [<code>Iterator</code>]: if it is [<code>None</code>][…",93,[[],["option",4]]],[11,"fmt","std","",545,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",480,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",552,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",551,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",550,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",479,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",542,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",541,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",471,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",472,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",474,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",482,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",476,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",477,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",133,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",549,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",541,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",543,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",473,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",546,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",475,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",547,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",544,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",481,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",553,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",548,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",478,[[["formatter",3]],[["result",4],["error",3]]]],[11,"next","std::slice","",240,[[],["option",4]]],[11,"size_hint","","",240,[[]]],[11,"next","std::iter","",304,[[],["option",4]]],[11,"size_hint","","",304,[[]]],[11,"next","std::slice","",231,[[],["option",4]]],[11,"size_hint","","",231,[[]]],[11,"count","","",231,[[]]],[11,"nth","","",231,[[],["option",4]]],[11,"last","","",231,[[],["option",4]]],[11,"next","std::iter","",310,[[],["option",4]]],[11,"size_hint","","",310,[[]]],[11,"next","","",307,[[],["option",4]]],[11,"size_hint","","",307,[[]]],[11,"next","","",319,[[],["option",4]]],[11,"size_hint","","",319,[[]]],[11,"count","","",319,[[]]],[11,"try_fold","","",319,[[]]],[11,"fold","","",319,[[]]],[11,"next","std::str","",252,[[],["option",4]]],[11,"size_hint","","",252,[[]]],[11,"last","","",252,[[],["option",4]]],[11,"next","std::slice","",230,[[],["option",4]]],[11,"size_hint","","",230,[[]]],[11,"count","","",230,[[]]],[11,"nth","","",230,[[],["option",4]]],[11,"last","","",230,[[],["option",4]]],[11,"next","std::str","",263,[[],["option",4]]],[11,"next","std::slice","",228,[[],["option",4]]],[11,"size_hint","","",228,[[]]],[11,"count","","",228,[[]]],[11,"nth","","",228,[[],["option",4]]],[11,"last","","",228,[[],["option",4]]],[11,"next","std::iter","",315,[[],["option",4]]],[11,"size_hint","","",315,[[]]],[11,"nth","","",315,[[],["option",4]]],[11,"try_fold","","",315,[[]]],[11,"fold","","",315,[[]]],[11,"next","std::result","",346,[[],["option",4]]],[11,"size_hint","","",346,[[]]],[11,"next","std::slice","",244,[[],["option",4]]],[11,"size_hint","","",244,[[]]],[11,"next","","",226,[[],["option",4]]],[11,"size_hint","","",226,[[]]],[11,"count","","",226,[[]]],[11,"nth","","",226,[[],["option",4]]],[11,"last","","",226,[[],["option",4]]],[11,"next","std::str","",255,[[],["option",4]]],[11,"count","","",255,[[]]],[11,"size_hint","","",255,[[]]],[11,"last","","",255,[[],["option",4]]],[11,"next","std::slice","",232,[[],["option",4]]],[11,"size_hint","","",232,[[]]],[11,"next","std::str","",251,[[],["option",4]]],[11,"size_hint","","",251,[[]]],[11,"last","","",251,[[],["option",4]]],[11,"next","std::slice","",239,[[],["option",4]]],[11,"size_hint","","",239,[[]]],[11,"count","","",239,[[]]],[11,"nth","","",239,[[],["option",4]]],[11,"last","","",239,[[],["option",4]]],[11,"next","std::str","",254,[[],["option",4]]],[11,"count","","",254,[[]]],[11,"size_hint","","",254,[[]]],[11,"last","","",254,[[],["option",4]]],[11,"next","std::iter","",332,[[],["option",4]]],[11,"size_hint","","",332,[[]]],[11,"nth","","",332,[[],["option",4]]],[11,"__iterator_get_unchecked","","",332,[[]]],[11,"next","","",309,[[],["option",4]]],[11,"size_hint","","",309,[[]]],[11,"next","std::ops","",84,[[],["option",4]]],[11,"size_hint","","",84,[[]]],[11,"nth","","",84,[[],["option",4]]],[11,"next","std::iter","",308,[[],["option",4]]],[11,"size_hint","","",308,[[]]],[11,"next","std::slice","",241,[[],["option",4]]],[11,"size_hint","","",241,[[]]],[11,"next","std::str","",264,[[],["option",4]]],[11,"next","","",257,[[],["option",4]]],[11,"size_hint","","",257,[[]]],[11,"try_fold","","",257,[[]]],[11,"fold","","",257,[[]]],[11,"next","std::ascii","",351,[[],["option",4]]],[11,"size_hint","","",351,[[]]],[11,"last","","",351,[[],["option",4]]],[11,"next","std::iter","",311,[[],["option",4]]],[11,"size_hint","","",311,[[]]],[11,"try_fold","","",311,[[]]],[11,"fold","","",311,[[]]],[11,"__iterator_get_unchecked","","",311,[[]]],[11,"next","","",321,[[],["option",4]]],[11,"size_hint","","",321,[[]]],[11,"try_fold","","",321,[[]]],[11,"fold","","",321,[[]]],[11,"next","std","",541,[[],["option",4]]],[11,"size_hint","","",541,[[]]],[11,"advance_by","","",541,[[],["result",4]]],[11,"nth","","",541,[[],["option",4]]],[11,"next","std::iter","",320,[[],["option",4]]],[11,"size_hint","","",320,[[]]],[11,"try_fold","","",320,[[]]],[11,"fold","","",320,[[]]],[11,"next","std::str","",262,[[],["option",4]]],[11,"size_hint","","",262,[[]]],[11,"next","std::slice","",225,[[],["option",4]]],[11,"size_hint","","",225,[[]]],[11,"count","","",225,[[]]],[11,"nth","","",225,[[],["option",4]]],[11,"last","","",225,[[],["option",4]]],[11,"__iterator_get_unchecked","","",225,[[]]],[11,"next","std::str","",269,[[],["option",4]]],[11,"next","std::iter","",325,[[],["option",4]]],[11,"count","","",325,[[]]],[11,"nth","","",325,[[],["option",4]]],[11,"last","","",325,[[],["option",4]]],[11,"size_hint","","",325,[[]]],[11,"try_fold","","",325,[[]]],[11,"fold","","",325,[[]]],[11,"next","std::char","",294,[[],["option",4]]],[11,"size_hint","","",294,[[]]],[11,"next","std::slice","",229,[[],["option",4]]],[11,"size_hint","","",229,[[]]],[11,"count","","",229,[[]]],[11,"nth","","",229,[[],["option",4]]],[11,"last","","",229,[[],["option",4]]],[11,"next","std::iter","",327,[[],["option",4]]],[11,"size_hint","","",327,[[]]],[11,"try_fold","","",327,[[]]],[11,"fold","","",327,[[]]],[11,"next","std::str","",270,[[],["option",4]]],[11,"next","std::result","",348,[[],["option",4]]],[11,"size_hint","","",348,[[]]],[11,"next","std::char","",299,[[],[["option",4],["result",4]]]],[11,"size_hint","","",299,[[]]],[11,"next","std::slice","",235,[[],["option",4]]],[11,"size_hint","","",235,[[]]],[11,"count","","",235,[[]]],[11,"nth","","",235,[[],["option",4]]],[11,"last","","",235,[[],["option",4]]],[11,"for_each","","",235,[[]]],[11,"all","","",235,[[]]],[11,"any","","",235,[[]]],[11,"find","","",235,[[],["option",4]]],[11,"find_map","","",235,[[],["option",4]]],[11,"position","","",235,[[],["option",4]]],[11,"rposition","","",235,[[],["option",4]]],[11,"next","std::str","",259,[[],["option",4]]],[11,"size_hint","","",259,[[]]],[11,"try_fold","","",259,[[]]],[11,"fold","","",259,[[]]],[11,"next","std::iter","",326,[[],["option",4]]],[11,"size_hint","","",326,[[]]],[11,"advance_by","","",326,[[],["result",4]]],[11,"nth","","",326,[[],["option",4]]],[11,"try_fold","","",326,[[]]],[11,"fold","","",326,[[]]],[11,"find","","",326,[[],["option",4]]],[11,"next","std::slice","",234,[[],["option",4]]],[11,"size_hint","","",234,[[]]],[11,"count","","",234,[[]]],[11,"nth","","",234,[[],["option",4]]],[11,"last","","",234,[[],["option",4]]],[11,"for_each","","",234,[[]]],[11,"all","","",234,[[]]],[11,"any","","",234,[[]]],[11,"find","","",234,[[],["option",4]]],[11,"find_map","","",234,[[],["option",4]]],[11,"position","","",234,[[],["option",4]]],[11,"rposition","","",234,[[],["option",4]]],[11,"is_sorted_by","","",234,[[]]],[11,"next","std::iter","",329,[[],["option",4]]],[11,"size_hint","","",329,[[]]],[11,"try_fold","","",329,[[]]],[11,"fold","","",329,[[]]],[11,"next","std::str","",267,[[],["option",4]]],[11,"next","std::slice","",236,[[],["option",4]]],[11,"size_hint","","",236,[[]]],[11,"count","","",236,[[]]],[11,"nth","","",236,[[],["option",4]]],[11,"last","","",236,[[],["option",4]]],[11,"next","std::option","",340,[[],["option",4]]],[11,"size_hint","","",340,[[]]],[11,"next","std::array","",284,[[],["option",4]]],[11,"size_hint","","",284,[[]]],[11,"count","","",284,[[]]],[11,"last","","",284,[[],["option",4]]],[11,"next","std::iter","",324,[[],["option",4]]],[11,"size_hint","","",324,[[]]],[11,"try_fold","","",324,[[]]],[11,"fold","","",324,[[]]],[11,"__iterator_get_unchecked","","",324,[[]]],[11,"next","std::option","",342,[[],["option",4]]],[11,"size_hint","","",342,[[]]],[11,"next","std::str","",250,[[],["option",4]]],[11,"size_hint","","",250,[[]]],[11,"next","std::ops","",83,[[],["option",4]]],[11,"size_hint","","",83,[[]]],[11,"nth","","",83,[[],["option",4]]],[11,"last","","",83,[[],["option",4]]],[11,"min","","",83,[[],["option",4]]],[11,"max","","",83,[[],["option",4]]],[11,"next","std::char","",292,[[],["option",4]]],[11,"size_hint","","",292,[[]]],[11,"count","","",292,[[]]],[11,"last","","",292,[[],["option",4]]],[11,"next","std::iter","",323,[[],["option",4]]],[11,"size_hint","","",323,[[]]],[11,"try_fold","","",323,[[]]],[11,"fold","","",323,[[]]],[11,"next","std::char","",295,[[],["option",4]]],[11,"size_hint","","",295,[[]]],[11,"next","std::str","",266,[[],["option",4]]],[11,"next","","",265,[[],["option",4]]],[11,"next","std::iter","",305,[[],["option",4]]],[11,"next","std::str","",258,[[],["option",4]]],[11,"size_hint","","",258,[[]]],[11,"try_fold","","",258,[[]]],[11,"fold","","",258,[[]]],[11,"next","std::iter","",322,[[],["option",4]]],[11,"nth","","",322,[[],["option",4]]],[11,"last","","",322,[[],["option",4]]],[11,"count","","",322,[[]]],[11,"size_hint","","",322,[[]]],[11,"try_fold","","",322,[[]]],[11,"fold","","",322,[[]]],[11,"find","","",322,[[],["option",4]]],[11,"__iterator_get_unchecked","","",322,[[]]],[11,"next","std::str","",268,[[],["option",4]]],[11,"next","","",253,[[],["option",4]]],[11,"size_hint","","",253,[[]]],[11,"count","","",253,[[]]],[11,"last","","",253,[[],["option",4]]],[11,"nth","","",253,[[],["option",4]]],[11,"all","","",253,[[]]],[11,"any","","",253,[[]]],[11,"find","","",253,[[],["option",4]]],[11,"position","","",253,[[],["option",4]]],[11,"rposition","","",253,[[],["option",4]]],[11,"__iterator_get_unchecked","","",253,[[]]],[11,"next","std::result","",347,[[],["option",4]]],[11,"size_hint","","",347,[[]]],[11,"next","std::iter","",314,[[],["option",4]]],[11,"size_hint","","",314,[[]]],[11,"try_fold","","",314,[[]]],[11,"fold","","",314,[[]]],[11,"next","std::option","",341,[[],["option",4]]],[11,"size_hint","","",341,[[]]],[11,"next","std::iter","",312,[[],["option",4]]],[11,"size_hint","","",312,[[]]],[11,"try_fold","","",312,[[]]],[11,"fold","","",312,[[]]],[11,"nth","","",312,[[],["option",4]]],[11,"last","","",312,[[],["option",4]]],[11,"count","","",312,[[]]],[11,"__iterator_get_unchecked","","",312,[[]]],[11,"next","std::slice","",238,[[],["option",4]]],[11,"size_hint","","",238,[[]]],[11,"count","","",238,[[]]],[11,"nth","","",238,[[],["option",4]]],[11,"last","","",238,[[],["option",4]]],[11,"next","","",242,[[],["option",4]]],[11,"size_hint","","",242,[[]]],[11,"next","std::iter","",331,[[],["option",4]]],[11,"size_hint","","",331,[[]]],[11,"try_fold","","",331,[[]]],[11,"fold","","",331,[[]]],[11,"next","std::slice","",237,[[],["option",4]]],[11,"size_hint","","",237,[[]]],[11,"count","","",237,[[]]],[11,"nth","","",237,[[],["option",4]]],[11,"last","","",237,[[],["option",4]]],[11,"next","std::str","",271,[[],["option",4]]],[11,"next","","",272,[[],["option",4]]],[11,"next","std::slice","",224,[[],["option",4]]],[11,"size_hint","","",224,[[]]],[11,"count","","",224,[[]]],[11,"nth","","",224,[[],["option",4]]],[11,"last","","",224,[[],["option",4]]],[11,"__iterator_get_unchecked","","",224,[[]]],[11,"next","","",243,[[],["option",4]]],[11,"size_hint","","",243,[[]]],[11,"next","std::iter","",330,[[],["option",4]]],[11,"nth","","",330,[[],["option",4]]],[11,"size_hint","","",330,[[]]],[11,"try_fold","","",330,[[]]],[11,"fold","","",330,[[]]],[11,"next","","",306,[[],["option",4]]],[11,"size_hint","","",306,[[]]],[11,"next","std::slice","",227,[[],["option",4]]],[11,"size_hint","","",227,[[]]],[11,"count","","",227,[[]]],[11,"nth","","",227,[[],["option",4]]],[11,"last","","",227,[[],["option",4]]],[11,"next","std::char","",293,[[],["option",4]]],[11,"size_hint","","",293,[[]]],[11,"count","","",293,[[]]],[11,"nth","","",293,[[],["option",4]]],[11,"last","","",293,[[],["option",4]]],[11,"next","std::ops","",339,[[],["option",4]]],[11,"size_hint","","",339,[[]]],[11,"nth","","",339,[[],["option",4]]],[11,"try_fold","","",339,[[]]],[11,"fold","","",339,[[]]],[11,"last","","",339,[[],["option",4]]],[11,"min","","",339,[[],["option",4]]],[11,"max","","",339,[[],["option",4]]],[11,"next","std::iter","Overflow BehaviorThe method does no guarding against …",318,[[],["option",4]]],[11,"size_hint","","",318,[[]]],[11,"nth","","",318,[[],["option",4]]],[11,"count","","",318,[[]]],[11,"try_fold","","",318,[[]]],[11,"fold","","",318,[[]]],[11,"__iterator_get_unchecked","","",318,[[]]],[11,"next","std::char","",296,[[],["option",4]]],[11,"size_hint","","",296,[[]]],[11,"next","std::slice","",245,[[],["option",4]]],[11,"size_hint","","",245,[[]]],[11,"next","std::iter","",328,[[],["option",4]]],[11,"nth","","",328,[[],["option",4]]],[11,"count","","",328,[[]]],[11,"last","","",328,[[],["option",4]]],[11,"size_hint","","",328,[[]]],[11,"try_fold","","",328,[[]]],[11,"fold","","",328,[[]]],[11,"next","std::str","",261,[[],["option",4]]],[11,"size_hint","","",261,[[]]],[11,"last","","",261,[[],["option",4]]],[11,"next","std::slice","",233,[[],["option",4]]],[11,"size_hint","","",233,[[]]],[11,"next","std::iter","",313,[[],["option",4]]],[11,"size_hint","","",313,[[]]],[11,"try_fold","","",313,[[]]],[11,"fold","","",313,[[]]],[11,"next","","",316,[[],["option",4]]],[11,"count","","",316,[[]]],[11,"try_fold","","",316,[[]]],[11,"fold","","",316,[[]]],[11,"advance_by","","",316,[[],["result",4]]],[11,"nth","","",316,[[],["option",4]]],[11,"find","","",316,[[],["option",4]]],[11,"last","","",316,[[],["option",4]]],[11,"size_hint","","",316,[[]]],[11,"next","","",317,[[],["option",4]]],[11,"size_hint","","",317,[[]]],[11,"try_fold","","",317,[[]]],[11,"next_back","std::str::pattern","",246,[[],["searchstep",4]]],[11,"next_match_back","","",246,[[],["option",4]]],[11,"next_back","","",249,[[],["searchstep",4]]],[11,"next_match_back","","",249,[[],["option",4]]],[11,"next_back","","",247,[[],["searchstep",4]]],[11,"next_match_back","","",247,[[],["option",4]]],[11,"next_reject_back","","",247,[[],["option",4]]],[11,"next_back","","",248,[[],["searchstep",4]]],[11,"next_match_back","","",248,[[],["option",4]]],[11,"next_reject_back","","",248,[[],["option",4]]],[11,"sub","std::num","",133,[[["wrapping",3]]]],[11,"sub","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"sub","std","",551,[[]]],[11,"sub","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"sub","std","",542,[[]]],[11,"sub","","",542,[[]]],[11,"sub","","",554,[[]]],[11,"sub","","",548,[[]]],[11,"sub","","",543,[[]]],[11,"sub","","",546,[[]]],[11,"sub","std::num","",133,[[["wrapping",3]]]],[11,"sub","std","",542,[[]]],[11,"sub","std::num","",133,[[["wrapping",3]]]],[11,"sub","std","",543,[[]]],[11,"sub","","",552,[[]]],[11,"sub","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"sub","std","",544,[[]]],[11,"sub","","",547,[[]]],[11,"sub","","",544,[[]]],[11,"sub","","",548,[[]]],[11,"sub","","",542,[[]]],[11,"sub","","",550,[[]]],[11,"sub","","",555,[[]]],[11,"sub","std::num","",133,[[["wrapping",3]]]],[11,"sub","std","",551,[[]]],[11,"sub","","",551,[[]]],[11,"sub","","",550,[[]]],[11,"sub","","",551,[[]]],[11,"sub","","",553,[[]]],[11,"sub","","",555,[[]]],[11,"sub","","",548,[[]]],[11,"sub","","",552,[[]]],[11,"sub","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"sub","","",133,[[["wrapping",3]]]],[11,"sub","std::time","",527,[[["duration",3]],["duration",3]]],[11,"sub","std","",546,[[]]],[11,"sub","","",549,[[]]],[11,"sub","","",546,[[]]],[11,"sub","","",546,[[]]],[11,"sub","","",552,[[]]],[11,"sub","std::num","",133,[[["wrapping",3]]]],[11,"sub","std","",545,[[]]],[11,"sub","std::num","",133,[[["wrapping",3]]]],[11,"sub","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"sub","std","",553,[[]]],[11,"sub","","",543,[[]]],[11,"sub","","",549,[[]]],[11,"sub","std::num","",133,[[["wrapping",3]]]],[11,"sub","","",133,[[["wrapping",3]]]],[11,"sub","std","",544,[[]]],[11,"sub","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"sub","std","",549,[[]]],[11,"sub","std::num","",133,[[["wrapping",3]]]],[11,"sub","std","",544,[[]]],[11,"sub","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"sub","std","",545,[[]]],[11,"sub","std::num","",133,[[["wrapping",3]]]],[11,"sub","std","",550,[[]]],[11,"sub","std::num","",133,[[["wrapping",3]]]],[11,"sub","std","",555,[[]]],[11,"sub","","",548,[[]]],[11,"sub","","",553,[[]]],[11,"sub","","",552,[[]]],[11,"sub","","",547,[[]]],[11,"sub","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"sub","std","",545,[[]]],[11,"sub","","",554,[[]]],[11,"sub","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"sub","std","",550,[[]]],[11,"sub","","",547,[[]]],[11,"sub","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"sub","std","",547,[[]]],[11,"sub","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"sub","std","",555,[[]]],[11,"sub","","",554,[[]]],[11,"sub","","",554,[[]]],[11,"sub","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"sub","std","",543,[[]]],[11,"sub","","",549,[[]]],[11,"sub","","",545,[[]]],[11,"sub","","",553,[[]]],[11,"as_mut","","",557,[[]]],[11,"as_mut","","",558,[[]]],[11,"as_mut","","",541,[[]]],[11,"bitxor_assign","","",559,[[]]],[11,"bitxor_assign","","",551,[[]]],[11,"bitxor_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitxor_assign","std","",542,[[]]],[11,"bitxor_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitxor_assign","std","",544,[[]]],[11,"bitxor_assign","","",545,[[]]],[11,"bitxor_assign","","",545,[[]]],[11,"bitxor_assign","","",549,[[]]],[11,"bitxor_assign","","",543,[[]]],[11,"bitxor_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitxor_assign","","",133,[[["wrapping",3]]]],[11,"bitxor_assign","","",133,[[["wrapping",3]]]],[11,"bitxor_assign","","",133,[[["wrapping",3]]]],[11,"bitxor_assign","","",133,[[["wrapping",3]]]],[11,"bitxor_assign","std","",549,[[]]],[11,"bitxor_assign","","",551,[[]]],[11,"bitxor_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitxor_assign","","",133,[[["wrapping",3]]]],[11,"bitxor_assign","std","",547,[[]]],[11,"bitxor_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitxor_assign","std","",553,[[]]],[11,"bitxor_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitxor_assign","std","",546,[[]]],[11,"bitxor_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitxor_assign","","",133,[[["wrapping",3]]]],[11,"bitxor_assign","","",133,[[["wrapping",3]]]],[11,"bitxor_assign","","",133,[[["wrapping",3]]]],[11,"bitxor_assign","std","",542,[[]]],[11,"bitxor_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitxor_assign","std","",548,[[]]],[11,"bitxor_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitxor_assign","std","",559,[[]]],[11,"bitxor_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitxor_assign","std","",547,[[]]],[11,"bitxor_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitxor_assign","std","",550,[[]]],[11,"bitxor_assign","","",546,[[]]],[11,"bitxor_assign","","",548,[[]]],[11,"bitxor_assign","","",550,[[]]],[11,"bitxor_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitxor_assign","std","",553,[[]]],[11,"bitxor_assign","","",552,[[]]],[11,"bitxor_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitxor_assign","std","",544,[[]]],[11,"bitxor_assign","","",552,[[]]],[11,"bitxor_assign","","",543,[[]]],[11,"bitxor_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitxor_assign","","",133,[[["wrapping",3]]]],[11,"bitxor_assign","","",133,[[["wrapping",3]]]],[11,"get","std::ops","",339,[[],["option",4]]],[11,"get_mut","","",339,[[],["option",4]]],[11,"get_unchecked","","",339,[[]]],[11,"get_unchecked_mut","","",339,[[]]],[11,"index","","",339,[[]]],[11,"index_mut","","",339,[[]]],[11,"get","","",83,[[],["option",4]]],[11,"get_mut","","",83,[[],["option",4]]],[11,"get_unchecked","","",83,[[]]],[11,"get_unchecked_mut","","",83,[[]]],[11,"index","","",83,[[]]],[11,"index_mut","","",83,[[]]],[11,"get","","",338,[[],["option",4]]],[11,"get_mut","","",338,[[],["option",4]]],[11,"get_unchecked","","",338,[[]]],[11,"get_unchecked_mut","","",338,[[]]],[11,"index","","",338,[[]]],[11,"index_mut","","",338,[[]]],[11,"get","","",88,[[],["option",4]]],[11,"get_mut","","",88,[[],["option",4]]],[11,"get_unchecked","","",88,[[]]],[11,"get_unchecked_mut","","",88,[[]]],[11,"index","","",88,[[]]],[11,"index_mut","","",88,[[]]],[11,"get","","",83,[[],["option",4]]],[11,"get_mut","","",83,[[],["option",4]]],[11,"get_unchecked","","",83,[[]]],[11,"get_unchecked_mut","","",83,[[]]],[11,"index","","",83,[[]]],[11,"index_mut","","",83,[[]]],[11,"get","","",84,[[],["option",4]]],[11,"get_mut","","",84,[[],["option",4]]],[11,"get_unchecked","","",84,[[]]],[11,"get_unchecked_mut","","",84,[[]]],[11,"index","","",84,[[]]],[11,"index_mut","","",84,[[]]],[11,"get","","",85,[[],["option",4]]],[11,"get_mut","","",85,[[],["option",4]]],[11,"get_unchecked","","",85,[[]]],[11,"get_unchecked_mut","","",85,[[]]],[11,"index","","",85,[[]]],[11,"index_mut","","",85,[[]]],[11,"get","","",88,[[],["option",4]]],[11,"get_mut","","",88,[[],["option",4]]],[11,"get_unchecked","","",88,[[]]],[11,"get_unchecked_mut","","",88,[[]]],[11,"index","","",88,[[]]],[11,"index_mut","","",88,[[]]],[11,"get","","",339,[[],["option",4]]],[11,"get_mut","","",339,[[],["option",4]]],[11,"get_unchecked","","",339,[[]]],[11,"get_unchecked_mut","","",339,[[]]],[11,"index","","",339,[[]]],[11,"index_mut","","",339,[[]]],[11,"get","","",338,[[],["option",4]]],[11,"get_mut","","",338,[[],["option",4]]],[11,"get_unchecked","","",338,[[]]],[11,"get_unchecked_mut","","",338,[[]]],[11,"index","","",338,[[]]],[11,"index_mut","","",338,[[]]],[11,"get","std","",545,[[],["option",4]]],[11,"get_mut","","",545,[[],["option",4]]],[11,"get_unchecked","","",545,[[]]],[11,"get_unchecked_mut","","",545,[[]]],[11,"index","","",545,[[]]],[11,"index_mut","","",545,[[]]],[11,"get","std::ops","",85,[[],["option",4]]],[11,"get_mut","","",85,[[],["option",4]]],[11,"get_unchecked","","",85,[[]]],[11,"get_unchecked_mut","","",85,[[]]],[11,"index","","",85,[[]]],[11,"index_mut","","",85,[[]]],[11,"get","","",84,[[],["option",4]]],[11,"get_mut","","",84,[[],["option",4]]],[11,"get_unchecked","","",84,[[]]],[11,"get_unchecked_mut","","",84,[[]]],[11,"index","","",84,[[]]],[11,"index_mut","","",84,[[]]],[11,"add","std","",545,[[]]],[11,"add","","",544,[[]]],[11,"add","","",553,[[]]],[11,"add","","",549,[[]]],[11,"add","","",552,[[]]],[11,"add","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"add","std","",549,[[]]],[11,"add","std::time","",527,[[["duration",3]],["duration",3]]],[11,"add","std","",551,[[]]],[11,"add","std::num","",133,[[["wrapping",3]]]],[11,"add","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"add","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"add","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"add","std","",544,[[]]],[11,"add","","",555,[[]]],[11,"add","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"add","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"add","","",133,[[["wrapping",3]]]],[11,"add","std","",555,[[]]],[11,"add","std::num","",133,[[["wrapping",3]]]],[11,"add","","",133,[[["wrapping",3]]]],[11,"add","std","",554,[[]]],[11,"add","","",553,[[]]],[11,"add","","",549,[[]]],[11,"add","","",543,[[]]],[11,"add","","",551,[[]]],[11,"add","std::num","",133,[[["wrapping",3]]]],[11,"add","std","",542,[[]]],[11,"add","","",548,[[]]],[11,"add","","",553,[[]]],[11,"add","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"add","std","",555,[[]]],[11,"add","","",552,[[]]],[11,"add","","",546,[[]]],[11,"add","std::num","",133,[[["wrapping",3]]]],[11,"add","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"add","","",133,[[["wrapping",3]]]],[11,"add","std","",555,[[]]],[11,"add","std::num","",133,[[["wrapping",3]]]],[11,"add","std","",547,[[]]],[11,"add","","",546,[[]]],[11,"add","","",554,[[]]],[11,"add","","",544,[[]]],[11,"add","","",550,[[]]],[11,"add","","",550,[[]]],[11,"add","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"add","std","",548,[[]]],[11,"add","std::num","",133,[[["wrapping",3]]]],[11,"add","std","",543,[[]]],[11,"add","","",548,[[]]],[11,"add","","",552,[[]]],[11,"add","","",549,[[]]],[11,"add","std::num","",133,[[["wrapping",3]]]],[11,"add","std","",553,[[]]],[11,"add","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"add","std","",551,[[]]],[11,"add","","",545,[[]]],[11,"add","","",548,[[]]],[11,"add","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"add","std","",554,[[]]],[11,"add","std::num","",133,[[["wrapping",3]]]],[11,"add","std","",550,[[]]],[11,"add","","",546,[[]]],[11,"add","","",542,[[]]],[11,"add","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"add","std","",544,[[]]],[11,"add","","",543,[[]]],[11,"add","","",545,[[]]],[11,"add","","",554,[[]]],[11,"add","","",547,[[]]],[11,"add","","",551,[[]]],[11,"add","","",552,[[]]],[11,"add","","",543,[[]]],[11,"add","std::num","",133,[[["wrapping",3]]]],[11,"add","std","",545,[[]]],[11,"add","","",547,[[]]],[11,"add","","",550,[[]]],[11,"add","","",546,[[]]],[11,"add","","",542,[[]]],[11,"add","","",547,[[]]],[11,"add","","",542,[[]]],[11,"div_assign","std::num","",133,[[["wrapping",3]]]],[11,"div_assign","","",133,[[["wrapping",3]]]],[11,"div_assign","std","",549,[[]]],[11,"div_assign","std::num","",133,[[["wrapping",3]]]],[11,"div_assign","std","",545,[[]]],[11,"div_assign","std::num","",133,[[["wrapping",3]]]],[11,"div_assign","","",133,[[["wrapping",3]]]],[11,"div_assign","","",133,[[["wrapping",3]]]],[11,"div_assign","std","",549,[[]]],[11,"div_assign","","",550,[[]]],[11,"div_assign","","",544,[[]]],[11,"div_assign","","",544,[[]]],[11,"div_assign","","",548,[[]]],[11,"div_assign","std::num","",133,[[["wrapping",3]]]],[11,"div_assign","std","",548,[[]]],[11,"div_assign","","",552,[[]]],[11,"div_assign","std::num","",133,[[["wrapping",3]]]],[11,"div_assign","std","",550,[[]]],[11,"div_assign","","",555,[[]]],[11,"div_assign","","",554,[[]]],[11,"div_assign","std::num","",133,[[["wrapping",3]]]],[11,"div_assign","std","",543,[[]]],[11,"div_assign","std::num","",133,[[["wrapping",3]]]],[11,"div_assign","","",133,[[["wrapping",3]]]],[11,"div_assign","","",133,[[["wrapping",3]]]],[11,"div_assign","","",133,[[["wrapping",3]]]],[11,"div_assign","std","",542,[[]]],[11,"div_assign","std::num","",133,[[["wrapping",3]]]],[11,"div_assign","","",133,[[["wrapping",3]]]],[11,"div_assign","","",133,[[["wrapping",3]]]],[11,"div_assign","std","",547,[[]]],[11,"div_assign","std::num","",133,[[["wrapping",3]]]],[11,"div_assign","","",133,[[["wrapping",3]]]],[11,"div_assign","","",133,[[["wrapping",3]]]],[11,"div_assign","std","",543,[[]]],[11,"div_assign","std::num","",133,[[["wrapping",3]]]],[11,"div_assign","std","",552,[[]]],[11,"div_assign","std::num","",133,[[["wrapping",3]]]],[11,"div_assign","std","",555,[[]]],[11,"div_assign","","",554,[[]]],[11,"div_assign","","",546,[[]]],[11,"div_assign","std::num","",133,[[["wrapping",3]]]],[11,"div_assign","std","",553,[[]]],[11,"div_assign","","",551,[[]]],[11,"div_assign","std::time","",527,[[]]],[11,"div_assign","std::num","",133,[[["wrapping",3]]]],[11,"div_assign","std","",551,[[]]],[11,"div_assign","","",547,[[]]],[11,"div_assign","std::num","",133,[[["wrapping",3]]]],[11,"div_assign","std","",546,[[]]],[11,"div_assign","","",545,[[]]],[11,"div_assign","","",542,[[]]],[11,"div_assign","","",553,[[]]],[11,"call_mut","","",541,[[]]],[11,"call_mut","","",541,[[]]],[11,"add_assign","","",550,[[]]],[11,"add_assign","std::num","",133,[[["wrapping",3]]]],[11,"add_assign","std","",547,[[]]],[11,"add_assign","","",549,[[]]],[11,"add_assign","","",545,[[]]],[11,"add_assign","std::num","",133,[[["wrapping",3]]]],[11,"add_assign","std","",552,[[]]],[11,"add_assign","std::num","",133,[[["wrapping",3]]]],[11,"add_assign","std","",548,[[]]],[11,"add_assign","","",553,[[]]],[11,"add_assign","","",550,[[]]],[11,"add_assign","","",546,[[]]],[11,"add_assign","std::num","",133,[[["wrapping",3]]]],[11,"add_assign","","",133,[[["wrapping",3]]]],[11,"add_assign","std","",543,[[]]],[11,"add_assign","std::num","",133,[[["wrapping",3]]]],[11,"add_assign","std","",547,[[]]],[11,"add_assign","","",548,[[]]],[11,"add_assign","","",554,[[]]],[11,"add_assign","","",551,[[]]],[11,"add_assign","std::num","",133,[[["wrapping",3]]]],[11,"add_assign","","",133,[[["wrapping",3]]]],[11,"add_assign","std","",555,[[]]],[11,"add_assign","std::num","",133,[[["wrapping",3]]]],[11,"add_assign","std","",551,[[]]],[11,"add_assign","std::num","",133,[[["wrapping",3]]]],[11,"add_assign","","",133,[[["wrapping",3]]]],[11,"add_assign","std","",553,[[]]],[11,"add_assign","std::time","",527,[[["duration",3]]]],[11,"add_assign","std","",554,[[]]],[11,"add_assign","","",544,[[]]],[11,"add_assign","std::num","",133,[[["wrapping",3]]]],[11,"add_assign","","",133,[[["wrapping",3]]]],[11,"add_assign","std","",543,[[]]],[11,"add_assign","","",542,[[]]],[11,"add_assign","","",549,[[]]],[11,"add_assign","std::num","",133,[[["wrapping",3]]]],[11,"add_assign","std","",545,[[]]],[11,"add_assign","","",555,[[]]],[11,"add_assign","","",546,[[]]],[11,"add_assign","std::num","",133,[[["wrapping",3]]]],[11,"add_assign","","",133,[[["wrapping",3]]]],[11,"add_assign","","",133,[[["wrapping",3]]]],[11,"add_assign","","",133,[[["wrapping",3]]]],[11,"add_assign","std","",542,[[]]],[11,"add_assign","std::num","",133,[[["wrapping",3]]]],[11,"add_assign","std","",544,[[]]],[11,"add_assign","","",552,[[]]],[11,"add_assign","std::num","",133,[[["wrapping",3]]]],[11,"add_assign","","",133,[[["wrapping",3]]]],[11,"add_assign","","",133,[[["wrapping",3]]]],[11,"add_assign","","",133,[[["wrapping",3]]]],[11,"add_assign","","",133,[[["wrapping",3]]]],[11,"index_mut","std","",560,[[]]],[11,"index_mut","","",558,[[]]],[11,"index_mut","","",557,[[]]],[11,"fmt","","",547,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",475,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",472,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",480,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",551,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",544,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",477,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",474,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",476,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",542,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",473,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",481,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",479,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",549,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",550,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",552,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",471,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",553,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",478,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",541,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",546,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",482,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",548,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",545,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",543,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",541,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",133,[[["formatter",3]],[["result",4],["error",3]]]],[11,"hash","","",475,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",562,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",560,[[]]],[11,"hash","std::num","",476,[[]]],[11,"hash","std","",541,[[]]],[11,"hash","","",562,[[]]],[11,"hash","std::ops","",86,[[]]],[11,"hash","std","",557,[[]]],[11,"hash","std::any","",282,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","std::ptr","",345,[[]]],[11,"hash","std::ops","",85,[[]]],[11,"hash","std","",562,[[]]],[11,"hash","","",552,[[]]],[11,"hash_slice","","",552,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","std::time","",527,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","std::mem","",336,[[]]],[11,"hash","std","",562,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","std::cmp","",28,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","","",549,[[]]],[11,"hash_slice","","",549,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",562,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","std::num","",479,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","std::ops","",83,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","std::num","",480,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",545,[[]]],[11,"hash_slice","","",545,[[]]],[11,"hash","","",542,[[]]],[11,"hash_slice","","",542,[[]]],[11,"hash","","",562,[[]]],[11,"hash","std::num","",474,[[]]],[11,"hash","std","",562,[[]]],[11,"hash","std::num","",478,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","","",562,[[]]],[11,"hash","std::marker","",333,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","","",541,[[]]],[11,"hash","std::num","",133,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","","",563,[[]]],[11,"hash","","",564,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","std::num","",481,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","std::option","",343,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","std::num","",473,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","std::ops","",91,[[]]],[11,"hash","std","",565,[[]]],[11,"hash","","",562,[[]]],[11,"hash","std::num","",477,[[]]],[11,"hash","std","",544,[[]]],[11,"hash_slice","","",544,[[]]],[11,"hash","std::task","",200,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","std::ops","",339,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","std::option","",93,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","std::convert","",301,[[]]],[11,"hash","std::num","",472,[[]]],[11,"hash","std","",543,[[]]],[11,"hash_slice","","",543,[[]]],[11,"hash","","",561,[[]]],[11,"hash","std::pin","",344,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",546,[[]]],[11,"hash_slice","","",546,[[]]],[11,"hash","","",561,[[]]],[11,"hash","std::cmp","",29,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",565,[[]]],[11,"hash","","",551,[[]]],[11,"hash_slice","","",551,[[]]],[11,"hash","","",562,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","std::marker","",334,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","","",558,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",556,[[]]],[11,"hash","","",550,[[]]],[11,"hash_slice","","",550,[[]]],[11,"hash","","",559,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",547,[[]]],[11,"hash_slice","","",547,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","std::num","",471,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","std::mem","",335,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","std::ops","",88,[[]]],[11,"hash","std::fmt","",214,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","std::sync::atomic","",186,[[]]],[11,"hash","std::ops","",84,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",548,[[]]],[11,"hash_slice","","",548,[[]]],[11,"hash","","",561,[[]]],[11,"hash","std::result","",95,[[]]],[11,"hash","std::panic","",488,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","std::ops","",338,[[]]],[11,"hash","std::num","",482,[[]]],[11,"hash","std","",561,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",562,[[]]],[11,"hash","","",561,[[]]],[11,"hash","","",562,[[]]],[11,"hash","","",553,[[]]],[11,"hash_slice","","",553,[[]]],[11,"hash","","",561,[[]]],[11,"forward_unchecked","","",551,[[]]],[11,"backward_unchecked","","",551,[[]]],[11,"forward","","",551,[[]]],[11,"backward","","",551,[[]]],[11,"steps_between","","",551,[[],["option",4]]],[11,"forward_checked","","",551,[[],["option",4]]],[11,"backward_checked","","",551,[[],["option",4]]],[11,"forward_unchecked","","",549,[[]]],[11,"backward_unchecked","","",549,[[]]],[11,"forward","","",549,[[]]],[11,"backward","","",549,[[]]],[11,"steps_between","","",549,[[],["option",4]]],[11,"forward_checked","","",549,[[],["option",4]]],[11,"backward_checked","","",549,[[],["option",4]]],[11,"forward_unchecked","","",544,[[]]],[11,"backward_unchecked","","",544,[[]]],[11,"forward","","",544,[[]]],[11,"backward","","",544,[[]]],[11,"steps_between","","",544,[[],["option",4]]],[11,"forward_checked","","",544,[[],["option",4]]],[11,"backward_checked","","",544,[[],["option",4]]],[11,"forward_unchecked","","",543,[[]]],[11,"backward_unchecked","","",543,[[]]],[11,"forward","","",543,[[]]],[11,"backward","","",543,[[]]],[11,"steps_between","","",543,[[],["option",4]]],[11,"forward_checked","","",543,[[],["option",4]]],[11,"backward_checked","","",543,[[],["option",4]]],[11,"forward_unchecked","","",545,[[]]],[11,"backward_unchecked","","",545,[[]]],[11,"forward","","",545,[[]]],[11,"backward","","",545,[[]]],[11,"steps_between","","",545,[[],["option",4]]],[11,"forward_checked","","",545,[[],["option",4]]],[11,"backward_checked","","",545,[[],["option",4]]],[11,"forward_unchecked","","",552,[[]]],[11,"backward_unchecked","","",552,[[]]],[11,"forward","","",552,[[]]],[11,"backward","","",552,[[]]],[11,"steps_between","","",552,[[],["option",4]]],[11,"forward_checked","","",552,[[],["option",4]]],[11,"backward_checked","","",552,[[],["option",4]]],[11,"forward_unchecked","","",553,[[]]],[11,"backward_unchecked","","",553,[[]]],[11,"forward","","",553,[[]]],[11,"backward","","",553,[[]]],[11,"steps_between","","",553,[[],["option",4]]],[11,"forward_checked","","",553,[[],["option",4]]],[11,"backward_checked","","",553,[[],["option",4]]],[11,"steps_between","","",564,[[],["option",4]]],[11,"forward_checked","","",564,[[],["option",4]]],[11,"backward_checked","","",564,[[],["option",4]]],[11,"forward_unchecked","","",564,[[]]],[11,"backward_unchecked","","",564,[[]]],[11,"forward_unchecked","","",546,[[]]],[11,"backward_unchecked","","",546,[[]]],[11,"forward","","",546,[[]]],[11,"backward","","",546,[[]]],[11,"steps_between","","",546,[[],["option",4]]],[11,"forward_checked","","",546,[[],["option",4]]],[11,"backward_checked","","",546,[[],["option",4]]],[11,"forward_unchecked","","",547,[[]]],[11,"backward_unchecked","","",547,[[]]],[11,"forward","","",547,[[]]],[11,"backward","","",547,[[]]],[11,"steps_between","","",547,[[],["option",4]]],[11,"forward_checked","","",547,[[],["option",4]]],[11,"backward_checked","","",547,[[],["option",4]]],[11,"forward_unchecked","","",548,[[]]],[11,"backward_unchecked","","",548,[[]]],[11,"forward","","",548,[[]]],[11,"backward","","",548,[[]]],[11,"steps_between","","",548,[[],["option",4]]],[11,"forward_checked","","",548,[[],["option",4]]],[11,"backward_checked","","",548,[[],["option",4]]],[11,"forward_unchecked","","",542,[[]]],[11,"backward_unchecked","","",542,[[]]],[11,"forward","","",542,[[]]],[11,"backward","","",542,[[]]],[11,"steps_between","","",542,[[],["option",4]]],[11,"forward_checked","","",542,[[],["option",4]]],[11,"backward_checked","","",542,[[],["option",4]]],[11,"forward_unchecked","","",550,[[]]],[11,"backward_unchecked","","",550,[[]]],[11,"forward","","",550,[[]]],[11,"backward","","",550,[[]]],[11,"steps_between","","",550,[[],["option",4]]],[11,"forward_checked","","",550,[[],["option",4]]],[11,"backward_checked","","",550,[[],["option",4]]],[11,"is_empty","std::slice","",237,[[]]],[11,"len","std::iter","",324,[[]]],[11,"is_empty","","",324,[[]]],[11,"len","","",322,[[]]],[11,"is_empty","","",322,[[]]],[11,"len","","",326,[[]]],[11,"is_empty","","",326,[[]]],[11,"len","","",318,[[]]],[11,"is_empty","","",318,[[]]],[11,"len","std::char","",293,[[]]],[11,"len","std::iter","",307,[[]]],[11,"is_empty","std::slice","",238,[[]]],[11,"len","","",234,[[]]],[11,"is_empty","","",234,[[]]],[11,"len","std::str","",253,[[]]],[11,"is_empty","","",253,[[]]],[11,"is_empty","std::slice","",230,[[]]],[11,"is_empty","","",225,[[]]],[11,"len","","",235,[[]]],[11,"is_empty","","",235,[[]]],[11,"len","std::iter","",312,[[]]],[11,"is_empty","","",312,[[]]],[11,"is_empty","std::slice","",224,[[]]],[11,"len","std::char","",292,[[]]],[11,"len","std::iter","",311,[[]]],[11,"is_empty","","",311,[[]]],[11,"len","","",306,[[]]],[11,"is_empty","std::slice","",226,[[]]],[11,"len","std","",541,[[]]],[11,"is_empty","","",541,[[]]],[11,"is_empty","std::slice","",229,[[]]],[11,"len","std::iter","",304,[[]]],[11,"len","","",323,[[]]],[11,"is_empty","","",323,[[]]],[11,"len","std::array","",284,[[]]],[11,"is_empty","","",284,[[]]],[11,"deref_mut","std::cell","",290,[[]]],[11,"deref_mut","std::pin","",344,[[]]],[11,"deref_mut","std::ffi","",430,[[],["valistimpl",3]]],[11,"deref_mut","std","",541,[[]]],[11,"deref_mut","std::mem","",336,[[]]],[11,"into_searcher","std","",560,[[],["strsearcher",3]]],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the …",560,[[]]],[11,"strip_prefix_of","","Removes the pattern from the front of haystack, if it …",560,[[],["option",4]]],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the …",560,[[]]],[11,"strip_suffix_of","","Removes the pattern from the back of haystack, if it …",560,[[],["option",4]]],[11,"into_searcher","","",564,[[]]],[11,"is_contained_in","","",564,[[]]],[11,"is_prefix_of","","",564,[[]]],[11,"strip_prefix_of","","",564,[[],["option",4]]],[11,"is_suffix_of","","",564,[[]]],[11,"strip_suffix_of","","",564,[[],["option",4]]],[11,"into_searcher","","",557,[[],["charslicesearcher",3]]],[11,"is_contained_in","","",557,[[]]],[11,"is_prefix_of","","",557,[[]]],[11,"strip_prefix_of","","",557,[[],["option",4]]],[11,"is_suffix_of","","",557,[[]]],[11,"strip_suffix_of","","",557,[[],["option",4]]],[11,"default","","",558,[[]]],[11,"default","","Returns the default value of <code>0</code>",553,[[]]],[11,"default","","",558,[[]]],[11,"default","","",558,[[]]],[11,"default","","Creates an empty mutable str",560,[[]]],[11,"default","std::time","",527,[[],["duration",3]]],[11,"default","std::lazy","",528,[[],["oncecell",3]]],[11,"default","std","Returns the default value of <code>0</code>",546,[[]]],[11,"default","","",558,[[]]],[11,"default","","Returns the default value of <code>0</code>",551,[[]]],[11,"default","","Returns the default value of <code>\\\\x00</code>",564,[[]]],[11,"default","","",558,[[]]],[11,"default","std::cell","Creates a <code>RefCell<T></code>, with the <code>Default</code> value for T.",286,[[],["refcell",3]]],[11,"default","std","",562,[[]]],[11,"default","","Creates a mutable empty slice.",557,[[]]],[11,"default","","",558,[[]]],[11,"default","","Creates an empty slice.",557,[[]]],[11,"default","","",558,[[]]],[11,"default","std::sync::atomic","",504,[[],["atomici16",3]]],[11,"default","std","Returns the default value of <code>0</code>",542,[[]]],[11,"default","","",562,[[]]],[11,"default","","",558,[[]]],[11,"default","","",558,[[]]],[11,"default","","Returns the default value of <code>0.0</code>",554,[[]]],[11,"default","","Returns the default value of <code>false</code>",559,[[]]],[11,"default","","Returns the default value of <code>()</code>",556,[[]]],[11,"default","","",558,[[]]],[11,"default","","Returns the default value of <code>0</code>",550,[[]]],[11,"default","","",558,[[]]],[11,"default","","",558,[[]]],[11,"default","","",558,[[]]],[11,"default","","",562,[[]]],[11,"default","std::sync::atomic","",502,[[],["atomici8",3]]],[11,"default","std::marker","",333,[[],["phantomdata",3]]],[11,"default","std","",562,[[]]],[11,"default","","",558,[[]]],[11,"default","std::lazy","Creates a new lazy value using <code>Default</code> as the …",529,[[],["lazy",3]]],[11,"default","std::sync::atomic","",511,[[],["atomicusize",3]]],[11,"default","","",503,[[],["atomicu8",3]]],[11,"default","std::ops","",83,[[],["range",3]]],[11,"default","std::sync::atomic","",507,[[],["atomicu32",3]]],[11,"default","std","Returns the default value of <code>0</code>",552,[[]]],[11,"default","std::fmt","",214,[[],["error",3]]],[11,"default","std","",558,[[]]],[11,"default","std::num","",133,[[],["wrapping",3]]],[11,"default","std","Creates an empty str",560,[[]]],[11,"default","","Returns the default value of <code>0</code>",543,[[]]],[11,"default","","",562,[[]]],[11,"default","std::sync::atomic","Creates an <code>AtomicBool</code> initialized to <code>false</code>.",500,[[],["atomicbool",3]]],[11,"default","std","",558,[[]]],[11,"default","std::cell","Creates an <code>UnsafeCell</code>, with the <code>Default</code> value for T.",291,[[],["unsafecell",3]]],[11,"default","std","",558,[[]]],[11,"default","","Returns the default value of <code>0</code>",547,[[]]],[11,"default","","",558,[[]]],[11,"default","","",558,[[]]],[11,"default","","",558,[[]]],[11,"default","","",558,[[]]],[11,"default","","",558,[[]]],[11,"default","","",562,[[]]],[11,"default","std::sync::atomic","",508,[[],["atomici64",3]]],[11,"default","std::iter","",304,[[],["empty",3]]],[11,"default","std::sync::atomic","",506,[[],["atomici32",3]]],[11,"default","std","",558,[[]]],[11,"default","","",558,[[]]],[11,"default","","",558,[[]]],[11,"default","std::option","Returns [<code>None</code>][Option::None].",93,[[],["option",4]]],[11,"default","std::mem","",336,[[],["manuallydrop",3]]],[11,"default","std","",558,[[]]],[11,"default","std::cell","Creates a <code>Cell<T></code>, with the <code>Default</code> value for T.",285,[[],["cell",3]]],[11,"default","std","Returns the default value of <code>0</code>",548,[[]]],[11,"default","std::sync::atomic","Creates a null <code>AtomicPtr<T></code>.",501,[[],["atomicptr",3]]],[11,"default","","",505,[[],["atomicu16",3]]],[11,"default","std","Returns the default value of <code>0</code>",545,[[]]],[11,"default","","",562,[[]]],[11,"default","","",562,[[]]],[11,"default","std::hash","",303,[[],["siphasher",3]]],[11,"default","std::cmp","",29,[[],["reverse",3]]],[11,"default","std::ops","",338,[[],["rangefull",3]]],[11,"default","std","Returns the default value of <code>0</code>",544,[[]]],[11,"default","","",558,[[]]],[11,"default","","",562,[[]]],[11,"default","","Returns the default value of <code>0.0</code>",555,[[]]],[11,"default","std::sync::atomic","",509,[[],["atomicu64",3]]],[11,"default","std","",558,[[]]],[11,"default","","",558,[[]]],[11,"default","","",558,[[]]],[11,"default","","",562,[[]]],[11,"default","","",558,[[]]],[11,"default","","",558,[[]]],[11,"default","std::sync::atomic","",510,[[],["atomicisize",3]]],[11,"default","std","",562,[[]]],[11,"default","std::marker","",334,[[],["phantompinned",3]]],[11,"default","std","Returns the default value of <code>0</code>",549,[[]]],[11,"default","","",562,[[]]],[11,"default","","",558,[[]]],[11,"default","std::hash","",302,[[],["buildhasherdefault",3]]],[11,"write_str","std","",541,[[],[["result",4],["error",3]]]],[11,"write_char","","",541,[[],[["result",4],["error",3]]]],[11,"write_fmt","","",541,[[["arguments",3]],[["result",4],["error",3]]]],[11,"write_str","std::fmt","",221,[[],[["result",4],["error",3]]]],[11,"write_char","","",221,[[],[["result",4],["error",3]]]],[11,"write_fmt","","",221,[[["arguments",3]],[["result",4],["error",3]]]],[11,"into_iter","std::option","Returns a consuming iterator over the possibly contained …",93,[[],["intoiter",3]]],[11,"into_iter","std","",558,[[],["iter",3]]],[11,"into_iter","std::result","Returns a consuming iterator over the possibly contained …",95,[[],["intoiter",3]]],[11,"into_iter","std","",557,[[],["iter",3]]],[11,"into_iter","","",558,[[],["itermut",3]]],[11,"into_iter","","",557,[[],["itermut",3]]],[11,"shr_assign","","",552,[[]]],[11,"shr_assign","","",542,[[]]],[11,"shr_assign","","",542,[[]]],[11,"shr_assign","","",543,[[]]],[11,"shr_assign","","",552,[[]]],[11,"shr_assign","","",542,[[]]],[11,"shr_assign","","",544,[[]]],[11,"shr_assign","","",551,[[]]],[11,"shr_assign","","",543,[[]]],[11,"shr_assign","","",553,[[]]],[11,"shr_assign","","",549,[[]]],[11,"shr_assign","","",553,[[]]],[11,"shr_assign","std::num","",133,[[]]],[11,"shr_assign","","",133,[[]]],[11,"shr_assign","std","",551,[[]]],[11,"shr_assign","","",549,[[]]],[11,"shr_assign","","",545,[[]]],[11,"shr_assign","","",547,[[]]],[11,"shr_assign","","",547,[[]]],[11,"shr_assign","","",543,[[]]],[11,"shr_assign","","",542,[[]]],[11,"shr_assign","","",543,[[]]],[11,"shr_assign","","",548,[[]]],[11,"shr_assign","","",553,[[]]],[11,"shr_assign","","",550,[[]]],[11,"shr_assign","","",550,[[]]],[11,"shr_assign","","",550,[[]]],[11,"shr_assign","","",553,[[]]],[11,"shr_assign","","",544,[[]]],[11,"shr_assign","","",545,[[]]],[11,"shr_assign","","",547,[[]]],[11,"shr_assign","","",546,[[]]],[11,"shr_assign","","",553,[[]]],[11,"shr_assign","","",543,[[]]],[11,"shr_assign","","",551,[[]]],[11,"shr_assign","","",548,[[]]],[11,"shr_assign","","",550,[[]]],[11,"shr_assign","","",544,[[]]],[11,"shr_assign","","",549,[[]]],[11,"shr_assign","","",549,[[]]],[11,"shr_assign","","",542,[[]]],[11,"shr_assign","","",553,[[]]],[11,"shr_assign","","",553,[[]]],[11,"shr_assign","","",546,[[]]],[11,"shr_assign","","",546,[[]]],[11,"shr_assign","","",550,[[]]],[11,"shr_assign","","",545,[[]]],[11,"shr_assign","std::num","",133,[[]]],[11,"shr_assign","std","",548,[[]]],[11,"shr_assign","","",548,[[]]],[11,"shr_assign","","",549,[[]]],[11,"shr_assign","","",552,[[]]],[11,"shr_assign","","",543,[[]]],[11,"shr_assign","","",546,[[]]],[11,"shr_assign","","",542,[[]]],[11,"shr_assign","","",553,[[]]],[11,"shr_assign","","",551,[[]]],[11,"shr_assign","","",548,[[]]],[11,"shr_assign","","",552,[[]]],[11,"shr_assign","","",550,[[]]],[11,"shr_assign","","",548,[[]]],[11,"shr_assign","","",548,[[]]],[11,"shr_assign","","",551,[[]]],[11,"shr_assign","","",544,[[]]],[11,"shr_assign","","",545,[[]]],[11,"shr_assign","","",546,[[]]],[11,"shr_assign","","",544,[[]]],[11,"shr_assign","","",547,[[]]],[11,"shr_assign","","",549,[[]]],[11,"shr_assign","","",550,[[]]],[11,"shr_assign","","",553,[[]]],[11,"shr_assign","","",550,[[]]],[11,"shr_assign","","",543,[[]]],[11,"shr_assign","std::num","",133,[[]]],[11,"shr_assign","std","",542,[[]]],[11,"shr_assign","","",551,[[]]],[11,"shr_assign","","",550,[[]]],[11,"shr_assign","","",542,[[]]],[11,"shr_assign","","",543,[[]]],[11,"shr_assign","","",551,[[]]],[11,"shr_assign","","",551,[[]]],[11,"shr_assign","","",548,[[]]],[11,"shr_assign","","",546,[[]]],[11,"shr_assign","","",552,[[]]],[11,"shr_assign","","",553,[[]]],[11,"shr_assign","","",553,[[]]],[11,"shr_assign","","",544,[[]]],[11,"shr_assign","","",550,[[]]],[11,"shr_assign","","",549,[[]]],[11,"shr_assign","","",542,[[]]],[11,"shr_assign","","",550,[[]]],[11,"shr_assign","","",552,[[]]],[11,"shr_assign","","",547,[[]]],[11,"shr_assign","","",547,[[]]],[11,"shr_assign","","",546,[[]]],[11,"shr_assign","","",543,[[]]],[11,"shr_assign","","",551,[[]]],[11,"shr_assign","std::num","",133,[[]]],[11,"shr_assign","std","",542,[[]]],[11,"shr_assign","","",546,[[]]],[11,"shr_assign","","",550,[[]]],[11,"shr_assign","","",547,[[]]],[11,"shr_assign","","",546,[[]]],[11,"shr_assign","","",550,[[]]],[11,"shr_assign","","",544,[[]]],[11,"shr_assign","","",547,[[]]],[11,"shr_assign","","",550,[[]]],[11,"shr_assign","","",548,[[]]],[11,"shr_assign","","",551,[[]]],[11,"shr_assign","","",548,[[]]],[11,"shr_assign","","",547,[[]]],[11,"shr_assign","","",545,[[]]],[11,"shr_assign","","",549,[[]]],[11,"shr_assign","","",543,[[]]],[11,"shr_assign","","",546,[[]]],[11,"shr_assign","","",547,[[]]],[11,"shr_assign","","",546,[[]]],[11,"shr_assign","","",553,[[]]],[11,"shr_assign","","",552,[[]]],[11,"shr_assign","std::num","",133,[[]]],[11,"shr_assign","std","",546,[[]]],[11,"shr_assign","","",548,[[]]],[11,"shr_assign","","",544,[[]]],[11,"shr_assign","","",551,[[]]],[11,"shr_assign","","",553,[[]]],[11,"shr_assign","","",551,[[]]],[11,"shr_assign","","",549,[[]]],[11,"shr_assign","","",547,[[]]],[11,"shr_assign","","",553,[[]]],[11,"shr_assign","","",545,[[]]],[11,"shr_assign","","",549,[[]]],[11,"shr_assign","","",552,[[]]],[11,"shr_assign","","",550,[[]]],[11,"shr_assign","","",545,[[]]],[11,"shr_assign","","",549,[[]]],[11,"shr_assign","","",548,[[]]],[11,"shr_assign","","",551,[[]]],[11,"shr_assign","","",546,[[]]],[11,"shr_assign","","",548,[[]]],[11,"shr_assign","","",546,[[]]],[11,"shr_assign","std::num","",133,[[]]],[11,"shr_assign","std","",544,[[]]],[11,"shr_assign","std::num","",133,[[]]],[11,"shr_assign","","",133,[[]]],[11,"shr_assign","std","",546,[[]]],[11,"shr_assign","","",547,[[]]],[11,"shr_assign","","",549,[[]]],[11,"shr_assign","","",547,[[]]],[11,"shr_assign","","",542,[[]]],[11,"shr_assign","","",544,[[]]],[11,"shr_assign","","",552,[[]]],[11,"shr_assign","","",548,[[]]],[11,"shr_assign","","",547,[[]]],[11,"shr_assign","","",549,[[]]],[11,"shr_assign","","",545,[[]]],[11,"shr_assign","","",543,[[]]],[11,"shr_assign","","",551,[[]]],[11,"shr_assign","std::num","",133,[[]]],[11,"shr_assign","std","",552,[[]]],[11,"shr_assign","","",552,[[]]],[11,"shr_assign","","",543,[[]]],[11,"shr_assign","","",546,[[]]],[11,"shr_assign","","",544,[[]]],[11,"shr_assign","","",549,[[]]],[11,"shr_assign","","",549,[[]]],[11,"shr_assign","","",551,[[]]],[11,"shr_assign","","",544,[[]]],[11,"shr_assign","","",552,[[]]],[11,"shr_assign","","",551,[[]]],[11,"shr_assign","","",544,[[]]],[11,"shr_assign","","",552,[[]]],[11,"shr_assign","","",545,[[]]],[11,"shr_assign","","",542,[[]]],[11,"shr_assign","","",551,[[]]],[11,"shr_assign","","",542,[[]]],[11,"shr_assign","","",550,[[]]],[11,"shr_assign","","",546,[[]]],[11,"shr_assign","","",553,[[]]],[11,"shr_assign","","",553,[[]]],[11,"shr_assign","","",545,[[]]],[11,"shr_assign","","",553,[[]]],[11,"shr_assign","","",547,[[]]],[11,"shr_assign","","",543,[[]]],[11,"shr_assign","","",544,[[]]],[11,"shr_assign","std::num","",133,[[]]],[11,"shr_assign","","",133,[[]]],[11,"shr_assign","std","",542,[[]]],[11,"shr_assign","","",553,[[]]],[11,"shr_assign","","",543,[[]]],[11,"shr_assign","","",543,[[]]],[11,"shr_assign","","",544,[[]]],[11,"shr_assign","","",545,[[]]],[11,"shr_assign","","",548,[[]]],[11,"shr_assign","std::num","",133,[[]]],[11,"shr_assign","std","",550,[[]]],[11,"shr_assign","","",551,[[]]],[11,"shr_assign","","",550,[[]]],[11,"shr_assign","","",552,[[]]],[11,"shr_assign","","",545,[[]]],[11,"shr_assign","","",544,[[]]],[11,"shr_assign","","",553,[[]]],[11,"shr_assign","","",543,[[]]],[11,"shr_assign","","",553,[[]]],[11,"shr_assign","","",542,[[]]],[11,"shr_assign","","",549,[[]]],[11,"shr_assign","std::num","",133,[[]]],[11,"shr_assign","std","",549,[[]]],[11,"shr_assign","","",548,[[]]],[11,"shr_assign","","",545,[[]]],[11,"shr_assign","","",551,[[]]],[11,"shr_assign","","",544,[[]]],[11,"shr_assign","std::num","",133,[[]]],[11,"shr_assign","std","",549,[[]]],[11,"shr_assign","","",546,[[]]],[11,"shr_assign","","",548,[[]]],[11,"shr_assign","","",543,[[]]],[11,"shr_assign","","",545,[[]]],[11,"shr_assign","","",545,[[]]],[11,"shr_assign","","",551,[[]]],[11,"shr_assign","","",547,[[]]],[11,"shr_assign","","",543,[[]]],[11,"shr_assign","","",546,[[]]],[11,"shr_assign","","",542,[[]]],[11,"shr_assign","std::num","",133,[[]]],[11,"shr_assign","std","",553,[[]]],[11,"shr_assign","","",552,[[]]],[11,"shr_assign","","",549,[[]]],[11,"shr_assign","","",542,[[]]],[11,"shr_assign","","",544,[[]]],[11,"shr_assign","","",543,[[]]],[11,"shr_assign","","",546,[[]]],[11,"shr_assign","","",552,[[]]],[11,"shr_assign","","",544,[[]]],[11,"shr_assign","","",547,[[]]],[11,"shr_assign","","",543,[[]]],[11,"shr_assign","","",545,[[]]],[11,"shr_assign","","",551,[[]]],[11,"shr_assign","","",547,[[]]],[11,"shr_assign","","",542,[[]]],[11,"shr_assign","","",545,[[]]],[11,"shr_assign","","",552,[[]]],[11,"shr_assign","","",544,[[]]],[11,"shr_assign","","",552,[[]]],[11,"shr_assign","","",548,[[]]],[11,"shr_assign","","",542,[[]]],[11,"shr_assign","","",549,[[]]],[11,"shr_assign","","",545,[[]]],[11,"shr_assign","std::num","",133,[[]]],[11,"shr_assign","std","",549,[[]]],[11,"shr_assign","","",552,[[]]],[11,"shr_assign","","",550,[[]]],[11,"shr_assign","","",550,[[]]],[11,"shr_assign","","",553,[[]]],[11,"shr_assign","std::num","",133,[[]]],[11,"shr_assign","std","",543,[[]]],[11,"shr_assign","","",544,[[]]],[11,"shr_assign","","",543,[[]]],[11,"shr_assign","","",544,[[]]],[11,"shr_assign","","",548,[[]]],[11,"shr_assign","","",547,[[]]],[11,"shr_assign","","",542,[[]]],[11,"shr_assign","","",551,[[]]],[11,"shr_assign","","",542,[[]]],[11,"shr_assign","","",545,[[]]],[11,"shr_assign","","",547,[[]]],[11,"shr_assign","std::num","",133,[[]]],[11,"shr_assign","std","",550,[[]]],[11,"shr_assign","","",548,[[]]],[11,"shr_assign","","",545,[[]]],[11,"shr_assign","","",547,[[]]],[11,"shr_assign","std::num","",133,[[]]],[11,"shr_assign","","",133,[[]]],[11,"shr_assign","std","",551,[[]]],[11,"shr_assign","","",547,[[]]],[11,"shr_assign","","",550,[[]]],[11,"shr_assign","","",545,[[]]],[11,"shr_assign","","",550,[[]]],[11,"shr_assign","","",543,[[]]],[11,"shr_assign","","",544,[[]]],[11,"shr_assign","","",546,[[]]],[11,"shr_assign","std::num","",133,[[]]],[11,"shr_assign","std","",542,[[]]],[11,"shr_assign","","",546,[[]]],[11,"shr_assign","","",551,[[]]],[11,"shr_assign","","",547,[[]]],[11,"shr_assign","","",545,[[]]],[11,"shr_assign","","",547,[[]]],[11,"shr_assign","","",552,[[]]],[11,"shr_assign","","",542,[[]]],[11,"shr_assign","","",545,[[]]],[11,"shr_assign","","",548,[[]]],[11,"shr_assign","","",543,[[]]],[11,"shr_assign","","",548,[[]]],[11,"shr_assign","","",552,[[]]],[11,"shr_assign","","",550,[[]]],[11,"shr_assign","","",552,[[]]],[11,"shr_assign","","",549,[[]]],[11,"shr_assign","","",542,[[]]],[11,"shr_assign","","",549,[[]]],[11,"shr_assign","","",544,[[]]],[11,"shr_assign","","",553,[[]]],[11,"shr_assign","","",553,[[]]],[11,"shr_assign","","",552,[[]]],[11,"shr_assign","","",548,[[]]],[11,"shr_assign","","",545,[[]]],[11,"shr_assign","","",549,[[]]],[11,"shr_assign","","",546,[[]]],[11,"shr_assign","","",546,[[]]],[11,"shr_assign","std::num","",133,[[]]],[11,"shr_assign","std","",552,[[]]],[11,"shr_assign","","",548,[[]]],[11,"shr_assign","std::num","",133,[[]]],[11,"fmt","std","",545,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",473,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",472,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",482,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",475,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",547,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",477,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",551,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",133,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",550,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",549,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",476,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",478,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",542,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",479,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",548,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",474,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",544,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",480,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",546,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",471,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",541,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",543,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",481,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",552,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",553,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",541,[[["formatter",3]],[["result",4],["error",3]]]],[11,"as_ref","","",541,[[]]],[11,"as_ref","","",560,[[]]],[11,"as_ref","","",560,[[]]],[11,"as_ref","","",557,[[]]],[11,"as_ref","std::slice","",234,[[]]],[11,"as_ref","std","",541,[[]]],[11,"as_ref","","",558,[[]]],[11,"rem","","",550,[[]]],[11,"rem","","",544,[[]]],[11,"rem","","",552,[[]]],[11,"rem","","",542,[[]]],[11,"rem","","",543,[[]]],[11,"rem","std::num","",133,[[["wrapping",3]]]],[11,"rem","std","",553,[[]]],[11,"rem","","",550,[[]]],[11,"rem","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"rem","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"rem","std","",554,[[]]],[11,"rem","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"rem","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"rem","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"rem","std","",542,[[]]],[11,"rem","","",550,[[]]],[11,"rem","","",543,[[]]],[11,"rem","std::num","",133,[[["wrapping",3]]]],[11,"rem","std","",554,[[]]],[11,"rem","std::num","",133,[[["wrapping",3]]]],[11,"rem","std","",547,[[]]],[11,"rem","","",547,[[]]],[11,"rem","std::num","",133,[[["wrapping",3]]]],[11,"rem","std","",553,[[]]],[11,"rem","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"rem","std","",552,[[]]],[11,"rem","std::num","",133,[[["wrapping",3]]]],[11,"rem","std","",551,[[]]],[11,"rem","std::num","",133,[[["wrapping",3]]]],[11,"rem","std","",548,[[]]],[11,"rem","","",555,[[]]],[11,"rem","","",548,[[]]],[11,"rem","","",544,[[]]],[11,"rem","","",549,[[]]],[11,"rem","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"rem","std","",551,[[]]],[11,"rem","","",544,[[]]],[11,"rem","std::num","",133,[[["wrapping",3]]]],[11,"rem","std","",551,[[]]],[11,"rem","","",547,[[]]],[11,"rem","","",549,[[]]],[11,"rem","","",553,[[]]],[11,"rem","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"rem","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"rem","std","",543,[[]]],[11,"rem","","",552,[[]]],[11,"rem","","",552,[[]]],[11,"rem","","",545,[[]]],[11,"rem","","",549,[[]]],[11,"rem","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"rem","","",133,[[["wrapping",3]]]],[11,"rem","std","",549,[[]]],[11,"rem","","",542,[[]]],[11,"rem","","",550,[[]]],[11,"rem","","",555,[[]]],[11,"rem","","",545,[[]]],[11,"rem","std::num","",133,[[["wrapping",3]]]],[11,"rem","std","",545,[[]]],[11,"rem","","",545,[[]]],[11,"rem","","",548,[[]]],[11,"rem","std::num","",133,[[["wrapping",3]]]],[11,"rem","std","",542,[[]]],[11,"rem","","",554,[[]]],[11,"rem","","",553,[[]]],[11,"rem","","",555,[[]]],[11,"rem","","",551,[[]]],[11,"rem","std::num","",133,[[["wrapping",3]]]],[11,"rem","std","",555,[[]]],[11,"rem","","",547,[[]]],[11,"rem","","",546,[[]]],[11,"rem","","",554,[[]]],[11,"rem","","",546,[[]]],[11,"rem","","",544,[[]]],[11,"rem","std::num","",133,[[["wrapping",3]]]],[11,"rem","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"rem","std","",543,[[]]],[11,"rem","","",548,[[]]],[11,"rem","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"rem","std","",546,[[]]],[11,"rem","","",546,[[]]],[11,"resume","","",541,[[["pin",3]],["generatorstate",4]]],[11,"resume","std::pin","",344,[[["pin",3],["pin",3]],["generatorstate",4]]],[11,"cmp","std::marker","",334,[[["phantompinned",3]],["ordering",4]]],[11,"cmp","std","",561,[[],["ordering",4]]],[11,"cmp","","",562,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","std::pin","",344,[[["pin",3]],["ordering",4]]],[11,"cmp","std::num","",478,[[["nonzerou16",3]],["ordering",4]]],[11,"cmp","std","",561,[[],["ordering",4]]],[11,"cmp","std::fmt","",214,[[["error",3]],["ordering",4]]],[11,"cmp","std::num","",475,[[["nonzeroi8",3]],["ordering",4]]],[11,"cmp","std::panic","",488,[[["location",3]],["ordering",4]]],[11,"cmp","std","",562,[[],["ordering",4]]],[11,"cmp","std::num","",472,[[["nonzeroi16",3]],["ordering",4]]],[11,"cmp","std","",561,[[],["ordering",4]]],[11,"cmp","","",559,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","std::option","",93,[[["option",4]],["ordering",4]]],[11,"cmp","std","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",541,[[],["ordering",4]]],[11,"cmp","std::num","",473,[[["nonzeroi32",3]],["ordering",4]]],[11,"cmp","std::cell","PanicsPanics if the value in either <code>RefCell</code> is currently …",286,[[["refcell",3]],["ordering",4]]],[11,"cmp","std","",548,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",543,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",562,[[],["ordering",4]]],[11,"cmp","std::ptr","",345,[[["nonnull",3]],["ordering",4]]],[11,"cmp","std","",561,[[],["ordering",4]]],[11,"cmp","","",560,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",546,[[],["ordering",4]]],[11,"cmp","","",564,[[],["ordering",4]]],[11,"cmp","std::num","",481,[[["nonzerou8",3]],["ordering",4]]],[11,"cmp","std::task","",200,[[["poll",4]],["ordering",4]]],[11,"cmp","std","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",552,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","std::num","",133,[[["wrapping",3]],["ordering",4]]],[11,"cmp","std::marker","",333,[[["phantomdata",3]],["ordering",4]]],[11,"cmp","std","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",550,[[],["ordering",4]]],[11,"cmp","std::result","",95,[[["result",4]],["ordering",4]]],[11,"cmp","std::num","",474,[[["nonzeroi64",3]],["ordering",4]]],[11,"cmp","std","",561,[[],["ordering",4]]],[11,"cmp","","",556,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",562,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",545,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",563,[[],["ordering",4]]],[11,"cmp","","",562,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","std::num","",471,[[["nonzeroi128",3]],["ordering",4]]],[11,"cmp","std","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",562,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",562,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",562,[[],["ordering",4]]],[11,"cmp","std::time","",527,[[["duration",3]],["ordering",4]]],[11,"cmp","std","",562,[[],["ordering",4]]],[11,"cmp","std::mem","",336,[[["manuallydrop",3]],["ordering",4]]],[11,"cmp","std","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","std::num","",479,[[["nonzerou32",3]],["ordering",4]]],[11,"cmp","std::cell","",285,[[["cell",3]],["ordering",4]]],[11,"cmp","std","",561,[[],["ordering",4]]],[11,"cmp","std::cmp","",29,[[["reverse",3]],["ordering",4]]],[11,"cmp","std::num","",476,[[["nonzeroisize",3]],["ordering",4]]],[11,"cmp","std","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","std::option","",343,[[["noneerror",3]],["ordering",4]]],[11,"cmp","std","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",558,[[],["ordering",4]]],[11,"cmp","std::convert","",301,[[["infallible",4]],["ordering",4]]],[11,"cmp","std","",547,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",565,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","std::any","",282,[[["typeid",3]],["ordering",4]]],[11,"cmp","std","",541,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","std::cmp","",28,[[["ordering",4]],["ordering",4]]],[11,"cmp","std","",561,[[],["ordering",4]]],[11,"cmp","","",544,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",553,[[],["ordering",4]]],[11,"cmp","std::ops","",91,[[["generatorstate",4]],["ordering",4]]],[11,"cmp","std","",562,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","std::num","",477,[[["nonzerou128",3]],["ordering",4]]],[11,"cmp","std","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",557,[[],["ordering",4]]],[11,"cmp","","",562,[[],["ordering",4]]],[11,"cmp","","",549,[[],["ordering",4]]],[11,"cmp","","",551,[[],["ordering",4]]],[11,"cmp","std::num","",480,[[["nonzerou64",3]],["ordering",4]]],[11,"cmp","std","",562,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","std::num","",482,[[["nonzerousize",3]],["ordering",4]]],[11,"cmp","std","",561,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"cmp","","",565,[[],["ordering",4]]],[11,"cmp","","",542,[[],["ordering",4]]],[11,"cmp","","",561,[[],["ordering",4]]],[11,"borrow_mut","","",541,[[]]],[11,"borrow_mut","","",558,[[]]],[11,"not","","",545,[[]]],[11,"not","","",550,[[]]],[11,"not","","",543,[[]]],[11,"not","std::num","",133,[[],["wrapping",3]]],[11,"not","std","",549,[[]]],[11,"not","","",552,[[]]],[11,"not","","",552,[[]]],[11,"not","std::num","",133,[[],["wrapping",3]]],[11,"not","","",133,[[],["wrapping",3]]],[11,"not","std","",542,[[]]],[11,"not","std::num","",133,[[],["wrapping",3]]],[11,"not","std","",553,[[]]],[11,"not","","",546,[[]]],[11,"not","","",559,[[]]],[11,"not","","",551,[[]]],[11,"not","std::num","",133,[[],["wrapping",3]]],[11,"not","std","",548,[[]]],[11,"not","","",544,[[]]],[11,"not","","",542,[[]]],[11,"not","std::num","",133,[[],["wrapping",3]]],[11,"not","std","",559,[[]]],[11,"not","","",547,[[]]],[11,"not","std::num","",133,[[],["wrapping",3]]],[11,"not","std","",544,[[]]],[11,"not","std::num","",133,[[],["wrapping",3]]],[11,"not","std","",545,[[]]],[11,"not","","",548,[[]]],[11,"not","","",550,[[]]],[11,"not","","",551,[[]]],[11,"not","","",543,[[]]],[11,"not","","",549,[[]]],[11,"not","std::num","",133,[[],["wrapping",3]]],[11,"not","std","",553,[[]]],[11,"not","","",547,[[]]],[11,"not","std::num","",133,[[],["wrapping",3]]],[11,"not","std","",546,[[]]],[11,"not","std::num","",133,[[],["wrapping",3]]],[11,"not","","",133,[[],["wrapping",3]]],[11,"call","std","",541,[[]]],[11,"shl_assign","","",549,[[]]],[11,"shl_assign","","",542,[[]]],[11,"shl_assign","","",548,[[]]],[11,"shl_assign","","",547,[[]]],[11,"shl_assign","","",552,[[]]],[11,"shl_assign","","",545,[[]]],[11,"shl_assign","","",549,[[]]],[11,"shl_assign","","",544,[[]]],[11,"shl_assign","","",552,[[]]],[11,"shl_assign","","",553,[[]]],[11,"shl_assign","","",549,[[]]],[11,"shl_assign","","",546,[[]]],[11,"shl_assign","","",546,[[]]],[11,"shl_assign","","",549,[[]]],[11,"shl_assign","","",550,[[]]],[11,"shl_assign","","",543,[[]]],[11,"shl_assign","","",546,[[]]],[11,"shl_assign","","",545,[[]]],[11,"shl_assign","","",546,[[]]],[11,"shl_assign","","",549,[[]]],[11,"shl_assign","","",552,[[]]],[11,"shl_assign","","",553,[[]]],[11,"shl_assign","","",544,[[]]],[11,"shl_assign","","",552,[[]]],[11,"shl_assign","std::num","",133,[[]]],[11,"shl_assign","std","",553,[[]]],[11,"shl_assign","","",547,[[]]],[11,"shl_assign","","",553,[[]]],[11,"shl_assign","","",545,[[]]],[11,"shl_assign","","",550,[[]]],[11,"shl_assign","","",543,[[]]],[11,"shl_assign","","",551,[[]]],[11,"shl_assign","std::num","",133,[[]]],[11,"shl_assign","std","",549,[[]]],[11,"shl_assign","","",545,[[]]],[11,"shl_assign","","",548,[[]]],[11,"shl_assign","","",544,[[]]],[11,"shl_assign","","",547,[[]]],[11,"shl_assign","","",544,[[]]],[11,"shl_assign","","",545,[[]]],[11,"shl_assign","","",543,[[]]],[11,"shl_assign","","",542,[[]]],[11,"shl_assign","","",543,[[]]],[11,"shl_assign","","",546,[[]]],[11,"shl_assign","","",547,[[]]],[11,"shl_assign","std::num","",133,[[]]],[11,"shl_assign","std","",542,[[]]],[11,"shl_assign","","",550,[[]]],[11,"shl_assign","std::num","",133,[[]]],[11,"shl_assign","std","",542,[[]]],[11,"shl_assign","","",548,[[]]],[11,"shl_assign","","",553,[[]]],[11,"shl_assign","","",548,[[]]],[11,"shl_assign","","",552,[[]]],[11,"shl_assign","","",547,[[]]],[11,"shl_assign","","",550,[[]]],[11,"shl_assign","","",545,[[]]],[11,"shl_assign","","",550,[[]]],[11,"shl_assign","","",550,[[]]],[11,"shl_assign","","",549,[[]]],[11,"shl_assign","","",542,[[]]],[11,"shl_assign","","",549,[[]]],[11,"shl_assign","","",544,[[]]],[11,"shl_assign","","",544,[[]]],[11,"shl_assign","","",548,[[]]],[11,"shl_assign","","",549,[[]]],[11,"shl_assign","","",549,[[]]],[11,"shl_assign","","",548,[[]]],[11,"shl_assign","","",550,[[]]],[11,"shl_assign","","",551,[[]]],[11,"shl_assign","","",544,[[]]],[11,"shl_assign","","",544,[[]]],[11,"shl_assign","","",542,[[]]],[11,"shl_assign","","",547,[[]]],[11,"shl_assign","","",553,[[]]],[11,"shl_assign","std::num","",133,[[]]],[11,"shl_assign","std","",552,[[]]],[11,"shl_assign","std::num","",133,[[]]],[11,"shl_assign","std","",553,[[]]],[11,"shl_assign","","",546,[[]]],[11,"shl_assign","","",548,[[]]],[11,"shl_assign","","",544,[[]]],[11,"shl_assign","","",548,[[]]],[11,"shl_assign","","",545,[[]]],[11,"shl_assign","","",552,[[]]],[11,"shl_assign","","",547,[[]]],[11,"shl_assign","","",544,[[]]],[11,"shl_assign","","",544,[[]]],[11,"shl_assign","","",553,[[]]],[11,"shl_assign","","",548,[[]]],[11,"shl_assign","","",552,[[]]],[11,"shl_assign","","",545,[[]]],[11,"shl_assign","","",548,[[]]],[11,"shl_assign","","",553,[[]]],[11,"shl_assign","","",542,[[]]],[11,"shl_assign","","",550,[[]]],[11,"shl_assign","","",551,[[]]],[11,"shl_assign","","",548,[[]]],[11,"shl_assign","","",544,[[]]],[11,"shl_assign","","",543,[[]]],[11,"shl_assign","","",551,[[]]],[11,"shl_assign","","",553,[[]]],[11,"shl_assign","std::num","",133,[[]]],[11,"shl_assign","std","",546,[[]]],[11,"shl_assign","","",552,[[]]],[11,"shl_assign","","",548,[[]]],[11,"shl_assign","","",542,[[]]],[11,"shl_assign","","",549,[[]]],[11,"shl_assign","","",545,[[]]],[11,"shl_assign","","",543,[[]]],[11,"shl_assign","","",550,[[]]],[11,"shl_assign","","",547,[[]]],[11,"shl_assign","","",552,[[]]],[11,"shl_assign","","",552,[[]]],[11,"shl_assign","","",545,[[]]],[11,"shl_assign","","",546,[[]]],[11,"shl_assign","","",551,[[]]],[11,"shl_assign","","",546,[[]]],[11,"shl_assign","","",548,[[]]],[11,"shl_assign","","",548,[[]]],[11,"shl_assign","","",553,[[]]],[11,"shl_assign","std::num","",133,[[]]],[11,"shl_assign","std","",547,[[]]],[11,"shl_assign","","",543,[[]]],[11,"shl_assign","","",552,[[]]],[11,"shl_assign","","",544,[[]]],[11,"shl_assign","","",553,[[]]],[11,"shl_assign","","",544,[[]]],[11,"shl_assign","std::num","",133,[[]]],[11,"shl_assign","","",133,[[]]],[11,"shl_assign","std","",550,[[]]],[11,"shl_assign","","",549,[[]]],[11,"shl_assign","","",546,[[]]],[11,"shl_assign","","",549,[[]]],[11,"shl_assign","","",552,[[]]],[11,"shl_assign","","",552,[[]]],[11,"shl_assign","","",553,[[]]],[11,"shl_assign","","",553,[[]]],[11,"shl_assign","","",542,[[]]],[11,"shl_assign","","",543,[[]]],[11,"shl_assign","","",549,[[]]],[11,"shl_assign","","",544,[[]]],[11,"shl_assign","","",553,[[]]],[11,"shl_assign","","",550,[[]]],[11,"shl_assign","","",551,[[]]],[11,"shl_assign","","",542,[[]]],[11,"shl_assign","","",550,[[]]],[11,"shl_assign","","",549,[[]]],[11,"shl_assign","","",550,[[]]],[11,"shl_assign","","",548,[[]]],[11,"shl_assign","","",551,[[]]],[11,"shl_assign","","",544,[[]]],[11,"shl_assign","","",544,[[]]],[11,"shl_assign","","",552,[[]]],[11,"shl_assign","","",543,[[]]],[11,"shl_assign","","",543,[[]]],[11,"shl_assign","std::num","",133,[[]]],[11,"shl_assign","std","",542,[[]]],[11,"shl_assign","","",549,[[]]],[11,"shl_assign","","",548,[[]]],[11,"shl_assign","","",545,[[]]],[11,"shl_assign","","",551,[[]]],[11,"shl_assign","","",546,[[]]],[11,"shl_assign","","",545,[[]]],[11,"shl_assign","","",551,[[]]],[11,"shl_assign","","",547,[[]]],[11,"shl_assign","","",546,[[]]],[11,"shl_assign","","",551,[[]]],[11,"shl_assign","","",547,[[]]],[11,"shl_assign","","",550,[[]]],[11,"shl_assign","","",545,[[]]],[11,"shl_assign","","",553,[[]]],[11,"shl_assign","","",547,[[]]],[11,"shl_assign","","",546,[[]]],[11,"shl_assign","","",550,[[]]],[11,"shl_assign","","",551,[[]]],[11,"shl_assign","","",548,[[]]],[11,"shl_assign","std::num","",133,[[]]],[11,"shl_assign","std","",547,[[]]],[11,"shl_assign","","",542,[[]]],[11,"shl_assign","","",549,[[]]],[11,"shl_assign","","",543,[[]]],[11,"shl_assign","","",551,[[]]],[11,"shl_assign","std::num","",133,[[]]],[11,"shl_assign","std","",543,[[]]],[11,"shl_assign","","",546,[[]]],[11,"shl_assign","","",546,[[]]],[11,"shl_assign","","",551,[[]]],[11,"shl_assign","","",542,[[]]],[11,"shl_assign","","",545,[[]]],[11,"shl_assign","","",546,[[]]],[11,"shl_assign","","",548,[[]]],[11,"shl_assign","std::num","",133,[[]]],[11,"shl_assign","std","",542,[[]]],[11,"shl_assign","","",545,[[]]],[11,"shl_assign","","",550,[[]]],[11,"shl_assign","","",543,[[]]],[11,"shl_assign","","",545,[[]]],[11,"shl_assign","","",552,[[]]],[11,"shl_assign","","",548,[[]]],[11,"shl_assign","","",547,[[]]],[11,"shl_assign","","",543,[[]]],[11,"shl_assign","","",551,[[]]],[11,"shl_assign","std::num","",133,[[]]],[11,"shl_assign","std","",550,[[]]],[11,"shl_assign","","",545,[[]]],[11,"shl_assign","","",547,[[]]],[11,"shl_assign","","",545,[[]]],[11,"shl_assign","","",542,[[]]],[11,"shl_assign","","",542,[[]]],[11,"shl_assign","","",547,[[]]],[11,"shl_assign","","",551,[[]]],[11,"shl_assign","","",545,[[]]],[11,"shl_assign","","",552,[[]]],[11,"shl_assign","","",543,[[]]],[11,"shl_assign","","",547,[[]]],[11,"shl_assign","","",550,[[]]],[11,"shl_assign","","",545,[[]]],[11,"shl_assign","std::num","",133,[[]]],[11,"shl_assign","std","",553,[[]]],[11,"shl_assign","","",544,[[]]],[11,"shl_assign","","",543,[[]]],[11,"shl_assign","","",551,[[]]],[11,"shl_assign","","",543,[[]]],[11,"shl_assign","","",550,[[]]],[11,"shl_assign","","",542,[[]]],[11,"shl_assign","std::num","",133,[[]]],[11,"shl_assign","std","",548,[[]]],[11,"shl_assign","","",552,[[]]],[11,"shl_assign","std::num","",133,[[]]],[11,"shl_assign","std","",550,[[]]],[11,"shl_assign","","",547,[[]]],[11,"shl_assign","","",552,[[]]],[11,"shl_assign","std::num","",133,[[]]],[11,"shl_assign","std","",553,[[]]],[11,"shl_assign","","",549,[[]]],[11,"shl_assign","","",547,[[]]],[11,"shl_assign","","",544,[[]]],[11,"shl_assign","","",544,[[]]],[11,"shl_assign","","",546,[[]]],[11,"shl_assign","","",542,[[]]],[11,"shl_assign","","",549,[[]]],[11,"shl_assign","","",549,[[]]],[11,"shl_assign","","",546,[[]]],[11,"shl_assign","","",545,[[]]],[11,"shl_assign","","",552,[[]]],[11,"shl_assign","","",544,[[]]],[11,"shl_assign","","",546,[[]]],[11,"shl_assign","","",545,[[]]],[11,"shl_assign","std::num","",133,[[]]],[11,"shl_assign","std","",546,[[]]],[11,"shl_assign","","",547,[[]]],[11,"shl_assign","","",546,[[]]],[11,"shl_assign","","",543,[[]]],[11,"shl_assign","std::num","",133,[[]]],[11,"shl_assign","std","",553,[[]]],[11,"shl_assign","","",549,[[]]],[11,"shl_assign","","",544,[[]]],[11,"shl_assign","","",553,[[]]],[11,"shl_assign","","",542,[[]]],[11,"shl_assign","","",551,[[]]],[11,"shl_assign","","",552,[[]]],[11,"shl_assign","","",550,[[]]],[11,"shl_assign","","",543,[[]]],[11,"shl_assign","","",553,[[]]],[11,"shl_assign","","",542,[[]]],[11,"shl_assign","","",552,[[]]],[11,"shl_assign","","",548,[[]]],[11,"shl_assign","std::num","",133,[[]]],[11,"shl_assign","std","",553,[[]]],[11,"shl_assign","","",551,[[]]],[11,"shl_assign","","",543,[[]]],[11,"shl_assign","","",552,[[]]],[11,"shl_assign","","",550,[[]]],[11,"shl_assign","","",551,[[]]],[11,"shl_assign","","",553,[[]]],[11,"shl_assign","","",547,[[]]],[11,"shl_assign","","",548,[[]]],[11,"shl_assign","","",543,[[]]],[11,"shl_assign","","",551,[[]]],[11,"shl_assign","","",553,[[]]],[11,"shl_assign","","",542,[[]]],[11,"shl_assign","","",546,[[]]],[11,"shl_assign","","",551,[[]]],[11,"shl_assign","","",550,[[]]],[11,"shl_assign","","",549,[[]]],[11,"shl_assign","","",550,[[]]],[11,"shl_assign","","",543,[[]]],[11,"shl_assign","","",542,[[]]],[11,"shl_assign","","",549,[[]]],[11,"shl_assign","","",547,[[]]],[11,"shl_assign","","",542,[[]]],[11,"shl_assign","","",548,[[]]],[11,"shl_assign","","",551,[[]]],[11,"shl_assign","","",543,[[]]],[11,"shl_assign","","",544,[[]]],[11,"shl_assign","","",549,[[]]],[11,"shl_assign","","",551,[[]]],[11,"shl_assign","std::num","",133,[[]]],[11,"shl_assign","std","",547,[[]]],[11,"shl_assign","","",543,[[]]],[11,"shl_assign","","",546,[[]]],[11,"shl_assign","","",547,[[]]],[11,"shl_assign","","",551,[[]]],[11,"shl_assign","","",542,[[]]],[11,"shl_assign","","",552,[[]]],[11,"shl_assign","","",544,[[]]],[11,"shl_assign","","",545,[[]]],[11,"shl_assign","","",545,[[]]],[11,"shl_assign","","",548,[[]]],[11,"shl_assign","std::num","",133,[[]]],[11,"shl_assign","std","",546,[[]]],[11,"bitand_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitand_assign","","",133,[[["wrapping",3]]]],[11,"bitand_assign","std","",549,[[]]],[11,"bitand_assign","","",559,[[]]],[11,"bitand_assign","","",547,[[]]],[11,"bitand_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitand_assign","","",133,[[["wrapping",3]]]],[11,"bitand_assign","","",133,[[["wrapping",3]]]],[11,"bitand_assign","std","",553,[[]]],[11,"bitand_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitand_assign","std","",546,[[]]],[11,"bitand_assign","","",545,[[]]],[11,"bitand_assign","","",542,[[]]],[11,"bitand_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitand_assign","std","",552,[[]]],[11,"bitand_assign","","",551,[[]]],[11,"bitand_assign","","",550,[[]]],[11,"bitand_assign","","",544,[[]]],[11,"bitand_assign","","",559,[[]]],[11,"bitand_assign","","",546,[[]]],[11,"bitand_assign","","",544,[[]]],[11,"bitand_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitand_assign","","",133,[[["wrapping",3]]]],[11,"bitand_assign","","",133,[[["wrapping",3]]]],[11,"bitand_assign","std","",548,[[]]],[11,"bitand_assign","","",549,[[]]],[11,"bitand_assign","","",553,[[]]],[11,"bitand_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitand_assign","std","",552,[[]]],[11,"bitand_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitand_assign","","",133,[[["wrapping",3]]]],[11,"bitand_assign","std","",543,[[]]],[11,"bitand_assign","","",543,[[]]],[11,"bitand_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitand_assign","std","",551,[[]]],[11,"bitand_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitand_assign","","",133,[[["wrapping",3]]]],[11,"bitand_assign","","",133,[[["wrapping",3]]]],[11,"bitand_assign","std","",542,[[]]],[11,"bitand_assign","","",547,[[]]],[11,"bitand_assign","","",545,[[]]],[11,"bitand_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitand_assign","","",133,[[["wrapping",3]]]],[11,"bitand_assign","std","",548,[[]]],[11,"bitand_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitand_assign","","",133,[[["wrapping",3]]]],[11,"bitand_assign","","",133,[[["wrapping",3]]]],[11,"bitand_assign","std","",550,[[]]],[11,"bitand_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitand_assign","","",133,[[["wrapping",3]]]],[11,"clone","std::fmt","",215,[[],["arguments",3]]],[11,"clone","std::option","",342,[[],["intoiter",3]]],[11,"clone","std::char","",298,[[],["parsecharerror",3]]],[11,"clone","std::iter","",314,[[],["mapwhile",3]]],[11,"clone","std::str","",261,[[],["lines",3]]],[11,"clone","","",251,[[],["splitasciiwhitespace",3]]],[11,"clone","","",257,[[],["escapedebug",3]]],[11,"clone","std::ffi","",431,[[],["valistimpl",3]]],[11,"clone","std::str","",259,[[],["escapeunicode",3]]],[11,"clone","std::mem","",337,[[],["maybeuninit",19]]],[11,"clone","std::slice","",236,[[],["rchunks",3]]],[11,"clone","std::sync::atomic","",186,[[],["ordering",4]]],[11,"clone","std::any","",282,[[],["typeid",3]]],[11,"clone","std::option","",93,[[],["option",4]]],[11,"clone_from","","",93,[[["option",4]]]],[11,"clone","std::num","",482,[[],["nonzerousize",3]]],[11,"clone","std","",555,[[]]],[11,"clone","std::num","",474,[[],["nonzeroi64",3]]],[11,"clone","std::raw","",94,[[],["traitobject",3]]],[11,"clone","std::task","",533,[[],["waker",3]]],[11,"clone","std::str","",264,[[],["rmatchindices",3]]],[11,"clone","std","",564,[[]]],[11,"clone","std::num","",476,[[],["nonzeroisize",3]]],[11,"clone","std","",546,[[]]],[11,"clone","std::char","",295,[[],["tolowercase",3]]],[11,"clone","std","",563,[[]]],[11,"clone","std::str","",263,[[],["matchindices",3]]],[11,"clone","std::result","",95,[[],["result",4]]],[11,"clone_from","","",95,[[["result",4]]]],[11,"clone","std::iter","",328,[[],["skip",3]]],[11,"clone","std::num","",471,[[],["nonzeroi128",3]]],[11,"clone","std::str","",260,[[],["utf8error",3]]],[11,"clone","std::task","",532,[[],["rawwakervtable",3]]],[11,"clone","std::str","",252,[[],["splitwhitespace",3]]],[11,"clone","std","",565,[[]]],[11,"clone","std::num","",133,[[],["wrapping",3]]],[11,"clone","std::iter","",332,[[],["zip",3]]],[11,"clone","std::num","",469,[[],["parseinterror",3]]],[11,"clone","std::convert","",301,[[],["infallible",4]]],[11,"clone","std::iter","",307,[[],["oncewith",3]]],[11,"clone","std::cmp","",29,[[],["reverse",3]]],[11,"clone","std::ops","",85,[[],["rangeto",3]]],[11,"clone","std::hash","",302,[[],["buildhasherdefault",3]]],[11,"clone","std::str","",270,[[],["splitn",3]]],[11,"clone","","",255,[[],["chars",3]]],[11,"clone","std::cmp","",28,[[],["ordering",4]]],[11,"clone","std::iter","",319,[[],["filter",3]]],[11,"clone","","",312,[[],["copied",3]]],[11,"clone","std::str","",269,[[],["rsplitn",3]]],[11,"clone","std::num","",480,[[],["nonzerou64",3]]],[11,"clone","","",477,[[],["nonzerou128",3]]],[11,"clone","std::str","",266,[[],["rmatches",3]]],[11,"clone","std::iter","",329,[[],["skipwhile",3]]],[11,"clone","std::marker","",333,[[],["phantomdata",3]]],[11,"clone","std::iter","",321,[[],["flatmap",3]]],[11,"clone","std::slice","",237,[[],["rchunksexact",3]]],[11,"clone","std::iter","",305,[[],["fromfn",3]]],[11,"clone","std::slice","",227,[[],["chunks",3]]],[11,"clone","","",229,[[],["chunksexact",3]]],[11,"clone","std::str::pattern","",246,[[],["charsearcher",3]]],[11,"clone","std::iter","",325,[[],["peekable",3]]],[11,"clone","","",316,[[],["chain",3]]],[11,"clone","std::hash","",303,[[],["siphasher",3]]],[11,"clone","std::iter","",309,[[],["repeatwith",3]]],[11,"clone","std","",554,[[]]],[11,"clone","std::iter","",304,[[],["empty",3]]],[11,"clone","std::str","",258,[[],["escapedefault",3]]],[11,"clone","","",268,[[],["split",3]]],[11,"clone","std::ops","",91,[[],["generatorstate",4]]],[11,"clone","std::str","",250,[[],["encodeutf16",3]]],[11,"clone","std::num","",472,[[],["nonzeroi16",3]]],[11,"clone","std::iter","",310,[[],["successors",3]]],[11,"clone","std::str::pattern","",19,[[],["searchstep",4]]],[11,"clone","std::iter","",311,[[],["cloned",3]]],[11,"clone","std::ops","",338,[[],["rangefull",3]]],[11,"clone","std::ascii","",351,[[],["escapedefault",3]]],[11,"clone","std::slice","",226,[[],["arraywindows",3]]],[11,"clone","std::char","",294,[[],["escapedebug",3]]],[11,"clone","std::slice","",232,[[],["split",3]]],[11,"clone","std::time","",527,[[],["duration",3]]],[11,"clone","std","",549,[[]]],[11,"clone","std::iter","",308,[[],["repeat",3]]],[11,"clone","std::str::pattern","",247,[[],["charslicesearcher",3]]],[11,"clone","std::marker","",334,[[],["phantompinned",3]]],[11,"clone","std","",550,[[]]],[11,"clone","std::num","",479,[[],["nonzerou32",3]]],[11,"clone","std::iter","",320,[[],["filtermap",3]]],[11,"clone","","",322,[[],["fuse",3]]],[11,"clone","std","",552,[[]]],[11,"clone","std::num","",135,[[],["interrorkind",4]]],[11,"clone","","",475,[[],["nonzeroi8",3]]],[11,"clone","std::option","",340,[[],["iter",3]]],[11,"clone","std::alloc","",539,[[],["layouterror",3]]],[11,"clone","std::iter","",317,[[],["cycle",3]]],[11,"clone","std::slice","",234,[[],["iter",3]]],[11,"clone","std::mem","",336,[[],["manuallydrop",3]]],[11,"clone","std::iter","",330,[[],["take",3]]],[11,"clone","std::pin","",344,[[],["pin",3]]],[11,"clone","std::str::pattern","",249,[[],["strsearcher",3]]],[11,"clone","std::iter","",313,[[],["flatten",3]]],[11,"clone","std::future","",535,[[],["ready",3]]],[11,"clone","std::array","",284,[[],["intoiter",3]]],[11,"clone","std::cell","PanicsPanics if the value is currently mutably borrowed.",286,[[],["refcell",3]]],[11,"clone","std::char","",296,[[],["touppercase",3]]],[11,"clone","std::result","",348,[[],["intoiter",3]]],[11,"clone","std","",559,[[]]],[11,"clone","std::char","",299,[[],["decodeutf16",3]]],[11,"clone","std::task","",200,[[],["poll",4]]],[11,"clone","std","",551,[[]]],[11,"clone","std::panic","",488,[[],["location",3]]],[11,"clone","std::mem","",335,[[],["discriminant",3]]],[11,"clone","std::ops","",88,[[],["rangetoinclusive",3]]],[11,"clone","std::num","",473,[[],["nonzeroi32",3]]],[11,"clone","std::ops","",339,[[],["rangeinclusive",3]]],[11,"clone","std::iter","",324,[[],["map",3]]],[11,"clone","std::alloc","",537,[[],["allocerror",3]]],[11,"clone","std::num","",478,[[],["nonzerou16",3]]],[11,"clone","","",470,[[],["tryfrominterror",3]]],[11,"clone","std::char","",293,[[],["escapedefault",3]]],[11,"clone","","",300,[[],["decodeutf16error",3]]],[11,"clone","std","",545,[[]]],[11,"clone","std::iter","",331,[[],["takewhile",3]]],[11,"clone","std::str","",265,[[],["matches",3]]],[11,"clone","std::ops","",84,[[],["rangefrom",3]]],[11,"clone","std::str","",256,[[],["parseboolerror",3]]],[11,"clone","","",272,[[],["splitterminator",3]]],[11,"clone","std::cell","",285,[[],["cell",3]]],[11,"clone","std::str","",262,[[],["linesany",3]]],[11,"clone","std::fmt","",214,[[],["error",3]]],[11,"clone","std::array","",283,[[],["tryfromsliceerror",3]]],[11,"clone","std::iter","",323,[[],["inspect",3]]],[11,"clone","std::ops","",83,[[],["range",3]]],[11,"clone","std::iter","",326,[[],["rev",3]]],[11,"clone","std","",548,[[]]],[11,"clone","std::iter","",315,[[],["stepby",3]]],[11,"clone","std::num","",468,[[],["parsefloaterror",3]]],[11,"clone","std::char","",297,[[],["chartryfromerror",3]]],[11,"clone","std::alloc","",538,[[],["layout",3]]],[11,"clone","std","",565,[[]]],[11,"clone","std::ptr","",345,[[],["nonnull",3]]],[11,"clone","std::slice","",240,[[],["rsplit",3]]],[11,"clone","std::num","",134,[[],["fpcategory",4]]],[11,"clone","std::str","",253,[[],["bytes",3]]],[11,"clone","std::future","",534,[[],["pending",3]]],[11,"clone","std::str","",254,[[],["charindices",3]]],[11,"clone","","",267,[[],["rsplit",3]]],[11,"clone","std","",547,[[]]],[11,"clone","std::slice","",228,[[],["windows",3]]],[11,"clone","std::ops","",86,[[],["bound",4]]],[11,"clone","std","",541,[[]]],[11,"clone","std::str::pattern","",248,[[],["charpredicatesearcher",3]]],[11,"clone","std","",544,[[]]],[11,"clone","std::num","",481,[[],["nonzerou8",3]]],[11,"clone","std::result","",346,[[],["iter",3]]],[11,"clone","std","",553,[[]]],[11,"clone","std::slice","",224,[[],["arraychunks",3]]],[11,"clone","std::iter","",327,[[],["scan",3]]],[11,"clone","std","",543,[[]]],[11,"clone","","",542,[[]]],[11,"clone","std::lazy","",528,[[],["oncecell",3]]],[11,"clone","std::ops","",92,[[],["controlflow",4]]],[11,"clone","std::iter","",318,[[],["enumerate",3]]],[11,"clone","","",306,[[],["once",3]]],[11,"clone","std::char","",292,[[],["escapeunicode",3]]],[11,"clone","std::option","",343,[[],["noneerror",3]]],[11,"clone","std::str","",271,[[],["rsplitterminator",3]]],[11,"shl","std","",549,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",545,[[]]],[11,"shl","std::num","",133,[[]]],[11,"shl","std","",548,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",550,[[]]],[11,"shl","std::num","",133,[[],["wrapping",3]]],[11,"shl","std","",551,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",543,[[]]],[11,"shl","std::num","",133,[[],["wrapping",3]]],[11,"shl","std","",550,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",543,[[]]],[11,"shl","std::num","",133,[[],["wrapping",3]]],[11,"shl","std","",549,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",551,[[]]],[11,"shl","std::num","",133,[[],["wrapping",3]]],[11,"shl","std","",543,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",545,[[]]],[11,"shl","std::num","",133,[[],["wrapping",3]]],[11,"shl","std","",544,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",552,[[]]],[11,"shl","std::num","",133,[[],["wrapping",3]]],[11,"shl","std","",552,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",552,[[]]],[11,"shl","std::num","",133,[[]]],[11,"shl","std","",545,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",550,[[]]],[11,"shl","std::num","",133,[[]]],[11,"shl","","",133,[[]]],[11,"shl","std","",544,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",543,[[]]],[11,"shl","std::num","",133,[[],["wrapping",3]]],[11,"shl","","",133,[[]]],[11,"shl","std","",551,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",545,[[]]],[11,"shl","std::num","",133,[[],["wrapping",3]]],[11,"shl","std","",553,[[]]],[11,"shl","","",549,[[]]],[11,"shl","std::num","",133,[[],["wrapping",3]]],[11,"shl","std","",550,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",553,[[]]],[11,"shl","std::num","",133,[[]]],[11,"shl","std","",542,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",542,[[]]],[11,"shl","std::num","",133,[[]]],[11,"shl","std","",546,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",542,[[]]],[11,"shl","std::num","",133,[[]]],[11,"shl","std","",551,[[]]],[11,"shl","std::num","",133,[[]]],[11,"shl","std","",552,[[]]],[11,"shl","std::num","",133,[[]]],[11,"shl","std","",553,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",548,[[]]],[11,"shl","std::num","",133,[[]]],[11,"shl","std","",547,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",548,[[]]],[11,"shl","std::num","",133,[[],["wrapping",3]]],[11,"shl","std","",549,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",548,[[]]],[11,"shl","std::num","",133,[[],["wrapping",3]]],[11,"shl","std","",544,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",548,[[]]],[11,"shl","std::num","",133,[[]]],[11,"shl","std","",552,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",552,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",546,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",548,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",542,[[]]],[11,"shl","","",553,[[]]],[11,"shl","std::num","",133,[[],["wrapping",3]]],[11,"shl","std","",548,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",547,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",551,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",550,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",545,[[]]],[11,"shl","","",553,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",543,[[]]],[11,"shl","","",544,[[]]],[11,"shl","","",549,[[]]],[11,"shl","","",552,[[]]],[11,"sum","","",550,[[]]],[11,"sum","","",550,[[]]],[11,"sum","","",555,[[]]],[11,"sum","","",548,[[]]],[11,"sum","std::num","",133,[[],["wrapping",3]]],[11,"sum","std","",551,[[]]],[11,"sum","","",554,[[]]],[11,"sum","std::num","",133,[[],["wrapping",3]]],[11,"sum","std","",554,[[]]],[11,"sum","","",542,[[]]],[11,"sum","std::num","",133,[[],["wrapping",3]]],[11,"sum","std","",549,[[]]],[11,"sum","std::num","",133,[[],["wrapping",3]]],[11,"sum","std","",547,[[]]],[11,"sum","","",548,[[]]],[11,"sum","","",546,[[]]],[11,"sum","","",553,[[]]],[11,"sum","std::num","",133,[[],["wrapping",3]]],[11,"sum","std","",551,[[]]],[11,"sum","std::num","",133,[[],["wrapping",3]]],[11,"sum","","",133,[[],["wrapping",3]]],[11,"sum","std","",542,[[]]],[11,"sum","","",545,[[]]],[11,"sum","std::num","",133,[[],["wrapping",3]]],[11,"sum","std","",549,[[]]],[11,"sum","std::num","",133,[[],["wrapping",3]]],[11,"sum","","",133,[[],["wrapping",3]]],[11,"sum","","",133,[[],["wrapping",3]]],[11,"sum","std","",547,[[]]],[11,"sum","std::num","",133,[[],["wrapping",3]]],[11,"sum","","",133,[[],["wrapping",3]]],[11,"sum","std","",545,[[]]],[11,"sum","std::num","",133,[[],["wrapping",3]]],[11,"sum","","",133,[[],["wrapping",3]]],[11,"sum","std::time","",527,[[],["duration",3]]],[11,"sum","std::num","",133,[[],["wrapping",3]]],[11,"sum","","",133,[[],["wrapping",3]]],[11,"sum","","",133,[[],["wrapping",3]]],[11,"sum","std","",546,[[]]],[11,"sum","","",555,[[]]],[11,"sum","std::option","Takes each element in the [<code>Iterator</code>]: if it is a [<code>None</code>], …",93,[[],["option",4]]],[11,"sum","std","",552,[[]]],[11,"sum","","",544,[[]]],[11,"sum","","",544,[[]]],[11,"sum","std::result","Takes each element in the [<code>Iterator</code>]: if it is an [<code>Err</code>], …",95,[[],["result",4]]],[11,"sum","std","",553,[[]]],[11,"sum","std::num","",133,[[],["wrapping",3]]],[11,"sum","","",133,[[],["wrapping",3]]],[11,"sum","","",133,[[],["wrapping",3]]],[11,"sum","std","",543,[[]]],[11,"sum","","",543,[[]]],[11,"sum","std::num","",133,[[],["wrapping",3]]],[11,"sum","","",133,[[],["wrapping",3]]],[11,"sum","std::time","",527,[[],["duration",3]]],[11,"sum","std","",552,[[]]],[11,"sum","std::num","",133,[[],["wrapping",3]]],[11,"rem_assign","","",133,[[["wrapping",3]]]],[11,"rem_assign","","",133,[[["wrapping",3]]]],[11,"rem_assign","","",133,[[["wrapping",3]]]],[11,"rem_assign","std","",553,[[]]],[11,"rem_assign","std::num","",133,[[["wrapping",3]]]],[11,"rem_assign","std","",552,[[]]],[11,"rem_assign","","",547,[[]]],[11,"rem_assign","","",546,[[]]],[11,"rem_assign","","",543,[[]]],[11,"rem_assign","std::num","",133,[[["wrapping",3]]]],[11,"rem_assign","std","",551,[[]]],[11,"rem_assign","std::num","",133,[[["wrapping",3]]]],[11,"rem_assign","","",133,[[["wrapping",3]]]],[11,"rem_assign","std","",554,[[]]],[11,"rem_assign","std::num","",133,[[["wrapping",3]]]],[11,"rem_assign","std","",542,[[]]],[11,"rem_assign","","",548,[[]]],[11,"rem_assign","","",545,[[]]],[11,"rem_assign","std::num","",133,[[["wrapping",3]]]],[11,"rem_assign","std","",548,[[]]],[11,"rem_assign","","",545,[[]]],[11,"rem_assign","","",547,[[]]],[11,"rem_assign","std::num","",133,[[["wrapping",3]]]],[11,"rem_assign","std","",554,[[]]],[11,"rem_assign","std::num","",133,[[["wrapping",3]]]],[11,"rem_assign","std","",542,[[]]],[11,"rem_assign","std::num","",133,[[["wrapping",3]]]],[11,"rem_assign","","",133,[[["wrapping",3]]]],[11,"rem_assign","std","",544,[[]]],[11,"rem_assign","","",543,[[]]],[11,"rem_assign","std::num","",133,[[["wrapping",3]]]],[11,"rem_assign","std","",550,[[]]],[11,"rem_assign","std::num","",133,[[["wrapping",3]]]],[11,"rem_assign","std","",544,[[]]],[11,"rem_assign","","",555,[[]]],[11,"rem_assign","","",550,[[]]],[11,"rem_assign","std::num","",133,[[["wrapping",3]]]],[11,"rem_assign","std","",553,[[]]],[11,"rem_assign","std::num","",133,[[["wrapping",3]]]],[11,"rem_assign","","",133,[[["wrapping",3]]]],[11,"rem_assign","","",133,[[["wrapping",3]]]],[11,"rem_assign","std","",546,[[]]],[11,"rem_assign","","",552,[[]]],[11,"rem_assign","","",549,[[]]],[11,"rem_assign","std::num","",133,[[["wrapping",3]]]],[11,"rem_assign","","",133,[[["wrapping",3]]]],[11,"rem_assign","std","",555,[[]]],[11,"rem_assign","std::num","",133,[[["wrapping",3]]]],[11,"rem_assign","std","",549,[[]]],[11,"rem_assign","std::num","",133,[[["wrapping",3]]]],[11,"rem_assign","","",133,[[["wrapping",3]]]],[11,"rem_assign","std","",551,[[]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::sync::atomic","",501,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::pin","",344,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",565,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",541,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::ptr","",345,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",565,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",541,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"sub_assign","","",551,[[]]],[11,"sub_assign","std::time","",527,[[["duration",3]]]],[11,"sub_assign","std","",545,[[]]],[11,"sub_assign","","",547,[[]]],[11,"sub_assign","","",553,[[]]],[11,"sub_assign","","",555,[[]]],[11,"sub_assign","","",549,[[]]],[11,"sub_assign","std::num","",133,[[["wrapping",3]]]],[11,"sub_assign","std","",552,[[]]],[11,"sub_assign","","",543,[[]]],[11,"sub_assign","std::num","",133,[[["wrapping",3]]]],[11,"sub_assign","","",133,[[["wrapping",3]]]],[11,"sub_assign","std","",554,[[]]],[11,"sub_assign","std::num","",133,[[["wrapping",3]]]],[11,"sub_assign","std","",548,[[]]],[11,"sub_assign","","",550,[[]]],[11,"sub_assign","","",552,[[]]],[11,"sub_assign","std::num","",133,[[["wrapping",3]]]],[11,"sub_assign","std","",553,[[]]],[11,"sub_assign","std::num","",133,[[["wrapping",3]]]],[11,"sub_assign","std","",542,[[]]],[11,"sub_assign","","",544,[[]]],[11,"sub_assign","","",545,[[]]],[11,"sub_assign","","",542,[[]]],[11,"sub_assign","","",548,[[]]],[11,"sub_assign","std::num","",133,[[["wrapping",3]]]],[11,"sub_assign","std","",546,[[]]],[11,"sub_assign","std::num","",133,[[["wrapping",3]]]],[11,"sub_assign","","",133,[[["wrapping",3]]]],[11,"sub_assign","std","",550,[[]]],[11,"sub_assign","std::num","",133,[[["wrapping",3]]]],[11,"sub_assign","std","",551,[[]]],[11,"sub_assign","","",547,[[]]],[11,"sub_assign","std::num","",133,[[["wrapping",3]]]],[11,"sub_assign","","",133,[[["wrapping",3]]]],[11,"sub_assign","std","",546,[[]]],[11,"sub_assign","","",555,[[]]],[11,"sub_assign","","",549,[[]]],[11,"sub_assign","std::num","",133,[[["wrapping",3]]]],[11,"sub_assign","","",133,[[["wrapping",3]]]],[11,"sub_assign","","",133,[[["wrapping",3]]]],[11,"sub_assign","","",133,[[["wrapping",3]]]],[11,"sub_assign","","",133,[[["wrapping",3]]]],[11,"sub_assign","","",133,[[["wrapping",3]]]],[11,"sub_assign","","",133,[[["wrapping",3]]]],[11,"sub_assign","std","",544,[[]]],[11,"sub_assign","std::num","",133,[[["wrapping",3]]]],[11,"sub_assign","std","",543,[[]]],[11,"sub_assign","std::num","",133,[[["wrapping",3]]]],[11,"sub_assign","std","",554,[[]]],[11,"sub_assign","std::num","",133,[[["wrapping",3]]]],[11,"sub_assign","","",133,[[["wrapping",3]]]],[11,"sub_assign","","",133,[[["wrapping",3]]]],[11,"haystack","std::str::pattern","",249,[[]]],[11,"next","","",249,[[],["searchstep",4]]],[11,"next_match","","",249,[[],["option",4]]],[11,"haystack","","",246,[[]]],[11,"next","","",246,[[],["searchstep",4]]],[11,"next_match","","",246,[[],["option",4]]],[11,"haystack","","",248,[[]]],[11,"next","","",248,[[],["searchstep",4]]],[11,"next_match","","",248,[[],["option",4]]],[11,"next_reject","","",248,[[],["option",4]]],[11,"haystack","","",247,[[]]],[11,"next","","",247,[[],["searchstep",4]]],[11,"next_match","","",247,[[],["option",4]]],[11,"next_reject","","",247,[[],["option",4]]],[11,"bitxor","std","",542,[[]]],[11,"bitxor","","",542,[[]]],[11,"bitxor","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitxor","std","",559,[[]]],[11,"bitxor","","",559,[[]]],[11,"bitxor","","",544,[[]]],[11,"bitxor","","",543,[[]]],[11,"bitxor","","",550,[[]]],[11,"bitxor","","",542,[[]]],[11,"bitxor","std::num","",133,[[["wrapping",3]]]],[11,"bitxor","std","",559,[[]]],[11,"bitxor","","",545,[[]]],[11,"bitxor","","",548,[[]]],[11,"bitxor","","",551,[[]]],[11,"bitxor","","",544,[[]]],[11,"bitxor","std::num","",133,[[["wrapping",3]]]],[11,"bitxor","std","",553,[[]]],[11,"bitxor","","",550,[[]]],[11,"bitxor","","",546,[[]]],[11,"bitxor","","",547,[[]]],[11,"bitxor","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitxor","","",133,[[["wrapping",3]]]],[11,"bitxor","std","",552,[[]]],[11,"bitxor","","",550,[[]]],[11,"bitxor","std::num","",133,[[["wrapping",3]]]],[11,"bitxor","std","",551,[[]]],[11,"bitxor","","",559,[[]]],[11,"bitxor","","",548,[[]]],[11,"bitxor","std::num","",133,[[["wrapping",3]]]],[11,"bitxor","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitxor","std","",551,[[]]],[11,"bitxor","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitxor","std","",542,[[]]],[11,"bitxor","","",548,[[]]],[11,"bitxor","","",545,[[]]],[11,"bitxor","","",553,[[]]],[11,"bitxor","","",553,[[]]],[11,"bitxor","","",543,[[]]],[11,"bitxor","","",553,[[]]],[11,"bitxor","std::num","",133,[[["wrapping",3]]]],[11,"bitxor","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitxor","std","",546,[[]]],[11,"bitxor","","",550,[[]]],[11,"bitxor","","",546,[[]]],[11,"bitxor","","",552,[[]]],[11,"bitxor","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitxor","","",133,[[["wrapping",3]]]],[11,"bitxor","std","",552,[[]]],[11,"bitxor","std::num","",133,[[["wrapping",3]]]],[11,"bitxor","","",133,[[["wrapping",3]]]],[11,"bitxor","std","",543,[[]]],[11,"bitxor","","",547,[[]]],[11,"bitxor","","",547,[[]]],[11,"bitxor","","",549,[[]]],[11,"bitxor","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitxor","std","",551,[[]]],[11,"bitxor","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitxor","std","",549,[[]]],[11,"bitxor","","",545,[[]]],[11,"bitxor","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitxor","","",133,[[["wrapping",3]]]],[11,"bitxor","std","",548,[[]]],[11,"bitxor","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitxor","std","",545,[[]]],[11,"bitxor","","",544,[[]]],[11,"bitxor","std::num","",133,[[["wrapping",3]]]],[11,"bitxor","std","",549,[[]]],[11,"bitxor","","",552,[[]]],[11,"bitxor","std::num","",133,[[["wrapping",3]]]],[11,"bitxor","std","",547,[[]]],[11,"bitxor","","",546,[[]]],[11,"bitxor","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitxor","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitxor","std","",543,[[]]],[11,"bitxor","","",549,[[]]],[11,"bitxor","","",544,[[]]],[11,"as_inner","std::iter","",327,[[]]],[11,"as_inner","","",324,[[]]],[11,"as_inner","","",318,[[]]],[11,"as_inner","","",330,[[]]],[11,"as_inner","","",322,[[]]],[11,"as_inner","","",328,[[]]],[11,"as_inner","","",319,[[]]],[11,"as_inner","","",329,[[]]],[11,"as_inner","","",331,[[]]],[11,"as_inner","","",332,[[]]],[11,"as_inner","","",314,[[]]],[11,"as_inner","","",323,[[]]],[11,"as_inner","","",325,[[]]],[11,"as_inner","","",320,[[]]],[11,"extend","std","",556,[[]]],[11,"extend_one","","",556,[[]]],[11,"from","std::num","",472,[[["nonzeroi8",3]],["nonzeroi16",3]]],[11,"from","std","",542,[[]]],[11,"from","","",543,[[]]],[11,"from","std::num","",471,[[["nonzeroi16",3]],["nonzeroi128",3]]],[11,"from","std::cell","",285,[[],["cell",3]]],[11,"from","std","Converts a <code>NonZeroI64</code> into an <code>i64</code>",543,[[["nonzeroi64",3]]]],[11,"from","std::num","",471,[[["nonzerou16",3]],["nonzeroi128",3]]],[11,"from","std","",543,[[]]],[11,"from","","Converts a <code>NonZeroI8</code> into an <code>i8</code>",544,[[["nonzeroi8",3]]]],[11,"from","","",548,[[]]],[11,"from","","",548,[[]]],[11,"from","","",547,[[]]],[11,"from","std::num","",474,[[["nonzerou16",3]],["nonzeroi64",3]]],[11,"from","","",470,[[],["tryfrominterror",3]]],[11,"from","","",473,[[["nonzerou8",3]],["nonzeroi32",3]]],[11,"from","std","",550,[[]]],[11,"from","","",551,[[]]],[11,"from","std::num","",476,[[["nonzeroi16",3]],["nonzeroisize",3]]],[11,"from","std::convert","",301,[[],["infallible",4]]],[11,"from","std","Converts a <code>NonZeroI16</code> into an <code>i16</code>",551,[[["nonzeroi16",3]]]],[11,"from","","",553,[[]]],[11,"from","","Converts a <code>NonZeroU8</code> into an <code>u8</code>",542,[[["nonzerou8",3]]]],[11,"from","","",548,[[]]],[11,"from","","",554,[[]]],[11,"from","std::sync::atomic","Converts an <code>i32</code> into an <code>AtomicI32</code>.",506,[[],["atomici32",3]]],[11,"from","std::num","",471,[[["nonzeroi32",3]],["nonzeroi128",3]]],[11,"from","","",477,[[["nonzerou32",3]],["nonzerou128",3]]],[11,"from","std::task","Convert to a <code>Ready</code> variant.",200,[[],["poll",4]]],[11,"from","std::sync::atomic","Converts an <code>isize</code> into an <code>AtomicIsize</code>.",510,[[],["atomicisize",3]]],[11,"from","std","",555,[[]]],[11,"from","std::array","",283,[[["infallible",4]],["tryfromsliceerror",3]]],[11,"from","std","Converts a <code>NonZeroU64</code> into an <code>u64</code>",552,[[["nonzerou64",3]]]],[11,"from","std::option","Converts from <code>&mut Option<T></code> to <code>Option<&mut T></code>",93,[[["option",4]],["option",4]]],[11,"from","std","",550,[[]]],[11,"from","std::num","",476,[[["nonzeroi8",3]],["nonzeroisize",3]]],[11,"from","","",472,[[["nonzerou8",3]],["nonzeroi16",3]]],[11,"from","","",479,[[["nonzerou16",3]],["nonzerou32",3]]],[11,"from","std","",555,[[]]],[11,"from","std::ptr","",345,[[["unique",3]],["nonnull",3]]],[11,"from","std::sync::atomic","Converts an <code>i64</code> into an <code>AtomicI64</code>.",508,[[],["atomici64",3]]],[11,"from","std::num","",480,[[["nonzerou32",3]],["nonzerou64",3]]],[11,"from","","",474,[[["nonzerou8",3]],["nonzeroi64",3]]],[11,"from","std::sync::atomic","Converts an <code>u64</code> into an <code>AtomicU64</code>.",509,[[],["atomicu64",3]]],[11,"from","std","",552,[[]]],[11,"from","","",548,[[]]],[11,"from","std::num","",473,[[["nonzerou16",3]],["nonzeroi32",3]]],[11,"from","","",473,[[["nonzeroi16",3]],["nonzeroi32",3]]],[11,"from","std","Converts a <code>NonZeroU128</code> into an <code>u128</code>",546,[[["nonzerou128",3]]]],[11,"from","","",553,[[]]],[11,"from","","Converts a <code>NonZeroUsize</code> into an <code>usize</code>",545,[[["nonzerousize",3]]]],[11,"from","","",555,[[]]],[11,"from","","Converts a [<code>u8</code>] into a [<code>char</code>].",564,[[]]],[11,"from","std::num","",470,[[["infallible",4]],["tryfrominterror",3]]],[11,"from","std","",553,[[]]],[11,"from","std::sync::atomic","Converts an <code>u8</code> into an <code>AtomicU8</code>.",503,[[],["atomicu8",3]]],[11,"from","std","Converts a <code>NonZeroU32</code> into an <code>u32</code>",547,[[["nonzerou32",3]]]],[11,"from","std::option","Copies <code>val</code> into a new <code>Some</code>.",93,[[],["option",4]]],[11,"from","std","",546,[[]]],[11,"from","std::num","",478,[[["nonzerou8",3]],["nonzerou16",3]]],[11,"from","std","Converts a [<code>char</code>] into a [<code>u32</code>].",547,[[]]],[11,"from","std::cell","",286,[[],["refcell",3]]],[11,"from","std::num","",479,[[["nonzerou8",3]],["nonzerou32",3]]],[11,"from","","",473,[[["nonzeroi8",3]],["nonzeroi32",3]]],[11,"from","std","",543,[[]]],[11,"from","std::num","",474,[[["nonzeroi32",3]],["nonzeroi64",3]]],[11,"from","std","",552,[[]]],[11,"from","","",546,[[]]],[11,"from","std::num","",477,[[["nonzerou64",3]],["nonzerou128",3]]],[11,"from","std::option","Converts from <code>&Option<T></code> to <code>Option<&T></code>.",93,[[["option",4]],["option",4]]],[11,"from","std::sync::atomic","Converts an <code>u16</code> into an <code>AtomicU16</code>.",505,[[],["atomicu16",3]]],[11,"from","std::lazy","",528,[[],["oncecell",3]]],[11,"from","std","",544,[[]]],[11,"from","std::num","",480,[[["nonzerou16",3]],["nonzerou64",3]]],[11,"from","","",476,[[["nonzerou8",3]],["nonzeroisize",3]]],[11,"from","","",471,[[["nonzerou8",3]],["nonzeroi128",3]]],[11,"from","","",474,[[["nonzeroi16",3]],["nonzeroi64",3]]],[11,"from","std","",550,[[]]],[11,"from","std::num","",477,[[["nonzerou16",3]],["nonzerou128",3]]],[11,"from","std::ptr","",345,[[],["nonnull",3]]],[11,"from","std","",552,[[]]],[11,"from","","",554,[[]]],[11,"from","","",547,[[]]],[11,"from","","",551,[[]]],[11,"from","","",548,[[]]],[11,"from","","Converts a <code>NonZeroI32</code> into an <code>i32</code>",550,[[["nonzeroi32",3]]]],[11,"from","std::num","",480,[[["nonzerou8",3]],["nonzerou64",3]]],[11,"from","std","",543,[[]]],[11,"from","","",547,[[]]],[11,"from","std::num","",482,[[["nonzerou16",3]],["nonzerousize",3]]],[11,"from","std","",549,[[]]],[11,"from","std::num","",471,[[["nonzerou32",3]],["nonzeroi128",3]]],[11,"from","","",482,[[["nonzerou8",3]],["nonzerousize",3]]],[11,"from","std","",555,[[]]],[11,"from","std::sync::atomic","Converts an <code>usize</code> into an <code>AtomicUsize</code>.",511,[[],["atomicusize",3]]],[11,"from","std","",555,[[]]],[11,"from","","",552,[[]]],[11,"from","std::num","",471,[[["nonzeroi64",3]],["nonzeroi128",3]]],[11,"from","","",471,[[["nonzeroi8",3]],["nonzeroi128",3]]],[11,"from","std","",543,[[]]],[11,"from","std::num","",474,[[["nonzerou32",3]],["nonzeroi64",3]]],[11,"from","std","",545,[[]]],[11,"from","","",554,[[]]],[11,"from","","",550,[[]]],[11,"from","","",548,[[]]],[11,"from","","",555,[[]]],[11,"from","std::sync::atomic","Converts an <code>i16</code> into an <code>AtomicI16</code>.",504,[[],["atomici16",3]]],[11,"from","std","",543,[[]]],[11,"from","","",549,[[]]],[11,"from","","",546,[[]]],[11,"from","std::num","",477,[[["nonzerou8",3]],["nonzerou128",3]]],[11,"from","std::sync::atomic","Converts a <code>bool</code> into an <code>AtomicBool</code>.",500,[[],["atomicbool",3]]],[11,"from","std","",546,[[]]],[11,"from","","",546,[[]]],[11,"from","","",543,[[]]],[11,"from","","",550,[[]]],[11,"from","std::num","",474,[[["nonzeroi8",3]],["nonzeroi64",3]]],[11,"from","std::cell","",291,[[],["unsafecell",3]]],[11,"from","std::sync::atomic","",501,[[],["atomicptr",3]]],[11,"from","std::num","",471,[[["nonzerou64",3]],["nonzeroi128",3]]],[11,"from","std","Converts a <code>NonZeroI128</code> into an <code>i128</code>",548,[[["nonzeroi128",3]]]],[11,"from","","",548,[[]]],[11,"from","","",554,[[]]],[11,"from","std::sync::atomic","Converts an <code>u32</code> into an <code>AtomicU32</code>.",507,[[],["atomicu32",3]]],[11,"from","std","",545,[[]]],[11,"from","","Converts a <code>NonZeroIsize</code> into an <code>isize</code>",553,[[["nonzeroisize",3]]]],[11,"from","","",548,[[]]],[11,"from","","",548,[[]]],[11,"from","","Converts a <code>NonZeroU16</code> into an <code>u16</code>",549,[[["nonzerou16",3]]]],[11,"from","","",555,[[]]],[11,"from","","",551,[[]]],[11,"from","","",545,[[]]],[11,"from","std::ptr","",345,[[],["nonnull",3]]],[11,"from","std::sync::atomic","Converts an <code>i8</code> into an <code>AtomicI8</code>.",502,[[],["atomici8",3]]],[11,"from","std","",553,[[]]],[11,"bitor","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitor","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitor","std","",553,[[]]],[11,"bitor","","",551,[[]]],[11,"bitor","","",551,[[["nonzeroi16",3]]]],[11,"bitor","","",552,[[]]],[11,"bitor","","",547,[[["nonzerou32",3]]]],[11,"bitor","","",545,[[]]],[11,"bitor","","",545,[[]]],[11,"bitor","std::num","",133,[[["wrapping",3]]]],[11,"bitor","std","",553,[[]]],[11,"bitor","","",543,[[]]],[11,"bitor","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitor","","",482,[[]]],[11,"bitor","std","",542,[[]]],[11,"bitor","std::num","",481,[[["nonzerou8",3]]]],[11,"bitor","","",471,[[]]],[11,"bitor","std","",548,[[["nonzeroi128",3]]]],[11,"bitor","","",546,[[]]],[11,"bitor","","",544,[[]]],[11,"bitor","","",545,[[]]],[11,"bitor","std::num","",474,[[]]],[11,"bitor","","",476,[[["nonzeroisize",3]]]],[11,"bitor","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitor","std","",550,[[]]],[11,"bitor","std::num","",475,[[]]],[11,"bitor","std","",548,[[]]],[11,"bitor","","",550,[[]]],[11,"bitor","std::num","",133,[[["wrapping",3]]]],[11,"bitor","std","",548,[[]]],[11,"bitor","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitor","std","",546,[[]]],[11,"bitor","std::num","",480,[[]]],[11,"bitor","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitor","std","",549,[[]]],[11,"bitor","","",545,[[["nonzerousize",3]]]],[11,"bitor","","",552,[[["nonzerou64",3]]]],[11,"bitor","std::num","",479,[[]]],[11,"bitor","","",479,[[["nonzerou32",3]]]],[11,"bitor","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitor","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitor","","",480,[[["nonzerou64",3]]]],[11,"bitor","std","",543,[[]]],[11,"bitor","std::num","",133,[[["wrapping",3]]]],[11,"bitor","std","",544,[[]]],[11,"bitor","","",550,[[]]],[11,"bitor","","",543,[[]]],[11,"bitor","","",559,[[]]],[11,"bitor","","",549,[[["nonzerou16",3]]]],[11,"bitor","std::num","",481,[[]]],[11,"bitor","","",133,[[["wrapping",3]]]],[11,"bitor","std","",548,[[]]],[11,"bitor","std::num","",477,[[["nonzerou128",3]]]],[11,"bitor","std","",543,[[]]],[11,"bitor","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitor","std","",546,[[]]],[11,"bitor","std::num","",474,[[["nonzeroi64",3]]]],[11,"bitor","","",478,[[]]],[11,"bitor","std","",552,[[]]],[11,"bitor","","",547,[[]]],[11,"bitor","","",551,[[]]],[11,"bitor","std::num","",477,[[]]],[11,"bitor","std","",542,[[]]],[11,"bitor","","",550,[[["nonzeroi32",3]]]],[11,"bitor","std::num","",472,[[]]],[11,"bitor","","",473,[[["nonzeroi32",3]]]],[11,"bitor","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitor","std","",551,[[]]],[11,"bitor","std::num","",133,[[["wrapping",3]]]],[11,"bitor","std","",544,[[]]],[11,"bitor","","",543,[[["nonzeroi64",3]]]],[11,"bitor","","",559,[[]]],[11,"bitor","","",548,[[]]],[11,"bitor","","",544,[[["nonzeroi8",3]]]],[11,"bitor","","",547,[[]]],[11,"bitor","","",549,[[]]],[11,"bitor","","",542,[[]]],[11,"bitor","std::num","",473,[[]]],[11,"bitor","std","",546,[[]]],[11,"bitor","std::num","",133,[[["wrapping",3]]]],[11,"bitor","std","",553,[[["nonzeroisize",3]]]],[11,"bitor","","",551,[[]]],[11,"bitor","","",547,[[]]],[11,"bitor","","",552,[[]]],[11,"bitor","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitor","std","",544,[[]]],[11,"bitor","","",545,[[]]],[11,"bitor","","",542,[[]]],[11,"bitor","","",546,[[["nonzerou128",3]]]],[11,"bitor","","",549,[[]]],[11,"bitor","std::num","",133,[[["wrapping",3]]]],[11,"bitor","","",471,[[["nonzeroi128",3]]]],[11,"bitor","","",133,[[["wrapping",3]]]],[11,"bitor","","",133,[[["wrapping",3]]]],[11,"bitor","","",133,[[["wrapping",3]]]],[11,"bitor","std","",547,[[]]],[11,"bitor","std::num","",478,[[["nonzerou16",3]]]],[11,"bitor","","",472,[[["nonzeroi16",3]]]],[11,"bitor","std","",559,[[]]],[11,"bitor","","",553,[[]]],[11,"bitor","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitor","","",475,[[["nonzeroi8",3]]]],[11,"bitor","std","",559,[[]]],[11,"bitor","std::num","",133,[[["wrapping",3]]]],[11,"bitor","std","",553,[[]]],[11,"bitor","std::num","",133,[[["wrapping",3]]]],[11,"bitor","std","",542,[[["nonzerou8",3]]]],[11,"bitor","","",552,[[]]],[11,"bitor","","",549,[[]]],[11,"bitor","std::num","",482,[[["nonzerousize",3]]]],[11,"bitor","","",476,[[]]],[11,"bitor","std","",550,[[]]],[11,"try_from","","Try to create the target number type from a source number …",542,[[],["result",4]]],[11,"try_from","std::num","",481,[[["nonzeroi64",3]],[["nonzerou8",3],["result",4]]]],[11,"try_from","std","Try to create the target number type from a source number …",543,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",552,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",547,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",553,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",542,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",543,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",547,[[],["result",4]]],[11,"try_from","std::num","",477,[[],[["result",4],["nonzerou128",3]]]],[11,"try_from","","",479,[[],[["nonzerou32",3],["result",4]]]],[11,"try_from","","",480,[[],[["result",4],["nonzerou64",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",547,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",551,[[],["result",4]]],[11,"try_from","std::num","",481,[[["nonzerousize",3]],[["result",4],["nonzerou8",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",552,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",548,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",543,[[],["result",4]]],[11,"try_from","std::num","",474,[[["nonzeroi128",3]],[["result",4],["nonzeroi64",3]]]],[11,"try_from","","",471,[[["nonzerou128",3]],[["result",4],["nonzeroi128",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",546,[[],["result",4]]],[11,"try_from","std::num","",478,[[["nonzeroi16",3]],[["result",4],["nonzerou16",3]]]],[11,"try_from","","",479,[[["nonzeroi8",3]],[["nonzerou32",3],["result",4]]]],[11,"try_from","","",480,[[["nonzerousize",3]],[["result",4],["nonzerou64",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",550,[[],["result",4]]],[11,"try_from","std::num","",473,[[["nonzerou32",3]],[["nonzeroi32",3],["result",4]]]],[11,"try_from","std","Try to create the target number type from a source number …",551,[[],["result",4]]],[11,"try_from","std::num","",472,[[["nonzeroi64",3]],[["result",4],["nonzeroi16",3]]]],[11,"try_from","","",481,[[["nonzerou32",3]],[["nonzerou8",3],["result",4]]]],[11,"try_from","std","Try to create the target number type from a source number …",545,[[],["result",4]]],[11,"try_from","std::num","",478,[[["nonzeroi32",3]],[["result",4],["nonzerou16",3]]]],[11,"try_from","","",473,[[["nonzerousize",3]],[["nonzeroi32",3],["result",4]]]],[11,"try_from","std","Try to create the target number type from a source number …",549,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",550,[[],["result",4]]],[11,"try_from","std::num","",480,[[["nonzerou128",3]],[["result",4],["nonzerou64",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",551,[[],["result",4]]],[11,"try_from","std::num","",480,[[["nonzeroi64",3]],[["nonzerou64",3],["result",4]]]],[11,"try_from","","",472,[[["nonzeroi32",3]],[["nonzeroi16",3],["result",4]]]],[11,"try_from","","",482,[[["nonzeroisize",3]],[["result",4],["nonzerousize",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",547,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",544,[[],["result",4]]],[11,"try_from","std::num","",474,[[["nonzerou64",3]],[["result",4],["nonzeroi64",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",546,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",545,[[],["result",4]]],[11,"try_from","std::num","",479,[[["nonzeroi64",3]],[["nonzerou32",3],["result",4]]]],[11,"try_from","std","Try to create the target number type from a source number …",553,[[],["result",4]]],[11,"try_from","std::num","",481,[[["nonzeroi16",3]],[["nonzerou8",3],["result",4]]]],[11,"try_from","std","Try to create the target number type from a source number …",549,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",549,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",545,[[],["result",4]]],[11,"try_from","std::num","",479,[[["nonzerou128",3]],[["result",4],["nonzerou32",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",551,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",553,[[],["result",4]]],[11,"try_from","std::num","",482,[[["nonzeroi128",3]],[["result",4],["nonzerousize",3]]]],[11,"try_from","","",472,[[["nonzerou64",3]],[["result",4],["nonzeroi16",3]]]],[11,"try_from","","",473,[[["nonzeroisize",3]],[["result",4],["nonzeroi32",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",552,[[],["result",4]]],[11,"try_from","std::num","",480,[[["nonzeroi16",3]],[["nonzerou64",3],["result",4]]]],[11,"try_from","std","Try to create the target number type from a source number …",549,[[],["result",4]]],[11,"try_from","std::num","",478,[[["nonzeroisize",3]],[["result",4],["nonzerou16",3]]]],[11,"try_from","","",473,[[["nonzeroi128",3]],[["result",4],["nonzeroi32",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",552,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",542,[[],["result",4]]],[11,"try_from","std::num","",475,[[["nonzeroi128",3]],[["result",4],["nonzeroi8",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",542,[[],["result",4]]],[11,"try_from","std::num","",482,[[["nonzeroi64",3]],[["nonzerousize",3],["result",4]]]],[11,"try_from","","",482,[[["nonzeroi16",3]],[["result",4],["nonzerousize",3]]]],[11,"try_from","","",475,[[["nonzerou16",3]],[["result",4],["nonzeroi8",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",552,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",544,[[],["result",4]]],[11,"try_from","std::num","",479,[[["nonzeroi32",3]],[["nonzerou32",3],["result",4]]]],[11,"try_from","std","Try to create the target number type from a source number …",542,[[],["result",4]]],[11,"try_from","std::num","",481,[[],[["nonzerou8",3],["result",4]]]],[11,"try_from","std","Try to create the target number type from a source number …",546,[[],["result",4]]],[11,"try_from","std::num","",478,[[["nonzerou32",3]],[["result",4],["nonzerou16",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",547,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",553,[[],["result",4]]],[11,"try_from","std::num","",481,[[["nonzeroi32",3]],[["result",4],["nonzerou8",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",545,[[],["result",4]]],[11,"try_from","std::num","",472,[[["nonzerou32",3]],[["result",4],["nonzeroi16",3]]]],[11,"try_from","","",481,[[["nonzeroisize",3]],[["nonzerou8",3],["result",4]]]],[11,"try_from","","",476,[[["nonzerou16",3]],[["nonzeroisize",3],["result",4]]]],[11,"try_from","std","Try to create the target number type from a source number …",546,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",545,[[],["result",4]]],[11,"try_from","","",558,[[],[["result",4],["tryfromsliceerror",3]]]],[11,"try_from","","Try to create the target number type from a source number …",553,[[],["result",4]]],[11,"try_from","std::num","",475,[[["nonzeroi32",3]],[["result",4],["nonzeroi8",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",544,[[],["result",4]]],[11,"try_from","","",558,[[],[["result",4],["tryfromsliceerror",3]]]],[11,"try_from","","Try to create the target number type from a source number …",549,[[],["result",4]]],[11,"try_from","std::num","",478,[[],[["result",4],["nonzerou16",3]]]],[11,"try_from","","",480,[[["nonzeroi128",3]],[["nonzerou64",3],["result",4]]]],[11,"try_from","std","Try to create the target number type from a source number …",542,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",548,[[],["result",4]]],[11,"try_from","std::num","",477,[[["nonzeroi16",3]],[["result",4],["nonzerou128",3]]]],[11,"try_from","","",474,[[["nonzerou128",3]],[["result",4],["nonzeroi64",3]]]],[11,"try_from","","",481,[[["nonzerou128",3]],[["result",4],["nonzerou8",3]]]],[11,"try_from","","",482,[[["nonzeroi8",3]],[["nonzerousize",3],["result",4]]]],[11,"try_from","std","Try to create the target number type from a source number …",547,[[],["result",4]]],[11,"try_from","std::num","",482,[[],[["result",4],["nonzerousize",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",546,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",552,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",545,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",545,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",542,[[],["result",4]]],[11,"try_from","std::num","",482,[[["nonzerou128",3]],[["result",4],["nonzerousize",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",542,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",544,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",542,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",551,[[],["result",4]]],[11,"try_from","std::num","",479,[[["nonzeroisize",3]],[["nonzerou32",3],["result",4]]]],[11,"try_from","","",478,[[["nonzeroi8",3]],[["result",4],["nonzerou16",3]]]],[11,"try_from","","",474,[[["nonzerousize",3]],[["result",4],["nonzeroi64",3]]]],[11,"try_from","","",471,[[["nonzerousize",3]],[["result",4],["nonzeroi128",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",544,[[],["result",4]]],[11,"try_from","std::num","",472,[[["nonzerousize",3]],[["result",4],["nonzeroi16",3]]]],[11,"try_from","","",471,[[["nonzeroisize",3]],[["result",4],["nonzeroi128",3]]]],[11,"try_from","","",475,[[["nonzeroi16",3]],[["result",4],["nonzeroi8",3]]]],[11,"try_from","","",473,[[["nonzerou128",3]],[["nonzeroi32",3],["result",4]]]],[11,"try_from","","",475,[[["nonzerou64",3]],[["nonzeroi8",3],["result",4]]]],[11,"try_from","std","Try to create the target number type from a source number …",549,[[],["result",4]]],[11,"try_from","std::num","",481,[[["nonzerou16",3]],[["nonzerou8",3],["result",4]]]],[11,"try_from","std","Try to create the target number type from a source number …",546,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",547,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",549,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",553,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",552,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",544,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",551,[[],["result",4]]],[11,"try_from","std::num","",476,[[["nonzeroi128",3]],[["nonzeroisize",3],["result",4]]]],[11,"try_from","std","Try to create the target number type from a source number …",546,[[],["result",4]]],[11,"try_from","std::num","",478,[[["nonzeroi128",3]],[["nonzerou16",3],["result",4]]]],[11,"try_from","","",479,[[["nonzerousize",3]],[["nonzerou32",3],["result",4]]]],[11,"try_from","","",476,[[["nonzerou128",3]],[["result",4],["nonzeroisize",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",552,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",550,[[],["result",4]]],[11,"try_from","std::num","",476,[[["nonzeroi64",3]],[["result",4],["nonzeroisize",3]]]],[11,"try_from","","",481,[[["nonzeroi8",3]],[["result",4],["nonzerou8",3]]]],[11,"try_from","std","",564,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",549,[[],["result",4]]],[11,"try_from","std::num","",477,[[["nonzeroi8",3]],[["result",4],["nonzerou128",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",547,[[],["result",4]]],[11,"try_from","std::num","",475,[[["nonzeroisize",3]],[["result",4],["nonzeroi8",3]]]],[11,"try_from","","",481,[[["nonzeroi128",3]],[["result",4],["nonzerou8",3]]]],[11,"try_from","","",475,[[["nonzeroi64",3]],[["result",4],["nonzeroi8",3]]]],[11,"try_from","","",473,[[["nonzeroi64",3]],[["result",4],["nonzeroi32",3]]]],[11,"try_from","","",477,[[["nonzerousize",3]],[["result",4],["nonzerou128",3]]]],[11,"try_from","","",476,[[["nonzeroi32",3]],[["result",4],["nonzeroisize",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",543,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",548,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",549,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",544,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",544,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",550,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",545,[[],["result",4]]],[11,"try_from","std::num","",476,[[["nonzerou64",3]],[["result",4],["nonzeroisize",3]]]],[11,"try_from","","",475,[[["nonzerou8",3]],[["nonzeroi8",3],["result",4]]]],[11,"try_from","","",479,[[["nonzeroi16",3]],[["result",4],["nonzerou32",3]]]],[11,"try_from","","",475,[[],[["nonzeroi8",3],["result",4]]]],[11,"try_from","","",481,[[["nonzerou64",3]],[["result",4],["nonzerou8",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",545,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",553,[[],["result",4]]],[11,"try_from","std::num","",482,[[["nonzerou32",3]],[["result",4],["nonzerousize",3]]]],[11,"try_from","","",472,[[["nonzeroi128",3]],[["nonzeroi16",3],["result",4]]]],[11,"try_from","","",480,[[["nonzeroi8",3]],[["nonzerou64",3],["result",4]]]],[11,"try_from","","",476,[[],[["result",4],["nonzeroisize",3]]]],[11,"try_from","","",482,[[["nonzerou64",3]],[["result",4],["nonzerousize",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",551,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",549,[[],["result",4]]],[11,"try_from","std::num","",479,[[["nonzeroi128",3]],[["nonzerou32",3],["result",4]]]],[11,"try_from","","",477,[[["nonzeroi64",3]],[["result",4],["nonzerou128",3]]]],[11,"try_from","","",478,[[["nonzerou64",3]],[["nonzerou16",3],["result",4]]]],[11,"try_from","std","Try to create the target number type from a source number …",550,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",544,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",543,[[],["result",4]]],[11,"try_from","std::num","",472,[[["nonzerou128",3]],[["nonzeroi16",3],["result",4]]]],[11,"try_from","std","Try to create the target number type from a source number …",551,[[],["result",4]]],[11,"try_from","std::num","",474,[[["nonzeroisize",3]],[["result",4],["nonzeroi64",3]]]],[11,"try_from","","",482,[[["nonzeroi32",3]],[["result",4],["nonzerousize",3]]]],[11,"try_from","","",472,[[["nonzeroisize",3]],[["result",4],["nonzeroi16",3]]]],[11,"try_from","","",477,[[["nonzeroisize",3]],[["result",4],["nonzerou128",3]]]],[11,"try_from","","",476,[[["nonzerousize",3]],[["result",4],["nonzeroisize",3]]]],[11,"try_from","","",477,[[["nonzeroi32",3]],[["result",4],["nonzerou128",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",550,[[],["result",4]]],[11,"try_from","std::num","",480,[[["nonzeroisize",3]],[["nonzerou64",3],["result",4]]]],[11,"try_from","","",475,[[["nonzerou128",3]],[["nonzeroi8",3],["result",4]]]],[11,"try_from","std","Try to create the target number type from a source number …",550,[[],["result",4]]],[11,"try_from","","",558,[[],[["tryfromsliceerror",3],["result",4]]]],[11,"try_from","std::num","",475,[[["nonzerou32",3]],[["result",4],["nonzeroi8",3]]]],[11,"try_from","","",479,[[["nonzerou64",3]],[["nonzerou32",3],["result",4]]]],[11,"try_from","std","Try to create the target number type from a source number …",547,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",551,[[],["result",4]]],[11,"try_from","std::num","",471,[[],[["result",4],["nonzeroi128",3]]]],[11,"try_from","","",474,[[],[["nonzeroi64",3],["result",4]]]],[11,"try_from","","",478,[[["nonzerousize",3]],[["result",4],["nonzerou16",3]]]],[11,"try_from","","",480,[[["nonzeroi32",3]],[["nonzerou64",3],["result",4]]]],[11,"try_from","std","Try to create the target number type from a source number …",542,[[],["result",4]]],[11,"try_from","std::num","",473,[[],[["nonzeroi32",3],["result",4]]]],[11,"try_from","","",478,[[["nonzerou128",3]],[["result",4],["nonzerou16",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",544,[[],["result",4]]],[11,"try_from","","Try to create the target number type from a source number …",544,[[],["result",4]]],[11,"try_from","std::num","",472,[[],[["nonzeroi16",3],["result",4]]]],[11,"try_from","std","Try to create the target number type from a source number …",542,[[],["result",4]]],[11,"try_from","std::num","",478,[[["nonzeroi64",3]],[["result",4],["nonzerou16",3]]]],[11,"try_from","","",473,[[["nonzerou64",3]],[["result",4],["nonzeroi32",3]]]],[11,"try_from","","",477,[[["nonzeroi128",3]],[["result",4],["nonzerou128",3]]]],[11,"try_from","std","Try to create the target number type from a source number …",553,[[],["result",4]]],[11,"try_from","std::num","",476,[[["nonzerou32",3]],[["result",4],["nonzeroisize",3]]]],[11,"try_from","","",472,[[["nonzerou16",3]],[["nonzeroi16",3],["result",4]]]],[11,"try_from","","",475,[[["nonzerousize",3]],[["nonzeroi8",3],["result",4]]]],[11,"borrow","std","",558,[[]]],[11,"borrow","","",541,[[]]],[11,"borrow","","",541,[[]]],[11,"fmt","","",548,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",552,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",555,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",551,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",541,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",546,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",550,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",553,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",541,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",549,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",547,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",554,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",544,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",545,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",542,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",543,[[["formatter",3]],[["result",4],["error",3]]]],[11,"drop","std::task","",533,[[]]],[11,"drop","std::array","",284,[[]]],[11,"drop","std::ffi","",431,[[]]],[11,"into_result","std::result","",95,[[],["result",4]]],[11,"from_ok","","",95,[[],["result",4]]],[11,"from_error","","",95,[[],["result",4]]],[11,"into_result","std::option","",93,[[],[["result",4],["noneerror",3]]]],[11,"from_ok","","",93,[[],["option",4]]],[11,"from_error","","",93,[[["noneerror",3]],["option",4]]],[11,"into_result","std::task","",200,[[],["result",4]]],[11,"from_error","","",200,[[],[["poll",4],["result",4]]]],[11,"from_ok","","",200,[[],[["poll",4],["result",4]]]],[11,"into_result","","",200,[[],["result",4]]],[11,"from_error","","",200,[[],[["poll",4],["option",4]]]],[11,"from_ok","","",200,[[],[["poll",4],["option",4]]]],[11,"into_result","std::ops","",92,[[],["result",4]]],[11,"from_error","","",92,[[],["controlflow",4]]],[11,"from_ok","","",92,[[],["controlflow",4]]],[11,"fmt","std::ascii","",351,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",554,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::array","",283,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",472,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",482,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",563,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",481,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",553,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",559,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",133,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",555,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",546,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::cell","",289,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",288,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",260,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::convert","",301,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",476,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::char","",295,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",468,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::char","",297,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::cell","",290,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",551,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",477,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",541,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",545,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",543,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",548,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",471,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",564,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::char","",296,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",300,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::alloc","",539,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",480,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::char","",298,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",258,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",478,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",544,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",541,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::panic","",489,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::char","",292,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",473,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::panic","",488,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::cell","",287,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",479,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",259,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",475,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",547,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::alloc","",537,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",552,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",542,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::fmt","",215,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",469,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::pin","",344,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::fmt","",214,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::char","",293,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",550,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",474,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::char","",294,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",560,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",470,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",257,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",256,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",549,[[["formatter",3]],[["result",4],["error",3]]]],[11,"start_bound","std::ops","",83,[[],["bound",4]]],[11,"end_bound","","",83,[[],["bound",4]]],[11,"start_bound","","",88,[[],["bound",4]]],[11,"end_bound","","",88,[[],["bound",4]]],[11,"start_bound","","",84,[[],["bound",4]]],[11,"end_bound","","",84,[[],["bound",4]]],[11,"start_bound","","",339,[[],["bound",4]]],[11,"end_bound","","",339,[[],["bound",4]]],[11,"start_bound","std","",562,[[],["bound",4]]],[11,"end_bound","","",562,[[],["bound",4]]],[11,"start_bound","std::ops","",339,[[],["bound",4]]],[11,"end_bound","","",339,[[],["bound",4]]],[11,"start_bound","","",338,[[],["bound",4]]],[11,"end_bound","","",338,[[],["bound",4]]],[11,"start_bound","","",85,[[],["bound",4]]],[11,"end_bound","","",85,[[],["bound",4]]],[11,"start_bound","","",85,[[],["bound",4]]],[11,"end_bound","","",85,[[],["bound",4]]],[11,"start_bound","","",88,[[],["bound",4]]],[11,"end_bound","","",88,[[],["bound",4]]],[11,"start_bound","std","",562,[[],["bound",4]]],[11,"end_bound","","",562,[[],["bound",4]]],[11,"start_bound","std::ops","",84,[[],["bound",4]]],[11,"end_bound","","",84,[[],["bound",4]]],[11,"start_bound","","",83,[[],["bound",4]]],[11,"end_bound","","",83,[[],["bound",4]]],[11,"from_str","std","",543,[[],[["parseinterror",3],["result",4]]]],[11,"from_str","","",545,[[],[["parseinterror",3],["result",4]]]],[11,"from_str","","",547,[[],[["parseinterror",3],["result",4]]]],[11,"from_str","","",552,[[],[["parseinterror",3],["result",4]]]],[11,"from_str","std::num","",473,[[],[["nonzeroi32",3],["result",4]]]],[11,"from_str","std","Parse a <code>bool</code> from a string.",559,[[],[["parseboolerror",3],["result",4]]]],[11,"from_str","","",542,[[],[["parseinterror",3],["result",4]]]],[11,"from_str","std::num","",475,[[],[["nonzeroi8",3],["result",4]]]],[11,"from_str","","",482,[[],[["result",4],["nonzerousize",3]]]],[11,"from_str","","",479,[[],[["nonzerou32",3],["result",4]]]],[11,"from_str","std","",549,[[],[["parseinterror",3],["result",4]]]],[11,"from_str","","",546,[[],[["result",4],["parseinterror",3]]]],[11,"from_str","","",544,[[],[["parseinterror",3],["result",4]]]],[11,"from_str","","",553,[[],[["parseinterror",3],["result",4]]]],[11,"from_str","std::num","",477,[[],[["result",4],["nonzerou128",3]]]],[11,"from_str","std","",564,[[],["result",4]]],[11,"from_str","std::num","",480,[[],[["nonzerou64",3],["result",4]]]],[11,"from_str","","",478,[[],[["result",4],["nonzerou16",3]]]],[11,"from_str","std","",550,[[],[["parseinterror",3],["result",4]]]],[11,"from_str","","Converts a string in base 10 to a float. Accepts an …",554,[[],[["result",4],["parsefloaterror",3]]]],[11,"from_str","std::num","",472,[[],[["nonzeroi16",3],["result",4]]]],[11,"from_str","","",471,[[],[["result",4],["nonzeroi128",3]]]],[11,"from_str","std","",548,[[],[["parseinterror",3],["result",4]]]],[11,"from_str","","",551,[[],[["parseinterror",3],["result",4]]]],[11,"from_str","std::num","",476,[[],[["nonzeroisize",3],["result",4]]]],[11,"from_str","","",474,[[],[["result",4],["nonzeroi64",3]]]],[11,"from_str","std","Converts a string in base 10 to a float. Accepts an …",555,[[],[["result",4],["parsefloaterror",3]]]],[11,"from_str","std::num","",481,[[],[["nonzerou8",3],["result",4]]]],[11,"deref","std::ffi","",430,[[],["valistimpl",3]]],[11,"deref","std::lazy","",529,[[]]],[11,"deref","std","",541,[[]]],[11,"deref","std::cell","",290,[[]]],[11,"deref","","",289,[[]]],[11,"deref","std::mem","",336,[[]]],[11,"deref","std::pin","",344,[[]]],[11,"deref","std","",541,[[]]],[11,"next_back","std::option","",342,[[],["option",4]]],[11,"next_back","std::slice","",237,[[],["option",4]]],[11,"nth_back","","",237,[[],["option",4]]],[11,"next_back","std::option","",340,[[],["option",4]]],[11,"next_back","std::iter","",328,[[],["option",4]]],[11,"nth_back","","",328,[[],["option",4]]],[11,"try_rfold","","",328,[[]]],[11,"rfold","","",328,[[]]],[11,"next_back","","",330,[[],["option",4]]],[11,"nth_back","","",330,[[],["option",4]]],[11,"try_rfold","","",330,[[]]],[11,"rfold","","",330,[[]]],[11,"next_back","","",312,[[],["option",4]]],[11,"try_rfold","","",312,[[]]],[11,"rfold","","",312,[[]]],[11,"next_back","std::slice","",240,[[],["option",4]]],[11,"next_back","","",225,[[],["option",4]]],[11,"nth_back","","",225,[[],["option",4]]],[11,"next_back","","",232,[[],["option",4]]],[11,"next_back","std::str","",261,[[],["option",4]]],[11,"next_back","std::slice","",230,[[],["option",4]]],[11,"nth_back","","",230,[[],["option",4]]],[11,"next_back","","",231,[[],["option",4]]],[11,"nth_back","","",231,[[],["option",4]]],[11,"next_back","","",228,[[],["option",4]]],[11,"nth_back","","",228,[[],["option",4]]],[11,"next_back","std::iter","",322,[[],["option",4]]],[11,"nth_back","","",322,[[],["option",4]]],[11,"try_rfold","","",322,[[]]],[11,"rfold","","",322,[[]]],[11,"rfind","","",322,[[],["option",4]]],[11,"next_back","std::str","",251,[[],["option",4]]],[11,"next_back","std::ascii","",351,[[],["option",4]]],[11,"next_back","std::str","",264,[[],["option",4]]],[11,"next_back","std::iter","",313,[[],["option",4]]],[11,"try_rfold","","",313,[[]]],[11,"rfold","","",313,[[]]],[11,"next_back","std::str","",268,[[],["option",4]]],[11,"next_back","std::result","",347,[[],["option",4]]],[11,"next_back","std::iter","",332,[[],["option",4]]],[11,"next_back","std::slice","",236,[[],["option",4]]],[11,"nth_back","","",236,[[],["option",4]]],[11,"next_back","std::str","",252,[[],["option",4]]],[11,"next_back","","",267,[[],["option",4]]],[11,"next_back","std::slice","",239,[[],["option",4]]],[11,"nth_back","","",239,[[],["option",4]]],[11,"next_back","std::result","",346,[[],["option",4]]],[11,"next_back","std::iter","",325,[[],["option",4]]],[11,"try_rfold","","",325,[[]]],[11,"rfold","","",325,[[]]],[11,"next_back","","",308,[[],["option",4]]],[11,"next_back","std::str","",253,[[],["option",4]]],[11,"nth_back","","",253,[[],["option",4]]],[11,"rfind","","",253,[[],["option",4]]],[11,"next_back","std::iter","",319,[[],["option",4]]],[11,"try_rfold","","",319,[[]]],[11,"rfold","","",319,[[]]],[11,"next_back","std::str","",266,[[],["option",4]]],[11,"next_back","std::ops","",83,[[],["option",4]]],[11,"nth_back","","",83,[[],["option",4]]],[11,"next_back","std::str","",265,[[],["option",4]]],[11,"next_back","","",272,[[],["option",4]]],[11,"next_back","std::slice","",238,[[],["option",4]]],[11,"nth_back","","",238,[[],["option",4]]],[11,"next_back","std::ops","",339,[[],["option",4]]],[11,"nth_back","","",339,[[],["option",4]]],[11,"try_rfold","","",339,[[]]],[11,"rfold","","",339,[[]]],[11,"next_back","std::iter","",316,[[],["option",4]]],[11,"advance_back_by","","",316,[[],["result",4]]],[11,"nth_back","","",316,[[],["option",4]]],[11,"rfind","","",316,[[],["option",4]]],[11,"try_rfold","","",316,[[]]],[11,"rfold","","",316,[[]]],[11,"next_back","","",324,[[],["option",4]]],[11,"try_rfold","","",324,[[]]],[11,"rfold","","",324,[[]]],[11,"next_back","std::str","",262,[[],["option",4]]],[11,"next_back","std::iter","",320,[[],["option",4]]],[11,"try_rfold","","",320,[[]]],[11,"rfold","","",320,[[]]],[11,"next_back","std::option","",341,[[],["option",4]]],[11,"next_back","std::str","",271,[[],["option",4]]],[11,"next_back","std::iter","",306,[[],["option",4]]],[11,"next_back","std::slice","",224,[[],["option",4]]],[11,"nth_back","","",224,[[],["option",4]]],[11,"next_back","std::iter","",323,[[],["option",4]]],[11,"try_rfold","","",323,[[]]],[11,"rfold","","",323,[[]]],[11,"next_back","std::slice","",226,[[],["option",4]]],[11,"nth_back","","",226,[[],["option",4]]],[11,"next_back","std::result","",348,[[],["option",4]]],[11,"next_back","std::str","",254,[[],["option",4]]],[11,"next_back","std::iter","",304,[[],["option",4]]],[11,"next_back","","",321,[[],["option",4]]],[11,"try_rfold","","",321,[[]]],[11,"rfold","","",321,[[]]],[11,"next_back","std::slice","",229,[[],["option",4]]],[11,"nth_back","","",229,[[],["option",4]]],[11,"next_back","std::iter","",326,[[],["option",4]]],[11,"advance_back_by","","",326,[[],["result",4]]],[11,"nth_back","","",326,[[],["option",4]]],[11,"try_rfold","","",326,[[]]],[11,"rfold","","",326,[[]]],[11,"rfind","","",326,[[],["option",4]]],[11,"next_back","std::slice","",234,[[],["option",4]]],[11,"nth_back","","",234,[[],["option",4]]],[11,"next_back","std::str","",255,[[],["option",4]]],[11,"next_back","std::slice","",235,[[],["option",4]]],[11,"nth_back","","",235,[[],["option",4]]],[11,"next_back","std::str","",263,[[],["option",4]]],[11,"next_back","std::iter","",307,[[],["option",4]]],[11,"next_back","std","",541,[[],["option",4]]],[11,"advance_back_by","","",541,[[],["result",4]]],[11,"nth_back","","",541,[[],["option",4]]],[11,"next_back","std::array","",284,[[],["option",4]]],[11,"next_back","std::slice","",227,[[],["option",4]]],[11,"nth_back","","",227,[[],["option",4]]],[11,"next_back","std::iter","",318,[[],["option",4]]],[11,"nth_back","","",318,[[],["option",4]]],[11,"try_rfold","","",318,[[]]],[11,"rfold","","",318,[[]]],[11,"next_back","","",315,[[],["option",4]]],[11,"nth_back","","",315,[[],["option",4]]],[11,"try_rfold","","",315,[[]]],[11,"rfold","","",315,[[]]],[11,"next_back","std::slice","",241,[[],["option",4]]],[11,"next_back","std::iter","",311,[[],["option",4]]],[11,"try_rfold","","",311,[[]]],[11,"rfold","","",311,[[]]],[11,"next_back","std::slice","",233,[[],["option",4]]],[11,"bitand","std::num","",133,[[["wrapping",3]]]],[11,"bitand","std","",545,[[]]],[11,"bitand","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitand","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitand","","",133,[[["wrapping",3]]]],[11,"bitand","std","",545,[[]]],[11,"bitand","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitand","std","",553,[[]]],[11,"bitand","std::num","",133,[[["wrapping",3]]]],[11,"bitand","std","",542,[[]]],[11,"bitand","","",542,[[]]],[11,"bitand","","",549,[[]]],[11,"bitand","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitand","std","",550,[[]]],[11,"bitand","","",547,[[]]],[11,"bitand","","",542,[[]]],[11,"bitand","","",548,[[]]],[11,"bitand","","",550,[[]]],[11,"bitand","","",559,[[]]],[11,"bitand","std::num","",133,[[["wrapping",3]]]],[11,"bitand","std","",549,[[]]],[11,"bitand","","",547,[[]]],[11,"bitand","","",550,[[]]],[11,"bitand","","",553,[[]]],[11,"bitand","","",544,[[]]],[11,"bitand","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitand","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitand","std","",553,[[]]],[11,"bitand","","",545,[[]]],[11,"bitand","","",543,[[]]],[11,"bitand","","",546,[[]]],[11,"bitand","std::num","",133,[[["wrapping",3]]]],[11,"bitand","","",133,[[["wrapping",3]]]],[11,"bitand","std","",544,[[]]],[11,"bitand","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitand","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitand","std","",546,[[]]],[11,"bitand","","",559,[[]]],[11,"bitand","","",551,[[]]],[11,"bitand","std::num","",133,[[["wrapping",3]]]],[11,"bitand","","",133,[[["wrapping",3]]]],[11,"bitand","std","",546,[[]]],[11,"bitand","","",543,[[]]],[11,"bitand","","",543,[[]]],[11,"bitand","","",552,[[]]],[11,"bitand","std::num","",133,[[["wrapping",3]]]],[11,"bitand","std","",552,[[]]],[11,"bitand","","",543,[[]]],[11,"bitand","","",549,[[]]],[11,"bitand","","",545,[[]]],[11,"bitand","","",546,[[]]],[11,"bitand","std::num","",133,[[["wrapping",3]]]],[11,"bitand","","",133,[[["wrapping",3]]]],[11,"bitand","std","",548,[[]]],[11,"bitand","","",548,[[]]],[11,"bitand","","",559,[[]]],[11,"bitand","","",551,[[]]],[11,"bitand","","",542,[[]]],[11,"bitand","","",548,[[]]],[11,"bitand","","",553,[[]]],[11,"bitand","","",552,[[]]],[11,"bitand","","",551,[[]]],[11,"bitand","std::num","",133,[[["wrapping",3]]]],[11,"bitand","std","",559,[[]]],[11,"bitand","","",544,[[]]],[11,"bitand","","",547,[[]]],[11,"bitand","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitand","std","",547,[[]]],[11,"bitand","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitand","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"bitand","std","",544,[[]]],[11,"bitand","","",552,[[]]],[11,"bitand","","",551,[[]]],[11,"bitand","","",550,[[]]],[11,"bitand","","",549,[[]]],[11,"bitand","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"eq","std","",553,[[]]],[11,"ne","","",553,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",562,[[]]],[11,"ne","","",562,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","std::option","",93,[[["option",4]]]],[11,"ne","","",93,[[["option",4]]]],[11,"eq","std","",561,[[]]],[11,"eq","std::ptr","",345,[[["nonnull",3]]]],[11,"eq","std","",561,[[]]],[11,"eq","","",541,[[]]],[11,"ne","","",541,[[]]],[11,"eq","std::str","",256,[[["parseboolerror",3]]]],[11,"ne","","",256,[[["parseboolerror",3]]]],[11,"eq","std","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",562,[[]]],[11,"ne","","",562,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",565,[[]]],[11,"eq","std::task","",532,[[["rawwakervtable",3]]]],[11,"ne","","",532,[[["rawwakervtable",3]]]],[11,"eq","std","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","std::marker","",333,[[["phantomdata",3]]]],[11,"eq","std","",541,[[]]],[11,"ne","","",541,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","std::alloc","",539,[[["layouterror",3]]]],[11,"ne","","",539,[[["layouterror",3]]]],[11,"eq","std::num","",470,[[["tryfrominterror",3]]]],[11,"ne","","",470,[[["tryfrominterror",3]]]],[11,"eq","std","",558,[[]]],[11,"ne","","",558,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","std::ops","",85,[[["rangeto",3]]]],[11,"ne","","",85,[[["rangeto",3]]]],[11,"eq","std::num","",475,[[["nonzeroi8",3]]]],[11,"ne","","",475,[[["nonzeroi8",3]]]],[11,"eq","std","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",543,[[]]],[11,"ne","","",543,[[]]],[11,"eq","","",552,[[]]],[11,"ne","","",552,[[]]],[11,"eq","","",561,[[]]],[11,"eq","std::num","",468,[[["parsefloaterror",3]]]],[11,"ne","","",468,[[["parsefloaterror",3]]]],[11,"eq","std","",557,[[]]],[11,"ne","","",557,[[]]],[11,"eq","std::cell","PanicsPanics if the value in either <code>RefCell</code> is currently …",286,[[["refcell",3]]]],[11,"eq","std::fmt","",214,[[["error",3]]]],[11,"eq","std","",561,[[]]],[11,"eq","","",562,[[]]],[11,"ne","","",562,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",562,[[]]],[11,"ne","","",562,[[]]],[11,"eq","std::num","",481,[[["nonzerou8",3]]]],[11,"ne","","",481,[[["nonzerou8",3]]]],[11,"eq","std","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","std::task","",200,[[["poll",4]]]],[11,"ne","","",200,[[["poll",4]]]],[11,"eq","std::pin","",344,[[["pin",3]]]],[11,"ne","","",344,[[["pin",3]]]],[11,"eq","std::mem","",335,[[["discriminant",3]]]],[11,"eq","std","",561,[[]]],[11,"eq","","",563,[[]]],[11,"eq","std::num","",135,[[["interrorkind",4]]]],[11,"eq","std","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",557,[[]]],[11,"ne","","",557,[[]]],[11,"eq","","",561,[[]]],[11,"eq","std::time","",527,[[["duration",3]]]],[11,"ne","","",527,[[["duration",3]]]],[11,"eq","std","",564,[[]]],[11,"ne","","",564,[[]]],[11,"eq","std::num","",474,[[["nonzeroi64",3]]]],[11,"ne","","",474,[[["nonzeroi64",3]]]],[11,"eq","std::alloc","",537,[[["allocerror",3]]]],[11,"eq","std","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","std::num","",479,[[["nonzerou32",3]]]],[11,"ne","","",479,[[["nonzerou32",3]]]],[11,"eq","std","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","std::ops","",88,[[["rangetoinclusive",3]]]],[11,"ne","","",88,[[["rangetoinclusive",3]]]],[11,"eq","std","",544,[[]]],[11,"ne","","",544,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","std::marker","",334,[[["phantompinned",3]]]],[11,"eq","std::hash","",302,[[["buildhasherdefault",3]]]],[11,"eq","std","",559,[[]]],[11,"ne","","",559,[[]]],[11,"eq","","",561,[[]]],[11,"eq","std::num","",471,[[["nonzeroi128",3]]]],[11,"ne","","",471,[[["nonzeroi128",3]]]],[11,"eq","std","",562,[[]]],[11,"ne","","",562,[[]]],[11,"eq","","",562,[[]]],[11,"ne","","",562,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",555,[[]]],[11,"ne","","",555,[[]]],[11,"eq","","",562,[[]]],[11,"ne","","",562,[[]]],[11,"eq","std::char","",297,[[["chartryfromerror",3]]]],[11,"ne","","",297,[[["chartryfromerror",3]]]],[11,"eq","","",298,[[["parsecharerror",3]]]],[11,"ne","","",298,[[["parsecharerror",3]]]],[11,"eq","std","",561,[[]]],[11,"eq","std::ops","",83,[[["range",3]]]],[11,"ne","","",83,[[["range",3]]]],[11,"eq","std::cmp","",28,[[["ordering",4]]]],[11,"eq","std","",565,[[]]],[11,"eq","std::num","",476,[[["nonzeroisize",3]]]],[11,"ne","","",476,[[["nonzeroisize",3]]]],[11,"eq","","",469,[[["parseinterror",3]]]],[11,"ne","","",469,[[["parseinterror",3]]]],[11,"eq","std","",560,[[]]],[11,"ne","","",560,[[]]],[11,"eq","","",549,[[]]],[11,"ne","","",549,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",558,[[]]],[11,"ne","","",558,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","std::ops","",86,[[["bound",4]]]],[11,"ne","","",86,[[["bound",4]]]],[11,"eq","std::num","",133,[[["wrapping",3]]]],[11,"ne","","",133,[[["wrapping",3]]]],[11,"eq","std","",561,[[]]],[11,"eq","std::task","",531,[[["rawwaker",3]]]],[11,"ne","","",531,[[["rawwaker",3]]]],[11,"eq","std","",541,[[]]],[11,"ne","","",541,[[]]],[11,"eq","","",547,[[]]],[11,"ne","","",547,[[]]],[11,"eq","","",542,[[]]],[11,"ne","","",542,[[]]],[11,"eq","","",561,[[]]],[11,"eq","std::any","",282,[[["typeid",3]]]],[11,"ne","","",282,[[["typeid",3]]]],[11,"eq","std","",554,[[]]],[11,"ne","","",554,[[]]],[11,"eq","std::alloc","",538,[[["layout",3]]]],[11,"ne","","",538,[[["layout",3]]]],[11,"eq","std::num","",134,[[["fpcategory",4]]]],[11,"eq","std","",562,[[]]],[11,"ne","","",562,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",550,[[]]],[11,"ne","","",550,[[]]],[11,"eq","","",561,[[]]],[11,"eq","std::num","",472,[[["nonzeroi16",3]]]],[11,"ne","","",472,[[["nonzeroi16",3]]]],[11,"eq","std","",551,[[]]],[11,"ne","","",551,[[]]],[11,"eq","","",557,[[]]],[11,"ne","","",557,[[]]],[11,"eq","std::convert","",301,[[["infallible",4]]]],[11,"eq","std","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",562,[[]]],[11,"ne","","",562,[[]]],[11,"eq","std::num","",478,[[["nonzerou16",3]]]],[11,"ne","","",478,[[["nonzerou16",3]]]],[11,"eq","std","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","std::result","",95,[[["result",4]]]],[11,"ne","","",95,[[["result",4]]]],[11,"eq","std","",546,[[]]],[11,"ne","","",546,[[]]],[11,"eq","","",558,[[]]],[11,"ne","","",558,[[]]],[11,"eq","","",562,[[]]],[11,"ne","","",562,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",541,[[]]],[11,"ne","","",541,[[]]],[11,"eq","std::num","",473,[[["nonzeroi32",3]]]],[11,"ne","","",473,[[["nonzeroi32",3]]]],[11,"eq","std::ops","",91,[[["generatorstate",4]]]],[11,"ne","","",91,[[["generatorstate",4]]]],[11,"eq","std::cmp","",29,[[["reverse",3]]]],[11,"ne","","",29,[[["reverse",3]]]],[11,"eq","std","",561,[[]]],[11,"eq","std::char","",300,[[["decodeutf16error",3]]]],[11,"ne","","",300,[[["decodeutf16error",3]]]],[11,"eq","std","",561,[[]]],[11,"eq","std::lazy","",528,[[["oncecell",3]]]],[11,"eq","std","",561,[[]]],[11,"eq","std::num","",477,[[["nonzerou128",3]]]],[11,"ne","","",477,[[["nonzerou128",3]]]],[11,"eq","std::ops","",339,[[["rangeinclusive",3]]]],[11,"ne","","",339,[[["rangeinclusive",3]]]],[11,"eq","std","",548,[[]]],[11,"ne","","",548,[[]]],[11,"eq","","",561,[[]]],[11,"eq","std::ops","",84,[[["rangefrom",3]]]],[11,"ne","","",84,[[["rangefrom",3]]]],[11,"eq","std","",562,[[]]],[11,"ne","","",562,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","std::str","",260,[[["utf8error",3]]]],[11,"ne","","",260,[[["utf8error",3]]]],[11,"eq","std::num","",482,[[["nonzerousize",3]]]],[11,"ne","","",482,[[["nonzerousize",3]]]],[11,"eq","std","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",558,[[]]],[11,"ne","","",558,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","std::ops","",338,[[["rangefull",3]]]],[11,"eq","","",92,[[["controlflow",4]]]],[11,"ne","","",92,[[["controlflow",4]]]],[11,"eq","std","",561,[[]]],[11,"eq","std::sync::atomic","",186,[[["ordering",4]]]],[11,"eq","std::num","",480,[[["nonzerou64",3]]]],[11,"ne","","",480,[[["nonzerou64",3]]]],[11,"eq","std","",561,[[]]],[11,"eq","","",545,[[]]],[11,"ne","","",545,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","std::str::pattern","",19,[[["searchstep",4]]]],[11,"ne","","",19,[[["searchstep",4]]]],[11,"eq","std","",562,[[]]],[11,"ne","","",562,[[]]],[11,"eq","","",557,[[]]],[11,"ne","","",557,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","","",556,[[]]],[11,"ne","","",556,[[]]],[11,"eq","","",561,[[]]],[11,"eq","std::mem","",336,[[["manuallydrop",3]]]],[11,"ne","","",336,[[["manuallydrop",3]]]],[11,"eq","std","",561,[[]]],[11,"eq","","",561,[[]]],[11,"eq","std::panic","",488,[[["location",3]]]],[11,"ne","","",488,[[["location",3]]]],[11,"eq","std::cell","",285,[[["cell",3]]]],[11,"eq","std","",561,[[]]],[11,"eq","std::option","",343,[[["noneerror",3]]]],[11,"bitor_assign","std::num","",474,[[["nonzeroi64",3]]]],[11,"bitor_assign","","",133,[[["wrapping",3]]]],[11,"bitor_assign","","",133,[[["wrapping",3]]]],[11,"bitor_assign","","",475,[[]]],[11,"bitor_assign","std","",559,[[]]],[11,"bitor_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitor_assign","std","",545,[[]]],[11,"bitor_assign","std::num","",476,[[["nonzeroisize",3]]]],[11,"bitor_assign","","",478,[[["nonzerou16",3]]]],[11,"bitor_assign","","",475,[[["nonzeroi8",3]]]],[11,"bitor_assign","std","",542,[[]]],[11,"bitor_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitor_assign","std","",546,[[]]],[11,"bitor_assign","","",547,[[]]],[11,"bitor_assign","std::num","",479,[[]]],[11,"bitor_assign","","",133,[[["wrapping",3]]]],[11,"bitor_assign","","",133,[[["wrapping",3]]]],[11,"bitor_assign","std","",548,[[]]],[11,"bitor_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitor_assign","","",133,[[["wrapping",3]]]],[11,"bitor_assign","","",473,[[["nonzeroi32",3]]]],[11,"bitor_assign","","",471,[[]]],[11,"bitor_assign","","",474,[[]]],[11,"bitor_assign","","",133,[[["wrapping",3]]]],[11,"bitor_assign","","",472,[[]]],[11,"bitor_assign","","",133,[[["wrapping",3]]]],[11,"bitor_assign","","",133,[[["wrapping",3]]]],[11,"bitor_assign","","",133,[[["wrapping",3]]]],[11,"bitor_assign","","",479,[[["nonzerou32",3]]]],[11,"bitor_assign","std","",559,[[]]],[11,"bitor_assign","","",542,[[]]],[11,"bitor_assign","","",553,[[]]],[11,"bitor_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitor_assign","","",133,[[["wrapping",3]]]],[11,"bitor_assign","","",133,[[["wrapping",3]]]],[11,"bitor_assign","std","",548,[[]]],[11,"bitor_assign","std::num","",472,[[["nonzeroi16",3]]]],[11,"bitor_assign","","",478,[[]]],[11,"bitor_assign","","",481,[[]]],[11,"bitor_assign","","",133,[[["wrapping",3]]]],[11,"bitor_assign","std","",552,[[]]],[11,"bitor_assign","","",544,[[]]],[11,"bitor_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitor_assign","","",133,[[["wrapping",3]]]],[11,"bitor_assign","","",133,[[["wrapping",3]]]],[11,"bitor_assign","std","",547,[[]]],[11,"bitor_assign","","",553,[[]]],[11,"bitor_assign","std::num","",480,[[]]],[11,"bitor_assign","std","",552,[[]]],[11,"bitor_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitor_assign","","",481,[[["nonzerou8",3]]]],[11,"bitor_assign","","",480,[[["nonzerou64",3]]]],[11,"bitor_assign","","",477,[[]]],[11,"bitor_assign","std","",550,[[]]],[11,"bitor_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitor_assign","std","",551,[[]]],[11,"bitor_assign","","",549,[[]]],[11,"bitor_assign","","",543,[[]]],[11,"bitor_assign","std::num","",476,[[]]],[11,"bitor_assign","","",133,[[["wrapping",3]]]],[11,"bitor_assign","std","",549,[[]]],[11,"bitor_assign","","",544,[[]]],[11,"bitor_assign","","",545,[[]]],[11,"bitor_assign","","",551,[[]]],[11,"bitor_assign","std::num","",482,[[]]],[11,"bitor_assign","std","",543,[[]]],[11,"bitor_assign","","",546,[[]]],[11,"bitor_assign","std::num","",133,[[["wrapping",3]]]],[11,"bitor_assign","","",477,[[["nonzerou128",3]]]],[11,"bitor_assign","std","",550,[[]]],[11,"bitor_assign","std::num","",471,[[["nonzeroi128",3]]]],[11,"bitor_assign","","",482,[[["nonzerousize",3]]]],[11,"bitor_assign","","",473,[[]]],[11,"bitor_assign","","",133,[[["wrapping",3]]]],[11,"fmt","std","",562,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",481,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::char","",295,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::slice","",244,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::cell","",289,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",555,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::slice","",229,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",565,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",311,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::slice","",235,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",254,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::slice","",239,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::hash","",302,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::cell","",288,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::ops","",91,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::sync::atomic","",505,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::result","",95,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str::pattern","",248,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",322,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::slice","",236,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::sync::atomic","",504,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",501,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",268,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::fmt","",215,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::sync::atomic","",186,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",321,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::sync::atomic","",503,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::char","",294,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",133,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",264,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",258,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::array","",283,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::ffi","",431,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::char","",300,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",560,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::convert","",301,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",252,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::slice","",225,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",565,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::slice","",242,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",255,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::task","",531,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::any","",24,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",266,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",320,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::sync::atomic","",511,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",562,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",558,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",323,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::marker","",334,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::sync::atomic","",507,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::task","",533,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::slice","",227,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::char","",296,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::slice","",234,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::ops","",85,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::char","",298,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",562,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",546,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::result","",346,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",305,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",562,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::panic","",489,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",304,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",551,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str::pattern","",249,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",550,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",257,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",318,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::slice","",245,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::time","",527,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::slice","",237,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::future","",534,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",468,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",315,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::cmp","",29,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",541,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",553,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::slice","",233,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",313,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",547,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::result","",347,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",562,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",328,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",475,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",310,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::ffi","",429,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",562,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::lazy","",529,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",324,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::panic","",488,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",325,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::slice","",224,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",564,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::task","",530,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",469,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",270,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",261,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::slice","",241,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::sync::atomic","",509,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",472,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",134,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::any","",24,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",317,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",479,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",253,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::mem","",337,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",269,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",471,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str::pattern","",246,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",562,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::sync::atomic","",500,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::mem","",335,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",306,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::fmt","",4,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::alloc","",537,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",260,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",476,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str::pattern","",19,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",563,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",316,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::slice","",228,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::task","",532,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::any","",282,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::cell","",290,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",319,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",482,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::marker","",333,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::char","",299,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",256,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",326,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::slice","",226,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::sync::atomic","",506,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::ops","",83,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::char","",293,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",314,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",562,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",541,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",265,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::cell","",285,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::slice","",243,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",307,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",556,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::char","",292,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::ptr","",345,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::sync::atomic","",508,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",473,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::task","",200,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::alloc","",539,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::pin","",344,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",332,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::ops","",339,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",259,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::cell","",286,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",559,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::lazy","",528,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::alloc","",538,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::char","",297,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::cell","",287,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::sync::atomic","",502,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",554,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",548,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::slice","",240,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",262,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::ops","",88,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",251,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::option","",93,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::ascii","",351,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::option","",342,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",327,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::slice","",232,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",263,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::fmt","",214,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",549,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",545,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",562,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",542,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str::pattern","",247,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::ops","",92,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",562,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::slice","",230,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",480,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::sync::atomic","",510,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::option","",343,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",562,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::mem","",336,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",544,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",271,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::cmp","",28,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",250,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::option","",340,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",330,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",474,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::ops","",84,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",552,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::ffi","",430,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::ops","",338,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",329,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::slice","",231,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",308,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::slice","",238,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",135,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",477,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",267,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::future","",535,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::option","",341,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::str","",272,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",478,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",331,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",557,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",312,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",562,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",470,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::ops","",86,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::iter","",309,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::array","",284,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::result","",348,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",543,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",561,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::cell","",291,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::hash","",303,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::any","",24,[[["formatter",3]],[["result",4],["error",3]]]],[11,"partial_cmp","std","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",543,[[],[["ordering",4],["option",4]]]],[11,"lt","","",543,[[]]],[11,"le","","",543,[[]]],[11,"ge","","",543,[[]]],[11,"gt","","",543,[[]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",555,[[],[["ordering",4],["option",4]]]],[11,"lt","","",555,[[]]],[11,"le","","",555,[[]]],[11,"ge","","",555,[[]]],[11,"gt","","",555,[[]]],[11,"partial_cmp","std::num","",474,[[["nonzeroi64",3]],[["ordering",4],["option",4]]]],[11,"lt","","",474,[[["nonzeroi64",3]]]],[11,"le","","",474,[[["nonzeroi64",3]]]],[11,"gt","","",474,[[["nonzeroi64",3]]]],[11,"ge","","",474,[[["nonzeroi64",3]]]],[11,"partial_cmp","","",479,[[["nonzerou32",3]],[["ordering",4],["option",4]]]],[11,"lt","","",479,[[["nonzerou32",3]]]],[11,"le","","",479,[[["nonzerou32",3]]]],[11,"gt","","",479,[[["nonzerou32",3]]]],[11,"ge","","",479,[[["nonzerou32",3]]]],[11,"partial_cmp","std","",562,[[],[["ordering",4],["option",4]]]],[11,"lt","","",562,[[]]],[11,"le","","",562,[[]]],[11,"ge","","",562,[[]]],[11,"gt","","",562,[[]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",562,[[],[["ordering",4],["option",4]]]],[11,"lt","","",562,[[]]],[11,"le","","",562,[[]]],[11,"ge","","",562,[[]]],[11,"gt","","",562,[[]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","std::num","",478,[[["nonzerou16",3]],[["ordering",4],["option",4]]]],[11,"lt","","",478,[[["nonzerou16",3]]]],[11,"le","","",478,[[["nonzerou16",3]]]],[11,"gt","","",478,[[["nonzerou16",3]]]],[11,"ge","","",478,[[["nonzerou16",3]]]],[11,"partial_cmp","std","",563,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","std::cell","",285,[[["cell",3]],[["ordering",4],["option",4]]]],[11,"lt","","",285,[[["cell",3]]]],[11,"le","","",285,[[["cell",3]]]],[11,"gt","","",285,[[["cell",3]]]],[11,"ge","","",285,[[["cell",3]]]],[11,"partial_cmp","std","",557,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",559,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",552,[[],[["ordering",4],["option",4]]]],[11,"lt","","",552,[[]]],[11,"le","","",552,[[]]],[11,"ge","","",552,[[]]],[11,"gt","","",552,[[]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","std::result","",95,[[["result",4]],[["ordering",4],["option",4]]]],[11,"lt","","",95,[[["result",4]]]],[11,"le","","",95,[[["result",4]]]],[11,"gt","","",95,[[["result",4]]]],[11,"ge","","",95,[[["result",4]]]],[11,"partial_cmp","std","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","std::ops","",91,[[["generatorstate",4]],[["ordering",4],["option",4]]]],[11,"lt","","",91,[[["generatorstate",4]]]],[11,"le","","",91,[[["generatorstate",4]]]],[11,"gt","","",91,[[["generatorstate",4]]]],[11,"ge","","",91,[[["generatorstate",4]]]],[11,"partial_cmp","std::option","",343,[[["noneerror",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","std::task","",200,[[["poll",4]],[["ordering",4],["option",4]]]],[11,"lt","","",200,[[["poll",4]]]],[11,"le","","",200,[[["poll",4]]]],[11,"gt","","",200,[[["poll",4]]]],[11,"ge","","",200,[[["poll",4]]]],[11,"partial_cmp","std::num","",476,[[["nonzeroisize",3]],[["ordering",4],["option",4]]]],[11,"lt","","",476,[[["nonzeroisize",3]]]],[11,"le","","",476,[[["nonzeroisize",3]]]],[11,"gt","","",476,[[["nonzeroisize",3]]]],[11,"ge","","",476,[[["nonzeroisize",3]]]],[11,"partial_cmp","std::cell","PanicsPanics if the value in either <code>RefCell</code> is currently …",286,[[["refcell",3]],[["ordering",4],["option",4]]]],[11,"lt","","PanicsPanics if the value in either <code>RefCell</code> is currently …",286,[[["refcell",3]]]],[11,"le","","PanicsPanics if the value in either <code>RefCell</code> is currently …",286,[[["refcell",3]]]],[11,"gt","","PanicsPanics if the value in either <code>RefCell</code> is currently …",286,[[["refcell",3]]]],[11,"ge","","PanicsPanics if the value in either <code>RefCell</code> is currently …",286,[[["refcell",3]]]],[11,"partial_cmp","std::fmt","",214,[[["error",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","std","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","std::marker","",334,[[["phantompinned",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","std","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",542,[[],[["ordering",4],["option",4]]]],[11,"lt","","",542,[[]]],[11,"le","","",542,[[]]],[11,"ge","","",542,[[]]],[11,"gt","","",542,[[]]],[11,"partial_cmp","","",560,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","std::any","",282,[[["typeid",3]],[["ordering",4],["option",4]]]],[11,"lt","","",282,[[["typeid",3]]]],[11,"le","","",282,[[["typeid",3]]]],[11,"gt","","",282,[[["typeid",3]]]],[11,"ge","","",282,[[["typeid",3]]]],[11,"partial_cmp","std","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",562,[[],[["ordering",4],["option",4]]]],[11,"lt","","",562,[[]]],[11,"le","","",562,[[]]],[11,"ge","","",562,[[]]],[11,"gt","","",562,[[]]],[11,"partial_cmp","std::num","",472,[[["nonzeroi16",3]],[["ordering",4],["option",4]]]],[11,"lt","","",472,[[["nonzeroi16",3]]]],[11,"le","","",472,[[["nonzeroi16",3]]]],[11,"gt","","",472,[[["nonzeroi16",3]]]],[11,"ge","","",472,[[["nonzeroi16",3]]]],[11,"partial_cmp","std","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","std::num","",482,[[["nonzerousize",3]],[["ordering",4],["option",4]]]],[11,"lt","","",482,[[["nonzerousize",3]]]],[11,"le","","",482,[[["nonzerousize",3]]]],[11,"gt","","",482,[[["nonzerousize",3]]]],[11,"ge","","",482,[[["nonzerousize",3]]]],[11,"partial_cmp","","",477,[[["nonzerou128",3]],[["ordering",4],["option",4]]]],[11,"lt","","",477,[[["nonzerou128",3]]]],[11,"le","","",477,[[["nonzerou128",3]]]],[11,"gt","","",477,[[["nonzerou128",3]]]],[11,"ge","","",477,[[["nonzerou128",3]]]],[11,"partial_cmp","std","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","std::num","",133,[[["wrapping",3]],[["ordering",4],["option",4]]]],[11,"lt","","",133,[[["wrapping",3]]]],[11,"le","","",133,[[["wrapping",3]]]],[11,"gt","","",133,[[["wrapping",3]]]],[11,"ge","","",133,[[["wrapping",3]]]],[11,"partial_cmp","std","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",565,[[],[["ordering",4],["option",4]]]],[11,"lt","","",565,[[]]],[11,"le","","",565,[[]]],[11,"gt","","",565,[[]]],[11,"ge","","",565,[[]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",541,[[],[["ordering",4],["option",4]]]],[11,"lt","","",541,[[]]],[11,"le","","",541,[[]]],[11,"gt","","",541,[[]]],[11,"ge","","",541,[[]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","std::convert","",301,[[["infallible",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","std","",562,[[],[["ordering",4],["option",4]]]],[11,"lt","","",562,[[]]],[11,"le","","",562,[[]]],[11,"ge","","",562,[[]]],[11,"gt","","",562,[[]]],[11,"partial_cmp","","",562,[[],[["ordering",4],["option",4]]]],[11,"lt","","",562,[[]]],[11,"le","","",562,[[]]],[11,"ge","","",562,[[]]],[11,"gt","","",562,[[]]],[11,"partial_cmp","std::pin","",344,[[["pin",3]],[["ordering",4],["option",4]]]],[11,"lt","","",344,[[["pin",3]]]],[11,"le","","",344,[[["pin",3]]]],[11,"gt","","",344,[[["pin",3]]]],[11,"ge","","",344,[[["pin",3]]]],[11,"partial_cmp","std","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","std::time","",527,[[["duration",3]],[["ordering",4],["option",4]]]],[11,"lt","","",527,[[["duration",3]]]],[11,"le","","",527,[[["duration",3]]]],[11,"gt","","",527,[[["duration",3]]]],[11,"ge","","",527,[[["duration",3]]]],[11,"partial_cmp","std","",562,[[],[["ordering",4],["option",4]]]],[11,"lt","","",562,[[]]],[11,"le","","",562,[[]]],[11,"ge","","",562,[[]]],[11,"gt","","",562,[[]]],[11,"partial_cmp","std::panic","",488,[[["location",3]],[["ordering",4],["option",4]]]],[11,"lt","","",488,[[["location",3]]]],[11,"le","","",488,[[["location",3]]]],[11,"gt","","",488,[[["location",3]]]],[11,"ge","","",488,[[["location",3]]]],[11,"partial_cmp","std","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","std::num","",473,[[["nonzeroi32",3]],[["ordering",4],["option",4]]]],[11,"lt","","",473,[[["nonzeroi32",3]]]],[11,"le","","",473,[[["nonzeroi32",3]]]],[11,"gt","","",473,[[["nonzeroi32",3]]]],[11,"ge","","",473,[[["nonzeroi32",3]]]],[11,"partial_cmp","std","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",565,[[],[["ordering",4],["option",4]]]],[11,"lt","","",565,[[]]],[11,"le","","",565,[[]]],[11,"gt","","",565,[[]]],[11,"ge","","",565,[[]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","std::option","",93,[[["option",4]],[["ordering",4],["option",4]]]],[11,"lt","","",93,[[["option",4]]]],[11,"le","","",93,[[["option",4]]]],[11,"gt","","",93,[[["option",4]]]],[11,"ge","","",93,[[["option",4]]]],[11,"partial_cmp","std","",564,[[],[["ordering",4],["option",4]]]],[11,"lt","","",564,[[]]],[11,"le","","",564,[[]]],[11,"ge","","",564,[[]]],[11,"gt","","",564,[[]]],[11,"partial_cmp","","",547,[[],[["ordering",4],["option",4]]]],[11,"lt","","",547,[[]]],[11,"le","","",547,[[]]],[11,"ge","","",547,[[]]],[11,"gt","","",547,[[]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",551,[[],[["ordering",4],["option",4]]]],[11,"lt","","",551,[[]]],[11,"le","","",551,[[]]],[11,"ge","","",551,[[]]],[11,"gt","","",551,[[]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","std::marker","",333,[[["phantomdata",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","std","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",562,[[],[["ordering",4],["option",4]]]],[11,"lt","","",562,[[]]],[11,"le","","",562,[[]]],[11,"ge","","",562,[[]]],[11,"gt","","",562,[[]]],[11,"partial_cmp","std::cmp","",29,[[["reverse",3]],[["ordering",4],["option",4]]]],[11,"lt","","",29,[[["reverse",3]]]],[11,"le","","",29,[[["reverse",3]]]],[11,"gt","","",29,[[["reverse",3]]]],[11,"ge","","",29,[[["reverse",3]]]],[11,"partial_cmp","std","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","std::num","",475,[[["nonzeroi8",3]],[["ordering",4],["option",4]]]],[11,"lt","","",475,[[["nonzeroi8",3]]]],[11,"le","","",475,[[["nonzeroi8",3]]]],[11,"gt","","",475,[[["nonzeroi8",3]]]],[11,"ge","","",475,[[["nonzeroi8",3]]]],[11,"partial_cmp","std","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",544,[[],[["ordering",4],["option",4]]]],[11,"lt","","",544,[[]]],[11,"le","","",544,[[]]],[11,"ge","","",544,[[]]],[11,"gt","","",544,[[]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",541,[[],[["ordering",4],["option",4]]]],[11,"lt","","",541,[[]]],[11,"le","","",541,[[]]],[11,"gt","","",541,[[]]],[11,"ge","","",541,[[]]],[11,"partial_cmp","","",550,[[],[["ordering",4],["option",4]]]],[11,"lt","","",550,[[]]],[11,"le","","",550,[[]]],[11,"ge","","",550,[[]]],[11,"gt","","",550,[[]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","std::ptr","",345,[[["nonnull",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","std","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","std::num","",471,[[["nonzeroi128",3]],[["ordering",4],["option",4]]]],[11,"lt","","",471,[[["nonzeroi128",3]]]],[11,"le","","",471,[[["nonzeroi128",3]]]],[11,"gt","","",471,[[["nonzeroi128",3]]]],[11,"ge","","",471,[[["nonzeroi128",3]]]],[11,"partial_cmp","std","",558,[[],[["ordering",4],["option",4]]]],[11,"lt","","",558,[[]]],[11,"le","","",558,[[]]],[11,"ge","","",558,[[]]],[11,"gt","","",558,[[]]],[11,"partial_cmp","","",562,[[],[["ordering",4],["option",4]]]],[11,"lt","","",562,[[]]],[11,"le","","",562,[[]]],[11,"ge","","",562,[[]]],[11,"gt","","",562,[[]]],[11,"partial_cmp","","",548,[[],[["ordering",4],["option",4]]]],[11,"lt","","",548,[[]]],[11,"le","","",548,[[]]],[11,"ge","","",548,[[]]],[11,"gt","","",548,[[]]],[11,"partial_cmp","std::mem","",336,[[["manuallydrop",3]],[["ordering",4],["option",4]]]],[11,"lt","","",336,[[["manuallydrop",3]]]],[11,"le","","",336,[[["manuallydrop",3]]]],[11,"gt","","",336,[[["manuallydrop",3]]]],[11,"ge","","",336,[[["manuallydrop",3]]]],[11,"partial_cmp","std","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",562,[[],[["ordering",4],["option",4]]]],[11,"lt","","",562,[[]]],[11,"le","","",562,[[]]],[11,"ge","","",562,[[]]],[11,"gt","","",562,[[]]],[11,"partial_cmp","std::num","",480,[[["nonzerou64",3]],[["ordering",4],["option",4]]]],[11,"lt","","",480,[[["nonzerou64",3]]]],[11,"le","","",480,[[["nonzerou64",3]]]],[11,"gt","","",480,[[["nonzerou64",3]]]],[11,"ge","","",480,[[["nonzerou64",3]]]],[11,"partial_cmp","std","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",554,[[],[["ordering",4],["option",4]]]],[11,"lt","","",554,[[]]],[11,"le","","",554,[[]]],[11,"ge","","",554,[[]]],[11,"gt","","",554,[[]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",556,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","std::num","",481,[[["nonzerou8",3]],[["ordering",4],["option",4]]]],[11,"lt","","",481,[[["nonzerou8",3]]]],[11,"le","","",481,[[["nonzerou8",3]]]],[11,"gt","","",481,[[["nonzerou8",3]]]],[11,"ge","","",481,[[["nonzerou8",3]]]],[11,"partial_cmp","std","",546,[[],[["ordering",4],["option",4]]]],[11,"lt","","",546,[[]]],[11,"le","","",546,[[]]],[11,"ge","","",546,[[]]],[11,"gt","","",546,[[]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",549,[[],[["ordering",4],["option",4]]]],[11,"lt","","",549,[[]]],[11,"le","","",549,[[]]],[11,"ge","","",549,[[]]],[11,"gt","","",549,[[]]],[11,"partial_cmp","","",553,[[],[["ordering",4],["option",4]]]],[11,"lt","","",553,[[]]],[11,"le","","",553,[[]]],[11,"ge","","",553,[[]]],[11,"gt","","",553,[[]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","std::cmp","",28,[[["ordering",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","std","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",545,[[],[["ordering",4],["option",4]]]],[11,"lt","","",545,[[]]],[11,"le","","",545,[[]]],[11,"ge","","",545,[[]]],[11,"gt","","",545,[[]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",562,[[],[["ordering",4],["option",4]]]],[11,"lt","","",562,[[]]],[11,"le","","",562,[[]]],[11,"ge","","",562,[[]]],[11,"gt","","",562,[[]]],[11,"partial_cmp","","",562,[[],[["ordering",4],["option",4]]]],[11,"lt","","",562,[[]]],[11,"le","","",562,[[]]],[11,"ge","","",562,[[]]],[11,"gt","","",562,[[]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",561,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",562,[[],[["ordering",4],["option",4]]]],[11,"lt","","",562,[[]]],[11,"le","","",562,[[]]],[11,"ge","","",562,[[]]],[11,"gt","","",562,[[]]],[11,"product","std::num","",133,[[],["wrapping",3]]],[11,"product","std","",544,[[]]],[11,"product","","",554,[[]]],[11,"product","","",543,[[]]],[11,"product","std::num","",133,[[],["wrapping",3]]],[11,"product","","",133,[[],["wrapping",3]]],[11,"product","","",133,[[],["wrapping",3]]],[11,"product","std::option","Takes each element in the [<code>Iterator</code>]: if it is a [<code>None</code>], …",93,[[],["option",4]]],[11,"product","std::num","",133,[[],["wrapping",3]]],[11,"product","","",133,[[],["wrapping",3]]],[11,"product","std","",552,[[]]],[11,"product","std::num","",133,[[],["wrapping",3]]],[11,"product","std","",549,[[]]],[11,"product","","",550,[[]]],[11,"product","","",543,[[]]],[11,"product","std::num","",133,[[],["wrapping",3]]],[11,"product","std","",547,[[]]],[11,"product","","",542,[[]]],[11,"product","std::num","",133,[[],["wrapping",3]]],[11,"product","","",133,[[],["wrapping",3]]],[11,"product","std","",545,[[]]],[11,"product","std::num","",133,[[],["wrapping",3]]],[11,"product","","",133,[[],["wrapping",3]]],[11,"product","std","",545,[[]]],[11,"product","","",546,[[]]],[11,"product","","",542,[[]]],[11,"product","std::num","",133,[[],["wrapping",3]]],[11,"product","std","",554,[[]]],[11,"product","","",548,[[]]],[11,"product","std::num","",133,[[],["wrapping",3]]],[11,"product","std","",547,[[]]],[11,"product","std::num","",133,[[],["wrapping",3]]],[11,"product","","",133,[[],["wrapping",3]]],[11,"product","","",133,[[],["wrapping",3]]],[11,"product","std","",549,[[]]],[11,"product","","",551,[[]]],[11,"product","std::num","",133,[[],["wrapping",3]]],[11,"product","","",133,[[],["wrapping",3]]],[11,"product","std","",553,[[]]],[11,"product","","",551,[[]]],[11,"product","","",555,[[]]],[11,"product","std::num","",133,[[],["wrapping",3]]],[11,"product","std","",555,[[]]],[11,"product","","",553,[[]]],[11,"product","std::result","Takes each element in the [<code>Iterator</code>]: if it is an [<code>Err</code>], …",95,[[],["result",4]]],[11,"product","std::num","",133,[[],["wrapping",3]]],[11,"product","","",133,[[],["wrapping",3]]],[11,"product","","",133,[[],["wrapping",3]]],[11,"product","std","",544,[[]]],[11,"product","","",550,[[]]],[11,"product","","",548,[[]]],[11,"product","std::num","",133,[[],["wrapping",3]]],[11,"product","std","",546,[[]]],[11,"product","","",552,[[]]],[11,"allocate","","",541,[[["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"allocate_zeroed","","",541,[[["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"deallocate","","",541,[[["nonnull",3],["layout",3]]]],[11,"grow","","",541,[[["nonnull",3],["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"grow_zeroed","","",541,[[["nonnull",3],["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"shrink","","",541,[[["nonnull",3],["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"mul_assign","","",548,[[]]],[11,"mul_assign","std::num","",133,[[["wrapping",3]]]],[11,"mul_assign","std","",554,[[]]],[11,"mul_assign","","",543,[[]]],[11,"mul_assign","","",555,[[]]],[11,"mul_assign","","",551,[[]]],[11,"mul_assign","","",544,[[]]],[11,"mul_assign","std::time","",527,[[]]],[11,"mul_assign","std","",549,[[]]],[11,"mul_assign","std::num","",133,[[["wrapping",3]]]],[11,"mul_assign","","",133,[[["wrapping",3]]]],[11,"mul_assign","","",133,[[["wrapping",3]]]],[11,"mul_assign","std","",545,[[]]],[11,"mul_assign","std::num","",133,[[["wrapping",3]]]],[11,"mul_assign","std","",553,[[]]],[11,"mul_assign","","",550,[[]]],[11,"mul_assign","std::num","",133,[[["wrapping",3]]]],[11,"mul_assign","std","",553,[[]]],[11,"mul_assign","std::num","",133,[[["wrapping",3]]]],[11,"mul_assign","","",133,[[["wrapping",3]]]],[11,"mul_assign","std","",547,[[]]],[11,"mul_assign","std::num","",133,[[["wrapping",3]]]],[11,"mul_assign","","",133,[[["wrapping",3]]]],[11,"mul_assign","","",133,[[["wrapping",3]]]],[11,"mul_assign","","",133,[[["wrapping",3]]]],[11,"mul_assign","","",133,[[["wrapping",3]]]],[11,"mul_assign","std","",546,[[]]],[11,"mul_assign","","",544,[[]]],[11,"mul_assign","","",554,[[]]],[11,"mul_assign","","",543,[[]]],[11,"mul_assign","","",548,[[]]],[11,"mul_assign","std::num","",133,[[["wrapping",3]]]],[11,"mul_assign","std","",555,[[]]],[11,"mul_assign","","",542,[[]]],[11,"mul_assign","std::num","",133,[[["wrapping",3]]]],[11,"mul_assign","","",133,[[["wrapping",3]]]],[11,"mul_assign","","",133,[[["wrapping",3]]]],[11,"mul_assign","std","",546,[[]]],[11,"mul_assign","","",552,[[]]],[11,"mul_assign","","",552,[[]]],[11,"mul_assign","std::num","",133,[[["wrapping",3]]]],[11,"mul_assign","","",133,[[["wrapping",3]]]],[11,"mul_assign","","",133,[[["wrapping",3]]]],[11,"mul_assign","std","",549,[[]]],[11,"mul_assign","std::num","",133,[[["wrapping",3]]]],[11,"mul_assign","std","",542,[[]]],[11,"mul_assign","std::num","",133,[[["wrapping",3]]]],[11,"mul_assign","","",133,[[["wrapping",3]]]],[11,"mul_assign","std","",550,[[]]],[11,"mul_assign","","",545,[[]]],[11,"mul_assign","std::num","",133,[[["wrapping",3]]]],[11,"mul_assign","std","",551,[[]]],[11,"mul_assign","","",547,[[]]],[11,"fmt","","",543,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",547,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",555,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",552,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",546,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",541,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",554,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",551,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",542,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",545,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",548,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",550,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",549,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",541,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",544,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",553,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",541,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",549,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",544,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",476,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",542,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",546,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",472,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",543,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",553,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",550,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",473,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",545,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",475,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",552,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",547,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",479,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",477,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",548,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::num","",478,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",474,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",480,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",133,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",481,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",471,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",482,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std","",541,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",551,[[["formatter",3]],[["result",4],["error",3]]]],[11,"write","std::hash","",303,[[]]],[11,"finish","","",303,[[]]],[11,"finish","std","",541,[[]]],[11,"write","","",541,[[]]],[11,"write_u8","","",541,[[]]],[11,"write_u16","","",541,[[]]],[11,"write_u32","","",541,[[]]],[11,"write_u64","","",541,[[]]],[11,"write_u128","","",541,[[]]],[11,"write_usize","","",541,[[]]],[11,"write_i8","","",541,[[]]],[11,"write_i16","","",541,[[]]],[11,"write_i32","","",541,[[]]],[11,"write_i64","","",541,[[]]],[11,"write_i128","","",541,[[]]],[11,"write_isize","","",541,[[]]],[11,"neg","","",555,[[]]],[11,"neg","std::num","",133,[[],["wrapping",3]]],[11,"neg","","",133,[[],["wrapping",3]]],[11,"neg","std","",543,[[]]],[11,"neg","std::num","",133,[[],["wrapping",3]]],[11,"neg","","",133,[[],["wrapping",3]]],[11,"neg","std","",554,[[]]],[11,"neg","","",553,[[]]],[11,"neg","std::num","",133,[[],["wrapping",3]]],[11,"neg","std","",550,[[]]],[11,"neg","std::num","",133,[[],["wrapping",3]]],[11,"neg","std","",544,[[]]],[11,"neg","","",550,[[]]],[11,"neg","std::num","",133,[[],["wrapping",3]]],[11,"neg","std","",554,[[]]],[11,"neg","std::num","",133,[[],["wrapping",3]]],[11,"neg","std","",548,[[]]],[11,"neg","","",551,[[]]],[11,"neg","","",548,[[]]],[11,"neg","","",553,[[]]],[11,"neg","std::num","",133,[[],["wrapping",3]]],[11,"neg","std","",555,[[]]],[11,"neg","std::num","",133,[[],["wrapping",3]]],[11,"neg","std","",551,[[]]],[11,"neg","","",543,[[]]],[11,"neg","std::num","",133,[[],["wrapping",3]]],[11,"neg","","",133,[[],["wrapping",3]]],[11,"neg","std","",544,[[]]],[11,"index","","",558,[[]]],[11,"index","","",560,[[]]],[11,"index","","",557,[[]]],[11,"div","","",550,[[]]],[11,"div","std::num","",133,[[["wrapping",3]]]],[11,"div","std","",548,[[]]],[11,"div","std::num","",133,[[["wrapping",3]]]],[11,"div","std","",552,[[]]],[11,"div","std::num","",133,[[["wrapping",3]]]],[11,"div","std","",554,[[]]],[11,"div","","",550,[[]]],[11,"div","","",543,[[]]],[11,"div","","",545,[[]]],[11,"div","","",547,[[]]],[11,"div","","",553,[[]]],[11,"div","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"div","","",133,[[["wrapping",3]]]],[11,"div","std","",542,[[]]],[11,"div","","",552,[[]]],[11,"div","","",549,[[]]],[11,"div","","",544,[[]]],[11,"div","std::num","",133,[[["wrapping",3]]]],[11,"div","std","",550,[[]]],[11,"div","std::num","",133,[[["wrapping",3]]]],[11,"div","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"div","std","",552,[[]]],[11,"div","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"div","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"div","std","",542,[[]]],[11,"div","","",547,[[]]],[11,"div","","",555,[[]]],[11,"div","","",554,[[]]],[11,"div","","",551,[[]]],[11,"div","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"div","std","",555,[[]]],[11,"div","","",542,[[]]],[11,"div","","",553,[[]]],[11,"div","","",552,[[]]],[11,"div","","",547,[[]]],[11,"div","std::num","",133,[[["wrapping",3]]]],[11,"div","std","",551,[[]]],[11,"div","","",545,[[]]],[11,"div","","",546,[[]]],[11,"div","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"div","std","",555,[[]]],[11,"div","","",550,[[]]],[11,"div","","",543,[[]]],[11,"div","","",548,[[]]],[11,"div","std::num","",133,[[["wrapping",3]]]],[11,"div","std","",543,[[]]],[11,"div","","",553,[[]]],[11,"div","","",554,[[]]],[11,"div","","",544,[[]]],[11,"div","","",555,[[]]],[11,"div","","",545,[[]]],[11,"div","std::num","",133,[[["wrapping",3]]]],[11,"div","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"div","","",133,[[["wrapping",3]]]],[11,"div","std","",547,[[]]],[11,"div","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"div","","",133,[[["wrapping",3]]]],[11,"div","std","",554,[[]]],[11,"div","","",551,[[]]],[11,"div","","",546,[[]]],[11,"div","","",549,[[]]],[11,"div","","",553,[[]]],[11,"div","","",546,[[]]],[11,"div","","",546,[[]]],[11,"div","std::num","",133,[[["wrapping",3]]]],[11,"div","","",133,[[["wrapping",3]],["wrapping",3]]],[11,"div","std","",549,[[]]],[11,"div","","",542,[[]]],[11,"div","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"div","std","",548,[[]]],[11,"div","","",543,[[]]],[11,"div","std::time","",527,[[],["duration",3]]],[11,"div","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"div","std","",544,[[]]],[11,"div","std::num","",133,[[["wrapping",3]],["wrapping",3]]],[11,"div","std","",549,[[]]],[11,"div","","",548,[[]]],[11,"div","","",544,[[]]],[11,"div","","",545,[[]]],[11,"div","","",551,[[]]],[11,"build_hasher","std::hash","",302,[[]]],[11,"poll","std::future","",534,[[["pin",3],["context",3],["pending",3]],["poll",4]]],[11,"poll","std","",541,[[["context",3],["pin",3]],["poll",4]]],[11,"poll","std::pin","",344,[[["context",3],["pin",3],["pin",3]],["poll",4]]],[11,"poll","std::future","",535,[[["pin",3],["ready",3],["context",3]],["poll",4]]],[11,"allocate","std::alloc","",536,[[["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"allocate_zeroed","","",536,[[["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"deallocate","","",536,[[["nonnull",3],["layout",3]]]],[11,"grow","","",536,[[["nonnull",3],["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"grow_zeroed","","",536,[[["nonnull",3],["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"shrink","","",536,[[["nonnull",3],["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"into_iter","std::collections","Gets an iterator for moving out the <code>BTreeSet</code>\'s contents.",379,[[],["intoiter",3]]],[11,"into_iter","","Creates a consuming iterator, that is, one that moves …",352,[[],["intoiter",3]]],[11,"into_iter","std::vec","Creates a consuming iterator, that is, one that moves …",277,[[],["intoiter",3]]],[11,"into_iter","std::collections","Consumes the list into an iterator yielding elements by …",382,[[],["intoiter",3]]],[11,"into_iter","","",361,[[],["intoiter",3]]],[11,"into_iter","","Consumes the <code>VecDeque</code> into a front-to-back iterator …",389,[[],["intoiter",3]]],[11,"call","std::boxed","",213,[[]]],[11,"to_owned","std","",557,[[],[["vec",3],["global",3]]]],[11,"clone_into","","",557,[[["vec",3]]]],[11,"to_owned","","",560,[[],["string",3]]],[11,"clone_into","","",560,[[["string",3]]]],[11,"join","","",557,[[],["string",3]]],[11,"join","","",557,[[],[["vec",3],["global",3]]]],[11,"join","","",557,[[],[["vec",3],["global",3]]]],[11,"to_string","std::borrow","",1,[[],["string",3]]],[11,"to_string","std::string","",273,[[],["string",3]]],[11,"to_string","std","",564,[[],["string",3]]],[11,"to_string","","",560,[[],["string",3]]],[11,"as_inner","std::collections::binary_heap","",355,[[]]],[11,"as_inner","std::vec","",278,[[]]],[11,"poll","std::boxed","",213,[[["pin",3],["context",3],["box",3]],["poll",4]]],[11,"deref","std::collections::binary_heap","",353,[[]]],[11,"deref","std::sync","",498,[[]]],[11,"len","std","Returns the length of <code>self</code>.",560,[[]]],[11,"is_empty","","Returns <code>true</code> if <code>self</code> has a length of zero bytes.",560,[[]]],[11,"is_char_boundary","","Checks that <code>index</code>-th byte is the first byte in a UTF-8 …",560,[[]]],[11,"as_bytes","","Converts a string slice to a byte slice. To convert the …",560,[[]]],[11,"as_bytes_mut","","Converts a mutable string slice to a mutable byte slice.",560,[[]]],[11,"as_ptr","","Converts a string slice to a raw pointer.",560,[[]]],[11,"as_mut_ptr","","Converts a mutable string slice to a raw pointer.",560,[[]]],[11,"get","","Returns a subslice of <code>str</code>.",560,[[],["option",4]]],[11,"get_mut","","Returns a mutable subslice of <code>str</code>.",560,[[],["option",4]]],[11,"get_unchecked","","Returns an unchecked subslice of <code>str</code>.",560,[[]]],[11,"get_unchecked_mut","","Returns a mutable, unchecked subslice of <code>str</code>.",560,[[]]],[11,"slice_unchecked","","Creates a string slice from another string slice, …",560,[[]]],[11,"slice_mut_unchecked","","Creates a string slice from another string slice, …",560,[[]]],[11,"split_at","","Divide one string slice into two at an index.",560,[[]]],[11,"split_at_mut","","Divide one mutable string slice into two at an index.",560,[[]]],[11,"chars","","Returns an iterator over the <code>char</code>s of a string slice.",560,[[],["chars",3]]],[11,"char_indices","","Returns an iterator over the <code>char</code>s of a string slice, and …",560,[[],["charindices",3]]],[11,"bytes","","An iterator over the bytes of a string slice.",560,[[],["bytes",3]]],[11,"split_whitespace","","Splits a string slice by whitespace.",560,[[],["splitwhitespace",3]]],[11,"split_ascii_whitespace","","Splits a string slice by ASCII whitespace.",560,[[],["splitasciiwhitespace",3]]],[11,"lines","","An iterator over the lines of a string, as string slices.",560,[[],["lines",3]]],[11,"lines_any","","An iterator over the lines of a string.",560,[[],["linesany",3]]],[11,"encode_utf16","","Returns an iterator of <code>u16</code> over the string encoded as …",560,[[],["encodeutf16",3]]],[11,"contains","","Returns <code>true</code> if the given pattern matches a sub-slice of …",560,[[]]],[11,"starts_with","","Returns <code>true</code> if the given pattern matches a prefix of this…",560,[[]]],[11,"ends_with","","Returns <code>true</code> if the given pattern matches a suffix of this…",560,[[]]],[11,"find","","Returns the byte index of the first character of this …",560,[[],["option",4]]],[11,"rfind","","Returns the byte index for the first character of the …",560,[[],["option",4]]],[11,"split","","An iterator over substrings of this string slice, …",560,[[],["split",3]]],[11,"split_inclusive","","An iterator over substrings of this string slice, …",560,[[],["splitinclusive",3]]],[11,"rsplit","","An iterator over substrings of the given string slice, …",560,[[],["rsplit",3]]],[11,"split_terminator","","An iterator over substrings of the given string slice, …",560,[[],["splitterminator",3]]],[11,"rsplit_terminator","","An iterator over substrings of <code>self</code>, separated by …",560,[[],["rsplitterminator",3]]],[11,"splitn","","An iterator over substrings of the given string slice, …",560,[[],["splitn",3]]],[11,"rsplitn","","An iterator over substrings of this string slice, …",560,[[],["rsplitn",3]]],[11,"split_once","","Splits the string on the first occurrence of the …",560,[[],["option",4]]],[11,"rsplit_once","","Splits the string on the last occurrence of the specified …",560,[[],["option",4]]],[11,"matches","","An iterator over the disjoint matches of a pattern within …",560,[[],["matches",3]]],[11,"rmatches","","An iterator over the disjoint matches of a pattern within …",560,[[],["rmatches",3]]],[11,"match_indices","","An iterator over the disjoint matches of a pattern within …",560,[[],["matchindices",3]]],[11,"rmatch_indices","","An iterator over the disjoint matches of a pattern within …",560,[[],["rmatchindices",3]]],[11,"trim","","Returns a string slice with leading and trailing …",560,[[]]],[11,"trim_start","","Returns a string slice with leading whitespace removed.",560,[[]]],[11,"trim_end","","Returns a string slice with trailing whitespace removed.",560,[[]]],[11,"trim_left","","Returns a string slice with leading whitespace removed.",560,[[]]],[11,"trim_right","","Returns a string slice with trailing whitespace removed.",560,[[]]],[11,"trim_matches","","Returns a string slice with all prefixes and suffixes …",560,[[]]],[11,"trim_start_matches","","Returns a string slice with all prefixes that match a …",560,[[]]],[11,"strip_prefix","","Returns a string slice with the prefix removed.",560,[[],["option",4]]],[11,"strip_suffix","","Returns a string slice with the suffix removed.",560,[[],["option",4]]],[11,"trim_end_matches","","Returns a string slice with all suffixes that match a …",560,[[]]],[11,"trim_left_matches","","Returns a string slice with all prefixes that match a …",560,[[]]],[11,"trim_right_matches","","Returns a string slice with all suffixes that match a …",560,[[]]],[11,"parse","","Parses this string slice into another type.",560,[[],["result",4]]],[11,"is_ascii","","Checks if all characters in this string are within the …",560,[[]]],[11,"eq_ignore_ascii_case","","Checks that two strings are an ASCII case-insensitive …",560,[[]]],[11,"make_ascii_uppercase","","Converts this string to its ASCII upper case equivalent …",560,[[]]],[11,"make_ascii_lowercase","","Converts this string to its ASCII lower case equivalent …",560,[[]]],[11,"escape_debug","","Return an iterator that escapes each char in <code>self</code> with […",560,[[],["escapedebug",3]]],[11,"escape_default","","Return an iterator that escapes each char in <code>self</code> with […",560,[[],["escapedefault",3]]],[11,"escape_unicode","","Return an iterator that escapes each char in <code>self</code> with […",560,[[],["escapeunicode",3]]],[11,"into_boxed_bytes","","Converts a <code>Box<str></code> into a <code>Box<[u8]></code> without copying or …",560,[[["box",3],["global",3]],[["box",3],["global",3]]]],[11,"replace","","Replaces all matches of a pattern with another string.",560,[[],["string",3]]],[11,"replacen","","Replaces first N matches of a pattern with another string.",560,[[],["string",3]]],[11,"to_lowercase","","Returns the lowercase equivalent of this string slice, as …",560,[[],["string",3]]],[11,"to_uppercase","","Returns the uppercase equivalent of this string slice, as …",560,[[],["string",3]]],[11,"into_string","","Converts a <code>Box<str></code> into a [<code>String</code>] without copying or …",560,[[["box",3],["global",3]],["string",3]]],[11,"repeat","","Creates a new [<code>String</code>] by repeating a string <code>n</code> times.",560,[[],["string",3]]],[11,"to_ascii_uppercase","","Returns a copy of this string where each character is …",560,[[],["string",3]]],[11,"to_ascii_lowercase","","Returns a copy of this string where each character is …",560,[[],["string",3]]],[11,"deref","std::string","",273,[[]]],[11,"deref","std::borrow","",1,[[]]],[11,"deref","std::boxed","",213,[[]]],[11,"deref","std::rc","",222,[[]]],[11,"len","std","Returns the number of elements in the slice.",557,[[]]],[11,"is_empty","","Returns <code>true</code> if the slice has a length of 0.",557,[[]]],[11,"first","","Returns the first element of the slice, or <code>None</code> if it is …",557,[[],["option",4]]],[11,"first_mut","","Returns a mutable pointer to the first element of the …",557,[[],["option",4]]],[11,"split_first","","Returns the first and all the rest of the elements of the …",557,[[],["option",4]]],[11,"split_first_mut","","Returns the first and all the rest of the elements of the …",557,[[],["option",4]]],[11,"split_last","","Returns the last and all the rest of the elements of the …",557,[[],["option",4]]],[11,"split_last_mut","","Returns the last and all the rest of the elements of the …",557,[[],["option",4]]],[11,"last","","Returns the last element of the slice, or <code>None</code> if it is …",557,[[],["option",4]]],[11,"last_mut","","Returns a mutable pointer to the last item in the slice.",557,[[],["option",4]]],[11,"get","","Returns a reference to an element or subslice depending …",557,[[],["option",4]]],[11,"get_mut","","Returns a mutable reference to an element or subslice …",557,[[],["option",4]]],[11,"get_unchecked","","Returns a reference to an element or subslice, without …",557,[[]]],[11,"get_unchecked_mut","","Returns a mutable reference to an element or subslice, …",557,[[]]],[11,"as_ptr","","Returns a raw pointer to the slice\'s buffer.",557,[[]]],[11,"as_mut_ptr","","Returns an unsafe mutable pointer to the slice\'s buffer.",557,[[]]],[11,"as_ptr_range","","Returns the two raw pointers spanning the slice.",557,[[],["range",3]]],[11,"as_mut_ptr_range","","Returns the two unsafe mutable pointers spanning the …",557,[[],["range",3]]],[11,"swap","","Swaps two elements in the slice.",557,[[]]],[11,"reverse","","Reverses the order of elements in the slice, in place.",557,[[]]],[11,"iter","","Returns an iterator over the slice.",557,[[],["iter",3]]],[11,"iter_mut","","Returns an iterator that allows modifying each value.",557,[[],["itermut",3]]],[11,"windows","","Returns an iterator over all contiguous windows of length …",557,[[],["windows",3]]],[11,"chunks","","Returns an iterator over <code>chunk_size</code> elements of the slice …",557,[[],["chunks",3]]],[11,"chunks_mut","","Returns an iterator over <code>chunk_size</code> elements of the slice …",557,[[],["chunksmut",3]]],[11,"chunks_exact","","Returns an iterator over <code>chunk_size</code> elements of the slice …",557,[[],["chunksexact",3]]],[11,"chunks_exact_mut","","Returns an iterator over <code>chunk_size</code> elements of the slice …",557,[[],["chunksexactmut",3]]],[11,"as_chunks","","Splits the slice into a slice of <code>N</code>-element arrays, …",557,[[]]],[11,"array_chunks","","Returns an iterator over <code>N</code> elements of the slice at a …",557,[[],["arraychunks",3]]],[11,"as_chunks_mut","","Splits the slice into a slice of <code>N</code>-element arrays, …",557,[[]]],[11,"array_chunks_mut","","Returns an iterator over <code>N</code> elements of the slice at a …",557,[[],["arraychunksmut",3]]],[11,"array_windows","","Returns an iterator over overlapping windows of <code>N</code> …",557,[[],["arraywindows",3]]],[11,"rchunks","","Returns an iterator over <code>chunk_size</code> elements of the slice …",557,[[],["rchunks",3]]],[11,"rchunks_mut","","Returns an iterator over <code>chunk_size</code> elements of the slice …",557,[[],["rchunksmut",3]]],[11,"rchunks_exact","","Returns an iterator over <code>chunk_size</code> elements of the slice …",557,[[],["rchunksexact",3]]],[11,"rchunks_exact_mut","","Returns an iterator over <code>chunk_size</code> elements of the slice …",557,[[],["rchunksexactmut",3]]],[11,"split_at","","Divides one slice into two at an index.",557,[[]]],[11,"split_at_mut","","Divides one mutable slice into two at an index.",557,[[]]],[11,"split","","Returns an iterator over subslices separated by elements …",557,[[],["split",3]]],[11,"split_mut","","Returns an iterator over mutable subslices separated by …",557,[[],["splitmut",3]]],[11,"split_inclusive","","Returns an iterator over subslices separated by elements …",557,[[],["splitinclusive",3]]],[11,"split_inclusive_mut","","Returns an iterator over mutable subslices separated by …",557,[[],["splitinclusivemut",3]]],[11,"rsplit","","Returns an iterator over subslices separated by elements …",557,[[],["rsplit",3]]],[11,"rsplit_mut","","Returns an iterator over mutable subslices separated by …",557,[[],["rsplitmut",3]]],[11,"splitn","","Returns an iterator over subslices separated by elements …",557,[[],["splitn",3]]],[11,"splitn_mut","","Returns an iterator over subslices separated by elements …",557,[[],["splitnmut",3]]],[11,"rsplitn","","Returns an iterator over subslices separated by elements …",557,[[],["rsplitn",3]]],[11,"rsplitn_mut","","Returns an iterator over subslices separated by elements …",557,[[],["rsplitnmut",3]]],[11,"contains","","Returns <code>true</code> if the slice contains an element with the …",557,[[]]],[11,"starts_with","","Returns <code>true</code> if <code>needle</code> is a prefix of the slice.",557,[[]]],[11,"ends_with","","Returns <code>true</code> if <code>needle</code> is a suffix of the slice.",557,[[]]],[11,"strip_prefix","","Returns a subslice with the prefix removed.",557,[[],["option",4]]],[11,"strip_suffix","","Returns a subslice with the suffix removed.",557,[[],["option",4]]],[11,"binary_search","","Binary searches this sorted slice for a given element.",557,[[],["result",4]]],[11,"binary_search_by","","Binary searches this sorted slice with a comparator …",557,[[],["result",4]]],[11,"binary_search_by_key","","Binary searches this sorted slice with a key extraction …",557,[[],["result",4]]],[11,"sort_unstable","","Sorts the slice, but may not preserve the order of equal …",557,[[]]],[11,"sort_unstable_by","","Sorts the slice with a comparator function, but may not …",557,[[]]],[11,"sort_unstable_by_key","","Sorts the slice with a key extraction function, but may …",557,[[]]],[11,"partition_at_index","","Reorder the slice such that the element at <code>index</code> is at …",557,[[]]],[11,"partition_at_index_by","","Reorder the slice with a comparator function such that …",557,[[]]],[11,"partition_at_index_by_key","","Reorder the slice with a key extraction function such …",557,[[]]],[11,"select_nth_unstable","","Reorder the slice such that the element at <code>index</code> is at …",557,[[]]],[11,"select_nth_unstable_by","","Reorder the slice with a comparator function such that …",557,[[]]],[11,"select_nth_unstable_by_key","","Reorder the slice with a key extraction function such …",557,[[]]],[11,"partition_dedup","","Moves all consecutive repeated elements to the end of the …",557,[[]]],[11,"partition_dedup_by","","Moves all but the first of consecutive elements to the …",557,[[]]],[11,"partition_dedup_by_key","","Moves all but the first of consecutive elements to the …",557,[[]]],[11,"rotate_left","","Rotates the slice in-place such that the first <code>mid</code> …",557,[[]]],[11,"rotate_right","","Rotates the slice in-place such that the first …",557,[[]]],[11,"fill","","Fills <code>self</code> with elements by cloning <code>value</code>.",557,[[]]],[11,"fill_with","","Fills <code>self</code> with elements returned by calling a closure …",557,[[]]],[11,"clone_from_slice","","Copies the elements from <code>src</code> into <code>self</code>.",557,[[]]],[11,"copy_from_slice","","Copies all elements from <code>src</code> into <code>self</code>, using a memcpy.",557,[[]]],[11,"copy_within","","Copies elements from one part of the slice to another …",557,[[]]],[11,"swap_with_slice","","Swaps all elements in <code>self</code> with those in <code>other</code>.",557,[[]]],[11,"align_to","","Transmute the slice to a slice of another type, ensuring …",557,[[]]],[11,"align_to_mut","","Transmute the slice to a slice of another type, ensuring …",557,[[]]],[11,"is_sorted","","Checks if the elements of this slice are sorted.",557,[[]]],[11,"is_sorted_by","","Checks if the elements of this slice are sorted using the …",557,[[]]],[11,"is_sorted_by_key","","Checks if the elements of this slice are sorted using the …",557,[[]]],[11,"partition_point","","Returns the index of the partition point according to the …",557,[[]]],[11,"is_ascii","","Checks if all bytes in this slice are within the ASCII …",557,[[]]],[11,"eq_ignore_ascii_case","","Checks that two slices are an ASCII case-insensitive …",557,[[]]],[11,"make_ascii_uppercase","","Converts this slice to its ASCII upper case equivalent …",557,[[]]],[11,"make_ascii_lowercase","","Converts this slice to its ASCII lower case equivalent …",557,[[]]],[11,"sort","","Sorts the slice.",557,[[]]],[11,"sort_by","","Sorts the slice with a comparator function.",557,[[]]],[11,"sort_by_key","","Sorts the slice with a key extraction function.",557,[[]]],[11,"sort_by_cached_key","","Sorts the slice with a key extraction function.",557,[[]]],[11,"to_vec","","Copies <code>self</code> into a new <code>Vec</code>.",557,[[],[["vec",3],["global",3]]]],[11,"to_vec_in","","Copies <code>self</code> into a new <code>Vec</code> with an allocator.",557,[[],["vec",3]]],[11,"into_vec","","Converts <code>self</code> into a vector without clones or allocation.",557,[[["box",3]],["vec",3]]],[11,"repeat","","Creates a vector by repeating a slice <code>n</code> times.",557,[[],[["vec",3],["global",3]]]],[11,"concat","","Flattens a slice of <code>T</code> into a single value <code>Self::Output</code>.",557,[[]]],[11,"join","","Flattens a slice of <code>T</code> into a single value <code>Self::Output</code>, …",557,[[]]],[11,"connect","","Flattens a slice of <code>T</code> into a single value <code>Self::Output</code>, …",557,[[]]],[11,"to_ascii_uppercase","","Returns a vector containing a copy of this slice where …",557,[[],[["global",3],["vec",3]]]],[11,"to_ascii_lowercase","","Returns a vector containing a copy of this slice where …",557,[[],[["global",3],["vec",3]]]],[11,"deref","std::vec","",277,[[]]],[11,"from","","",277,[[],[["vec",3],["global",3]]]],[11,"from","std::sync","",498,[[],["arc",3]]],[11,"from","std::vec","",277,[[],[["vec",3],["global",3]]]],[11,"from","std::string","Converts a <code>&mut str</code> into a <code>String</code>.",273,[[],["string",3]]],[11,"from","","",273,[[["cow",4]],["string",3]]],[11,"from","std::rc","",222,[[["string",3]],["rc",3]]],[11,"from","std::boxed","Converts the given <code>String</code> to a boxed <code>str</code> slice that is …",213,[[["string",3]],[["box",3],["global",3]]]],[11,"from","std::task","",531,[[["arc",3]],["rawwaker",3]]],[11,"from","std::collections","Converts a <code>Vec<T></code> into a <code>BinaryHeap<T></code>.",352,[[["vec",3],["global",3]],["binaryheap",3]]],[11,"from","std::task","",533,[[["arc",3]],["waker",3]]],[11,"from","std::rc","",222,[[["box",3],["global",3]],["rc",3]]],[11,"from","std::vec","",277,[[["cow",4]],[["vec",3],["global",3]]]],[11,"from","std::string","",273,[[],["string",3]]],[11,"from","std::vec","Converts a <code>BinaryHeap<T></code> into a <code>Vec<T></code>.",277,[[["binaryheap",3]],[["vec",3],["global",3]]]],[11,"from","std::sync","",498,[[],["arc",3]]],[11,"from","","",498,[[["box",3],["global",3]],["arc",3]]],[11,"from","std::vec","",277,[[],[["vec",3],["global",3]]]],[11,"from","std::boxed","",213,[[["cow",4]],[["global",3],["box",3]]]],[11,"from","std::vec","",277,[[],[["global",3],["vec",3]]]],[11,"from","std::rc","",222,[[["vec",3],["global",3]],["rc",3]]],[11,"from","std::boxed","Converts a <code>Box<str></code> into a <code>Box<[u8]></code>",213,[[["box",3]],["box",3]]],[11,"from","std::borrow","",1,[[],["cow",4]]],[11,"from","std::boxed","Converts a generic type <code>T</code> into a <code>Box<T></code>",213,[[],[["box",3],["global",3]]]],[11,"from","std::borrow","",1,[[],["cow",4]]],[11,"from","std::collections","",104,[[["layouterror",3]],["tryreserveerror",4]]],[11,"from","std::vec","Converts the given <code>String</code> to a vector <code>Vec</code> that holds …",277,[[["string",3]],[["global",3],["vec",3]]]],[11,"from","std::rc","",222,[[["cow",4]],["rc",3]]],[11,"from","std::borrow","",1,[[["string",3]],["cow",4]]],[11,"from","","",1,[[["string",3]],["cow",4]]],[11,"from","std::string","",273,[[["string",3]],["string",3]]],[11,"from","","",273,[[],["string",3]]],[11,"from","std::sync","",498,[[],["arc",3]]],[11,"from","std::vec","Turn a <code>VecDeque<T></code> into a <code>Vec<T></code>.",277,[[["vecdeque",3]],[["vec",3],["global",3]]]],[11,"from","std::sync","",498,[[["vec",3],["global",3]],["arc",3]]],[11,"from","std::boxed","",213,[[["vec",3]],["box",3]]],[11,"from","std::sync","",498,[[["cow",4]],["arc",3]]],[11,"from","std::rc","",222,[[],["rc",3]]],[11,"from","std::string","Converts the given boxed <code>str</code> slice to a <code>String</code>. It is …",273,[[["box",3],["global",3]],["string",3]]],[11,"from","std::rc","",222,[[],["rc",3]]],[11,"from","std::vec","",277,[[["box",3]],["vec",3]]],[11,"from","std::rc","",222,[[],["rc",3]]],[11,"from","std::pin","Converts a <code>Box<T></code> into a <code>Pin<Box<T>></code>",344,[[["box",3]],[["pin",3],["box",3]]]],[11,"from","std::borrow","",1,[[["vec",3]],["cow",4]]],[11,"from","","",1,[[["vec",3],["global",3]],["cow",4]]],[11,"from","std::boxed","Converts a <code>&[T]</code> into a <code>Box<[T]></code>",213,[[],[["global",3],["box",3]]]],[11,"from","std::collections","Turn a <code>Vec<T></code> into a <code>VecDeque<T></code>.",389,[[["vec",3],["global",3]],["vecdeque",3]]],[11,"from","std::boxed","Converts a <code>&str</code> into a <code>Box<str></code>",213,[[],[["box",3],["global",3]]]],[11,"from","std::sync","",498,[[["string",3]],["arc",3]]],[11,"from","std::boxed","",213,[[["cow",4]],[["box",3],["global",3]]]],[11,"from","","Converts a <code>[T; N]</code> into a <code>Box<[T]></code>",213,[[],[["global",3],["box",3]]]],[11,"add_assign","std::borrow","",1,[[]]],[11,"add_assign","","",1,[[["cow",4]]]],[11,"add_assign","std::string","",273,[[]]],[11,"drop","std::vec","",277,[[]]],[11,"drop","std::collections","",361,[[]]],[11,"drop","std::collections::vec_deque","",390,[[]]],[11,"drop","std::vec","",280,[[]]],[11,"drop","std::sync","Drops the <code>Arc</code>.",498,[[]]],[11,"drop","std::rc","Drops the <code>Rc</code>.",222,[[]]],[11,"drop","","Drops the <code>Weak</code> pointer.",223,[[]]],[11,"drop","std::collections::linked_list","",388,[[]]],[11,"drop","std::collections::btree_map","",371,[[]]],[11,"drop","std::collections::binary_heap","Removes heap elements in heap order.",358,[[]]],[11,"drop","std::collections::btree_set","",378,[[]]],[11,"drop","std::vec","",278,[[]]],[11,"drop","std::sync","Drops the <code>Weak</code> pointer.",499,[[]]],[11,"drop","std::collections","",389,[[]]],[11,"drop","","",382,[[]]],[11,"drop","std::boxed","",213,[[]]],[11,"drop","std::collections::btree_map","",363,[[]]],[11,"drop","std::collections::binary_heap","",353,[[]]],[11,"drop","std::vec","",279,[[]]],[11,"drop","","",281,[[]]],[11,"drop","std::string","",276,[[]]],[11,"call_mut","std::boxed","",213,[[]]],[11,"fmt","std::rc","",222,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::boxed","",213,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::sync","",498,[[["formatter",3]],[["result",4],["error",3]]]],[11,"index","std::string","",273,[[["rangeto",3]]]],[11,"index","","",273,[[["rangetoinclusive",3]]]],[11,"index","","",273,[[["range",3]]]],[11,"index","","",273,[[["rangefrom",3]]]],[11,"index","std::collections","Returns a reference to the value corresponding to the …",361,[[]]],[11,"index","","",389,[[]]],[11,"index","std::vec","",277,[[]]],[11,"index","std::string","",273,[[["rangefull",3]]]],[11,"index","","",273,[[["rangeinclusive",3]]]],[11,"from_iter","","",273,[[],["string",3]]],[11,"from_iter","","",273,[[],["string",3]]],[11,"from_iter","std::borrow","",1,[[],["cow",4]]],[11,"from_iter","std::collections","",389,[[],["vecdeque",3]]],[11,"from_iter","std::boxed","",213,[[],[["global",3],["box",3]]]],[11,"from_iter","std::string","",273,[[],["string",3]]],[11,"from_iter","","",273,[[],["string",3]]],[11,"from_iter","std::collections","",379,[[],["btreeset",3]]],[11,"from_iter","std::string","",273,[[],["string",3]]],[11,"from_iter","std::collections","",352,[[],["binaryheap",3]]],[11,"from_iter","std::borrow","",1,[[],["cow",4]]],[11,"from_iter","std::vec","",277,[[],[["vec",3],["global",3]]]],[11,"from_iter","std::borrow","",1,[[],["cow",4]]],[11,"from_iter","","",1,[[],["cow",4]]],[11,"from_iter","std::rc","Takes each element in the <code>Iterator</code> and collects it into …",222,[[],["rc",3]]],[11,"from_iter","std::string","",273,[[],["string",3]]],[11,"from_iter","std::sync","Takes each element in the <code>Iterator</code> and collects it into …",498,[[],["arc",3]]],[11,"from_iter","std::collections","",382,[[],["linkedlist",3]]],[11,"from_iter","","",361,[[],["btreemap",3]]],[11,"default","std::borrow","Creates an owned Cow<\'a, B> with the default value for …",1,[[],["cow",4]]],[11,"default","std::sync","Constructs a new <code>Weak<T></code>, without allocating memory. …",499,[[],["weak",3]]],[11,"default","std::boxed","",213,[[],[["box",3],["global",3]]]],[11,"default","std::sync","Creates a new <code>Arc<T></code>, with the <code>Default</code> value for <code>T</code>.",498,[[],["arc",3]]],[11,"default","std::rc","Constructs a new <code>Weak<T></code>, allocating memory for <code>T</code> without …",223,[[],["weak",3]]],[11,"default","std::boxed","Creates a <code>Box<T></code>, with the <code>Default</code> value for T.",213,[[],[["box",3],["global",3]]]],[11,"default","std::collections","Creates an empty <code>VecDeque<T></code>.",389,[[],["vecdeque",3]]],[11,"default","","Creates an empty <code>BTreeMap</code>.",361,[[],["btreemap",3]]],[11,"default","std::string","Creates an empty <code>String</code>.",273,[[],["string",3]]],[11,"default","std::collections","Creates an empty <code>BinaryHeap<T></code>.",352,[[],["binaryheap",3]]],[11,"default","std::rc","Creates a new <code>Rc<T></code>, with the <code>Default</code> value for <code>T</code>.",222,[[],["rc",3]]],[11,"default","std::collections","Creates an empty <code>LinkedList<T></code>.",382,[[],["linkedlist",3]]],[11,"default","","Creates an empty <code>BTreeSet</code>.",379,[[],["btreeset",3]]],[11,"default","std::boxed","",213,[[],[["global",3],["box",3]]]],[11,"default","std::vec","Creates an empty <code>Vec<T></code>.",277,[[],[["vec",3],["global",3]]]],[11,"default","std::alloc","",536,[[],["global",3]]],[11,"as_mut","std::boxed","",213,[[]]],[11,"as_mut","std::vec","",277,[[]]],[11,"as_mut","std::string","",273,[[]]],[11,"as_mut","std::vec","",277,[[],["vec",3]]],[11,"is_empty","","",279,[[]]],[11,"is_empty","std::collections::vec_deque","",392,[[]]],[11,"is_empty","","",391,[[]]],[11,"is_empty","std::collections::binary_heap","",357,[[]]],[11,"is_empty","std::vec","",278,[[]]],[11,"is_empty","std::collections::binary_heap","",355,[[]]],[11,"len","std::collections::btree_map","",368,[[]]],[11,"len","std::boxed","",213,[[]]],[11,"is_empty","","",213,[[]]],[11,"len","std::collections::btree_map","",362,[[]]],[11,"len","","",372,[[]]],[11,"len","","",363,[[]]],[11,"len","","",365,[[]]],[11,"len","","",366,[[]]],[11,"len","std::collections::btree_set","",373,[[]]],[11,"is_empty","std::collections::vec_deque","",393,[[]]],[11,"len","std::collections::btree_map","",364,[[]]],[11,"len","","",367,[[]]],[11,"is_empty","std::collections::binary_heap","",354,[[]]],[11,"len","std::collections::btree_set","",380,[[]]],[11,"deref_mut","std::vec","",277,[[]]],[11,"deref_mut","std::string","",273,[[]]],[11,"deref_mut","std::collections::binary_heap","",353,[[]]],[11,"deref_mut","std::boxed","",213,[[]]],[11,"concat","std","",557,[[],["string",3]]],[11,"concat","","",557,[[],[["vec",3],["global",3]]]],[11,"partial_cmp","std::collections","",389,[[["vecdeque",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","std::boxed","",213,[[["box",3]],[["ordering",4],["option",4]]]],[11,"lt","","",213,[[["box",3]]]],[11,"le","","",213,[[["box",3]]]],[11,"ge","","",213,[[["box",3]]]],[11,"gt","","",213,[[["box",3]]]],[11,"partial_cmp","std::borrow","",1,[[["cow",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","std::rc","Partial comparison for two <code>Rc</code>s.",222,[[["rc",3]],[["ordering",4],["option",4]]]],[11,"lt","","Less-than comparison for two <code>Rc</code>s.",222,[[["rc",3]]]],[11,"le","","\'Less than or equal to\' comparison for two <code>Rc</code>s.",222,[[["rc",3]]]],[11,"gt","","Greater-than comparison for two <code>Rc</code>s.",222,[[["rc",3]]]],[11,"ge","","\'Greater than or equal to\' comparison for two <code>Rc</code>s.",222,[[["rc",3]]]],[11,"partial_cmp","std::collections","",361,[[["btreemap",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","std::string","",273,[[["string",3]],[["ordering",4],["option",4]]]],[11,"lt","","",273,[[["string",3]]]],[11,"le","","",273,[[["string",3]]]],[11,"gt","","",273,[[["string",3]]]],[11,"ge","","",273,[[["string",3]]]],[11,"partial_cmp","std::collections","",379,[[["btreeset",3]],[["ordering",4],["option",4]]]],[11,"lt","","",379,[[["btreeset",3]]]],[11,"le","","",379,[[["btreeset",3]]]],[11,"gt","","",379,[[["btreeset",3]]]],[11,"ge","","",379,[[["btreeset",3]]]],[11,"partial_cmp","std::vec","",277,[[["vec",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","std::sync","Partial comparison for two <code>Arc</code>s.",498,[[["arc",3]],[["ordering",4],["option",4]]]],[11,"lt","","Less-than comparison for two <code>Arc</code>s.",498,[[["arc",3]]]],[11,"le","","\'Less than or equal to\' comparison for two <code>Arc</code>s.",498,[[["arc",3]]]],[11,"gt","","Greater-than comparison for two <code>Arc</code>s.",498,[[["arc",3]]]],[11,"ge","","\'Greater than or equal to\' comparison for two <code>Arc</code>s.",498,[[["arc",3]]]],[11,"partial_cmp","std::collections","",382,[[["linkedlist",3]],[["ordering",4],["option",4]]]],[11,"resume","std::boxed","",213,[[["pin",3],["box",3]],["generatorstate",4]]],[11,"resume","std::pin","",344,[[["pin",3],["pin",3]],["generatorstate",4]]],[11,"cmp","std::collections","",361,[[["btreemap",3]],["ordering",4]]],[11,"cmp","std::string","",273,[[["string",3]],["ordering",4]]],[11,"cmp","std::collections","",382,[[["linkedlist",3]],["ordering",4]]],[11,"cmp","std::rc","Comparison for two <code>Rc</code>s.",222,[[["rc",3]],["ordering",4]]],[11,"cmp","std::sync","Comparison for two <code>Arc</code>s.",498,[[["arc",3]],["ordering",4]]],[11,"cmp","std::boxed","",213,[[["box",3]],["ordering",4]]],[11,"cmp","std::borrow","",1,[[["cow",4]],["ordering",4]]],[11,"cmp","std::collections","",389,[[["vecdeque",3]],["ordering",4]]],[11,"cmp","","",379,[[["btreeset",3]],["ordering",4]]],[11,"cmp","std::vec","",277,[[["vec",3]],["ordering",4]]],[11,"borrow_mut","std::string","",273,[[]]],[11,"borrow_mut","std::vec","",277,[[]]],[11,"borrow_mut","std::boxed","",213,[[]]],[11,"finish","","",213,[[]]],[11,"write","","",213,[[]]],[11,"write_u8","","",213,[[]]],[11,"write_u16","","",213,[[]]],[11,"write_u32","","",213,[[]]],[11,"write_u64","","",213,[[]]],[11,"write_u128","","",213,[[]]],[11,"write_usize","","",213,[[]]],[11,"write_i8","","",213,[[]]],[11,"write_i16","","",213,[[]]],[11,"write_i32","","",213,[[]]],[11,"write_i64","","",213,[[]]],[11,"write_i128","","",213,[[]]],[11,"write_isize","","",213,[[]]],[11,"as_ref","std::vec","",277,[[]]],[11,"as_ref","","",278,[[]]],[11,"as_ref","std::boxed","",213,[[]]],[11,"as_ref","std::string","",273,[[]]],[11,"as_ref","","",273,[[]]],[11,"as_ref","std::vec","",279,[[]]],[11,"as_ref","std::borrow","",1,[[]]],[11,"as_ref","std::vec","",277,[[],["vec",3]]],[11,"as_ref","std::rc","",222,[[]]],[11,"as_ref","std::sync","",498,[[]]],[11,"next","std::collections::linked_list","",383,[[],["option",4]]],[11,"size_hint","","",383,[[]]],[11,"last","","",383,[[],["option",4]]],[11,"next","std::collections::btree_set","",376,[[],["option",4]]],[11,"size_hint","","",376,[[]]],[11,"min","","",376,[[],["option",4]]],[11,"next","std::collections::binary_heap","",356,[[],["option",4]]],[11,"size_hint","","",356,[[]]],[11,"next","std::collections::linked_list","",384,[[],["option",4]]],[11,"size_hint","","",384,[[]]],[11,"last","","",384,[[],["option",4]]],[11,"next","std::collections::btree_map","",368,[[],["option",4]]],[11,"size_hint","","",368,[[]]],[11,"last","","",368,[[],["option",4]]],[11,"next","std::collections::vec_deque","",392,[[],["option",4]]],[11,"size_hint","","",392,[[]]],[11,"next","","",390,[[],["option",4]]],[11,"size_hint","","",390,[[]]],[11,"next","std::collections::btree_map","",363,[[],["option",4]]],[11,"size_hint","","",363,[[]]],[11,"next","std::collections::vec_deque","",393,[[],["option",4]]],[11,"size_hint","","",393,[[]]],[11,"fold","","",393,[[]]],[11,"try_fold","","",393,[[]]],[11,"nth","","",393,[[],["option",4]]],[11,"last","","",393,[[],["option",4]]],[11,"next","std::collections::btree_map","",365,[[],["option",4]]],[11,"size_hint","","",365,[[]]],[11,"last","","",365,[[],["option",4]]],[11,"next","","",371,[[],["option",4]]],[11,"size_hint","","",371,[[]]],[11,"next","std::collections::btree_set","",373,[[],["option",4]]],[11,"size_hint","","",373,[[]]],[11,"last","","",373,[[],["option",4]]],[11,"min","","",373,[[],["option",4]]],[11,"max","","",373,[[],["option",4]]],[11,"next","std::boxed","",213,[[],["option",4]]],[11,"size_hint","","",213,[[]]],[11,"nth","","",213,[[],["option",4]]],[11,"last","","",213,[[],["option",4]]],[11,"next","std::collections::btree_map","",370,[[],["option",4]]],[11,"last","","",370,[[],["option",4]]],[11,"min","","",370,[[],["option",4]]],[11,"max","","",370,[[],["option",4]]],[11,"next","std::string","",276,[[],["option",4]]],[11,"size_hint","","",276,[[]]],[11,"last","","",276,[[],["option",4]]],[11,"next","std::collections::binary_heap","",354,[[],["option",4]]],[11,"size_hint","","",354,[[]]],[11,"last","","",354,[[],["option",4]]],[11,"next","std::collections::btree_map","",372,[[],["option",4]]],[11,"size_hint","","",372,[[]]],[11,"last","","",372,[[],["option",4]]],[11,"min","","",372,[[],["option",4]]],[11,"max","","",372,[[],["option",4]]],[11,"next","std::collections::binary_heap","",357,[[],["option",4]]],[11,"size_hint","","",357,[[]]],[11,"next","std::vec","",279,[[],["option",4]]],[11,"size_hint","","",279,[[]]],[11,"next","std::collections::btree_map","",366,[[],["option",4]]],[11,"size_hint","","",366,[[]]],[11,"last","","",366,[[],["option",4]]],[11,"next","","",367,[[],["option",4]]],[11,"size_hint","","",367,[[]]],[11,"last","","",367,[[],["option",4]]],[11,"min","","",367,[[],["option",4]]],[11,"max","","",367,[[],["option",4]]],[11,"next","std::collections::btree_set","",377,[[],["option",4]]],[11,"size_hint","","",377,[[]]],[11,"min","","",377,[[],["option",4]]],[11,"next","std::vec","",278,[[],["option",4]]],[11,"size_hint","","",278,[[]]],[11,"count","","",278,[[]]],[11,"__iterator_get_unchecked","","",278,[[]]],[11,"next","std::collections::binary_heap","",358,[[],["option",4]]],[11,"size_hint","","",358,[[]]],[11,"next","std::collections::linked_list","",385,[[],["option",4]]],[11,"size_hint","","",385,[[]]],[11,"next","std::collections::vec_deque","",391,[[],["option",4]]],[11,"size_hint","","",391,[[]]],[11,"fold","","",391,[[]]],[11,"nth","","",391,[[],["option",4]]],[11,"last","","",391,[[],["option",4]]],[11,"next","std::collections::btree_set","",375,[[],["option",4]]],[11,"size_hint","","",375,[[]]],[11,"min","","",375,[[],["option",4]]],[11,"next","std::collections::linked_list","",388,[[],["option",4]]],[11,"size_hint","","",388,[[]]],[11,"next","std::collections::btree_map","",362,[[],["option",4]]],[11,"size_hint","","",362,[[]]],[11,"last","","",362,[[],["option",4]]],[11,"min","","",362,[[],["option",4]]],[11,"max","","",362,[[],["option",4]]],[11,"next","std::collections::binary_heap","",355,[[],["option",4]]],[11,"size_hint","","",355,[[]]],[11,"next","std::collections::btree_set","",374,[[],["option",4]]],[11,"size_hint","","",374,[[]]],[11,"min","","",374,[[],["option",4]]],[11,"next","std::collections::btree_map","",364,[[],["option",4]]],[11,"size_hint","","",364,[[]]],[11,"last","","",364,[[],["option",4]]],[11,"min","","",364,[[],["option",4]]],[11,"max","","",364,[[],["option",4]]],[11,"next","std::vec","",280,[[],["option",4]]],[11,"size_hint","","",280,[[]]],[11,"next","","",281,[[],["option",4]]],[11,"size_hint","","",281,[[]]],[11,"next","std::collections::btree_set","",378,[[],["option",4]]],[11,"size_hint","","",378,[[]]],[11,"next","","",380,[[],["option",4]]],[11,"size_hint","","",380,[[]]],[11,"next","std::collections::btree_map","",369,[[],["option",4]]],[11,"last","","",369,[[],["option",4]]],[11,"min","","",369,[[],["option",4]]],[11,"max","","",369,[[],["option",4]]],[11,"next","std::collections::btree_set","",381,[[],["option",4]]],[11,"last","","",381,[[],["option",4]]],[11,"min","","",381,[[],["option",4]]],[11,"max","","",381,[[],["option",4]]],[11,"hash","std::collections","",389,[[]]],[11,"hash","std::boxed","",213,[[]]],[11,"hash","std::collections","",361,[[]]],[11,"hash","std::borrow","",1,[[]]],[11,"hash","std::rc","",222,[[]]],[11,"hash","std::string","",273,[[]]],[11,"hash","std::collections","",382,[[]]],[11,"hash","std::vec","",277,[[]]],[11,"hash","std::collections","",379,[[]]],[11,"hash","std::sync","",498,[[]]],[11,"add","std::string","",273,[[],["string",3]]],[11,"add","std::borrow","",1,[[]]],[11,"add","","",1,[[["cow",4]]]],[11,"write_str","std::string","",273,[[],[["result",4],["error",3]]]],[11,"write_char","","",273,[[],[["result",4],["error",3]]]],[11,"try_from","std::rc","",222,[[["rc",3]],[["rc",3],["result",4]]]],[11,"try_from","std::sync","",498,[[["arc",3]],[["result",4],["arc",3]]]],[11,"try_from","std","Gets the entire contents of the <code>Vec<T></code> as an array, if …",558,[[["vec",3]],[["result",4],["vec",3]]]],[11,"try_from","std::boxed","",213,[[["global",3],["box",3]],[["result",4],["box",3]]]],[11,"borrow","","",213,[[]]],[11,"borrow","std::sync","",498,[[]]],[11,"borrow","std::vec","",277,[[]]],[11,"borrow","std::borrow","",1,[[]]],[11,"borrow","std::string","",273,[[]]],[11,"borrow","std::rc","",222,[[]]],[11,"eq","std::collections","",389,[[]]],[11,"eq","std::borrow","",1,[[]]],[11,"ne","","",1,[[]]],[11,"eq","std::boxed","",213,[[["box",3]]]],[11,"ne","","",213,[[["box",3]]]],[11,"eq","std::string","",274,[[["fromutf8error",3]]]],[11,"ne","","",274,[[["fromutf8error",3]]]],[11,"eq","std","",560,[[["string",3]]]],[11,"ne","","",560,[[["string",3]]]],[11,"eq","std::borrow","",1,[[["string",3]]]],[11,"ne","","",1,[[["string",3]]]],[11,"eq","std::collections","",389,[[]]],[11,"eq","","",379,[[["btreeset",3]]]],[11,"ne","","",379,[[["btreeset",3]]]],[11,"eq","std::vec","",277,[[]]],[11,"ne","","",277,[[]]],[11,"eq","std","",560,[[["cow",4]]]],[11,"ne","","",560,[[["cow",4]]]],[11,"eq","std::collections","",389,[[]]],[11,"eq","std","",560,[[["cow",4]]]],[11,"ne","","",560,[[["cow",4]]]],[11,"eq","std::borrow","",1,[[["vec",3]]]],[11,"ne","","",1,[[["vec",3]]]],[11,"eq","","",1,[[["cow",4]]]],[11,"eq","std::collections","",389,[[["vecdeque",3]]]],[11,"eq","std::borrow","",1,[[]]],[11,"ne","","",1,[[]]],[11,"eq","std::sync","Equality for two <code>Arc</code>s.",498,[[["arc",3]]]],[11,"ne","","Inequality for two <code>Arc</code>s.",498,[[["arc",3]]]],[11,"eq","std::vec","",277,[[]]],[11,"ne","","",277,[[]]],[11,"eq","std::collections","",389,[[]]],[11,"eq","std::rc","Equality for two <code>Rc</code>s.",222,[[["rc",3]]]],[11,"ne","","Inequality for two <code>Rc</code>s.",222,[[["rc",3]]]],[11,"eq","std::collections","",382,[[["linkedlist",3]]]],[11,"ne","","",382,[[["linkedlist",3]]]],[11,"eq","std::string","",273,[[]]],[11,"ne","","",273,[[]]],[11,"eq","std::borrow","",1,[[]]],[11,"ne","","",1,[[]]],[11,"eq","std::vec","",277,[[["vec",3]]]],[11,"ne","","",277,[[["vec",3]]]],[11,"eq","std","",560,[[["string",3]]]],[11,"ne","","",560,[[["string",3]]]],[11,"eq","std::string","",273,[[["cow",4]]]],[11,"ne","","",273,[[["cow",4]]]],[11,"eq","std::vec","",277,[[]]],[11,"ne","","",277,[[]]],[11,"eq","std","",557,[[["vec",3]]]],[11,"ne","","",557,[[["vec",3]]]],[11,"eq","std::collections","",361,[[["btreemap",3]]]],[11,"eq","std","",557,[[["vec",3]]]],[11,"ne","","",557,[[["vec",3]]]],[11,"eq","","",557,[[["vec",3]]]],[11,"ne","","",557,[[["vec",3]]]],[11,"eq","std::collections","",104,[[["tryreserveerror",4]]]],[11,"ne","","",104,[[["tryreserveerror",4]]]],[11,"eq","std::string","",273,[[["string",3]]]],[11,"ne","","",273,[[["string",3]]]],[11,"eq","std::collections","",389,[[["vec",3]]]],[11,"eq","std::string","",273,[[]]],[11,"ne","","",273,[[]]],[11,"eq","std::borrow","",1,[[]]],[11,"ne","","",1,[[]]],[11,"eq","std::vec","",277,[[]]],[11,"ne","","",277,[[]]],[11,"eq","std::collections","",389,[[]]],[11,"eq","std::vec","",277,[[]]],[11,"ne","","",277,[[]]],[11,"fmt","","",281,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::string","",276,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections","",352,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::btree_set","",377,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",375,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::string","",274,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::vec_deque","",392,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::binary_heap","",355,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::btree_map","",360,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::binary_heap","",357,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::btree_map","",364,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::sync","",499,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections","",382,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::alloc","",536,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::btree_map","",372,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections","",104,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::linked_list","",386,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::btree_map","",363,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::vec_deque","",393,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::binary_heap","",354,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::btree_map","",365,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::btree_set","",381,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",380,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::btree_map","",370,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::string","",275,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::linked_list","",388,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections","",379,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::binary_heap","",356,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::btree_map","",359,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::vec","",278,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::btree_map","",371,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::boxed","",213,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::string","",273,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::linked_list","",387,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::btree_map","",368,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::linked_list","",385,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::binary_heap","",353,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::btree_map","",103,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",367,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::binary_heap","",358,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::vec_deque","",390,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",391,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::rc","",223,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::vec","",279,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::btree_set","",378,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections","",361,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::rc","",222,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::btree_set","",376,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::linked_list","",383,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::btree_map","",366,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::vec","",277,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::btree_set","",374,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::borrow","",1,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections","",389,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::sync","",498,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::vec","",280,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::btree_map","",362,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::linked_list","",384,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::btree_map","",369,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections::btree_set","",373,[[["formatter",3]],[["result",4],["error",3]]]],[11,"clone","std::collections::binary_heap","",354,[[],["iter",3]]],[11,"clone","std::collections::linked_list","",385,[[],["intoiter",3]]],[11,"clone","std::borrow","",1,[[],["cow",4]]],[11,"clone_from","","",1,[[["cow",4]]]],[11,"clone","std::collections::vec_deque","",393,[[],["iter",3]]],[11,"clone","std::collections","",104,[[],["tryreserveerror",4]]],[11,"clone","std::sync","Makes a clone of the <code>Weak</code> pointer that points to the same …",499,[[],["weak",3]]],[11,"clone","std::string","",274,[[],["fromutf8error",3]]],[11,"clone","std::boxed","",213,[[],["box",3]]],[11,"clone_from","","",213,[[["box",3]]]],[11,"clone","std::vec","",277,[[],["vec",3]]],[11,"clone_from","","",277,[[["vec",3]]]],[11,"clone","std::boxed","",213,[[],[["box",3],["global",3]]]],[11,"clone","std::collections","",389,[[],["vecdeque",3]]],[11,"clone_from","","",389,[[["vecdeque",3]]]],[11,"clone","std::string","",273,[[],["string",3]]],[11,"clone_from","","",273,[[["string",3]]]],[11,"clone","std::boxed","Returns a new box with a <code>clone()</code> of this box\'s contents.",213,[[],["box",3]]],[11,"clone_from","","Copies <code>source</code>\'s contents into <code>self</code> without creating a new …",213,[[["box",3]]]],[11,"clone","std::collections","",352,[[],["binaryheap",3]]],[11,"clone_from","","",352,[[["binaryheap",3]]]],[11,"clone","std::collections::binary_heap","",356,[[],["intoitersorted",3]]],[11,"clone","std::collections::btree_set","",381,[[],["range",3]]],[11,"clone","std::rc","Makes a clone of the <code>Rc</code> pointer.",222,[[],["rc",3]]],[11,"clone","std::collections::btree_set","",373,[[],["iter",3]]],[11,"clone","","",374,[[],["difference",3]]],[11,"clone","","",377,[[],["union",3]]],[11,"clone","std::collections::btree_map","",362,[[],["iter",3]]],[11,"clone","std::collections::btree_set","",375,[[],["symmetricdifference",3]]],[11,"clone","std::collections","",361,[[],["btreemap",3]]],[11,"clone","","",382,[[],["linkedlist",3]]],[11,"clone_from","","",382,[[["linkedlist",3]]]],[11,"clone","std::rc","Makes a clone of the <code>Weak</code> pointer that points to the same …",223,[[],["weak",3]]],[11,"clone","std::collections","",379,[[],["btreeset",3]]],[11,"clone_from","","",379,[[["btreeset",3]]]],[11,"clone","std::collections::binary_heap","",355,[[],["intoiter",3]]],[11,"clone","std::sync","Makes a clone of the <code>Arc</code> pointer.",498,[[],["arc",3]]],[11,"clone","std::collections::btree_set","",376,[[],["intersection",3]]],[11,"clone","std::collections::btree_map","",369,[[],["range",3]]],[11,"clone","","",365,[[],["values",3]]],[11,"clone","std::collections::vec_deque","",392,[[],["intoiter",3]]],[11,"clone","std::collections::linked_list","",386,[[],["cursor",3]]],[11,"clone","std::alloc","",536,[[],["global",3]]],[11,"clone","std::collections::btree_map","",364,[[],["keys",3]]],[11,"clone","std::collections::linked_list","",383,[[],["iter",3]]],[11,"clone","std::vec","",278,[[],["intoiter",3]]],[11,"next_back","std::collections::binary_heap","",357,[[],["option",4]]],[11,"next_back","std::collections::btree_set","",373,[[],["option",4]]],[11,"next_back","std::collections::binary_heap","",354,[[],["option",4]]],[11,"next_back","","",355,[[],["option",4]]],[11,"next_back","std::collections::btree_map","",363,[[],["option",4]]],[11,"next_back","std::vec","",280,[[],["option",4]]],[11,"next_back","std::collections::vec_deque","",393,[[],["option",4]]],[11,"rfold","","",393,[[]]],[11,"try_rfold","","",393,[[]]],[11,"next_back","std::collections::btree_map","",369,[[],["option",4]]],[11,"next_back","std::collections::vec_deque","",391,[[],["option",4]]],[11,"rfold","","",391,[[]]],[11,"next_back","std::collections::btree_map","",365,[[],["option",4]]],[11,"next_back","std::boxed","",213,[[],["option",4]]],[11,"nth_back","","",213,[[],["option",4]]],[11,"next_back","std::collections::btree_map","",372,[[],["option",4]]],[11,"next_back","","",370,[[],["option",4]]],[11,"next_back","","",364,[[],["option",4]]],[11,"next_back","","",366,[[],["option",4]]],[11,"next_back","std::collections::btree_set","",381,[[],["option",4]]],[11,"next_back","std::collections::vec_deque","",392,[[],["option",4]]],[11,"next_back","std::collections::btree_set","",380,[[],["option",4]]],[11,"next_back","std::vec","",278,[[],["option",4]]],[11,"next_back","","",279,[[],["option",4]]],[11,"next_back","std::collections::btree_map","",368,[[],["option",4]]],[11,"next_back","std::collections::linked_list","",385,[[],["option",4]]],[11,"next_back","std::string","",276,[[],["option",4]]],[11,"next_back","std::collections::vec_deque","",390,[[],["option",4]]],[11,"next_back","std::collections::linked_list","",384,[[],["option",4]]],[11,"next_back","","",383,[[],["option",4]]],[11,"next_back","std::collections::btree_map","",362,[[],["option",4]]],[11,"next_back","","",367,[[],["option",4]]],[11,"call_once","std::boxed","",213,[[]]],[11,"extend","std::string","",273,[[]]],[11,"extend_one","","",273,[[]]],[11,"extend_reserve","","",273,[[]]],[11,"extend","std::collections","",379,[[]]],[11,"extend_one","","",379,[[]]],[11,"extend","","",361,[[]]],[11,"extend_one","","",361,[[]]],[11,"extend","","",382,[[]]],[11,"extend_one","","",382,[[]]],[11,"extend","std::string","",273,[[]]],[11,"extend_one","","",273,[[]]],[11,"extend","std::collections","",389,[[]]],[11,"extend_one","","",389,[[]]],[11,"extend_reserve","","",389,[[]]],[11,"extend","std::string","",273,[[]]],[11,"extend_one","","",273,[[]]],[11,"extend_reserve","","",273,[[]]],[11,"extend","std::vec","",277,[[]]],[11,"extend_one","","",277,[[]]],[11,"extend_reserve","","",277,[[]]],[11,"extend","std::collections","",352,[[]]],[11,"extend_one","","",352,[[]]],[11,"extend_reserve","","",352,[[]]],[11,"extend","std::string","",273,[[]]],[11,"extend_one","","",273,[[["string",3]]]],[11,"extend","","",273,[[]]],[11,"extend_one","","",273,[[["cow",4]]]],[11,"extend","std::collections","",382,[[]]],[11,"extend_one","","",382,[[]]],[11,"extend","","",389,[[]]],[11,"extend_one","","",389,[[]]],[11,"extend_reserve","","",389,[[]]],[11,"extend","","",352,[[]]],[11,"extend_one","","",352,[[]]],[11,"extend_reserve","","",352,[[]]],[11,"extend","","",379,[[]]],[11,"extend_one","","",379,[[]]],[11,"extend","","",361,[[]]],[11,"extend_one","","",361,[[]]],[11,"extend","std::string","",273,[[]]],[11,"extend","std::vec","",277,[[]]],[11,"extend_one","","",277,[[]]],[11,"extend_reserve","","",277,[[]]],[11,"fmt","std::rc","",222,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::string","",274,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::sync","",498,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::string","",275,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::borrow","",1,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::collections","",104,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::string","",273,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","std::boxed","",213,[[["formatter",3]],[["result",4],["error",3]]]],[11,"index_mut","std::vec","",277,[[]]],[11,"index_mut","std::string","",273,[[["rangetoinclusive",3]]]],[11,"index_mut","","",273,[[["rangeto",3]]]],[11,"index_mut","","",273,[[["rangeinclusive",3]]]],[11,"index_mut","","",273,[[["range",3]]]],[11,"index_mut","","",273,[[["rangefrom",3]]]],[11,"index_mut","","",273,[[["rangefull",3]]]],[11,"index_mut","std::collections","",389,[[]]],[11,"from_str","std::string","",273,[[],[["result",4],["string",3]]]],[11,"from","std::result","",95,[[["streamresult",3]],[["mzerror",4],["mzstatus",4],["result",4]]]],[11,"from","","",95,[[["streamresult",3]],[["mzerror",4],["mzstatus",4],["result",4]]]],[18,"MIN","std","The smallest value that can be represented by this …",553,null],[18,"MAX","","The largest value that can be represented by this integer …",553,null],[18,"BITS","","The size of this integer type in bits.",553,null],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",553,[[],[["parseinterror",3],["result",4]]]],[11,"count_ones","","Returns the number of ones in the binary representation …",553,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",553,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",553,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",553,[[]]],[11,"leading_ones","","Returns the number of leading ones in the binary …",553,[[]]],[11,"trailing_ones","","Returns the number of trailing ones in the binary …",553,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",553,[[]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",553,[[]]],[11,"swap_bytes","","Reverses the byte order of the integer.",553,[[]]],[11,"reverse_bits","","Reverses the order of bits in the integer. The least …",553,[[]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",553,[[]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",553,[[]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",553,[[]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",553,[[]]],[11,"checked_add","","Checked integer addition. Computes <code>self + rhs</code>, returning …",553,[[],["option",4]]],[11,"unchecked_add","","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …",553,[[]]],[11,"checked_sub","","Checked integer subtraction. Computes <code>self - rhs</code>, …",553,[[],["option",4]]],[11,"unchecked_sub","","Unchecked integer subtraction. Computes <code>self - rhs</code>, …",553,[[]]],[11,"checked_mul","","Checked integer multiplication. Computes <code>self * rhs</code>, …",553,[[],["option",4]]],[11,"unchecked_mul","","Unchecked integer multiplication. Computes <code>self * rhs</code>, …",553,[[]]],[11,"checked_div","","Checked integer division. Computes <code>self / rhs</code>, returning …",553,[[],["option",4]]],[11,"checked_div_euclid","","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>,…",553,[[],["option",4]]],[11,"checked_rem","","Checked integer remainder. Computes <code>self % rhs</code>, returning …",553,[[],["option",4]]],[11,"checked_rem_euclid","","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…",553,[[],["option",4]]],[11,"checked_neg","","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …",553,[[],["option",4]]],[11,"checked_shl","","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …",553,[[],["option",4]]],[11,"checked_shr","","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …",553,[[],["option",4]]],[11,"checked_abs","","Checked absolute value. Computes <code>self.abs()</code>, returning …",553,[[],["option",4]]],[11,"checked_pow","","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …",553,[[],["option",4]]],[11,"saturating_add","","Saturating integer addition. Computes <code>self + rhs</code>, …",553,[[]]],[11,"saturating_sub","","Saturating integer subtraction. Computes <code>self - rhs</code>, …",553,[[]]],[11,"saturating_neg","","Saturating integer negation. Computes <code>-self</code>, returning <code>MAX</code>…",553,[[]]],[11,"saturating_abs","","Saturating absolute value. Computes <code>self.abs()</code>, returning …",553,[[]]],[11,"saturating_mul","","Saturating integer multiplication. Computes <code>self * rhs</code>, …",553,[[]]],[11,"saturating_pow","","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,…",553,[[]]],[11,"wrapping_add","","Wrapping (modular) addition. Computes <code>self + rhs</code>, …",553,[[]]],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …",553,[[]]],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …",553,[[]]],[11,"wrapping_div","","Wrapping (modular) division. Computes <code>self / rhs</code>, …",553,[[]]],[11,"wrapping_div_euclid","","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>…",553,[[]]],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes <code>self % rhs</code>, …",553,[[]]],[11,"wrapping_rem_euclid","","Wrapping Euclidean remainder. Computes …",553,[[]]],[11,"wrapping_neg","","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …",553,[[]]],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …",553,[[]]],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …",553,[[]]],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes <code>self.abs()</code>, …",553,[[]]],[11,"unsigned_abs","","Computes the absolute value of <code>self</code> without any wrapping …",553,[[]]],[11,"wrapping_pow","","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,…",553,[[]]],[11,"overflowing_add","","Calculates <code>self</code> + <code>rhs</code>",553,[[]]],[11,"overflowing_sub","","Calculates <code>self</code> - <code>rhs</code>",553,[[]]],[11,"overflowing_mul","","Calculates the multiplication of <code>self</code> and <code>rhs</code>.",553,[[]]],[11,"overflowing_div","","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.",553,[[]]],[11,"overflowing_div_euclid","","Calculates the quotient of Euclidean division …",553,[[]]],[11,"overflowing_rem","","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.",553,[[]]],[11,"overflowing_rem_euclid","","Overflowing Euclidean remainder. Calculates …",553,[[]]],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum …",553,[[]]],[11,"overflowing_shl","","Shifts self left by <code>rhs</code> bits.",553,[[]]],[11,"overflowing_shr","","Shifts self right by <code>rhs</code> bits.",553,[[]]],[11,"overflowing_abs","","Computes the absolute value of <code>self</code>.",553,[[]]],[11,"overflowing_pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",553,[[]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",553,[[]]],[11,"div_euclid","","Calculates the quotient of Euclidean division of <code>self</code> by …",553,[[]]],[11,"rem_euclid","","Calculates the least nonnegative remainder of …",553,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>.",553,[[]]],[11,"signum","","Returns a number representing sign of <code>self</code>.",553,[[]]],[11,"is_positive","","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …",553,[[]]],[11,"is_negative","","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …",553,[[]]],[11,"to_be_bytes","","Return the memory representation of this integer as a …",553,[[]]],[11,"to_le_bytes","","Return the memory representation of this integer as a …",553,[[]]],[11,"to_ne_bytes","","Return the memory representation of this integer as a …",553,[[]]],[11,"as_ne_bytes","","Return the memory representation of this integer as a …",553,[[]]],[11,"from_be_bytes","","Create an integer value from its representation as a byte …",553,[[]]],[11,"from_le_bytes","","Create an integer value from its representation as a byte …",553,[[]]],[11,"from_ne_bytes","","Create an integer value from its memory representation as …",553,[[]]],[11,"min_value","","<strong>This method is soft-deprecated.</strong>",553,[[]]],[11,"max_value","","<strong>This method is soft-deprecated.</strong>",553,[[]]],[11,"from","","",553,[[]]],[11,"borrow","","",553,[[]]],[11,"borrow_mut","","",553,[[]]],[11,"try_from","","",553,[[],["result",4]]],[11,"into","","",553,[[]]],[11,"try_into","","",553,[[],["result",4]]],[11,"type_id","","",553,[[],["typeid",3]]],[11,"to_owned","","",553,[[]]],[11,"clone_into","","",553,[[]]],[11,"to_string","","",553,[[],["string",3]]],[11,"borrow","","",557,[[]]],[11,"borrow_mut","","",557,[[]]],[11,"type_id","","",557,[[],["typeid",3]]],[11,"borrow","","",557,[[]]],[11,"borrow_mut","","",557,[[]]],[11,"type_id","","",557,[[],["typeid",3]]],[18,"MAX","","The highest valid code point a <code>char</code> can have.",564,null],[18,"REPLACEMENT_CHARACTER","","<code>U+FFFD REPLACEMENT CHARACTER</code> (�) is used in Unicode to …",564,null],[18,"UNICODE_VERSION","","The version of Unicode that the Unicode parts of <code>char</code> and …",564,null],[11,"decode_utf16","","Creates an iterator over the UTF-16 encoded code points …",564,[[],["decodeutf16",3]]],[11,"from_u32","","Converts a <code>u32</code> to a <code>char</code>.",564,[[],["option",4]]],[11,"from_u32_unchecked","","Converts a <code>u32</code> to a <code>char</code>, ignoring validity.",564,[[]]],[11,"from_digit","","Converts a digit in the given radix to a <code>char</code>.",564,[[],["option",4]]],[11,"is_digit","","Checks if a <code>char</code> is a digit in the given radix.",564,[[]]],[11,"to_digit","","Converts a <code>char</code> to a digit in the given radix.",564,[[],["option",4]]],[11,"escape_unicode","","Returns an iterator that yields the hexadecimal Unicode …",564,[[],["escapeunicode",3]]],[11,"escape_debug","","Returns an iterator that yields the literal escape code …",564,[[],["escapedebug",3]]],[11,"escape_default","","Returns an iterator that yields the literal escape code …",564,[[],["escapedefault",3]]],[11,"len_utf8","","Returns the number of bytes this <code>char</code> would need if …",564,[[]]],[11,"len_utf16","","Returns the number of 16-bit code units this <code>char</code> would …",564,[[]]],[11,"encode_utf8","","Encodes this character as UTF-8 into the provided byte …",564,[[]]],[11,"encode_utf16","","Encodes this character as UTF-16 into the provided <code>u16</code> …",564,[[]]],[11,"is_alphabetic","","Returns <code>true</code> if this <code>char</code> has the <code>Alphabetic</code> property.",564,[[]]],[11,"is_lowercase","","Returns <code>true</code> if this <code>char</code> has the <code>Lowercase</code> property.",564,[[]]],[11,"is_uppercase","","Returns <code>true</code> if this <code>char</code> has the <code>Uppercase</code> property.",564,[[]]],[11,"is_whitespace","","Returns <code>true</code> if this <code>char</code> has the <code>White_Space</code> property.",564,[[]]],[11,"is_alphanumeric","","Returns <code>true</code> if this <code>char</code> satisfies either <code>is_alphabetic()</code>…",564,[[]]],[11,"is_control","","Returns <code>true</code> if this <code>char</code> has the general category for …",564,[[]]],[11,"is_numeric","","Returns <code>true</code> if this <code>char</code> has one of the general …",564,[[]]],[11,"to_lowercase","","Returns an iterator that yields the lowercase mapping of …",564,[[],["tolowercase",3]]],[11,"to_uppercase","","Returns an iterator that yields the uppercase mapping of …",564,[[],["touppercase",3]]],[11,"is_ascii","","Checks if the value is within the ASCII range.",564,[[]]],[11,"to_ascii_uppercase","","Makes a copy of the value in its ASCII upper case …",564,[[]]],[11,"to_ascii_lowercase","","Makes a copy of the value in its ASCII lower case …",564,[[]]],[11,"eq_ignore_ascii_case","","Checks that two values are an ASCII case-insensitive …",564,[[]]],[11,"make_ascii_uppercase","","Converts this type to its ASCII upper case equivalent …",564,[[]]],[11,"make_ascii_lowercase","","Converts this type to its ASCII lower case equivalent …",564,[[]]],[11,"is_ascii_alphabetic","","Checks if the value is an ASCII alphabetic character:",564,[[]]],[11,"is_ascii_uppercase","","Checks if the value is an ASCII uppercase character: …",564,[[]]],[11,"is_ascii_lowercase","","Checks if the value is an ASCII lowercase character: …",564,[[]]],[11,"is_ascii_alphanumeric","","Checks if the value is an ASCII alphanumeric character:",564,[[]]],[11,"is_ascii_digit","","Checks if the value is an ASCII decimal digit: U+0030 \'0\' …",564,[[]]],[11,"is_ascii_hexdigit","","Checks if the value is an ASCII hexadecimal digit:",564,[[]]],[11,"is_ascii_punctuation","","Checks if the value is an ASCII punctuation character:",564,[[]]],[11,"is_ascii_graphic","","Checks if the value is an ASCII graphic character: U+0021 …",564,[[]]],[11,"is_ascii_whitespace","","Checks if the value is an ASCII whitespace character: …",564,[[]]],[11,"is_ascii_control","","Checks if the value is an ASCII control character: U+0000 …",564,[[]]],[11,"from","","",564,[[]]],[11,"borrow","","",564,[[]]],[11,"borrow_mut","","",564,[[]]],[11,"try_from","","",564,[[],["result",4]]],[11,"into","","",564,[[]]],[11,"try_into","","",564,[[],["result",4]]],[11,"type_id","","",564,[[],["typeid",3]]],[11,"to_owned","","",564,[[]]],[11,"clone_into","","",564,[[]]],[11,"to_string","","",564,[[],["string",3]]],[18,"MIN","","The smallest value that can be represented by this …",546,null],[18,"MAX","","The largest value that can be represented by this integer …",546,null],[18,"BITS","","The size of this integer type in bits.",546,null],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",546,[[],[["result",4],["parseinterror",3]]]],[11,"count_ones","","Returns the number of ones in the binary representation …",546,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",546,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",546,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",546,[[]]],[11,"leading_ones","","Returns the number of leading ones in the binary …",546,[[]]],[11,"trailing_ones","","Returns the number of trailing ones in the binary …",546,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",546,[[]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",546,[[]]],[11,"swap_bytes","","Reverses the byte order of the integer.",546,[[]]],[11,"reverse_bits","","Reverses the order of bits in the integer. The least …",546,[[]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",546,[[]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",546,[[]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",546,[[]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",546,[[]]],[11,"checked_add","","Checked integer addition. Computes <code>self + rhs</code>, returning …",546,[[],["option",4]]],[11,"unchecked_add","","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …",546,[[]]],[11,"checked_sub","","Checked integer subtraction. Computes <code>self - rhs</code>, …",546,[[],["option",4]]],[11,"unchecked_sub","","Unchecked integer subtraction. Computes <code>self - rhs</code>, …",546,[[]]],[11,"checked_mul","","Checked integer multiplication. Computes <code>self * rhs</code>, …",546,[[],["option",4]]],[11,"unchecked_mul","","Unchecked integer multiplication. Computes <code>self * rhs</code>, …",546,[[]]],[11,"checked_div","","Checked integer division. Computes <code>self / rhs</code>, returning …",546,[[],["option",4]]],[11,"checked_div_euclid","","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…",546,[[],["option",4]]],[11,"checked_rem","","Checked integer remainder. Computes <code>self % rhs</code>, returning …",546,[[],["option",4]]],[11,"checked_rem_euclid","","Checked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, …",546,[[],["option",4]]],[11,"checked_neg","","Checked negation. Computes <code>-self</code>, returning <code>None</code> unless …",546,[[],["option",4]]],[11,"checked_shl","","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …",546,[[],["option",4]]],[11,"checked_shr","","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …",546,[[],["option",4]]],[11,"checked_pow","","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …",546,[[],["option",4]]],[11,"saturating_add","","Saturating integer addition. Computes <code>self + rhs</code>, …",546,[[]]],[11,"saturating_sub","","Saturating integer subtraction. Computes <code>self - rhs</code>, …",546,[[]]],[11,"saturating_mul","","Saturating integer multiplication. Computes <code>self * rhs</code>, …",546,[[]]],[11,"saturating_pow","","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,…",546,[[]]],[11,"wrapping_add","","Wrapping (modular) addition. Computes <code>self + rhs</code>, …",546,[[]]],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …",546,[[]]],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …",546,[[]]],[11,"wrapping_div","","Wrapping (modular) division. Computes <code>self / rhs</code>. Wrapped …",546,[[]]],[11,"wrapping_div_euclid","","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>…",546,[[]]],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes <code>self % rhs</code>. …",546,[[]]],[11,"wrapping_rem_euclid","","Wrapping Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>. …",546,[[]]],[11,"wrapping_neg","","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …",546,[[]]],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …",546,[[]]],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …",546,[[]]],[11,"wrapping_pow","","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,…",546,[[]]],[11,"overflowing_add","","Calculates <code>self</code> + <code>rhs</code>",546,[[]]],[11,"overflowing_sub","","Calculates <code>self</code> - <code>rhs</code>",546,[[]]],[11,"overflowing_mul","","Calculates the multiplication of <code>self</code> and <code>rhs</code>.",546,[[]]],[11,"overflowing_div","","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.",546,[[]]],[11,"overflowing_div_euclid","","Calculates the quotient of Euclidean division …",546,[[]]],[11,"overflowing_rem","","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.",546,[[]]],[11,"overflowing_rem_euclid","","Calculates the remainder <code>self.rem_euclid(rhs)</code> as if by …",546,[[]]],[11,"overflowing_neg","","Negates self in an overflowing fashion.",546,[[]]],[11,"overflowing_shl","","Shifts self left by <code>rhs</code> bits.",546,[[]]],[11,"overflowing_shr","","Shifts self right by <code>rhs</code> bits.",546,[[]]],[11,"overflowing_pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",546,[[]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",546,[[]]],[11,"div_euclid","","Performs Euclidean division.",546,[[]]],[11,"rem_euclid","","Calculates the least remainder of <code>self (mod rhs)</code>.",546,[[]]],[11,"is_power_of_two","","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.",546,[[]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal …",546,[[]]],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal …",546,[[],["option",4]]],[11,"wrapping_next_power_of_two","","Returns the smallest power of two greater than or equal …",546,[[]]],[11,"to_be_bytes","","Return the memory representation of this integer as a …",546,[[]]],[11,"to_le_bytes","","Return the memory representation of this integer as a …",546,[[]]],[11,"to_ne_bytes","","Return the memory representation of this integer as a …",546,[[]]],[11,"as_ne_bytes","","Return the memory representation of this integer as a …",546,[[]]],[11,"from_be_bytes","","Create a native endian integer value from its …",546,[[]]],[11,"from_le_bytes","","Create a native endian integer value from its …",546,[[]]],[11,"from_ne_bytes","","Create a native endian integer value from its memory …",546,[[]]],[11,"min_value","","<strong>This method is soft-deprecated.</strong>",546,[[]]],[11,"max_value","","<strong>This method is soft-deprecated.</strong>",546,[[]]],[11,"from","","",546,[[]]],[11,"borrow","","",546,[[]]],[11,"borrow_mut","","",546,[[]]],[11,"try_from","","",546,[[],["result",4]]],[11,"into","","",546,[[]]],[11,"try_into","","",546,[[],["result",4]]],[11,"type_id","","",546,[[],["typeid",3]]],[11,"to_owned","","",546,[[]]],[11,"clone_into","","",546,[[]]],[11,"to_string","","",546,[[],["string",3]]],[18,"MIN","","The smallest value that can be represented by this …",549,null],[18,"MAX","","The largest value that can be represented by this integer …",549,null],[18,"BITS","","The size of this integer type in bits.",549,null],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",549,[[],[["parseinterror",3],["result",4]]]],[11,"count_ones","","Returns the number of ones in the binary representation …",549,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",549,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",549,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",549,[[]]],[11,"leading_ones","","Returns the number of leading ones in the binary …",549,[[]]],[11,"trailing_ones","","Returns the number of trailing ones in the binary …",549,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",549,[[]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",549,[[]]],[11,"swap_bytes","","Reverses the byte order of the integer.",549,[[]]],[11,"reverse_bits","","Reverses the order of bits in the integer. The least …",549,[[]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",549,[[]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",549,[[]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",549,[[]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",549,[[]]],[11,"checked_add","","Checked integer addition. Computes <code>self + rhs</code>, returning …",549,[[],["option",4]]],[11,"unchecked_add","","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …",549,[[]]],[11,"checked_sub","","Checked integer subtraction. Computes <code>self - rhs</code>, …",549,[[],["option",4]]],[11,"unchecked_sub","","Unchecked integer subtraction. Computes <code>self - rhs</code>, …",549,[[]]],[11,"checked_mul","","Checked integer multiplication. Computes <code>self * rhs</code>, …",549,[[],["option",4]]],[11,"unchecked_mul","","Unchecked integer multiplication. Computes <code>self * rhs</code>, …",549,[[]]],[11,"checked_div","","Checked integer division. Computes <code>self / rhs</code>, returning …",549,[[],["option",4]]],[11,"checked_div_euclid","","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…",549,[[],["option",4]]],[11,"checked_rem","","Checked integer remainder. Computes <code>self % rhs</code>, returning …",549,[[],["option",4]]],[11,"checked_rem_euclid","","Checked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, …",549,[[],["option",4]]],[11,"checked_neg","","Checked negation. Computes <code>-self</code>, returning <code>None</code> unless …",549,[[],["option",4]]],[11,"checked_shl","","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …",549,[[],["option",4]]],[11,"checked_shr","","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …",549,[[],["option",4]]],[11,"checked_pow","","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …",549,[[],["option",4]]],[11,"saturating_add","","Saturating integer addition. Computes <code>self + rhs</code>, …",549,[[]]],[11,"saturating_sub","","Saturating integer subtraction. Computes <code>self - rhs</code>, …",549,[[]]],[11,"saturating_mul","","Saturating integer multiplication. Computes <code>self * rhs</code>, …",549,[[]]],[11,"saturating_pow","","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,…",549,[[]]],[11,"wrapping_add","","Wrapping (modular) addition. Computes <code>self + rhs</code>, …",549,[[]]],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …",549,[[]]],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …",549,[[]]],[11,"wrapping_div","","Wrapping (modular) division. Computes <code>self / rhs</code>. Wrapped …",549,[[]]],[11,"wrapping_div_euclid","","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>…",549,[[]]],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes <code>self % rhs</code>. …",549,[[]]],[11,"wrapping_rem_euclid","","Wrapping Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>. …",549,[[]]],[11,"wrapping_neg","","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …",549,[[]]],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …",549,[[]]],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …",549,[[]]],[11,"wrapping_pow","","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,…",549,[[]]],[11,"overflowing_add","","Calculates <code>self</code> + <code>rhs</code>",549,[[]]],[11,"overflowing_sub","","Calculates <code>self</code> - <code>rhs</code>",549,[[]]],[11,"overflowing_mul","","Calculates the multiplication of <code>self</code> and <code>rhs</code>.",549,[[]]],[11,"overflowing_div","","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.",549,[[]]],[11,"overflowing_div_euclid","","Calculates the quotient of Euclidean division …",549,[[]]],[11,"overflowing_rem","","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.",549,[[]]],[11,"overflowing_rem_euclid","","Calculates the remainder <code>self.rem_euclid(rhs)</code> as if by …",549,[[]]],[11,"overflowing_neg","","Negates self in an overflowing fashion.",549,[[]]],[11,"overflowing_shl","","Shifts self left by <code>rhs</code> bits.",549,[[]]],[11,"overflowing_shr","","Shifts self right by <code>rhs</code> bits.",549,[[]]],[11,"overflowing_pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",549,[[]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",549,[[]]],[11,"div_euclid","","Performs Euclidean division.",549,[[]]],[11,"rem_euclid","","Calculates the least remainder of <code>self (mod rhs)</code>.",549,[[]]],[11,"is_power_of_two","","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.",549,[[]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal …",549,[[]]],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal …",549,[[],["option",4]]],[11,"wrapping_next_power_of_two","","Returns the smallest power of two greater than or equal …",549,[[]]],[11,"to_be_bytes","","Return the memory representation of this integer as a …",549,[[]]],[11,"to_le_bytes","","Return the memory representation of this integer as a …",549,[[]]],[11,"to_ne_bytes","","Return the memory representation of this integer as a …",549,[[]]],[11,"as_ne_bytes","","Return the memory representation of this integer as a …",549,[[]]],[11,"from_be_bytes","","Create a native endian integer value from its …",549,[[]]],[11,"from_le_bytes","","Create a native endian integer value from its …",549,[[]]],[11,"from_ne_bytes","","Create a native endian integer value from its memory …",549,[[]]],[11,"min_value","","<strong>This method is soft-deprecated.</strong>",549,[[]]],[11,"max_value","","<strong>This method is soft-deprecated.</strong>",549,[[]]],[11,"from","","",549,[[]]],[11,"borrow","","",549,[[]]],[11,"borrow_mut","","",549,[[]]],[11,"try_from","","",549,[[],["result",4]]],[11,"into","","",549,[[]]],[11,"try_into","","",549,[[],["result",4]]],[11,"type_id","","",549,[[],["typeid",3]]],[11,"to_owned","","",549,[[]]],[11,"clone_into","","",549,[[]]],[11,"to_string","","",549,[[],["string",3]]],[18,"MIN","","The smallest value that can be represented by this …",548,null],[18,"MAX","","The largest value that can be represented by this integer …",548,null],[18,"BITS","","The size of this integer type in bits.",548,null],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",548,[[],[["parseinterror",3],["result",4]]]],[11,"count_ones","","Returns the number of ones in the binary representation …",548,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",548,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",548,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",548,[[]]],[11,"leading_ones","","Returns the number of leading ones in the binary …",548,[[]]],[11,"trailing_ones","","Returns the number of trailing ones in the binary …",548,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",548,[[]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",548,[[]]],[11,"swap_bytes","","Reverses the byte order of the integer.",548,[[]]],[11,"reverse_bits","","Reverses the order of bits in the integer. The least …",548,[[]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",548,[[]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",548,[[]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",548,[[]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",548,[[]]],[11,"checked_add","","Checked integer addition. Computes <code>self + rhs</code>, returning …",548,[[],["option",4]]],[11,"unchecked_add","","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …",548,[[]]],[11,"checked_sub","","Checked integer subtraction. Computes <code>self - rhs</code>, …",548,[[],["option",4]]],[11,"unchecked_sub","","Unchecked integer subtraction. Computes <code>self - rhs</code>, …",548,[[]]],[11,"checked_mul","","Checked integer multiplication. Computes <code>self * rhs</code>, …",548,[[],["option",4]]],[11,"unchecked_mul","","Unchecked integer multiplication. Computes <code>self * rhs</code>, …",548,[[]]],[11,"checked_div","","Checked integer division. Computes <code>self / rhs</code>, returning …",548,[[],["option",4]]],[11,"checked_div_euclid","","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>,…",548,[[],["option",4]]],[11,"checked_rem","","Checked integer remainder. Computes <code>self % rhs</code>, returning …",548,[[],["option",4]]],[11,"checked_rem_euclid","","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…",548,[[],["option",4]]],[11,"checked_neg","","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …",548,[[],["option",4]]],[11,"checked_shl","","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …",548,[[],["option",4]]],[11,"checked_shr","","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …",548,[[],["option",4]]],[11,"checked_abs","","Checked absolute value. Computes <code>self.abs()</code>, returning …",548,[[],["option",4]]],[11,"checked_pow","","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …",548,[[],["option",4]]],[11,"saturating_add","","Saturating integer addition. Computes <code>self + rhs</code>, …",548,[[]]],[11,"saturating_sub","","Saturating integer subtraction. Computes <code>self - rhs</code>, …",548,[[]]],[11,"saturating_neg","","Saturating integer negation. Computes <code>-self</code>, returning <code>MAX</code>…",548,[[]]],[11,"saturating_abs","","Saturating absolute value. Computes <code>self.abs()</code>, returning …",548,[[]]],[11,"saturating_mul","","Saturating integer multiplication. Computes <code>self * rhs</code>, …",548,[[]]],[11,"saturating_pow","","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,…",548,[[]]],[11,"wrapping_add","","Wrapping (modular) addition. Computes <code>self + rhs</code>, …",548,[[]]],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …",548,[[]]],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …",548,[[]]],[11,"wrapping_div","","Wrapping (modular) division. Computes <code>self / rhs</code>, …",548,[[]]],[11,"wrapping_div_euclid","","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>…",548,[[]]],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes <code>self % rhs</code>, …",548,[[]]],[11,"wrapping_rem_euclid","","Wrapping Euclidean remainder. Computes …",548,[[]]],[11,"wrapping_neg","","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …",548,[[]]],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …",548,[[]]],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …",548,[[]]],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes <code>self.abs()</code>, …",548,[[]]],[11,"unsigned_abs","","Computes the absolute value of <code>self</code> without any wrapping …",548,[[]]],[11,"wrapping_pow","","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,…",548,[[]]],[11,"overflowing_add","","Calculates <code>self</code> + <code>rhs</code>",548,[[]]],[11,"overflowing_sub","","Calculates <code>self</code> - <code>rhs</code>",548,[[]]],[11,"overflowing_mul","","Calculates the multiplication of <code>self</code> and <code>rhs</code>.",548,[[]]],[11,"overflowing_div","","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.",548,[[]]],[11,"overflowing_div_euclid","","Calculates the quotient of Euclidean division …",548,[[]]],[11,"overflowing_rem","","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.",548,[[]]],[11,"overflowing_rem_euclid","","Overflowing Euclidean remainder. Calculates …",548,[[]]],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum …",548,[[]]],[11,"overflowing_shl","","Shifts self left by <code>rhs</code> bits.",548,[[]]],[11,"overflowing_shr","","Shifts self right by <code>rhs</code> bits.",548,[[]]],[11,"overflowing_abs","","Computes the absolute value of <code>self</code>.",548,[[]]],[11,"overflowing_pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",548,[[]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",548,[[]]],[11,"div_euclid","","Calculates the quotient of Euclidean division of <code>self</code> by …",548,[[]]],[11,"rem_euclid","","Calculates the least nonnegative remainder of …",548,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>.",548,[[]]],[11,"signum","","Returns a number representing sign of <code>self</code>.",548,[[]]],[11,"is_positive","","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …",548,[[]]],[11,"is_negative","","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …",548,[[]]],[11,"to_be_bytes","","Return the memory representation of this integer as a …",548,[[]]],[11,"to_le_bytes","","Return the memory representation of this integer as a …",548,[[]]],[11,"to_ne_bytes","","Return the memory representation of this integer as a …",548,[[]]],[11,"as_ne_bytes","","Return the memory representation of this integer as a …",548,[[]]],[11,"from_be_bytes","","Create an integer value from its representation as a byte …",548,[[]]],[11,"from_le_bytes","","Create an integer value from its representation as a byte …",548,[[]]],[11,"from_ne_bytes","","Create an integer value from its memory representation as …",548,[[]]],[11,"min_value","","<strong>This method is soft-deprecated.</strong>",548,[[]]],[11,"max_value","","<strong>This method is soft-deprecated.</strong>",548,[[]]],[11,"from","","",548,[[]]],[11,"borrow","","",548,[[]]],[11,"borrow_mut","","",548,[[]]],[11,"try_from","","",548,[[],["result",4]]],[11,"into","","",548,[[]]],[11,"try_into","","",548,[[],["result",4]]],[11,"type_id","","",548,[[],["typeid",3]]],[11,"to_owned","","",548,[[]]],[11,"clone_into","","",548,[[]]],[11,"to_string","","",548,[[],["string",3]]],[18,"MIN","","The smallest value that can be represented by this …",551,null],[18,"MAX","","The largest value that can be represented by this integer …",551,null],[18,"BITS","","The size of this integer type in bits.",551,null],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",551,[[],[["parseinterror",3],["result",4]]]],[11,"count_ones","","Returns the number of ones in the binary representation …",551,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",551,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",551,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",551,[[]]],[11,"leading_ones","","Returns the number of leading ones in the binary …",551,[[]]],[11,"trailing_ones","","Returns the number of trailing ones in the binary …",551,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",551,[[]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",551,[[]]],[11,"swap_bytes","","Reverses the byte order of the integer.",551,[[]]],[11,"reverse_bits","","Reverses the order of bits in the integer. The least …",551,[[]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",551,[[]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",551,[[]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",551,[[]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",551,[[]]],[11,"checked_add","","Checked integer addition. Computes <code>self + rhs</code>, returning …",551,[[],["option",4]]],[11,"unchecked_add","","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …",551,[[]]],[11,"checked_sub","","Checked integer subtraction. Computes <code>self - rhs</code>, …",551,[[],["option",4]]],[11,"unchecked_sub","","Unchecked integer subtraction. Computes <code>self - rhs</code>, …",551,[[]]],[11,"checked_mul","","Checked integer multiplication. Computes <code>self * rhs</code>, …",551,[[],["option",4]]],[11,"unchecked_mul","","Unchecked integer multiplication. Computes <code>self * rhs</code>, …",551,[[]]],[11,"checked_div","","Checked integer division. Computes <code>self / rhs</code>, returning …",551,[[],["option",4]]],[11,"checked_div_euclid","","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>,…",551,[[],["option",4]]],[11,"checked_rem","","Checked integer remainder. Computes <code>self % rhs</code>, returning …",551,[[],["option",4]]],[11,"checked_rem_euclid","","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…",551,[[],["option",4]]],[11,"checked_neg","","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …",551,[[],["option",4]]],[11,"checked_shl","","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …",551,[[],["option",4]]],[11,"checked_shr","","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …",551,[[],["option",4]]],[11,"checked_abs","","Checked absolute value. Computes <code>self.abs()</code>, returning …",551,[[],["option",4]]],[11,"checked_pow","","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …",551,[[],["option",4]]],[11,"saturating_add","","Saturating integer addition. Computes <code>self + rhs</code>, …",551,[[]]],[11,"saturating_sub","","Saturating integer subtraction. Computes <code>self - rhs</code>, …",551,[[]]],[11,"saturating_neg","","Saturating integer negation. Computes <code>-self</code>, returning <code>MAX</code>…",551,[[]]],[11,"saturating_abs","","Saturating absolute value. Computes <code>self.abs()</code>, returning …",551,[[]]],[11,"saturating_mul","","Saturating integer multiplication. Computes <code>self * rhs</code>, …",551,[[]]],[11,"saturating_pow","","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,…",551,[[]]],[11,"wrapping_add","","Wrapping (modular) addition. Computes <code>self + rhs</code>, …",551,[[]]],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …",551,[[]]],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …",551,[[]]],[11,"wrapping_div","","Wrapping (modular) division. Computes <code>self / rhs</code>, …",551,[[]]],[11,"wrapping_div_euclid","","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>…",551,[[]]],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes <code>self % rhs</code>, …",551,[[]]],[11,"wrapping_rem_euclid","","Wrapping Euclidean remainder. Computes …",551,[[]]],[11,"wrapping_neg","","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …",551,[[]]],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …",551,[[]]],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …",551,[[]]],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes <code>self.abs()</code>, …",551,[[]]],[11,"unsigned_abs","","Computes the absolute value of <code>self</code> without any wrapping …",551,[[]]],[11,"wrapping_pow","","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,…",551,[[]]],[11,"overflowing_add","","Calculates <code>self</code> + <code>rhs</code>",551,[[]]],[11,"overflowing_sub","","Calculates <code>self</code> - <code>rhs</code>",551,[[]]],[11,"overflowing_mul","","Calculates the multiplication of <code>self</code> and <code>rhs</code>.",551,[[]]],[11,"overflowing_div","","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.",551,[[]]],[11,"overflowing_div_euclid","","Calculates the quotient of Euclidean division …",551,[[]]],[11,"overflowing_rem","","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.",551,[[]]],[11,"overflowing_rem_euclid","","Overflowing Euclidean remainder. Calculates …",551,[[]]],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum …",551,[[]]],[11,"overflowing_shl","","Shifts self left by <code>rhs</code> bits.",551,[[]]],[11,"overflowing_shr","","Shifts self right by <code>rhs</code> bits.",551,[[]]],[11,"overflowing_abs","","Computes the absolute value of <code>self</code>.",551,[[]]],[11,"overflowing_pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",551,[[]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",551,[[]]],[11,"div_euclid","","Calculates the quotient of Euclidean division of <code>self</code> by …",551,[[]]],[11,"rem_euclid","","Calculates the least nonnegative remainder of …",551,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>.",551,[[]]],[11,"signum","","Returns a number representing sign of <code>self</code>.",551,[[]]],[11,"is_positive","","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …",551,[[]]],[11,"is_negative","","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …",551,[[]]],[11,"to_be_bytes","","Return the memory representation of this integer as a …",551,[[]]],[11,"to_le_bytes","","Return the memory representation of this integer as a …",551,[[]]],[11,"to_ne_bytes","","Return the memory representation of this integer as a …",551,[[]]],[11,"as_ne_bytes","","Return the memory representation of this integer as a …",551,[[]]],[11,"from_be_bytes","","Create an integer value from its representation as a byte …",551,[[]]],[11,"from_le_bytes","","Create an integer value from its representation as a byte …",551,[[]]],[11,"from_ne_bytes","","Create an integer value from its memory representation as …",551,[[]]],[11,"min_value","","<strong>This method is soft-deprecated.</strong>",551,[[]]],[11,"max_value","","<strong>This method is soft-deprecated.</strong>",551,[[]]],[11,"from","","",551,[[]]],[11,"borrow","","",551,[[]]],[11,"borrow_mut","","",551,[[]]],[11,"try_from","","",551,[[],["result",4]]],[11,"into","","",551,[[]]],[11,"try_into","","",551,[[],["result",4]]],[11,"type_id","","",551,[[],["typeid",3]]],[11,"to_owned","","",551,[[]]],[11,"clone_into","","",551,[[]]],[11,"to_string","","",551,[[],["string",3]]],[11,"borrow","","",560,[[]]],[11,"borrow_mut","","",560,[[]]],[11,"type_id","","",560,[[],["typeid",3]]],[11,"to_string","","",560,[[],["string",3]]],[18,"RADIX","","The radix or base of the internal representation of <code>f64</code>.",555,null],[18,"MANTISSA_DIGITS","","Number of significant digits in base 2.",555,null],[18,"DIGITS","","Approximate number of significant digits in base 10.",555,null],[18,"EPSILON","","Machine epsilon value for <code>f64</code>.",555,null],[18,"MIN","","Smallest finite <code>f64</code> value.",555,null],[18,"MIN_POSITIVE","","Smallest positive normal <code>f64</code> value.",555,null],[18,"MAX","","Largest finite <code>f64</code> value.",555,null],[18,"MIN_EXP","","One greater than the minimum possible normal power of 2 …",555,null],[18,"MAX_EXP","","Maximum possible power of 2 exponent.",555,null],[18,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",555,null],[18,"MAX_10_EXP","","Maximum possible power of 10 exponent.",555,null],[18,"NAN","","Not a Number (NaN).",555,null],[18,"INFINITY","","Infinity (∞).",555,null],[18,"NEG_INFINITY","","Negative infinity (−∞).",555,null],[11,"is_nan","","Returns <code>true</code> if this value is <code>NaN</code>.",555,[[]]],[11,"is_infinite","","Returns <code>true</code> if this value is positive infinity or …",555,[[]]],[11,"is_finite","","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.",555,[[]]],[11,"is_subnormal","","Returns <code>true</code> if the number is subnormal.",555,[[]]],[11,"is_normal","","Returns <code>true</code> if the number is neither zero, infinite, …",555,[[]]],[11,"classify","","Returns the floating point category of the number. If …",555,[[],["fpcategory",4]]],[11,"is_sign_positive","","Returns <code>true</code> if <code>self</code> has a positive sign, including <code>+0.0</code>, …",555,[[]]],[11,"is_sign_negative","","Returns <code>true</code> if <code>self</code> has a negative sign, including <code>-0.0</code>, …",555,[[]]],[11,"recip","","Takes the reciprocal (inverse) of a number, <code>1/x</code>.",555,[[]]],[11,"to_degrees","","Converts radians to degrees.",555,[[]]],[11,"to_radians","","Converts degrees to radians.",555,[[]]],[11,"max","","Returns the maximum of the two numbers.",555,[[]]],[11,"min","","Returns the minimum of the two numbers.",555,[[]]],[11,"to_int_unchecked","","Rounds toward zero and converts to any primitive integer …",555,[[]]],[11,"to_bits","","Raw transmutation to <code>u64</code>.",555,[[]]],[11,"from_bits","","Raw transmutation from <code>u64</code>.",555,[[]]],[11,"to_be_bytes","","Return the memory representation of this floating point …",555,[[]]],[11,"to_le_bytes","","Return the memory representation of this floating point …",555,[[]]],[11,"to_ne_bytes","","Return the memory representation of this floating point …",555,[[]]],[11,"as_ne_bytes","","Return the memory representation of this floating point …",555,[[]]],[11,"from_be_bytes","","Create a floating point value from its representation as …",555,[[]]],[11,"from_le_bytes","","Create a floating point value from its representation as …",555,[[]]],[11,"from_ne_bytes","","Create a floating point value from its representation as …",555,[[]]],[11,"total_cmp","","Returns an ordering between self and other values. Unlike …",555,[[],["ordering",4]]],[11,"clamp","","Restrict a value to a certain interval unless it is NaN.",555,[[]]],[11,"from","","",555,[[]]],[11,"borrow","","",555,[[]]],[11,"borrow_mut","","",555,[[]]],[11,"try_from","","",555,[[],["result",4]]],[11,"into","","",555,[[]]],[11,"try_into","","",555,[[],["result",4]]],[11,"type_id","","",555,[[],["typeid",3]]],[11,"to_owned","","",555,[[]]],[11,"clone_into","","",555,[[]]],[11,"to_string","","",555,[[],["string",3]]],[18,"MIN","","The smallest value that can be represented by this …",552,null],[18,"MAX","","The largest value that can be represented by this integer …",552,null],[18,"BITS","","The size of this integer type in bits.",552,null],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",552,[[],[["parseinterror",3],["result",4]]]],[11,"count_ones","","Returns the number of ones in the binary representation …",552,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",552,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",552,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",552,[[]]],[11,"leading_ones","","Returns the number of leading ones in the binary …",552,[[]]],[11,"trailing_ones","","Returns the number of trailing ones in the binary …",552,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",552,[[]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",552,[[]]],[11,"swap_bytes","","Reverses the byte order of the integer.",552,[[]]],[11,"reverse_bits","","Reverses the order of bits in the integer. The least …",552,[[]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",552,[[]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",552,[[]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",552,[[]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",552,[[]]],[11,"checked_add","","Checked integer addition. Computes <code>self + rhs</code>, returning …",552,[[],["option",4]]],[11,"unchecked_add","","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …",552,[[]]],[11,"checked_sub","","Checked integer subtraction. Computes <code>self - rhs</code>, …",552,[[],["option",4]]],[11,"unchecked_sub","","Unchecked integer subtraction. Computes <code>self - rhs</code>, …",552,[[]]],[11,"checked_mul","","Checked integer multiplication. Computes <code>self * rhs</code>, …",552,[[],["option",4]]],[11,"unchecked_mul","","Unchecked integer multiplication. Computes <code>self * rhs</code>, …",552,[[]]],[11,"checked_div","","Checked integer division. Computes <code>self / rhs</code>, returning …",552,[[],["option",4]]],[11,"checked_div_euclid","","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…",552,[[],["option",4]]],[11,"checked_rem","","Checked integer remainder. Computes <code>self % rhs</code>, returning …",552,[[],["option",4]]],[11,"checked_rem_euclid","","Checked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, …",552,[[],["option",4]]],[11,"checked_neg","","Checked negation. Computes <code>-self</code>, returning <code>None</code> unless …",552,[[],["option",4]]],[11,"checked_shl","","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …",552,[[],["option",4]]],[11,"checked_shr","","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …",552,[[],["option",4]]],[11,"checked_pow","","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …",552,[[],["option",4]]],[11,"saturating_add","","Saturating integer addition. Computes <code>self + rhs</code>, …",552,[[]]],[11,"saturating_sub","","Saturating integer subtraction. Computes <code>self - rhs</code>, …",552,[[]]],[11,"saturating_mul","","Saturating integer multiplication. Computes <code>self * rhs</code>, …",552,[[]]],[11,"saturating_pow","","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,…",552,[[]]],[11,"wrapping_add","","Wrapping (modular) addition. Computes <code>self + rhs</code>, …",552,[[]]],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …",552,[[]]],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …",552,[[]]],[11,"wrapping_div","","Wrapping (modular) division. Computes <code>self / rhs</code>. Wrapped …",552,[[]]],[11,"wrapping_div_euclid","","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>…",552,[[]]],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes <code>self % rhs</code>. …",552,[[]]],[11,"wrapping_rem_euclid","","Wrapping Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>. …",552,[[]]],[11,"wrapping_neg","","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …",552,[[]]],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …",552,[[]]],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …",552,[[]]],[11,"wrapping_pow","","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,…",552,[[]]],[11,"overflowing_add","","Calculates <code>self</code> + <code>rhs</code>",552,[[]]],[11,"overflowing_sub","","Calculates <code>self</code> - <code>rhs</code>",552,[[]]],[11,"overflowing_mul","","Calculates the multiplication of <code>self</code> and <code>rhs</code>.",552,[[]]],[11,"overflowing_div","","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.",552,[[]]],[11,"overflowing_div_euclid","","Calculates the quotient of Euclidean division …",552,[[]]],[11,"overflowing_rem","","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.",552,[[]]],[11,"overflowing_rem_euclid","","Calculates the remainder <code>self.rem_euclid(rhs)</code> as if by …",552,[[]]],[11,"overflowing_neg","","Negates self in an overflowing fashion.",552,[[]]],[11,"overflowing_shl","","Shifts self left by <code>rhs</code> bits.",552,[[]]],[11,"overflowing_shr","","Shifts self right by <code>rhs</code> bits.",552,[[]]],[11,"overflowing_pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",552,[[]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",552,[[]]],[11,"div_euclid","","Performs Euclidean division.",552,[[]]],[11,"rem_euclid","","Calculates the least remainder of <code>self (mod rhs)</code>.",552,[[]]],[11,"is_power_of_two","","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.",552,[[]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal …",552,[[]]],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal …",552,[[],["option",4]]],[11,"wrapping_next_power_of_two","","Returns the smallest power of two greater than or equal …",552,[[]]],[11,"to_be_bytes","","Return the memory representation of this integer as a …",552,[[]]],[11,"to_le_bytes","","Return the memory representation of this integer as a …",552,[[]]],[11,"to_ne_bytes","","Return the memory representation of this integer as a …",552,[[]]],[11,"as_ne_bytes","","Return the memory representation of this integer as a …",552,[[]]],[11,"from_be_bytes","","Create a native endian integer value from its …",552,[[]]],[11,"from_le_bytes","","Create a native endian integer value from its …",552,[[]]],[11,"from_ne_bytes","","Create a native endian integer value from its memory …",552,[[]]],[11,"min_value","","<strong>This method is soft-deprecated.</strong>",552,[[]]],[11,"max_value","","<strong>This method is soft-deprecated.</strong>",552,[[]]],[11,"from","","",552,[[]]],[11,"borrow","","",552,[[]]],[11,"borrow_mut","","",552,[[]]],[11,"try_from","","",552,[[],["result",4]]],[11,"into","","",552,[[]]],[11,"try_into","","",552,[[],["result",4]]],[11,"type_id","","",552,[[],["typeid",3]]],[11,"to_owned","","",552,[[]]],[11,"clone_into","","",552,[[]]],[11,"to_string","","",552,[[],["string",3]]],[18,"MIN","","The smallest value that can be represented by this …",542,null],[18,"MAX","","The largest value that can be represented by this integer …",542,null],[18,"BITS","","The size of this integer type in bits.",542,null],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",542,[[],[["parseinterror",3],["result",4]]]],[11,"count_ones","","Returns the number of ones in the binary representation …",542,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",542,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",542,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",542,[[]]],[11,"leading_ones","","Returns the number of leading ones in the binary …",542,[[]]],[11,"trailing_ones","","Returns the number of trailing ones in the binary …",542,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",542,[[]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",542,[[]]],[11,"swap_bytes","","Reverses the byte order of the integer.",542,[[]]],[11,"reverse_bits","","Reverses the order of bits in the integer. The least …",542,[[]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",542,[[]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",542,[[]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",542,[[]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",542,[[]]],[11,"checked_add","","Checked integer addition. Computes <code>self + rhs</code>, returning …",542,[[],["option",4]]],[11,"unchecked_add","","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …",542,[[]]],[11,"checked_sub","","Checked integer subtraction. Computes <code>self - rhs</code>, …",542,[[],["option",4]]],[11,"unchecked_sub","","Unchecked integer subtraction. Computes <code>self - rhs</code>, …",542,[[]]],[11,"checked_mul","","Checked integer multiplication. Computes <code>self * rhs</code>, …",542,[[],["option",4]]],[11,"unchecked_mul","","Unchecked integer multiplication. Computes <code>self * rhs</code>, …",542,[[]]],[11,"checked_div","","Checked integer division. Computes <code>self / rhs</code>, returning …",542,[[],["option",4]]],[11,"checked_div_euclid","","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…",542,[[],["option",4]]],[11,"checked_rem","","Checked integer remainder. Computes <code>self % rhs</code>, returning …",542,[[],["option",4]]],[11,"checked_rem_euclid","","Checked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, …",542,[[],["option",4]]],[11,"checked_neg","","Checked negation. Computes <code>-self</code>, returning <code>None</code> unless …",542,[[],["option",4]]],[11,"checked_shl","","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …",542,[[],["option",4]]],[11,"checked_shr","","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …",542,[[],["option",4]]],[11,"checked_pow","","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …",542,[[],["option",4]]],[11,"saturating_add","","Saturating integer addition. Computes <code>self + rhs</code>, …",542,[[]]],[11,"saturating_sub","","Saturating integer subtraction. Computes <code>self - rhs</code>, …",542,[[]]],[11,"saturating_mul","","Saturating integer multiplication. Computes <code>self * rhs</code>, …",542,[[]]],[11,"saturating_pow","","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,…",542,[[]]],[11,"wrapping_add","","Wrapping (modular) addition. Computes <code>self + rhs</code>, …",542,[[]]],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …",542,[[]]],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …",542,[[]]],[11,"wrapping_div","","Wrapping (modular) division. Computes <code>self / rhs</code>. Wrapped …",542,[[]]],[11,"wrapping_div_euclid","","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>…",542,[[]]],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes <code>self % rhs</code>. …",542,[[]]],[11,"wrapping_rem_euclid","","Wrapping Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>. …",542,[[]]],[11,"wrapping_neg","","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …",542,[[]]],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …",542,[[]]],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …",542,[[]]],[11,"wrapping_pow","","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,…",542,[[]]],[11,"overflowing_add","","Calculates <code>self</code> + <code>rhs</code>",542,[[]]],[11,"overflowing_sub","","Calculates <code>self</code> - <code>rhs</code>",542,[[]]],[11,"overflowing_mul","","Calculates the multiplication of <code>self</code> and <code>rhs</code>.",542,[[]]],[11,"overflowing_div","","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.",542,[[]]],[11,"overflowing_div_euclid","","Calculates the quotient of Euclidean division …",542,[[]]],[11,"overflowing_rem","","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.",542,[[]]],[11,"overflowing_rem_euclid","","Calculates the remainder <code>self.rem_euclid(rhs)</code> as if by …",542,[[]]],[11,"overflowing_neg","","Negates self in an overflowing fashion.",542,[[]]],[11,"overflowing_shl","","Shifts self left by <code>rhs</code> bits.",542,[[]]],[11,"overflowing_shr","","Shifts self right by <code>rhs</code> bits.",542,[[]]],[11,"overflowing_pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",542,[[]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",542,[[]]],[11,"div_euclid","","Performs Euclidean division.",542,[[]]],[11,"rem_euclid","","Calculates the least remainder of <code>self (mod rhs)</code>.",542,[[]]],[11,"is_power_of_two","","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.",542,[[]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal …",542,[[]]],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal …",542,[[],["option",4]]],[11,"wrapping_next_power_of_two","","Returns the smallest power of two greater than or equal …",542,[[]]],[11,"to_be_bytes","","Return the memory representation of this integer as a …",542,[[]]],[11,"to_le_bytes","","Return the memory representation of this integer as a …",542,[[]]],[11,"to_ne_bytes","","Return the memory representation of this integer as a …",542,[[]]],[11,"as_ne_bytes","","Return the memory representation of this integer as a …",542,[[]]],[11,"from_be_bytes","","Create a native endian integer value from its …",542,[[]]],[11,"from_le_bytes","","Create a native endian integer value from its …",542,[[]]],[11,"from_ne_bytes","","Create a native endian integer value from its memory …",542,[[]]],[11,"min_value","","<strong>This method is soft-deprecated.</strong>",542,[[]]],[11,"max_value","","<strong>This method is soft-deprecated.</strong>",542,[[]]],[11,"is_ascii","","Checks if the value is within the ASCII range.",542,[[]]],[11,"to_ascii_uppercase","","Makes a copy of the value in its ASCII upper case …",542,[[]]],[11,"to_ascii_lowercase","","Makes a copy of the value in its ASCII lower case …",542,[[]]],[11,"eq_ignore_ascii_case","","Checks that two values are an ASCII case-insensitive …",542,[[]]],[11,"make_ascii_uppercase","","Converts this value to its ASCII upper case equivalent …",542,[[]]],[11,"make_ascii_lowercase","","Converts this value to its ASCII lower case equivalent …",542,[[]]],[11,"is_ascii_alphabetic","","Checks if the value is an ASCII alphabetic character:",542,[[]]],[11,"is_ascii_uppercase","","Checks if the value is an ASCII uppercase character: …",542,[[]]],[11,"is_ascii_lowercase","","Checks if the value is an ASCII lowercase character: …",542,[[]]],[11,"is_ascii_alphanumeric","","Checks if the value is an ASCII alphanumeric character:",542,[[]]],[11,"is_ascii_digit","","Checks if the value is an ASCII decimal digit: U+0030 \'0\' …",542,[[]]],[11,"is_ascii_hexdigit","","Checks if the value is an ASCII hexadecimal digit:",542,[[]]],[11,"is_ascii_punctuation","","Checks if the value is an ASCII punctuation character:",542,[[]]],[11,"is_ascii_graphic","","Checks if the value is an ASCII graphic character: U+0021 …",542,[[]]],[11,"is_ascii_whitespace","","Checks if the value is an ASCII whitespace character: …",542,[[]]],[11,"is_ascii_control","","Checks if the value is an ASCII control character: U+0000 …",542,[[]]],[11,"from","","",542,[[]]],[11,"borrow","","",542,[[]]],[11,"borrow_mut","","",542,[[]]],[11,"try_from","","",542,[[],["result",4]]],[11,"into","","",542,[[]]],[11,"try_into","","",542,[[],["result",4]]],[11,"type_id","","",542,[[],["typeid",3]]],[11,"to_owned","","",542,[[]]],[11,"clone_into","","",542,[[]]],[11,"to_string","","",542,[[],["string",3]]],[18,"MIN","","The smallest value that can be represented by this …",543,null],[18,"MAX","","The largest value that can be represented by this integer …",543,null],[18,"BITS","","The size of this integer type in bits.",543,null],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",543,[[],[["parseinterror",3],["result",4]]]],[11,"count_ones","","Returns the number of ones in the binary representation …",543,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",543,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",543,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",543,[[]]],[11,"leading_ones","","Returns the number of leading ones in the binary …",543,[[]]],[11,"trailing_ones","","Returns the number of trailing ones in the binary …",543,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",543,[[]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",543,[[]]],[11,"swap_bytes","","Reverses the byte order of the integer.",543,[[]]],[11,"reverse_bits","","Reverses the order of bits in the integer. The least …",543,[[]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",543,[[]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",543,[[]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",543,[[]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",543,[[]]],[11,"checked_add","","Checked integer addition. Computes <code>self + rhs</code>, returning …",543,[[],["option",4]]],[11,"unchecked_add","","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …",543,[[]]],[11,"checked_sub","","Checked integer subtraction. Computes <code>self - rhs</code>, …",543,[[],["option",4]]],[11,"unchecked_sub","","Unchecked integer subtraction. Computes <code>self - rhs</code>, …",543,[[]]],[11,"checked_mul","","Checked integer multiplication. Computes <code>self * rhs</code>, …",543,[[],["option",4]]],[11,"unchecked_mul","","Unchecked integer multiplication. Computes <code>self * rhs</code>, …",543,[[]]],[11,"checked_div","","Checked integer division. Computes <code>self / rhs</code>, returning …",543,[[],["option",4]]],[11,"checked_div_euclid","","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>,…",543,[[],["option",4]]],[11,"checked_rem","","Checked integer remainder. Computes <code>self % rhs</code>, returning …",543,[[],["option",4]]],[11,"checked_rem_euclid","","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…",543,[[],["option",4]]],[11,"checked_neg","","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …",543,[[],["option",4]]],[11,"checked_shl","","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …",543,[[],["option",4]]],[11,"checked_shr","","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …",543,[[],["option",4]]],[11,"checked_abs","","Checked absolute value. Computes <code>self.abs()</code>, returning …",543,[[],["option",4]]],[11,"checked_pow","","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …",543,[[],["option",4]]],[11,"saturating_add","","Saturating integer addition. Computes <code>self + rhs</code>, …",543,[[]]],[11,"saturating_sub","","Saturating integer subtraction. Computes <code>self - rhs</code>, …",543,[[]]],[11,"saturating_neg","","Saturating integer negation. Computes <code>-self</code>, returning <code>MAX</code>…",543,[[]]],[11,"saturating_abs","","Saturating absolute value. Computes <code>self.abs()</code>, returning …",543,[[]]],[11,"saturating_mul","","Saturating integer multiplication. Computes <code>self * rhs</code>, …",543,[[]]],[11,"saturating_pow","","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,…",543,[[]]],[11,"wrapping_add","","Wrapping (modular) addition. Computes <code>self + rhs</code>, …",543,[[]]],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …",543,[[]]],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …",543,[[]]],[11,"wrapping_div","","Wrapping (modular) division. Computes <code>self / rhs</code>, …",543,[[]]],[11,"wrapping_div_euclid","","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>…",543,[[]]],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes <code>self % rhs</code>, …",543,[[]]],[11,"wrapping_rem_euclid","","Wrapping Euclidean remainder. Computes …",543,[[]]],[11,"wrapping_neg","","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …",543,[[]]],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …",543,[[]]],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …",543,[[]]],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes <code>self.abs()</code>, …",543,[[]]],[11,"unsigned_abs","","Computes the absolute value of <code>self</code> without any wrapping …",543,[[]]],[11,"wrapping_pow","","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,…",543,[[]]],[11,"overflowing_add","","Calculates <code>self</code> + <code>rhs</code>",543,[[]]],[11,"overflowing_sub","","Calculates <code>self</code> - <code>rhs</code>",543,[[]]],[11,"overflowing_mul","","Calculates the multiplication of <code>self</code> and <code>rhs</code>.",543,[[]]],[11,"overflowing_div","","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.",543,[[]]],[11,"overflowing_div_euclid","","Calculates the quotient of Euclidean division …",543,[[]]],[11,"overflowing_rem","","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.",543,[[]]],[11,"overflowing_rem_euclid","","Overflowing Euclidean remainder. Calculates …",543,[[]]],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum …",543,[[]]],[11,"overflowing_shl","","Shifts self left by <code>rhs</code> bits.",543,[[]]],[11,"overflowing_shr","","Shifts self right by <code>rhs</code> bits.",543,[[]]],[11,"overflowing_abs","","Computes the absolute value of <code>self</code>.",543,[[]]],[11,"overflowing_pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",543,[[]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",543,[[]]],[11,"div_euclid","","Calculates the quotient of Euclidean division of <code>self</code> by …",543,[[]]],[11,"rem_euclid","","Calculates the least nonnegative remainder of …",543,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>.",543,[[]]],[11,"signum","","Returns a number representing sign of <code>self</code>.",543,[[]]],[11,"is_positive","","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …",543,[[]]],[11,"is_negative","","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …",543,[[]]],[11,"to_be_bytes","","Return the memory representation of this integer as a …",543,[[]]],[11,"to_le_bytes","","Return the memory representation of this integer as a …",543,[[]]],[11,"to_ne_bytes","","Return the memory representation of this integer as a …",543,[[]]],[11,"as_ne_bytes","","Return the memory representation of this integer as a …",543,[[]]],[11,"from_be_bytes","","Create an integer value from its representation as a byte …",543,[[]]],[11,"from_le_bytes","","Create an integer value from its representation as a byte …",543,[[]]],[11,"from_ne_bytes","","Create an integer value from its memory representation as …",543,[[]]],[11,"min_value","","<strong>This method is soft-deprecated.</strong>",543,[[]]],[11,"max_value","","<strong>This method is soft-deprecated.</strong>",543,[[]]],[11,"from","","",543,[[]]],[11,"borrow","","",543,[[]]],[11,"borrow_mut","","",543,[[]]],[11,"try_from","","",543,[[],["result",4]]],[11,"into","","",543,[[]]],[11,"try_into","","",543,[[],["result",4]]],[11,"type_id","","",543,[[],["typeid",3]]],[11,"to_owned","","",543,[[]]],[11,"clone_into","","",543,[[]]],[11,"to_string","","",543,[[],["string",3]]],[18,"MIN","","The smallest value that can be represented by this …",544,null],[18,"MAX","","The largest value that can be represented by this integer …",544,null],[18,"BITS","","The size of this integer type in bits.",544,null],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",544,[[],[["parseinterror",3],["result",4]]]],[11,"count_ones","","Returns the number of ones in the binary representation …",544,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",544,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",544,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",544,[[]]],[11,"leading_ones","","Returns the number of leading ones in the binary …",544,[[]]],[11,"trailing_ones","","Returns the number of trailing ones in the binary …",544,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",544,[[]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",544,[[]]],[11,"swap_bytes","","Reverses the byte order of the integer.",544,[[]]],[11,"reverse_bits","","Reverses the order of bits in the integer. The least …",544,[[]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",544,[[]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",544,[[]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",544,[[]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",544,[[]]],[11,"checked_add","","Checked integer addition. Computes <code>self + rhs</code>, returning …",544,[[],["option",4]]],[11,"unchecked_add","","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …",544,[[]]],[11,"checked_sub","","Checked integer subtraction. Computes <code>self - rhs</code>, …",544,[[],["option",4]]],[11,"unchecked_sub","","Unchecked integer subtraction. Computes <code>self - rhs</code>, …",544,[[]]],[11,"checked_mul","","Checked integer multiplication. Computes <code>self * rhs</code>, …",544,[[],["option",4]]],[11,"unchecked_mul","","Unchecked integer multiplication. Computes <code>self * rhs</code>, …",544,[[]]],[11,"checked_div","","Checked integer division. Computes <code>self / rhs</code>, returning …",544,[[],["option",4]]],[11,"checked_div_euclid","","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>,…",544,[[],["option",4]]],[11,"checked_rem","","Checked integer remainder. Computes <code>self % rhs</code>, returning …",544,[[],["option",4]]],[11,"checked_rem_euclid","","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…",544,[[],["option",4]]],[11,"checked_neg","","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …",544,[[],["option",4]]],[11,"checked_shl","","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …",544,[[],["option",4]]],[11,"checked_shr","","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …",544,[[],["option",4]]],[11,"checked_abs","","Checked absolute value. Computes <code>self.abs()</code>, returning …",544,[[],["option",4]]],[11,"checked_pow","","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …",544,[[],["option",4]]],[11,"saturating_add","","Saturating integer addition. Computes <code>self + rhs</code>, …",544,[[]]],[11,"saturating_sub","","Saturating integer subtraction. Computes <code>self - rhs</code>, …",544,[[]]],[11,"saturating_neg","","Saturating integer negation. Computes <code>-self</code>, returning <code>MAX</code>…",544,[[]]],[11,"saturating_abs","","Saturating absolute value. Computes <code>self.abs()</code>, returning …",544,[[]]],[11,"saturating_mul","","Saturating integer multiplication. Computes <code>self * rhs</code>, …",544,[[]]],[11,"saturating_pow","","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,…",544,[[]]],[11,"wrapping_add","","Wrapping (modular) addition. Computes <code>self + rhs</code>, …",544,[[]]],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …",544,[[]]],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …",544,[[]]],[11,"wrapping_div","","Wrapping (modular) division. Computes <code>self / rhs</code>, …",544,[[]]],[11,"wrapping_div_euclid","","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>…",544,[[]]],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes <code>self % rhs</code>, …",544,[[]]],[11,"wrapping_rem_euclid","","Wrapping Euclidean remainder. Computes …",544,[[]]],[11,"wrapping_neg","","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …",544,[[]]],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …",544,[[]]],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …",544,[[]]],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes <code>self.abs()</code>, …",544,[[]]],[11,"unsigned_abs","","Computes the absolute value of <code>self</code> without any wrapping …",544,[[]]],[11,"wrapping_pow","","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,…",544,[[]]],[11,"overflowing_add","","Calculates <code>self</code> + <code>rhs</code>",544,[[]]],[11,"overflowing_sub","","Calculates <code>self</code> - <code>rhs</code>",544,[[]]],[11,"overflowing_mul","","Calculates the multiplication of <code>self</code> and <code>rhs</code>.",544,[[]]],[11,"overflowing_div","","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.",544,[[]]],[11,"overflowing_div_euclid","","Calculates the quotient of Euclidean division …",544,[[]]],[11,"overflowing_rem","","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.",544,[[]]],[11,"overflowing_rem_euclid","","Overflowing Euclidean remainder. Calculates …",544,[[]]],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum …",544,[[]]],[11,"overflowing_shl","","Shifts self left by <code>rhs</code> bits.",544,[[]]],[11,"overflowing_shr","","Shifts self right by <code>rhs</code> bits.",544,[[]]],[11,"overflowing_abs","","Computes the absolute value of <code>self</code>.",544,[[]]],[11,"overflowing_pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",544,[[]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",544,[[]]],[11,"div_euclid","","Calculates the quotient of Euclidean division of <code>self</code> by …",544,[[]]],[11,"rem_euclid","","Calculates the least nonnegative remainder of …",544,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>.",544,[[]]],[11,"signum","","Returns a number representing sign of <code>self</code>.",544,[[]]],[11,"is_positive","","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …",544,[[]]],[11,"is_negative","","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …",544,[[]]],[11,"to_be_bytes","","Return the memory representation of this integer as a …",544,[[]]],[11,"to_le_bytes","","Return the memory representation of this integer as a …",544,[[]]],[11,"to_ne_bytes","","Return the memory representation of this integer as a …",544,[[]]],[11,"as_ne_bytes","","Return the memory representation of this integer as a …",544,[[]]],[11,"from_be_bytes","","Create an integer value from its representation as a byte …",544,[[]]],[11,"from_le_bytes","","Create an integer value from its representation as a byte …",544,[[]]],[11,"from_ne_bytes","","Create an integer value from its memory representation as …",544,[[]]],[11,"min_value","","<strong>This method is soft-deprecated.</strong>",544,[[]]],[11,"max_value","","<strong>This method is soft-deprecated.</strong>",544,[[]]],[11,"from","","",544,[[]]],[11,"borrow","","",544,[[]]],[11,"borrow_mut","","",544,[[]]],[11,"try_from","","",544,[[],["result",4]]],[11,"into","","",544,[[]]],[11,"try_into","","",544,[[],["result",4]]],[11,"type_id","","",544,[[],["typeid",3]]],[11,"to_owned","","",544,[[]]],[11,"clone_into","","",544,[[]]],[11,"to_string","","",544,[[],["string",3]]],[11,"is_null","","Returns <code>true</code> if the pointer is null.",565,[[]]],[11,"cast","","Casts to a pointer of another type.",565,[[]]],[11,"as_ref","","Returns <code>None</code> if the pointer is null, or else returns a …",565,[[],["option",4]]],[11,"as_uninit_ref","","Returns <code>None</code> if the pointer is null, or else returns a …",565,[[],[["option",4],["maybeuninit",19]]]],[11,"offset","","Calculates the offset from a pointer.",565,[[]]],[11,"wrapping_offset","","Calculates the offset from a pointer using wrapping …",565,[[]]],[11,"offset_from","","Calculates the distance between two pointers. The …",565,[[]]],[11,"guaranteed_eq","","Returns whether two pointers are guaranteed to be equal.",565,[[]]],[11,"guaranteed_ne","","Returns whether two pointers are guaranteed to be unequal.",565,[[]]],[11,"add","","Calculates the offset from a pointer (convenience for …",565,[[]]],[11,"sub","","Calculates the offset from a pointer (convenience for …",565,[[]]],[11,"wrapping_add","","Calculates the offset from a pointer using wrapping …",565,[[]]],[11,"wrapping_sub","","Calculates the offset from a pointer using wrapping …",565,[[]]],[11,"set_ptr_value","","Sets the pointer value to <code>ptr</code>.",565,[[]]],[11,"read","","Reads the value from <code>self</code> without moving it. This leaves …",565,[[]]],[11,"read_volatile","","Performs a volatile read of the value from <code>self</code> without …",565,[[]]],[11,"read_unaligned","","Reads the value from <code>self</code> without moving it. This leaves …",565,[[]]],[11,"copy_to","","Copies <code>count * size_of<T></code> bytes from <code>self</code> to <code>dest</code>. The …",565,[[]]],[11,"copy_to_nonoverlapping","","Copies <code>count * size_of<T></code> bytes from <code>self</code> to <code>dest</code>. The …",565,[[]]],[11,"align_offset","","Computes the offset that needs to be applied to the …",565,[[]]],[11,"from","","",565,[[]]],[11,"borrow","","",565,[[]]],[11,"borrow_mut","","",565,[[]]],[11,"try_from","","",565,[[],["result",4]]],[11,"into","","",565,[[]]],[11,"try_into","","",565,[[],["result",4]]],[11,"type_id","","",565,[[],["typeid",3]]],[11,"to_owned","","",565,[[]]],[11,"clone_into","","",565,[[]]],[11,"is_null","","Returns <code>true</code> if the pointer is null.",565,[[]]],[11,"cast","","Casts to a pointer of another type.",565,[[]]],[11,"as_ref","","Returns <code>None</code> if the pointer is null, or else returns a …",565,[[],["option",4]]],[11,"as_uninit_ref","","Returns <code>None</code> if the pointer is null, or else returns a …",565,[[],[["option",4],["maybeuninit",19]]]],[11,"offset","","Calculates the offset from a pointer.",565,[[]]],[11,"wrapping_offset","","Calculates the offset from a pointer using wrapping …",565,[[]]],[11,"as_mut","","Returns <code>None</code> if the pointer is null, or else returns a …",565,[[],["option",4]]],[11,"as_uninit_mut","","Returns <code>None</code> if the pointer is null, or else returns a …",565,[[],[["option",4],["maybeuninit",19]]]],[11,"guaranteed_eq","","Returns whether two pointers are guaranteed to be equal.",565,[[]]],[11,"guaranteed_ne","","Returns whether two pointers are guaranteed to be unequal.",565,[[]]],[11,"offset_from","","Calculates the distance between two pointers. The …",565,[[]]],[11,"add","","Calculates the offset from a pointer (convenience for …",565,[[]]],[11,"sub","","Calculates the offset from a pointer (convenience for …",565,[[]]],[11,"wrapping_add","","Calculates the offset from a pointer using wrapping …",565,[[]]],[11,"wrapping_sub","","Calculates the offset from a pointer using wrapping …",565,[[]]],[11,"set_ptr_value","","Sets the pointer value to <code>ptr</code>.",565,[[]]],[11,"read","","Reads the value from <code>self</code> without moving it. This leaves …",565,[[]]],[11,"read_volatile","","Performs a volatile read of the value from <code>self</code> without …",565,[[]]],[11,"read_unaligned","","Reads the value from <code>self</code> without moving it. This leaves …",565,[[]]],[11,"copy_to","","Copies <code>count * size_of<T></code> bytes from <code>self</code> to <code>dest</code>. The …",565,[[]]],[11,"copy_to_nonoverlapping","","Copies <code>count * size_of<T></code> bytes from <code>self</code> to <code>dest</code>. The …",565,[[]]],[11,"copy_from","","Copies <code>count * size_of<T></code> bytes from <code>src</code> to <code>self</code>. The …",565,[[]]],[11,"copy_from_nonoverlapping","","Copies <code>count * size_of<T></code> bytes from <code>src</code> to <code>self</code>. The …",565,[[]]],[11,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",565,[[]]],[11,"write","","Overwrites a memory location with the given value without …",565,[[]]],[11,"write_bytes","","Invokes memset on the specified pointer, setting …",565,[[]]],[11,"write_volatile","","Performs a volatile write of a memory location with the …",565,[[]]],[11,"write_unaligned","","Overwrites a memory location with the given value without …",565,[[]]],[11,"replace","","Replaces the value at <code>self</code> with <code>src</code>, returning the old …",565,[[]]],[11,"swap","","Swaps the values at two mutable locations of the same …",565,[[]]],[11,"align_offset","","Computes the offset that needs to be applied to the …",565,[[]]],[11,"from","","",565,[[]]],[11,"borrow","","",565,[[]]],[11,"borrow_mut","","",565,[[]]],[11,"try_from","","",565,[[],["result",4]]],[11,"into","","",565,[[]]],[11,"try_into","","",565,[[],["result",4]]],[11,"type_id","","",565,[[],["typeid",3]]],[11,"to_owned","","",565,[[]]],[11,"clone_into","","",565,[[]]],[11,"len","","Returns the length of a raw slice.",565,[[]]],[11,"as_ptr","","Returns a raw pointer to the slice\'s buffer.",565,[[]]],[11,"get_unchecked","","Returns a raw pointer to an element or subslice, without …",565,[[]]],[11,"as_uninit_slice","","Returns <code>None</code> if the pointer is null, or else returns a …",565,[[],["option",4]]],[11,"from","","",565,[[]]],[11,"borrow","","",565,[[]]],[11,"borrow_mut","","",565,[[]]],[11,"try_from","","",565,[[],["result",4]]],[11,"into","","",565,[[]]],[11,"try_into","","",565,[[],["result",4]]],[11,"type_id","","",565,[[],["typeid",3]]],[11,"to_owned","","",565,[[]]],[11,"clone_into","","",565,[[]]],[11,"len","","Returns the length of a raw slice.",565,[[]]],[11,"as_mut_ptr","","Returns a raw pointer to the slice\'s buffer.",565,[[]]],[11,"get_unchecked_mut","","Returns a raw pointer to an element or subslice, without …",565,[[]]],[11,"as_uninit_slice","","Returns <code>None</code> if the pointer is null, or else returns a …",565,[[],["option",4]]],[11,"as_uninit_slice_mut","","Returns <code>None</code> if the pointer is null, or else returns a …",565,[[],["option",4]]],[11,"from","","",565,[[]]],[11,"borrow","","",565,[[]]],[11,"borrow_mut","","",565,[[]]],[11,"try_from","","",565,[[],["result",4]]],[11,"into","","",565,[[]]],[11,"try_into","","",565,[[],["result",4]]],[11,"type_id","","",565,[[],["typeid",3]]],[11,"to_owned","","",565,[[]]],[11,"clone_into","","",565,[[]]],[11,"map","","Returns an array of the same size as <code>self</code>, with function <code>f</code>…",558,[[]]],[11,"zip","","\'Zips up\' two arrays into a single array of pairs.",558,[[]]],[11,"as_slice","","Returns a slice containing the entire array. Equivalent …",558,[[]]],[11,"as_mut_slice","","Returns a mutable slice containing the entire array. …",558,[[]]],[11,"from","","",558,[[]]],[11,"as_slice","","",558,[[]]],[11,"as_mut_slice","","",558,[[]]],[11,"borrow","","",558,[[]]],[11,"borrow_mut","","",558,[[]]],[11,"try_from","","",558,[[],["result",4]]],[11,"into","","",558,[[]]],[11,"try_into","","",558,[[],["result",4]]],[11,"type_id","","",558,[[],["typeid",3]]],[11,"to_owned","","",558,[[]]],[11,"clone_into","","",558,[[]]],[11,"then_some","","Returns <code>Some(t)</code> if the <code>bool</code> is <code>true</code>, or <code>None</code> otherwise.",559,[[],["option",4]]],[11,"then","","Returns <code>Some(f())</code> if the <code>bool</code> is <code>true</code>, or <code>None</code> otherwise.",559,[[],["option",4]]],[11,"from","","",559,[[]]],[11,"borrow","","",559,[[]]],[11,"borrow_mut","","",559,[[]]],[11,"try_from","","",559,[[],["result",4]]],[11,"into","","",559,[[]]],[11,"try_into","","",559,[[],["result",4]]],[11,"type_id","","",559,[[],["typeid",3]]],[11,"to_owned","","",559,[[]]],[11,"clone_into","","",559,[[]]],[11,"to_string","","",559,[[],["string",3]]],[18,"RADIX","","The radix or base of the internal representation of <code>f32</code>.",554,null],[18,"MANTISSA_DIGITS","","Number of significant digits in base 2.",554,null],[18,"DIGITS","","Approximate number of significant digits in base 10.",554,null],[18,"EPSILON","","Machine epsilon value for <code>f32</code>.",554,null],[18,"MIN","","Smallest finite <code>f32</code> value.",554,null],[18,"MIN_POSITIVE","","Smallest positive normal <code>f32</code> value.",554,null],[18,"MAX","","Largest finite <code>f32</code> value.",554,null],[18,"MIN_EXP","","One greater than the minimum possible normal power of 2 …",554,null],[18,"MAX_EXP","","Maximum possible power of 2 exponent.",554,null],[18,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",554,null],[18,"MAX_10_EXP","","Maximum possible power of 10 exponent.",554,null],[18,"NAN","","Not a Number (NaN).",554,null],[18,"INFINITY","","Infinity (∞).",554,null],[18,"NEG_INFINITY","","Negative infinity (−∞).",554,null],[11,"is_nan","","Returns <code>true</code> if this value is <code>NaN</code>.",554,[[]]],[11,"is_infinite","","Returns <code>true</code> if this value is positive infinity or …",554,[[]]],[11,"is_finite","","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.",554,[[]]],[11,"is_subnormal","","Returns <code>true</code> if the number is subnormal.",554,[[]]],[11,"is_normal","","Returns <code>true</code> if the number is neither zero, infinite, …",554,[[]]],[11,"classify","","Returns the floating point category of the number. If …",554,[[],["fpcategory",4]]],[11,"is_sign_positive","","Returns <code>true</code> if <code>self</code> has a positive sign, including <code>+0.0</code>, …",554,[[]]],[11,"is_sign_negative","","Returns <code>true</code> if <code>self</code> has a negative sign, including <code>-0.0</code>, …",554,[[]]],[11,"recip","","Takes the reciprocal (inverse) of a number, <code>1/x</code>.",554,[[]]],[11,"to_degrees","","Converts radians to degrees.",554,[[]]],[11,"to_radians","","Converts degrees to radians.",554,[[]]],[11,"max","","Returns the maximum of the two numbers.",554,[[]]],[11,"min","","Returns the minimum of the two numbers.",554,[[]]],[11,"to_int_unchecked","","Rounds toward zero and converts to any primitive integer …",554,[[]]],[11,"to_bits","","Raw transmutation to <code>u32</code>.",554,[[]]],[11,"from_bits","","Raw transmutation from <code>u32</code>.",554,[[]]],[11,"to_be_bytes","","Return the memory representation of this floating point …",554,[[]]],[11,"to_le_bytes","","Return the memory representation of this floating point …",554,[[]]],[11,"to_ne_bytes","","Return the memory representation of this floating point …",554,[[]]],[11,"as_ne_bytes","","Return the memory representation of this floating point …",554,[[]]],[11,"from_be_bytes","","Create a floating point value from its representation as …",554,[[]]],[11,"from_le_bytes","","Create a floating point value from its representation as …",554,[[]]],[11,"from_ne_bytes","","Create a floating point value from its representation as …",554,[[]]],[11,"total_cmp","","Returns an ordering between self and other values. Unlike …",554,[[],["ordering",4]]],[11,"clamp","","Restrict a value to a certain interval unless it is NaN.",554,[[]]],[11,"from","","",554,[[]]],[11,"borrow","","",554,[[]]],[11,"borrow_mut","","",554,[[]]],[11,"try_from","","",554,[[],["result",4]]],[11,"into","","",554,[[]]],[11,"try_into","","",554,[[],["result",4]]],[11,"type_id","","",554,[[],["typeid",3]]],[11,"to_owned","","",554,[[]]],[11,"clone_into","","",554,[[]]],[11,"to_string","","",554,[[],["string",3]]],[18,"MIN","","The smallest value that can be represented by this …",547,null],[18,"MAX","","The largest value that can be represented by this integer …",547,null],[18,"BITS","","The size of this integer type in bits.",547,null],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",547,[[],[["parseinterror",3],["result",4]]]],[11,"count_ones","","Returns the number of ones in the binary representation …",547,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",547,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",547,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",547,[[]]],[11,"leading_ones","","Returns the number of leading ones in the binary …",547,[[]]],[11,"trailing_ones","","Returns the number of trailing ones in the binary …",547,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",547,[[]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",547,[[]]],[11,"swap_bytes","","Reverses the byte order of the integer.",547,[[]]],[11,"reverse_bits","","Reverses the order of bits in the integer. The least …",547,[[]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",547,[[]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",547,[[]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",547,[[]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",547,[[]]],[11,"checked_add","","Checked integer addition. Computes <code>self + rhs</code>, returning …",547,[[],["option",4]]],[11,"unchecked_add","","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …",547,[[]]],[11,"checked_sub","","Checked integer subtraction. Computes <code>self - rhs</code>, …",547,[[],["option",4]]],[11,"unchecked_sub","","Unchecked integer subtraction. Computes <code>self - rhs</code>, …",547,[[]]],[11,"checked_mul","","Checked integer multiplication. Computes <code>self * rhs</code>, …",547,[[],["option",4]]],[11,"unchecked_mul","","Unchecked integer multiplication. Computes <code>self * rhs</code>, …",547,[[]]],[11,"checked_div","","Checked integer division. Computes <code>self / rhs</code>, returning …",547,[[],["option",4]]],[11,"checked_div_euclid","","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…",547,[[],["option",4]]],[11,"checked_rem","","Checked integer remainder. Computes <code>self % rhs</code>, returning …",547,[[],["option",4]]],[11,"checked_rem_euclid","","Checked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, …",547,[[],["option",4]]],[11,"checked_neg","","Checked negation. Computes <code>-self</code>, returning <code>None</code> unless …",547,[[],["option",4]]],[11,"checked_shl","","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …",547,[[],["option",4]]],[11,"checked_shr","","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …",547,[[],["option",4]]],[11,"checked_pow","","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …",547,[[],["option",4]]],[11,"saturating_add","","Saturating integer addition. Computes <code>self + rhs</code>, …",547,[[]]],[11,"saturating_sub","","Saturating integer subtraction. Computes <code>self - rhs</code>, …",547,[[]]],[11,"saturating_mul","","Saturating integer multiplication. Computes <code>self * rhs</code>, …",547,[[]]],[11,"saturating_pow","","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,…",547,[[]]],[11,"wrapping_add","","Wrapping (modular) addition. Computes <code>self + rhs</code>, …",547,[[]]],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …",547,[[]]],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …",547,[[]]],[11,"wrapping_div","","Wrapping (modular) division. Computes <code>self / rhs</code>. Wrapped …",547,[[]]],[11,"wrapping_div_euclid","","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>…",547,[[]]],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes <code>self % rhs</code>. …",547,[[]]],[11,"wrapping_rem_euclid","","Wrapping Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>. …",547,[[]]],[11,"wrapping_neg","","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …",547,[[]]],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …",547,[[]]],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …",547,[[]]],[11,"wrapping_pow","","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,…",547,[[]]],[11,"overflowing_add","","Calculates <code>self</code> + <code>rhs</code>",547,[[]]],[11,"overflowing_sub","","Calculates <code>self</code> - <code>rhs</code>",547,[[]]],[11,"overflowing_mul","","Calculates the multiplication of <code>self</code> and <code>rhs</code>.",547,[[]]],[11,"overflowing_div","","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.",547,[[]]],[11,"overflowing_div_euclid","","Calculates the quotient of Euclidean division …",547,[[]]],[11,"overflowing_rem","","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.",547,[[]]],[11,"overflowing_rem_euclid","","Calculates the remainder <code>self.rem_euclid(rhs)</code> as if by …",547,[[]]],[11,"overflowing_neg","","Negates self in an overflowing fashion.",547,[[]]],[11,"overflowing_shl","","Shifts self left by <code>rhs</code> bits.",547,[[]]],[11,"overflowing_shr","","Shifts self right by <code>rhs</code> bits.",547,[[]]],[11,"overflowing_pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",547,[[]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",547,[[]]],[11,"div_euclid","","Performs Euclidean division.",547,[[]]],[11,"rem_euclid","","Calculates the least remainder of <code>self (mod rhs)</code>.",547,[[]]],[11,"is_power_of_two","","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.",547,[[]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal …",547,[[]]],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal …",547,[[],["option",4]]],[11,"wrapping_next_power_of_two","","Returns the smallest power of two greater than or equal …",547,[[]]],[11,"to_be_bytes","","Return the memory representation of this integer as a …",547,[[]]],[11,"to_le_bytes","","Return the memory representation of this integer as a …",547,[[]]],[11,"to_ne_bytes","","Return the memory representation of this integer as a …",547,[[]]],[11,"as_ne_bytes","","Return the memory representation of this integer as a …",547,[[]]],[11,"from_be_bytes","","Create a native endian integer value from its …",547,[[]]],[11,"from_le_bytes","","Create a native endian integer value from its …",547,[[]]],[11,"from_ne_bytes","","Create a native endian integer value from its memory …",547,[[]]],[11,"min_value","","<strong>This method is soft-deprecated.</strong>",547,[[]]],[11,"max_value","","<strong>This method is soft-deprecated.</strong>",547,[[]]],[11,"from","","",547,[[]]],[11,"borrow","","",547,[[]]],[11,"borrow_mut","","",547,[[]]],[11,"try_from","","",547,[[],["result",4]]],[11,"into","","",547,[[]]],[11,"try_into","","",547,[[],["result",4]]],[11,"type_id","","",547,[[],["typeid",3]]],[11,"to_owned","","",547,[[]]],[11,"clone_into","","",547,[[]]],[11,"to_string","","",547,[[],["string",3]]],[18,"MIN","","The smallest value that can be represented by this …",545,null],[18,"MAX","","The largest value that can be represented by this integer …",545,null],[18,"BITS","","The size of this integer type in bits.",545,null],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",545,[[],[["parseinterror",3],["result",4]]]],[11,"count_ones","","Returns the number of ones in the binary representation …",545,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",545,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",545,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",545,[[]]],[11,"leading_ones","","Returns the number of leading ones in the binary …",545,[[]]],[11,"trailing_ones","","Returns the number of trailing ones in the binary …",545,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",545,[[]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",545,[[]]],[11,"swap_bytes","","Reverses the byte order of the integer.",545,[[]]],[11,"reverse_bits","","Reverses the order of bits in the integer. The least …",545,[[]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",545,[[]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",545,[[]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",545,[[]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",545,[[]]],[11,"checked_add","","Checked integer addition. Computes <code>self + rhs</code>, returning …",545,[[],["option",4]]],[11,"unchecked_add","","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …",545,[[]]],[11,"checked_sub","","Checked integer subtraction. Computes <code>self - rhs</code>, …",545,[[],["option",4]]],[11,"unchecked_sub","","Unchecked integer subtraction. Computes <code>self - rhs</code>, …",545,[[]]],[11,"checked_mul","","Checked integer multiplication. Computes <code>self * rhs</code>, …",545,[[],["option",4]]],[11,"unchecked_mul","","Unchecked integer multiplication. Computes <code>self * rhs</code>, …",545,[[]]],[11,"checked_div","","Checked integer division. Computes <code>self / rhs</code>, returning …",545,[[],["option",4]]],[11,"checked_div_euclid","","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…",545,[[],["option",4]]],[11,"checked_rem","","Checked integer remainder. Computes <code>self % rhs</code>, returning …",545,[[],["option",4]]],[11,"checked_rem_euclid","","Checked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, …",545,[[],["option",4]]],[11,"checked_neg","","Checked negation. Computes <code>-self</code>, returning <code>None</code> unless …",545,[[],["option",4]]],[11,"checked_shl","","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …",545,[[],["option",4]]],[11,"checked_shr","","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …",545,[[],["option",4]]],[11,"checked_pow","","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …",545,[[],["option",4]]],[11,"saturating_add","","Saturating integer addition. Computes <code>self + rhs</code>, …",545,[[]]],[11,"saturating_sub","","Saturating integer subtraction. Computes <code>self - rhs</code>, …",545,[[]]],[11,"saturating_mul","","Saturating integer multiplication. Computes <code>self * rhs</code>, …",545,[[]]],[11,"saturating_pow","","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,…",545,[[]]],[11,"wrapping_add","","Wrapping (modular) addition. Computes <code>self + rhs</code>, …",545,[[]]],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …",545,[[]]],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …",545,[[]]],[11,"wrapping_div","","Wrapping (modular) division. Computes <code>self / rhs</code>. Wrapped …",545,[[]]],[11,"wrapping_div_euclid","","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>…",545,[[]]],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes <code>self % rhs</code>. …",545,[[]]],[11,"wrapping_rem_euclid","","Wrapping Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>. …",545,[[]]],[11,"wrapping_neg","","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …",545,[[]]],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …",545,[[]]],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …",545,[[]]],[11,"wrapping_pow","","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,…",545,[[]]],[11,"overflowing_add","","Calculates <code>self</code> + <code>rhs</code>",545,[[]]],[11,"overflowing_sub","","Calculates <code>self</code> - <code>rhs</code>",545,[[]]],[11,"overflowing_mul","","Calculates the multiplication of <code>self</code> and <code>rhs</code>.",545,[[]]],[11,"overflowing_div","","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.",545,[[]]],[11,"overflowing_div_euclid","","Calculates the quotient of Euclidean division …",545,[[]]],[11,"overflowing_rem","","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.",545,[[]]],[11,"overflowing_rem_euclid","","Calculates the remainder <code>self.rem_euclid(rhs)</code> as if by …",545,[[]]],[11,"overflowing_neg","","Negates self in an overflowing fashion.",545,[[]]],[11,"overflowing_shl","","Shifts self left by <code>rhs</code> bits.",545,[[]]],[11,"overflowing_shr","","Shifts self right by <code>rhs</code> bits.",545,[[]]],[11,"overflowing_pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",545,[[]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",545,[[]]],[11,"div_euclid","","Performs Euclidean division.",545,[[]]],[11,"rem_euclid","","Calculates the least remainder of <code>self (mod rhs)</code>.",545,[[]]],[11,"is_power_of_two","","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.",545,[[]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal …",545,[[]]],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal …",545,[[],["option",4]]],[11,"wrapping_next_power_of_two","","Returns the smallest power of two greater than or equal …",545,[[]]],[11,"to_be_bytes","","Return the memory representation of this integer as a …",545,[[]]],[11,"to_le_bytes","","Return the memory representation of this integer as a …",545,[[]]],[11,"to_ne_bytes","","Return the memory representation of this integer as a …",545,[[]]],[11,"as_ne_bytes","","Return the memory representation of this integer as a …",545,[[]]],[11,"from_be_bytes","","Create a native endian integer value from its …",545,[[]]],[11,"from_le_bytes","","Create a native endian integer value from its …",545,[[]]],[11,"from_ne_bytes","","Create a native endian integer value from its memory …",545,[[]]],[11,"min_value","","<strong>This method is soft-deprecated.</strong>",545,[[]]],[11,"max_value","","<strong>This method is soft-deprecated.</strong>",545,[[]]],[11,"from","","",545,[[]]],[11,"borrow","","",545,[[]]],[11,"borrow_mut","","",545,[[]]],[11,"try_from","","",545,[[],["result",4]]],[11,"into","","",545,[[]]],[11,"try_into","","",545,[[],["result",4]]],[11,"type_id","","",545,[[],["typeid",3]]],[11,"to_owned","","",545,[[]]],[11,"clone_into","","",545,[[]]],[11,"to_string","","",545,[[],["string",3]]],[18,"MIN","","The smallest value that can be represented by this …",550,null],[18,"MAX","","The largest value that can be represented by this integer …",550,null],[18,"BITS","","The size of this integer type in bits.",550,null],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",550,[[],[["parseinterror",3],["result",4]]]],[11,"count_ones","","Returns the number of ones in the binary representation …",550,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",550,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",550,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",550,[[]]],[11,"leading_ones","","Returns the number of leading ones in the binary …",550,[[]]],[11,"trailing_ones","","Returns the number of trailing ones in the binary …",550,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",550,[[]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",550,[[]]],[11,"swap_bytes","","Reverses the byte order of the integer.",550,[[]]],[11,"reverse_bits","","Reverses the order of bits in the integer. The least …",550,[[]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",550,[[]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",550,[[]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",550,[[]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",550,[[]]],[11,"checked_add","","Checked integer addition. Computes <code>self + rhs</code>, returning …",550,[[],["option",4]]],[11,"unchecked_add","","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …",550,[[]]],[11,"checked_sub","","Checked integer subtraction. Computes <code>self - rhs</code>, …",550,[[],["option",4]]],[11,"unchecked_sub","","Unchecked integer subtraction. Computes <code>self - rhs</code>, …",550,[[]]],[11,"checked_mul","","Checked integer multiplication. Computes <code>self * rhs</code>, …",550,[[],["option",4]]],[11,"unchecked_mul","","Unchecked integer multiplication. Computes <code>self * rhs</code>, …",550,[[]]],[11,"checked_div","","Checked integer division. Computes <code>self / rhs</code>, returning …",550,[[],["option",4]]],[11,"checked_div_euclid","","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>,…",550,[[],["option",4]]],[11,"checked_rem","","Checked integer remainder. Computes <code>self % rhs</code>, returning …",550,[[],["option",4]]],[11,"checked_rem_euclid","","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…",550,[[],["option",4]]],[11,"checked_neg","","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …",550,[[],["option",4]]],[11,"checked_shl","","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …",550,[[],["option",4]]],[11,"checked_shr","","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …",550,[[],["option",4]]],[11,"checked_abs","","Checked absolute value. Computes <code>self.abs()</code>, returning …",550,[[],["option",4]]],[11,"checked_pow","","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …",550,[[],["option",4]]],[11,"saturating_add","","Saturating integer addition. Computes <code>self + rhs</code>, …",550,[[]]],[11,"saturating_sub","","Saturating integer subtraction. Computes <code>self - rhs</code>, …",550,[[]]],[11,"saturating_neg","","Saturating integer negation. Computes <code>-self</code>, returning <code>MAX</code>…",550,[[]]],[11,"saturating_abs","","Saturating absolute value. Computes <code>self.abs()</code>, returning …",550,[[]]],[11,"saturating_mul","","Saturating integer multiplication. Computes <code>self * rhs</code>, …",550,[[]]],[11,"saturating_pow","","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,…",550,[[]]],[11,"wrapping_add","","Wrapping (modular) addition. Computes <code>self + rhs</code>, …",550,[[]]],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …",550,[[]]],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …",550,[[]]],[11,"wrapping_div","","Wrapping (modular) division. Computes <code>self / rhs</code>, …",550,[[]]],[11,"wrapping_div_euclid","","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>…",550,[[]]],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes <code>self % rhs</code>, …",550,[[]]],[11,"wrapping_rem_euclid","","Wrapping Euclidean remainder. Computes …",550,[[]]],[11,"wrapping_neg","","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …",550,[[]]],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …",550,[[]]],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …",550,[[]]],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes <code>self.abs()</code>, …",550,[[]]],[11,"unsigned_abs","","Computes the absolute value of <code>self</code> without any wrapping …",550,[[]]],[11,"wrapping_pow","","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,…",550,[[]]],[11,"overflowing_add","","Calculates <code>self</code> + <code>rhs</code>",550,[[]]],[11,"overflowing_sub","","Calculates <code>self</code> - <code>rhs</code>",550,[[]]],[11,"overflowing_mul","","Calculates the multiplication of <code>self</code> and <code>rhs</code>.",550,[[]]],[11,"overflowing_div","","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.",550,[[]]],[11,"overflowing_div_euclid","","Calculates the quotient of Euclidean division …",550,[[]]],[11,"overflowing_rem","","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.",550,[[]]],[11,"overflowing_rem_euclid","","Overflowing Euclidean remainder. Calculates …",550,[[]]],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum …",550,[[]]],[11,"overflowing_shl","","Shifts self left by <code>rhs</code> bits.",550,[[]]],[11,"overflowing_shr","","Shifts self right by <code>rhs</code> bits.",550,[[]]],[11,"overflowing_abs","","Computes the absolute value of <code>self</code>.",550,[[]]],[11,"overflowing_pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",550,[[]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",550,[[]]],[11,"div_euclid","","Calculates the quotient of Euclidean division of <code>self</code> by …",550,[[]]],[11,"rem_euclid","","Calculates the least nonnegative remainder of …",550,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>.",550,[[]]],[11,"signum","","Returns a number representing sign of <code>self</code>.",550,[[]]],[11,"is_positive","","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …",550,[[]]],[11,"is_negative","","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …",550,[[]]],[11,"to_be_bytes","","Return the memory representation of this integer as a …",550,[[]]],[11,"to_le_bytes","","Return the memory representation of this integer as a …",550,[[]]],[11,"to_ne_bytes","","Return the memory representation of this integer as a …",550,[[]]],[11,"as_ne_bytes","","Return the memory representation of this integer as a …",550,[[]]],[11,"from_be_bytes","","Create an integer value from its representation as a byte …",550,[[]]],[11,"from_le_bytes","","Create an integer value from its representation as a byte …",550,[[]]],[11,"from_ne_bytes","","Create an integer value from its memory representation as …",550,[[]]],[11,"min_value","","<strong>This method is soft-deprecated.</strong>",550,[[]]],[11,"max_value","","<strong>This method is soft-deprecated.</strong>",550,[[]]],[11,"from","","",550,[[]]],[11,"borrow","","",550,[[]]],[11,"borrow_mut","","",550,[[]]],[11,"try_from","","",550,[[],["result",4]]],[11,"into","","",550,[[]]],[11,"try_into","","",550,[[],["result",4]]],[11,"type_id","","",550,[[],["typeid",3]]],[11,"to_owned","","",550,[[]]],[11,"clone_into","","",550,[[]]],[11,"to_string","","",550,[[],["string",3]]],[11,"is_ascii","","",542,[[]]],[11,"to_ascii_uppercase","","",542,[[]]],[11,"to_ascii_lowercase","","",542,[[]]],[11,"eq_ignore_ascii_case","","",542,[[]]],[11,"make_ascii_uppercase","","",542,[[]]],[11,"make_ascii_lowercase","","",542,[[]]],[11,"is_ascii","","",564,[[]]],[11,"to_ascii_uppercase","","",564,[[]]],[11,"to_ascii_lowercase","","",564,[[]]],[11,"eq_ignore_ascii_case","","",564,[[]]],[11,"make_ascii_uppercase","","",564,[[]]],[11,"make_ascii_lowercase","","",564,[[]]],[11,"is_ascii","","",557,[[]]],[11,"to_ascii_uppercase","","",557,[[]]],[11,"to_ascii_lowercase","","",557,[[]]],[11,"eq_ignore_ascii_case","","",557,[[]]],[11,"make_ascii_uppercase","","",557,[[]]],[11,"make_ascii_lowercase","","",557,[[]]],[11,"is_ascii","","",560,[[]]],[11,"to_ascii_uppercase","","",560,[[]]],[11,"to_ascii_lowercase","","",560,[[]]],[11,"eq_ignore_ascii_case","","",560,[[]]],[11,"make_ascii_uppercase","","",560,[[]]],[11,"make_ascii_lowercase","","",560,[[]]],[11,"description","std::env","",108,[[]]],[11,"description","","",425,[[]]],[11,"description","std::str","",256,[[]]],[11,"description","","",260,[[]]],[11,"description","std::num","",469,[[]]],[11,"description","","",470,[[]]],[11,"description","std::array","",283,[[]]],[11,"description","std::num","",468,[[]]],[11,"description","std::string","",274,[[]]],[11,"description","","",275,[[]]],[11,"description","std::convert","",301,[[]]],[11,"description","std::char","",300,[[]]],[11,"description","std::boxed","",213,[[]]],[11,"cause","","",213,[[],[["error",8],["option",4]]]],[11,"source","","",213,[[],[["option",4],["error",8]]]],[11,"description","std::fmt","",214,[[]]],[11,"description","std::cell","",287,[[]]],[11,"description","","",288,[[]]],[11,"description","std::char","",297,[[]]],[11,"description","","",298,[[]]],[11,"description","std::ffi","",434,[[]]],[11,"description","","",435,[[]]],[11,"description","","",437,[[]]],[11,"source","","",437,[[],[["option",4],["error",8]]]],[11,"description","std::io","",444,[[]]],[11,"description","","",446,[[]]],[11,"cause","","",446,[[],[["option",4],["error",8]]]],[11,"source","","",446,[[],[["option",4],["error",8]]]],[11,"description","std::net","",463,[[]]],[11,"description","std::path","",491,[[]]],[11,"description","std::sync::mpsc","",187,[[]]],[11,"description","","",190,[[]]],[11,"description","","",515,[[]]],[11,"description","","",188,[[]]],[11,"description","","",189,[[]]],[11,"description","std::time","",197,[[]]],[11,"description","std::sync","",204,[[]]],[11,"description","","",194,[[]]],[11,"cause","","",194,[[],[["error",8],["option",4]]]],[11,"read","std::fs","",110,[[],["result",6]]],[11,"read_vectored","","",110,[[],["result",6]]],[11,"is_read_vectored","","",110,[[]]],[11,"initializer","","",110,[[],["initializer",3]]],[11,"read","std::io","",441,[[],["result",6]]],[11,"read_vectored","","",441,[[],["result",6]]],[11,"is_read_vectored","","",441,[[]]],[11,"initializer","","",441,[[],["initializer",3]]],[11,"read","","",445,[[],["result",6]]],[11,"read_vectored","","",445,[[],["result",6]]],[11,"is_read_vectored","","",445,[[]]],[11,"read_exact","","",445,[[],["result",6]]],[11,"initializer","","",445,[[],["initializer",3]]],[11,"read","std","",541,[[],["result",6]]],[11,"read_vectored","","",541,[[],["result",6]]],[11,"is_read_vectored","","",541,[[]]],[11,"initializer","","",541,[[],["initializer",3]]],[11,"read_to_end","","",541,[[["vec",3]],["result",6]]],[11,"read_to_string","","",541,[[["string",3]],["result",6]]],[11,"read_exact","","",541,[[],["result",6]]],[11,"read","std::boxed","",213,[[],["result",6]]],[11,"read_vectored","","",213,[[],["result",6]]],[11,"is_read_vectored","","",213,[[]]],[11,"initializer","","",213,[[],["initializer",3]]],[11,"read_to_end","","",213,[[["vec",3]],["result",6]]],[11,"read_to_string","","",213,[[["string",3]],["result",6]]],[11,"read_exact","","",213,[[],["result",6]]],[11,"read","std","",557,[[],["result",6]]],[11,"read_vectored","","",557,[[],["result",6]]],[11,"is_read_vectored","","",557,[[]]],[11,"initializer","","",557,[[],["initializer",3]]],[11,"read_exact","","",557,[[],["result",6]]],[11,"read_to_end","","",557,[[["vec",3]],["result",6]]],[11,"read","std::io","",447,[[],["result",6]]],[11,"read_vectored","","",447,[[],["result",6]]],[11,"is_read_vectored","","",447,[[]]],[11,"initializer","","",447,[[],["initializer",3]]],[11,"read_to_end","","",447,[[["vec",3]],["result",6]]],[11,"read_to_string","","",447,[[["string",3]],["result",6]]],[11,"read_exact","","",447,[[],["result",6]]],[11,"read","","",448,[[],["result",6]]],[11,"read_vectored","","",448,[[],["result",6]]],[11,"is_read_vectored","","",448,[[]]],[11,"initializer","","",448,[[],["initializer",3]]],[11,"read_to_end","","",448,[[["vec",3]],["result",6]]],[11,"read_to_string","","",448,[[["string",3]],["result",6]]],[11,"read_exact","","",448,[[],["result",6]]],[11,"read","","",453,[[],["result",6]]],[11,"initializer","","",453,[[],["initializer",3]]],[11,"read","","",454,[[],["result",6]]],[11,"read_vectored","","",454,[[],["result",6]]],[11,"is_read_vectored","","",454,[[]]],[11,"initializer","","",454,[[],["initializer",3]]],[11,"read","","",126,[[],["result",6]]],[11,"read_vectored","","",126,[[],["result",6]]],[11,"initializer","","",126,[[],["initializer",3]]],[11,"read","","",127,[[],["result",6]]],[11,"initializer","","",127,[[],["initializer",3]]],[11,"read_to_end","","",127,[[["vec",3]],["result",6]]],[11,"read","std::net","",464,[[],["result",6]]],[11,"read_vectored","","",464,[[],["result",6]]],[11,"is_read_vectored","","",464,[[]]],[11,"initializer","","",464,[[],["initializer",3]]],[11,"read","std::process","",495,[[],["result",6]]],[11,"read_vectored","","",495,[[],["result",6]]],[11,"is_read_vectored","","",495,[[]]],[11,"initializer","","",495,[[],["initializer",3]]],[11,"read","","",496,[[],["result",6]]],[11,"read_vectored","","",496,[[],["result",6]]],[11,"is_read_vectored","","",496,[[]]],[11,"initializer","","",496,[[],["initializer",3]]],[11,"read","std::os::unix::net","",210,[[],["result",6]]],[11,"read_vectored","","",210,[[],["result",6]]],[11,"is_read_vectored","","",210,[[]]],[11,"initializer","","",210,[[],["initializer",3]]],[11,"write","std::fs","",110,[[],["result",6]]],[11,"write_vectored","","",110,[[],["result",6]]],[11,"is_write_vectored","","",110,[[]]],[11,"flush","","",110,[[],["result",6]]],[11,"write","std::io","",442,[[],["result",6]]],[11,"write_all","","",442,[[],["result",6]]],[11,"write_vectored","","",442,[[],["result",6]]],[11,"is_write_vectored","","",442,[[]]],[11,"flush","","",442,[[],["result",6]]],[11,"write","","",443,[[],["result",6]]],[11,"flush","","",443,[[],["result",6]]],[11,"write_vectored","","",443,[[],["result",6]]],[11,"is_write_vectored","","",443,[[]]],[11,"write_all","","",443,[[],["result",6]]],[11,"write_all_vectored","","",443,[[],["result",6]]],[11,"write_fmt","","",443,[[["arguments",3]],["result",6]]],[11,"write","","",445,[[],["result",6]]],[11,"write_vectored","","",445,[[],["result",6]]],[11,"is_write_vectored","","",445,[[]]],[11,"flush","","",445,[[],["result",6]]],[11,"write","","",445,[[],["result",6]]],[11,"write_vectored","","",445,[[],["result",6]]],[11,"is_write_vectored","","",445,[[]]],[11,"flush","","",445,[[],["result",6]]],[11,"write","","",445,[[],["result",6]]],[11,"write_vectored","","",445,[[],["result",6]]],[11,"is_write_vectored","","",445,[[]]],[11,"flush","","",445,[[],["result",6]]],[11,"write","","",445,[[],["result",6]]],[11,"write_vectored","","",445,[[],["result",6]]],[11,"is_write_vectored","","",445,[[]]],[11,"flush","","",445,[[],["result",6]]],[11,"write","std","",541,[[],["result",6]]],[11,"write_vectored","","",541,[[],["result",6]]],[11,"is_write_vectored","","",541,[[]]],[11,"flush","","",541,[[],["result",6]]],[11,"write_all","","",541,[[],["result",6]]],[11,"write_fmt","","",541,[[["arguments",3]],["result",6]]],[11,"write","std::boxed","",213,[[],["result",6]]],[11,"write_vectored","","",213,[[],["result",6]]],[11,"is_write_vectored","","",213,[[]]],[11,"flush","","",213,[[],["result",6]]],[11,"write_all","","",213,[[],["result",6]]],[11,"write_fmt","","",213,[[["arguments",3]],["result",6]]],[11,"write","std","",557,[[],["result",6]]],[11,"write_vectored","","",557,[[],["result",6]]],[11,"is_write_vectored","","",557,[[]]],[11,"write_all","","",557,[[],["result",6]]],[11,"flush","","",557,[[],["result",6]]],[11,"write","std::vec","",277,[[],["result",6]]],[11,"write_vectored","","",277,[[],["result",6]]],[11,"is_write_vectored","","",277,[[]]],[11,"write_all","","",277,[[],["result",6]]],[11,"flush","","",277,[[],["result",6]]],[11,"write","std::io","",449,[[],["result",6]]],[11,"write_vectored","","",449,[[],["result",6]]],[11,"is_write_vectored","","",449,[[]]],[11,"flush","","",449,[[],["result",6]]],[11,"write_all","","",449,[[],["result",6]]],[11,"write_all_vectored","","",449,[[],["result",6]]],[11,"write_fmt","","",449,[[["arguments",3]],["result",6]]],[11,"write","","",450,[[],["result",6]]],[11,"write_vectored","","",450,[[],["result",6]]],[11,"is_write_vectored","","",450,[[]]],[11,"flush","","",450,[[],["result",6]]],[11,"write_all","","",450,[[],["result",6]]],[11,"write_all_vectored","","",450,[[],["result",6]]],[11,"write","","",451,[[],["result",6]]],[11,"write_vectored","","",451,[[],["result",6]]],[11,"is_write_vectored","","",451,[[]]],[11,"flush","","",451,[[],["result",6]]],[11,"write_all","","",451,[[],["result",6]]],[11,"write_all_vectored","","",451,[[],["result",6]]],[11,"write_fmt","","",451,[[["arguments",3]],["result",6]]],[11,"write","","",452,[[],["result",6]]],[11,"write_vectored","","",452,[[],["result",6]]],[11,"is_write_vectored","","",452,[[]]],[11,"flush","","",452,[[],["result",6]]],[11,"write_all","","",452,[[],["result",6]]],[11,"write_all_vectored","","",452,[[],["result",6]]],[11,"write","","",455,[[],["result",6]]],[11,"write_vectored","","",455,[[],["result",6]]],[11,"is_write_vectored","","",455,[[]]],[11,"flush","","",455,[[],["result",6]]],[11,"write","std::net","",464,[[],["result",6]]],[11,"write_vectored","","",464,[[],["result",6]]],[11,"is_write_vectored","","",464,[[]]],[11,"flush","","",464,[[],["result",6]]],[11,"write","std::process","",494,[[],["result",6]]],[11,"write_vectored","","",494,[[],["result",6]]],[11,"is_write_vectored","","",494,[[]]],[11,"flush","","",494,[[],["result",6]]],[11,"write","std::os::unix::net","",210,[[],["result",6]]],[11,"write_vectored","","",210,[[],["result",6]]],[11,"is_write_vectored","","",210,[[]]],[11,"flush","","",210,[[],["result",6]]],[11,"seek","std::fs","",110,[[["seekfrom",4]],["result",6]]],[11,"seek","std::io","Seek to an offset, in bytes, in the underlying reader.",441,[[["seekfrom",4]],["result",6]]],[11,"stream_position","","Returns the current seek position from the start of the …",441,[[],["result",6]]],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",442,[[["seekfrom",4]],["result",6]]],[11,"seek","","",445,[[["seekfrom",4]],["result",6]]],[11,"stream_len","","",445,[[],["result",6]]],[11,"stream_position","","",445,[[],["result",6]]],[11,"seek","std","",541,[[["seekfrom",4]],["result",6]]],[11,"seek","std::boxed","",213,[[["seekfrom",4]],["result",6]]],[11,"fill_buf","std::io","",441,[[],["result",6]]],[11,"consume","","",441,[[]]],[11,"fill_buf","","",445,[[],["result",6]]],[11,"consume","","",445,[[]]],[11,"fill_buf","std","",541,[[],["result",6]]],[11,"consume","","",541,[[]]],[11,"read_until","","",541,[[["vec",3]],["result",6]]],[11,"read_line","","",541,[[["string",3]],["result",6]]],[11,"fill_buf","std::boxed","",213,[[],["result",6]]],[11,"consume","","",213,[[]]],[11,"read_until","","",213,[[["vec",3]],["result",6]]],[11,"read_line","","",213,[[["string",3]],["result",6]]],[11,"fill_buf","std","",557,[[],["result",6]]],[11,"consume","","",557,[[]]],[11,"fill_buf","std::io","",448,[[],["result",6]]],[11,"consume","","",448,[[]]],[11,"read_until","","",448,[[["vec",3]],["result",6]]],[11,"read_line","","",448,[[["string",3]],["result",6]]],[11,"fill_buf","","",453,[[],["result",6]]],[11,"consume","","",453,[[]]],[11,"fill_buf","","",126,[[],["result",6]]],[11,"consume","","",126,[[]]],[11,"fill_buf","","",127,[[],["result",6]]],[11,"consume","","",127,[[]]],[11,"to_socket_addrs","std::net","",128,[[],[["intoiter",3],["result",6]]]],[11,"to_socket_addrs","","",459,[[],[["intoiter",3],["result",6]]]],[11,"to_socket_addrs","","",460,[[],[["intoiter",3],["result",6]]]],[11,"to_socket_addrs","std","",562,[[],[["intoiter",3],["result",6]]]],[11,"to_socket_addrs","","",562,[[],[["intoiter",3],["result",6]]]],[11,"to_socket_addrs","","",562,[[],[["intoiter",3],["result",6]]]],[11,"to_socket_addrs","","",562,[[],[["intoiter",3],["result",6]]]],[11,"to_socket_addrs","","",562,[[],[["intoiter",3],["result",6]]]],[11,"to_socket_addrs","","",560,[[],[["intoiter",3],["result",6]]]],[11,"to_socket_addrs","","",557,[[],["result",6]]],[11,"to_socket_addrs","","",541,[[],["result",6]]],[11,"to_socket_addrs","std::string","",273,[[],[["intoiter",3],["result",6]]]],[11,"report","std","",556,[[]]],[11,"report","std::result","",95,[[]]],[11,"report","std","",563,[[]]],[11,"report","std::result","",95,[[]]],[11,"report","std::process","",184,[[]]],[11,"from_vec","std::ffi","",438,[[["vec",3]],["osstring",3]]],[11,"into_vec","","",438,[[],["vec",3]]],[11,"from_bytes","","",439,[[],["osstr",3]]],[11,"as_bytes","","",439,[[]]],[11,"as_raw_stat","std::fs","",112,[[],["stat",3]]],[11,"st_dev","","",112,[[]]],[11,"st_ino","","",112,[[]]],[11,"st_mode","","",112,[[]]],[11,"st_nlink","","",112,[[]]],[11,"st_uid","","",112,[[]]],[11,"st_gid","","",112,[[]]],[11,"st_rdev","","",112,[[]]],[11,"st_size","","",112,[[]]],[11,"st_atime","","",112,[[]]],[11,"st_atime_nsec","","",112,[[]]],[11,"st_mtime","","",112,[[]]],[11,"st_mtime_nsec","","",112,[[]]],[11,"st_ctime","","",112,[[]]],[11,"st_ctime_nsec","","",112,[[]]],[11,"st_blksize","","",112,[[]]],[11,"st_blocks","","",112,[[]]],[11,"read_at","","",110,[[],["result",6]]],[11,"write_at","","",110,[[],["result",6]]],[11,"mode","","",113,[[]]],[11,"set_mode","","",113,[[]]],[11,"from_mode","","",113,[[],["permissions",3]]],[11,"mode","","",111,[[],["openoptions",3]]],[11,"custom_flags","","",111,[[],["openoptions",3]]],[11,"dev","","",112,[[]]],[11,"ino","","",112,[[]]],[11,"mode","","",112,[[]]],[11,"nlink","","",112,[[]]],[11,"uid","","",112,[[]]],[11,"gid","","",112,[[]]],[11,"rdev","","",112,[[]]],[11,"size","","",112,[[]]],[11,"atime","","",112,[[]]],[11,"atime_nsec","","",112,[[]]],[11,"mtime","","",112,[[]]],[11,"mtime_nsec","","",112,[[]]],[11,"ctime","","",112,[[]]],[11,"ctime_nsec","","",112,[[]]],[11,"blksize","","",112,[[]]],[11,"blocks","","",112,[[]]],[11,"is_block_device","","",114,[[]]],[11,"is_char_device","","",114,[[]]],[11,"is_fifo","","",114,[[]]],[11,"is_socket","","",114,[[]]],[11,"ino","","",115,[[]]],[11,"mode","","",116,[[],["dirbuilder",3]]],[11,"as_raw_fd","std","",566,[[],["rawfd",6]]],[11,"as_raw_fd","std::fs","",110,[[],["rawfd",6]]],[11,"as_raw_fd","std::io","",447,[[],["rawfd",6]]],[11,"as_raw_fd","","",449,[[],["rawfd",6]]],[11,"as_raw_fd","","",451,[[],["rawfd",6]]],[11,"as_raw_fd","","",448,[[],["rawfd",6]]],[11,"as_raw_fd","","",450,[[],["rawfd",6]]],[11,"as_raw_fd","","",452,[[],["rawfd",6]]],[11,"as_raw_fd","std::os::unix::net","",208,[[],["rawfd",6]]],[11,"as_raw_fd","","",209,[[],["rawfd",6]]],[11,"as_raw_fd","std::net","",464,[[],["rawfd",6]]],[11,"as_raw_fd","","",465,[[],["rawfd",6]]],[11,"as_raw_fd","","",467,[[],["rawfd",6]]],[11,"as_raw_fd","std::os::unix::net","",210,[[],["rawfd",6]]],[11,"as_raw_fd","std::process","",494,[[],["rawfd",6]]],[11,"as_raw_fd","","",495,[[],["rawfd",6]]],[11,"as_raw_fd","","",496,[[],["rawfd",6]]],[11,"from_raw_fd","std","",566,[[["rawfd",6]],["rawfd",6]]],[11,"from_raw_fd","std::fs","",110,[[["rawfd",6]],["file",3]]],[11,"from_raw_fd","std::os::unix::net","",208,[[["rawfd",6]],["unixdatagram",3]]],[11,"from_raw_fd","","",209,[[["rawfd",6]],["unixlistener",3]]],[11,"from_raw_fd","std::net","",464,[[["rawfd",6]],["tcpstream",3]]],[11,"from_raw_fd","","",465,[[["rawfd",6]],["tcplistener",3]]],[11,"from_raw_fd","","",467,[[["rawfd",6]],["udpsocket",3]]],[11,"from_raw_fd","std::os::unix::net","",210,[[["rawfd",6]],["unixstream",3]]],[11,"from_raw_fd","std::process","",182,[[["rawfd",6]],["stdio",3]]],[11,"into_raw_fd","std","",566,[[],["rawfd",6]]],[11,"into_raw_fd","std::fs","",110,[[],["rawfd",6]]],[11,"into_raw_fd","std::os::unix::net","",208,[[],["rawfd",6]]],[11,"into_raw_fd","","",209,[[],["rawfd",6]]],[11,"into_raw_fd","std::net","",464,[[],["rawfd",6]]],[11,"into_raw_fd","","",465,[[],["rawfd",6]]],[11,"into_raw_fd","","",467,[[],["rawfd",6]]],[11,"into_raw_fd","std::os::unix::net","",210,[[],["rawfd",6]]],[11,"into_raw_fd","std::process","",494,[[],["rawfd",6]]],[11,"into_raw_fd","","",495,[[],["rawfd",6]]],[11,"into_raw_fd","","",496,[[],["rawfd",6]]],[11,"uid","","",180,[[],["command",3]]],[11,"gid","","",180,[[],["command",3]]],[11,"pre_exec","","",180,[[],["command",3]]],[11,"exec","","",180,[[],["error",3]]],[11,"arg0","","",180,[[],["command",3]]],[11,"from_raw","","",183,[[]]],[11,"signal","","",183,[[],["option",4]]],[11,"as_pthread_t","std::thread","",99,[[],["rawpthread",6]]],[11,"into_pthread_t","","",99,[[],["rawpthread",6]]],[11,"from_wide","std::ffi","",438,[[],["osstring",3]]],[11,"encode_wide","","",439,[[],["encodewide",3]]],[11,"seek_read","std::fs","",110,[[],["result",6]]],[11,"seek_write","","",110,[[],["result",6]]],[11,"access_mode","","",111,[[],["openoptions",3]]],[11,"share_mode","","",111,[[],["openoptions",3]]],[11,"custom_flags","","",111,[[],["openoptions",3]]],[11,"attributes","","",111,[[],["openoptions",3]]],[11,"security_qos_flags","","",111,[[],["openoptions",3]]],[11,"file_attributes","","",112,[[]]],[11,"creation_time","","",112,[[]]],[11,"last_access_time","","",112,[[]]],[11,"last_write_time","","",112,[[]]],[11,"file_size","","",112,[[]]],[11,"volume_serial_number","","",112,[[],["option",4]]],[11,"number_of_links","","",112,[[],["option",4]]],[11,"file_index","","",112,[[],["option",4]]],[11,"is_symlink_dir","","",114,[[]]],[11,"is_symlink_file","","",114,[[]]],[11,"as_raw_handle","","",110,[[],["rawhandle",6]]],[11,"as_raw_handle","std::io","",447,[[],["rawhandle",6]]],[11,"as_raw_handle","","",449,[[],["rawhandle",6]]],[11,"as_raw_handle","","",451,[[],["rawhandle",6]]],[11,"as_raw_handle","","",448,[[],["rawhandle",6]]],[11,"as_raw_handle","","",450,[[],["rawhandle",6]]],[11,"as_raw_handle","","",452,[[],["rawhandle",6]]],[11,"as_raw_handle","std::process","",179,[[],["rawhandle",6]]],[11,"as_raw_handle","","",494,[[],["rawhandle",6]]],[11,"as_raw_handle","","",495,[[],["rawhandle",6]]],[11,"as_raw_handle","","",496,[[],["rawhandle",6]]],[11,"as_raw_handle","std::thread","",99,[[],["rawhandle",6]]],[11,"from_raw_handle","std::fs","",110,[[["rawhandle",6]],["file",3]]],[11,"from_raw_handle","std::process","",182,[[["rawhandle",6]],["stdio",3]]],[11,"into_raw_handle","std::fs","",110,[[],["rawhandle",6]]],[11,"into_raw_handle","std::process","",179,[[],["rawhandle",6]]],[11,"into_raw_handle","","",494,[[],["rawhandle",6]]],[11,"into_raw_handle","","",495,[[],["rawhandle",6]]],[11,"into_raw_handle","","",496,[[],["rawhandle",6]]],[11,"into_raw_handle","std::thread","",99,[[],["rawhandle",6]]],[11,"as_raw_socket","std::net","",464,[[],["rawsocket",6]]],[11,"as_raw_socket","","",465,[[],["rawsocket",6]]],[11,"as_raw_socket","","",467,[[],["rawsocket",6]]],[11,"from_raw_socket","","",464,[[["rawsocket",6]],["tcpstream",3]]],[11,"from_raw_socket","","",465,[[["rawsocket",6]],["tcplistener",3]]],[11,"from_raw_socket","","",467,[[["rawsocket",6]],["udpsocket",3]]],[11,"into_raw_socket","","",464,[[],["rawsocket",6]]],[11,"into_raw_socket","","",465,[[],["rawsocket",6]]],[11,"into_raw_socket","","",467,[[],["rawsocket",6]]],[11,"from_raw","std::process","",183,[[]]],[11,"creation_flags","","",180,[[],["command",3]]],[11,"deref","std::ffi","",432,[[],["cstr",3]]],[11,"deref","","",438,[[],["osstr",3]]],[11,"deref","std::io","",119,[[]]],[11,"deref","","",120,[[]]],[11,"deref","std::panic","",171,[[]]],[11,"deref","std::path","",177,[[],["path",3]]],[11,"deref","std::sync","",521,[[]]],[11,"deref","","",525,[[]]],[11,"deref","","",526,[[]]],[11,"deref","std::lazy","",199,[[]]],[11,"deref_mut","std::ffi","",438,[[],["osstr",3]]],[11,"deref_mut","std::io","",119,[[]]],[11,"deref_mut","std::panic","",171,[[]]],[11,"deref_mut","std::sync","",521,[[]]],[11,"deref_mut","","",526,[[]]],[11,"from","std::boxed","Converts a type of [<code>Error</code>] into a box of dyn [<code>Error</code>].",213,[[],[["error",8],["box",3]]]],[11,"from","","Converts a type of [<code>Error</code>] + [<code>Send</code>] + [<code>Sync</code>] into a box of…",213,[[],[["error",8],["box",3]]]],[11,"from","","Converts a [<code>String</code>] into a box of dyn [<code>Error</code>] + [<code>Send</code>] + […",213,[[["string",3]],[["error",8],["box",3]]]],[11,"from","","Converts a [<code>String</code>] into a box of dyn [<code>Error</code>].",213,[[["string",3]],[["box",3],["error",8]]]],[11,"from","","Converts a <code>str</code> into a box of dyn [<code>Error</code>] + [<code>Send</code>] + [<code>Sync</code>]…",213,[[],[["error",8],["box",3]]]],[11,"from","","Converts a <code>str</code> into a box of dyn [<code>Error</code>].",213,[[],[["box",3],["error",8]]]],[11,"from","","Converts a [<code>Cow</code>] into a box of dyn [<code>Error</code>] + [<code>Send</code>] + […",213,[[["cow",4]],[["error",8],["box",3]]]],[11,"from","","Converts a [<code>Cow</code>] into a box of dyn [<code>Error</code>].",213,[[["cow",4]],[["box",3],["error",8]]]],[11,"from","std::vec","Converts a [<code>CString</code>] into a [<code>Vec</code>]<code><u8></code>.",277,[[["cstring",3]],["vec",3]]],[11,"from","std::ffi","",432,[[["cstr",3],["cow",4]]]],[11,"from","std::boxed","",213,[[["cstr",3]],[["cstr",3],["box",3]]]],[11,"from","","",213,[[["cstr",3],["cow",4]],[["cstr",3],["box",3]]]],[11,"from","std::ffi","Converts a [<code>Box</code>]<code><CStr></code> into a [<code>CString</code>] without copying …",432,[[["cstr",3],["box",3]],["cstring",3]]],[11,"from","","Converts a [<code>Vec</code>]<code><</code>[<code>NonZeroU8</code>]<code>></code> into a [<code>CString</code>] without …",432,[[["nonzerou8",3],["vec",3]],["cstring",3]]],[11,"from","std::boxed","Converts a [<code>CString</code>] into a [<code>Box</code>]<code><CStr></code> without copying …",213,[[["cstring",3]],[["cstr",3],["box",3]]]],[11,"from","std::borrow","",1,[[["cstring",3]],[["cstr",3],["cow",4]]]],[11,"from","","",1,[[["cstr",3]],[["cstr",3],["cow",4]]]],[11,"from","","",1,[[["cstring",3]],[["cstr",3],["cow",4]]]],[11,"from","std::sync","Converts a [<code>CString</code>] into a [<code>Arc</code>]<code><CStr></code> without copying …",498,[[["cstring",3]],[["cstr",3],["arc",3]]]],[11,"from","","",498,[[["cstr",3]],[["cstr",3],["arc",3]]]],[11,"from","std::rc","Converts a [<code>CString</code>] into a [<code>Rc</code>]<code><CStr></code> without copying or …",222,[[["cstring",3]],[["cstr",3],["rc",3]]]],[11,"from","","",222,[[["cstr",3]],[["cstr",3],["rc",3]]]],[11,"from","std::io","Converts a [<code>NulError</code>] into a [<code>io::Error</code>].",446,[[["nulerror",3]],["error",3]]],[11,"from","std::ffi","",432,[[["cstr",3]],["cstring",3]]],[11,"from","","Converts a [<code>String</code>] into a [<code>OsString</code>].",438,[[["string",3]],["osstring",3]]],[11,"from","","",438,[[],["osstring",3]]],[11,"from","std::boxed","",213,[[["osstr",3]],[["box",3],["osstr",3]]]],[11,"from","","",213,[[["cow",4],["osstr",3]],[["box",3],["osstr",3]]]],[11,"from","std::ffi","Converts a [<code>Box</code>]<code><</code>[<code>OsStr</code>]<code>></code> into a <code>OsString</code> without copying …",438,[[["box",3],["osstr",3]],["osstring",3]]],[11,"from","std::boxed","Converts a [<code>OsString</code>] into a [<code>Box</code>]<code><OsStr></code> without copying …",213,[[["osstring",3]],[["box",3],["osstr",3]]]],[11,"from","std::sync","Converts a [<code>OsString</code>] into a [<code>Arc</code>]<code><OsStr></code> without copying …",498,[[["osstring",3]],[["osstr",3],["arc",3]]]],[11,"from","","",498,[[["osstr",3]],[["osstr",3],["arc",3]]]],[11,"from","std::rc","Converts a [<code>OsString</code>] into a [<code>Rc</code>]<code><OsStr></code> without copying …",222,[[["osstring",3]],[["rc",3],["osstr",3]]]],[11,"from","","",222,[[["osstr",3]],[["rc",3],["osstr",3]]]],[11,"from","std::borrow","",1,[[["osstring",3]],[["cow",4],["osstr",3]]]],[11,"from","","",1,[[["osstr",3]],[["cow",4],["osstr",3]]]],[11,"from","","",1,[[["osstring",3]],[["cow",4],["osstr",3]]]],[11,"from","std::ffi","",438,[[["cow",4],["osstr",3]]]],[11,"from","std::io","",446,[[["intoinnererror",3]],["error",3]]],[11,"from","","Converts an [<code>ErrorKind</code>] into an [<code>Error</code>].",446,[[["errorkind",4]],["error",3]]],[11,"from","std::net","Converts a [<code>SocketAddrV4</code>] into a [<code>SocketAddr::V4</code>].",128,[[["socketaddrv4",3]],["socketaddr",4]]],[11,"from","","Converts a [<code>SocketAddrV6</code>] into a [<code>SocketAddr::V6</code>].",128,[[["socketaddrv6",3]],["socketaddr",4]]],[11,"from","","Converts a tuple struct (Into<[<code>IpAddr</code>]>, <code>u16</code>) into a […",128,[[],["socketaddr",4]]],[11,"from","","Copies this address to a new <code>IpAddr::V4</code>.",130,[[["ipv4addr",3]],["ipaddr",4]]],[11,"from","","Copies this address to a new <code>IpAddr::V6</code>.",130,[[["ipv6addr",3]],["ipaddr",4]]],[11,"from","std","Converts an <code>Ipv4Addr</code> into a host byte order <code>u32</code>.",547,[[["ipv4addr",3]]]],[11,"from","std::net","Converts a host byte order <code>u32</code> into an <code>Ipv4Addr</code>.",461,[[],["ipv4addr",3]]],[11,"from","","Creates an <code>Ipv4Addr</code> from a four element byte array.",461,[[],["ipv4addr",3]]],[11,"from","","Creates an <code>IpAddr::V4</code> from a four element byte array.",130,[[],["ipaddr",4]]],[11,"from","std","Convert an <code>Ipv6Addr</code> into a host byte order <code>u128</code>.",546,[[["ipv6addr",3]]]],[11,"from","std::net","Convert a host byte order <code>u128</code> into an <code>Ipv6Addr</code>.",462,[[],["ipv6addr",3]]],[11,"from","","Creates an <code>Ipv6Addr</code> from a sixteen element byte array.",462,[[],["ipv6addr",3]]],[11,"from","","Creates an <code>Ipv6Addr</code> from an eight element 16-bit array.",462,[[],["ipv6addr",3]]],[11,"from","","Creates an <code>IpAddr::V6</code> from a sixteen element byte array.",130,[[],["ipaddr",4]]],[11,"from","","Creates an <code>IpAddr::V6</code> from an eight element 16-bit array.",130,[[],["ipaddr",4]]],[11,"from","std::boxed","",213,[[["path",3]],[["path",3],["box",3]]]],[11,"from","","",213,[[["path",3],["cow",4]],[["path",3],["box",3]]]],[11,"from","std::path","Converts a <code>Box<Path></code> into a <code>PathBuf</code>",177,[[["path",3],["box",3]],["pathbuf",3]]],[11,"from","std::boxed","Converts a <code>PathBuf</code> into a <code>Box<Path></code>",213,[[["pathbuf",3]],[["path",3],["box",3]]]],[11,"from","std::path","",177,[[],["pathbuf",3]]],[11,"from","","Converts a <code>OsString</code> into a <code>PathBuf</code>",177,[[["osstring",3]],["pathbuf",3]]],[11,"from","std::ffi","Converts a <code>PathBuf</code> into a <code>OsString</code>",438,[[["pathbuf",3]],["osstring",3]]],[11,"from","std::path","Converts a <code>String</code> into a <code>PathBuf</code>",177,[[["string",3]],["pathbuf",3]]],[11,"from","std::borrow","",1,[[["path",3]],[["path",3],["cow",4]]]],[11,"from","","",1,[[["pathbuf",3]],[["path",3],["cow",4]]]],[11,"from","","",1,[[["pathbuf",3]],[["path",3],["cow",4]]]],[11,"from","std::path","",177,[[["path",3],["cow",4]]]],[11,"from","std::sync","Converts a <code>PathBuf</code> into an <code>Arc</code> by moving the <code>PathBuf</code> data …",498,[[["pathbuf",3]],[["arc",3],["path",3]]]],[11,"from","","Converts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …",498,[[["path",3]],[["arc",3],["path",3]]]],[11,"from","std::rc","Converts a <code>PathBuf</code> into an <code>Rc</code> by moving the <code>PathBuf</code> data …",222,[[["pathbuf",3]],[["path",3],["rc",3]]]],[11,"from","","Converts a <code>Path</code> into an <code>Rc</code> by copying the <code>Path</code> data into …",222,[[["path",3]],[["path",3],["rc",3]]]],[11,"from","std::process","Converts a <code>ChildStdin</code> into a <code>Stdio</code>",182,[[["childstdin",3]],["stdio",3]]],[11,"from","","Converts a <code>ChildStdout</code> into a <code>Stdio</code>",182,[[["childstdout",3]],["stdio",3]]],[11,"from","","Converts a <code>ChildStderr</code> into a <code>Stdio</code>",182,[[["childstderr",3]],["stdio",3]]],[11,"from","","Converts a <code>File</code> into a <code>Stdio</code>",182,[[["file",3]],["stdio",3]]],[11,"from","std::sync::mpsc","Converts a <code>SendError<T></code> into a <code>TrySendError<T></code>.",190,[[["senderror",3]],["trysenderror",4]]],[11,"from","","Converts a <code>RecvError</code> into a <code>TryRecvError</code>.",188,[[["recverror",3]],["tryrecverror",4]]],[11,"from","","Converts a <code>RecvError</code> into a <code>RecvTimeoutError</code>.",189,[[["recverror",3]],["recvtimeouterror",4]]],[11,"from","std::sync","Creates a new mutex in an unlocked state ready for use. …",520,[[]]],[11,"from","","Creates a new instance of an <code>RwLock<T></code> which is unlocked. …",524,[[]]],[11,"from","std::lazy","",198,[[]]],[11,"from","std::sync","",194,[[["poisonerror",3]],["trylockerror",4]]],[11,"fmt","std::thread","",349,[[["formatter",3]],["result",6]]],[11,"fmt","","",350,[[["formatter",3]],["result",6]]],[11,"fmt","","",96,[[["formatter",3]],["result",6]]],[11,"fmt","","",97,[[["formatter",3]],["result",6]]],[11,"fmt","","",98,[[["formatter",3]],["result",6]]],[11,"fmt","","",99,[[["formatter",3]],["result",6]]],[11,"fmt","std::backtrace","",101,[[["formatter",3]],["result",6]]],[11,"fmt","","",102,[[["formatter",3]],["result",6]]],[11,"fmt","std::collections::hash_map","",394,[[["formatter",3]],["result",6]]],[11,"fmt","","",395,[[["formatter",3]],["result",6]]],[11,"fmt","","",398,[[["formatter",3]],["result",6]]],[11,"fmt","","",399,[[["formatter",3]],["result",6]]],[11,"fmt","","",405,[[["formatter",3]],["result",6]]],[11,"fmt","","",106,[[["formatter",3]],["result",6]]],[11,"fmt","","",406,[[["formatter",3]],["result",6]]],[11,"fmt","","",407,[[["formatter",3]],["result",6]]],[11,"fmt","","",408,[[["formatter",3]],["result",6]]],[11,"fmt","","",107,[[["formatter",3]],["result",6]]],[11,"fmt","","",409,[[["formatter",3]],["result",6]]],[11,"fmt","","",410,[[["formatter",3]],["result",6]]],[11,"fmt","","",396,[[["formatter",3]],["result",6]]],[11,"fmt","","",397,[[["formatter",3]],["result",6]]],[11,"fmt","","",402,[[["formatter",3]],["result",6]]],[11,"fmt","","",403,[[["formatter",3]],["result",6]]],[11,"fmt","","",404,[[["formatter",3]],["result",6]]],[11,"fmt","","",400,[[["formatter",3]],["result",6]]],[11,"fmt","","",401,[[["formatter",3]],["result",6]]],[11,"fmt","","",412,[[["formatter",3]],["result",6]]],[11,"fmt","","",411,[[["formatter",3]],["result",6]]],[11,"fmt","std::collections::hash_set","",413,[[["formatter",3]],["result",6]]],[11,"fmt","","",414,[[["formatter",3]],["result",6]]],[11,"fmt","","",415,[[["formatter",3]],["result",6]]],[11,"fmt","","",416,[[["formatter",3]],["result",6]]],[11,"fmt","","",417,[[["formatter",3]],["result",6]]],[11,"fmt","","",418,[[["formatter",3]],["result",6]]],[11,"fmt","","",419,[[["formatter",3]],["result",6]]],[11,"fmt","","",420,[[["formatter",3]],["result",6]]],[11,"fmt","","",421,[[["formatter",3]],["result",6]]],[11,"fmt","std::env","",422,[[["formatter",3]],["result",6]]],[11,"fmt","","",423,[[["formatter",3]],["result",6]]],[11,"fmt","","",108,[[["formatter",3]],["result",6]]],[11,"fmt","","",424,[[["formatter",3]],["result",6]]],[11,"fmt","","",425,[[["formatter",3]],["result",6]]],[11,"fmt","","",426,[[["formatter",3]],["result",6]]],[11,"fmt","","",427,[[["formatter",3]],["result",6]]],[11,"fmt","std::error","",428,[[["formatter",3]],["result",6]]],[11,"fmt","std::ffi","",434,[[["formatter",3]],["result",6]]],[11,"fmt","","",435,[[["formatter",3]],["result",6]]],[11,"fmt","","",436,[[["formatter",3]],["result",6]]],[11,"fmt","","",437,[[["formatter",3]],["result",6]]],[11,"fmt","","",432,[[["formatter",3]],["result",6]]],[11,"fmt","","",433,[[["formatter",3]],["result",6]]],[11,"fmt","","",438,[[["formatter",3]],["result",6]]],[11,"fmt","","",439,[[["formatter",3]],["result",6]]],[11,"fmt","std::fs","",440,[[["formatter",3]],["result",6]]],[11,"fmt","","",111,[[["formatter",3]],["result",6]]],[11,"fmt","","",113,[[["formatter",3]],["result",6]]],[11,"fmt","","",114,[[["formatter",3]],["result",6]]],[11,"fmt","","",116,[[["formatter",3]],["result",6]]],[11,"fmt","","",110,[[["formatter",3]],["result",6]]],[11,"fmt","","",112,[[["formatter",3]],["result",6]]],[11,"fmt","","",115,[[["formatter",3]],["result",6]]],[11,"fmt","std::io","",441,[[["formatter",3]],["result",6]]],[11,"fmt","","",442,[[["formatter",3]],["result",6]]],[11,"fmt","","",443,[[["formatter",3]],["result",6]]],[11,"fmt","","",444,[[["formatter",3]],["result",6]]],[11,"fmt","","",445,[[["formatter",3]],["result",6]]],[11,"fmt","","",446,[[["formatter",3]],["result",6]]],[11,"fmt","","",117,[[["formatter",3]],["result",6]]],[11,"fmt","","",447,[[["formatter",3]],["result",6]]],[11,"fmt","","",448,[[["formatter",3]],["result",6]]],[11,"fmt","","",449,[[["formatter",3]],["result",6]]],[11,"fmt","","",450,[[["formatter",3]],["result",6]]],[11,"fmt","","",451,[[["formatter",3]],["result",6]]],[11,"fmt","","",452,[[["formatter",3]],["result",6]]],[11,"fmt","","",453,[[["formatter",3]],["result",6]]],[11,"fmt","","",454,[[["formatter",3]],["result",6]]],[11,"fmt","","",455,[[["formatter",3]],["result",6]]],[11,"fmt","","",119,[[["formatter",3]],["result",6]]],[11,"fmt","","",120,[[["formatter",3]],["result",6]]],[11,"fmt","","",121,[[["formatter",3]],["result",6]]],[11,"fmt","","",124,[[["formatter",3]],["result",6]]],[11,"fmt","","",126,[[["formatter",3]],["result",6]]],[11,"fmt","","",127,[[["formatter",3]],["result",6]]],[11,"fmt","","",456,[[["formatter",3]],["result",6]]],[11,"fmt","","",457,[[["formatter",3]],["result",6]]],[11,"fmt","","",458,[[["formatter",3]],["result",6]]],[11,"fmt","std::net","",128,[[["formatter",3]],["result",6]]],[11,"fmt","","",459,[[["formatter",3]],["result",6]]],[11,"fmt","","",460,[[["formatter",3]],["result",6]]],[11,"fmt","","",131,[[["formatter",3]],["result",6]]],[11,"fmt","","",130,[[["formatter",3]],["result",6]]],[11,"fmt","","",461,[[["formatter",3]],["result",6]]],[11,"fmt","","",462,[[["formatter",3]],["result",6]]],[11,"fmt","","",463,[[["formatter",3]],["result",6]]],[11,"fmt","","",466,[[["formatter",3]],["result",6]]],[11,"fmt","","",464,[[["formatter",3]],["result",6]]],[11,"fmt","","",465,[[["formatter",3]],["result",6]]],[11,"fmt","","",467,[[["formatter",3]],["result",6]]],[11,"fmt","","",132,[[["formatter",3]],["result",6]]],[11,"fmt","std::panic","",171,[[["formatter",3]],["result",6]]],[11,"fmt","std::path","",172,[[["formatter",3]],["result",6]]],[11,"fmt","","",173,[[["formatter",3]],["result",6]]],[11,"fmt","","",174,[[["formatter",3]],["result",6]]],[11,"fmt","","",175,[[["formatter",3]],["result",6]]],[11,"fmt","","",176,[[["formatter",3]],["result",6]]],[11,"fmt","","",490,[[["formatter",3]],["result",6]]],[11,"fmt","","",177,[[["formatter",3]],["result",6]]],[11,"fmt","","",491,[[["formatter",3]],["result",6]]],[11,"fmt","","",178,[[["formatter",3]],["result",6]]],[11,"fmt","","",492,[[["formatter",3]],["result",6]]],[11,"fmt","std::process","",179,[[["formatter",3]],["result",6]]],[11,"fmt","","",494,[[["formatter",3]],["result",6]]],[11,"fmt","","",495,[[["formatter",3]],["result",6]]],[11,"fmt","","",496,[[["formatter",3]],["result",6]]],[11,"fmt","","Format the program and arguments of a Command for …",180,[[["formatter",3]],["result",6]]],[11,"fmt","","",497,[[["formatter",3]],["result",6]]],[11,"fmt","","",181,[[["formatter",3]],["result",6]]],[11,"fmt","","",182,[[["formatter",3]],["result",6]]],[11,"fmt","","",183,[[["formatter",3]],["result",6]]],[11,"fmt","","",184,[[["formatter",3]],["result",6]]],[11,"fmt","std::sync::mpsc","",512,[[["formatter",3]],["result",6]]],[11,"fmt","","",513,[[["formatter",3]],["result",6]]],[11,"fmt","","",514,[[["formatter",3]],["result",6]]],[11,"fmt","","",515,[[["formatter",3]],["result",6]]],[11,"fmt","","",188,[[["formatter",3]],["result",6]]],[11,"fmt","","",189,[[["formatter",3]],["result",6]]],[11,"fmt","","",191,[[["formatter",3]],["result",6]]],[11,"fmt","","",192,[[["formatter",3]],["result",6]]],[11,"fmt","","",193,[[["formatter",3]],["result",6]]],[11,"fmt","","",187,[[["formatter",3]],["result",6]]],[11,"fmt","","",190,[[["formatter",3]],["result",6]]],[11,"fmt","std::sync","",516,[[["formatter",3]],["result",6]]],[11,"fmt","","",517,[[["formatter",3]],["result",6]]],[11,"fmt","","",518,[[["formatter",3]],["result",6]]],[11,"fmt","","",519,[[["formatter",3]],["result",6]]],[11,"fmt","","",520,[[["formatter",3]],["result",6]]],[11,"fmt","","",521,[[["formatter",3]],["result",6]]],[11,"fmt","","",523,[[["formatter",3]],["result",6]]],[11,"fmt","","",522,[[["formatter",3]],["result",6]]],[11,"fmt","","",524,[[["formatter",3]],["result",6]]],[11,"fmt","","",525,[[["formatter",3]],["result",6]]],[11,"fmt","","",526,[[["formatter",3]],["result",6]]],[11,"fmt","std::time","",197,[[["formatter",3]],["result",6]]],[11,"fmt","","",195,[[["formatter",3]],["result",6]]],[11,"fmt","","",196,[[["formatter",3]],["result",6]]],[11,"fmt","std::lazy","",198,[[["formatter",3]],["result",6]]],[11,"fmt","","",199,[[["formatter",3]],["result",6]]],[11,"fmt","std::sync","",204,[[["formatter",3]],["result",6]]],[11,"fmt","","",194,[[["formatter",3]],["result",6]]],[11,"fmt","std::process","",493,[[["formatter",3]],["result",6]]],[11,"fmt","std::os::unix::net","",205,[[["formatter",3]],["result",6]]],[11,"fmt","","",148,[[["formatter",3]],["result",6]]],[11,"fmt","","",207,[[["formatter",3]],["result",6]]],[11,"fmt","","",208,[[["formatter",3]],["result",6]]],[11,"fmt","","",209,[[["formatter",3]],["result",6]]],[11,"fmt","","",486,[[["formatter",3]],["result",6]]],[11,"fmt","","",210,[[["formatter",3]],["result",6]]],[11,"fmt","","",151,[[["formatter",3]],["result",6]]],[11,"fmt","std::alloc","",540,[[["formatter",3]],["result",6]]],[11,"fmt","std::thread","",350,[[["formatter",3]],["result",6]]],[11,"fmt","std::backtrace","",102,[[["formatter",3]],["result",6]]],[11,"fmt","std::env","",108,[[["formatter",3]],["result",6]]],[11,"fmt","","",425,[[["formatter",3]],["result",6]]],[11,"fmt","std::ffi","",434,[[["formatter",3]],["result",6]]],[11,"fmt","","",435,[[["formatter",3]],["result",6]]],[11,"fmt","","",436,[[["formatter",3]],["result",6]]],[11,"fmt","","",437,[[["formatter",3]],["result",6]]],[11,"fmt","std::io","",444,[[["formatter",3]],["result",6]]],[11,"fmt","","",446,[[["formatter",3]],["result",6]]],[11,"fmt","std::net","",128,[[["formatter",3]],["result",6]]],[11,"fmt","","",459,[[["formatter",3]],["result",6]]],[11,"fmt","","",460,[[["formatter",3]],["result",6]]],[11,"fmt","","",130,[[["formatter",3]],["result",6]]],[11,"fmt","","",461,[[["formatter",3]],["result",6]]],[11,"fmt","","",462,[[["formatter",3]],["result",6]]],[11,"fmt","","",463,[[["formatter",3]],["result",6]]],[11,"fmt","std::path","",492,[[["formatter",3]],["result",6]]],[11,"fmt","","",491,[[["formatter",3]],["result",6]]],[11,"fmt","std::process","",183,[[["formatter",3]],["result",6]]],[11,"fmt","std::sync::mpsc","",187,[[["formatter",3]],["result",6]]],[11,"fmt","","",190,[[["formatter",3]],["result",6]]],[11,"fmt","","",515,[[["formatter",3]],["result",6]]],[11,"fmt","","",188,[[["formatter",3]],["result",6]]],[11,"fmt","","",189,[[["formatter",3]],["result",6]]],[11,"fmt","std::sync","",521,[[["formatter",3]],["result",6]]],[11,"fmt","","",525,[[["formatter",3]],["result",6]]],[11,"fmt","","",526,[[["formatter",3]],["result",6]]],[11,"fmt","std::time","",197,[[["formatter",3]],["result",6]]],[11,"fmt","std::sync","",204,[[["formatter",3]],["result",6]]],[11,"fmt","","",194,[[["formatter",3]],["result",6]]],[11,"sub","std::time","",195,[[["duration",3]],["instant",3]]],[11,"sub","","",195,[[["instant",3]],["duration",3]]],[11,"sub","","",196,[[["duration",3]],["systemtime",3]]],[11,"eq","std::thread","",350,[[["accesserror",3]]]],[11,"ne","","",350,[[["accesserror",3]]]],[11,"eq","","",97,[[["threadid",3]]]],[11,"ne","","",97,[[["threadid",3]]]],[11,"eq","std::backtrace","",101,[[["backtracestatus",4]]]],[11,"eq","std::collections::hash_map","",394,[[["hashmap",3]]]],[11,"eq","std::collections::hash_set","",413,[[["hashset",3]]]],[11,"eq","std::env","",108,[[["varerror",4]]]],[11,"ne","","",108,[[["varerror",4]]]],[11,"eq","std::ffi","",432,[[["cstring",3]]]],[11,"ne","","",432,[[["cstring",3]]]],[11,"eq","","",434,[[["nulerror",3]]]],[11,"ne","","",434,[[["nulerror",3]]]],[11,"eq","","",435,[[["frombyteswithnulerror",3]]]],[11,"ne","","",435,[[["frombyteswithnulerror",3]]]],[11,"eq","","",436,[[["fromvecwithnulerror",3]]]],[11,"ne","","",436,[[["fromvecwithnulerror",3]]]],[11,"eq","","",437,[[["intostringerror",3]]]],[11,"ne","","",437,[[["intostringerror",3]]]],[11,"eq","","",433,[[["cstr",3]]]],[11,"eq","","",438,[[["osstring",3]]]],[11,"eq","","",438,[[]]],[11,"eq","std","",560,[[["osstring",3]]]],[11,"eq","std::ffi","",438,[[]]],[11,"eq","std","",560,[[["osstring",3]]]],[11,"eq","std::ffi","",439,[[["osstr",3]]]],[11,"eq","","",439,[[]]],[11,"eq","std","",560,[[["osstr",3]]]],[11,"eq","std::ffi","",438,[[["osstr",3]]]],[11,"eq","","",439,[[["osstring",3]]]],[11,"eq","","",438,[[["osstr",3]]]],[11,"eq","std::borrow","",1,[[["osstr",3]]]],[11,"eq","std::ffi","",439,[[["cow",4]]]],[11,"eq","std::borrow","",1,[[["osstr",3]]]],[11,"eq","","",1,[[["osstring",3]]]],[11,"eq","std::ffi","",438,[[["cow",4]]]],[11,"eq","std::fs","",113,[[["permissions",3]]]],[11,"ne","","",113,[[["permissions",3]]]],[11,"eq","","",114,[[["filetype",3]]]],[11,"ne","","",114,[[["filetype",3]]]],[11,"eq","std::io","",445,[[["cursor",3]]]],[11,"ne","","",445,[[["cursor",3]]]],[11,"eq","","",117,[[["errorkind",4]]]],[11,"eq","","",124,[[["seekfrom",4]]]],[11,"ne","","",124,[[["seekfrom",4]]]],[11,"eq","std::net","",128,[[["socketaddr",4]]]],[11,"ne","","",128,[[["socketaddr",4]]]],[11,"eq","","",459,[[["socketaddrv4",3]]]],[11,"eq","","",460,[[["socketaddrv6",3]]]],[11,"eq","","",130,[[["ipaddr",4]]]],[11,"ne","","",130,[[["ipaddr",4]]]],[11,"eq","","",131,[[["ipv6multicastscope",4]]]],[11,"eq","","",461,[[["ipv4addr",3]]]],[11,"eq","","",130,[[["ipv4addr",3]]]],[11,"eq","","",461,[[["ipaddr",4]]]],[11,"eq","","",462,[[["ipv6addr",3]]]],[11,"eq","","",462,[[["ipaddr",4]]]],[11,"eq","","",130,[[["ipv6addr",3]]]],[11,"eq","","",463,[[["addrparseerror",3]]]],[11,"ne","","",463,[[["addrparseerror",3]]]],[11,"eq","","",132,[[["shutdown",4]]]],[11,"eq","std::path","",172,[[["prefix",4]]]],[11,"ne","","",172,[[["prefix",4]]]],[11,"eq","","",173,[[["prefixcomponent",3]]]],[11,"eq","","",174,[[["component",4]]]],[11,"ne","","",174,[[["component",4]]]],[11,"eq","","",175,[[["components",3]]]],[11,"eq","","",177,[[["pathbuf",3]]]],[11,"eq","","",491,[[["stripprefixerror",3]]]],[11,"ne","","",491,[[["stripprefixerror",3]]]],[11,"eq","","",178,[[["path",3]]]],[11,"eq","","",177,[[["path",3]]]],[11,"eq","","",178,[[["pathbuf",3]]]],[11,"eq","","",177,[[["path",3]]]],[11,"eq","std::borrow","",1,[[["path",3]]]],[11,"eq","std::path","",178,[[["cow",4]]]],[11,"eq","std::borrow","",1,[[["path",3]]]],[11,"eq","","",1,[[["pathbuf",3]]]],[11,"eq","std::path","",177,[[["cow",4]]]],[11,"eq","","",177,[[["osstr",3]]]],[11,"eq","std::ffi","",439,[[["pathbuf",3]]]],[11,"eq","std::path","",177,[[["osstr",3]]]],[11,"eq","","",177,[[["cow",4]]]],[11,"eq","std::borrow","",1,[[["pathbuf",3]]]],[11,"eq","std::path","",177,[[["osstring",3]]]],[11,"eq","std::ffi","",438,[[["pathbuf",3]]]],[11,"eq","std::path","",178,[[["osstr",3]]]],[11,"eq","std::ffi","",439,[[["path",3]]]],[11,"eq","std::path","",178,[[["osstr",3]]]],[11,"eq","","",178,[[["cow",4]]]],[11,"eq","std::borrow","",1,[[["path",3]]]],[11,"eq","std::path","",178,[[["osstring",3]]]],[11,"eq","std::ffi","",438,[[["path",3]]]],[11,"eq","","",439,[[["path",3]]]],[11,"eq","std::borrow","",1,[[["path",3]]]],[11,"eq","std::ffi","",438,[[["path",3]]]],[11,"eq","std::borrow","",1,[[["osstr",3]]]],[11,"eq","std::ffi","",439,[[["cow",4]]]],[11,"eq","std::borrow","",1,[[["osstr",3]]]],[11,"eq","","",1,[[["osstring",3]]]],[11,"eq","std::ffi","",438,[[["cow",4]]]],[11,"eq","std::process","",181,[[["output",3]]]],[11,"ne","","",181,[[["output",3]]]],[11,"eq","","",183,[[["exitstatus",3]]]],[11,"ne","","",183,[[["exitstatus",3]]]],[11,"eq","std::sync::mpsc","",187,[[["senderror",3]]]],[11,"ne","","",187,[[["senderror",3]]]],[11,"eq","","",515,[[["recverror",3]]]],[11,"eq","","",188,[[["tryrecverror",4]]]],[11,"eq","","",189,[[["recvtimeouterror",4]]]],[11,"eq","","",190,[[["trysenderror",4]]]],[11,"ne","","",190,[[["trysenderror",4]]]],[11,"eq","std::sync","",518,[[["waittimeoutresult",3]]]],[11,"ne","","",518,[[["waittimeoutresult",3]]]],[11,"eq","std::time","",195,[[["instant",3]]]],[11,"ne","","",195,[[["instant",3]]]],[11,"eq","","",196,[[["systemtime",3]]]],[11,"ne","","",196,[[["systemtime",3]]]],[11,"eq","std::lazy","",198,[[["synconcecell",3]]]],[11,"eq","std::os::unix::net","",151,[[["ucred",3]]]],[11,"ne","","",151,[[["ucred",3]]]],[11,"cmp","std::ffi","",432,[[["cstring",3]],["ordering",4]]],[11,"cmp","","",433,[[["cstr",3]],["ordering",4]]],[11,"cmp","","",438,[[["osstring",3]],["ordering",4]]],[11,"cmp","","",439,[[["osstr",3]],["ordering",4]]],[11,"cmp","std::io","",117,[[["errorkind",4]],["ordering",4]]],[11,"cmp","std::net","",128,[[["socketaddr",4]],["ordering",4]]],[11,"cmp","","",459,[[["socketaddrv4",3]],["ordering",4]]],[11,"cmp","","",460,[[["socketaddrv6",3]],["ordering",4]]],[11,"cmp","","",130,[[["ipaddr",4]],["ordering",4]]],[11,"cmp","","",461,[[["ipv4addr",3]],["ordering",4]]],[11,"cmp","","",462,[[["ipv6addr",3]],["ordering",4]]],[11,"cmp","std::path","",172,[[["prefix",4]],["ordering",4]]],[11,"cmp","","",173,[[],["ordering",4]]],[11,"cmp","","",174,[[["component",4]],["ordering",4]]],[11,"cmp","","",175,[[],["ordering",4]]],[11,"cmp","","",177,[[["pathbuf",3]],["ordering",4]]],[11,"cmp","","",178,[[["path",3]],["ordering",4]]],[11,"cmp","std::time","",195,[[["instant",3]],["ordering",4]]],[11,"cmp","","",196,[[["systemtime",3]],["ordering",4]]],[11,"partial_cmp","std::ffi","",432,[[["cstring",3]],[["option",4],["ordering",4]]]],[11,"lt","","",432,[[["cstring",3]]]],[11,"le","","",432,[[["cstring",3]]]],[11,"gt","","",432,[[["cstring",3]]]],[11,"ge","","",432,[[["cstring",3]]]],[11,"partial_cmp","","",433,[[["cstr",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",438,[[["osstring",3]],[["option",4],["ordering",4]]]],[11,"lt","","",438,[[["osstring",3]]]],[11,"le","","",438,[[["osstring",3]]]],[11,"gt","","",438,[[["osstring",3]]]],[11,"ge","","",438,[[["osstring",3]]]],[11,"partial_cmp","","",438,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",439,[[["osstr",3]],[["option",4],["ordering",4]]]],[11,"lt","","",439,[[["osstr",3]]]],[11,"le","","",439,[[["osstr",3]]]],[11,"gt","","",439,[[["osstr",3]]]],[11,"ge","","",439,[[["osstr",3]]]],[11,"partial_cmp","","",439,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",438,[[["osstr",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",439,[[["osstring",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",438,[[["osstr",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::borrow","",1,[[["osstr",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::ffi","",439,[[["cow",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::borrow","",1,[[["osstr",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["osstring",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::ffi","",438,[[["cow",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::io","",117,[[["errorkind",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::net","",128,[[["socketaddr",4]],[["option",4],["ordering",4]]]],[11,"lt","","",128,[[["socketaddr",4]]]],[11,"le","","",128,[[["socketaddr",4]]]],[11,"gt","","",128,[[["socketaddr",4]]]],[11,"ge","","",128,[[["socketaddr",4]]]],[11,"partial_cmp","","",459,[[["socketaddrv4",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",460,[[["socketaddrv6",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",130,[[["ipaddr",4]],[["option",4],["ordering",4]]]],[11,"lt","","",130,[[["ipaddr",4]]]],[11,"le","","",130,[[["ipaddr",4]]]],[11,"gt","","",130,[[["ipaddr",4]]]],[11,"ge","","",130,[[["ipaddr",4]]]],[11,"partial_cmp","","",461,[[["ipv4addr",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",130,[[["ipv4addr",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",461,[[["ipaddr",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",462,[[["ipv6addr",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",130,[[["ipv6addr",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",462,[[["ipaddr",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","std::path","",172,[[["prefix",4]],[["option",4],["ordering",4]]]],[11,"lt","","",172,[[["prefix",4]]]],[11,"le","","",172,[[["prefix",4]]]],[11,"gt","","",172,[[["prefix",4]]]],[11,"ge","","",172,[[["prefix",4]]]],[11,"partial_cmp","","",173,[[["prefixcomponent",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",174,[[["component",4]],[["option",4],["ordering",4]]]],[11,"lt","","",174,[[["component",4]]]],[11,"le","","",174,[[["component",4]]]],[11,"gt","","",174,[[["component",4]]]],[11,"ge","","",174,[[["component",4]]]],[11,"partial_cmp","","",175,[[["components",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",177,[[["pathbuf",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",178,[[["path",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",177,[[["path",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",178,[[["pathbuf",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",177,[[["path",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::borrow","",1,[[["path",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::path","",178,[[["cow",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::borrow","",1,[[["path",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["pathbuf",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::path","",177,[[["cow",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",177,[[["osstr",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::ffi","",439,[[["pathbuf",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::path","",177,[[["osstr",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",177,[[["cow",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::borrow","",1,[[["pathbuf",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::path","",177,[[["osstring",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::ffi","",438,[[["pathbuf",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::path","",178,[[["osstr",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::ffi","",439,[[["path",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::path","",178,[[["osstr",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",178,[[["cow",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::borrow","",1,[[["path",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::path","",178,[[["osstring",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::ffi","",438,[[["path",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",439,[[["path",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::borrow","",1,[[["path",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::ffi","",438,[[["path",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::borrow","",1,[[["osstr",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::ffi","",439,[[["cow",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::borrow","",1,[[["osstr",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["osstring",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::ffi","",438,[[["cow",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","std::time","",195,[[["instant",3]],[["option",4],["ordering",4]]]],[11,"lt","","",195,[[["instant",3]]]],[11,"le","","",195,[[["instant",3]]]],[11,"gt","","",195,[[["instant",3]]]],[11,"ge","","",195,[[["instant",3]]]],[11,"partial_cmp","","",196,[[["systemtime",3]],[["option",4],["ordering",4]]]],[11,"lt","","",196,[[["systemtime",3]]]],[11,"le","","",196,[[["systemtime",3]]]],[11,"gt","","",196,[[["systemtime",3]]]],[11,"ge","","",196,[[["systemtime",3]]]],[11,"add","","PanicsThis function may panic if the resulting point in …",195,[[["duration",3]],["instant",3]]],[11,"add","","PanicsThis function may panic if the resulting point in …",196,[[["duration",3]],["systemtime",3]]],[11,"add_assign","","",195,[[["duration",3]]]],[11,"add_assign","","",196,[[["duration",3]]]],[11,"sub_assign","","",195,[[["duration",3]]]],[11,"sub_assign","","",196,[[["duration",3]]]],[11,"drop","std::ffi","",432,[[]]],[11,"drop","std::io","",442,[[]]],[11,"drop","std::sync::mpsc","",191,[[]]],[11,"drop","","",192,[[]]],[11,"drop","","",193,[[]]],[11,"drop","std::sync","",521,[[]]],[11,"drop","","",524,[[]]],[11,"drop","","",525,[[]]],[11,"drop","","",526,[[]]],[11,"drop","std::lazy","",198,[[]]],[11,"call_once","std::panic","",171,[[]]],[11,"index","std::collections::hash_map","Returns a reference to the value corresponding to the …",394,[[]]],[11,"index","std::ffi","",432,[[["rangefull",3]],["cstr",3]]],[11,"index","","",433,[[["rangefrom",3]],["cstr",3]]],[11,"index","","",438,[[["rangefull",3]],["osstr",3]]],[11,"index_mut","","",438,[[["rangefull",3]],["osstr",3]]],[11,"hash","std::thread","",97,[[]]],[11,"hash","std::ffi","",432,[[]]],[11,"hash","","",433,[[]]],[11,"hash","","",438,[[]]],[11,"hash","","",439,[[]]],[11,"hash","std::fs","",114,[[]]],[11,"hash","std::io","",117,[[]]],[11,"hash","std::net","",128,[[]]],[11,"hash","","",459,[[]]],[11,"hash","","",460,[[]]],[11,"hash","","",130,[[]]],[11,"hash","","",131,[[]]],[11,"hash","","",461,[[]]],[11,"hash","","",462,[[]]],[11,"hash","std::path","",172,[[]]],[11,"hash","","",173,[[]]],[11,"hash","","",174,[[]]],[11,"hash","","",177,[[]]],[11,"hash","","",178,[[]]],[11,"hash","std::time","",195,[[]]],[11,"hash","","",196,[[]]],[11,"hash","std::os::unix::net","",151,[[]]],[11,"len","std::collections::hash_map","",395,[[]]],[11,"len","","",396,[[]]],[11,"len","","",397,[[]]],[11,"len","","",398,[[]]],[11,"len","","",399,[[]]],[11,"len","","",402,[[]]],[11,"len","","",403,[[]]],[11,"len","","",404,[[]]],[11,"len","","",400,[[]]],[11,"len","std::collections::hash_set","",414,[[]]],[11,"len","","",415,[[]]],[11,"len","","",416,[[]]],[11,"len","std::env","",426,[[]]],[11,"is_empty","","",426,[[]]],[11,"len","","",427,[[]]],[11,"is_empty","","",427,[[]]],[11,"len","std::process","",497,[[]]],[11,"is_empty","","",497,[[]]],[11,"len","","",493,[[]]],[11,"is_empty","","",493,[[]]],[11,"borrow","std::ffi","",432,[[],["cstr",3]]],[11,"borrow","","",438,[[],["osstr",3]]],[11,"borrow","std::path","",177,[[],["path",3]]],[11,"write","std::collections::hash_map","",412,[[]]],[11,"finish","","",412,[[]]],[11,"build_hasher","","",411,[[],["defaulthasher",3]]],[11,"from_str","std::ffi","",438,[[],["result",4]]],[11,"from_str","std::net","",130,[[],[["result",4],["ipaddr",4],["addrparseerror",3]]]],[11,"from_str","","",461,[[],[["ipv4addr",3],["addrparseerror",3],["result",4]]]],[11,"from_str","","",462,[[],[["ipv6addr",3],["result",4],["addrparseerror",3]]]],[11,"from_str","","",459,[[],[["result",4],["socketaddrv4",3],["addrparseerror",3]]]],[11,"from_str","","",460,[[],[["socketaddrv6",3],["result",4],["addrparseerror",3]]]],[11,"from_str","","",128,[[],[["addrparseerror",3],["result",4],["socketaddr",4]]]],[11,"from_str","std::path","",177,[[],["result",4]]],[11,"from_iter","std::collections::hash_map","",394,[[["intoiterator",8]],["hashmap",3]]],[11,"from_iter","std::collections::hash_set","",413,[[["intoiterator",8]],["hashset",3]]],[11,"from_iter","std::path","",177,[[["intoiterator",8]],["pathbuf",3]]],[11,"as_ref","std::ffi","",433,[[],["cstr",3]]],[11,"as_ref","","",432,[[],["cstr",3]]],[11,"as_ref","","",439,[[],["osstr",3]]],[11,"as_ref","","",438,[[],["osstr",3]]],[11,"as_ref","std","",560,[[],["osstr",3]]],[11,"as_ref","std::string","",273,[[],["osstr",3]]],[11,"as_ref","std::path","",174,[[],["osstr",3]]],[11,"as_ref","","",174,[[],["path",3]]],[11,"as_ref","","",175,[[],["path",3]]],[11,"as_ref","","",175,[[],["osstr",3]]],[11,"as_ref","","",176,[[],["path",3]]],[11,"as_ref","","",176,[[],["osstr",3]]],[11,"as_ref","","",177,[[],["osstr",3]]],[11,"as_ref","","",178,[[],["osstr",3]]],[11,"as_ref","","",178,[[],["path",3]]],[11,"as_ref","std::ffi","",439,[[],["path",3]]],[11,"as_ref","std::borrow","",1,[[],["path",3]]],[11,"as_ref","std::ffi","",438,[[],["path",3]]],[11,"as_ref","std","",560,[[],["path",3]]],[11,"as_ref","std::string","",273,[[],["path",3]]],[11,"as_ref","std::path","",177,[[],["path",3]]],[11,"next_back","std::env","",426,[[],[["option",4],["string",3]]]],[11,"next_back","","",427,[[],[["osstring",3],["option",4]]]],[11,"next_back","std::path","",176,[[],[["option",4],["osstr",3]]]],[11,"next_back","","",175,[[],[["option",4],["component",4]]]],[11,"next","std::collections::hash_map","",395,[[],["option",4]]],[11,"size_hint","","",395,[[]]],[11,"next","","",396,[[],["option",4]]],[11,"size_hint","","",396,[[]]],[11,"next","","",397,[[],["option",4]]],[11,"size_hint","","",397,[[]]],[11,"next","","",398,[[],["option",4]]],[11,"size_hint","","",398,[[]]],[11,"next","","",399,[[],["option",4]]],[11,"size_hint","","",399,[[]]],[11,"next","","",402,[[],["option",4]]],[11,"size_hint","","",402,[[]]],[11,"next","","",403,[[],["option",4]]],[11,"size_hint","","",403,[[]]],[11,"next","","",404,[[],["option",4]]],[11,"size_hint","","",404,[[]]],[11,"next","","",400,[[],["option",4]]],[11,"size_hint","","",400,[[]]],[11,"next","","",401,[[],["option",4]]],[11,"size_hint","","",401,[[]]],[11,"next","std::collections::hash_set","",414,[[],["option",4]]],[11,"size_hint","","",414,[[]]],[11,"next","","",415,[[],["option",4]]],[11,"size_hint","","",415,[[]]],[11,"next","","",416,[[],["option",4]]],[11,"size_hint","","",416,[[]]],[11,"next","","",417,[[],["option",4]]],[11,"size_hint","","",417,[[]]],[11,"next","","",418,[[],["option",4]]],[11,"size_hint","","",418,[[]]],[11,"next","","",419,[[],["option",4]]],[11,"size_hint","","",419,[[]]],[11,"next","","",420,[[],["option",4]]],[11,"size_hint","","",420,[[]]],[11,"next","","",421,[[],["option",4]]],[11,"size_hint","","",421,[[]]],[11,"next","std::env","",422,[[],["option",4]]],[11,"size_hint","","",422,[[]]],[11,"next","","",423,[[],["option",4]]],[11,"size_hint","","",423,[[]]],[11,"next","","",424,[[],[["option",4],["pathbuf",3]]]],[11,"size_hint","","",424,[[]]],[11,"next","","",426,[[],[["option",4],["string",3]]]],[11,"size_hint","","",426,[[]]],[11,"next","","",427,[[],[["osstring",3],["option",4]]]],[11,"size_hint","","",427,[[]]],[11,"next","std::error","",428,[[],["option",4]]],[11,"next","std::fs","",440,[[],[["option",4],["result",6]]]],[11,"next","std::io","",456,[[],[["result",6],["option",4]]]],[11,"next","","",457,[[],[["result",6],["option",4]]]],[11,"next","","",458,[[],[["result",6],["option",4]]]],[11,"next","std::net","",466,[[],[["option",4],["result",6]]]],[11,"next","std::path","",176,[[],[["option",4],["osstr",3]]]],[11,"next","","",175,[[],[["option",4],["component",4]]]],[11,"next","","",490,[[],["option",4]]],[11,"next","std::process","",497,[[],[["option",4],["osstr",3]]]],[11,"size_hint","","",497,[[]]],[11,"next","std::sync::mpsc","",512,[[],["option",4]]],[11,"next","","",513,[[],["option",4]]],[11,"next","","",514,[[],["option",4]]],[11,"next","std::process","",493,[[],["option",4]]],[11,"size_hint","","",493,[[]]],[11,"next","std::os::windows::ffi","",487,[[],["option",4]]],[11,"size_hint","","",487,[[]]],[11,"next","std::os::unix::net","",483,[[],[["option",4],["rawfd",6]]]],[11,"next","","",484,[[],[["socketcred",3],["option",4]]]],[11,"next","","",485,[[],["option",4]]],[11,"next","","",486,[[],[["option",4],["result",6]]]],[11,"size_hint","","",486,[[]]],[11,"into_iter","std::collections::hash_map","Creates a consuming iterator, that is, one that moves …",394,[[],["intoiter",3]]],[11,"into_iter","std::collections::hash_set","Creates a consuming iterator, that is, one that moves …",413,[[],["intoiter",3]]],[11,"into_iter","std::sync::mpsc","",193,[[],["intoiter",3]]],[11,"extend","std::collections::hash_map","",394,[[["intoiterator",8]]]],[11,"extend_one","","",394,[[]]],[11,"extend_reserve","","",394,[[]]],[11,"extend","","",394,[[["intoiterator",8]]]],[11,"extend_one","","",394,[[]]],[11,"extend_reserve","","",394,[[]]],[11,"extend","std::collections::hash_set","",413,[[["intoiterator",8]]]],[11,"extend_one","","",413,[[]]],[11,"extend_reserve","","",413,[[]]],[11,"extend","","",413,[[["intoiterator",8]]]],[11,"extend_one","","",413,[[]]],[11,"extend_reserve","","",413,[[]]],[11,"extend","std::path","",177,[[["intoiterator",8]]]],[11,"extend_one","","",177,[[]]],[11,"clone","std::thread","",350,[[],["accesserror",3]]],[11,"clone","","",97,[[],["threadid",3]]],[11,"clone","","",98,[[],["thread",3]]],[11,"clone","std::collections::hash_map","",394,[[],["hashmap",3]]],[11,"clone","","",395,[[]]],[11,"clone","","",398,[[]]],[11,"clone","","",399,[[]]],[11,"clone","","",411,[[],["randomstate",3]]],[11,"clone","","",412,[[],["defaulthasher",3]]],[11,"clone","std::collections::hash_set","",413,[[],["hashset",3]]],[11,"clone","","",414,[[]]],[11,"clone","","",418,[[]]],[11,"clone","","",419,[[]]],[11,"clone","","",420,[[]]],[11,"clone","","",421,[[]]],[11,"clone","std::env","",108,[[],["varerror",4]]],[11,"clone","std::error","",428,[[],["chain",3]]],[11,"clone","std::ffi","",432,[[],["cstring",3]]],[11,"clone","","",434,[[],["nulerror",3]]],[11,"clone","","",435,[[],["frombyteswithnulerror",3]]],[11,"clone","","",436,[[],["fromvecwithnulerror",3]]],[11,"clone","","",437,[[],["intostringerror",3]]],[11,"clone","std::boxed","",213,[[]]],[11,"clone","std::ffi","",438,[[],["osstring",3]]],[11,"clone","std::boxed","",213,[[]]],[11,"clone","std::fs","",112,[[],["metadata",3]]],[11,"clone","","",111,[[],["openoptions",3]]],[11,"clone","","",113,[[],["permissions",3]]],[11,"clone","","",114,[[],["filetype",3]]],[11,"clone","std::io","",445,[[],["cursor",3]]],[11,"clone","","",117,[[],["errorkind",4]]],[11,"clone","","",120,[[],["ioslice",3]]],[11,"clone","","",124,[[],["seekfrom",4]]],[11,"clone","std::net","",128,[[],["socketaddr",4]]],[11,"clone","","",459,[[],["socketaddrv4",3]]],[11,"clone","","",460,[[],["socketaddrv6",3]]],[11,"clone","","",130,[[],["ipaddr",4]]],[11,"clone","","",131,[[],["ipv6multicastscope",4]]],[11,"clone","","",461,[[],["ipv4addr",3]]],[11,"clone","","",462,[[],["ipv6addr",3]]],[11,"clone","","",463,[[],["addrparseerror",3]]],[11,"clone","","",132,[[],["shutdown",4]]],[11,"clone","std::os::linux::raw","",170,[[],["stat",3]]],[11,"clone","std::path","",172,[[],["prefix",4]]],[11,"clone","","",173,[[],["prefixcomponent",3]]],[11,"clone","","",174,[[],["component",4]]],[11,"clone","","",175,[[],["components",3]]],[11,"clone","","",176,[[],["iter",3]]],[11,"clone","","",490,[[],["ancestors",3]]],[11,"clone","","",177,[[],["pathbuf",3]]],[11,"clone","std::boxed","",213,[[]]],[11,"clone","std::path","",491,[[],["stripprefixerror",3]]],[11,"clone","std::process","",181,[[],["output",3]]],[11,"clone","","",183,[[],["exitstatus",3]]],[11,"clone","","",184,[[],["exitcode",3]]],[11,"clone","std::sync::mpsc","",187,[[],["senderror",3]]],[11,"clone","","",515,[[],["recverror",3]]],[11,"clone","","",188,[[],["tryrecverror",4]]],[11,"clone","","",189,[[],["recvtimeouterror",4]]],[11,"clone","","",190,[[],["trysenderror",4]]],[11,"clone","","",191,[[],["sender",3]]],[11,"clone","","",192,[[],["syncsender",3]]],[11,"clone","std::sync","",518,[[],["waittimeoutresult",3]]],[11,"clone","std::time","",195,[[],["instant",3]]],[11,"clone","","",196,[[],["systemtime",3]]],[11,"clone","","",197,[[],["systemtimeerror",3]]],[11,"clone","std::lazy","",198,[[],["synconcecell",3]]],[11,"clone","std::os::windows::ffi","",487,[[],["encodewide",3]]],[11,"clone","std::os::unix::net","",205,[[],["socketaddr",3]]],[11,"clone","","",206,[[],["socketcred",3]]],[11,"clone","","",151,[[],["ucred",3]]],[11,"clone","std::alloc","",540,[[],["system",3]]],[11,"default","std::collections::hash_map","Creates an empty <code>HashMap<K, V, S></code>, with the <code>Default</code> value …",394,[[],["hashmap",3]]],[11,"default","","Creates a new <code>DefaultHasher</code> using <code>new</code>. See its …",412,[[],["defaulthasher",3]]],[11,"default","","Constructs a new <code>RandomState</code>.",411,[[],["randomstate",3]]],[11,"default","std::collections::hash_set","Creates an empty <code>HashSet<T, S></code> with the <code>Default</code> value for …",413,[[],["hashset",3]]],[11,"default","std::ffi","Creates an empty <code>CString</code>.",432,[[],["cstring",3]]],[11,"default","std::boxed","",213,[[],[["cstr",3],["box",3]]]],[11,"default","std::ffi","Constructs an empty <code>OsString</code>.",438,[[],["osstring",3]]],[11,"default","std::boxed","",213,[[],[["box",3],["osstr",3]]]],[11,"default","std::io","",445,[[],["cursor",3]]],[11,"default","std::path","",177,[[]]],[11,"default","std::sync","Creates a <code>Condvar</code> which is ready to be waited on and …",519,[[],["condvar",3]]],[11,"default","","Creates a <code>Mutex<T></code>, with the <code>Default</code> value for T.",520,[[],["mutex",3]]],[11,"default","","Creates a new <code>RwLock<T></code>, with the <code>Default</code> value for T.",524,[[],["rwlock",3]]],[11,"default","std::lazy","",198,[[],["synconcecell",3]]],[11,"default","","Creates a new lazy value using <code>Default</code> as the …",199,[[],["synclazy",3]]],[11,"default","std::alloc","",540,[[],["system",3]]],[11,"poll","std::panic","",171,[[["pin",3],["context",3]],["poll",4]]],[11,"alloc","std::alloc","",540,[[["layout",3]]]],[11,"alloc_zeroed","","",540,[[["layout",3]]]],[11,"dealloc","","",540,[[["layout",3]]]],[11,"realloc","","",540,[[["layout",3]]]],[11,"allocate","","",540,[[["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"allocate_zeroed","","",540,[[["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"deallocate","","",540,[[["nonnull",3],["layout",3]]]],[11,"grow","","",540,[[["nonnull",3],["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"grow_zeroed","","",540,[[["nonnull",3],["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"shrink","","",540,[[["nonnull",3],["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"to_owned","std::ffi","",433,[[],["cstring",3]]],[11,"clone_into","","",433,[[["cstring",3]]]],[11,"to_owned","","",439,[[],["osstring",3]]],[11,"clone_into","","",439,[[["osstring",3]]]],[11,"to_owned","std::path","",178,[[],["pathbuf",3]]],[11,"clone_into","","",178,[[["pathbuf",3]]]],[11,"is_borrowed","std::borrow","Returns true if the data is borrowed, i.e. if <code>to_mut</code> …",1,[[]]],[11,"is_owned","","Returns true if the data is owned, i.e. if <code>to_mut</code> would …",1,[[]]],[11,"to_mut","","Acquires a mutable reference to the owned form of the …",1,[[]]],[11,"into_owned","","Extracts the owned data.",1,[[]]],[11,"new","std::boxed","Allocates memory on the heap and then places <code>x</code> into it.",213,[[],[["box",3],["global",3]]]],[11,"new_uninit","","Constructs a new box with uninitialized contents.",213,[[],[["box",3],["maybeuninit",19],["global",3]]]],[11,"new_zeroed","","Constructs a new <code>Box</code> with uninitialized contents, with …",213,[[],[["box",3],["maybeuninit",19],["global",3]]]],[11,"pin","","Constructs a new <code>Pin<Box<T>></code>. If <code>T</code> does not implement …",213,[[],[["box",3],["pin",3]]]],[11,"new_in","","Allocates memory in the given allocator then places <code>x</code> …",213,[[],["box",3]]],[11,"new_uninit_in","","Constructs a new box with uninitialized contents in the …",213,[[],[["box",3],["maybeuninit",19]]]],[11,"new_zeroed_in","","Constructs a new <code>Box</code> with uninitialized contents, with …",213,[[],[["box",3],["maybeuninit",19]]]],[11,"pin_in","","Constructs a new <code>Pin<Box<T, A>></code>. If <code>T</code> does not implement …",213,[[],[["pin",3],["box",3]]]],[11,"into_boxed_slice","","Converts a <code>Box<T></code> into a <code>Box<[T]></code>",213,[[["box",3]],["box",3]]],[11,"new_uninit_slice","","Constructs a new boxed slice with uninitialized contents.",213,[[],[["global",3],["box",3]]]],[11,"new_zeroed_slice","","Constructs a new boxed slice with uninitialized contents, …",213,[[],[["global",3],["box",3]]]],[11,"new_uninit_slice_in","","Constructs a new boxed slice with uninitialized contents …",213,[[],["box",3]]],[11,"new_zeroed_slice_in","","Constructs a new boxed slice with uninitialized contents …",213,[[],["box",3]]],[11,"assume_init","","Converts to <code>Box<T, A></code>.",213,[[],["box",3]]],[11,"assume_init","","Converts to <code>Box<[T], A></code>.",213,[[],["box",3]]],[11,"from_raw","","Constructs a box from a raw pointer.",213,[[],[["box",3],["global",3]]]],[11,"from_raw_in","","Constructs a box from a raw pointer in the given …",213,[[],["box",3]]],[11,"into_raw","","Consumes the <code>Box</code>, returning a wrapped raw pointer.",213,[[["box",3]]]],[11,"into_raw_with_allocator","","Consumes the <code>Box</code>, returning a wrapped raw pointer and the …",213,[[["box",3]]]],[11,"allocator","","Returns a reference to the underlying allocator.",213,[[["box",3]]]],[11,"leak","","Consumes and leaks the <code>Box</code>, returning a mutable reference,…",213,[[["box",3]]]],[11,"into_pin","","Converts a <code>Box<T></code> into a <code>Pin<Box<T>></code>",213,[[["box",3]],[["pin",3],["box",3]]]],[11,"downcast","","Attempt to downcast the box to a concrete type.",213,[[],[["box",3],["result",4],["box",3]]]],[11,"downcast","","Attempt to downcast the box to a concrete type.",213,[[],[["result",4],["box",3],["box",3]]]],[11,"as_str","std::fmt","Get the formatted string, if it has no arguments to be …",215,[[],["option",4]]],[11,"entry","","Adds a new entry to the list output.",216,[[["debug",8]],["debuglist",3]]],[11,"entries","","Adds the contents of an iterator of entries to the list …",216,[[],["debuglist",3]]],[11,"finish","","Finishes output and returns any error encountered.",216,[[],[["result",4],["error",3]]]],[11,"entry","","Adds a new entry to the map output.",217,[[["debug",8]],["debugmap",3]]],[11,"key","","Adds the key part of a new entry to the map output.",217,[[["debug",8]],["debugmap",3]]],[11,"value","","Adds the value part of a new entry to the map output.",217,[[["debug",8]],["debugmap",3]]],[11,"entries","","Adds the contents of an iterator of entries to the map …",217,[[],["debugmap",3]]],[11,"finish","","Finishes output and returns any error encountered.",217,[[],[["result",4],["error",3]]]],[11,"entry","","Adds a new entry to the set output.",218,[[["debug",8]],["debugset",3]]],[11,"entries","","Adds the contents of an iterator of entries to the set …",218,[[],["debugset",3]]],[11,"finish","","Finishes output and returns any error encountered.",218,[[],[["result",4],["error",3]]]],[11,"field","","Adds a new field to the generated struct output.",219,[[["debug",8]],["debugstruct",3]]],[11,"finish_non_exhaustive","","Marks the struct as non-exhaustive, indicating to the …",219,[[],[["result",4],["error",3]]]],[11,"finish","","Finishes output and returns any error encountered.",219,[[],[["result",4],["error",3]]]],[11,"field","","Adds a new field to the generated tuple struct output.",220,[[["debug",8]],["debugtuple",3]]],[11,"finish","","Finishes output and returns any error encountered.",220,[[],[["result",4],["error",3]]]],[11,"pad_integral","","Performs the correct padding for an integer which has …",221,[[],[["result",4],["error",3]]]],[11,"pad","","This function takes a string slice and emits it to the …",221,[[],[["result",4],["error",3]]]],[11,"write_str","","Writes some data to the underlying buffer contained …",221,[[],[["result",4],["error",3]]]],[11,"write_fmt","","Writes some formatted information into this instance.",221,[[["arguments",3]],[["result",4],["error",3]]]],[11,"flags","","Flags for formatting",221,[[]]],[11,"fill","","Character used as \'fill\' whenever there is alignment.",221,[[]]],[11,"align","","Flag indicating what form of alignment was requested.",221,[[],[["option",4],["alignment",4]]]],[11,"width","","Optionally specified integer width that the output should …",221,[[],["option",4]]],[11,"precision","","Optionally specified precision for numeric types. …",221,[[],["option",4]]],[11,"sign_plus","","Determines if the <code>+</code> flag was specified.",221,[[]]],[11,"sign_minus","","Determines if the <code>-</code> flag was specified.",221,[[]]],[11,"alternate","","Determines if the <code>#</code> flag was specified.",221,[[]]],[11,"sign_aware_zero_pad","","Determines if the <code>0</code> flag was specified.",221,[[]]],[11,"debug_struct","","Creates a [<code>DebugStruct</code>] builder designed to assist with …",221,[[],["debugstruct",3]]],[11,"debug_tuple","","Creates a <code>DebugTuple</code> builder designed to assist with …",221,[[],["debugtuple",3]]],[11,"debug_list","","Creates a <code>DebugList</code> builder designed to assist with …",221,[[],["debuglist",3]]],[11,"debug_set","","Creates a <code>DebugSet</code> builder designed to assist with …",221,[[],["debugset",3]]],[11,"debug_map","","Creates a <code>DebugMap</code> builder designed to assist with …",221,[[],["debugmap",3]]],[11,"new","std::rc","Constructs a new <code>Rc<T></code>.",222,[[],["rc",3]]],[11,"new_cyclic","","Constructs a new <code>Rc<T></code> using a weak reference to itself. …",222,[[],["rc",3]]],[11,"new_uninit","","Constructs a new <code>Rc</code> with uninitialized contents.",222,[[],[["rc",3],["maybeuninit",19]]]],[11,"new_zeroed","","Constructs a new <code>Rc</code> with uninitialized contents, with the …",222,[[],[["rc",3],["maybeuninit",19]]]],[11,"pin","","Constructs a new <code>Pin<Rc<T>></code>. If <code>T</code> does not implement <code>Unpin</code>…",222,[[],[["rc",3],["pin",3]]]],[11,"try_unwrap","","Returns the inner value, if the <code>Rc</code> has exactly one strong …",222,[[["rc",3]],[["rc",3],["result",4]]]],[11,"new_uninit_slice","","Constructs a new reference-counted slice with …",222,[[],["rc",3]]],[11,"new_zeroed_slice","","Constructs a new reference-counted slice with …",222,[[],["rc",3]]],[11,"assume_init","","Converts to <code>Rc<T></code>.",222,[[],["rc",3]]],[11,"assume_init","","Converts to <code>Rc<[T]></code>.",222,[[],["rc",3]]],[11,"into_raw","","Consumes the <code>Rc</code>, returning the wrapped pointer.",222,[[["rc",3]]]],[11,"as_ptr","","Provides a raw pointer to the data.",222,[[["rc",3]]]],[11,"from_raw","","Constructs an <code>Rc<T></code> from a raw pointer.",222,[[],["rc",3]]],[11,"downgrade","","Creates a new [<code>Weak</code>] pointer to this allocation.",222,[[["rc",3]],["weak",3]]],[11,"weak_count","","Gets the number of [<code>Weak</code>] pointers to this allocation.",222,[[["rc",3]]]],[11,"strong_count","","Gets the number of strong (<code>Rc</code>) pointers to this …",222,[[["rc",3]]]],[11,"get_mut","","Returns a mutable reference into the given <code>Rc</code>, if there …",222,[[["rc",3]],["option",4]]],[11,"get_mut_unchecked","","Returns a mutable reference into the given <code>Rc</code>, without …",222,[[["rc",3]]]],[11,"ptr_eq","","Returns <code>true</code> if the two <code>Rc</code>s point to the same allocation …",222,[[["rc",3]]]],[11,"make_mut","","Makes a mutable reference into the given <code>Rc</code>.",222,[[["rc",3]]]],[11,"downcast","","Attempt to downcast the <code>Rc<dyn Any></code> to a concrete type.",222,[[],[["rc",3],["result",4],["rc",3]]]],[11,"new","","Constructs a new <code>Weak<T></code>, without allocating any memory. …",223,[[],["weak",3]]],[11,"as_ptr","","Returns a raw pointer to the object <code>T</code> pointed to by this …",223,[[]]],[11,"into_raw","","Consumes the <code>Weak<T></code> and turns it into a raw pointer.",223,[[]]],[11,"from_raw","","Converts a raw pointer previously created by <code>into_raw</code> …",223,[[],["weak",3]]],[11,"upgrade","","Attempts to upgrade the <code>Weak</code> pointer to an [<code>Rc</code>], delaying …",223,[[],[["option",4],["rc",3]]]],[11,"strong_count","","Gets the number of strong (<code>Rc</code>) pointers pointing to this …",223,[[]]],[11,"weak_count","","Gets the number of <code>Weak</code> pointers pointing to this …",223,[[]]],[11,"ptr_eq","","Returns <code>true</code> if the two <code>Weak</code>s point to the same …",223,[[["weak",3]]]],[11,"remainder","std::slice","Returns the remainder of the original slice that is not …",224,[[]]],[11,"into_remainder","","Returns the remainder of the original slice that is not …",225,[[]]],[11,"remainder","","Returns the remainder of the original slice that is not …",229,[[]]],[11,"into_remainder","","Returns the remainder of the original slice that is not …",230,[[]]],[11,"as_slice","","Views the underlying data as a subslice of the original …",234,[[]]],[11,"into_slice","","Views the underlying data as a subslice of the original …",235,[[]]],[11,"as_slice","","Views the underlying data as a subslice of the original …",235,[[]]],[11,"remainder","","Returns the remainder of the original slice that is not …",237,[[]]],[11,"into_remainder","","Returns the remainder of the original slice that is not …",238,[[]]],[11,"as_str","std::str","Views the underlying data as a subslice of the original …",254,[[]]],[11,"as_str","","Views the underlying data as a subslice of the original …",255,[[]]],[11,"valid_up_to","","Returns the index in the given string up to which valid …",260,[[]]],[11,"error_len","","Provides more information about the failure:",260,[[],["option",4]]],[11,"as_str","","Returns remainder of the splitted string",267,[[]]],[11,"as_str","","Returns remainder of the splitted string",268,[[]]],[11,"as_str","","Returns remainder of the splitted string",269,[[]]],[11,"as_str","","Returns remainder of the splitted string",270,[[]]],[11,"as_str","","Returns remainder of the splitted string",271,[[]]],[11,"as_str","","Returns remainder of the splitted string",272,[[]]],[11,"new","std::string","Creates a new empty <code>String</code>.",273,[[],["string",3]]],[11,"with_capacity","","Creates a new empty <code>String</code> with a particular capacity.",273,[[],["string",3]]],[11,"from_utf8","","Converts a vector of bytes to a <code>String</code>.",273,[[["global",3],["vec",3]],[["fromutf8error",3],["string",3],["result",4]]]],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid …",273,[[],["cow",4]]],[11,"from_utf16","","Decode a UTF-16–encoded vector <code>v</code> into a <code>String</code>, …",273,[[],[["fromutf16error",3],["string",3],["result",4]]]],[11,"from_utf16_lossy","","Decode a UTF-16–encoded slice <code>v</code> into a <code>String</code>, replacing…",273,[[],["string",3]]],[11,"into_raw_parts","","Decomposes a <code>String</code> into its raw components.",273,[[]]],[11,"from_raw_parts","","Creates a new <code>String</code> from a length, capacity, and pointer.",273,[[],["string",3]]],[11,"from_utf8_unchecked","","Converts a vector of bytes to a <code>String</code> without checking …",273,[[["global",3],["vec",3]],["string",3]]],[11,"into_bytes","","Converts a <code>String</code> into a byte vector.",273,[[],[["global",3],["vec",3]]]],[11,"as_str","","Extracts a string slice containing the entire <code>String</code>.",273,[[]]],[11,"as_mut_str","","Converts a <code>String</code> into a mutable string slice.",273,[[]]],[11,"push_str","","Appends a given string slice onto the end of this <code>String</code>.",273,[[]]],[11,"capacity","","Returns this <code>String</code>\'s capacity, in bytes.",273,[[]]],[11,"reserve","","Ensures that this <code>String</code>\'s capacity is at least <code>additional</code>…",273,[[]]],[11,"reserve_exact","","Ensures that this <code>String</code>\'s capacity is <code>additional</code> bytes …",273,[[]]],[11,"try_reserve","","Tries to reserve capacity for at least <code>additional</code> more …",273,[[],[["result",4],["tryreserveerror",4]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly …",273,[[],[["result",4],["tryreserveerror",4]]]],[11,"shrink_to_fit","","Shrinks the capacity of this <code>String</code> to match its length.",273,[[]]],[11,"shrink_to","","Shrinks the capacity of this <code>String</code> with a lower bound.",273,[[]]],[11,"push","","Appends the given [<code>char</code>] to the end of this <code>String</code>.",273,[[]]],[11,"as_bytes","","Returns a byte slice of this <code>String</code>\'s contents.",273,[[]]],[11,"truncate","","Shortens this <code>String</code> to the specified length.",273,[[]]],[11,"pop","","Removes the last character from the string buffer and …",273,[[],["option",4]]],[11,"remove","","Removes a [<code>char</code>] from this <code>String</code> at a byte position and …",273,[[]]],[11,"retain","","Retains only the characters specified by the predicate.",273,[[]]],[11,"insert","","Inserts a character into this <code>String</code> at a byte position.",273,[[]]],[11,"insert_str","","Inserts a string slice into this <code>String</code> at a byte …",273,[[]]],[11,"as_mut_vec","","Returns a mutable reference to the contents of this <code>String</code>…",273,[[],["vec",3]]],[11,"len","","Returns the length of this <code>String</code>, in bytes, not [<code>char</code>]s …",273,[[]]],[11,"is_empty","","Returns <code>true</code> if this <code>String</code> has a length of zero, and …",273,[[]]],[11,"split_off","","Splits the string into two at the given byte index.",273,[[],["string",3]]],[11,"clear","","Truncates this <code>String</code>, removing all contents.",273,[[]]],[11,"drain","","Creates a draining iterator that removes the specified …",273,[[],["drain",3]]],[11,"replace_range","","Removes the specified range in the string, and replaces …",273,[[]]],[11,"into_boxed_str","","Converts this <code>String</code> into a [<code>Box</code>]<code><</code><code>str</code><code>></code>.",273,[[],[["box",3],["global",3]]]],[11,"as_bytes","","Returns a slice of [<code>u8</code>]s bytes that were attempted to …",274,[[]]],[11,"into_bytes","","Returns the bytes that were attempted to convert to a …",274,[[],[["global",3],["vec",3]]]],[11,"utf8_error","","Fetch a <code>Utf8Error</code> to get more details about the …",274,[[],["utf8error",3]]],[11,"as_str","","Returns the remaining (sub)string of this iterator as a …",276,[[]]],[11,"new","std::vec","Constructs a new, empty <code>Vec<T></code>.",277,[[],[["vec",3],["global",3]]]],[11,"with_capacity","","Constructs a new, empty <code>Vec<T></code> with the specified …",277,[[],[["vec",3],["global",3]]]],[11,"from_raw_parts","","Creates a <code>Vec<T></code> directly from the raw components of …",277,[[],[["vec",3],["global",3]]]],[11,"new_in","","Constructs a new, empty <code>Vec<T, A></code>.",277,[[],["vec",3]]],[11,"with_capacity_in","","Constructs a new, empty <code>Vec<T, A></code> with the specified …",277,[[],["vec",3]]],[11,"from_raw_parts_in","","Creates a <code>Vec<T, A></code> directly from the raw components of …",277,[[],["vec",3]]],[11,"into_raw_parts","","Decomposes a <code>Vec<T></code> into its raw components.",277,[[]]],[11,"into_raw_parts_with_alloc","","Decomposes a <code>Vec<T></code> into its raw components.",277,[[]]],[11,"capacity","","Returns the number of elements the vector can hold without…",277,[[]]],[11,"reserve","","Reserves capacity for at least <code>additional</code> more elements …",277,[[]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly <code>additional</code> more …",277,[[]]],[11,"try_reserve","","Tries to reserve capacity for at least <code>additional</code> more …",277,[[],[["result",4],["tryreserveerror",4]]]],[11,"try_reserve_exact","","Tries to reserve the minimum capacity for exactly …",277,[[],[["result",4],["tryreserveerror",4]]]],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",277,[[]]],[11,"shrink_to","","Shrinks the capacity of the vector with a lower bound.",277,[[]]],[11,"into_boxed_slice","","Converts the vector into <code>Box<[T]></code>.",277,[[],["box",3]]],[11,"truncate","","Shortens the vector, keeping the first <code>len</code> elements and …",277,[[]]],[11,"as_slice","","Extracts a slice containing the entire vector.",277,[[]]],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",277,[[]]],[11,"as_ptr","","Returns a raw pointer to the vector\'s buffer.",277,[[]]],[11,"as_mut_ptr","","Returns an unsafe mutable pointer to the vector\'s buffer.",277,[[]]],[11,"allocator","","Returns a reference to the underlying allocator.",277,[[]]],[11,"set_len","","Forces the length of the vector to <code>new_len</code>.",277,[[]]],[11,"swap_remove","","Removes an element from the vector and returns it.",277,[[]]],[11,"insert","","Inserts an element at position <code>index</code> within the vector, …",277,[[]]],[11,"remove","","Removes and returns the element at position <code>index</code> within …",277,[[]]],[11,"retain","","Retains only the elements specified by the predicate.",277,[[]]],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the …",277,[[]]],[11,"dedup_by","","Removes all but the first of consecutive elements in the …",277,[[]]],[11,"push","","Appends an element to the back of a collection.",277,[[]]],[11,"pop","","Removes the last element from a vector and returns it, or …",277,[[],["option",4]]],[11,"append","","Moves all the elements of <code>other</code> into <code>Self</code>, leaving <code>other</code> …",277,[[["vec",3]]]],[11,"drain","","Creates a draining iterator that removes the specified …",277,[[],["drain",3]]],[11,"clear","","Clears the vector, removing all values.",277,[[]]],[11,"len","","Returns the number of elements in the vector, also …",277,[[]]],[11,"is_empty","","Returns <code>true</code> if the vector contains no elements.",277,[[]]],[11,"split_off","","Splits the collection into two at the given index.",277,[[],["vec",3]]],[11,"resize_with","","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.",277,[[]]],[11,"leak","","Consumes and leaks the <code>Vec</code>, returning a mutable reference …",277,[[]]],[11,"spare_capacity_mut","","Returns the remaining spare capacity of the vector as a …",277,[[]]],[11,"resize","","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.",277,[[]]],[11,"extend_from_slice","","Clones and appends all elements in a slice to the <code>Vec</code>.",277,[[]]],[11,"dedup","","Removes consecutive repeated elements in the vector …",277,[[]]],[11,"remove_item","","Removes the first instance of <code>item</code> from the vector if the …",277,[[],["option",4]]],[11,"splice","","Creates a splicing iterator that replaces the specified …",277,[[],["splice",3]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if …",277,[[],["drainfilter",3]]],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",278,[[]]],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable …",278,[[]]],[11,"allocator","","Returns a reference to the underlying allocator.",278,[[]]],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",279,[[]]],[11,"allocator","","Returns a reference to the underlying allocator.",279,[[]]],[11,"allocator","","Returns a reference to the underlying allocator.",281,[[]]],[11,"is","std::any","Returns <code>true</code> if the boxed type is the same as <code>T</code>.",24,[[]]],[11,"downcast_ref","","Returns some reference to the boxed value if it is of …",24,[[],["option",4]]],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it …",24,[[],["option",4]]],[11,"is","","Forwards to the method defined on the type <code>Any</code>.",24,[[]]],[11,"downcast_ref","","Forwards to the method defined on the type <code>Any</code>.",24,[[],["option",4]]],[11,"downcast_mut","","Forwards to the method defined on the type <code>Any</code>.",24,[[],["option",4]]],[11,"is","","Forwards to the method defined on the type <code>Any</code>.",24,[[]]],[11,"downcast_ref","","Forwards to the method defined on the type <code>Any</code>.",24,[[],["option",4]]],[11,"downcast_mut","","Forwards to the method defined on the type <code>Any</code>.",24,[[],["option",4]]],[11,"of","","Returns the <code>TypeId</code> of the type this generic function has …",282,[[],["typeid",3]]],[11,"new","std::array","Creates a new iterator over the given <code>array</code>.",284,[[],["intoiter",3]]],[11,"as_slice","","Returns an immutable slice of all elements that have not …",284,[[]]],[11,"as_mut_slice","","Returns a mutable slice of all elements that have not …",284,[[]]],[11,"new","std::cell","Creates a new <code>Cell</code> containing the given value.",285,[[],["cell",3]]],[11,"set","","Sets the contained value.",285,[[]]],[11,"swap","","Swaps the values of two Cells. Difference with …",285,[[["cell",3]]]],[11,"replace","","Replaces the contained value, and returns it.",285,[[]]],[11,"into_inner","","Unwraps the value.",285,[[]]],[11,"get","","Returns a copy of the contained value.",285,[[]]],[11,"update","","Updates the contained value using a function and returns …",285,[[]]],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",285,[[]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",285,[[]]],[11,"from_mut","","Returns a <code>&Cell<T></code> from a <code>&mut T</code>",285,[[],["cell",3]]],[11,"take","","Takes the value of the cell, leaving <code>Default::default()</code> …",285,[[]]],[11,"as_slice_of_cells","","Returns a <code>&[Cell<T>]</code> from a <code>&Cell<[T]></code>",285,[[]]],[11,"new","","Creates a new <code>RefCell</code> containing <code>value</code>.",286,[[],["refcell",3]]],[11,"into_inner","","Consumes the <code>RefCell</code>, returning the wrapped value.",286,[[]]],[11,"replace","","Replaces the wrapped value with a new one, returning the …",286,[[]]],[11,"replace_with","","Replaces the wrapped value with a new one computed from <code>f</code>…",286,[[]]],[11,"swap","","Swaps the wrapped value of <code>self</code> with the wrapped value of …",286,[[["refcell",3]]]],[11,"borrow","","Immutably borrows the wrapped value.",286,[[],["ref",3]]],[11,"try_borrow","","Immutably borrows the wrapped value, returning an error …",286,[[],[["borrowerror",3],["result",4],["ref",3]]]],[11,"borrow_mut","","Mutably borrows the wrapped value.",286,[[],["refmut",3]]],[11,"try_borrow_mut","","Mutably borrows the wrapped value, returning an error if …",286,[[],[["refmut",3],["borrowmuterror",3],["result",4]]]],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",286,[[]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",286,[[]]],[11,"undo_leak","","Undo the effect of leaked guards on the borrow state of …",286,[[]]],[11,"try_borrow_unguarded","","Immutably borrows the wrapped value, returning an error …",286,[[],[["borrowerror",3],["result",4]]]],[11,"take","","Takes the wrapped value, leaving <code>Default::default()</code> in …",286,[[]]],[11,"clone","","Copies a <code>Ref</code>.",289,[[["ref",3]],["ref",3]]],[11,"map","","Makes a new <code>Ref</code> for a component of the borrowed data.",289,[[["ref",3]],["ref",3]]],[11,"map_split","","Splits a <code>Ref</code> into multiple <code>Ref</code>s for different components …",289,[[["ref",3]]]],[11,"leak","","Convert into a reference to the underlying data.",289,[[["ref",3]]]],[11,"map","","Makes a new <code>RefMut</code> for a component of the borrowed data, …",290,[[["refmut",3]],["refmut",3]]],[11,"map_split","","Splits a <code>RefMut</code> into multiple <code>RefMut</code>s for different …",290,[[["refmut",3]]]],[11,"leak","","Convert into a mutable reference to the underlying data.",290,[[["refmut",3]]]],[11,"new","","Constructs a new instance of <code>UnsafeCell</code> which will wrap …",291,[[],["unsafecell",3]]],[11,"into_inner","","Unwraps the value.",291,[[]]],[11,"get","","Gets a mutable pointer to the wrapped value.",291,[[]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",291,[[]]],[11,"raw_get","","Gets a mutable pointer to the wrapped value. The …",291,[[]]],[11,"unpaired_surrogate","std::char","Returns the unpaired surrogate which caused this error.",300,[[]]],[11,"is_eq","std::cmp","Returns <code>true</code> if the ordering is the <code>Equal</code> variant.",28,[[]]],[11,"is_ne","","Returns <code>true</code> if the ordering is not the <code>Equal</code> variant.",28,[[]]],[11,"is_lt","","Returns <code>true</code> if the ordering is the <code>Less</code> variant.",28,[[]]],[11,"is_gt","","Returns <code>true</code> if the ordering is the <code>Greater</code> variant.",28,[[]]],[11,"is_le","","Returns <code>true</code> if the ordering is either the <code>Less</code> or <code>Equal</code> …",28,[[]]],[11,"is_ge","","Returns <code>true</code> if the ordering is either the <code>Greater</code> or …",28,[[]]],[11,"reverse","","Reverses the <code>Ordering</code>.",28,[[],["ordering",4]]],[11,"then","","Chains two orderings.",28,[[["ordering",4]],["ordering",4]]],[11,"then_with","","Chains the ordering with the given function.",28,[[],["ordering",4]]],[11,"new","std::hash","Creates a new <code>SipHasher</code> with the two initial keys set to …",303,[[],["siphasher",3]]],[11,"new_with_keys","","Creates a <code>SipHasher</code> that is keyed off the provided keys.",303,[[],["siphasher",3]]],[11,"peek","std::iter","Returns a reference to the next() value without advancing …",325,[[],["option",4]]],[11,"peek_mut","","Returns a mutable reference to the next() value without …",325,[[],["option",4]]],[11,"next_if","","Consume and return the next value of this iterator if a …",325,[[],["option",4]]],[11,"next_if_eq","","Consume and return the next item if it is equal to …",325,[[],["option",4]]],[11,"new","std::mem","Wrap a value to be manually dropped.",336,[[],["manuallydrop",3]]],[11,"into_inner","","Extracts the value from the <code>ManuallyDrop</code> container.",336,[[["manuallydrop",3]]]],[11,"take","","Takes the value from the <code>ManuallyDrop<T></code> container out.",336,[[["manuallydrop",3]]]],[11,"drop","","Manually drops the contained value. This is exactly …",336,[[["manuallydrop",3]]]],[11,"new","","Creates a new <code>MaybeUninit<T></code> initialized with the given …",337,[[],["maybeuninit",19]]],[11,"uninit","","Creates a new <code>MaybeUninit<T></code> in an uninitialized state.",337,[[],["maybeuninit",19]]],[11,"uninit_array","","Create a new array of <code>MaybeUninit<T></code> items, in an …",337,[[]]],[11,"zeroed","","Creates a new <code>MaybeUninit<T></code> in an uninitialized state, …",337,[[],["maybeuninit",19]]],[11,"write","","Sets the value of the <code>MaybeUninit<T></code>. This overwrites any …",337,[[]]],[11,"as_ptr","","Gets a pointer to the contained value. Reading from this …",337,[[]]],[11,"as_mut_ptr","","Gets a mutable pointer to the contained value. Reading …",337,[[]]],[11,"assume_init","","Extracts the value from the <code>MaybeUninit<T></code> container. …",337,[[]]],[11,"assume_init_read","","Reads the value from the <code>MaybeUninit<T></code> container. The …",337,[[]]],[11,"assume_init_drop","","Drops the contained value in place.",337,[[]]],[11,"assume_init_ref","","Gets a shared reference to the contained value.",337,[[]]],[11,"assume_init_mut","","Gets a mutable (unique) reference to the contained value.",337,[[]]],[11,"slice_assume_init_ref","","Assuming all the elements are initialized, get a slice to …",337,[[]]],[11,"slice_assume_init_mut","","Assuming all the elements are initialized, get a mutable …",337,[[]]],[11,"slice_as_ptr","","Gets a pointer to the first element of the array.",337,[[]]],[11,"slice_as_mut_ptr","","Gets a mutable pointer to the first element of the array.",337,[[]]],[11,"write_slice","","Copies the elements from <code>src</code> to <code>this</code>, returning a mutable …",337,[[]]],[11,"write_slice_cloned","","Clones the elements from <code>src</code> to <code>this</code>, returning a mutable …",337,[[]]],[11,"contains","std::ops","Returns <code>true</code> if <code>item</code> is contained in the range.",83,[[]]],[11,"is_empty","","Returns <code>true</code> if the range contains no items.",83,[[]]],[11,"contains","","Returns <code>true</code> if <code>item</code> is contained in the range.",84,[[]]],[11,"contains","","Returns <code>true</code> if <code>item</code> is contained in the range.",85,[[]]],[11,"cloned","","Map a <code>Bound<&T></code> to a <code>Bound<T></code> by cloning the contents of …",86,[[],["bound",4]]],[11,"new","","Creates a new inclusive range. Equivalent to writing …",339,[[],["rangeinclusive",3]]],[11,"start","","Returns the lower bound of the range (inclusive).",339,[[]]],[11,"end","","Returns the upper bound of the range (inclusive).",339,[[]]],[11,"into_inner","","Destructures the <code>RangeInclusive</code> into (lower bound, upper …",339,[[]]],[11,"contains","","Returns <code>true</code> if <code>item</code> is contained in the range.",339,[[]]],[11,"is_empty","","Returns <code>true</code> if the range contains no items.",339,[[]]],[11,"contains","","Returns <code>true</code> if <code>item</code> is contained in the range.",88,[[]]],[11,"is_break","","Returns <code>true</code> if this is a <code>Break</code> variant.",92,[[]]],[11,"is_continue","","Returns <code>true</code> if this is a <code>Continue</code> variant.",92,[[]]],[11,"break_value","","Converts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …",92,[[],["option",4]]],[11,"map_break","","Maps <code>ControlFlow<B, C></code> to <code>ControlFlow<T, C></code> by applying a …",92,[[],["controlflow",4]]],[11,"from_try","","Create a <code>ControlFlow</code> from any type implementing <code>Try</code>.",92,[[],["controlflow",4]]],[11,"into_try","","Convert a <code>ControlFlow</code> into any type implementing <code>Try</code>;",92,[[]]],[18,"CONTINUE","","It\'s frequently the case that there\'s no value needed …",92,null],[18,"BREAK","","APIs like <code>try_for_each</code> don\'t need values with <code>Break</code>, so …",92,null],[11,"is_some","std::option","Returns <code>true</code> if the option is a [<code>Some</code>] value.",93,[[]]],[11,"is_none","","Returns <code>true</code> if the option is a [<code>None</code>] value.",93,[[]]],[11,"contains","","Returns <code>true</code> if the option is a [<code>Some</code>] value containing …",93,[[]]],[11,"as_ref","","Converts from <code>&Option<T></code> to <code>Option<&T></code>.",93,[[],["option",4]]],[11,"as_mut","","Converts from <code>&mut Option<T></code> to <code>Option<&mut T></code>.",93,[[],["option",4]]],[11,"as_pin_ref","","Converts from [<code>Pin</code>]<code><&Option<T>></code> to <code>Option<</code>[<code>Pin</code>]<code><&T>></code>.",93,[[["option",4],["pin",3]],[["pin",3],["option",4]]]],[11,"as_pin_mut","","Converts from [<code>Pin</code>]<code><&mut Option<T>></code> to <code>Option<</code>[<code>Pin</code>]…",93,[[["option",4],["pin",3]],[["pin",3],["option",4]]]],[11,"expect","","Returns the contained [<code>Some</code>] value, consuming the <code>self</code> …",93,[[]]],[11,"unwrap","","Returns the contained [<code>Some</code>] value, consuming the <code>self</code> …",93,[[]]],[11,"unwrap_or","","Returns the contained [<code>Some</code>] value or a provided default.",93,[[]]],[11,"unwrap_or_else","","Returns the contained [<code>Some</code>] value or computes it from a …",93,[[]]],[11,"map","","Maps an <code>Option<T></code> to <code>Option<U></code> by applying a function to …",93,[[],["option",4]]],[11,"map_or","","Applies a function to the contained value (if any), or …",93,[[]]],[11,"map_or_else","","Applies a function to the contained value (if any), or …",93,[[]]],[11,"ok_or","","Transforms the <code>Option<T></code> into a <code>Result<T, E></code>, mapping …",93,[[],["result",4]]],[11,"ok_or_else","","Transforms the <code>Option<T></code> into a <code>Result<T, E></code>, mapping …",93,[[],["result",4]]],[11,"insert","","Inserts <code>value</code> into the option then returns a mutable …",93,[[]]],[11,"iter","","Returns an iterator over the possibly contained value.",93,[[],["iter",3]]],[11,"iter_mut","","Returns a mutable iterator over the possibly contained …",93,[[],["itermut",3]]],[11,"and","","Returns [<code>None</code>] if the option is [<code>None</code>], otherwise returns …",93,[[["option",4]],["option",4]]],[11,"and_then","","Returns [<code>None</code>] if the option is [<code>None</code>], otherwise calls <code>f</code> …",93,[[],["option",4]]],[11,"filter","","Returns [<code>None</code>] if the option is [<code>None</code>], otherwise calls …",93,[[],["option",4]]],[11,"or","","Returns the option if it contains a value, otherwise …",93,[[["option",4]],["option",4]]],[11,"or_else","","Returns the option if it contains a value, otherwise …",93,[[],["option",4]]],[11,"xor","","Returns [<code>Some</code>] if exactly one of <code>self</code>, <code>optb</code> is [<code>Some</code>], …",93,[[["option",4]],["option",4]]],[11,"get_or_insert","","Inserts <code>value</code> into the option if it is [<code>None</code>], then …",93,[[]]],[11,"get_or_insert_with","","Inserts a value computed from <code>f</code> into the option if it is […",93,[[]]],[11,"take","","Takes the value out of the option, leaving a [<code>None</code>] in …",93,[[],["option",4]]],[11,"replace","","Replaces the actual value in the option by the value …",93,[[],["option",4]]],[11,"zip","","Zips <code>self</code> with another <code>Option</code>.",93,[[["option",4]],["option",4]]],[11,"zip_with","","Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.",93,[[["option",4]],["option",4]]],[11,"copied","","Maps an <code>Option<&T></code> to an <code>Option<T></code> by copying the …",93,[[],["option",4]]],[11,"copied","","Maps an <code>Option<&mut T></code> to an <code>Option<T></code> by copying the …",93,[[],["option",4]]],[11,"cloned","","Maps an <code>Option<&T></code> to an <code>Option<T></code> by cloning the …",93,[[],["option",4]]],[11,"cloned","","Maps an <code>Option<&mut T></code> to an <code>Option<T></code> by cloning the …",93,[[],["option",4]]],[11,"expect_none","","Consumes <code>self</code> while expecting [<code>None</code>] and returning …",93,[[]]],[11,"unwrap_none","","Consumes <code>self</code> while expecting [<code>None</code>] and returning …",93,[[]]],[11,"unwrap_or_default","","Returns the contained [<code>Some</code>] value or a default",93,[[]]],[11,"as_deref","","Converts from <code>Option<T></code> (or <code>&Option<T></code>) to …",93,[[],["option",4]]],[11,"as_deref_mut","","Converts from <code>Option<T></code> (or <code>&mut Option<T></code>) to …",93,[[],["option",4]]],[11,"transpose","","Transposes an <code>Option</code> of a [<code>Result</code>] into a [<code>Result</code>] of an …",93,[[],[["result",4],["option",4]]]],[11,"flatten","","Converts from <code>Option<Option<T>></code> to <code>Option<T></code>",93,[[],["option",4]]],[11,"new","std::pin","Construct a new <code>Pin<P></code> around a pointer to some data of a …",344,[[],["pin",3]]],[11,"into_inner","","Unwraps this <code>Pin<P></code> returning the underlying pointer.",344,[[["pin",3]]]],[11,"new_unchecked","","Construct a new <code>Pin<P></code> around a reference to some data of …",344,[[],["pin",3]]],[11,"as_ref","","Gets a pinned shared reference from this pinned pointer.",344,[[],["pin",3]]],[11,"into_inner_unchecked","","Unwraps this <code>Pin<P></code> returning the underlying pointer.",344,[[["pin",3]]]],[11,"as_mut","","Gets a pinned mutable reference from this pinned pointer.",344,[[],["pin",3]]],[11,"set","","Assigns a new value to the memory behind the pinned …",344,[[]]],[11,"map_unchecked","","Constructs a new pin by mapping the interior value.",344,[[],["pin",3]]],[11,"get_ref","","Gets a shared reference out of a pin.",344,[[]]],[11,"into_ref","","Converts this <code>Pin<&mut T></code> into a <code>Pin<&T></code> with the same …",344,[[],["pin",3]]],[11,"get_mut","","Gets a mutable reference to the data inside of this <code>Pin</code>.",344,[[]]],[11,"get_unchecked_mut","","Gets a mutable reference to the data inside of this <code>Pin</code>.",344,[[]]],[11,"map_unchecked_mut","","Construct a new pin by mapping the interior value.",344,[[],["pin",3]]],[11,"static_ref","","Get a pinned reference from a static reference.",344,[[],["pin",3]]],[11,"static_mut","","Get a pinned mutable reference from a static mutable …",344,[[],["pin",3]]],[11,"dangling","std::ptr","Creates a new <code>NonNull</code> that is dangling, but well-aligned.",345,[[],["nonnull",3]]],[11,"as_uninit_ref","","Returns a shared references to the value. In contrast to …",345,[[],["maybeuninit",19]]],[11,"as_uninit_mut","","Returns a unique references to the value. In contrast to …",345,[[],["maybeuninit",19]]],[11,"new_unchecked","","Creates a new <code>NonNull</code>.",345,[[],["nonnull",3]]],[11,"new","","Creates a new <code>NonNull</code> if <code>ptr</code> is non-null.",345,[[],[["option",4],["nonnull",3]]]],[11,"as_ptr","","Acquires the underlying <code>*mut</code> pointer.",345,[[]]],[11,"as_ref","","Returns a shared reference to the value. If the value may …",345,[[]]],[11,"as_mut","","Returns a unique reference to the value. If the value may …",345,[[]]],[11,"cast","","Casts to a pointer of another type.",345,[[],["nonnull",3]]],[11,"slice_from_raw_parts","","Creates a non-null raw slice from a thin pointer and a …",345,[[["nonnull",3]],["nonnull",3]]],[11,"len","","Returns the length of a non-null raw slice.",345,[[]]],[11,"as_non_null_ptr","","Returns a non-null pointer to the slice\'s buffer.",345,[[],["nonnull",3]]],[11,"as_mut_ptr","","Returns a raw pointer to the slice\'s buffer.",345,[[]]],[11,"as_uninit_slice","","Returns a shared reference to a slice of possibly …",345,[[]]],[11,"as_uninit_slice_mut","","Returns a unique reference to a slice of possibly …",345,[[]]],[11,"get_unchecked_mut","","Returns a raw pointer to an element or subslice, without …",345,[[],["nonnull",3]]],[11,"is_ok","std::result","Returns <code>true</code> if the result is [<code>Ok</code>].",95,[[]]],[11,"is_err","","Returns <code>true</code> if the result is [<code>Err</code>].",95,[[]]],[11,"contains","","Returns <code>true</code> if the result is an [<code>Ok</code>] value containing …",95,[[]]],[11,"contains_err","","Returns <code>true</code> if the result is an [<code>Err</code>] value containing …",95,[[]]],[11,"ok","","Converts from <code>Result<T, E></code> to <code>Option<T></code>.",95,[[],["option",4]]],[11,"err","","Converts from <code>Result<T, E></code> to <code>Option<E></code>.",95,[[],["option",4]]],[11,"as_ref","","Converts from <code>&Result<T, E></code> to <code>Result<&T, &E></code>.",95,[[],["result",4]]],[11,"as_mut","","Converts from <code>&mut Result<T, E></code> to <code>Result<&mut T, &mut E></code>.",95,[[],["result",4]]],[11,"map","","Maps a <code>Result<T, E></code> to <code>Result<U, E></code> by applying a …",95,[[],["result",4]]],[11,"map_or","","Applies a function to the contained value (if [<code>Ok</code>]), or …",95,[[]]],[11,"map_or_else","","Maps a <code>Result<T, E></code> to <code>U</code> by applying a function to a …",95,[[]]],[11,"map_err","","Maps a <code>Result<T, E></code> to <code>Result<T, F></code> by applying a …",95,[[],["result",4]]],[11,"iter","","Returns an iterator over the possibly contained value.",95,[[],["iter",3]]],[11,"iter_mut","","Returns a mutable iterator over the possibly contained …",95,[[],["itermut",3]]],[11,"and","","Returns <code>res</code> if the result is [<code>Ok</code>], otherwise returns the […",95,[[["result",4]],["result",4]]],[11,"and_then","","Calls <code>op</code> if the result is [<code>Ok</code>], otherwise returns the [<code>Err</code>…",95,[[],["result",4]]],[11,"or","","Returns <code>res</code> if the result is [<code>Err</code>], otherwise returns the …",95,[[["result",4]],["result",4]]],[11,"or_else","","Calls <code>op</code> if the result is [<code>Err</code>], otherwise returns the [<code>Ok</code>…",95,[[],["result",4]]],[11,"unwrap_or","","Returns the contained [<code>Ok</code>] value or a provided default.",95,[[]]],[11,"unwrap_or_else","","Returns the contained [<code>Ok</code>] value or computes it from a …",95,[[]]],[11,"copied","","Maps a <code>Result<&T, E></code> to a <code>Result<T, E></code> by copying the …",95,[[],["result",4]]],[11,"copied","","Maps a <code>Result<&mut T, E></code> to a <code>Result<T, E></code> by copying the …",95,[[],["result",4]]],[11,"cloned","","Maps a <code>Result<&T, E></code> to a <code>Result<T, E></code> by cloning the …",95,[[],["result",4]]],[11,"cloned","","Maps a <code>Result<&mut T, E></code> to a <code>Result<T, E></code> by cloning the …",95,[[],["result",4]]],[11,"expect","","Returns the contained [<code>Ok</code>] value, consuming the <code>self</code> …",95,[[]]],[11,"unwrap","","Returns the contained [<code>Ok</code>] value, consuming the <code>self</code> …",95,[[]]],[11,"expect_err","","Returns the contained [<code>Err</code>] value, consuming the <code>self</code> …",95,[[]]],[11,"unwrap_err","","Returns the contained [<code>Err</code>] value, consuming the <code>self</code> …",95,[[]]],[11,"unwrap_or_default","","Returns the contained [<code>Ok</code>] value or a default",95,[[]]],[11,"into_ok","","Returns the contained [<code>Ok</code>] value, but never panics.",95,[[]]],[11,"as_deref","","Converts from <code>Result<T, E></code> (or <code>&Result<T, E></code>) to …",95,[[],["result",4]]],[11,"as_deref_mut","","Converts from <code>Result<T, E></code> (or <code>&mut Result<T, E></code>) to …",95,[[],["result",4]]],[11,"transpose","","Transposes a <code>Result</code> of an <code>Option</code> into an <code>Option</code> of a …",95,[[],[["option",4],["result",4]]]],[11,"flatten","","Converts from <code>Result<Result<T, E>, E></code> to <code>Result<T, E></code>",95,[[],["result",4]]],[11,"floor","std","Returns the largest integer less than or equal to a …",554,[[]]],[11,"ceil","","Returns the smallest integer greater than or equal to a …",554,[[]]],[11,"round","","Returns the nearest integer to a number. Round half-way …",554,[[]]],[11,"trunc","","Returns the integer part of a number.",554,[[]]],[11,"fract","","Returns the fractional part of a number.",554,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>. Returns <code>NAN</code> if the …",554,[[]]],[11,"signum","","Returns a number that represents the sign of <code>self</code>.",554,[[]]],[11,"copysign","","Returns a number composed of the magnitude of <code>self</code> and …",554,[[]]],[11,"mul_add","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …",554,[[]]],[11,"div_euclid","","Calculates Euclidean division, the matching method for …",554,[[]]],[11,"rem_euclid","","Calculates the least nonnegative remainder of …",554,[[]]],[11,"powi","","Raises a number to an integer power.",554,[[]]],[11,"powf","","Raises a number to a floating point power.",554,[[]]],[11,"sqrt","","Returns the square root of a number.",554,[[]]],[11,"exp","","Returns <code>e^(self)</code>, (the exponential function).",554,[[]]],[11,"exp2","","Returns <code>2^(self)</code>.",554,[[]]],[11,"ln","","Returns the natural logarithm of the number.",554,[[]]],[11,"log","","Returns the logarithm of the number with respect to an …",554,[[]]],[11,"log2","","Returns the base 2 logarithm of the number.",554,[[]]],[11,"log10","","Returns the base 10 logarithm of the number.",554,[[]]],[11,"abs_sub","","The positive difference of two numbers.",554,[[]]],[11,"cbrt","","Returns the cubic root of a number.",554,[[]]],[11,"hypot","","Calculates the length of the hypotenuse of a right-angle …",554,[[]]],[11,"sin","","Computes the sine of a number (in radians).",554,[[]]],[11,"cos","","Computes the cosine of a number (in radians).",554,[[]]],[11,"tan","","Computes the tangent of a number (in radians).",554,[[]]],[11,"asin","","Computes the arcsine of a number. Return value is in …",554,[[]]],[11,"acos","","Computes the arccosine of a number. Return value is in …",554,[[]]],[11,"atan","","Computes the arctangent of a number. Return value is in …",554,[[]]],[11,"atan2","","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …",554,[[]]],[11,"sin_cos","","Simultaneously computes the sine and cosine of the …",554,[[]]],[11,"exp_m1","","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…",554,[[]]],[11,"ln_1p","","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …",554,[[]]],[11,"sinh","","Hyperbolic sine function.",554,[[]]],[11,"cosh","","Hyperbolic cosine function.",554,[[]]],[11,"tanh","","Hyperbolic tangent function.",554,[[]]],[11,"asinh","","Inverse hyperbolic sine function.",554,[[]]],[11,"acosh","","Inverse hyperbolic cosine function.",554,[[]]],[11,"atanh","","Inverse hyperbolic tangent function.",554,[[]]],[11,"floor","","Returns the largest integer less than or equal to a …",555,[[]]],[11,"ceil","","Returns the smallest integer greater than or equal to a …",555,[[]]],[11,"round","","Returns the nearest integer to a number. Round half-way …",555,[[]]],[11,"trunc","","Returns the integer part of a number.",555,[[]]],[11,"fract","","Returns the fractional part of a number.",555,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>. Returns <code>NAN</code> if the …",555,[[]]],[11,"signum","","Returns a number that represents the sign of <code>self</code>.",555,[[]]],[11,"copysign","","Returns a number composed of the magnitude of <code>self</code> and …",555,[[]]],[11,"mul_add","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …",555,[[]]],[11,"div_euclid","","Calculates Euclidean division, the matching method for …",555,[[]]],[11,"rem_euclid","","Calculates the least nonnegative remainder of …",555,[[]]],[11,"powi","","Raises a number to an integer power.",555,[[]]],[11,"powf","","Raises a number to a floating point power.",555,[[]]],[11,"sqrt","","Returns the square root of a number.",555,[[]]],[11,"exp","","Returns <code>e^(self)</code>, (the exponential function).",555,[[]]],[11,"exp2","","Returns <code>2^(self)</code>.",555,[[]]],[11,"ln","","Returns the natural logarithm of the number.",555,[[]]],[11,"log","","Returns the logarithm of the number with respect to an …",555,[[]]],[11,"log2","","Returns the base 2 logarithm of the number.",555,[[]]],[11,"log10","","Returns the base 10 logarithm of the number.",555,[[]]],[11,"abs_sub","","The positive difference of two numbers.",555,[[]]],[11,"cbrt","","Returns the cubic root of a number.",555,[[]]],[11,"hypot","","Calculates the length of the hypotenuse of a right-angle …",555,[[]]],[11,"sin","","Computes the sine of a number (in radians).",555,[[]]],[11,"cos","","Computes the cosine of a number (in radians).",555,[[]]],[11,"tan","","Computes the tangent of a number (in radians).",555,[[]]],[11,"asin","","Computes the arcsine of a number. Return value is in …",555,[[]]],[11,"acos","","Computes the arccosine of a number. Return value is in …",555,[[]]],[11,"atan","","Computes the arctangent of a number. Return value is in …",555,[[]]],[11,"atan2","","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …",555,[[]]],[11,"sin_cos","","Simultaneously computes the sine and cosine of the …",555,[[]]],[11,"exp_m1","","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…",555,[[]]],[11,"ln_1p","","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …",555,[[]]],[11,"sinh","","Hyperbolic sine function.",555,[[]]],[11,"cosh","","Hyperbolic cosine function.",555,[[]]],[11,"tanh","","Hyperbolic tangent function.",555,[[]]],[11,"asinh","","Inverse hyperbolic sine function.",555,[[]]],[11,"acosh","","Inverse hyperbolic cosine function.",555,[[]]],[11,"atanh","","Inverse hyperbolic tangent function.",555,[[]]],[11,"with","std::thread","Acquires a reference to the value in this TLS key.",349,[[]]],[11,"try_with","","Acquires a reference to the value in this TLS key.",349,[[],[["accesserror",3],["result",4]]]],[11,"new","std::collections","Creates an empty <code>BinaryHeap</code> as a max-heap.",352,[[],["binaryheap",3]]],[11,"with_capacity","","Creates an empty <code>BinaryHeap</code> with a specific capacity. …",352,[[],["binaryheap",3]]],[11,"peek_mut","","Returns a mutable reference to the greatest item in the …",352,[[],[["peekmut",3],["option",4]]]],[11,"pop","","Removes the greatest item from the binary heap and …",352,[[],["option",4]]],[11,"push","","Pushes an item onto the binary heap.",352,[[]]],[11,"into_sorted_vec","","Consumes the <code>BinaryHeap</code> and returns a vector in sorted …",352,[[],[["vec",3],["global",3]]]],[11,"append","","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …",352,[[["binaryheap",3]]]],[11,"drain_sorted","","Returns an iterator which retrieves elements in heap …",352,[[],["drainsorted",3]]],[11,"retain","","Retains only the elements specified by the predicate.",352,[[]]],[11,"iter","","Returns an iterator visiting all values in the underlying …",352,[[],["iter",3]]],[11,"into_iter_sorted","","Returns an iterator which retrieves elements in heap …",352,[[],["intoitersorted",3]]],[11,"peek","","Returns the greatest item in the binary heap, or <code>None</code> if …",352,[[],["option",4]]],[11,"capacity","","Returns the number of elements the binary heap can hold …",352,[[]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly <code>additional</code> more …",352,[[]]],[11,"reserve","","Reserves capacity for at least <code>additional</code> more elements …",352,[[]]],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",352,[[]]],[11,"shrink_to","","Discards capacity with a lower bound.",352,[[]]],[11,"into_vec","","Consumes the <code>BinaryHeap</code> and returns the underlying vector …",352,[[],[["vec",3],["global",3]]]],[11,"len","","Returns the length of the binary heap.",352,[[]]],[11,"is_empty","","Checks if the binary heap is empty.",352,[[]]],[11,"drain","","Clears the binary heap, returning an iterator over the …",352,[[],["drain",3]]],[11,"clear","","Drops all items from the binary heap.",352,[[]]],[11,"pop","std::collections::binary_heap","Removes the peeked value from the heap and returns it.",353,[[["peekmut",3]]]],[11,"or_insert","std::collections::btree_map","Ensures a value is in the entry by inserting the default …",103,[[]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result …",103,[[]]],[11,"or_insert_with_key","","Ensures a value is in the entry by inserting, if empty, …",103,[[]]],[11,"key","","Returns a reference to this entry\'s key.",103,[[]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry …",103,[[],["entry",4]]],[11,"or_default","","Ensures a value is in the entry by inserting the default …",103,[[]]],[11,"key","","Gets a reference to the key in the entry.",359,[[]]],[11,"remove_entry","","Take ownership of the key and value from the map.",359,[[]]],[11,"get","","Gets a reference to the value in the entry.",359,[[]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",359,[[]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",359,[[]]],[11,"insert","","Sets the value of the entry with the <code>OccupiedEntry</code>\'s key, …",359,[[]]],[11,"remove","","Takes the value of the entry out of the map, and returns …",359,[[]]],[11,"key","","Gets a reference to the key that would be used when …",360,[[]]],[11,"into_key","","Take ownership of the key.",360,[[]]],[11,"insert","","Sets the value of the entry with the <code>VacantEntry</code>\'s key, …",360,[[]]],[11,"new","std::collections","Makes a new, empty <code>BTreeMap</code>.",361,[[],["btreemap",3]]],[11,"clear","","Clears the map, removing all elements.",361,[[]]],[11,"get","","Returns a reference to the value corresponding to the key.",361,[[],["option",4]]],[11,"get_key_value","","Returns the key-value pair corresponding to the supplied …",361,[[],["option",4]]],[11,"first_key_value","","Returns the first key-value pair in the map. The key in …",361,[[],["option",4]]],[11,"first_entry","","Returns the first entry in the map for in-place …",361,[[],[["occupiedentry",3],["option",4]]]],[11,"pop_first","","Removes and returns the first element in the map. The key …",361,[[],["option",4]]],[11,"last_key_value","","Returns the last key-value pair in the map. The key in …",361,[[],["option",4]]],[11,"last_entry","","Returns the last entry in the map for in-place …",361,[[],[["occupiedentry",3],["option",4]]]],[11,"pop_last","","Removes and returns the last element in the map. The key …",361,[[],["option",4]]],[11,"contains_key","","Returns <code>true</code> if the map contains a value for the …",361,[[]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to …",361,[[],["option",4]]],[11,"insert","","Inserts a key-value pair into the map.",361,[[],["option",4]]],[11,"remove","","Removes a key from the map, returning the value at the …",361,[[],["option",4]]],[11,"remove_entry","","Removes a key from the map, returning the stored key and …",361,[[],["option",4]]],[11,"retain","","Retains only the elements specified by the predicate.",361,[[]]],[11,"append","","Moves all elements from <code>other</code> into <code>Self</code>, leaving <code>other</code> …",361,[[["btreemap",3]]]],[11,"range","","Constructs a double-ended iterator over a sub-range of …",361,[[],["range",3]]],[11,"range_mut","","Constructs a mutable double-ended iterator over a …",361,[[],["rangemut",3]]],[11,"entry","","Gets the given key\'s corresponding entry in the map for …",361,[[],["entry",4]]],[11,"split_off","","Splits the collection into two at the given key. Returns …",361,[[],["btreemap",3]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if …",361,[[],["drainfilter",3]]],[11,"into_keys","","Creates a consuming iterator visiting all the keys, in …",361,[[],["intokeys",3]]],[11,"into_values","","Creates a consuming iterator visiting all the values, in …",361,[[],["intovalues",3]]],[11,"iter","","Gets an iterator over the entries of the map, sorted by …",361,[[],["iter",3]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, …",361,[[],["itermut",3]]],[11,"keys","","Gets an iterator over the keys of the map, in sorted …",361,[[],["keys",3]]],[11,"values","","Gets an iterator over the values of the map, in order by …",361,[[],["values",3]]],[11,"values_mut","","Gets a mutable iterator over the values of the map, in …",361,[[],["valuesmut",3]]],[11,"len","","Returns the number of elements in the map.",361,[[]]],[11,"is_empty","","Returns <code>true</code> if the map contains no elements.",361,[[]]],[11,"new","","Makes a new, empty <code>BTreeSet</code>.",379,[[],["btreeset",3]]],[11,"range","","Constructs a double-ended iterator over a sub-range of …",379,[[],["range",3]]],[11,"difference","","Visits the values representing the difference, i.e., the …",379,[[["btreeset",3]],["difference",3]]],[11,"symmetric_difference","","Visits the values representing the symmetric difference, …",379,[[["btreeset",3]],["symmetricdifference",3]]],[11,"intersection","","Visits the values representing the intersection, i.e., …",379,[[["btreeset",3]],["intersection",3]]],[11,"union","","Visits the values representing the union, i.e., all the …",379,[[["btreeset",3]],["union",3]]],[11,"clear","","Clears the set, removing all values.",379,[[]]],[11,"contains","","Returns <code>true</code> if the set contains a value.",379,[[]]],[11,"get","","Returns a reference to the value in the set, if any, that …",379,[[],["option",4]]],[11,"is_disjoint","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.…",379,[[["btreeset",3]]]],[11,"is_subset","","Returns <code>true</code> if the set is a subset of another, i.e., …",379,[[["btreeset",3]]]],[11,"is_superset","","Returns <code>true</code> if the set is a superset of another, i.e., …",379,[[["btreeset",3]]]],[11,"first","","Returns a reference to the first value in the set, if any.…",379,[[],["option",4]]],[11,"last","","Returns a reference to the last value in the set, if any. …",379,[[],["option",4]]],[11,"pop_first","","Removes the first value from the set and returns it, if …",379,[[],["option",4]]],[11,"pop_last","","Removes the last value from the set and returns it, if …",379,[[],["option",4]]],[11,"insert","","Adds a value to the set.",379,[[]]],[11,"replace","","Adds a value to the set, replacing the existing value, if …",379,[[],["option",4]]],[11,"remove","","Removes a value from the set. Returns whether the value …",379,[[]]],[11,"take","","Removes and returns the value in the set, if any, that is …",379,[[],["option",4]]],[11,"retain","","Retains only the elements specified by the predicate.",379,[[]]],[11,"append","","Moves all elements from <code>other</code> into <code>Self</code>, leaving <code>other</code> …",379,[[["btreeset",3]]]],[11,"split_off","","Splits the collection into two at the given key. Returns …",379,[[],["btreeset",3]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if …",379,[[],["drainfilter",3]]],[11,"iter","","Gets an iterator that visits the values in the <code>BTreeSet</code> …",379,[[],["iter",3]]],[11,"len","","Returns the number of elements in the set.",379,[[]]],[11,"is_empty","","Returns <code>true</code> if the set contains no elements.",379,[[]]],[11,"new","","Creates an empty <code>LinkedList</code>.",382,[[],["linkedlist",3]]],[11,"append","","Moves all elements from <code>other</code> to the end of the list.",382,[[["linkedlist",3]]]],[11,"prepend","","Moves all elements from <code>other</code> to the begin of the list.",382,[[["linkedlist",3]]]],[11,"iter","","Provides a forward iterator.",382,[[],["iter",3]]],[11,"iter_mut","","Provides a forward iterator with mutable references.",382,[[],["itermut",3]]],[11,"cursor_front","","Provides a cursor at the front element.",382,[[],["cursor",3]]],[11,"cursor_front_mut","","Provides a cursor with editing operations at the front …",382,[[],["cursormut",3]]],[11,"cursor_back","","Provides a cursor at the back element.",382,[[],["cursor",3]]],[11,"cursor_back_mut","","Provides a cursor with editing operations at the back …",382,[[],["cursormut",3]]],[11,"is_empty","","Returns <code>true</code> if the <code>LinkedList</code> is empty.",382,[[]]],[11,"len","","Returns the length of the <code>LinkedList</code>.",382,[[]]],[11,"clear","","Removes all elements from the <code>LinkedList</code>.",382,[[]]],[11,"contains","","Returns <code>true</code> if the <code>LinkedList</code> contains an element equal …",382,[[]]],[11,"front","","Provides a reference to the front element, or <code>None</code> if the …",382,[[],["option",4]]],[11,"front_mut","","Provides a mutable reference to the front element, or <code>None</code>…",382,[[],["option",4]]],[11,"back","","Provides a reference to the back element, or <code>None</code> if the …",382,[[],["option",4]]],[11,"back_mut","","Provides a mutable reference to the back element, or <code>None</code> …",382,[[],["option",4]]],[11,"push_front","","Adds an element first in the list.",382,[[]]],[11,"pop_front","","Removes the first element and returns it, or <code>None</code> if the …",382,[[],["option",4]]],[11,"push_back","","Appends an element to the back of a list.",382,[[]]],[11,"pop_back","","Removes the last element from a list and returns it, or …",382,[[],["option",4]]],[11,"split_off","","Splits the list into two at the given index. Returns …",382,[[],["linkedlist",3]]],[11,"remove","","Removes the element at the given index and returns it.",382,[[]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if …",382,[[],["drainfilter",3]]],[11,"index","std::collections::linked_list","Returns the cursor position index within the <code>LinkedList</code>.",386,[[],["option",4]]],[11,"move_next","","Moves the cursor to the next element of the <code>LinkedList</code>.",386,[[]]],[11,"move_prev","","Moves the cursor to the previous element of the <code>LinkedList</code>…",386,[[]]],[11,"current","","Returns a reference to the element that the cursor is …",386,[[],["option",4]]],[11,"peek_next","","Returns a reference to the next element.",386,[[],["option",4]]],[11,"peek_prev","","Returns a reference to the previous element.",386,[[],["option",4]]],[11,"index","","Returns the cursor position index within the <code>LinkedList</code>.",387,[[],["option",4]]],[11,"move_next","","Moves the cursor to the next element of the <code>LinkedList</code>.",387,[[]]],[11,"move_prev","","Moves the cursor to the previous element of the <code>LinkedList</code>…",387,[[]]],[11,"current","","Returns a reference to the element that the cursor is …",387,[[],["option",4]]],[11,"peek_next","","Returns a reference to the next element.",387,[[],["option",4]]],[11,"peek_prev","","Returns a reference to the previous element.",387,[[],["option",4]]],[11,"as_cursor","","Returns a read-only cursor pointing to the current …",387,[[],["cursor",3]]],[11,"insert_after","","Inserts a new element into the <code>LinkedList</code> after the …",387,[[]]],[11,"insert_before","","Inserts a new element into the <code>LinkedList</code> before the …",387,[[]]],[11,"remove_current","","Removes the current element from the <code>LinkedList</code>.",387,[[],["option",4]]],[11,"remove_current_as_list","","Removes the current element from the <code>LinkedList</code> without …",387,[[],[["linkedlist",3],["option",4]]]],[11,"splice_after","","Inserts the elements from the given <code>LinkedList</code> after the …",387,[[["linkedlist",3]]]],[11,"splice_before","","Inserts the elements from the given <code>LinkedList</code> before the …",387,[[["linkedlist",3]]]],[11,"split_after","","Splits the list into two after the current element. This …",387,[[],["linkedlist",3]]],[11,"split_before","","Splits the list into two before the current element. This …",387,[[],["linkedlist",3]]],[11,"new","std::collections","Creates an empty <code>VecDeque</code>.",389,[[],["vecdeque",3]]],[11,"with_capacity","","Creates an empty <code>VecDeque</code> with space for at least <code>capacity</code>…",389,[[],["vecdeque",3]]],[11,"get","","Provides a reference to the element at the given index.",389,[[],["option",4]]],[11,"get_mut","","Provides a mutable reference to the element at the given …",389,[[],["option",4]]],[11,"swap","","Swaps elements at indices <code>i</code> and <code>j</code>.",389,[[]]],[11,"capacity","","Returns the number of elements the <code>VecDeque</code> can hold …",389,[[]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly <code>additional</code> more …",389,[[]]],[11,"reserve","","Reserves capacity for at least <code>additional</code> more elements …",389,[[]]],[11,"try_reserve_exact","","Tries to reserve the minimum capacity for exactly …",389,[[],[["result",4],["tryreserveerror",4]]]],[11,"try_reserve","","Tries to reserve capacity for at least <code>additional</code> more …",389,[[],[["result",4],["tryreserveerror",4]]]],[11,"shrink_to_fit","","Shrinks the capacity of the <code>VecDeque</code> as much as possible.",389,[[]]],[11,"shrink_to","","Shrinks the capacity of the <code>VecDeque</code> with a lower bound.",389,[[]]],[11,"truncate","","Shortens the <code>VecDeque</code>, keeping the first <code>len</code> elements and …",389,[[]]],[11,"iter","","Returns a front-to-back iterator.",389,[[],["iter",3]]],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable …",389,[[],["itermut",3]]],[11,"as_slices","","Returns a pair of slices which contain, in order, the …",389,[[]]],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the …",389,[[]]],[11,"len","","Returns the number of elements in the <code>VecDeque</code>.",389,[[]]],[11,"is_empty","","Returns <code>true</code> if the <code>VecDeque</code> is empty.",389,[[]]],[11,"range","","Creates an iterator that covers the specified range in …",389,[[],["iter",3]]],[11,"range_mut","","Creates an iterator that covers the specified mutable …",389,[[],["itermut",3]]],[11,"drain","","Creates a draining iterator that removes the specified …",389,[[],["drain",3]]],[11,"clear","","Clears the <code>VecDeque</code>, removing all values.",389,[[]]],[11,"contains","","Returns <code>true</code> if the <code>VecDeque</code> contains an element equal to …",389,[[]]],[11,"front","","Provides a reference to the front element, or <code>None</code> if the …",389,[[],["option",4]]],[11,"front_mut","","Provides a mutable reference to the front element, or <code>None</code>…",389,[[],["option",4]]],[11,"back","","Provides a reference to the back element, or <code>None</code> if the …",389,[[],["option",4]]],[11,"back_mut","","Provides a mutable reference to the back element, or <code>None</code> …",389,[[],["option",4]]],[11,"pop_front","","Removes the first element and returns it, or <code>None</code> if the …",389,[[],["option",4]]],[11,"pop_back","","Removes the last element from the <code>VecDeque</code> and returns …",389,[[],["option",4]]],[11,"push_front","","Prepends an element to the <code>VecDeque</code>.",389,[[]]],[11,"push_back","","Appends an element to the back of the <code>VecDeque</code>.",389,[[]]],[11,"swap_remove_front","","Removes an element from anywhere in the <code>VecDeque</code> and …",389,[[],["option",4]]],[11,"swap_remove_back","","Removes an element from anywhere in the <code>VecDeque</code> and …",389,[[],["option",4]]],[11,"insert","","Inserts an element at <code>index</code> within the <code>VecDeque</code>, shifting …",389,[[]]],[11,"remove","","Removes and returns the element at <code>index</code> from the <code>VecDeque</code>…",389,[[],["option",4]]],[11,"split_off","","Splits the <code>VecDeque</code> into two at the given index.",389,[[],["vecdeque",3]]],[11,"append","","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …",389,[[["vecdeque",3]]]],[11,"retain","","Retains only the elements specified by the predicate.",389,[[]]],[11,"resize_with","","Modifies the <code>VecDeque</code> in-place so that <code>len()</code> is equal to …",389,[[]]],[11,"make_contiguous","","Rearranges the internal storage of this deque so it is …",389,[[]]],[11,"rotate_left","","Rotates the double-ended queue <code>mid</code> places to the left.",389,[[]]],[11,"rotate_right","","Rotates the double-ended queue <code>k</code> places to the right.",389,[[]]],[11,"binary_search","","Binary searches this sorted <code>VecDeque</code> for a given element.",389,[[],["result",4]]],[11,"binary_search_by","","Binary searches this sorted <code>VecDeque</code> with a comparator …",389,[[],["result",4]]],[11,"binary_search_by_key","","Binary searches this sorted <code>VecDeque</code> with a key …",389,[[],["result",4]]],[11,"resize","","Modifies the <code>VecDeque</code> in-place so that <code>len()</code> is equal to …",389,[[]]],[11,"new","std::collections::hash_map","Creates an empty <code>HashMap</code>.",394,[[],[["hashmap",3],["randomstate",3]]]],[11,"with_capacity","","Creates an empty <code>HashMap</code> with the specified capacity.",394,[[],[["hashmap",3],["randomstate",3]]]],[11,"with_hasher","","Creates an empty <code>HashMap</code> which will use the given hash …",394,[[],["hashmap",3]]],[11,"with_capacity_and_hasher","","Creates an empty <code>HashMap</code> with the specified capacity, …",394,[[],["hashmap",3]]],[11,"capacity","","Returns the number of elements the map can hold without …",394,[[]]],[11,"keys","","An iterator visiting all keys in arbitrary order. The …",394,[[],["keys",3]]],[11,"values","","An iterator visiting all values in arbitrary order. The …",394,[[],["values",3]]],[11,"values_mut","","An iterator visiting all values mutably in arbitrary …",394,[[],["valuesmut",3]]],[11,"iter","","An iterator visiting all key-value pairs in arbitrary …",394,[[],["iter",3]]],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary …",394,[[],["itermut",3]]],[11,"len","","Returns the number of elements in the map.",394,[[]]],[11,"is_empty","","Returns <code>true</code> if the map contains no elements.",394,[[]]],[11,"drain","","Clears the map, returning all key-value pairs as an …",394,[[],["drain",3]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if …",394,[[],["drainfilter",3]]],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the …",394,[[]]],[11,"hasher","","Returns a reference to the map\'s [<code>BuildHasher</code>].",394,[[]]],[11,"reserve","","Reserves capacity for at least <code>additional</code> more elements …",394,[[]]],[11,"try_reserve","","Tries to reserve capacity for at least <code>additional</code> more …",394,[[],[["tryreserveerror",4],["result",4]]]],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It …",394,[[]]],[11,"shrink_to","","Shrinks the capacity of the map with a lower limit. It …",394,[[]]],[11,"entry","","Gets the given key\'s corresponding entry in the map for …",394,[[],["entry",4]]],[11,"get","","Returns a reference to the value corresponding to the key.",394,[[],["option",4]]],[11,"get_key_value","","Returns the key-value pair corresponding to the supplied …",394,[[],["option",4]]],[11,"contains_key","","Returns <code>true</code> if the map contains a value for the …",394,[[]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to …",394,[[],["option",4]]],[11,"insert","","Inserts a key-value pair into the map.",394,[[],["option",4]]],[11,"remove","","Removes a key from the map, returning the value at the …",394,[[],["option",4]]],[11,"remove_entry","","Removes a key from the map, returning the stored key and …",394,[[],["option",4]]],[11,"retain","","Retains only the elements specified by the predicate.",394,[[]]],[11,"into_keys","","Creates a consuming iterator visiting all the keys in …",394,[[],["intokeys",3]]],[11,"into_values","","Creates a consuming iterator visiting all the values in …",394,[[],["intovalues",3]]],[11,"raw_entry_mut","","Creates a raw entry builder for the HashMap.",394,[[],["rawentrybuildermut",3]]],[11,"raw_entry","","Creates a raw immutable entry builder for the HashMap.",394,[[],["rawentrybuilder",3]]],[11,"from_key","","Creates a <code>RawEntryMut</code> from the given key.",405,[[],["rawentrymut",4]]],[11,"from_key_hashed_nocheck","","Creates a <code>RawEntryMut</code> from the given key and its hash.",405,[[],["rawentrymut",4]]],[11,"from_hash","","Creates a <code>RawEntryMut</code> from the given hash.",405,[[],["rawentrymut",4]]],[11,"from_key","","Access an entry by key.",408,[[],["option",4]]],[11,"from_key_hashed_nocheck","","Access an entry by a key and its hash.",408,[[],["option",4]]],[11,"from_hash","","Access an entry by hash.",408,[[],["option",4]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default …",106,[[]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result …",106,[[]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry …",106,[[]]],[11,"key","","Gets a reference to the key in the entry.",406,[[]]],[11,"key_mut","","Gets a mutable reference to the key in the entry.",406,[[]]],[11,"into_key","","Converts the entry into a mutable reference to the key in …",406,[[]]],[11,"get","","Gets a reference to the value in the entry.",406,[[]]],[11,"into_mut","","Converts the <code>OccupiedEntry</code> into a mutable reference to …",406,[[]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",406,[[]]],[11,"get_key_value","","Gets a reference to the key and value in the entry.",406,[[]]],[11,"get_key_value_mut","","Gets a mutable reference to the key and value in the …",406,[[]]],[11,"into_key_value","","Converts the <code>OccupiedEntry</code> into a mutable reference to …",406,[[]]],[11,"insert","","Sets the value of the entry, and returns the entry\'s old …",406,[[]]],[11,"insert_key","","Sets the value of the entry, and returns the entry\'s old …",406,[[]]],[11,"remove","","Takes the value out of the entry, and returns it.",406,[[]]],[11,"remove_entry","","Take the ownership of the key and value from the map.",406,[[]]],[11,"insert","","Sets the value of the entry with the <code>VacantEntry</code>\'s key, …",407,[[]]],[11,"insert_hashed_nocheck","","Sets the value of the entry with the VacantEntry\'s key, …",407,[[]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default …",107,[[]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result …",107,[[["fnonce",8]]]],[11,"or_insert_with_key","","Ensures a value is in the entry by inserting, if empty, …",107,[[["fnonce",8]]]],[11,"key","","Returns a reference to this entry\'s key.",107,[[]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry …",107,[[]]],[11,"insert","","Sets the value of the entry, and returns an <code>OccupiedEntry</code>.",107,[[],["occupiedentry",3]]],[11,"or_default","","Ensures a value is in the entry by inserting the default …",107,[[]]],[11,"key","","Gets a reference to the key in the entry.",409,[[]]],[11,"remove_entry","","Take the ownership of the key and value from the map.",409,[[]]],[11,"get","","Gets a reference to the value in the entry.",409,[[]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",409,[[]]],[11,"into_mut","","Converts the <code>OccupiedEntry</code> into a mutable reference to …",409,[[]]],[11,"insert","","Sets the value of the entry, and returns the entry\'s old …",409,[[]]],[11,"remove","","Takes the value out of the entry, and returns it.",409,[[]]],[11,"replace_entry","","Replaces the entry, returning the old key and value. The …",409,[[]]],[11,"replace_key","","Replaces the key in the hash map with the key used to …",409,[[]]],[11,"key","","Gets a reference to the key that would be used when …",410,[[]]],[11,"into_key","","Take ownership of the key.",410,[[]]],[11,"insert","","Sets the value of the entry with the <code>VacantEntry</code>\'s key, …",410,[[]]],[11,"new","","Constructs a new <code>RandomState</code> that is initialized with …",411,[[],["randomstate",3]]],[11,"new","","Creates a new <code>DefaultHasher</code>.",412,[[],["defaulthasher",3]]],[11,"new","std::collections::hash_set","Creates an empty <code>HashSet</code>.",413,[[],[["hashset",3],["randomstate",3]]]],[11,"with_capacity","","Creates an empty <code>HashSet</code> with the specified capacity.",413,[[],[["hashset",3],["randomstate",3]]]],[11,"capacity","","Returns the number of elements the set can hold without …",413,[[]]],[11,"iter","","An iterator visiting all elements in arbitrary order. The …",413,[[],["iter",3]]],[11,"len","","Returns the number of elements in the set.",413,[[]]],[11,"is_empty","","Returns <code>true</code> if the set contains no elements.",413,[[]]],[11,"drain","","Clears the set, returning all elements in an iterator.",413,[[],["drain",3]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if …",413,[[],["drainfilter",3]]],[11,"clear","","Clears the set, removing all values.",413,[[]]],[11,"with_hasher","","Creates a new empty hash set which will use the given …",413,[[],["hashset",3]]],[11,"with_capacity_and_hasher","","Creates an empty <code>HashSet</code> with the specified capacity, …",413,[[],["hashset",3]]],[11,"hasher","","Returns a reference to the set\'s [<code>BuildHasher</code>].",413,[[]]],[11,"reserve","","Reserves capacity for at least <code>additional</code> more elements …",413,[[]]],[11,"try_reserve","","Tries to reserve capacity for at least <code>additional</code> more …",413,[[],[["tryreserveerror",4],["result",4]]]],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It …",413,[[]]],[11,"shrink_to","","Shrinks the capacity of the set with a lower limit. It …",413,[[]]],[11,"difference","","Visits the values representing the difference, i.e., the …",413,[[["hashset",3]],["difference",3]]],[11,"symmetric_difference","","Visits the values representing the symmetric difference, …",413,[[["hashset",3]],["symmetricdifference",3]]],[11,"intersection","","Visits the values representing the intersection, i.e., …",413,[[["hashset",3]],["intersection",3]]],[11,"union","","Visits the values representing the union, i.e., all the …",413,[[["hashset",3]],["union",3]]],[11,"contains","","Returns <code>true</code> if the set contains a value.",413,[[]]],[11,"get","","Returns a reference to the value in the set, if any, that …",413,[[],["option",4]]],[11,"get_or_insert","","Inserts the given <code>value</code> into the set if it is not …",413,[[]]],[11,"get_or_insert_owned","","Inserts an owned copy of the given <code>value</code> into the set if …",413,[[]]],[11,"get_or_insert_with","","Inserts a value computed from <code>f</code> into the set if the given …",413,[[]]],[11,"is_disjoint","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.…",413,[[["hashset",3]]]],[11,"is_subset","","Returns <code>true</code> if the set is a subset of another, i.e., …",413,[[["hashset",3]]]],[11,"is_superset","","Returns <code>true</code> if the set is a superset of another, i.e., …",413,[[["hashset",3]]]],[11,"insert","","Adds a value to the set.",413,[[]]],[11,"replace","","Adds a value to the set, replacing the existing value, if …",413,[[],["option",4]]],[11,"remove","","Removes a value from the set. Returns whether the value …",413,[[]]],[11,"take","","Removes and returns the value in the set, if any, that is …",413,[[],["option",4]]],[11,"retain","","Retains only the elements specified by the predicate.",413,[[]]],[11,"as_va_list","std::ffi","Convert a <code>VaListImpl</code> into a <code>VaList</code> that is …",431,[[],["valist",3]]],[11,"arg","","Advance to the next arg.",431,[[]]],[11,"with_copy","","Copies the <code>va_list</code> at the current location.",431,[[]]],[11,"as_bytes","","Returns a slice of [<code>u8</code>]s bytes that were attempted to …",436,[[]]],[11,"into_bytes","","Returns the bytes that were attempted to convert to a […",436,[[],["vec",3]]],[11,"new","","Creates a new C-compatible string from a container of …",432,[[["into",8],["vec",3]],[["cstring",3],["nulerror",3],["result",4]]]],[11,"from_vec_unchecked","","Creates a C-compatible string by consuming a byte vector, …",432,[[["vec",3]],["cstring",3]]],[11,"from_raw","","Retakes ownership of a <code>CString</code> that was transferred to C …",432,[[],["cstring",3]]],[11,"into_raw","","Consumes the <code>CString</code> and transfers ownership of the …",432,[[]]],[11,"into_string","","Converts the <code>CString</code> into a [<code>String</code>] if it contains valid …",432,[[],[["intostringerror",3],["result",4],["string",3]]]],[11,"into_bytes","","Consumes the <code>CString</code> and returns the underlying byte …",432,[[],["vec",3]]],[11,"into_bytes_with_nul","","Equivalent to [<code>CString::into_bytes()</code>] except that the …",432,[[],["vec",3]]],[11,"as_bytes","","Returns the contents of this <code>CString</code> as a slice of bytes.",432,[[]]],[11,"as_bytes_with_nul","","Equivalent to [<code>CString::as_bytes()</code>] except that the …",432,[[]]],[11,"as_c_str","","Extracts a [<code>CStr</code>] slice containing the entire string.",432,[[],["cstr",3]]],[11,"into_boxed_c_str","","Converts this <code>CString</code> into a boxed [<code>CStr</code>].",432,[[],[["cstr",3],["box",3]]]],[11,"from_vec_with_nul_unchecked","","Converts a [<code>Vec</code>]<code><u8></code> to a [<code>CString</code>] without checking the …",432,[[["vec",3]]]],[11,"from_vec_with_nul","","Attempts to converts a [<code>Vec</code>]<code><u8></code> to a [<code>CString</code>].",432,[[["vec",3]],[["fromvecwithnulerror",3],["result",4]]]],[11,"nul_position","","Returns the position of the nul byte in the slice that …",434,[[]]],[11,"into_vec","","Consumes this error, returning the underlying vector of …",434,[[],["vec",3]]],[11,"into_cstring","","Consumes this error, returning original [<code>CString</code>] which …",437,[[],["cstring",3]]],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of …",437,[[],["utf8error",3]]],[11,"from_ptr","","Wraps a raw C string with a safe C string wrapper.",433,[[],["cstr",3]]],[11,"from_bytes_with_nul","","Creates a C string wrapper from a byte slice.",433,[[],[["frombyteswithnulerror",3],["result",4],["cstr",3]]]],[11,"from_bytes_with_nul_unchecked","","Unsafely creates a C string wrapper from a byte slice.",433,[[],["cstr",3]]],[11,"as_ptr","","Returns the inner pointer to this C string.",433,[[]]],[11,"to_bytes","","Converts this C string to a byte slice.",433,[[]]],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the …",433,[[]]],[11,"to_str","","Yields a <code>&str</code> slice if the <code>CStr</code> contains valid UTF-8.",433,[[],[["result",4],["utf8error",3]]]],[11,"to_string_lossy","","Converts a <code>CStr</code> into a [<code>Cow</code>]<code><</code><code>str</code><code>></code>.",433,[[],["cow",4]]],[11,"into_c_string","","Converts a [<code>Box</code>]<code><CStr></code> into a [<code>CString</code>] without copying …",433,[[["cstr",3],["box",3]],["cstring",3]]],[11,"new","","Constructs a new empty <code>OsString</code>.",438,[[],["osstring",3]]],[11,"as_os_str","","Converts to an [<code>OsStr</code>] slice.",438,[[],["osstr",3]]],[11,"into_string","","Converts the <code>OsString</code> into a [<code>String</code>] if it contains …",438,[[],[["osstring",3],["string",3],["result",4]]]],[11,"push","","Extends the string with the given <code>&OsStr</code> slice.",438,[[["asref",8],["osstr",3]]]],[11,"with_capacity","","Creates a new <code>OsString</code> with the given capacity.",438,[[],["osstring",3]]],[11,"clear","","Truncates the <code>OsString</code> to zero length.",438,[[]]],[11,"capacity","","Returns the capacity this <code>OsString</code> can hold without …",438,[[]]],[11,"reserve","","Reserves capacity for at least <code>additional</code> more capacity …",438,[[]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly <code>additional</code> more …",438,[[]]],[11,"shrink_to_fit","","Shrinks the capacity of the <code>OsString</code> to match its length.",438,[[]]],[11,"shrink_to","","Shrinks the capacity of the <code>OsString</code> with a lower bound.",438,[[]]],[11,"into_boxed_os_str","","Converts this <code>OsString</code> into a boxed [<code>OsStr</code>].",438,[[],[["box",3],["osstr",3]]]],[11,"new","","Coerces into an <code>OsStr</code> slice.",439,[[],["osstr",3]]],[11,"to_str","","Yields a <code>&str</code> slice if the <code>OsStr</code> is valid Unicode.",439,[[],["option",4]]],[11,"to_string_lossy","","Converts an <code>OsStr</code> to a [<code>Cow</code>]<code><</code>[<code>str</code>]<code>></code>.",439,[[],["cow",4]]],[11,"to_os_string","","Copies the slice into an owned [<code>OsString</code>].",439,[[],["osstring",3]]],[11,"is_empty","","Checks whether the <code>OsStr</code> is empty.",439,[[]]],[11,"len","","Returns the length of this <code>OsStr</code>.",439,[[]]],[11,"into_os_string","","Converts a [<code>Box</code>]<code><OsStr></code> into an [<code>OsString</code>] without …",439,[[["box",3],["osstr",3]],["osstring",3]]],[11,"make_ascii_lowercase","","Converts this string to its ASCII lower case equivalent …",439,[[]]],[11,"make_ascii_uppercase","","Converts this string to its ASCII upper case equivalent …",439,[[]]],[11,"to_ascii_lowercase","","Returns a copy of this string where each character is …",439,[[],["osstring",3]]],[11,"to_ascii_uppercase","","Returns a copy of this string where each character is …",439,[[],["osstring",3]]],[11,"is_ascii","","Checks if all characters in this string are within the …",439,[[]]],[11,"eq_ignore_ascii_case","","Checks that two strings are an ASCII case-insensitive …",439,[[]]],[11,"new","std::io","Creates a new <code>BufReader<R></code> with a default buffer …",441,[[],["bufreader",3]]],[11,"with_capacity","","Creates a new <code>BufReader<R></code> with the specified buffer …",441,[[],["bufreader",3]]],[11,"get_ref","","Gets a reference to the underlying reader.",441,[[]]],[11,"get_mut","","Gets a mutable reference to the underlying reader.",441,[[]]],[11,"buffer","","Returns a reference to the internally buffered data.",441,[[]]],[11,"capacity","","Returns the number of bytes the internal buffer can hold …",441,[[]]],[11,"into_inner","","Unwraps this <code>BufReader<R></code>, returning the underlying …",441,[[]]],[11,"seek_relative","","Seeks relative to the current position. If the new …",441,[[],["result",6]]],[11,"new","","Creates a new <code>BufWriter<W></code> with a default buffer …",442,[[],["bufwriter",3]]],[11,"with_capacity","","Creates a new <code>BufWriter<W></code> with the specified buffer …",442,[[],["bufwriter",3]]],[11,"get_ref","","Gets a reference to the underlying writer.",442,[[]]],[11,"get_mut","","Gets a mutable reference to the underlying writer.",442,[[]]],[11,"buffer","","Returns a reference to the internally buffered data.",442,[[]]],[11,"capacity","","Returns the number of bytes the internal buffer can hold …",442,[[]]],[11,"into_inner","","Unwraps this <code>BufWriter<W></code>, returning the underlying …",442,[[],[["result",4],["intoinnererror",3]]]],[11,"new","","Creates a new <code>LineWriter</code>.",443,[[],["linewriter",3]]],[11,"with_capacity","","Creates a new <code>LineWriter</code> with a specified capacity for …",443,[[],["linewriter",3]]],[11,"get_ref","","Gets a reference to the underlying writer.",443,[[]]],[11,"get_mut","","Gets a mutable reference to the underlying writer.",443,[[]]],[11,"into_inner","","Unwraps this <code>LineWriter</code>, returning the underlying writer.",443,[[],[["result",4],["intoinnererror",3]]]],[11,"error","","Returns the error which caused the call to […",444,[[],["error",3]]],[11,"into_inner","","Returns the buffered writer instance which generated the …",444,[[]]],[11,"into_error","","Consumes the [<code>IntoInnerError</code>] and returns the error which …",444,[[],["error",3]]],[11,"into_parts","","Consumes the [<code>IntoInnerError</code>] and returns the error which …",444,[[]]],[11,"new","","Creates a new cursor wrapping the provided underlying …",445,[[],["cursor",3]]],[11,"into_inner","","Consumes this cursor, returning the underlying value.",445,[[]]],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",445,[[]]],[11,"get_mut","","Gets a mutable reference to the underlying value in this …",445,[[]]],[11,"position","","Returns the current position of this cursor.",445,[[]]],[11,"set_position","","Sets the position of this cursor.",445,[[]]],[11,"new","","Creates a new I/O error from a known kind of error as …",446,[[["errorkind",4]],["error",3]]],[11,"last_os_error","","Returns an error representing the last OS error which …",446,[[],["error",3]]],[11,"from_raw_os_error","","Creates a new instance of an [<code>Error</code>] from a particular OS …",446,[[],["error",3]]],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",446,[[],["option",4]]],[11,"get_ref","","Returns a reference to the inner error wrapped by this …",446,[[],[["error",8],["option",4]]]],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by …",446,[[],[["error",8],["option",4]]]],[11,"into_inner","","Consumes the <code>Error</code>, returning its inner error (if any).",446,[[],[["option",4],["box",3]]]],[11,"kind","","Returns the corresponding [<code>ErrorKind</code>] for this error.",446,[[],["errorkind",4]]],[11,"lock","","Locks this handle to the standard input stream, returning …",447,[[],["stdinlock",3]]],[11,"read_line","","Locks this handle and reads a line of input, appending it …",447,[[["string",3]],["result",6]]],[11,"lock","","Locks this handle to the standard output stream, …",449,[[],["stdoutlock",3]]],[11,"lock","","Locks this handle to the standard error stream, returning …",451,[[],["stderrlock",3]]],[11,"new","std::net","Creates a new socket address from an IP address and a …",128,[[["ipaddr",4]],["socketaddr",4]]],[11,"ip","","Returns the IP address associated with this socket …",128,[[],["ipaddr",4]]],[11,"set_ip","","Changes the IP address associated with this socket …",128,[[["ipaddr",4]]]],[11,"port","","Returns the port number associated with this socket …",128,[[]]],[11,"set_port","","Changes the port number associated with this socket …",128,[[]]],[11,"is_ipv4","","Returns [<code>true</code>] if the IP address in this <code>SocketAddr</code> is an …",128,[[]]],[11,"is_ipv6","","Returns [<code>true</code>] if the IP address in this <code>SocketAddr</code> is an …",128,[[]]],[11,"new","","Creates a new socket address from an <code>IPv4</code> address and a …",459,[[["ipv4addr",3]],["socketaddrv4",3]]],[11,"ip","","Returns the IP address associated with this socket …",459,[[],["ipv4addr",3]]],[11,"set_ip","","Changes the IP address associated with this socket …",459,[[["ipv4addr",3]]]],[11,"port","","Returns the port number associated with this socket …",459,[[]]],[11,"set_port","","Changes the port number associated with this socket …",459,[[]]],[11,"new","","Creates a new socket address from an <code>IPv6</code> address, a …",460,[[["ipv6addr",3]],["socketaddrv6",3]]],[11,"ip","","Returns the IP address associated with this socket …",460,[[],["ipv6addr",3]]],[11,"set_ip","","Changes the IP address associated with this socket …",460,[[["ipv6addr",3]]]],[11,"port","","Returns the port number associated with this socket …",460,[[]]],[11,"set_port","","Changes the port number associated with this socket …",460,[[]]],[11,"flowinfo","","Returns the flow information associated with this address.",460,[[]]],[11,"set_flowinfo","","Changes the flow information associated with this socket …",460,[[]]],[11,"scope_id","","Returns the scope ID associated with this address.",460,[[]]],[11,"set_scope_id","","Changes the scope ID associated with this socket address.",460,[[]]],[11,"is_unspecified","","Returns [<code>true</code>] for the special \'unspecified\' address.",130,[[]]],[11,"is_loopback","","Returns [<code>true</code>] if this is a loopback address.",130,[[]]],[11,"is_global","","Returns [<code>true</code>] if the address appears to be globally …",130,[[]]],[11,"is_multicast","","Returns [<code>true</code>] if this is a multicast address.",130,[[]]],[11,"is_documentation","","Returns [<code>true</code>] if this address is in a range designated …",130,[[]]],[11,"is_ipv4","","Returns [<code>true</code>] if this address is an <code>IPv4</code> address, and […",130,[[]]],[11,"is_ipv6","","Returns [<code>true</code>] if this address is an <code>IPv6</code> address, and […",130,[[]]],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",461,[[],["ipv4addr",3]]],[18,"LOCALHOST","","An IPv4 address with the address pointing to localhost: …",461,null],[18,"UNSPECIFIED","","An IPv4 address representing an unspecified address: …",461,null],[18,"BROADCAST","","An IPv4 address representing the broadcast address: …",461,null],[11,"octets","","Returns the four eight-bit integers that make up this …",461,[[]]],[11,"is_unspecified","","Returns [<code>true</code>] for the special \'unspecified\' address …",461,[[]]],[11,"is_loopback","","Returns [<code>true</code>] if this is a loopback address …",461,[[]]],[11,"is_private","","Returns [<code>true</code>] if this is a private address.",461,[[]]],[11,"is_link_local","","Returns [<code>true</code>] if the address is link-local …",461,[[]]],[11,"is_global","","Returns [<code>true</code>] if the address appears to be globally …",461,[[]]],[11,"is_shared","","Returns [<code>true</code>] if this address is part of the Shared …",461,[[]]],[11,"is_ietf_protocol_assignment","","Returns [<code>true</code>] if this address is part of <code>192.0.0.0/24</code>, …",461,[[]]],[11,"is_benchmarking","","Returns [<code>true</code>] if this address part of the <code>198.18.0.0/15</code> …",461,[[]]],[11,"is_reserved","","Returns [<code>true</code>] if this address is reserved by IANA for …",461,[[]]],[11,"is_multicast","","Returns [<code>true</code>] if this is a multicast address …",461,[[]]],[11,"is_broadcast","","Returns [<code>true</code>] if this is a broadcast address …",461,[[]]],[11,"is_documentation","","Returns [<code>true</code>] if this address is in a range designated …",461,[[]]],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible <code>IPv6</code> address.",461,[[],["ipv6addr",3]]],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped <code>IPv6</code> address.",461,[[],["ipv6addr",3]]],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",462,[[],["ipv6addr",3]]],[18,"LOCALHOST","","An IPv6 address representing localhost: <code>::1</code>.",462,null],[18,"UNSPECIFIED","","An IPv6 address representing the unspecified address: <code>::</code>",462,null],[11,"segments","","Returns the eight 16-bit segments that make up this …",462,[[]]],[11,"is_unspecified","","Returns [<code>true</code>] for the special \'unspecified\' address (::).",462,[[]]],[11,"is_loopback","","Returns [<code>true</code>] if this is a loopback address (::1).",462,[[]]],[11,"is_global","","Returns [<code>true</code>] if the address appears to be globally …",462,[[]]],[11,"is_unique_local","","Returns [<code>true</code>] if this is a unique local address (<code>fc00::/7</code>…",462,[[]]],[11,"is_unicast_link_local_strict","","Returns [<code>true</code>] if the address is a unicast link-local …",462,[[]]],[11,"is_unicast_link_local","","Returns [<code>true</code>] if the address is a unicast link-local …",462,[[]]],[11,"is_unicast_site_local","","Returns [<code>true</code>] if this is a deprecated unicast site-local …",462,[[]]],[11,"is_documentation","","Returns [<code>true</code>] if this is an address reserved for …",462,[[]]],[11,"is_unicast_global","","Returns [<code>true</code>] if the address is a globally routable …",462,[[]]],[11,"multicast_scope","","Returns the address\'s multicast scope if the address is …",462,[[],[["option",4],["ipv6multicastscope",4]]]],[11,"is_multicast","","Returns [<code>true</code>] if this is a multicast address (ff00::/8).",462,[[]]],[11,"to_ipv4_mapped","","Converts this address to an <code>IPv4</code> address if it\'s an …",462,[[],[["ipv4addr",3],["option",4]]]],[11,"to_ipv4","","Converts this address to an <code>IPv4</code> address. Returns [<code>None</code>] …",462,[[],[["ipv4addr",3],["option",4]]]],[11,"octets","","Returns the sixteen eight-bit integers the IPv6 address …",462,[[]]],[11,"connect","","Opens a TCP connection to a remote host.",464,[[["tosocketaddrs",8]],[["tcpstream",3],["result",6]]]],[11,"connect_timeout","","Opens a TCP connection to a remote host with a timeout.",464,[[["socketaddr",4],["duration",3]],[["tcpstream",3],["result",6]]]],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP …",464,[[],[["socketaddr",4],["result",6]]]],[11,"local_addr","","Returns the socket address of the local half of this TCP …",464,[[],[["socketaddr",4],["result",6]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this …",464,[[["shutdown",4]],["result",6]]],[11,"try_clone","","Creates a new independently owned handle to the …",464,[[],[["tcpstream",3],["result",6]]]],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",464,[[["option",4],["duration",3]],["result",6]]],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",464,[[["option",4],["duration",3]],["result",6]]],[11,"read_timeout","","Returns the read timeout of this socket.",464,[[],[["option",4],["result",6]]]],[11,"write_timeout","","Returns the write timeout of this socket.",464,[[],[["option",4],["result",6]]]],[11,"peek","","Receives data on the socket from the remote address to …",464,[[],["result",6]]],[11,"set_nodelay","","Sets the value of the <code>TCP_NODELAY</code> option on this socket.",464,[[],["result",6]]],[11,"nodelay","","Gets the value of the <code>TCP_NODELAY</code> option on this socket.",464,[[],["result",6]]],[11,"set_ttl","","Sets the value for the <code>IP_TTL</code> option on this socket.",464,[[],["result",6]]],[11,"ttl","","Gets the value of the <code>IP_TTL</code> option for this socket.",464,[[],["result",6]]],[11,"take_error","","Gets the value of the <code>SO_ERROR</code> option on this socket.",464,[[],[["option",4],["result",6]]]],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",464,[[],["result",6]]],[11,"bind","","Creates a new <code>TcpListener</code> which will be bound to the …",465,[[["tosocketaddrs",8]],[["result",6],["tcplistener",3]]]],[11,"local_addr","","Returns the local socket address of this listener.",465,[[],[["socketaddr",4],["result",6]]]],[11,"try_clone","","Creates a new independently owned handle to the …",465,[[],[["result",6],["tcplistener",3]]]],[11,"accept","","Accept a new incoming connection from this listener.",465,[[],["result",6]]],[11,"incoming","","Returns an iterator over the connections being received …",465,[[],["incoming",3]]],[11,"set_ttl","","Sets the value for the <code>IP_TTL</code> option on this socket.",465,[[],["result",6]]],[11,"ttl","","Gets the value of the <code>IP_TTL</code> option for this socket.",465,[[],["result",6]]],[11,"set_only_v6","","",465,[[],["result",6]]],[11,"only_v6","","",465,[[],["result",6]]],[11,"take_error","","Gets the value of the <code>SO_ERROR</code> option on this socket.",465,[[],[["option",4],["result",6]]]],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",465,[[],["result",6]]],[11,"bind","","Creates a UDP socket from the given address.",467,[[["tosocketaddrs",8]],[["udpsocket",3],["result",6]]]],[11,"recv_from","","Receives a single datagram message on the socket. On …",467,[[],["result",6]]],[11,"peek_from","","Receives a single datagram message on the socket, without …",467,[[],["result",6]]],[11,"send_to","","Sends data on the socket to the given address. On …",467,[[["tosocketaddrs",8]],["result",6]]],[11,"peer_addr","","Returns the socket address of the remote peer this socket …",467,[[],[["socketaddr",4],["result",6]]]],[11,"local_addr","","Returns the socket address that this socket was created …",467,[[],[["socketaddr",4],["result",6]]]],[11,"try_clone","","Creates a new independently owned handle to the …",467,[[],[["udpsocket",3],["result",6]]]],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",467,[[["option",4],["duration",3]],["result",6]]],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",467,[[["option",4],["duration",3]],["result",6]]],[11,"read_timeout","","Returns the read timeout of this socket.",467,[[],[["option",4],["result",6]]]],[11,"write_timeout","","Returns the write timeout of this socket.",467,[[],[["option",4],["result",6]]]],[11,"set_broadcast","","Sets the value of the <code>SO_BROADCAST</code> option for this socket.",467,[[],["result",6]]],[11,"broadcast","","Gets the value of the <code>SO_BROADCAST</code> option for this socket.",467,[[],["result",6]]],[11,"set_multicast_loop_v4","","Sets the value of the <code>IP_MULTICAST_LOOP</code> option for this …",467,[[],["result",6]]],[11,"multicast_loop_v4","","Gets the value of the <code>IP_MULTICAST_LOOP</code> option for this …",467,[[],["result",6]]],[11,"set_multicast_ttl_v4","","Sets the value of the <code>IP_MULTICAST_TTL</code> option for this …",467,[[],["result",6]]],[11,"multicast_ttl_v4","","Gets the value of the <code>IP_MULTICAST_TTL</code> option for this …",467,[[],["result",6]]],[11,"set_multicast_loop_v6","","Sets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …",467,[[],["result",6]]],[11,"multicast_loop_v6","","Gets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …",467,[[],["result",6]]],[11,"set_ttl","","Sets the value for the <code>IP_TTL</code> option on this socket.",467,[[],["result",6]]],[11,"ttl","","Gets the value of the <code>IP_TTL</code> option for this socket.",467,[[],["result",6]]],[11,"join_multicast_v4","","Executes an operation of the <code>IP_ADD_MEMBERSHIP</code> type.",467,[[["ipv4addr",3]],["result",6]]],[11,"join_multicast_v6","","Executes an operation of the <code>IPV6_ADD_MEMBERSHIP</code> type.",467,[[["ipv6addr",3]],["result",6]]],[11,"leave_multicast_v4","","Executes an operation of the <code>IP_DROP_MEMBERSHIP</code> type.",467,[[["ipv4addr",3]],["result",6]]],[11,"leave_multicast_v6","","Executes an operation of the <code>IPV6_DROP_MEMBERSHIP</code> type.",467,[[["ipv6addr",3]],["result",6]]],[11,"take_error","","Gets the value of the <code>SO_ERROR</code> option on this socket.",467,[[],[["option",4],["result",6]]]],[11,"connect","","Connects this UDP socket to a remote address, allowing …",467,[[["tosocketaddrs",8]],["result",6]]],[11,"send","","Sends data on the socket to the remote address to which …",467,[[],["result",6]]],[11,"recv","","Receives a single datagram message on the socket from the …",467,[[],["result",6]]],[11,"peek","","Receives single datagram on the socket from the remote …",467,[[],["result",6]]],[11,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",467,[[],["result",6]]],[18,"MIN","std::num","Returns the smallest value that can be represented by …",133,null],[18,"MAX","","Returns the largest value that can be represented by this …",133,null],[11,"count_ones","","Returns the number of ones in the binary representation …",133,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",133,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",133,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",133,[[],["wrapping",3]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",133,[[],["wrapping",3]]],[11,"swap_bytes","","Reverses the byte order of the integer.",133,[[],["wrapping",3]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",133,[[],["wrapping",3]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",133,[[["wrapping",3]],["wrapping",3]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",133,[[["wrapping",3]],["wrapping",3]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",133,[[],["wrapping",3]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",133,[[],["wrapping",3]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",133,[[],["wrapping",3]]],[18,"MIN","","Returns the smallest value that can be represented by …",133,null],[18,"MAX","","Returns the largest value that can be represented by this …",133,null],[11,"count_ones","","Returns the number of ones in the binary representation …",133,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",133,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",133,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",133,[[],["wrapping",3]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",133,[[],["wrapping",3]]],[11,"swap_bytes","","Reverses the byte order of the integer.",133,[[],["wrapping",3]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",133,[[],["wrapping",3]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",133,[[["wrapping",3]],["wrapping",3]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",133,[[["wrapping",3]],["wrapping",3]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",133,[[],["wrapping",3]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",133,[[],["wrapping",3]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",133,[[],["wrapping",3]]],[18,"MIN","","Returns the smallest value that can be represented by …",133,null],[18,"MAX","","Returns the largest value that can be represented by this …",133,null],[11,"count_ones","","Returns the number of ones in the binary representation …",133,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",133,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",133,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",133,[[],["wrapping",3]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",133,[[],["wrapping",3]]],[11,"swap_bytes","","Reverses the byte order of the integer.",133,[[],["wrapping",3]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",133,[[],["wrapping",3]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",133,[[["wrapping",3]],["wrapping",3]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",133,[[["wrapping",3]],["wrapping",3]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",133,[[],["wrapping",3]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",133,[[],["wrapping",3]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",133,[[],["wrapping",3]]],[18,"MIN","","Returns the smallest value that can be represented by …",133,null],[18,"MAX","","Returns the largest value that can be represented by this …",133,null],[11,"count_ones","","Returns the number of ones in the binary representation …",133,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",133,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",133,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",133,[[],["wrapping",3]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",133,[[],["wrapping",3]]],[11,"swap_bytes","","Reverses the byte order of the integer.",133,[[],["wrapping",3]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",133,[[],["wrapping",3]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",133,[[["wrapping",3]],["wrapping",3]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",133,[[["wrapping",3]],["wrapping",3]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",133,[[],["wrapping",3]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",133,[[],["wrapping",3]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",133,[[],["wrapping",3]]],[18,"MIN","","Returns the smallest value that can be represented by …",133,null],[18,"MAX","","Returns the largest value that can be represented by this …",133,null],[11,"count_ones","","Returns the number of ones in the binary representation …",133,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",133,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",133,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",133,[[],["wrapping",3]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",133,[[],["wrapping",3]]],[11,"swap_bytes","","Reverses the byte order of the integer.",133,[[],["wrapping",3]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",133,[[],["wrapping",3]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",133,[[["wrapping",3]],["wrapping",3]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",133,[[["wrapping",3]],["wrapping",3]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",133,[[],["wrapping",3]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",133,[[],["wrapping",3]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",133,[[],["wrapping",3]]],[18,"MIN","","Returns the smallest value that can be represented by …",133,null],[18,"MAX","","Returns the largest value that can be represented by this …",133,null],[11,"count_ones","","Returns the number of ones in the binary representation …",133,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",133,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",133,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",133,[[],["wrapping",3]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",133,[[],["wrapping",3]]],[11,"swap_bytes","","Reverses the byte order of the integer.",133,[[],["wrapping",3]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",133,[[],["wrapping",3]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",133,[[["wrapping",3]],["wrapping",3]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",133,[[["wrapping",3]],["wrapping",3]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",133,[[],["wrapping",3]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",133,[[],["wrapping",3]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",133,[[],["wrapping",3]]],[18,"MIN","","Returns the smallest value that can be represented by …",133,null],[18,"MAX","","Returns the largest value that can be represented by this …",133,null],[11,"count_ones","","Returns the number of ones in the binary representation …",133,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",133,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",133,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",133,[[],["wrapping",3]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",133,[[],["wrapping",3]]],[11,"swap_bytes","","Reverses the byte order of the integer.",133,[[],["wrapping",3]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",133,[[],["wrapping",3]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",133,[[["wrapping",3]],["wrapping",3]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",133,[[["wrapping",3]],["wrapping",3]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",133,[[],["wrapping",3]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",133,[[],["wrapping",3]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",133,[[],["wrapping",3]]],[18,"MIN","","Returns the smallest value that can be represented by …",133,null],[18,"MAX","","Returns the largest value that can be represented by this …",133,null],[11,"count_ones","","Returns the number of ones in the binary representation …",133,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",133,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",133,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",133,[[],["wrapping",3]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",133,[[],["wrapping",3]]],[11,"swap_bytes","","Reverses the byte order of the integer.",133,[[],["wrapping",3]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",133,[[],["wrapping",3]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",133,[[["wrapping",3]],["wrapping",3]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",133,[[["wrapping",3]],["wrapping",3]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",133,[[],["wrapping",3]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",133,[[],["wrapping",3]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",133,[[],["wrapping",3]]],[18,"MIN","","Returns the smallest value that can be represented by …",133,null],[18,"MAX","","Returns the largest value that can be represented by this …",133,null],[11,"count_ones","","Returns the number of ones in the binary representation …",133,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",133,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",133,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",133,[[],["wrapping",3]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",133,[[],["wrapping",3]]],[11,"swap_bytes","","Reverses the byte order of the integer.",133,[[],["wrapping",3]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",133,[[],["wrapping",3]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",133,[[["wrapping",3]],["wrapping",3]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",133,[[["wrapping",3]],["wrapping",3]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",133,[[],["wrapping",3]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",133,[[],["wrapping",3]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",133,[[],["wrapping",3]]],[18,"MIN","","Returns the smallest value that can be represented by …",133,null],[18,"MAX","","Returns the largest value that can be represented by this …",133,null],[11,"count_ones","","Returns the number of ones in the binary representation …",133,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",133,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",133,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",133,[[],["wrapping",3]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",133,[[],["wrapping",3]]],[11,"swap_bytes","","Reverses the byte order of the integer.",133,[[],["wrapping",3]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",133,[[],["wrapping",3]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",133,[[["wrapping",3]],["wrapping",3]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",133,[[["wrapping",3]],["wrapping",3]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",133,[[],["wrapping",3]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",133,[[],["wrapping",3]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",133,[[],["wrapping",3]]],[18,"MIN","","Returns the smallest value that can be represented by …",133,null],[18,"MAX","","Returns the largest value that can be represented by this …",133,null],[11,"count_ones","","Returns the number of ones in the binary representation …",133,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",133,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",133,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",133,[[],["wrapping",3]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",133,[[],["wrapping",3]]],[11,"swap_bytes","","Reverses the byte order of the integer.",133,[[],["wrapping",3]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",133,[[],["wrapping",3]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",133,[[["wrapping",3]],["wrapping",3]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",133,[[["wrapping",3]],["wrapping",3]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",133,[[],["wrapping",3]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",133,[[],["wrapping",3]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",133,[[],["wrapping",3]]],[18,"MIN","","Returns the smallest value that can be represented by …",133,null],[18,"MAX","","Returns the largest value that can be represented by this …",133,null],[11,"count_ones","","Returns the number of ones in the binary representation …",133,[[]]],[11,"count_zeros","","Returns the number of zeros in the binary representation …",133,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",133,[[]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",133,[[],["wrapping",3]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",133,[[],["wrapping",3]]],[11,"swap_bytes","","Reverses the byte order of the integer.",133,[[],["wrapping",3]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",133,[[],["wrapping",3]]],[11,"from_be","","Converts an integer from big endian to the target\'s …",133,[[["wrapping",3]],["wrapping",3]]],[11,"from_le","","Converts an integer from little endian to the target\'s …",133,[[["wrapping",3]],["wrapping",3]]],[11,"to_be","","Converts <code>self</code> to big endian from the target\'s endianness.",133,[[],["wrapping",3]]],[11,"to_le","","Converts <code>self</code> to little endian from the target\'s …",133,[[],["wrapping",3]]],[11,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",133,[[],["wrapping",3]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",133,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>, wrapping around at …",133,[[],["wrapping",3]]],[11,"signum","","Returns a number representing sign of <code>self</code>.",133,[[],["wrapping",3]]],[11,"is_positive","","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …",133,[[]]],[11,"is_negative","","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …",133,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",133,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>, wrapping around at …",133,[[],["wrapping",3]]],[11,"signum","","Returns a number representing sign of <code>self</code>.",133,[[],["wrapping",3]]],[11,"is_positive","","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …",133,[[]]],[11,"is_negative","","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …",133,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",133,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>, wrapping around at …",133,[[],["wrapping",3]]],[11,"signum","","Returns a number representing sign of <code>self</code>.",133,[[],["wrapping",3]]],[11,"is_positive","","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …",133,[[]]],[11,"is_negative","","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …",133,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",133,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>, wrapping around at …",133,[[],["wrapping",3]]],[11,"signum","","Returns a number representing sign of <code>self</code>.",133,[[],["wrapping",3]]],[11,"is_positive","","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …",133,[[]]],[11,"is_negative","","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …",133,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",133,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>, wrapping around at …",133,[[],["wrapping",3]]],[11,"signum","","Returns a number representing sign of <code>self</code>.",133,[[],["wrapping",3]]],[11,"is_positive","","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …",133,[[]]],[11,"is_negative","","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …",133,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",133,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>, wrapping around at …",133,[[],["wrapping",3]]],[11,"signum","","Returns a number representing sign of <code>self</code>.",133,[[],["wrapping",3]]],[11,"is_positive","","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …",133,[[]]],[11,"is_negative","","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …",133,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",133,[[]]],[11,"is_power_of_two","","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.",133,[[]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal …",133,[[],["wrapping",3]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",133,[[]]],[11,"is_power_of_two","","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.",133,[[]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal …",133,[[],["wrapping",3]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",133,[[]]],[11,"is_power_of_two","","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.",133,[[]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal …",133,[[],["wrapping",3]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",133,[[]]],[11,"is_power_of_two","","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.",133,[[]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal …",133,[[],["wrapping",3]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",133,[[]]],[11,"is_power_of_two","","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.",133,[[]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal …",133,[[],["wrapping",3]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",133,[[]]],[11,"is_power_of_two","","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.",133,[[]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal …",133,[[],["wrapping",3]]],[11,"kind","","Outputs the detailed cause of parsing an integer failing.",469,[[],["interrorkind",4]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",471,[[],["nonzeroi128",3]]],[11,"new","","Creates a non-zero if the given value is not zero.",471,[[],[["option",4],["nonzeroi128",3]]]],[11,"get","","Returns the value as a primitive type.",471,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",471,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",471,[[]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",472,[[],["nonzeroi16",3]]],[11,"new","","Creates a non-zero if the given value is not zero.",472,[[],[["option",4],["nonzeroi16",3]]]],[11,"get","","Returns the value as a primitive type.",472,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",472,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",472,[[]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",473,[[],["nonzeroi32",3]]],[11,"new","","Creates a non-zero if the given value is not zero.",473,[[],[["nonzeroi32",3],["option",4]]]],[11,"get","","Returns the value as a primitive type.",473,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",473,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",473,[[]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",474,[[],["nonzeroi64",3]]],[11,"new","","Creates a non-zero if the given value is not zero.",474,[[],[["nonzeroi64",3],["option",4]]]],[11,"get","","Returns the value as a primitive type.",474,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",474,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",474,[[]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",475,[[],["nonzeroi8",3]]],[11,"new","","Creates a non-zero if the given value is not zero.",475,[[],[["option",4],["nonzeroi8",3]]]],[11,"get","","Returns the value as a primitive type.",475,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",475,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",475,[[]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",476,[[],["nonzeroisize",3]]],[11,"new","","Creates a non-zero if the given value is not zero.",476,[[],[["nonzeroisize",3],["option",4]]]],[11,"get","","Returns the value as a primitive type.",476,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",476,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",476,[[]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",477,[[],["nonzerou128",3]]],[11,"new","","Creates a non-zero if the given value is not zero.",477,[[],[["option",4],["nonzerou128",3]]]],[11,"get","","Returns the value as a primitive type.",477,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",477,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",477,[[]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",478,[[],["nonzerou16",3]]],[11,"new","","Creates a non-zero if the given value is not zero.",478,[[],[["option",4],["nonzerou16",3]]]],[11,"get","","Returns the value as a primitive type.",478,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",478,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",478,[[]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",479,[[],["nonzerou32",3]]],[11,"new","","Creates a non-zero if the given value is not zero.",479,[[],[["option",4],["nonzerou32",3]]]],[11,"get","","Returns the value as a primitive type.",479,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",479,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",479,[[]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",480,[[],["nonzerou64",3]]],[11,"new","","Creates a non-zero if the given value is not zero.",480,[[],[["option",4],["nonzerou64",3]]]],[11,"get","","Returns the value as a primitive type.",480,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",480,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",480,[[]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",481,[[],["nonzerou8",3]]],[11,"new","","Creates a non-zero if the given value is not zero.",481,[[],[["nonzerou8",3],["option",4]]]],[11,"get","","Returns the value as a primitive type.",481,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",481,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",481,[[]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",482,[[],["nonzerousize",3]]],[11,"new","","Creates a non-zero if the given value is not zero.",482,[[],[["option",4],["nonzerousize",3]]]],[11,"get","","Returns the value as a primitive type.",482,[[]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary …",482,[[]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary …",482,[[]]],[11,"caller","std::panic","Returns the source location of the caller of this …",488,[[],["location",3]]],[11,"file","","Returns the name of the source file from which the panic …",488,[[]]],[11,"line","","Returns the line number from which the panic originated.",488,[[]]],[11,"column","","Returns the column from which the panic originated.",488,[[]]],[11,"payload","","Returns the payload associated with the panic.",489,[[],["any",8]]],[11,"message","","If the <code>panic!</code> macro from the <code>core</code> crate (not from <code>std</code>) …",489,[[],[["arguments",3],["option",4]]]],[11,"location","","Returns information about the location from which the …",489,[[],[["option",4],["location",3]]]],[11,"new","std::sync","Constructs a new <code>Arc<T></code>.",498,[[],["arc",3]]],[11,"new_cyclic","","Constructs a new <code>Arc<T></code> using a weak reference to itself. …",498,[[],["arc",3]]],[11,"new_uninit","","Constructs a new <code>Arc</code> with uninitialized contents.",498,[[],[["arc",3],["maybeuninit",19]]]],[11,"new_zeroed","","Constructs a new <code>Arc</code> with uninitialized contents, with …",498,[[],[["arc",3],["maybeuninit",19]]]],[11,"pin","","Constructs a new <code>Pin<Arc<T>></code>. If <code>T</code> does not implement …",498,[[],[["arc",3],["pin",3]]]],[11,"try_unwrap","","Returns the inner value, if the <code>Arc</code> has exactly one …",498,[[["arc",3]],[["arc",3],["result",4]]]],[11,"new_uninit_slice","","Constructs a new atomically reference-counted slice with …",498,[[],["arc",3]]],[11,"new_zeroed_slice","","Constructs a new atomically reference-counted slice with …",498,[[],["arc",3]]],[11,"assume_init","","Converts to <code>Arc<T></code>.",498,[[],["arc",3]]],[11,"assume_init","","Converts to <code>Arc<[T]></code>.",498,[[],["arc",3]]],[11,"into_raw","","Consumes the <code>Arc</code>, returning the wrapped pointer.",498,[[["arc",3]]]],[11,"as_ptr","","Provides a raw pointer to the data.",498,[[["arc",3]]]],[11,"from_raw","","Constructs an <code>Arc<T></code> from a raw pointer.",498,[[],["arc",3]]],[11,"downgrade","","Creates a new [<code>Weak</code>] pointer to this allocation.",498,[[["arc",3]],["weak",3]]],[11,"weak_count","","Gets the number of [<code>Weak</code>] pointers to this allocation.",498,[[["arc",3]]]],[11,"strong_count","","Gets the number of strong (<code>Arc</code>) pointers to this …",498,[[["arc",3]]]],[11,"incr_strong_count","","Increments the strong reference count on the <code>Arc<T></code> …",498,[[]]],[11,"decr_strong_count","","Decrements the strong reference count on the <code>Arc<T></code> …",498,[[]]],[11,"ptr_eq","","Returns <code>true</code> if the two <code>Arc</code>s point to the same allocation …",498,[[["arc",3]]]],[11,"make_mut","","Makes a mutable reference into the given <code>Arc</code>.",498,[[["arc",3]]]],[11,"get_mut","","Returns a mutable reference into the given <code>Arc</code>, if there …",498,[[["arc",3]],["option",4]]],[11,"get_mut_unchecked","","Returns a mutable reference into the given <code>Arc</code>, without …",498,[[["arc",3]]]],[11,"downcast","","Attempt to downcast the <code>Arc<dyn Any + Send + Sync></code> to a …",498,[[],[["arc",3],["result",4],["arc",3]]]],[11,"new","","Constructs a new <code>Weak<T></code>, without allocating any memory. …",499,[[],["weak",3]]],[11,"as_ptr","","Returns a raw pointer to the object <code>T</code> pointed to by this …",499,[[]]],[11,"into_raw","","Consumes the <code>Weak<T></code> and turns it into a raw pointer.",499,[[]]],[11,"from_raw","","Converts a raw pointer previously created by <code>into_raw</code> …",499,[[],["weak",3]]],[11,"upgrade","","Attempts to upgrade the <code>Weak</code> pointer to an [<code>Arc</code>], delaying…",499,[[],[["arc",3],["option",4]]]],[11,"strong_count","","Gets the number of strong (<code>Arc</code>) pointers pointing to this …",499,[[]]],[11,"weak_count","","Gets an approximation of the number of <code>Weak</code> pointers …",499,[[]]],[11,"ptr_eq","","Returns <code>true</code> if the two <code>Weak</code>s point to the same …",499,[[["weak",3]]]],[11,"new","std::sync::atomic","Creates a new <code>AtomicBool</code>.",500,[[],["atomicbool",3]]],[11,"get_mut","","Returns a mutable reference to the underlying [<code>bool</code>].",500,[[]]],[11,"from_mut","","Get atomic access to a <code>&mut bool</code>.",500,[[],["atomicbool",3]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",500,[[]]],[11,"load","","Loads a value from the bool.",500,[[["ordering",4]]]],[11,"store","","Stores a value into the bool.",500,[[["ordering",4]]]],[11,"swap","","Stores a value into the bool, returning the previous …",500,[[["ordering",4]]]],[11,"compare_and_swap","","Stores a value into the [<code>bool</code>] if the current value is …",500,[[["ordering",4]]]],[11,"compare_exchange","","Stores a value into the [<code>bool</code>] if the current value is …",500,[[["ordering",4]],["result",4]]],[11,"compare_exchange_weak","","Stores a value into the [<code>bool</code>] if the current value is …",500,[[["ordering",4]],["result",4]]],[11,"fetch_and","","Logical \\\"and\\\" with a boolean value.",500,[[["ordering",4]]]],[11,"fetch_nand","","Logical \\\"nand\\\" with a boolean value.",500,[[["ordering",4]]]],[11,"fetch_or","","Logical \\\"or\\\" with a boolean value.",500,[[["ordering",4]]]],[11,"fetch_xor","","Logical \\\"xor\\\" with a boolean value.",500,[[["ordering",4]]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying [<code>bool</code>].",500,[[]]],[11,"fetch_update","","Fetches the value, and applies a function to it that …",500,[[["ordering",4]],["result",4]]],[11,"new","","Creates a new <code>AtomicPtr</code>.",501,[[],["atomicptr",3]]],[11,"get_mut","","Returns a mutable reference to the underlying pointer.",501,[[]]],[11,"from_mut","","Get atomic access to a pointer.",501,[[],["atomicptr",3]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",501,[[]]],[11,"load","","Loads a value from the pointer.",501,[[["ordering",4]]]],[11,"store","","Stores a value into the pointer.",501,[[["ordering",4]]]],[11,"swap","","Stores a value into the pointer, returning the previous …",501,[[["ordering",4]]]],[11,"compare_and_swap","","Stores a value into the pointer if the current value is …",501,[[["ordering",4]]]],[11,"compare_exchange","","Stores a value into the pointer if the current value is …",501,[[["ordering",4]],["result",4]]],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is …",501,[[["ordering",4]],["result",4]]],[11,"fetch_update","","Fetches the value, and applies a function to it that …",501,[[["ordering",4]],["result",4]]],[11,"new","","Creates a new atomic integer.",502,[[],["atomici8",3]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",502,[[]]],[11,"from_mut","","Get atomic access to a <code>&mut i8</code>.",502,[[],["atomici8",3]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",502,[[]]],[11,"load","","Loads a value from the atomic integer.",502,[[["ordering",4]]]],[11,"store","","Stores a value into the atomic integer.",502,[[["ordering",4]]]],[11,"swap","","Stores a value into the atomic integer, returning the …",502,[[["ordering",4]]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current …",502,[[["ordering",4]]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current …",502,[[["ordering",4]],["result",4]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current …",502,[[["ordering",4]],["result",4]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",502,[[["ordering",4]]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous …",502,[[["ordering",4]]]],[11,"fetch_and","","Bitwise \\\"and\\\" with the current value.",502,[[["ordering",4]]]],[11,"fetch_nand","","Bitwise \\\"nand\\\" with the current value.",502,[[["ordering",4]]]],[11,"fetch_or","","Bitwise \\\"or\\\" with the current value.",502,[[["ordering",4]]]],[11,"fetch_xor","","Bitwise \\\"xor\\\" with the current value.",502,[[["ordering",4]]]],[11,"fetch_update","","Fetches the value, and applies a function to it that …",502,[[["ordering",4]],["result",4]]],[11,"fetch_max","","Maximum with the current value.",502,[[["ordering",4]]]],[11,"fetch_min","","Minimum with the current value.",502,[[["ordering",4]]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",502,[[]]],[11,"new","","Creates a new atomic integer.",503,[[],["atomicu8",3]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",503,[[]]],[11,"from_mut","","Get atomic access to a <code>&mut u8</code>.",503,[[],["atomicu8",3]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",503,[[]]],[11,"load","","Loads a value from the atomic integer.",503,[[["ordering",4]]]],[11,"store","","Stores a value into the atomic integer.",503,[[["ordering",4]]]],[11,"swap","","Stores a value into the atomic integer, returning the …",503,[[["ordering",4]]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current …",503,[[["ordering",4]]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current …",503,[[["ordering",4]],["result",4]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current …",503,[[["ordering",4]],["result",4]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",503,[[["ordering",4]]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous …",503,[[["ordering",4]]]],[11,"fetch_and","","Bitwise \\\"and\\\" with the current value.",503,[[["ordering",4]]]],[11,"fetch_nand","","Bitwise \\\"nand\\\" with the current value.",503,[[["ordering",4]]]],[11,"fetch_or","","Bitwise \\\"or\\\" with the current value.",503,[[["ordering",4]]]],[11,"fetch_xor","","Bitwise \\\"xor\\\" with the current value.",503,[[["ordering",4]]]],[11,"fetch_update","","Fetches the value, and applies a function to it that …",503,[[["ordering",4]],["result",4]]],[11,"fetch_max","","Maximum with the current value.",503,[[["ordering",4]]]],[11,"fetch_min","","Minimum with the current value.",503,[[["ordering",4]]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",503,[[]]],[11,"new","","Creates a new atomic integer.",504,[[],["atomici16",3]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",504,[[]]],[11,"from_mut","","Get atomic access to a <code>&mut i16</code>.",504,[[],["atomici16",3]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",504,[[]]],[11,"load","","Loads a value from the atomic integer.",504,[[["ordering",4]]]],[11,"store","","Stores a value into the atomic integer.",504,[[["ordering",4]]]],[11,"swap","","Stores a value into the atomic integer, returning the …",504,[[["ordering",4]]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current …",504,[[["ordering",4]]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current …",504,[[["ordering",4]],["result",4]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current …",504,[[["ordering",4]],["result",4]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",504,[[["ordering",4]]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous …",504,[[["ordering",4]]]],[11,"fetch_and","","Bitwise \\\"and\\\" with the current value.",504,[[["ordering",4]]]],[11,"fetch_nand","","Bitwise \\\"nand\\\" with the current value.",504,[[["ordering",4]]]],[11,"fetch_or","","Bitwise \\\"or\\\" with the current value.",504,[[["ordering",4]]]],[11,"fetch_xor","","Bitwise \\\"xor\\\" with the current value.",504,[[["ordering",4]]]],[11,"fetch_update","","Fetches the value, and applies a function to it that …",504,[[["ordering",4]],["result",4]]],[11,"fetch_max","","Maximum with the current value.",504,[[["ordering",4]]]],[11,"fetch_min","","Minimum with the current value.",504,[[["ordering",4]]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",504,[[]]],[11,"new","","Creates a new atomic integer.",505,[[],["atomicu16",3]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",505,[[]]],[11,"from_mut","","Get atomic access to a <code>&mut u16</code>.",505,[[],["atomicu16",3]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",505,[[]]],[11,"load","","Loads a value from the atomic integer.",505,[[["ordering",4]]]],[11,"store","","Stores a value into the atomic integer.",505,[[["ordering",4]]]],[11,"swap","","Stores a value into the atomic integer, returning the …",505,[[["ordering",4]]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current …",505,[[["ordering",4]]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current …",505,[[["ordering",4]],["result",4]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current …",505,[[["ordering",4]],["result",4]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",505,[[["ordering",4]]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous …",505,[[["ordering",4]]]],[11,"fetch_and","","Bitwise \\\"and\\\" with the current value.",505,[[["ordering",4]]]],[11,"fetch_nand","","Bitwise \\\"nand\\\" with the current value.",505,[[["ordering",4]]]],[11,"fetch_or","","Bitwise \\\"or\\\" with the current value.",505,[[["ordering",4]]]],[11,"fetch_xor","","Bitwise \\\"xor\\\" with the current value.",505,[[["ordering",4]]]],[11,"fetch_update","","Fetches the value, and applies a function to it that …",505,[[["ordering",4]],["result",4]]],[11,"fetch_max","","Maximum with the current value.",505,[[["ordering",4]]]],[11,"fetch_min","","Minimum with the current value.",505,[[["ordering",4]]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",505,[[]]],[11,"new","","Creates a new atomic integer.",506,[[],["atomici32",3]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",506,[[]]],[11,"from_mut","","Get atomic access to a <code>&mut i32</code>.",506,[[],["atomici32",3]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",506,[[]]],[11,"load","","Loads a value from the atomic integer.",506,[[["ordering",4]]]],[11,"store","","Stores a value into the atomic integer.",506,[[["ordering",4]]]],[11,"swap","","Stores a value into the atomic integer, returning the …",506,[[["ordering",4]]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current …",506,[[["ordering",4]]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current …",506,[[["ordering",4]],["result",4]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current …",506,[[["ordering",4]],["result",4]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",506,[[["ordering",4]]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous …",506,[[["ordering",4]]]],[11,"fetch_and","","Bitwise \\\"and\\\" with the current value.",506,[[["ordering",4]]]],[11,"fetch_nand","","Bitwise \\\"nand\\\" with the current value.",506,[[["ordering",4]]]],[11,"fetch_or","","Bitwise \\\"or\\\" with the current value.",506,[[["ordering",4]]]],[11,"fetch_xor","","Bitwise \\\"xor\\\" with the current value.",506,[[["ordering",4]]]],[11,"fetch_update","","Fetches the value, and applies a function to it that …",506,[[["ordering",4]],["result",4]]],[11,"fetch_max","","Maximum with the current value.",506,[[["ordering",4]]]],[11,"fetch_min","","Minimum with the current value.",506,[[["ordering",4]]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",506,[[]]],[11,"new","","Creates a new atomic integer.",507,[[],["atomicu32",3]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",507,[[]]],[11,"from_mut","","Get atomic access to a <code>&mut u32</code>.",507,[[],["atomicu32",3]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",507,[[]]],[11,"load","","Loads a value from the atomic integer.",507,[[["ordering",4]]]],[11,"store","","Stores a value into the atomic integer.",507,[[["ordering",4]]]],[11,"swap","","Stores a value into the atomic integer, returning the …",507,[[["ordering",4]]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current …",507,[[["ordering",4]]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current …",507,[[["ordering",4]],["result",4]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current …",507,[[["ordering",4]],["result",4]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",507,[[["ordering",4]]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous …",507,[[["ordering",4]]]],[11,"fetch_and","","Bitwise \\\"and\\\" with the current value.",507,[[["ordering",4]]]],[11,"fetch_nand","","Bitwise \\\"nand\\\" with the current value.",507,[[["ordering",4]]]],[11,"fetch_or","","Bitwise \\\"or\\\" with the current value.",507,[[["ordering",4]]]],[11,"fetch_xor","","Bitwise \\\"xor\\\" with the current value.",507,[[["ordering",4]]]],[11,"fetch_update","","Fetches the value, and applies a function to it that …",507,[[["ordering",4]],["result",4]]],[11,"fetch_max","","Maximum with the current value.",507,[[["ordering",4]]]],[11,"fetch_min","","Minimum with the current value.",507,[[["ordering",4]]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",507,[[]]],[11,"new","","Creates a new atomic integer.",508,[[],["atomici64",3]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",508,[[]]],[11,"from_mut","","Get atomic access to a <code>&mut i64</code>.",508,[[],["atomici64",3]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",508,[[]]],[11,"load","","Loads a value from the atomic integer.",508,[[["ordering",4]]]],[11,"store","","Stores a value into the atomic integer.",508,[[["ordering",4]]]],[11,"swap","","Stores a value into the atomic integer, returning the …",508,[[["ordering",4]]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current …",508,[[["ordering",4]]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current …",508,[[["ordering",4]],["result",4]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current …",508,[[["ordering",4]],["result",4]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",508,[[["ordering",4]]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous …",508,[[["ordering",4]]]],[11,"fetch_and","","Bitwise \\\"and\\\" with the current value.",508,[[["ordering",4]]]],[11,"fetch_nand","","Bitwise \\\"nand\\\" with the current value.",508,[[["ordering",4]]]],[11,"fetch_or","","Bitwise \\\"or\\\" with the current value.",508,[[["ordering",4]]]],[11,"fetch_xor","","Bitwise \\\"xor\\\" with the current value.",508,[[["ordering",4]]]],[11,"fetch_update","","Fetches the value, and applies a function to it that …",508,[[["ordering",4]],["result",4]]],[11,"fetch_max","","Maximum with the current value.",508,[[["ordering",4]]]],[11,"fetch_min","","Minimum with the current value.",508,[[["ordering",4]]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",508,[[]]],[11,"new","","Creates a new atomic integer.",509,[[],["atomicu64",3]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",509,[[]]],[11,"from_mut","","Get atomic access to a <code>&mut u64</code>.",509,[[],["atomicu64",3]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",509,[[]]],[11,"load","","Loads a value from the atomic integer.",509,[[["ordering",4]]]],[11,"store","","Stores a value into the atomic integer.",509,[[["ordering",4]]]],[11,"swap","","Stores a value into the atomic integer, returning the …",509,[[["ordering",4]]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current …",509,[[["ordering",4]]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current …",509,[[["ordering",4]],["result",4]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current …",509,[[["ordering",4]],["result",4]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",509,[[["ordering",4]]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous …",509,[[["ordering",4]]]],[11,"fetch_and","","Bitwise \\\"and\\\" with the current value.",509,[[["ordering",4]]]],[11,"fetch_nand","","Bitwise \\\"nand\\\" with the current value.",509,[[["ordering",4]]]],[11,"fetch_or","","Bitwise \\\"or\\\" with the current value.",509,[[["ordering",4]]]],[11,"fetch_xor","","Bitwise \\\"xor\\\" with the current value.",509,[[["ordering",4]]]],[11,"fetch_update","","Fetches the value, and applies a function to it that …",509,[[["ordering",4]],["result",4]]],[11,"fetch_max","","Maximum with the current value.",509,[[["ordering",4]]]],[11,"fetch_min","","Minimum with the current value.",509,[[["ordering",4]]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",509,[[]]],[11,"new","","Creates a new atomic integer.",510,[[],["atomicisize",3]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",510,[[]]],[11,"from_mut","","Get atomic access to a <code>&mut isize</code>.",510,[[],["atomicisize",3]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",510,[[]]],[11,"load","","Loads a value from the atomic integer.",510,[[["ordering",4]]]],[11,"store","","Stores a value into the atomic integer.",510,[[["ordering",4]]]],[11,"swap","","Stores a value into the atomic integer, returning the …",510,[[["ordering",4]]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current …",510,[[["ordering",4]]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current …",510,[[["ordering",4]],["result",4]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current …",510,[[["ordering",4]],["result",4]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",510,[[["ordering",4]]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous …",510,[[["ordering",4]]]],[11,"fetch_and","","Bitwise \\\"and\\\" with the current value.",510,[[["ordering",4]]]],[11,"fetch_nand","","Bitwise \\\"nand\\\" with the current value.",510,[[["ordering",4]]]],[11,"fetch_or","","Bitwise \\\"or\\\" with the current value.",510,[[["ordering",4]]]],[11,"fetch_xor","","Bitwise \\\"xor\\\" with the current value.",510,[[["ordering",4]]]],[11,"fetch_update","","Fetches the value, and applies a function to it that …",510,[[["ordering",4]],["result",4]]],[11,"fetch_max","","Maximum with the current value.",510,[[["ordering",4]]]],[11,"fetch_min","","Minimum with the current value.",510,[[["ordering",4]]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",510,[[]]],[11,"new","","Creates a new atomic integer.",511,[[],["atomicusize",3]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",511,[[]]],[11,"from_mut","","Get atomic access to a <code>&mut usize</code>.",511,[[],["atomicusize",3]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",511,[[]]],[11,"load","","Loads a value from the atomic integer.",511,[[["ordering",4]]]],[11,"store","","Stores a value into the atomic integer.",511,[[["ordering",4]]]],[11,"swap","","Stores a value into the atomic integer, returning the …",511,[[["ordering",4]]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current …",511,[[["ordering",4]]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current …",511,[[["ordering",4]],["result",4]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current …",511,[[["ordering",4]],["result",4]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",511,[[["ordering",4]]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous …",511,[[["ordering",4]]]],[11,"fetch_and","","Bitwise \\\"and\\\" with the current value.",511,[[["ordering",4]]]],[11,"fetch_nand","","Bitwise \\\"nand\\\" with the current value.",511,[[["ordering",4]]]],[11,"fetch_or","","Bitwise \\\"or\\\" with the current value.",511,[[["ordering",4]]]],[11,"fetch_xor","","Bitwise \\\"xor\\\" with the current value.",511,[[["ordering",4]]]],[11,"fetch_update","","Fetches the value, and applies a function to it that …",511,[[["ordering",4]],["result",4]]],[11,"fetch_max","","Maximum with the current value.",511,[[["ordering",4]]]],[11,"fetch_min","","Minimum with the current value.",511,[[["ordering",4]]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",511,[[]]],[11,"new","std::sync","Creates a new barrier that can block a given number of …",516,[[],["barrier",3]]],[11,"wait","","Blocks the current thread until all threads have …",516,[[],["barrierwaitresult",3]]],[11,"is_leader","","Returns <code>true</code> if this thread is the \\\"leader thread\\\" for …",517,[[]]],[11,"timed_out","","Returns <code>true</code> if the wait was known to have timed out.",518,[[]]],[11,"new","","Creates a new condition variable which is ready to be …",519,[[],["condvar",3]]],[11,"wait","","Blocks the current thread until this condition variable …",519,[[["mutexguard",3]],[["lockresult",6],["mutexguard",3]]]],[11,"wait_while","","Blocks the current thread until this condition variable …",519,[[["mutexguard",3]],[["lockresult",6],["mutexguard",3]]]],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, …",519,[[["mutexguard",3]],["lockresult",6]]],[11,"wait_timeout","","Waits on this condition variable for a notification, …",519,[[["mutexguard",3],["duration",3]],["lockresult",6]]],[11,"wait_timeout_while","","Waits on this condition variable for a notification, …",519,[[["mutexguard",3],["duration",3]],["lockresult",6]]],[11,"notify_one","","Wakes up one blocked thread on this condvar.",519,[[]]],[11,"notify_all","","Wakes up all blocked threads on this condvar.",519,[[]]],[11,"new","","Creates a new mutex in an unlocked state ready for use.",520,[[],["mutex",3]]],[11,"lock","","Acquires a mutex, blocking the current thread until it is …",520,[[],[["lockresult",6],["mutexguard",3]]]],[11,"try_lock","","Attempts to acquire this lock.",520,[[],[["trylockresult",6],["mutexguard",3]]]],[11,"is_poisoned","","Determines whether the mutex is poisoned.",520,[[]]],[11,"into_inner","","Consumes this mutex, returning the underlying data.",520,[[],["lockresult",6]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",520,[[],["lockresult",6]]],[11,"new","","Creates a new <code>Once</code> value.",522,[[],["once",3]]],[11,"call_once","","Performs an initialization routine once and only once. …",522,[[]]],[11,"call_once_force","","Performs the same function as <code>call_once()</code> except ignores …",522,[[]]],[11,"is_completed","","Returns <code>true</code> if some <code>call_once()</code> call has completed …",522,[[]]],[11,"poisoned","","Returns <code>true</code> if the associated [<code>Once</code>] was poisoned prior …",523,[[]]],[11,"new","","Creates a new instance of an <code>RwLock<T></code> which is unlocked.",524,[[],["rwlock",3]]],[11,"read","","Locks this rwlock with shared read access, blocking the …",524,[[],[["lockresult",6],["rwlockreadguard",3]]]],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",524,[[],[["trylockresult",6],["rwlockreadguard",3]]]],[11,"write","","Locks this rwlock with exclusive write access, blocking …",524,[[],[["lockresult",6],["rwlockwriteguard",3]]]],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",524,[[],[["rwlockwriteguard",3],["trylockresult",6]]]],[11,"is_poisoned","","Determines whether the lock is poisoned.",524,[[]]],[11,"into_inner","","Consumes this <code>RwLock</code>, returning the underlying data.",524,[[],["lockresult",6]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",524,[[],["lockresult",6]]],[18,"SECOND","std::time","The duration of one second.",527,null],[18,"MILLISECOND","","The duration of one millisecond.",527,null],[18,"MICROSECOND","","The duration of one microsecond.",527,null],[18,"NANOSECOND","","The duration of one nanosecond.",527,null],[18,"ZERO","","A duration of zero time.",527,null],[18,"MAX","","The maximum duration.",527,null],[11,"new","","Creates a new <code>Duration</code> from the specified number of whole …",527,[[],["duration",3]]],[11,"from_secs","","Creates a new <code>Duration</code> from the specified number of whole …",527,[[],["duration",3]]],[11,"from_millis","","Creates a new <code>Duration</code> from the specified number of …",527,[[],["duration",3]]],[11,"from_micros","","Creates a new <code>Duration</code> from the specified number of …",527,[[],["duration",3]]],[11,"from_nanos","","Creates a new <code>Duration</code> from the specified number of …",527,[[],["duration",3]]],[11,"is_zero","","Returns true if this <code>Duration</code> spans no time.",527,[[]]],[11,"as_secs","","Returns the number of <em>whole</em> seconds contained by this …",527,[[]]],[11,"subsec_millis","","Returns the fractional part of this <code>Duration</code>, in whole …",527,[[]]],[11,"subsec_micros","","Returns the fractional part of this <code>Duration</code>, in whole …",527,[[]]],[11,"subsec_nanos","","Returns the fractional part of this <code>Duration</code>, in …",527,[[]]],[11,"as_millis","","Returns the total number of whole milliseconds contained …",527,[[]]],[11,"as_micros","","Returns the total number of whole microseconds contained …",527,[[]]],[11,"as_nanos","","Returns the total number of nanoseconds contained by this …",527,[[]]],[11,"checked_add","","Checked <code>Duration</code> addition. Computes <code>self + other</code>, …",527,[[["duration",3]],[["option",4],["duration",3]]]],[11,"saturating_add","","Saturating <code>Duration</code> addition. Computes <code>self + other</code>, …",527,[[["duration",3]],["duration",3]]],[11,"checked_sub","","Checked <code>Duration</code> subtraction. Computes <code>self - other</code>, …",527,[[["duration",3]],[["option",4],["duration",3]]]],[11,"saturating_sub","","Saturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …",527,[[["duration",3]],["duration",3]]],[11,"checked_mul","","Checked <code>Duration</code> multiplication. Computes <code>self * other</code>, …",527,[[],[["option",4],["duration",3]]]],[11,"saturating_mul","","Saturating <code>Duration</code> multiplication. Computes <code>self * other</code>…",527,[[],["duration",3]]],[11,"checked_div","","Checked <code>Duration</code> division. Computes <code>self / other</code>, …",527,[[],[["option",4],["duration",3]]]],[11,"as_secs_f64","","Returns the number of seconds contained by this <code>Duration</code> …",527,[[]]],[11,"as_secs_f32","","Returns the number of seconds contained by this <code>Duration</code> …",527,[[]]],[11,"from_secs_f64","","Creates a new <code>Duration</code> from the specified number of …",527,[[],["duration",3]]],[11,"from_secs_f32","","Creates a new <code>Duration</code> from the specified number of …",527,[[],["duration",3]]],[11,"mul_f64","","Multiplies <code>Duration</code> by <code>f64</code>.",527,[[],["duration",3]]],[11,"mul_f32","","Multiplies <code>Duration</code> by <code>f32</code>.",527,[[],["duration",3]]],[11,"div_f64","","Divide <code>Duration</code> by <code>f64</code>.",527,[[],["duration",3]]],[11,"div_f32","","Divide <code>Duration</code> by <code>f32</code>.",527,[[],["duration",3]]],[11,"div_duration_f64","","Divide <code>Duration</code> by <code>Duration</code> and return <code>f64</code>.",527,[[["duration",3]]]],[11,"div_duration_f32","","Divide <code>Duration</code> by <code>Duration</code> and return <code>f32</code>.",527,[[["duration",3]]]],[11,"new","std::lazy","Creates a new empty cell.",528,[[],["oncecell",3]]],[11,"get","","Gets the reference to the underlying value.",528,[[],["option",4]]],[11,"get_mut","","Gets the mutable reference to the underlying value.",528,[[],["option",4]]],[11,"set","","Sets the contents of the cell to <code>value</code>.",528,[[],["result",4]]],[11,"get_or_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",528,[[]]],[11,"get_or_try_init","","Gets the contents of the cell, initializing it with <code>f</code> if …",528,[[],["result",4]]],[11,"into_inner","","Consumes the cell, returning the wrapped value.",528,[[],["option",4]]],[11,"take","","Takes the value out of this <code>OnceCell</code>, moving it back to …",528,[[],["option",4]]],[11,"new","","Creates a new lazy value with the given initializing …",529,[[],["lazy",3]]],[11,"force","","Forces the evaluation of this lazy value and returns a …",529,[[["lazy",3]]]],[11,"map","std::task","Changes the ready value of this <code>Poll</code> with the closure …",200,[[],["poll",4]]],[11,"is_ready","","Returns <code>true</code> if this is <code>Poll::Ready</code>",200,[[]]],[11,"is_pending","","Returns <code>true</code> if this is <code>Poll::Pending</code>",200,[[]]],[11,"map_ok","","Changes the success value of this <code>Poll</code> with the closure …",200,[[],[["result",4],["poll",4]]]],[11,"map_err","","Changes the error value of this <code>Poll</code> with the closure …",200,[[],[["result",4],["poll",4]]]],[11,"map_ok","","Changes the success value of this <code>Poll</code> with the closure …",200,[[],[["poll",4],["option",4]]]],[11,"map_err","","Changes the error value of this <code>Poll</code> with the closure …",200,[[],[["option",4],["poll",4]]]],[11,"from_waker","","Create a new <code>Context</code> from a <code>&Waker</code>.",530,[[["waker",3]],["context",3]]],[11,"waker","","Returns a reference to the <code>Waker</code> for the current task.",530,[[],["waker",3]]],[11,"new","","Creates a new <code>RawWaker</code> from the provided <code>data</code> pointer and …",531,[[["rawwakervtable",3]],["rawwaker",3]]],[11,"new","","Creates a new <code>RawWakerVTable</code> from the provided <code>clone</code>, <code>wake</code>…",532,[[],["rawwakervtable",3]]],[11,"wake","","Wake up the task associated with this <code>Waker</code>.",533,[[]]],[11,"wake_by_ref","","Wake up the task associated with this <code>Waker</code> without …",533,[[]]],[11,"will_wake","","Returns <code>true</code> if this <code>Waker</code> and another <code>Waker</code> have awoken …",533,[[["waker",3]]]],[11,"from_raw","","Creates a new <code>Waker</code> from [<code>RawWaker</code>].",533,[[["rawwaker",3]],["waker",3]]],[11,"from_size_align","std::alloc","Constructs a <code>Layout</code> from a given <code>size</code> and <code>align</code>, or …",538,[[],[["layout",3],["layouterror",3],["result",4]]]],[11,"from_size_align_unchecked","","Creates a layout, bypassing all checks.",538,[[],["layout",3]]],[11,"size","","The minimum size in bytes for a memory block of this …",538,[[]]],[11,"align","","The minimum byte alignment for a memory block of this …",538,[[]]],[11,"new","","Constructs a <code>Layout</code> suitable for holding a value of type <code>T</code>…",538,[[],["layout",3]]],[11,"for_value","","Produces layout describing a record that could be used to …",538,[[],["layout",3]]],[11,"for_value_raw","","Produces layout describing a record that could be used to …",538,[[],["layout",3]]],[11,"dangling","","Creates a <code>NonNull</code> that is dangling, but well-aligned for …",538,[[],["nonnull",3]]],[11,"align_to","","Creates a layout describing the record that can hold a …",538,[[],[["layout",3],["layouterror",3],["result",4]]]],[11,"padding_needed_for","","Returns the amount of padding we must insert after <code>self</code> …",538,[[]]],[11,"pad_to_align","","Creates a layout by rounding the size of this layout up …",538,[[],["layout",3]]],[11,"repeat","","Creates a layout describing the record for <code>n</code> instances of …",538,[[],[["result",4],["layouterror",3]]]],[11,"extend","","Creates a layout describing the record for <code>self</code> followed …",538,[[["layout",3]],[["result",4],["layouterror",3]]]],[11,"repeat_packed","","Creates a layout describing the record for <code>n</code> instances of …",538,[[],[["layout",3],["layouterror",3],["result",4]]]],[11,"extend_packed","","Creates a layout describing the record for <code>self</code> followed …",538,[[["layout",3]],[["layout",3],["layouterror",3],["result",4]]]],[11,"array","","Creates a layout describing the record for a <code>[T; n]</code>.",538,[[],[["layout",3],["layouterror",3],["result",4]]]]],"p":[[8,"ToOwned"],[4,"Cow"],[8,"Borrow"],[8,"BorrowMut"],[4,"Alignment"],[8,"Binary"],[8,"Octal"],[8,"Debug"],[8,"Display"],[8,"Write"],[8,"LowerExp"],[8,"UpperExp"],[8,"LowerHex"],[8,"Pointer"],[8,"UpperHex"],[8,"Concat"],[8,"Join"],[8,"SliceIndex"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"FromStr"],[8,"ToString"],[8,"Any"],[8,"FixedSizeArray"],[8,"Clone"],[8,"PartialEq"],[4,"Ordering"],[3,"Reverse"],[8,"Ord"],[8,"PartialOrd"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"TryInto"],[8,"TryFrom"],[8,"Default"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"Iterator"],[8,"Step"],[8,"DoubleEndedIterator"],[8,"ExactSizeIterator"],[8,"Extend"],[8,"FromIterator"],[8,"IntoIterator"],[8,"Product"],[8,"Sum"],[8,"SourceIter"],[8,"DiscriminantKind"],[8,"Add"],[8,"Div"],[8,"Mul"],[8,"Neg"],[8,"Rem"],[8,"Sub"],[8,"AddAssign"],[8,"DivAssign"],[8,"MulAssign"],[8,"RemAssign"],[8,"SubAssign"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Not"],[8,"Shl"],[8,"Shr"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Deref"],[8,"DerefMut"],[8,"Drop"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Index"],[8,"IndexMut"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Bound"],[8,"RangeBounds"],[3,"RangeToInclusive"],[8,"Try"],[8,"Generator"],[4,"GeneratorState"],[4,"ControlFlow"],[4,"Option"],[3,"TraitObject"],[4,"Result"],[3,"Builder"],[3,"ThreadId"],[3,"Thread"],[3,"JoinHandle"],[8,"AsciiExt"],[4,"BacktraceStatus"],[3,"Backtrace"],[4,"Entry"],[4,"TryReserveError"],[13,"AllocError"],[4,"RawEntryMut"],[4,"Entry"],[4,"VarError"],[8,"Error"],[3,"File"],[3,"OpenOptions"],[3,"Metadata"],[3,"Permissions"],[3,"FileType"],[3,"DirEntry"],[3,"DirBuilder"],[4,"ErrorKind"],[8,"Read"],[3,"IoSliceMut"],[3,"IoSlice"],[3,"Initializer"],[8,"Write"],[8,"Seek"],[4,"SeekFrom"],[8,"BufRead"],[3,"Chain"],[3,"Take"],[4,"SocketAddr"],[8,"ToSocketAddrs"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[4,"Shutdown"],[3,"Wrapping"],[4,"FpCategory"],[4,"IntErrorKind"],[8,"OsStringExt"],[8,"OsStrExt"],[8,"FileExt"],[8,"PermissionsExt"],[8,"OpenOptionsExt"],[8,"MetadataExt"],[8,"FileTypeExt"],[8,"DirEntryExt"],[8,"DirBuilderExt"],[8,"AsRawFd"],[8,"FromRawFd"],[8,"IntoRawFd"],[4,"AncillaryError"],[13,"Unknown"],[4,"AncillaryData"],[3,"UCred"],[8,"CommandExt"],[8,"ExitStatusExt"],[8,"JoinHandleExt"],[8,"OsStringExt"],[8,"OsStrExt"],[8,"FileExt"],[8,"OpenOptionsExt"],[8,"MetadataExt"],[8,"FileTypeExt"],[8,"AsRawHandle"],[8,"FromRawHandle"],[8,"IntoRawHandle"],[8,"AsRawSocket"],[8,"FromRawSocket"],[8,"IntoRawSocket"],[8,"ExitStatusExt"],[8,"CommandExt"],[8,"MetadataExt"],[3,"stat"],[3,"AssertUnwindSafe"],[4,"Prefix"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[3,"Child"],[3,"Command"],[3,"Output"],[3,"Stdio"],[3,"ExitStatus"],[3,"ExitCode"],[8,"Termination"],[4,"Ordering"],[3,"SendError"],[4,"TryRecvError"],[4,"RecvTimeoutError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[4,"TryLockError"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"SyncOnceCell"],[3,"SyncLazy"],[4,"Poll"],[8,"Wake"],[8,"Future"],[8,"IntoFuture"],[3,"PoisonError"],[3,"SocketAddr"],[3,"SocketCred"],[3,"SocketAncillary"],[3,"UnixDatagram"],[3,"UnixListener"],[3,"UnixStream"],[8,"Allocator"],[8,"GlobalAlloc"],[3,"Box"],[3,"Error"],[3,"Arguments"],[3,"DebugList"],[3,"DebugMap"],[3,"DebugSet"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"Formatter"],[3,"Rc"],[3,"Weak"],[3,"ArrayChunks"],[3,"ArrayChunksMut"],[3,"ArrayWindows"],[3,"Chunks"],[3,"Windows"],[3,"ChunksExact"],[3,"ChunksExactMut"],[3,"ChunksMut"],[3,"Split"],[3,"SplitMut"],[3,"Iter"],[3,"IterMut"],[3,"RChunks"],[3,"RChunksExact"],[3,"RChunksExactMut"],[3,"RChunksMut"],[3,"RSplit"],[3,"RSplitMut"],[3,"RSplitN"],[3,"RSplitNMut"],[3,"SplitN"],[3,"SplitNMut"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"EncodeUtf16"],[3,"SplitAsciiWhitespace"],[3,"SplitWhitespace"],[3,"Bytes"],[3,"CharIndices"],[3,"Chars"],[3,"ParseBoolError"],[3,"EscapeDebug"],[3,"EscapeDefault"],[3,"EscapeUnicode"],[3,"Utf8Error"],[3,"Lines"],[3,"LinesAny"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"RSplit"],[3,"Split"],[3,"RSplitN"],[3,"SplitN"],[3,"RSplitTerminator"],[3,"SplitTerminator"],[3,"String"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[3,"Drain"],[3,"Vec"],[3,"IntoIter"],[3,"Drain"],[3,"Splice"],[3,"DrainFilter"],[3,"TypeId"],[3,"TryFromSliceError"],[3,"IntoIter"],[3,"Cell"],[3,"RefCell"],[3,"BorrowError"],[3,"BorrowMutError"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EscapeDebug"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"CharTryFromError"],[3,"ParseCharError"],[3,"DecodeUtf16"],[3,"DecodeUtf16Error"],[4,"Infallible"],[3,"BuildHasherDefault"],[3,"SipHasher"],[3,"Empty"],[3,"FromFn"],[3,"Once"],[3,"OnceWith"],[3,"Repeat"],[3,"RepeatWith"],[3,"Successors"],[3,"Cloned"],[3,"Copied"],[3,"Flatten"],[3,"MapWhile"],[3,"StepBy"],[3,"Chain"],[3,"Cycle"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Map"],[3,"Peekable"],[3,"Rev"],[3,"Scan"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Zip"],[3,"PhantomData"],[3,"PhantomPinned"],[3,"Discriminant"],[3,"ManuallyDrop"],[19,"MaybeUninit"],[3,"RangeFull"],[3,"RangeInclusive"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"NoneError"],[3,"Pin"],[3,"NonNull"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"LocalKey"],[3,"AccessError"],[3,"EscapeDefault"],[3,"BinaryHeap"],[3,"PeekMut"],[3,"Iter"],[3,"IntoIter"],[3,"IntoIterSorted"],[3,"Drain"],[3,"DrainSorted"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"BTreeMap"],[3,"Iter"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"IntoKeys"],[3,"IntoValues"],[3,"Range"],[3,"RangeMut"],[3,"DrainFilter"],[3,"IterMut"],[3,"Iter"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"DrainFilter"],[3,"BTreeSet"],[3,"IntoIter"],[3,"Range"],[3,"LinkedList"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Cursor"],[3,"CursorMut"],[3,"DrainFilter"],[3,"VecDeque"],[3,"Drain"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"HashMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"DrainFilter"],[3,"ValuesMut"],[3,"IntoKeys"],[3,"IntoValues"],[3,"RawEntryBuilderMut"],[3,"RawOccupiedEntryMut"],[3,"RawVacantEntryMut"],[3,"RawEntryBuilder"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"DefaultHasher"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"DrainFilter"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"Vars"],[3,"VarsOs"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"Chain"],[4,"c_void"],[3,"VaList"],[3,"VaListImpl"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"FromBytesWithNulError"],[3,"FromVecWithNulError"],[3,"IntoStringError"],[3,"OsString"],[3,"OsStr"],[3,"ReadDir"],[3,"BufReader"],[3,"BufWriter"],[3,"LineWriter"],[3,"IntoInnerError"],[3,"Cursor"],[3,"Error"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"Bytes"],[3,"Split"],[3,"Lines"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"AddrParseError"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"ParseFloatError"],[3,"ParseIntError"],[3,"TryFromIntError"],[3,"NonZeroI128"],[3,"NonZeroI16"],[3,"NonZeroI32"],[3,"NonZeroI64"],[3,"NonZeroI8"],[3,"NonZeroIsize"],[3,"NonZeroU128"],[3,"NonZeroU16"],[3,"NonZeroU32"],[3,"NonZeroU64"],[3,"NonZeroU8"],[3,"NonZeroUsize"],[3,"ScmRights"],[3,"ScmCredentials"],[3,"Messages"],[3,"Incoming"],[3,"EncodeWide"],[3,"Location"],[3,"PanicInfo"],[3,"Ancestors"],[3,"StripPrefixError"],[3,"Display"],[3,"CommandEnvs"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"CommandArgs"],[3,"Arc"],[3,"Weak"],[3,"AtomicBool"],[3,"AtomicPtr"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Iter"],[3,"TryIter"],[3,"IntoIter"],[3,"RecvError"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"Mutex"],[3,"MutexGuard"],[3,"Once"],[3,"OnceState"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Duration"],[3,"OnceCell"],[3,"Lazy"],[3,"Context"],[3,"RawWaker"],[3,"RawWakerVTable"],[3,"Waker"],[3,"Pending"],[3,"Ready"],[3,"Global"],[3,"AllocError"],[3,"Layout"],[3,"LayoutError"],[3,"System"],[15,"reference"],[15,"u8"],[15,"i64"],[15,"i8"],[15,"usize"],[15,"u128"],[15,"u32"],[15,"i128"],[15,"u16"],[15,"i32"],[15,"i16"],[15,"u64"],[15,"isize"],[15,"f32"],[15,"f64"],[15,"unit"],[15,"slice"],[15,"array"],[15,"bool"],[15,"str"],[15,"fn"],[15,"tuple"],[15,"never"],[15,"char"],[15,"pointer"],[6,"RawFd"]],"a":{"!":[2076],"!=":[217,220],"%":[725,737],"%=":[737],"&":[741,2098],"&*":[769],"&=":[759],"&mut":[2098],"(":[2083],"()":[2083],")":[2083],"*":[719,735,769,772],"*=":[735],"+":[713,731],"+=":[731],"-":[722,728,739],"-=":[739],"..":[788,791,793,794],"..=":[805,806],"/":[716,733],"/=":[733],"<":[227,232],"<<":[753],"<<=":[765],"<=":[227,232],"==":[217,220],">":[227,232],">=":[227,232],">>":[756],">>=":[767],"?":[808,894],"[":[783,786,2081],"[]":[783,786,2080,2081],"[t; n]":[2080],"[t;n]":[2080],"]":[783,786,2081],"^":[747],"^=":[763],"compare_and_swap":[16716,16717],"false":[2075],"inject":[563],"memcpy":[521,853,12111],"memmove":[522,854],"memset":[12108],"popcnt":[12777,12924,13008,13092,13182,13325,13409,13509,13599,13861,13945,14029,16395,16409,16423,16437,16451,16465,16479,16493,16507,16521,16535,16549],"popcount":[12777,12924,13008,13092,13182,13325,13409,13509,13599,13861,13945,14029,16395,16409,16423,16437,16451,16465,16479,16493,16507,16521,16535,16549],"promise":[2135],"ptr":[2079],"reduce":[563],"true":[2075],"{:?}":[27],"{}":[30],"|":[744],"|=":[761]}},\
"test":{"doc":"Support code for rustc\'s built in unit-test and …","i":[[5,"black_box","test","An identity function that <em><strong>hints</strong></em> to the compiler to be …",null,[[]]],[0,"test","","",null,null],[5,"parse_opts","test::test","Parses command line arguments into test options. Returns …",null,[[],[["result",4],["option",4]]]],[3,"TestOpts","","",null,null],[12,"list","","",0,null],[12,"filter","","",0,null],[12,"filter_exact","","",0,null],[12,"force_run_in_process","","",0,null],[12,"exclude_should_panic","","",0,null],[12,"run_ignored","","",0,null],[12,"run_tests","","",0,null],[12,"bench_benchmarks","","",0,null],[12,"logfile","","",0,null],[12,"nocapture","","",0,null],[12,"color","","",0,null],[12,"format","","",0,null],[12,"test_threads","","",0,null],[12,"skip","","",0,null],[12,"time_options","","",0,null],[12,"options","","",0,null],[3,"Metric","","",null,null],[3,"MetricMap","","",null,null],[3,"Options","","Options for the test run defined by the caller (instead …",null,null],[12,"display_output","","",1,null],[12,"panic_abort","","",1,null],[4,"RunIgnored","","Whether ignored test should be run or not",null,null],[13,"Yes","","",2,null],[13,"No","","",2,null],[13,"Only","","Run only ignored tests",2,null],[4,"RunStrategy","","",null,null],[13,"InProcess","","Runs the test in the current process, and sends the …",3,null],[13,"SpawnPrimary","","Spawns a subprocess to run the test, and sends the result …",3,null],[4,"ShouldPanic","","Whether test is expected to panic or not",null,null],[13,"No","","",4,null],[13,"Yes","","",4,null],[13,"YesWithMessage","","",4,null],[4,"TestResult","","",null,null],[13,"TrOk","","",5,null],[13,"TrFailed","","",5,null],[13,"TrFailedMsg","","",5,null],[13,"TrIgnored","","",5,null],[13,"TrAllowedFail","","",5,null],[13,"TrBench","","",5,null],[13,"TrTimedFail","","",5,null],[3,"TestExecTime","","The measured execution time of a unit test.",null,null],[12,"0","","",6,null],[3,"TestTimeOptions","","Structure with parameters for calculating test execution …",null,null],[12,"error_on_excess","","Denotes if the test critical execution time limit excess …",7,null],[12,"colored","","",7,null],[12,"unit_threshold","","",7,null],[12,"integration_threshold","","",7,null],[12,"doctest_threshold","","",7,null],[3,"TestDesc","","",null,null],[12,"name","","",8,null],[12,"ignore","","",8,null],[12,"should_panic","","",8,null],[12,"allow_fail","","",8,null],[12,"test_type","","",8,null],[3,"TestDescAndFn","","",null,null],[12,"desc","","",9,null],[12,"testfn","","",9,null],[4,"TestName","","",null,null],[13,"StaticTestName","","",10,null],[13,"DynTestName","","",10,null],[13,"AlignedTestName","","",10,null],[4,"TestType","","Type of the test according to the rust book conventions.",null,null],[13,"UnitTest","","Unit-tests are expected to be in the <code>src</code> folder of the …",11,null],[13,"IntegrationTest","","Integration-style tests are expected to be in the <code>tests</code> …",11,null],[13,"DocTest","","Doctests are created by the <code>librustdoc</code> manually, so it\'s …",11,null],[13,"Unknown","","Tests for the sources that don\'t follow the project …",11,null],[0,"bench","test","Benchmarking module.",null,null],[5,"black_box","test::bench","An identity function that <em><strong>hints</strong></em> to the compiler to be …",null,[[]]],[3,"Bencher","","Manager of the benchmarking runs.",null,null],[12,"bytes","","",12,null],[11,"iter","","Callback for benchmark functions to run in their body.",12,[[]]],[11,"bench","","",12,[[],[["summary",3],["option",4]]]],[3,"BenchSamples","","",null,null],[12,"ns_iter_summ","","",13,null],[12,"mb_s","","",13,null],[5,"fmt_bench_samples","","",null,[[["benchsamples",3]],["string",3]]],[5,"iter","","",null,[[],["summary",3]]],[5,"benchmark","","",null,[[["completedtest",3],["sender",3],["testdesc",3]]]],[5,"run_once","","",null,[[]]],[11,"use_color","test::test","",0,[[]]],[11,"new","","",14,[[],["metric",3]]],[11,"new","","",15,[[],["metricmap",3]]],[11,"insert_metric","","Insert a named <code>value</code> (+/- <code>noise</code>) metric into the map. The …",15,[[]]],[11,"fmt_metrics","","",15,[[],["string",3]]],[11,"new","","",1,[[],["options",3]]],[11,"display_output","","",1,[[],["options",3]]],[11,"panic_abort","","",1,[[],["options",3]]],[0,"stats","test","",null,null],[8,"Stats","test::stats","Trait that provides simple descriptive statistics on a …",null,null],[10,"sum","","Sum of the samples.",16,[[]]],[10,"min","","Minimum value of the samples.",16,[[]]],[10,"max","","Maximum value of the samples.",16,[[]]],[10,"mean","","Arithmetic mean (average) of the samples: sum divided by …",16,[[]]],[10,"median","","Median of the samples: value separating the lower half of …",16,[[]]],[10,"var","","Variance of the samples: bias-corrected mean of the …",16,[[]]],[10,"std_dev","","Standard deviation: the square root of the sample …",16,[[]]],[10,"std_dev_pct","","Standard deviation as a percent of the mean value. See …",16,[[]]],[10,"median_abs_dev","","Scaled median of the absolute deviations of each sample …",16,[[]]],[10,"median_abs_dev_pct","","Median absolute deviation as a percent of the median. See …",16,[[]]],[10,"percentile","","Percentile: the value below which <code>pct</code> percent of the …",16,[[]]],[10,"quartiles","","Quartiles of the sample: three values that divide the …",16,[[]]],[10,"iqr","","Inter-quartile range: the difference between the 25th …",16,[[]]],[3,"Summary","","Extracted collection of all the summary statistics of a …",null,null],[12,"sum","","",17,null],[12,"min","","",17,null],[12,"max","","",17,null],[12,"mean","","",17,null],[12,"median","","",17,null],[12,"var","","",17,null],[12,"std_dev","","",17,null],[12,"std_dev_pct","","",17,null],[12,"median_abs_dev","","",17,null],[12,"median_abs_dev_pct","","",17,null],[12,"quartiles","","",17,null],[12,"iqr","","",17,null],[11,"new","","Construct a new summary of a sample set.",17,[[],["summary",3]]],[5,"winsorize","","Winsorize a set of samples, replacing values above the …",null,[[]]],[11,"new_from_env","test::test","",7,[[]]],[11,"is_warn","","",7,[[["testexectime",3],["testdesc",3]]]],[11,"is_critical","","",7,[[["testexectime",3],["testdesc",3]]]],[11,"as_slice","","",10,[[]]],[11,"padding","","",10,[[],["namepadding",4]]],[11,"with_padding","","",10,[[["namepadding",4]],["testname",4]]],[11,"padded_name","","",8,[[["namepadding",4]],["string",3]]],[5,"run_tests_console","test","A simple console test runner. Runs provided tests …",null,[[["vec",3],["testdescandfn",3],["testopts",3]],["result",6]]],[4,"ColorConfig","","Whether should console output be colored or not",null,null],[13,"AutoColor","","",18,null],[13,"AlwaysColor","","",18,null],[13,"NeverColor","","",18,null],[3,"Options","","Options for the test run defined by the caller (instead …",null,null],[12,"display_output","","",1,null],[12,"panic_abort","","",1,null],[4,"OutputFormat","","Format of the test results output",null,null],[13,"Pretty","","Verbose output",19,null],[13,"Terse","","Quiet output",19,null],[13,"Json","","JSON output",19,null],[4,"RunIgnored","","Whether ignored test should be run or not",null,null],[13,"Yes","","",2,null],[13,"No","","",2,null],[13,"Only","","Run only ignored tests",2,null],[4,"ShouldPanic","","Whether test is expected to panic or not",null,null],[13,"No","","",4,null],[13,"Yes","","",4,null],[13,"YesWithMessage","","",4,null],[4,"TestType","","Type of the test according to the rust book conventions.",null,null],[13,"UnitTest","","Unit-tests are expected to be in the <code>src</code> folder of the …",11,null],[13,"IntegrationTest","","Integration-style tests are expected to be in the <code>tests</code> …",11,null],[13,"DocTest","","Doctests are created by the <code>librustdoc</code> manually, so it\'s …",11,null],[13,"Unknown","","Tests for the sources that don\'t follow the project …",11,null],[4,"NamePadding","","",null,null],[13,"PadNone","","",20,null],[13,"PadOnRight","","",20,null],[4,"TestName","","",null,null],[13,"StaticTestName","","",10,null],[13,"DynTestName","","",10,null],[13,"AlignedTestName","","",10,null],[8,"TDynBenchFn","","Represents a benchmark function.",null,null],[10,"run","","",21,[[["bencher",3]]]],[4,"TestFn","","",null,null],[13,"StaticTestFn","","",22,null],[13,"StaticBenchFn","","",22,null],[13,"DynTestFn","","",22,null],[13,"DynBenchFn","","",22,null],[3,"TestDesc","","",null,null],[12,"name","","",8,null],[12,"ignore","","",8,null],[12,"should_panic","","",8,null],[12,"allow_fail","","",8,null],[12,"test_type","","",8,null],[3,"TestDescAndFn","","",null,null],[12,"desc","","",9,null],[12,"testfn","","",9,null],[3,"TestOpts","","",null,null],[12,"list","","",0,null],[12,"filter","","",0,null],[12,"filter_exact","","",0,null],[12,"force_run_in_process","","",0,null],[12,"exclude_should_panic","","",0,null],[12,"run_ignored","","",0,null],[12,"run_tests","","",0,null],[12,"bench_benchmarks","","",0,null],[12,"logfile","","",0,null],[12,"nocapture","","",0,null],[12,"color","","",0,null],[12,"format","","",0,null],[12,"test_threads","","",0,null],[12,"skip","","",0,null],[12,"time_options","","",0,null],[12,"options","","",0,null],[5,"test_main","","",null,[[["option",4],["vec",3],["testdescandfn",3],["options",3]]]],[5,"test_main_static","","A variant optimized for invocation with a static test …",null,[[]]],[5,"test_main_static_abort","","A variant optimized for invocation with a static test …",null,[[]]],[5,"assert_test_result","","Invoked when unit tests terminate. Should panic if the …",null,[[["termination",8]]]],[5,"run_tests","","",null,[[["vec",3],["testdescandfn",3],["testopts",3]],["result",6]]],[5,"filter_tests","","",null,[[["vec",3],["testdescandfn",3],["testopts",3]],[["testdescandfn",3],["vec",3]]]],[5,"convert_benchmarks_to_tests","","",null,[[["testdescandfn",3],["vec",3]],[["testdescandfn",3],["vec",3]]]],[5,"run_test","","",null,[[["concurrent",4],["runstrategy",4],["testopts",3],["testdescandfn",3],["completedtest",3],["sender",3]]]],[11,"from","test::test","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","test::bench","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","test","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","test::stats","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","test","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"clone","test::bench","",12,[[],["bencher",3]]],[11,"clone","","",13,[[],["benchsamples",3]]],[11,"clone","test::test","",14,[[],["metric",3]]],[11,"clone","","",15,[[],["metricmap",3]]],[11,"clone","","",4,[[],["shouldpanic",4]]],[11,"clone","test","",18,[[],["colorconfig",4]]],[11,"clone","","",19,[[],["outputformat",4]]],[11,"clone","test::test","",2,[[],["runignored",4]]],[11,"clone","","",3,[[],["runstrategy",4]]],[11,"clone","","",1,[[],["options",3]]],[11,"clone","test::stats","",17,[[],["summary",3]]],[11,"clone","test::test","",5,[[],["testresult",4]]],[11,"clone","","",6,[[],["testexectime",3]]],[11,"clone","","",7,[[],["testtimeoptions",3]]],[11,"clone","","",11,[[],["testtype",4]]],[11,"clone","test","",20,[[],["namepadding",4]]],[11,"clone","test::test","",10,[[],["testname",4]]],[11,"clone","","",8,[[],["testdesc",3]]],[11,"default","","",7,[[],["testtimeoptions",3]]],[11,"eq","test::bench","",13,[[["benchsamples",3]]]],[11,"ne","","",13,[[["benchsamples",3]]]],[11,"eq","test::test","",14,[[["metric",3]]]],[11,"ne","","",14,[[["metric",3]]]],[11,"eq","","",15,[[["metricmap",3]]]],[11,"ne","","",15,[[["metricmap",3]]]],[11,"eq","","",4,[[["shouldpanic",4]]]],[11,"ne","","",4,[[["shouldpanic",4]]]],[11,"eq","test","",19,[[["outputformat",4]]]],[11,"eq","test::test","",2,[[["runignored",4]]]],[11,"eq","test::stats","",17,[[["summary",3]]]],[11,"ne","","",17,[[["summary",3]]]],[11,"eq","test::test","",5,[[["testresult",4]]]],[11,"ne","","",5,[[["testresult",4]]]],[11,"eq","","",6,[[["testexectime",3]]]],[11,"ne","","",6,[[["testexectime",3]]]],[11,"eq","","",7,[[["testtimeoptions",3]]]],[11,"ne","","",7,[[["testtimeoptions",3]]]],[11,"eq","","",11,[[["testtype",4]]]],[11,"eq","test","",20,[[["namepadding",4]]]],[11,"eq","test::test","",10,[[["testname",4]]]],[11,"ne","","",10,[[["testname",4]]]],[11,"eq","","",8,[[["testdesc",3]]]],[11,"ne","","",8,[[["testdesc",3]]]],[11,"fmt","test::bench","",13,[[["formatter",3]],["result",6]]],[11,"fmt","test::test","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","test","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","test::test","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","test::stats","",17,[[["formatter",3]],["result",6]]],[11,"fmt","test::test","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","test","",20,[[["formatter",3]],["result",6]]],[11,"fmt","test::test","",10,[[["formatter",3]],["result",6]]],[11,"fmt","test","",22,[[["formatter",3]],["result",6]]],[11,"fmt","test::test","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"hash","","",4,[[]]],[11,"hash","","",11,[[]]],[11,"hash","test","",20,[[]]],[11,"hash","test::test","",10,[[]]],[11,"hash","","",8,[[]]],[11,"padding","test","",22,[[],["namepadding",4]]]],"p":[[3,"TestOpts"],[3,"Options"],[4,"RunIgnored"],[4,"RunStrategy"],[4,"ShouldPanic"],[4,"TestResult"],[3,"TestExecTime"],[3,"TestTimeOptions"],[3,"TestDesc"],[3,"TestDescAndFn"],[4,"TestName"],[4,"TestType"],[3,"Bencher"],[3,"BenchSamples"],[3,"Metric"],[3,"MetricMap"],[8,"Stats"],[3,"Summary"],[4,"ColorConfig"],[4,"OutputFormat"],[4,"NamePadding"],[8,"TDynBenchFn"],[4,"TestFn"]]}\
}');
//addSearchOptions(searchIndex);initSearch(searchIndex);
module.exports = searchIndex;